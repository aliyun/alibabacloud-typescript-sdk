// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class ResetUserPasswordRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the directory.
   * 
   * @example
   * d-00fc2p61****
   */
  directoryId?: string;
  /**
   * @remarks
   * Specifies whether to enable the system to automatically generate a new password. Valid values:
   * 
   * *   True: The new password is automatically generated by the system.
   * *   False: The new password must be manually specified. This is the default value.
   * 
   * @example
   * True
   */
  generateRandomPassword?: boolean;
  /**
   * @remarks
   * The new password.
   * 
   * The password must contain the following types of characters: uppercase letters, lowercase letters, digits, and special characters.
   * 
   * The password must be 8 to 32 characters in length.
   * 
   * >  If you set `GenerateRandomPassword` to `False`, you must specify `Password`.
   * 
   * @example
   * uc)XK$?ictf72CKFDy9vtWaFmISl****
   */
  password?: string;
  /**
   * @remarks
   * Specifies whether password reset is required upon the next logon. Valid values:
   * 
   * *   True: Password reset is required upon the next logon.
   * *   False: Password reset is not required upon the next logon. This is the default value.
   * 
   * @example
   * False
   */
  requirePasswordResetForNextLogin?: boolean;
  /**
   * @remarks
   * The ID of the user.
   * 
   * @example
   * u-00q8wbq42wiltcrk****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      directoryId: 'DirectoryId',
      generateRandomPassword: 'GenerateRandomPassword',
      password: 'Password',
      requirePasswordResetForNextLogin: 'RequirePasswordResetForNextLogin',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      directoryId: 'string',
      generateRandomPassword: 'boolean',
      password: 'string',
      requirePasswordResetForNextLogin: 'boolean',
      userId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

