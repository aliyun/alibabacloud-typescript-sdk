// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';
import { EvaluationConfig } from "./EvaluationConfig";
import { ModelConfig } from "./ModelConfig";


export class ListOnlineEvalTasksResponseBodyTasksFilters extends $dara.Model {
  /**
   * @remarks
   * The key of the filter condition.
   * 
   * @example
   * ServiceId
   * ServiceName
   * Input
   * Output
   * Status
   * TraceType
   * SpanType
   * TraceName
   * SpanName
   */
  key?: string;
  /**
   * @remarks
   * The matching operator of the filter condition.
   * 
   * @example
   * =
   * StartsWith
   * Contains
   */
  operator?: string;
  /**
   * @remarks
   * The value of the filter condition.
   * 
   * @example
   * foo
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      operator: 'Operator',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      operator: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOnlineEvalTasksResponseBodyTasks extends $dara.Model {
  /**
   * @remarks
   * The Alibaba Cloud account (primary account) of the task creator.
   * 
   * @example
   * 1512522691911111
   */
  aliyunUid?: string;
  /**
   * @remarks
   * The name of the user application targeted by this task.
   * 
   * @example
   * my-llm-app
   */
  appName?: string;
  /**
   * @remarks
   * Task description information
   * 
   * @example
   * this task is for application evaluation
   */
  description?: string;
  evalResults?: string;
  /**
   * @remarks
   * Extract specific path values from JSON-formatted trace data as input for the evaluation operation. These JSON paths are defined in this EvaluationConfig structure.
   */
  evaluationConfig?: EvaluationConfig;
  /**
   * @remarks
   * The list define the search filter conditions for the evaluation task to search a certain amount of trace data generated by the user application, which serves as input data for the evaluation operation.
   */
  filters?: ListOnlineEvalTasksResponseBodyTasksFilters[];
  /**
   * @remarks
   * The UTC creation time of the task.
   * 
   * @example
   * 2025-04-07 13:24:35
   */
  gmtCreateTime?: string;
  /**
   * @remarks
   * Task UTC end time.
   * 
   * @example
   * 2025-04-09 13:24:35
   */
  gmtEndTime?: string;
  /**
   * @remarks
   * The UTC start time of the task.
   * 
   * @example
   * 2025-04-08 13:24:35
   */
  gmtStartTime?: string;
  /**
   * @remarks
   * Task ID.
   * 
   * @example
   * 9f50cd72efcf36535152ee811a911115
   */
  id?: string;
  /**
   * @remarks
   * Access configuration structure for the large model used internally by the evaluation task.
   */
  modelConfig?: ModelConfig;
  /**
   * @remarks
   * Task name.
   * 
   * @example
   * my-foo-evaluation-task
   */
  name?: string;
  recordCount?: number;
  /**
   * @remarks
   * The evaluation task needs to search for a certain amount of trace data generated by the user\\"s application as input data for the evaluation operation. This defines the time window for each data search.
   * 
   * @example
   * 12
   */
  samplingFrequencyMinutes?: number;
  /**
   * @remarks
   * The percentage of the data searched within a time window that is used as input data for the evaluation. For example, 100 means all the searched data is used as input, 20 means 20% of the searched data is randomly selected as input.
   * 
   * @example
   * 50
   */
  samplingRatio?: number;
  /**
   * @remarks
   * Task status
   * 
   * @example
   * CREATED
   * RUNNING
   * FINISHED
   * USER_CANCELED
   */
  status?: string;
  /**
   * @remarks
   * The Alibaba Cloud sub-account of the task creator.
   * 
   * @example
   * 2222222222
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      aliyunUid: 'AliyunUid',
      appName: 'AppName',
      description: 'Description',
      evalResults: 'EvalResults',
      evaluationConfig: 'EvaluationConfig',
      filters: 'Filters',
      gmtCreateTime: 'GmtCreateTime',
      gmtEndTime: 'GmtEndTime',
      gmtStartTime: 'GmtStartTime',
      id: 'Id',
      modelConfig: 'ModelConfig',
      name: 'Name',
      recordCount: 'RecordCount',
      samplingFrequencyMinutes: 'SamplingFrequencyMinutes',
      samplingRatio: 'SamplingRatio',
      status: 'Status',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      aliyunUid: 'string',
      appName: 'string',
      description: 'string',
      evalResults: 'string',
      evaluationConfig: EvaluationConfig,
      filters: { 'type': 'array', 'itemType': ListOnlineEvalTasksResponseBodyTasksFilters },
      gmtCreateTime: 'string',
      gmtEndTime: 'string',
      gmtStartTime: 'string',
      id: 'string',
      modelConfig: ModelConfig,
      name: 'string',
      recordCount: 'number',
      samplingFrequencyMinutes: 'number',
      samplingRatio: 'number',
      status: 'string',
      userId: 'string',
    };
  }

  validate() {
    if(this.evaluationConfig && typeof (this.evaluationConfig as any).validate === 'function') {
      (this.evaluationConfig as any).validate();
    }
    if(Array.isArray(this.filters)) {
      $dara.Model.validateArray(this.filters);
    }
    if(this.modelConfig && typeof (this.modelConfig as any).validate === 'function') {
      (this.modelConfig as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOnlineEvalTasksResponseBody extends $dara.Model {
  /**
   * @remarks
   * Internal error code. Set only when the response has an error.
   * 
   * @example
   * InvalidInputParams
   */
  code?: string;
  /**
   * @remarks
   * Response error message. Set only when the response has an error.
   * 
   * @example
   * page number should be greater than 0
   */
  message?: string;
  /**
   * @remarks
   * ID of the request
   * 
   * @example
   * 6F352A02-9C0D-54A7-B57C-663CF71D5714
   */
  requestId?: string;
  /**
   * @remarks
   * List of tasks.
   */
  tasks?: ListOnlineEvalTasksResponseBodyTasks[];
  /**
   * @remarks
   * Total number of tasks that meet the criteria.
   * 
   * @example
   * 22
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      message: 'Message',
      requestId: 'RequestId',
      tasks: 'Tasks',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
      tasks: { 'type': 'array', 'itemType': ListOnlineEvalTasksResponseBodyTasks },
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.tasks)) {
      $dara.Model.validateArray(this.tasks);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

