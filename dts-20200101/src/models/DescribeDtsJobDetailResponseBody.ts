// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';
import { DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo } from "./DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo";
import { DescribeDtsJobDetailResponseBodyDataSynchronizationStatus } from "./DescribeDtsJobDetailResponseBodyDataSynchronizationStatus";
import { DescribeDtsJobDetailResponseBodyDestinationEndpoint } from "./DescribeDtsJobDetailResponseBodyDestinationEndpoint";
import { DescribeDtsJobDetailResponseBodyMigrationMode } from "./DescribeDtsJobDetailResponseBodyMigrationMode";
import { DescribeDtsJobDetailResponseBodyRetryState } from "./DescribeDtsJobDetailResponseBodyRetryState";
import { DescribeDtsJobDetailResponseBodySourceEndpoint } from "./DescribeDtsJobDetailResponseBodySourceEndpoint";
import { DescribeDtsJobDetailResponseBodySubDistributedJob } from "./DescribeDtsJobDetailResponseBodySubDistributedJob";
import { DescribeDtsJobDetailResponseBodySubSyncJob } from "./DescribeDtsJobDetailResponseBodySubSyncJob";
import { DescribeDtsJobDetailResponseBodySubscriptionDataType } from "./DescribeDtsJobDetailResponseBodySubscriptionDataType";
import { DescribeDtsJobDetailResponseBodySubscriptionHost } from "./DescribeDtsJobDetailResponseBodySubscriptionHost";


export class DescribeDtsJobDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the new change tracking feature is used.
   * 
   * > This parameter is returned only for change tracking instances of the new version.
   * 
   * @example
   * new
   */
  appName?: string;
  /**
   * @remarks
   * The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2022-03-15T08:25:34Z
   */
  beginTimestamp?: string;
  /**
   * @remarks
   * The binary logs.
   * 
   * @example
   * ****
   */
  binlog?: string;
  /**
   * @remarks
   * The current offset.
   * 
   * @example
   * 156629109****
   */
  binlogSite?: string;
  /**
   * @remarks
   * The offset range.
   * 
   * @example
   * ****
   */
  binlogTime?: string;
  /**
   * @remarks
   * The time when the task was started. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2022-03-30T03:36:11.000
   */
  bootTime?: string;
  /**
   * @remarks
   * The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp. Unit: seconds.
   * 
   * @example
   * 1616405159
   */
  checkpoint?: number;
  /**
   * @remarks
   * The error code. This parameter will be removed in the future.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2022-03-23T07:30:31Z
   */
  consumptionCheckpoint?: string;
  /**
   * @remarks
   * The downstream client information in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.
   * 
   * @example
   * 114.***.***.**:dts********
   */
  consumptionClient?: string;
  /**
   * @remarks
   * The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2022-03-16T08:01:19Z
   */
  createTime?: string;
  /**
   * @remarks
   * The information about the data shipping channel.
   */
  dataDeliveryChannelInfo?: DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo;
  /**
   * @remarks
   * The state of incremental data migration or synchronization.
   */
  dataSynchronizationStatus?: DescribeDtsJobDetailResponseBodyDataSynchronizationStatus;
  /**
   * @remarks
   * The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.
   * 
   * @example
   * 2
   */
  databaseCount?: number;
  /**
   * @remarks
   * The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
   * 
   * @example
   * {\\"dtstestdata\\":{\\"all\\":true,\\"name\\":\\"dtstestdata\\",\\"state\\":\\"normal\\"}}
   */
  dbObject?: string;
  /**
   * @remarks
   * The dedicated cluster ID.
   * 
   * @example
   * dtsxxxxx
   */
  dedicatedClusterId?: string;
  /**
   * @remarks
   * The latency of incremental data migration or synchronization. Unit: milliseconds.
   * 
   * @example
   * 0
   */
  delay?: number;
  /**
   * @remarks
   * Indicates whether the task is a subtask. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  demoJob?: boolean;
  /**
   * @remarks
   * The network type of the consumer client. Valid values:
   * 
   * *   **CLASSIC**: classic network.
   * *   **VPC**: virtual private cloud (VPC).
   * 
   * @example
   * VPC
   */
  destNetType?: string;
  /**
   * @remarks
   * The connection settings of the destination instance.
   */
  destinationEndpoint?: DescribeDtsJobDetailResponseBodyDestinationEndpoint;
  /**
   * @remarks
   * The environment tag of the DTS instance. Valid values:
   * 
   * *   **normal******
   * *   **online******
   * 
   * @example
   * normal
   */
  dtsBisLabel?: string;
  /**
   * @remarks
   * The ID of the data migration, data synchronization, or change tracking instance.
   * 
   * @example
   * dtsi03e3zty16i****
   */
  dtsInstanceID?: string;
  /**
   * @remarks
   * The instance class.
   * 
   * > For more information about the description and test performance of each instance class, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html) and [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).
   * 
   * @example
   * xlarge
   */
  dtsJobClass?: string;
  /**
   * @remarks
   * The synchronization direction. Valid values:
   * 
   * *   **Forward**
   * *   **Reverse**
   * 
   * > This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.
   * 
   * @example
   * Forward
   */
  dtsJobDirection?: string;
  /**
   * @remarks
   * The ID of the data migration, data synchronization, or change tracking task.
   * 
   * @example
   * i03e3zty16i****
   */
  dtsJobId?: string;
  /**
   * @remarks
   * The name of the data migration, data synchronization, or change tracking task.
   * 
   * @example
   * api_test
   */
  dtsJobName?: string;
  /**
   * @remarks
   * The dynamic part in the error message. The value of this parameter is used to replace **%s** in the value of **ErrMessage**.
   * 
   * > For example, if the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the value of **DynamicMessage** is **DtsJobId**, the specified value of **DtsJobId** is invalid.
   * 
   * @example
   * DtsJobId
   */
  dynamicMessage?: string;
  /**
   * @remarks
   * The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2022-03-26T14:03:21Z
   */
  endTimestamp?: string;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * InternalError
   */
  errCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * The Value of Input Parameter %s is not valid.
   */
  errMessage?: string;
  /**
   * @remarks
   * The error message returned if the task failed.
   * 
   * @example
   * DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].
   */
  errorMessage?: string;
  /**
   * @remarks
   * The operator information of the ETL task.
   * 
   * > This parameter is returned only if you query the details of an ETL task.
   * 
   * @example
   * { 	"cells ": [{\\"shape\\":\\"edge\\",\\"attrs\\":{\\"line\\":{\\"stroke\\":\\"#b1b1b1\\",\\"strokeWidth\\":1,\\"targetMarker\\":{\\"name\\":\\"block\\",\\"args\\":{\\"size\\":\\"8\\"}},\\"strokeDasharray\\":\\"\\"}},\\"id\\":\\"cd1ec473-f9b9-4e9b-a742-ac23f442****\\",\\"source\\":{\\"cell\\":\\"8b261182-bfab-4803-ad8e-6bb08e3e****\\",\\"port\\":\\"out1\\"},\\"target\\":{\\"cell\\":\\"b36770df-f48c-4d6b-9644-54c5e924****\\",\\"port\\":\\"in1\\"},\\"zIndex\\":7 	}] }
   */
  etlCalculator?: string;
  /**
   * @remarks
   * The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * > This parameter is returned only if the return value of **PayType** is **PrePaid**.
   * 
   * @example
   * 2023-06-16T08:01:19Z
   */
  expireTime?: string;
  /**
   * @remarks
   * The time when the task was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2023-06-16T10:34:17Z
   */
  finishTime?: string;
  /**
   * @remarks
   * The resource group ID.
   * 
   * @example
   * rg-acfmzawhxxc****
   */
  groupId?: string;
  /**
   * @remarks
   * The returned HTTP status code.
   * 
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @remarks
   * The type of the DTS task. Valid values:
   * 
   * *   **sync**: a data synchronization task.
   * *   **subSync**: a subtask generated when the objects to be synchronized are modified.
   * 
   * > In most cases, this parameter is returned together with **TaskType**.
   * 
   * @example
   * sync
   */
  jobType?: string;
  /**
   * @remarks
   * The timestamp when the task was last updated.
   * 
   * @example
   * 156629109****
   */
  lastUpdateTime?: string;
  /**
   * @remarks
   * The maximum number of DUs.
   * 
   * > This parameter is supported only for serverless instances.
   * 
   * @example
   * 16
   */
  maxDu?: number;
  /**
   * @remarks
   * The migration types or initial synchronization types.
   */
  migrationMode?: DescribeDtsJobDetailResponseBodyMigrationMode;
  /**
   * @remarks
   * The minimum number of DUs.
   * 
   * > This parameter is supported only for serverless instances.
   * 
   * @example
   * 1
   */
  minDu?: number;
  /**
   * @remarks
   * The billing method of the DTS instance. Valid values:
   * 
   * *   **PrePaid**: subscription.
   * *   **PostPaid**: pay-as-you-go.
   * 
   * @example
   * PrePaid
   */
  payType?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 29207299-7C41-493A-BA4F-2FAC5DE4****
   */
  requestId?: string;
  /**
   * @remarks
   * The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, such as whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
   * 
   * @example
   * {\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}
   */
  reserved?: string;
  /**
   * @remarks
   * The resource group name.
   * 
   * @example
   * default resource group
   */
  resourceGroupDisplayName?: string;
  /**
   * @remarks
   * The resource group ID.
   * 
   * @example
   * rg-acfmzawhxxc****
   */
  resourceGroupId?: string;
  /**
   * @remarks
   * The information about the retries performed by DTS due to an exception.
   */
  retryState?: DescribeDtsJobDetailResponseBodyRetryState;
  /**
   * @remarks
   * The connection settings of the source instance.
   */
  sourceEndpoint?: DescribeDtsJobDetailResponseBodySourceEndpoint;
  /**
   * @remarks
   * The state of the data migration or synchronization task. Valid values:
   * 
   * *   **NotStarted**: The task is not started.
   * *   **NotConfigured**: The task is not configured.
   * *   **Prechecking**: The task is in precheck.
   * *   **PrecheckFailed**: The task failed to pass the precheck.
   * *   **PreCheckPass**: The task passed the precheck.
   * *   **Initializing**: Initial data synchronization is in progress.
   * *   **InitializeFailed**: Initial data synchronization failed.
   * *   **synchronizing**: Data synchronization is in progress.
   * *   **Migrating**: Data migration is in progress.
   * *   **Failed**: Data synchronization failed.
   * *   **MigrationFailed**: Data migration failed.
   * *   **Suspending**: The task is paused.
   * *   **Modifying**: The objects of the task are being modified.
   * *   **Retrying**: The task is being retried.
   * *   **Upgrade**: The task is being upgraded.
   * *   **Downgrade**: The task is being downgraded.
   * *   **Locked**: The task is locked.
   * *   **Finished**: The task is complete.
   * 
   * @example
   * Migrating
   */
  status?: string;
  /**
   * @remarks
   * The information about the subtasks in the current distributed task. If the DTS task is not a distributed task, the value of this parameter is null.
   * 
   * > This parameter is available only if the DTS task is a data synchronization task.
   */
  subDistributedJob?: DescribeDtsJobDetailResponseBodySubDistributedJob[];
  /**
   * @remarks
   * The information about the subtasks in the current data synchronization task.
   */
  subSyncJob?: DescribeDtsJobDetailResponseBodySubSyncJob[];
  /**
   * @remarks
   * The topic of the change tracking instance.
   * 
   * > This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.
   * 
   * @example
   * cn_hangzhou_rm_bp1162kryivb8****_dtstest_version2
   */
  subscribeTopic?: string;
  /**
   * @remarks
   * The type of data for change tracking.
   */
  subscriptionDataType?: DescribeDtsJobDetailResponseBodySubscriptionDataType;
  /**
   * @remarks
   * The endpoint of the change tracking instance.
   */
  subscriptionHost?: DescribeDtsJobDetailResponseBodySubscriptionHost;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The synchronization direction. Valid values:
   * 
   * *   **Forward**
   * *   **Reverse**
   * 
   * > 
   * 
   * *   The default value is **Forward**.
   * *   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
   * 
   * @example
   * Forward
   */
  synchronizationDirection?: string;
  /**
   * @remarks
   * The type of the task.
   * 
   * > In most cases, this parameter is returned together with **JobType**.
   * 
   * @example
   * Distributed_xxx
   */
  taskType?: string;
  static names(): { [key: string]: string } {
    return {
      appName: 'AppName',
      beginTimestamp: 'BeginTimestamp',
      binlog: 'Binlog',
      binlogSite: 'BinlogSite',
      binlogTime: 'BinlogTime',
      bootTime: 'BootTime',
      checkpoint: 'Checkpoint',
      code: 'Code',
      consumptionCheckpoint: 'ConsumptionCheckpoint',
      consumptionClient: 'ConsumptionClient',
      createTime: 'CreateTime',
      dataDeliveryChannelInfo: 'DataDeliveryChannelInfo',
      dataSynchronizationStatus: 'DataSynchronizationStatus',
      databaseCount: 'DatabaseCount',
      dbObject: 'DbObject',
      dedicatedClusterId: 'DedicatedClusterId',
      delay: 'Delay',
      demoJob: 'DemoJob',
      destNetType: 'DestNetType',
      destinationEndpoint: 'DestinationEndpoint',
      dtsBisLabel: 'DtsBisLabel',
      dtsInstanceID: 'DtsInstanceID',
      dtsJobClass: 'DtsJobClass',
      dtsJobDirection: 'DtsJobDirection',
      dtsJobId: 'DtsJobId',
      dtsJobName: 'DtsJobName',
      dynamicMessage: 'DynamicMessage',
      endTimestamp: 'EndTimestamp',
      errCode: 'ErrCode',
      errMessage: 'ErrMessage',
      errorMessage: 'ErrorMessage',
      etlCalculator: 'EtlCalculator',
      expireTime: 'ExpireTime',
      finishTime: 'FinishTime',
      groupId: 'GroupId',
      httpStatusCode: 'HttpStatusCode',
      jobType: 'JobType',
      lastUpdateTime: 'LastUpdateTime',
      maxDu: 'MaxDu',
      migrationMode: 'MigrationMode',
      minDu: 'MinDu',
      payType: 'PayType',
      requestId: 'RequestId',
      reserved: 'Reserved',
      resourceGroupDisplayName: 'ResourceGroupDisplayName',
      resourceGroupId: 'ResourceGroupId',
      retryState: 'RetryState',
      sourceEndpoint: 'SourceEndpoint',
      status: 'Status',
      subDistributedJob: 'SubDistributedJob',
      subSyncJob: 'SubSyncJob',
      subscribeTopic: 'SubscribeTopic',
      subscriptionDataType: 'SubscriptionDataType',
      subscriptionHost: 'SubscriptionHost',
      success: 'Success',
      synchronizationDirection: 'SynchronizationDirection',
      taskType: 'TaskType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appName: 'string',
      beginTimestamp: 'string',
      binlog: 'string',
      binlogSite: 'string',
      binlogTime: 'string',
      bootTime: 'string',
      checkpoint: 'number',
      code: 'number',
      consumptionCheckpoint: 'string',
      consumptionClient: 'string',
      createTime: 'string',
      dataDeliveryChannelInfo: DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo,
      dataSynchronizationStatus: DescribeDtsJobDetailResponseBodyDataSynchronizationStatus,
      databaseCount: 'number',
      dbObject: 'string',
      dedicatedClusterId: 'string',
      delay: 'number',
      demoJob: 'boolean',
      destNetType: 'string',
      destinationEndpoint: DescribeDtsJobDetailResponseBodyDestinationEndpoint,
      dtsBisLabel: 'string',
      dtsInstanceID: 'string',
      dtsJobClass: 'string',
      dtsJobDirection: 'string',
      dtsJobId: 'string',
      dtsJobName: 'string',
      dynamicMessage: 'string',
      endTimestamp: 'string',
      errCode: 'string',
      errMessage: 'string',
      errorMessage: 'string',
      etlCalculator: 'string',
      expireTime: 'string',
      finishTime: 'string',
      groupId: 'string',
      httpStatusCode: 'number',
      jobType: 'string',
      lastUpdateTime: 'string',
      maxDu: 'number',
      migrationMode: DescribeDtsJobDetailResponseBodyMigrationMode,
      minDu: 'number',
      payType: 'string',
      requestId: 'string',
      reserved: 'string',
      resourceGroupDisplayName: 'string',
      resourceGroupId: 'string',
      retryState: DescribeDtsJobDetailResponseBodyRetryState,
      sourceEndpoint: DescribeDtsJobDetailResponseBodySourceEndpoint,
      status: 'string',
      subDistributedJob: { 'type': 'array', 'itemType': DescribeDtsJobDetailResponseBodySubDistributedJob },
      subSyncJob: { 'type': 'array', 'itemType': DescribeDtsJobDetailResponseBodySubSyncJob },
      subscribeTopic: 'string',
      subscriptionDataType: DescribeDtsJobDetailResponseBodySubscriptionDataType,
      subscriptionHost: DescribeDtsJobDetailResponseBodySubscriptionHost,
      success: 'boolean',
      synchronizationDirection: 'string',
      taskType: 'string',
    };
  }

  validate() {
    if(this.dataDeliveryChannelInfo && typeof (this.dataDeliveryChannelInfo as any).validate === 'function') {
      (this.dataDeliveryChannelInfo as any).validate();
    }
    if(this.dataSynchronizationStatus && typeof (this.dataSynchronizationStatus as any).validate === 'function') {
      (this.dataSynchronizationStatus as any).validate();
    }
    if(this.destinationEndpoint && typeof (this.destinationEndpoint as any).validate === 'function') {
      (this.destinationEndpoint as any).validate();
    }
    if(this.migrationMode && typeof (this.migrationMode as any).validate === 'function') {
      (this.migrationMode as any).validate();
    }
    if(this.retryState && typeof (this.retryState as any).validate === 'function') {
      (this.retryState as any).validate();
    }
    if(this.sourceEndpoint && typeof (this.sourceEndpoint as any).validate === 'function') {
      (this.sourceEndpoint as any).validate();
    }
    if(Array.isArray(this.subDistributedJob)) {
      $dara.Model.validateArray(this.subDistributedJob);
    }
    if(Array.isArray(this.subSyncJob)) {
      $dara.Model.validateArray(this.subSyncJob);
    }
    if(this.subscriptionDataType && typeof (this.subscriptionDataType as any).validate === 'function') {
      (this.subscriptionDataType as any).validate();
    }
    if(this.subscriptionHost && typeof (this.subscriptionHost as any).validate === 'function') {
      (this.subscriptionHost as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

