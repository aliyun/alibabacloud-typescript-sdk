// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';
import { DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus } from "./DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus";
import { DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus } from "./DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus";
import { DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus } from "./DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus";
import { DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus } from "./DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus";
import { DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint } from "./DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint";
import { DescribeDtsJobsResponseBodyDtsJobListErrorDetails } from "./DescribeDtsJobsResponseBodyDtsJobListErrorDetails";
import { DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus } from "./DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus";
import { DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus } from "./DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus";
import { DescribeDtsJobsResponseBodyDtsJobListMigrationMode } from "./DescribeDtsJobsResponseBodyDtsJobListMigrationMode";
import { DescribeDtsJobsResponseBodyDtsJobListPerformance } from "./DescribeDtsJobsResponseBodyDtsJobListPerformance";
import { DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus } from "./DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus";
import { DescribeDtsJobsResponseBodyDtsJobListRetryState } from "./DescribeDtsJobsResponseBodyDtsJobListRetryState";
import { DescribeDtsJobsResponseBodyDtsJobListReverseJob } from "./DescribeDtsJobsResponseBodyDtsJobListReverseJob";
import { DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint } from "./DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint";
import { DescribeDtsJobsResponseBodyDtsJobListStructureDataCheckStatus } from "./DescribeDtsJobsResponseBodyDtsJobListStructureDataCheckStatus";
import { DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus } from "./DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus";
import { DescribeDtsJobsResponseBodyDtsJobListTagList } from "./DescribeDtsJobsResponseBodyDtsJobListTagList";


export class DescribeDtsJobsResponseBodyDtsJobList extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the **new** change tracking feature is used.
   * 
   * >  This parameter is returned only for change tracking instances of the new version.
   * 
   * @example
   * new
   */
  appName?: string;
  /**
   * @remarks
   * The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2021-03-15T08:25:34Z
   */
  beginTimestamp?: string;
  /**
   * @remarks
   * The start offset of incremental data synchronization. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1616899019
   */
  checkpoint?: string;
  /**
   * @remarks
   * The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2021-03-23T07:30:31Z
   */
  consumptionCheckpoint?: string;
  /**
   * @remarks
   * The downstream client information, in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.
   * 
   * @example
   * 114...:dts******
   */
  consumptionClient?: string;
  /**
   * @remarks
   * The CPU utilization of the instance. Unit: percentage.
   * 
   * @example
   * 1
   */
  cpuUsage?: string;
  /**
   * @remarks
   * The point in time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2021-03-16T08:01:19Z
   */
  createTime?: string;
  /**
   * @remarks
   * The state of the physical gateway-based migration task.
   */
  dataCloudStatus?: DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus;
  /**
   * @remarks
   * The state of the extract, transform, and load (ETL) task. Valid values:
   * 
   * >  This parameter collection is returned only if an ETL task is configured.
   */
  dataEtlStatus?: DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus;
  /**
   * @remarks
   * The state of full data synchronization.
   */
  dataInitializationStatus?: DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus;
  /**
   * @remarks
   * The state of incremental data migration or synchronization.
   */
  dataSynchronizationStatus?: DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus;
  /**
   * @remarks
   * The objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see "Objects of DTS tasks".
   * 
   * @example
   * {"dtstestdata": { "name": "dtstestdata", "all": true }}
   */
  dbObject?: string;
  /**
   * @remarks
   * The ID of the DTS dedicated cluster on which a DTS task runs.
   * 
   * @example
   * dtscluster_ft7y3**********
   */
  dedicatedClusterId?: string;
  /**
   * @remarks
   * The latency of incremental data synchronization. Unit: seconds.
   * 
   * @example
   * 0
   */
  delay?: number;
  /**
   * @remarks
   * The connection settings of the destination instance.
   */
  destinationEndpoint?: DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint;
  /**
   * @remarks
   * The environment tag of the DTS instance. Valid values:
   * 
   * - **normal**
   * - **online**
   * 
   * @example
   * normal
   */
  dtsBisLabel?: string;
  /**
   * @remarks
   * The ID of the data synchronization instance.
   * 
   * @example
   * dtsi03e3zty16i****
   */
  dtsInstanceID?: string;
  /**
   * @remarks
   * The instance class.
   * 
   * >  For more information about the test performance of each instance class, see [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).
   * 
   * @example
   * large
   */
  dtsJobClass?: string;
  /**
   * @remarks
   * The synchronization direction. The value is **Reverse**.
   * 
   * @example
   * Forward
   */
  dtsJobDirection?: string;
  /**
   * @remarks
   * The ID of the data synchronization task.
   * 
   * @example
   * i03e3zty16i****
   */
  dtsJobId?: string;
  /**
   * @remarks
   * The name of the data synchronization task.
   * 
   * @example
   * RDS_TO_RDS_MIGRATION
   */
  dtsJobName?: string;
  /**
   * @remarks
   * The DTS Units (DUs) usage of a task in a DTS dedicated cluster.
   * 
   * @example
   * 12.0%
   */
  duRealUsage?: string;
  /**
   * @remarks
   * The number of DUs that have been used.
   * 
   * @example
   * 15
   */
  duUsage?: number;
  /**
   * @remarks
   * The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2021-03-26T14:03:21Z
   */
  endTimestamp?: string;
  /**
   * @remarks
   * The error message returned.
   */
  errorDetails?: DescribeDtsJobsResponseBodyDtsJobListErrorDetails[];
  /**
   * @remarks
   * The error message returned if the task failed.
   * 
   * @example
   * DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].
   */
  errorMessage?: string;
  /**
   * @remarks
   * The checkpoint of the ETL task.
   * 
   * @example
   * 1610540493
   */
  etlSafeCheckpoint?: string;
  /**
   * @remarks
   * The point in time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * >  This parameter is returned only if the value of the **PayType** parameter is **PrePaid**.
   * 
   * @example
   * 2022-03-16T08:01:19Z
   */
  expireTime?: string;
  /**
   * @remarks
   * The state information about the full data verification task.
   */
  fullDataCheckStatus?: DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus;
  /**
   * @remarks
   * The state information about the incremental data verification task.
   */
  incDataCheckStatus?: DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus;
  /**
   * @remarks
   * The type of the DTS task. Valid values:
   * 
   * - **MIGRATION**: data migration task 
   * - **SYNC**: data synchronization task 
   * - **SUBSCRIBE**: change tracking task
   * 
   * @example
   * MIGRATION
   */
  jobType?: string;
  /**
   * @remarks
   * Upper limit of DU.
   * 
   * > Only supported by Serverless instances.
   * 
   * @example
   * 16
   */
  maxDu?: number;
  /**
   * @remarks
   * The memory that has been used. Unit: MB.
   * 
   * @example
   * 500
   */
  memUsage?: string;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * dts.retry.err.0046
   */
  migrationErrCode?: string;
  /**
   * @remarks
   * The ID of the error code-related documentation.
   * 
   * @example
   * 462133
   */
  migrationErrHelpDocId?: string;
  /**
   * @remarks
   * The key of the error code-related documentation.
   * 
   * @example
   * DTS-RETRY-ERR-0046
   */
  migrationErrHelpDocKey?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * dts.retry.err.0046.msg
   */
  migrationErrMsg?: string;
  /**
   * @remarks
   * The type of the error code.
   * 
   * @example
   * ForeignKey
   */
  migrationErrType?: string;
  /**
   * @remarks
   * The solution to the error.
   * 
   * @example
   * dts.retry.err.0046.workaround
   */
  migrationErrWorkaround?: string;
  /**
   * @remarks
   * The migration or synchronization modes.
   */
  migrationMode?: DescribeDtsJobsResponseBodyDtsJobListMigrationMode;
  /**
   * @remarks
   * Lower limit of DU.
   * 
   * > Only supported by Serverless instances.
   * 
   * @example
   * 1
   */
  minDu?: number;
  /**
   * @remarks
   * The source of the task. Valid values:
   * 
   * *   **PTS**
   * *   **DMS**
   * *   **DTS**
   * 
   * @example
   * DTS
   */
  originType?: string;
  /**
   * @remarks
   * The billing method of the DTS instance. Valid values:
   * 
   * *   **PrePaid**: subscription
   * *   **PostPaid**: pay-as-you-go
   * 
   * @example
   * PrePaid
   */
  payType?: string;
  /**
   * @remarks
   * The performance of the data migration or synchronization instance.
   */
  performance?: DescribeDtsJobsResponseBodyDtsJobListPerformance;
  /**
   * @remarks
   * The precheck state.
   */
  precheckStatus?: DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus;
  /**
   * @remarks
   * The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
   * 
   * @example
   * {\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}
   */
  reserved?: string;
  /**
   * @remarks
   * The name of the resource group.
   * 
   * @example
   * default resource group
   */
  resourceGroupDisplayName?: string;
  /**
   * @remarks
   * The resource group ID.
   * 
   * @example
   * rg-acfmzawhxxc****
   */
  resourceGroupId?: string;
  /**
   * @remarks
   * The information about the retries performed by DTS due to an exception.
   */
  retryState?: DescribeDtsJobsResponseBodyDtsJobListRetryState;
  /**
   * @remarks
   * The details of the data synchronization task in the reverse direction. 
   * 
   * > This parameter is returned only for two-way data synchronization tasks.
   */
  reverseJob?: DescribeDtsJobsResponseBodyDtsJobListReverseJob;
  /**
   * @remarks
   * The connection settings of the source instance.
   */
  sourceEndpoint?: DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint;
  /**
   * @remarks
   * The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.
   * 
   * @example
   * Migrating
   */
  status?: string;
  structureDataCheckStatus?: DescribeDtsJobsResponseBodyDtsJobListStructureDataCheckStatus;
  /**
   * @remarks
   * The state of schema migration or initial schema synchronization.
   */
  structureInitializationStatus?: DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus;
  /**
   * @remarks
   * The tags of the task.
   */
  tagList?: DescribeDtsJobsResponseBodyDtsJobListTagList[];
  static names(): { [key: string]: string } {
    return {
      appName: 'AppName',
      beginTimestamp: 'BeginTimestamp',
      checkpoint: 'Checkpoint',
      consumptionCheckpoint: 'ConsumptionCheckpoint',
      consumptionClient: 'ConsumptionClient',
      cpuUsage: 'CpuUsage',
      createTime: 'CreateTime',
      dataCloudStatus: 'DataCloudStatus',
      dataEtlStatus: 'DataEtlStatus',
      dataInitializationStatus: 'DataInitializationStatus',
      dataSynchronizationStatus: 'DataSynchronizationStatus',
      dbObject: 'DbObject',
      dedicatedClusterId: 'DedicatedClusterId',
      delay: 'Delay',
      destinationEndpoint: 'DestinationEndpoint',
      dtsBisLabel: 'DtsBisLabel',
      dtsInstanceID: 'DtsInstanceID',
      dtsJobClass: 'DtsJobClass',
      dtsJobDirection: 'DtsJobDirection',
      dtsJobId: 'DtsJobId',
      dtsJobName: 'DtsJobName',
      duRealUsage: 'DuRealUsage',
      duUsage: 'DuUsage',
      endTimestamp: 'EndTimestamp',
      errorDetails: 'ErrorDetails',
      errorMessage: 'ErrorMessage',
      etlSafeCheckpoint: 'EtlSafeCheckpoint',
      expireTime: 'ExpireTime',
      fullDataCheckStatus: 'FullDataCheckStatus',
      incDataCheckStatus: 'IncDataCheckStatus',
      jobType: 'JobType',
      maxDu: 'MaxDu',
      memUsage: 'MemUsage',
      migrationErrCode: 'MigrationErrCode',
      migrationErrHelpDocId: 'MigrationErrHelpDocId',
      migrationErrHelpDocKey: 'MigrationErrHelpDocKey',
      migrationErrMsg: 'MigrationErrMsg',
      migrationErrType: 'MigrationErrType',
      migrationErrWorkaround: 'MigrationErrWorkaround',
      migrationMode: 'MigrationMode',
      minDu: 'MinDu',
      originType: 'OriginType',
      payType: 'PayType',
      performance: 'Performance',
      precheckStatus: 'PrecheckStatus',
      reserved: 'Reserved',
      resourceGroupDisplayName: 'ResourceGroupDisplayName',
      resourceGroupId: 'ResourceGroupId',
      retryState: 'RetryState',
      reverseJob: 'ReverseJob',
      sourceEndpoint: 'SourceEndpoint',
      status: 'Status',
      structureDataCheckStatus: 'StructureDataCheckStatus',
      structureInitializationStatus: 'StructureInitializationStatus',
      tagList: 'TagList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appName: 'string',
      beginTimestamp: 'string',
      checkpoint: 'string',
      consumptionCheckpoint: 'string',
      consumptionClient: 'string',
      cpuUsage: 'string',
      createTime: 'string',
      dataCloudStatus: DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus,
      dataEtlStatus: DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus,
      dataInitializationStatus: DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus,
      dataSynchronizationStatus: DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus,
      dbObject: 'string',
      dedicatedClusterId: 'string',
      delay: 'number',
      destinationEndpoint: DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint,
      dtsBisLabel: 'string',
      dtsInstanceID: 'string',
      dtsJobClass: 'string',
      dtsJobDirection: 'string',
      dtsJobId: 'string',
      dtsJobName: 'string',
      duRealUsage: 'string',
      duUsage: 'number',
      endTimestamp: 'string',
      errorDetails: { 'type': 'array', 'itemType': DescribeDtsJobsResponseBodyDtsJobListErrorDetails },
      errorMessage: 'string',
      etlSafeCheckpoint: 'string',
      expireTime: 'string',
      fullDataCheckStatus: DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus,
      incDataCheckStatus: DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus,
      jobType: 'string',
      maxDu: 'number',
      memUsage: 'string',
      migrationErrCode: 'string',
      migrationErrHelpDocId: 'string',
      migrationErrHelpDocKey: 'string',
      migrationErrMsg: 'string',
      migrationErrType: 'string',
      migrationErrWorkaround: 'string',
      migrationMode: DescribeDtsJobsResponseBodyDtsJobListMigrationMode,
      minDu: 'number',
      originType: 'string',
      payType: 'string',
      performance: DescribeDtsJobsResponseBodyDtsJobListPerformance,
      precheckStatus: DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus,
      reserved: 'string',
      resourceGroupDisplayName: 'string',
      resourceGroupId: 'string',
      retryState: DescribeDtsJobsResponseBodyDtsJobListRetryState,
      reverseJob: DescribeDtsJobsResponseBodyDtsJobListReverseJob,
      sourceEndpoint: DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint,
      status: 'string',
      structureDataCheckStatus: DescribeDtsJobsResponseBodyDtsJobListStructureDataCheckStatus,
      structureInitializationStatus: DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus,
      tagList: { 'type': 'array', 'itemType': DescribeDtsJobsResponseBodyDtsJobListTagList },
    };
  }

  validate() {
    if(this.dataCloudStatus && typeof (this.dataCloudStatus as any).validate === 'function') {
      (this.dataCloudStatus as any).validate();
    }
    if(this.dataEtlStatus && typeof (this.dataEtlStatus as any).validate === 'function') {
      (this.dataEtlStatus as any).validate();
    }
    if(this.dataInitializationStatus && typeof (this.dataInitializationStatus as any).validate === 'function') {
      (this.dataInitializationStatus as any).validate();
    }
    if(this.dataSynchronizationStatus && typeof (this.dataSynchronizationStatus as any).validate === 'function') {
      (this.dataSynchronizationStatus as any).validate();
    }
    if(this.destinationEndpoint && typeof (this.destinationEndpoint as any).validate === 'function') {
      (this.destinationEndpoint as any).validate();
    }
    if(Array.isArray(this.errorDetails)) {
      $dara.Model.validateArray(this.errorDetails);
    }
    if(this.fullDataCheckStatus && typeof (this.fullDataCheckStatus as any).validate === 'function') {
      (this.fullDataCheckStatus as any).validate();
    }
    if(this.incDataCheckStatus && typeof (this.incDataCheckStatus as any).validate === 'function') {
      (this.incDataCheckStatus as any).validate();
    }
    if(this.migrationMode && typeof (this.migrationMode as any).validate === 'function') {
      (this.migrationMode as any).validate();
    }
    if(this.performance && typeof (this.performance as any).validate === 'function') {
      (this.performance as any).validate();
    }
    if(this.precheckStatus && typeof (this.precheckStatus as any).validate === 'function') {
      (this.precheckStatus as any).validate();
    }
    if(this.retryState && typeof (this.retryState as any).validate === 'function') {
      (this.retryState as any).validate();
    }
    if(this.reverseJob && typeof (this.reverseJob as any).validate === 'function') {
      (this.reverseJob as any).validate();
    }
    if(this.sourceEndpoint && typeof (this.sourceEndpoint as any).validate === 'function') {
      (this.sourceEndpoint as any).validate();
    }
    if(this.structureDataCheckStatus && typeof (this.structureDataCheckStatus as any).validate === 'function') {
      (this.structureDataCheckStatus as any).validate();
    }
    if(this.structureInitializationStatus && typeof (this.structureInitializationStatus as any).validate === 'function') {
      (this.structureInitializationStatus as any).validate();
    }
    if(Array.isArray(this.tagList)) {
      $dara.Model.validateArray(this.tagList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

