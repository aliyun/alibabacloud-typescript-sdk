// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';
import { DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus } from "./DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus";
import { DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus } from "./DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus";
import { DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus } from "./DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus";
import { DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint } from "./DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint";
import { DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode } from "./DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode";
import { DescribeDtsJobDetailResponseBodySubSyncJobPerformance } from "./DescribeDtsJobDetailResponseBodySubSyncJobPerformance";
import { DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus } from "./DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus";
import { DescribeDtsJobDetailResponseBodySubSyncJobRetryState } from "./DescribeDtsJobDetailResponseBodySubSyncJobRetryState";
import { DescribeDtsJobDetailResponseBodySubSyncJobReverseJob } from "./DescribeDtsJobDetailResponseBodySubSyncJobReverseJob";
import { DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint } from "./DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint";
import { DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus } from "./DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus";
import { DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType } from "./DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType";
import { DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost } from "./DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost";
import { DescribeDtsJobDetailResponseBodySubSyncJobTagList } from "./DescribeDtsJobDetailResponseBodySubSyncJobTagList";


export class DescribeDtsJobDetailResponseBodySubSyncJob extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the new change tracking feature is used.
   * 
   * > This parameter is returned only for change tracking instances of the new version.
   * 
   * @example
   * new
   */
  appName?: string;
  /**
   * @remarks
   * The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2022-03-15T08:25:34Z
   */
  beginTimestamp?: string;
  /**
   * @remarks
   * The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp. Unit: seconds.
   * 
   * @example
   * 1616405159
   */
  checkpoint?: string;
  /**
   * @remarks
   * The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2022-03-23T07:30:31Z
   */
  consumptionCheckpoint?: string;
  /**
   * @remarks
   * The downstream client information in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.
   * 
   * @example
   * 114.***.***.**:dts********
   */
  consumptionClient?: string;
  /**
   * @remarks
   * The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2023-01-12T08:34:11Z
   */
  createTime?: string;
  /**
   * @remarks
   * The state of the ETL task.
   * 
   * > This parameter collection is returned only if an ETL task is configured.
   */
  dataEtlStatus?: DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus;
  /**
   * @remarks
   * The state of full data migration or initial full data synchronization.
   */
  dataInitializationStatus?: DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus;
  /**
   * @remarks
   * The state of incremental data migration or synchronization.
   */
  dataSynchronizationStatus?: DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus;
  /**
   * @remarks
   * The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.
   * 
   * @example
   * 2
   */
  databaseCount?: number;
  /**
   * @remarks
   * The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
   * 
   * @example
   * {\\"dtstestdata\\":{\\"all\\":true,\\"name\\":\\"dtstestdata\\",\\"state\\":\\"normal\\"}}
   */
  dbObject?: string;
  /**
   * @remarks
   * The latency of incremental data migration or synchronization. Unit: milliseconds.
   * 
   * @example
   * 0
   */
  delay?: number;
  /**
   * @remarks
   * The network type of the consumer client. Valid values:
   * 
   * *   **CLASSIC**: classic network.
   * *   **VPC**: VPC.
   * 
   * @example
   * VPC
   */
  destNetType?: string;
  /**
   * @remarks
   * The connection settings of the destination instance.
   */
  destinationEndpoint?: DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint;
  /**
   * @remarks
   * The DTS instance ID.
   * 
   * @example
   * dtsnjuc14kp12u****
   */
  dtsInstanceID?: string;
  /**
   * @remarks
   * The instance class.
   * 
   * @example
   * xlarge
   */
  dtsJobClass?: string;
  /**
   * @remarks
   * The synchronization direction. Valid values:
   * 
   * *   **Forward**
   * *   **Reverse**
   * 
   * > This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.
   * 
   * @example
   * Forward
   */
  dtsJobDirection?: string;
  /**
   * @remarks
   * The DTS task ID.
   * 
   * @example
   * m06j1g92124****
   */
  dtsJobId?: string;
  /**
   * @remarks
   * The DTS instance name.
   * 
   * @example
   * dtstest****
   */
  dtsJobName?: string;
  /**
   * @remarks
   * The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2022-03-26T14:03:21Z
   */
  endTimestamp?: string;
  /**
   * @remarks
   * The error message returned if the task failed.
   * 
   * @example
   * DTS-070211: Connect Source DB failed. cause by ****
   */
  errorMessage?: string;
  /**
   * @remarks
   * The operator information of the ETL task.
   * 
   * > This parameter is returned only if you query the details of an ETL task.
   * 
   * @example
   * { "cells ": [{\\"shape\\":\\"edge\\",\\"attrs\\":{\\"line\\":{\\"stroke\\":\\"#b1b1b1\\",\\"strokeWidth\\":1,\\"targetMarker\\":{\\"name\\":\\"block\\",\\"args\\":{\\"size\\":\\"8\\"}},\\"strokeDasharray\\":\\"\\"}},\\"id\\":\\"cd1ec473-f9b9-4e9b-a742-ac23f442****\\",\\"source\\":{\\"cell\\":\\"8b261182-bfab-4803-ad8e-6bb08e3e****\\",\\"port\\":\\"out1\\"},\\"target\\":{\\"cell\\":\\"b36770df-f48c-4d6b-9644-54c5e924****\\",\\"port\\":\\"in1\\"},\\"zIndex\\":7 }] }
   */
  etlCalculator?: string;
  /**
   * @remarks
   * The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * > This parameter is returned only if the return value of **PayType** is **PrePaid**.
   * 
   * @example
   * 2023-06-16T08:01:19Z
   */
  expireTime?: string;
  /**
   * @remarks
   * The time when the task was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
   * 
   * @example
   * 2023-06-16T10:34:17Z
   */
  finishTime?: string;
  /**
   * @remarks
   * The resource group ID.
   * 
   * @example
   * rg-acfmzawhxxc****
   */
  groupId?: string;
  /**
   * @remarks
   * Indicates whether the task is a subtask. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  isDemoJob?: boolean;
  /**
   * @remarks
   * The type of the DTS task. Valid values:
   * 
   * *   **online**: data migration task.
   * *   **SYNC**: data synchronization task.
   * *   **SUBSCRIBE**: change tracking task.
   * 
   * @example
   * SYNC
   */
  jobType?: string;
  /**
   * @remarks
   * The maximum number of DUs.
   * 
   * > This parameter is supported only for serverless instances.
   * 
   * @example
   * 16
   */
  maxDu?: number;
  /**
   * @remarks
   * The migration types or initial synchronization types.
   */
  migrationMode?: DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode;
  /**
   * @remarks
   * The minimum number of DUs.
   * 
   * > This parameter is supported only for serverless instances.
   * 
   * @example
   * 1
   */
  minDu?: number;
  /**
   * @remarks
   * The source of the task. Valid values:
   * 
   * *   **PTS**
   * *   **DMS**
   * *   **DTS**
   * 
   * @example
   * PTS
   */
  originType?: string;
  /**
   * @remarks
   * The billing method. Valid values:
   * 
   * *   **PrePaid**: subscription.
   * *   **PostPaid**: pay-as-you-go.
   * 
   * @example
   * PrePaid
   */
  payType?: string;
  /**
   * @remarks
   * The performance of the data migration or synchronization instance.
   */
  performance?: DescribeDtsJobDetailResponseBodySubSyncJobPerformance;
  /**
   * @remarks
   * The precheck state.
   */
  precheckStatus?: DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus;
  /**
   * @remarks
   * The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, such as whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
   * 
   * @example
   * {\\"srcHostPorts\\":\\"\\",\\"whitelist.dms.online.ddl.enable\\":false,\\"filterDDL\\":false,\\"sqlparser.dms.original.ddl\\":true,\\"srcOracleType\\":\\"sid\\",\\"maxRetryTime\\":43200,\\"destSSL\\":\\"0\\",\\"destOracleType\\":\\"sid\\",\\"srcSSL\\":\\"0\\",\\"dbListCaseChangeMode\\":\\"default\\",\\"SourceEngineVersion\\":\\"8.0.18\\",\\"srcNetType\\":\\"VPC\\",\\"destNetType\\":\\"VPC\\",\\"srcVpcNetMappingInst\\":\\"172.16.1**.**:10803\\",\\"destVpcNetMappingInst\\":\\"172.16.1**.**:11077\\",\\"useJobTask\\":\\"1\\"}
   */
  reserved?: string;
  /**
   * @remarks
   * The information about the retries performed by DTS due to an exception.
   */
  retryState?: DescribeDtsJobDetailResponseBodySubSyncJobRetryState;
  /**
   * @remarks
   * The details of the data synchronization task in the reverse direction.
   * 
   * > This parameter is returned only for two-way data synchronization tasks.
   */
  reverseJob?: DescribeDtsJobDetailResponseBodySubSyncJobReverseJob;
  /**
   * @remarks
   * The connection settings of the source instance.
   */
  sourceEndpoint?: DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint;
  /**
   * @remarks
   * The state of initial schema synchronization. Valid values:
   * 
   * *   **NotStarted**: The task is not started.
   * *   **Migrating**: The task is in progress.
   * *   **Failed**: The task failed.
   * *   **Finished**: The task is complete.
   * 
   * @example
   * Finished
   */
  status?: string;
  /**
   * @remarks
   * Initialization status of library table structure.
   */
  structureInitializationStatus?: DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus;
  /**
   * @remarks
   * The information about the subtasks in the current data synchronization task.
   */
  subSyncJob?: any[];
  /**
   * @remarks
   * The topic of the change tracking instance.
   * 
   * > This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.
   * 
   * @example
   * cn_hangzhou_rm_bp1162kryivb8****_dtstest_version2
   */
  subscribeTopic?: string;
  /**
   * @remarks
   * The type of data for change tracking.
   */
  subscriptionDataType?: DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType;
  /**
   * @remarks
   * The endpoint of the change tracking instance.
   */
  subscriptionHost?: DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost;
  /**
   * @remarks
   * The synchronization direction. Valid values:
   * 
   * *   **Forward**
   * *   **Reverse**
   * 
   * > 
   * 
   * *   The default value is **Forward**.
   * *   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
   * 
   * @example
   * Forward
   */
  synchronizationDirection?: string;
  /**
   * @remarks
   * The tags of the task.
   */
  tagList?: DescribeDtsJobDetailResponseBodySubSyncJobTagList[];
  /**
   * @remarks
   * The task type.
   * 
   * @example
   * rds
   */
  taskType?: string;
  static names(): { [key: string]: string } {
    return {
      appName: 'AppName',
      beginTimestamp: 'BeginTimestamp',
      checkpoint: 'Checkpoint',
      consumptionCheckpoint: 'ConsumptionCheckpoint',
      consumptionClient: 'ConsumptionClient',
      createTime: 'CreateTime',
      dataEtlStatus: 'DataEtlStatus',
      dataInitializationStatus: 'DataInitializationStatus',
      dataSynchronizationStatus: 'DataSynchronizationStatus',
      databaseCount: 'DatabaseCount',
      dbObject: 'DbObject',
      delay: 'Delay',
      destNetType: 'DestNetType',
      destinationEndpoint: 'DestinationEndpoint',
      dtsInstanceID: 'DtsInstanceID',
      dtsJobClass: 'DtsJobClass',
      dtsJobDirection: 'DtsJobDirection',
      dtsJobId: 'DtsJobId',
      dtsJobName: 'DtsJobName',
      endTimestamp: 'EndTimestamp',
      errorMessage: 'ErrorMessage',
      etlCalculator: 'EtlCalculator',
      expireTime: 'ExpireTime',
      finishTime: 'FinishTime',
      groupId: 'GroupId',
      isDemoJob: 'IsDemoJob',
      jobType: 'JobType',
      maxDu: 'MaxDu',
      migrationMode: 'MigrationMode',
      minDu: 'MinDu',
      originType: 'OriginType',
      payType: 'PayType',
      performance: 'Performance',
      precheckStatus: 'PrecheckStatus',
      reserved: 'Reserved',
      retryState: 'RetryState',
      reverseJob: 'ReverseJob',
      sourceEndpoint: 'SourceEndpoint',
      status: 'Status',
      structureInitializationStatus: 'StructureInitializationStatus',
      subSyncJob: 'SubSyncJob',
      subscribeTopic: 'SubscribeTopic',
      subscriptionDataType: 'SubscriptionDataType',
      subscriptionHost: 'SubscriptionHost',
      synchronizationDirection: 'SynchronizationDirection',
      tagList: 'TagList',
      taskType: 'TaskType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appName: 'string',
      beginTimestamp: 'string',
      checkpoint: 'string',
      consumptionCheckpoint: 'string',
      consumptionClient: 'string',
      createTime: 'string',
      dataEtlStatus: DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus,
      dataInitializationStatus: DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus,
      dataSynchronizationStatus: DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus,
      databaseCount: 'number',
      dbObject: 'string',
      delay: 'number',
      destNetType: 'string',
      destinationEndpoint: DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint,
      dtsInstanceID: 'string',
      dtsJobClass: 'string',
      dtsJobDirection: 'string',
      dtsJobId: 'string',
      dtsJobName: 'string',
      endTimestamp: 'string',
      errorMessage: 'string',
      etlCalculator: 'string',
      expireTime: 'string',
      finishTime: 'string',
      groupId: 'string',
      isDemoJob: 'boolean',
      jobType: 'string',
      maxDu: 'number',
      migrationMode: DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode,
      minDu: 'number',
      originType: 'string',
      payType: 'string',
      performance: DescribeDtsJobDetailResponseBodySubSyncJobPerformance,
      precheckStatus: DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus,
      reserved: 'string',
      retryState: DescribeDtsJobDetailResponseBodySubSyncJobRetryState,
      reverseJob: DescribeDtsJobDetailResponseBodySubSyncJobReverseJob,
      sourceEndpoint: DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint,
      status: 'string',
      structureInitializationStatus: DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus,
      subSyncJob: { 'type': 'array', 'itemType': 'any' },
      subscribeTopic: 'string',
      subscriptionDataType: DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType,
      subscriptionHost: DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost,
      synchronizationDirection: 'string',
      tagList: { 'type': 'array', 'itemType': DescribeDtsJobDetailResponseBodySubSyncJobTagList },
      taskType: 'string',
    };
  }

  validate() {
    if(this.dataEtlStatus && typeof (this.dataEtlStatus as any).validate === 'function') {
      (this.dataEtlStatus as any).validate();
    }
    if(this.dataInitializationStatus && typeof (this.dataInitializationStatus as any).validate === 'function') {
      (this.dataInitializationStatus as any).validate();
    }
    if(this.dataSynchronizationStatus && typeof (this.dataSynchronizationStatus as any).validate === 'function') {
      (this.dataSynchronizationStatus as any).validate();
    }
    if(this.destinationEndpoint && typeof (this.destinationEndpoint as any).validate === 'function') {
      (this.destinationEndpoint as any).validate();
    }
    if(this.migrationMode && typeof (this.migrationMode as any).validate === 'function') {
      (this.migrationMode as any).validate();
    }
    if(this.performance && typeof (this.performance as any).validate === 'function') {
      (this.performance as any).validate();
    }
    if(this.precheckStatus && typeof (this.precheckStatus as any).validate === 'function') {
      (this.precheckStatus as any).validate();
    }
    if(this.retryState && typeof (this.retryState as any).validate === 'function') {
      (this.retryState as any).validate();
    }
    if(this.reverseJob && typeof (this.reverseJob as any).validate === 'function') {
      (this.reverseJob as any).validate();
    }
    if(this.sourceEndpoint && typeof (this.sourceEndpoint as any).validate === 'function') {
      (this.sourceEndpoint as any).validate();
    }
    if(this.structureInitializationStatus && typeof (this.structureInitializationStatus as any).validate === 'function') {
      (this.structureInitializationStatus as any).validate();
    }
    if(Array.isArray(this.subSyncJob)) {
      $dara.Model.validateArray(this.subSyncJob);
    }
    if(this.subscriptionDataType && typeof (this.subscriptionDataType as any).validate === 'function') {
      (this.subscriptionDataType as any).validate();
    }
    if(this.subscriptionHost && typeof (this.subscriptionHost as any).validate === 'function') {
      (this.subscriptionHost as any).validate();
    }
    if(Array.isArray(this.tagList)) {
      $dara.Model.validateArray(this.tagList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

