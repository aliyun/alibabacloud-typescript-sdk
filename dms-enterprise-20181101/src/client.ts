// This file is auto-generated, don't edit it
/**
 */
import OpenApi from '@alicloud/openapi-core';
import { OpenApiUtil, $OpenApiUtil } from '@alicloud/openapi-core';
import * as $dara from '@darabonba/typescript';

export class AddAuthorityTemplateItemsRequestItems extends $dara.Model {
  /**
   * @example
   * 2478****
   */
  dbId?: number;
  /**
   * @example
   * 237****
   */
  instanceId?: number;
  permissionTypes?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * INSTANCE
   */
  resourceType?: string;
  /**
   * @example
   * test_table
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      instanceId: 'InstanceId',
      permissionTypes: 'PermissionTypes',
      resourceType: 'ResourceType',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      instanceId: 'number',
      permissionTypes: { 'type': 'array', 'itemType': 'string' },
      resourceType: 'string',
      tableName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.permissionTypes)) {
      $dara.Model.validateArray(this.permissionTypes);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddLhMembersRequestMembers extends $dara.Model {
  /**
   * @remarks
   * The role. Valid values:
   * 
   * *   **ADMIN**: workspace administrator. You can add a workspace administrator only as a DMS administrator or a DBA.
   * *   **MEMBER**: workspace member.
   * *   **DEVELOPER**: task flow developer. Only a workspace member can be added as a task flow developer.
   * 
   * This parameter is required.
   */
  roles?: string[];
  /**
   * @remarks
   * The ID of the user to be added. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain the user ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15****
   */
  userId?: number;
  static names(): { [key: string]: string } {
    return {
      roles: 'Roles',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roles: { 'type': 'array', 'itemType': 'string' },
      userId: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.roles)) {
      $dara.Model.validateArray(this.roles);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddTaskFlowEdgesRequestEdges extends $dara.Model {
  /**
   * @remarks
   * The ID of the node where the end node of the edge is located.
   * 
   * This parameter is required.
   * 
   * @example
   * 44***
   */
  nodeEnd?: number;
  /**
   * @remarks
   * The ID of the node where the start node of the edge is located.
   * 
   * This parameter is required.
   * 
   * @example
   * 44***
   */
  nodeFrom?: number;
  static names(): { [key: string]: string } {
    return {
      nodeEnd: 'NodeEnd',
      nodeFrom: 'NodeFrom',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeEnd: 'number',
      nodeFrom: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddTaskFlowEdgesResponseBodyEdgeIds extends $dara.Model {
  edgeId?: number[];
  static names(): { [key: string]: string } {
    return {
      edgeId: 'EdgeId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      edgeId: { 'type': 'array', 'itemType': 'number' },
    };
  }

  validate() {
    if(Array.isArray(this.edgeId)) {
      $dara.Model.validateArray(this.edgeId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AnalyzeSQLLineageResponseBodyLineageResultLineagesProcessDetail extends $dara.Model {
  /**
   * @remarks
   * The calculating method. Valid values:
   * 
   * *   **DIRECT**: No function or expression is used.
   * *   **EXPR**: A function or expression is used.
   * 
   * @example
   * DIRECT
   */
  calWay?: string;
  /**
   * @remarks
   * The SQL code snippet for field processing.
   * 
   * @example
   * dmstest.b.id
   */
  code?: string;
  static names(): { [key: string]: string } {
    return {
      calWay: 'CalWay',
      code: 'Code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      calWay: 'string',
      code: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AnalyzeSQLLineageResponseBodyLineageResultLineages extends $dara.Model {
  /**
   * @remarks
   * The target.
   * 
   * @example
   * dmstest.a.id
   */
  dst?: string;
  /**
   * @remarks
   * The type of the lineage. Valid values:
   * 
   * *   **FIELD_DEPEND_FIELD**: Fields depend on fields.
   * *   **TABLE_DEPEND_TABLE**: Tables depend on tables.
   * *   **FIELD_INFLU_TABLE**: Fields influence tables.
   * *   **FIELD_INFLU_FIELD**: Fields influence fields.
   * *   **FIELD_INFLU_TABLE**: Tables influence fields.
   * *   **FIELD_JOIN_FIELD**: Fields are associated with fields.
   * 
   * @example
   * FIELD_DEPEND_FIELD
   */
  lineageType?: string;
  /**
   * @remarks
   * The operation type of the SQL statement in which the data lineage is generated. For example, if the operation type is SELECT, the data lineage is generated from a SELECT statement.
   * 
   * >  This field is an extended field which has no practical use.
   * 
   * @example
   * SELECT
   */
  operType?: string;
  /**
   * @remarks
   * The handling details. This parameter is returned only when LineageType is FIELD_DEPEND_FIELD.
   */
  processDetail?: AnalyzeSQLLineageResponseBodyLineageResultLineagesProcessDetail;
  /**
   * @remarks
   * The source.
   * 
   * @example
   * dmstest.b.id
   */
  src?: string;
  static names(): { [key: string]: string } {
    return {
      dst: 'Dst',
      lineageType: 'LineageType',
      operType: 'OperType',
      processDetail: 'ProcessDetail',
      src: 'Src',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dst: 'string',
      lineageType: 'string',
      operType: 'string',
      processDetail: AnalyzeSQLLineageResponseBodyLineageResultLineagesProcessDetail,
      src: 'string',
    };
  }

  validate() {
    if(this.processDetail && typeof (this.processDetail as any).validate === 'function') {
      (this.processDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AnalyzeSQLLineageResponseBodyLineageResultObjectMetadataFields extends $dara.Model {
  /**
   * @remarks
   * The name of the field.
   * 
   * @example
   * dmstest.a.id
   */
  name?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'Name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AnalyzeSQLLineageResponseBodyLineageResultObjectMetadata extends $dara.Model {
  /**
   * @remarks
   * The fields in the metatable.
   */
  fields?: AnalyzeSQLLineageResponseBodyLineageResultObjectMetadataFields[];
  /**
   * @remarks
   * The object name.
   * 
   * @example
   * a
   */
  name?: string;
  /**
   * @remarks
   * The source of metadata. Valid values:
   * 
   * *   **DDL**: The metadata comes from parsed SQL statements or definition of databases and tables collected by DMS.
   * *   **LINEAGE**: The metadata comes from lineage analysis results.
   * 
   * @example
   * DDL
   */
  source?: string;
  /**
   * @remarks
   * The object type. Valid values:
   * 
   * *   **TABLE**
   * *   **VIEW**
   * *   **TMP_TABLE**
   * 
   * @example
   * TABLE
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      fields: 'Fields',
      name: 'Name',
      source: 'Source',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fields: { 'type': 'array', 'itemType': AnalyzeSQLLineageResponseBodyLineageResultObjectMetadataFields },
      name: 'string',
      source: 'string',
      type: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.fields)) {
      $dara.Model.validateArray(this.fields);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AnalyzeSQLLineageResponseBodyLineageResult extends $dara.Model {
  /**
   * @remarks
   * The details about the lineage.
   */
  lineages?: AnalyzeSQLLineageResponseBodyLineageResultLineages[];
  /**
   * @remarks
   * The table and field metadata information.
   */
  objectMetadata?: AnalyzeSQLLineageResponseBodyLineageResultObjectMetadata[];
  static names(): { [key: string]: string } {
    return {
      lineages: 'Lineages',
      objectMetadata: 'ObjectMetadata',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lineages: { 'type': 'array', 'itemType': AnalyzeSQLLineageResponseBodyLineageResultLineages },
      objectMetadata: { 'type': 'array', 'itemType': AnalyzeSQLLineageResponseBodyLineageResultObjectMetadata },
    };
  }

  validate() {
    if(Array.isArray(this.lineages)) {
      $dara.Model.validateArray(this.lineages);
    }
    if(Array.isArray(this.objectMetadata)) {
      $dara.Model.validateArray(this.objectMetadata);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthorityTemplateResponseBodyAuthorityTemplateView extends $dara.Model {
  /**
   * @remarks
   * The time when the permission template was created. The time is in the yyyy-MM-DD HH:mm:ss format.
   * 
   * @example
   * 2023-01-11 14:17:33
   */
  createTime?: string;
  /**
   * @remarks
   * The ID of the user who created the permission template.
   * 
   * @example
   * 12***
   */
  creatorId?: number;
  /**
   * @remarks
   * The description of the permission template.
   * 
   * @example
   * This template is used for business testing.
   */
  description?: string;
  /**
   * @remarks
   * The name of the permission template.
   * 
   * @example
   * Test template.
   */
  name?: string;
  /**
   * @remarks
   * The ID of the permission template.
   * 
   * @example
   * 1563
   */
  templateId?: number;
  static names(): { [key: string]: string } {
    return {
      createTime: 'CreateTime',
      creatorId: 'CreatorId',
      description: 'Description',
      name: 'Name',
      templateId: 'TemplateId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'string',
      creatorId: 'number',
      description: 'string',
      name: 'string',
      templateId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataArchiveOrderRequestParamTableIncludes extends $dara.Model {
  /**
   * @remarks
   * The table name.
   * 
   * This parameter is required.
   * 
   * @example
   * table1
   */
  tableName?: string;
  /**
   * @remarks
   * The filter condition that is specified by the WHERE clause of the archiving configuration. If a time variable is used in the filter condition, the filter condition is specified in the following format: field name <=\\"${variable name}\\". The variable name in the filter condition must be the same as the time variable name that is specified in the Variables parameter.
   * 
   * @example
   * gmt_modified<\\"${time}\\"
   */
  tableWhere?: string;
  static names(): { [key: string]: string } {
    return {
      tableName: 'TableName',
      tableWhere: 'TableWhere',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tableName: 'string',
      tableWhere: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataArchiveOrderRequestParamVariables extends $dara.Model {
  name?: string;
  pattern?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'Name',
      pattern: 'Pattern',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      pattern: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataArchiveOrderRequestParam extends $dara.Model {
  /**
   * @remarks
   * The archiving destination to which you want to archive data. Valid values:
   * 
   * >  If you set ArchiveMethod to a value other than inner_oss, you must register the corresponding destination database with Data Management (DMS) before you create the data archiving ticket. After the database is registered with DMS, the database is displayed in the Instances Connected section of the DMS console.
   * 
   * *   **inner_oss**: dedicated storage, which is a built-in Object Storage Service (OSS) bucket.
   * *   **oss_userself**: OSS bucket of the user.
   * *   **mysql**: ApsaraDB RDS for MySQL instance.
   * *   **polardb**: PolarDB for MySQL cluster.
   * *   **adb_mysql**: AnalyticDB for MySQL V3.0 cluster.
   * *   **lindorm**: Lindorm instance.
   * 
   * This parameter is required.
   * 
   * @example
   * mysql
   */
  archiveMethod?: string;
  /**
   * @remarks
   * A crontab expression that specifies the scheduling cycle of the data archiving task. For more information, see the [Crontab expressions](https://help.aliyun.com/document_detail/206581.html) section of the "Create shadow tables for synchronization" topic. You must specify this parameter if you set RunMethod to schedule.
   * 
   * @example
   * 00 05 11 * * ?
   */
  cronStr?: string;
  /**
   * @remarks
   * The database ID. If the database is a self-managed database or a third-party cloud database, you can call the [GetDatabase](https://help.aliyun.com/document_detail/465856.html) operation to query the database ID. If the database is an Alibaba Cloud database, ignore this parameter.
   * 
   * @example
   * 1***
   */
  databaseId?: string;
  /**
   * @remarks
   * Specifies whether the database is a logical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The post behaviors.
   */
  orderAfter?: string[];
  /**
   * @remarks
   * The method that is used to run the data archiving task. Valid values:
   * 
   * *   **schedule**: The data archiving task is periodically scheduled.
   * *   **now**: The data archiving task is immediately run.
   * 
   * This parameter is required.
   * 
   * @example
   * now
   */
  runMethod?: string;
  /**
   * @remarks
   * The catalog of the source database. Valid values:
   * 
   * *   **def**: Set this parameter to def if the source database is of the two-layer logical schema, such as a MySQL database, a PolarDB for MySQL cluster, or an AnalyticDB for MySQL instance.
   * *   **Empty string**: Set this parameter to an empty string if the source database is a Lindorm or ApsaraDB for MongoDB instance.
   * *   **Catalog name**: Set this parameter to the catalog name of the source database if the source database is of the three-layer logical schema, such as a PostgreSQL database.
   * 
   * This parameter is required.
   * 
   * @example
   * def
   */
  sourceCatalogName?: string;
  /**
   * @remarks
   * The name of the source instance. If the database instance is a self-managed database or a third-party cloud database, you can call the [GetInstance](https://help.aliyun.com/document_detail/465826.html) operation to query the instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * pc-bp1*******
   */
  sourceInstanceName?: string;
  /**
   * @remarks
   * The schema name of the source database. The schema name of the source database is the same as that of the destination database. If the source database is a MySQL database, this parameter specifies the name of the source database. If the source database is a PostgreSQL database, this parameter specifies the schema name of the source database.
   * 
   * This parameter is required.
   * 
   * @example
   * schema_test
   */
  sourceSchemaName?: string;
  /**
   * @remarks
   * The collection of tables to be archived.
   * 
   * This parameter is required.
   */
  tableIncludes?: CreateDataArchiveOrderRequestParamTableIncludes[];
  /**
   * @remarks
   * The table names mapped to the destination database. This parameter is not required and the default value is used.
   */
  tableMapping?: string[];
  /**
   * @remarks
   * The host of the destination instance. If the destination instance can be accessed over an internal network or the Internet, preferentially set the value to the internal endpoint of the destination instance.
   * 
   * *   If data is archived in an OSS bucket, set the value to the name of the bucket.
   * *   If data is archived in dedicated storage space, set the value to inner_oss.
   * 
   * This parameter is required.
   * 
   * @example
   * am-bp1*********.ads.aliyuncs.com
   */
  targetInstanceHost?: string;
  /**
   * @remarks
   * The configuration of archiving variables. You can use a time variable as a filter condition for archiving data. Each variable has two attributes: name and pattern.
   */
  variables?: CreateDataArchiveOrderRequestParamVariables[];
  static names(): { [key: string]: string } {
    return {
      archiveMethod: 'ArchiveMethod',
      cronStr: 'CronStr',
      databaseId: 'DatabaseId',
      logic: 'Logic',
      orderAfter: 'OrderAfter',
      runMethod: 'RunMethod',
      sourceCatalogName: 'SourceCatalogName',
      sourceInstanceName: 'SourceInstanceName',
      sourceSchemaName: 'SourceSchemaName',
      tableIncludes: 'TableIncludes',
      tableMapping: 'TableMapping',
      targetInstanceHost: 'TargetInstanceHost',
      variables: 'Variables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      archiveMethod: 'string',
      cronStr: 'string',
      databaseId: 'string',
      logic: 'boolean',
      orderAfter: { 'type': 'array', 'itemType': 'string' },
      runMethod: 'string',
      sourceCatalogName: 'string',
      sourceInstanceName: 'string',
      sourceSchemaName: 'string',
      tableIncludes: { 'type': 'array', 'itemType': CreateDataArchiveOrderRequestParamTableIncludes },
      tableMapping: { 'type': 'array', 'itemType': 'string' },
      targetInstanceHost: 'string',
      variables: { 'type': 'array', 'itemType': CreateDataArchiveOrderRequestParamVariables },
    };
  }

  validate() {
    if(Array.isArray(this.orderAfter)) {
      $dara.Model.validateArray(this.orderAfter);
    }
    if(Array.isArray(this.tableIncludes)) {
      $dara.Model.validateArray(this.tableIncludes);
    }
    if(Array.isArray(this.tableMapping)) {
      $dara.Model.validateArray(this.tableMapping);
    }
    if(Array.isArray(this.variables)) {
      $dara.Model.validateArray(this.variables);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataCorrectOrderRequestParamDbItemList extends $dara.Model {
  /**
   * @remarks
   * The ID of the database. The database can be a physical database or a logical database.
   * 
   * *   To obtain the ID of a physical database, call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
   * *   To obtain the ID of a logical database, call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
   * 
   * @example
   * 1860****
   */
  dbId?: number;
  instanceId?: number;
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is a physical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      instanceId: 'InstanceId',
      logic: 'Logic',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      instanceId: 'number',
      logic: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataCorrectOrderRequestParam extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment that contains the SQL statements used to change data. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of the AttachmentKey parameter.
   * 
   * >  This parameter is required if you set the **SqlType** parameter to **ATTACHMENT**.
   * 
   * @example
   * test.sql
   */
  attachmentName?: string;
  /**
   * @remarks
   * The reason for the data change.
   * 
   * @example
   * test
   */
  classify?: string;
  /**
   * @remarks
   * The databases in which you want to change data.
   * 
   * This parameter is required.
   */
  dbItemList?: CreateDataCorrectOrderRequestParamDbItemList[];
  /**
   * @remarks
   * The estimated number of data rows to be affected by the data change.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  estimateAffectRows?: number;
  /**
   * @remarks
   * The execution mode of the ticket after the ticket is approved. Valid values:
   * 
   * *   **COMMITOR**: The data change is performed by the user who submits the ticket.
   * *   **AUTO**: The data change is automatically performed after the ticket is approved.
   * *   **LAST_AUDITOR**: The data change is performed by the last approver of the ticket.
   * 
   * @example
   * COMMITOR
   */
  execMode?: string;
  /**
   * @remarks
   * The SQL statements that you want to execute to change data.
   * 
   * >  This parameter is required if you set the **SqlType** parameter to **TEXT**.
   * 
   * @example
   * update base_user set id = 1 where id  = 1;
   */
  execSQL?: string;
  /**
   * @remarks
   * The key of the attachment that contains the SQL statements used to roll back the data change. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to the attachment key from the value of the AttachmentKey parameter.
   * 
   * >  This parameter is required if you set the **RollbackSqlType** parameter to **ATTACHMENT**.
   * 
   * @example
   * test_rollback.sql
   */
  rollbackAttachmentName?: string;
  /**
   * @remarks
   * The SQL statements used to roll back the data change.
   * 
   * > This parameter is required if you set the **RollbackSqlType** parameter to **TEXT**.
   * 
   * @example
   * update base_user set id = 1 where id  = 1;
   */
  rollbackSQL?: string;
  /**
   * @remarks
   * The format of the SQL statements used to roll back the data change. Valid values:
   * 
   * *   **TEXT**: text
   * *   **ATTACHMENT**: attachment
   * 
   * @example
   * TEXT
   */
  rollbackSqlType?: string;
  /**
   * @remarks
   * The format of the SQL statements used to change data. Valid values:
   * 
   * *   **TEXT**: text
   * *   **ATTACHMENT**: attachment
   * 
   * This parameter is required.
   * 
   * @example
   * TEXT
   */
  sqlType?: string;
  static names(): { [key: string]: string } {
    return {
      attachmentName: 'AttachmentName',
      classify: 'Classify',
      dbItemList: 'DbItemList',
      estimateAffectRows: 'EstimateAffectRows',
      execMode: 'ExecMode',
      execSQL: 'ExecSQL',
      rollbackAttachmentName: 'RollbackAttachmentName',
      rollbackSQL: 'RollbackSQL',
      rollbackSqlType: 'RollbackSqlType',
      sqlType: 'SqlType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentName: 'string',
      classify: 'string',
      dbItemList: { 'type': 'array', 'itemType': CreateDataCorrectOrderRequestParamDbItemList },
      estimateAffectRows: 'number',
      execMode: 'string',
      execSQL: 'string',
      rollbackAttachmentName: 'string',
      rollbackSQL: 'string',
      rollbackSqlType: 'string',
      sqlType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.dbItemList)) {
      $dara.Model.validateArray(this.dbItemList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataCronClearOrderRequestParamCronClearItemList extends $dara.Model {
  /**
   * @remarks
   * The name of the field.
   * 
   * This parameter is required.
   * 
   * @example
   * gmt_create
   */
  columnName?: string;
  /**
   * @remarks
   * The filter conditions.
   * 
   * @example
   * where 1 = 1
   */
  filterSQL?: string;
  /**
   * @remarks
   * The retention period of the historical data. Unit: days. For example, if you set the parameter to 7, DMS deletes the data that is retained for more than seven days.
   * 
   * This parameter is required.
   * 
   * @example
   * 7
   */
  remainDays?: number;
  /**
   * @remarks
   * The name of the table. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to query the name of the table.
   * 
   * This parameter is required.
   * 
   * @example
   * t1
   */
  tableName?: string;
  /**
   * @remarks
   * The type of time granularity. If the ColumnName parameter specifies a field of a time type, this parameter is required. Valid values:
   * 
   * *   **MILLISECONDS**: milliseconds
   * *   **SECONDS**: seconds
   * 
   * @example
   * MILLISECONDS
   */
  timeUnit?: string;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      filterSQL: 'FilterSQL',
      remainDays: 'RemainDays',
      tableName: 'TableName',
      timeUnit: 'TimeUnit',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      filterSQL: 'string',
      remainDays: 'number',
      tableName: 'string',
      timeUnit: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataCronClearOrderRequestParamDbItemList extends $dara.Model {
  /**
   * @remarks
   * The ID of the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.
   * 
   * This parameter is required.
   * 
   * @example
   * 1234
   */
  dbId?: number;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is not a logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * false
   */
  logic?: boolean;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      logic: 'Logic',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      logic: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataCronClearOrderRequestParam extends $dara.Model {
  /**
   * @remarks
   * The reason for the data change.
   * 
   * @example
   * test
   */
  classify?: string;
  /**
   * @remarks
   * The tables for which you want to clear historical data.
   * 
   * This parameter is required.
   */
  cronClearItemList?: CreateDataCronClearOrderRequestParamCronClearItemList[];
  /**
   * @remarks
   * The crontab expression that you can use to run the task at a specified time. For more information, see [Crontab expression](https://help.aliyun.com/document_detail/206581.html).
   * 
   * This parameter is required.
   * 
   * @example
   * 0 0 2 * * ?
   */
  cronFormat?: string;
  /**
   * @remarks
   * The databases for which you want to clear historical data.
   * 
   * This parameter is required.
   */
  dbItemList?: CreateDataCronClearOrderRequestParamDbItemList[];
  /**
   * @remarks
   * The amount of time taken to run the task. Unit: hours.
   * 
   * >  If the **specifyDuration** parameter is set to **true**, this parameter is required.
   * 
   * @example
   * 4
   */
  durationHour?: number;
  /**
   * @remarks
   * Specifies whether to specify an end time for the task. Valid values:
   * 
   * *   **true**: specifies an end time for the task. The task is automatically suspended after this end time.
   * *   **false**: does not specify an end time for the task. The task is stopped after the historical data is cleared.
   * 
   * This parameter is required.
   * 
   * @example
   * true
   */
  specifyDuration?: boolean;
  static names(): { [key: string]: string } {
    return {
      classify: 'Classify',
      cronClearItemList: 'CronClearItemList',
      cronFormat: 'CronFormat',
      dbItemList: 'DbItemList',
      durationHour: 'DurationHour',
      specifyDuration: 'specifyDuration',
    };
  }

  static types(): { [key: string]: any } {
    return {
      classify: 'string',
      cronClearItemList: { 'type': 'array', 'itemType': CreateDataCronClearOrderRequestParamCronClearItemList },
      cronFormat: 'string',
      dbItemList: { 'type': 'array', 'itemType': CreateDataCronClearOrderRequestParamDbItemList },
      durationHour: 'number',
      specifyDuration: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.cronClearItemList)) {
      $dara.Model.validateArray(this.cronClearItemList);
    }
    if(Array.isArray(this.dbItemList)) {
      $dara.Model.validateArray(this.dbItemList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataExportOrderRequestPluginParamWatermark extends $dara.Model {
  /**
   * @remarks
   * The field into which the watermark is to be embedded.
   * 
   * @example
   * user_number
   */
  columnName?: string;
  /**
   * @remarks
   * The information to be embedded as a watermark into data.
   * 
   * @example
   * test
   */
  dataWatermark?: string;
  /**
   * @remarks
   * The information to be embedded as a watermark into files.
   * 
   * @example
   * test
   */
  fileWatermark?: string;
  /**
   * @remarks
   * One or more primary keys or unique keys.
   */
  keys?: string[];
  /**
   * @remarks
   * The methods in which the watermark is embedded.
   */
  watermarkTypes?: string[];
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      dataWatermark: 'DataWatermark',
      fileWatermark: 'FileWatermark',
      keys: 'Keys',
      watermarkTypes: 'WatermarkTypes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      dataWatermark: 'string',
      fileWatermark: 'string',
      keys: { 'type': 'array', 'itemType': 'string' },
      watermarkTypes: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.keys)) {
      $dara.Model.validateArray(this.keys);
    }
    if(Array.isArray(this.watermarkTypes)) {
      $dara.Model.validateArray(this.watermarkTypes);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataExportOrderRequestPluginParam extends $dara.Model {
  /**
   * @remarks
   * The estimated number of data rows to be affected.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  affectRows?: number;
  /**
   * @remarks
   * The reason for the export ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  classify?: string;
  /**
   * @remarks
   * The database ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 18****
   */
  dbId?: number;
  /**
   * @remarks
   * The SQL statements that can be executed.
   * 
   * This parameter is required.
   * 
   * @example
   * SELECT * FROM DMS_test
   *  LIMIT 20;
   */
  exeSQL?: string;
  /**
   * @remarks
   * Specifies whether to skip verification. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * This parameter is required.
   * 
   * @example
   * true
   */
  ignoreAffectRows?: boolean;
  /**
   * @remarks
   * The reason for skipping verification. This parameter is required if you set IgnoreAffectRows to true.
   * 
   * @example
   * Test only, does not affect the business, and does not require verification.
   */
  ignoreAffectRowsReason?: string;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 132****
   */
  instanceId?: number;
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * > If you set this parameter to **true**, the database that you specify must be a logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * true
   */
  logic?: boolean;
  /**
   * @remarks
   * The information about the watermarks.
   */
  watermark?: CreateDataExportOrderRequestPluginParamWatermark;
  static names(): { [key: string]: string } {
    return {
      affectRows: 'AffectRows',
      classify: 'Classify',
      dbId: 'DbId',
      exeSQL: 'ExeSQL',
      ignoreAffectRows: 'IgnoreAffectRows',
      ignoreAffectRowsReason: 'IgnoreAffectRowsReason',
      instanceId: 'InstanceId',
      logic: 'Logic',
      watermark: 'Watermark',
    };
  }

  static types(): { [key: string]: any } {
    return {
      affectRows: 'number',
      classify: 'string',
      dbId: 'number',
      exeSQL: 'string',
      ignoreAffectRows: 'boolean',
      ignoreAffectRowsReason: 'string',
      instanceId: 'number',
      logic: 'boolean',
      watermark: CreateDataExportOrderRequestPluginParamWatermark,
    };
  }

  validate() {
    if(this.watermark && typeof (this.watermark as any).validate === 'function') {
      (this.watermark as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataExportOrderResponseBodyCreateOrderResult extends $dara.Model {
  createOrderResult?: number[];
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: { 'type': 'array', 'itemType': 'number' },
    };
  }

  validate() {
    if(Array.isArray(this.createOrderResult)) {
      $dara.Model.validateArray(this.createOrderResult);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataImportOrderRequestParamDbItemList extends $dara.Model {
  /**
   * @remarks
   * The ID of the database. The database can be a physical database or a logical database.
   * 
   * *   To obtain the ID of a physical database, call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
   * *   To obtain the ID of a logical database, call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
   * 
   * This parameter is required.
   * 
   * @example
   * 1860****
   */
  dbId?: number;
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is a physical database.
   * 
   * >  If you set this parameter to **true**, the database that you specify must be a logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * false
   */
  logic?: boolean;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      logic: 'Logic',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      logic: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataImportOrderRequestParam extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment that contains the SQL statements used to import data. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to the attachment key from the value of the AttachmentKey parameter.
   * 
   * This parameter is required.
   * 
   * @example
   * order_text
   */
  attachmentName?: string;
  /**
   * @remarks
   * The reason for the data import.
   * 
   * @example
   * test
   */
  classify?: string;
  /**
   * @remarks
   * The type of the CSV file. Valid values:
   * 
   * *   **true**: The first row in the CSV file contains field names.
   * *   **false**: The first row in the CSV file contains data.
   * 
   * >  This parameter is required if you set the **FileType** parameter to **CSV**.
   * 
   * @example
   * true
   */
  csvFirstRowIsColumnDef?: boolean;
  /**
   * @remarks
   * The database to which you want to import data. You can specify only one database.
   * 
   * This parameter is required.
   */
  dbItemList?: CreateDataImportOrderRequestParamDbItemList[];
  execMode?: string;
  /**
   * @remarks
   * The encoding algorithm to be used by the destination database. Valid values:
   * 
   * *   **AUTO**: automatic identification
   * *   **UTF-8**: UTF-8 encoding
   * *   **GBK**: GBK encoding
   * *   **ISO-8859-1**: ISO-8859-1 encoding
   * 
   * @example
   * AUTO
   */
  fileEncoding?: string;
  /**
   * @remarks
   * The format of the file for the data import. Valid values:
   * 
   * *   **SQL**: an SQL file
   * *   **CSV**: a CSV file
   * 
   * This parameter is required.
   * 
   * @example
   * CSV
   */
  fileType?: string;
  /**
   * @remarks
   * Specifies whether to skip an error that occurs. Valid values:
   * 
   * *   **true**: skips the error and continues to execute SQL statements.
   * *   **false**: stops executing SQL statements.
   * 
   * @example
   * false
   */
  ignoreError?: boolean;
  /**
   * @remarks
   * The import mode. Valid values:
   * 
   * *   **FAST_MODE**: In the Execute step, the uploaded file is read and SQL statements are executed to import data to the specified destination database. Compared with the security mode, this mode can be used to import data in a less secure but more efficient manner.
   * *   **SAFE_MODE**: In the Precheck step, the uploaded file is parsed, and SQL statements or CSV file data is cached. In the Execute step, the cached SQL statements are read and executed to import data, or the cached CSV file data is read and imported to the specified destination database. This mode can be used to import data in a more secure but less efficient manner.
   * 
   * @example
   * FAST_MODE
   */
  importMode?: string;
  /**
   * @remarks
   * The mode in which the data in the CSV format is to be written to the destination table. Valid values:
   * 
   * *   **INSERT**: The database checks the primary key when data is written. If a duplicate primary key value exists, an error message is returned.
   * *   **INSERT_IGNORE**: If the imported data contains data records that are the same as those in the destination table, the new data records are ignored.
   * *   **REPLACE_INTO**: If the imported data contains a row that has the same value for the primary key or unique index as one row in the destination table, the database deletes the existing row and inserts the new row into the destination table.
   * 
   * >  This parameter is required if you set the **FileType** parameter to **CSV**.
   * 
   * @example
   * INSERT
   */
  insertType?: string;
  /**
   * @remarks
   * The key of the attachment that contains the SQL statements used to roll back the data import. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of the AttachmentKey parameter.
   * 
   * >  This parameter is required if you set the **RollbackSqlType** parameter to **ATTACHMENT**.
   * 
   * @example
   * rollback.sql
   */
  rollbackAttachmentName?: string;
  /**
   * @remarks
   * The SQL statements used to roll back the data import.
   * 
   * >  This parameter is required if you set the **RollbackSqlType** parameter to **TEXT**.
   * 
   * @example
   * empty
   */
  rollbackSQL?: string;
  /**
   * @remarks
   * The format of the SQL statements used to roll back the data import. Valid values:
   * 
   * *   **TEXT**: text
   * *   **ATTACHMENT**: attachment
   * 
   * @example
   * TEXT
   */
  rollbackSqlType?: string;
  /**
   * @remarks
   * The destination table to which you want to import the data in the CSV format.
   * 
   * >  This parameter is required if you set the **FileType** parameter to **CSV**.
   * 
   * @example
   * Table_text
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      attachmentName: 'AttachmentName',
      classify: 'Classify',
      csvFirstRowIsColumnDef: 'CsvFirstRowIsColumnDef',
      dbItemList: 'DbItemList',
      execMode: 'ExecMode',
      fileEncoding: 'FileEncoding',
      fileType: 'FileType',
      ignoreError: 'IgnoreError',
      importMode: 'ImportMode',
      insertType: 'InsertType',
      rollbackAttachmentName: 'RollbackAttachmentName',
      rollbackSQL: 'RollbackSQL',
      rollbackSqlType: 'RollbackSqlType',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentName: 'string',
      classify: 'string',
      csvFirstRowIsColumnDef: 'boolean',
      dbItemList: { 'type': 'array', 'itemType': CreateDataImportOrderRequestParamDbItemList },
      execMode: 'string',
      fileEncoding: 'string',
      fileType: 'string',
      ignoreError: 'boolean',
      importMode: 'string',
      insertType: 'string',
      rollbackAttachmentName: 'string',
      rollbackSQL: 'string',
      rollbackSqlType: 'string',
      tableName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.dbItemList)) {
      $dara.Model.validateArray(this.dbItemList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataTrackOrderRequestParam extends $dara.Model {
  /**
   * @remarks
   * The ID of the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.
   * 
   * > You can call this operation to create a data tracking ticket for only physical databases. This operation is not applicable to logical databases.
   * 
   * This parameter is required.
   * 
   * @example
   * 123***
   */
  dbId?: string;
  /**
   * @remarks
   * The end time of the time range in which you want to track data operations. The time must be in the yyyy-MM-dd HH:mm:ss format.
   * 
   * This parameter is required.
   * 
   * @example
   * 2023-04-23 10:00:00
   */
  jobEndTime?: string;
  /**
   * @remarks
   * The start time of the time range in which you want to track data operations. The time must be in the yyyy-MM-dd HH:mm:ss format.
   * 
   * This parameter is required.
   * 
   * @example
   * 2023-04-23 00:00:00
   */
  jobStartTime?: string;
  /**
   * @remarks
   * The names of the tables for which you want to track data operations.
   * 
   * This parameter is required.
   */
  tableNames?: string[];
  /**
   * @remarks
   * The types of data operations that you want to track.
   * 
   * This parameter is required.
   */
  trackTypes?: string[];
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      jobEndTime: 'JobEndTime',
      jobStartTime: 'JobStartTime',
      tableNames: 'TableNames',
      trackTypes: 'TrackTypes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'string',
      jobEndTime: 'string',
      jobStartTime: 'string',
      tableNames: { 'type': 'array', 'itemType': 'string' },
      trackTypes: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.tableNames)) {
      $dara.Model.validateArray(this.tableNames);
    }
    if(Array.isArray(this.trackTypes)) {
      $dara.Model.validateArray(this.trackTypes);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDatabaseExportOrderRequestPluginParamConfig extends $dara.Model {
  /**
   * @remarks
   * The export options for big data. The options are used to filter the big data to be exported. You can leave this parameter empty.
   * 
   * This parameter is required.
   */
  dataOption?: string[];
  /**
   * @remarks
   * The type of data that you want to export. Valid values:
   * 
   * *   **DATA**: The data of the database is exported.
   * *   **STRUCT**: The schema of the database is exported.
   * *   **DATA_STRUCT**: The data and schema of the database are exported.
   * 
   * This parameter is required.
   * 
   * @example
   * DATA
   */
  exportContent?: string;
  /**
   * @remarks
   * The types of schemas that you want to export.
   */
  exportTypes?: string[];
  /**
   * @remarks
   * The extension options of the SQL script. You can leave this parameter empty.
   * 
   * This parameter is required.
   */
  SQLExtOption?: string[];
  /**
   * @remarks
   * The tables that you want to export.
   */
  selectedTables?: string[];
  /**
   * @remarks
   * The conditions used to filter the tables to be exported.
   */
  tables?: { [key: string]: string };
  /**
   * @remarks
   * The format in which the database is exported. Valid values:
   * 
   * *   **SQL**
   * *   **CSV**
   * *   **XLSX**
   * 
   * This parameter is required.
   * 
   * @example
   * SQL
   */
  targetOption?: string;
  static names(): { [key: string]: string } {
    return {
      dataOption: 'DataOption',
      exportContent: 'ExportContent',
      exportTypes: 'ExportTypes',
      SQLExtOption: 'SQLExtOption',
      selectedTables: 'SelectedTables',
      tables: 'Tables',
      targetOption: 'TargetOption',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataOption: { 'type': 'array', 'itemType': 'string' },
      exportContent: 'string',
      exportTypes: { 'type': 'array', 'itemType': 'string' },
      SQLExtOption: { 'type': 'array', 'itemType': 'string' },
      selectedTables: { 'type': 'array', 'itemType': 'string' },
      tables: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      targetOption: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.dataOption)) {
      $dara.Model.validateArray(this.dataOption);
    }
    if(Array.isArray(this.exportTypes)) {
      $dara.Model.validateArray(this.exportTypes);
    }
    if(Array.isArray(this.SQLExtOption)) {
      $dara.Model.validateArray(this.SQLExtOption);
    }
    if(Array.isArray(this.selectedTables)) {
      $dara.Model.validateArray(this.selectedTables);
    }
    if(this.tables) {
      $dara.Model.validateMap(this.tables);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDatabaseExportOrderRequestPluginParam extends $dara.Model {
  /**
   * @remarks
   * The reason for the database export.
   * 
   * This parameter is required.
   * 
   * @example
   * document_test
   */
  classify?: string;
  /**
   * @remarks
   * The configurations for database export.
   * 
   * This parameter is required.
   */
  config?: CreateDatabaseExportOrderRequestPluginParamConfig;
  /**
   * @remarks
   * The database ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 17****
   */
  dbId?: number;
  /**
   * @remarks
   * The instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 137****
   */
  instanceId?: number;
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * This parameter is required.
   * 
   * @example
   * true
   */
  logic?: boolean;
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * This parameter is required.
   * 
   * @example
   * test@xxx.xxx.xxx.xxx:3306
   */
  searchName?: string;
  static names(): { [key: string]: string } {
    return {
      classify: 'Classify',
      config: 'Config',
      dbId: 'DbId',
      instanceId: 'InstanceId',
      logic: 'Logic',
      searchName: 'SearchName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      classify: 'string',
      config: CreateDatabaseExportOrderRequestPluginParamConfig,
      dbId: 'number',
      instanceId: 'number',
      logic: 'boolean',
      searchName: 'string',
    };
  }

  validate() {
    if(this.config && typeof (this.config as any).validate === 'function') {
      (this.config as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDatabaseExportOrderResponseBodyCreateOrderResult extends $dara.Model {
  createOrderResult?: number[];
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: { 'type': 'array', 'itemType': 'number' },
    };
  }

  validate() {
    if(Array.isArray(this.createOrderResult)) {
      $dara.Model.validateArray(this.createOrderResult);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDifyInstanceResponseBodyData extends $dara.Model {
  instanceId?: string;
  replicas?: number;
  resourceQuota?: string;
  securityGroupId?: string;
  status?: string;
  vSwitchId?: string;
  vpcId?: string;
  workspaceId?: string;
  zoneId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      replicas: 'Replicas',
      resourceQuota: 'ResourceQuota',
      securityGroupId: 'SecurityGroupId',
      status: 'Status',
      vSwitchId: 'VSwitchId',
      vpcId: 'VpcId',
      workspaceId: 'WorkspaceId',
      zoneId: 'ZoneId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      replicas: 'number',
      resourceQuota: 'string',
      securityGroupId: 'string',
      status: 'string',
      vSwitchId: 'string',
      vpcId: 'string',
      workspaceId: 'string',
      zoneId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateFreeLockCorrectOrderRequestParamDbItemList extends $dara.Model {
  /**
   * @remarks
   * The ID of the database. The database can be a physical database or a logical database.
   * 
   * *   To obtain the ID of a physical database, call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
   * *   To obtain the ID of a logical database, call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
   * 
   * This parameter is required.
   * 
   * @example
   * 1860****
   */
  dbId?: number;
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is a physical database.
   * 
   * This parameter is required.
   * 
   * @example
   * false
   */
  logic?: boolean;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      logic: 'Logic',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      logic: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateFreeLockCorrectOrderRequestParam extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment that contains the SQL statements used to change data. This parameter is not supported.
   * 
   * @example
   * test.sql
   */
  attachmentName?: string;
  /**
   * @remarks
   * The reason for the data change.
   * 
   * @example
   * test
   */
  classify?: string;
  /**
   * @remarks
   * The databases in which you want to change data.
   * 
   * This parameter is required.
   */
  dbItemList?: CreateFreeLockCorrectOrderRequestParamDbItemList[];
  /**
   * @remarks
   * The execution mode of the ticket after the ticket is approved. Valid values:
   * 
   * *   **COMMITOR**: The data change is performed by the user who submits the ticket.
   * *   **AUTO**: The data change is automatically performed after the ticket is approved.
   * *   **LAST_AUDITOR**: The data change is performed by the last approver of the ticket.
   * 
   * @example
   * COMMITOR
   */
  execMode?: string;
  /**
   * @remarks
   * The SQL statements that you want to execute to change data.
   * 
   * This parameter is required.
   * 
   * @example
   * delete from base_user where 1 = 1;
   */
  execSQL?: string;
  /**
   * @remarks
   * The key of the attachment that contains the SQL statements used to roll back the data change.
   * 
   * @example
   * test_rollback.sql
   */
  rollbackAttachmentName?: string;
  /**
   * @remarks
   * The SQL statements used to roll back the data change.
   * 
   * @example
   * empty
   */
  rollbackSQL?: string;
  /**
   * @remarks
   * The format of the SQL statements used to roll back the data change. Valid values:
   * 
   * *   **TEXT**: text
   * *   **ATTACHMENT**: attachment. This value is not supported.
   * 
   * @example
   * TEXT
   */
  rollbackSqlType?: string;
  /**
   * @remarks
   * The format of the SQL statements used to change data. Valid values:
   * 
   * *   **TEXT**: text
   * *   **ATTACHMENT**: attachment. This value is not supported.
   * 
   * This parameter is required.
   * 
   * @example
   * TEXT
   */
  sqlType?: string;
  static names(): { [key: string]: string } {
    return {
      attachmentName: 'AttachmentName',
      classify: 'Classify',
      dbItemList: 'DbItemList',
      execMode: 'ExecMode',
      execSQL: 'ExecSQL',
      rollbackAttachmentName: 'RollbackAttachmentName',
      rollbackSQL: 'RollbackSQL',
      rollbackSqlType: 'RollbackSqlType',
      sqlType: 'SqlType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentName: 'string',
      classify: 'string',
      dbItemList: { 'type': 'array', 'itemType': CreateFreeLockCorrectOrderRequestParamDbItemList },
      execMode: 'string',
      execSQL: 'string',
      rollbackAttachmentName: 'string',
      rollbackSQL: 'string',
      rollbackSqlType: 'string',
      sqlType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.dbItemList)) {
      $dara.Model.validateArray(this.dbItemList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOrderResponseBodyCreateOrderResult extends $dara.Model {
  orderIds?: number[];
  static names(): { [key: string]: string } {
    return {
      orderIds: 'OrderIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderIds: { 'type': 'array', 'itemType': 'number' },
    };
  }

  validate() {
    if(Array.isArray(this.orderIds)) {
      $dara.Model.validateArray(this.orderIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateProcCorrectOrderRequestParamDbItemList extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 19721978
   */
  dbId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * false
   */
  logic?: boolean;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      logic: 'Logic',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      logic: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateProcCorrectOrderRequestParam extends $dara.Model {
  /**
   * @example
   * test
   */
  classify?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  dbItemList?: CreateProcCorrectOrderRequestParamDbItemList[];
  execMode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * DELIMITER ///
   * CREATE PROCEDURE GetAllProducts()
   * BEGIN
   * SELECT *  FROM base_user;
   * END ///
   */
  execSQL?: string;
  /**
   * @example
   * test_rollback.sql
   */
  rollbackAttachmentName?: string;
  /**
   * @example
   * empty
   */
  rollbackSQL?: string;
  /**
   * @example
   * TEXT
   */
  rollbackSqlType?: string;
  static names(): { [key: string]: string } {
    return {
      classify: 'Classify',
      dbItemList: 'DbItemList',
      execMode: 'ExecMode',
      execSQL: 'ExecSQL',
      rollbackAttachmentName: 'RollbackAttachmentName',
      rollbackSQL: 'RollbackSQL',
      rollbackSqlType: 'RollbackSqlType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      classify: 'string',
      dbItemList: { 'type': 'array', 'itemType': CreateProcCorrectOrderRequestParamDbItemList },
      execMode: 'string',
      execSQL: 'string',
      rollbackAttachmentName: 'string',
      rollbackSQL: 'string',
      rollbackSqlType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.dbItemList)) {
      $dara.Model.validateArray(this.dbItemList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSQLReviewOrderRequestParam extends $dara.Model {
  /**
   * @remarks
   * The files to be reviewed. Multiple files can be reviewed at a time.
   * 
   * This parameter is required.
   */
  attachmentKeyList?: string[];
  /**
   * @remarks
   * The ID of the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.
   * 
   * >  You can call this operation to query only physical databases. This operation is unavailable to query logical databases.
   * 
   * This parameter is required.
   * 
   * @example
   * 123321
   */
  dbId?: number;
  /**
   * @remarks
   * The name of the project.
   * 
   * This parameter is required.
   * 
   * @example
   * SQL review for xxx
   */
  projectName?: string;
  static names(): { [key: string]: string } {
    return {
      attachmentKeyList: 'AttachmentKeyList',
      dbId: 'DbId',
      projectName: 'ProjectName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKeyList: { 'type': 'array', 'itemType': 'string' },
      dbId: 'number',
      projectName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.attachmentKeyList)) {
      $dara.Model.validateArray(this.attachmentKeyList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStandardGroupResponseBodyStandardGroup extends $dara.Model {
  /**
   * @remarks
   * The type of the database engine. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * @example
   * mysql
   */
  dbType?: string;
  /**
   * @remarks
   * The description of the security rule set.
   * 
   * @example
   * test_rule
   */
  description?: string;
  /**
   * @remarks
   * The security rule set ID.
   * 
   * @example
   * 41****
   */
  groupId?: number;
  /**
   * @remarks
   * The control mode. Valid values:
   * 
   * *   **NONE_CONTROL**: Flexible Management
   * *   **STABLE**: Stable Change
   * *   **COMMON**: Security Collaboration
   * 
   * @example
   * COMMON
   */
  groupMode?: string;
  /**
   * @remarks
   * The name of the security rule set.
   * 
   * @example
   * test_group
   */
  groupName?: string;
  /**
   * @remarks
   * The ID of the user who creates the security rule set.
   * 
   * @example
   * 51****
   */
  lastMenderId?: number;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      description: 'Description',
      groupId: 'GroupId',
      groupMode: 'GroupMode',
      groupName: 'GroupName',
      lastMenderId: 'LastMenderId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      description: 'string',
      groupId: 'number',
      groupMode: 'string',
      groupName: 'string',
      lastMenderId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStructSyncOrderRequestParamSource extends $dara.Model {
  /**
   * @remarks
   * The ID of the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.
   * 
   * This parameter is required.
   * 
   * @example
   * 4324532
   */
  dbId?: number;
  /**
   * @remarks
   * The name that is used to search for the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the name of the database.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  dbSearchName?: string;
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is not a logical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The version number of the schema. The default value is the latest schema version number. For more information, see [Manage schema versions](https://help.aliyun.com/document_detail/202275.html).
   * 
   * @example
   * e179bbb8163dcdcfacda24858bedb4d8006ae2b8
   */
  versionId?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      dbSearchName: 'DbSearchName',
      logic: 'Logic',
      versionId: 'VersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      dbSearchName: 'string',
      logic: 'boolean',
      versionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStructSyncOrderRequestParamTableInfoList extends $dara.Model {
  /**
   * @remarks
   * The name of the source table.
   * 
   * @example
   * test_tbl
   */
  sourceTableName?: string;
  /**
   * @remarks
   * The name of the destination table.
   * 
   * @example
   * test_tbl
   */
  targetTableName?: string;
  static names(): { [key: string]: string } {
    return {
      sourceTableName: 'SourceTableName',
      targetTableName: 'TargetTableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      sourceTableName: 'string',
      targetTableName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStructSyncOrderRequestParamTarget extends $dara.Model {
  /**
   * @remarks
   * The ID of the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.
   * 
   * This parameter is required.
   * 
   * @example
   * 432432
   */
  dbId?: number;
  /**
   * @remarks
   * The name that is used to search for the database. You can call the [SearchDatabases](https://help.aliyun.com/document_detail/141876.html) operation to query the name of the database.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  dbSearchName?: string;
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is not a logical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The version number. By default, this parameter is left empty.
   * 
   * >  If you specify the schema version number of the destination database, Data Management (DMS) only compares the schemas of the two databases.
   * 
   * @example
   * e179bbb8163dcdcfacda24858bedb4d8006ae2b8
   */
  versionId?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      dbSearchName: 'DbSearchName',
      logic: 'Logic',
      versionId: 'VersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      dbSearchName: 'string',
      logic: 'boolean',
      versionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStructSyncOrderRequestParam extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to skip an error that occurs in executing an SQL statement. Valid values:
   * 
   * *   **true**: continues to execute subsequent SQL statements if an error occurs in executing an SQL statement.
   * *   **false**: stops executing subsequent SQL statements if an error occurs in executing an SQL statement.
   * 
   * @example
   * false
   */
  ignoreError?: boolean;
  /**
   * @remarks
   * The information about the base database.
   * 
   * This parameter is required.
   */
  source?: CreateStructSyncOrderRequestParamSource;
  /**
   * @remarks
   * The information about the table of which you want to synchronize the schema.
   */
  tableInfoList?: CreateStructSyncOrderRequestParamTableInfoList[];
  /**
   * @remarks
   * The information about the database to which you want to synchronize the schema of a table.
   * 
   * This parameter is required.
   */
  target?: CreateStructSyncOrderRequestParamTarget;
  static names(): { [key: string]: string } {
    return {
      ignoreError: 'IgnoreError',
      source: 'Source',
      tableInfoList: 'TableInfoList',
      target: 'Target',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ignoreError: 'boolean',
      source: CreateStructSyncOrderRequestParamSource,
      tableInfoList: { 'type': 'array', 'itemType': CreateStructSyncOrderRequestParamTableInfoList },
      target: CreateStructSyncOrderRequestParamTarget,
    };
  }

  validate() {
    if(this.source && typeof (this.source as any).validate === 'function') {
      (this.source as any).validate();
    }
    if(Array.isArray(this.tableInfoList)) {
      $dara.Model.validateArray(this.tableInfoList);
    }
    if(this.target && typeof (this.target as any).validate === 'function') {
      (this.target as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateUploadOSSFileJobRequestUploadTarget extends $dara.Model {
  /**
   * @remarks
   * The name of the OSS bucket.
   * 
   * This parameter is required.
   * 
   * @example
   * test_bucket
   */
  bucketName?: string;
  /**
   * @remarks
   * The endpoint of the OSS bucket.
   * 
   * This parameter is required.
   * 
   * @example
   * http://oss-cn-hangzhou.aliyuncs.com
   */
  endpoint?: string;
  /**
   * @remarks
   * The name of the OSS object.
   * 
   * This parameter is required.
   * 
   * @example
   * test.sql
   */
  objectName?: string;
  static names(): { [key: string]: string } {
    return {
      bucketName: 'BucketName',
      endpoint: 'Endpoint',
      objectName: 'ObjectName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bucketName: 'string',
      endpoint: 'string',
      objectName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDifyDefaultVpcResponseBodyData extends $dara.Model {
  defaultVpcId?: string;
  workspaceId?: string;
  static names(): { [key: string]: string } {
    return {
      defaultVpcId: 'DefaultVpcId',
      workspaceId: 'WorkspaceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      defaultVpcId: 'string',
      workspaceId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadDataTrackResultRequestColumnFilter extends $dara.Model {
  /**
   * @remarks
   * The end value of the range used in the filter condition. This parameter takes effect only when Operator is set to BETWEEN.
   * 
   * @example
   * 10
   */
  betweenEnd?: string;
  /**
   * @remarks
   * The start value of the range used in the filter condition. This parameter takes effect only when Operator is set to BETWEEN.
   * 
   * @example
   * 1
   */
  betweenStart?: string;
  /**
   * @remarks
   * The name of the column.
   * 
   * @example
   * account_name
   */
  columnName?: string;
  /**
   * @remarks
   * The IN list used in the filter condition.
   */
  inList?: string[];
  /**
   * @remarks
   * The type of the operator used to configure the filter condition. Valid values:
   * 
   * *   **EQUAL**: retrieves the column whose value is equal to the specified value.
   * *   **NOT_EQUAL**: retrieves the column whose value is not equal to the specified value.
   * *   **IN**: retrieves the column whose value is in the IN list.
   * *   **BETWEEN**: retrieves the column whose value is in the specified range.
   * *   **LESS**: retrieves the column whose value is less than the specified value.
   * *   **MORE**: retrieves the column whose value is greater than the specified value.
   * *   **NOT_IN**: retrieves the column whose value is not in the IN list.
   * 
   * @example
   * EQUAL
   */
  operator?: string;
  /**
   * @remarks
   * The value used in the filter condition.
   * 
   * @example
   * 1
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      betweenEnd: 'BetweenEnd',
      betweenStart: 'BetweenStart',
      columnName: 'ColumnName',
      inList: 'InList',
      operator: 'Operator',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      betweenEnd: 'string',
      betweenStart: 'string',
      columnName: 'string',
      inList: { 'type': 'array', 'itemType': 'string' },
      operator: 'string',
      value: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.inList)) {
      $dara.Model.validateArray(this.inList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteScriptResponseBodyResults extends $dara.Model {
  /**
   * @remarks
   * The fields that are queried after the SQL statement is executed.
   */
  columnNames?: string[];
  /**
   * @remarks
   * The error message that is returned if the SQL statement fails to be executed. For example, an error message is returned because the SQL statement is invalid.
   * 
   * @example
   * UnknownError
   */
  message?: string;
  /**
   * @remarks
   * The total number of entries that are returned.
   * 
   * @example
   * 1
   */
  rowCount?: number;
  /**
   * @remarks
   * The rows that are queried after the SQL statement is executed.
   */
  rows?: { [key: string]: any }[];
  /**
   * @remarks
   * Indicates whether the SQL statement is executed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      columnNames: 'ColumnNames',
      message: 'Message',
      rowCount: 'RowCount',
      rows: 'Rows',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnNames: { 'type': 'array', 'itemType': 'string' },
      message: 'string',
      rowCount: 'number',
      rows: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.columnNames)) {
      $dara.Model.validateArray(this.columnNames);
    }
    if(Array.isArray(this.rows)) {
      $dara.Model.validateArray(this.rows);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAbacPolicyResponseBodyPolicy extends $dara.Model {
  /**
   * @example
   * 3
   */
  authorizedQuantity?: string;
  /**
   * @example
   * 51****
   */
  creatorId?: number;
  /**
   * @example
   * {
   *   "Statement": [
   *     {
   *       "Action": "*",
   *       "Effect": "Allow",
   *       "Resource": "*",
   *       "Condition": {
   *         "StringEqualsIgnoreCase": {
   *           "dms:DbType": [
   *             "redis"
   *           ]
   *         }
   *       }
   *     }
   *   ],
   *   "Version": "1"
   * }
   */
  policyContent?: string;
  /**
   * @example
   * test
   */
  policyDesc?: string;
  /**
   * @example
   * 12****
   */
  policyId?: number;
  /**
   * @example
   * policy_test
   */
  policyName?: string;
  policySource?: string;
  static names(): { [key: string]: string } {
    return {
      authorizedQuantity: 'AuthorizedQuantity',
      creatorId: 'CreatorId',
      policyContent: 'PolicyContent',
      policyDesc: 'PolicyDesc',
      policyId: 'PolicyId',
      policyName: 'PolicyName',
      policySource: 'PolicySource',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorizedQuantity: 'string',
      creatorId: 'number',
      policyContent: 'string',
      policyDesc: 'string',
      policyId: 'number',
      policyName: 'string',
      policySource: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetApprovalDetailResponseBodyApprovalDetailCurrentHandlersCurrentHandler extends $dara.Model {
  /**
   * @remarks
   * The ID of the user.
   * 
   * @example
   * 1
   */
  id?: number;
  /**
   * @remarks
   * The nickname of the user.
   * 
   * @example
   * nickName
   */
  nickName?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      nickName: 'NickName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      nickName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetApprovalDetailResponseBodyApprovalDetailCurrentHandlers extends $dara.Model {
  currentHandler?: GetApprovalDetailResponseBodyApprovalDetailCurrentHandlersCurrentHandler[];
  static names(): { [key: string]: string } {
    return {
      currentHandler: 'CurrentHandler',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentHandler: { 'type': 'array', 'itemType': GetApprovalDetailResponseBodyApprovalDetailCurrentHandlersCurrentHandler },
    };
  }

  validate() {
    if(Array.isArray(this.currentHandler)) {
      $dara.Model.validateArray(this.currentHandler);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetApprovalDetailResponseBodyApprovalDetailReasonList extends $dara.Model {
  reasons?: string[];
  static names(): { [key: string]: string } {
    return {
      reasons: 'Reasons',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reasons: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.reasons)) {
      $dara.Model.validateArray(this.reasons);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetApprovalDetailResponseBodyApprovalDetailWorkflowNodesWorkflowNodeAuditUserIdList extends $dara.Model {
  auditUserIds?: string[];
  static names(): { [key: string]: string } {
    return {
      auditUserIds: 'AuditUserIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      auditUserIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.auditUserIds)) {
      $dara.Model.validateArray(this.auditUserIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetApprovalDetailResponseBodyApprovalDetailWorkflowNodesWorkflowNode extends $dara.Model {
  /**
   * @remarks
   * The IDs of the approvers.
   */
  auditUserIdList?: GetApprovalDetailResponseBodyApprovalDetailWorkflowNodesWorkflowNodeAuditUserIdList;
  /**
   * @remarks
   * The name of the approval node.
   * 
   * @example
   * DBA
   */
  nodeName?: string;
  /**
   * @remarks
   * The remarks of the approval.
   * 
   * @example
   * Reason: Approved
   */
  operateComment?: string;
  /**
   * @remarks
   * The time when the ticket was submitted.
   * 
   * @example
   * 2019-10-15 13:47:54
   */
  operateTime?: string;
  /**
   * @remarks
   * The ID of the user who submitted the ticket.
   * 
   * @example
   * 1****
   */
  operatorId?: number;
  /**
   * @remarks
   * The approval status of the ticket. Valid values:
   * 
   * *   **START**: The ticket was submitted.
   * *   **ERROR**: An error occurred.
   * *   **AUDITING**: The ticket is being reviewed.
   * *   **REJECT**: The ticket was rejected.
   * *   **CANCEL**: The ticket was revoked.
   * *   **APPROVED**: The ticket was approved.
   * 
   * @example
   * APPROVED
   */
  workflowInsCode?: string;
  static names(): { [key: string]: string } {
    return {
      auditUserIdList: 'AuditUserIdList',
      nodeName: 'NodeName',
      operateComment: 'OperateComment',
      operateTime: 'OperateTime',
      operatorId: 'OperatorId',
      workflowInsCode: 'WorkflowInsCode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      auditUserIdList: GetApprovalDetailResponseBodyApprovalDetailWorkflowNodesWorkflowNodeAuditUserIdList,
      nodeName: 'string',
      operateComment: 'string',
      operateTime: 'string',
      operatorId: 'number',
      workflowInsCode: 'string',
    };
  }

  validate() {
    if(this.auditUserIdList && typeof (this.auditUserIdList as any).validate === 'function') {
      (this.auditUserIdList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetApprovalDetailResponseBodyApprovalDetailWorkflowNodes extends $dara.Model {
  workflowNode?: GetApprovalDetailResponseBodyApprovalDetailWorkflowNodesWorkflowNode[];
  static names(): { [key: string]: string } {
    return {
      workflowNode: 'WorkflowNode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      workflowNode: { 'type': 'array', 'itemType': GetApprovalDetailResponseBodyApprovalDetailWorkflowNodesWorkflowNode },
    };
  }

  validate() {
    if(Array.isArray(this.workflowNode)) {
      $dara.Model.validateArray(this.workflowNode);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetApprovalDetailResponseBodyApprovalDetail extends $dara.Model {
  /**
   * @remarks
   * The ID of the approval process.
   * 
   * @example
   * 184****
   */
  auditId?: number;
  /**
   * @remarks
   * The time when the approval process was created.
   * 
   * @example
   * 2021-10-29 14:17:25
   */
  createTime?: string;
  /**
   * @remarks
   * The information about the approver.
   */
  currentHandlers?: GetApprovalDetailResponseBodyApprovalDetailCurrentHandlers;
  /**
   * @remarks
   * The description of the approval process.
   * 
   * @example
   * [Instance permissions] Application\\<br/>Permission type: ⌈Logon⌋\\<br/>Application period: 30.0 days\\<br/>Background description: [Instance permissions] logon test\\<br/>\\<br/>[Application list]\\<br/>\\<span style=\\"color:red\\">product\\</span> rm-bp144d5ky4l4rli0417\\*\\*\\*\\*.mysql.rds.aliyuncs.com:3306 - PRODUCT\\<br/>
   */
  description?: string;
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * @example
   * 384****
   */
  orderId?: number;
  /**
   * @remarks
   * The type of the ticket. Valid values:
   * 
   * *   **NDDL**: a schema design ticket
   * *   **DATA_TRACK**: a data tracking ticket
   * *   **TABLE_SYNC**: a table synchronization ticket
   * *   **PERM_APPLY**: a permission application ticket
   * *   **DATA_EXPORT**: a data export ticket
   * *   **DATA_CORRECT**: a data change ticket
   * *   **OWNER_APPLY**: an owner role application ticket
   * *   **SENSITIVITY**: a column sensitivity level change ticket
   * 
   * @example
   * PERM_APPLY
   */
  orderType?: string;
  /**
   * @remarks
   * The reasons for the approval.
   */
  reasonList?: GetApprovalDetailResponseBodyApprovalDetailReasonList;
  /**
   * @remarks
   * The ID of the workflow template.
   * 
   * @example
   * 1234
   */
  templateId?: number;
  /**
   * @remarks
   * Third-party approval flow remarks.
   * 
   * @example
   * test
   */
  thirdpartyWorkflowComment?: string;
  /**
   * @remarks
   * The third-party approval flow link.
   * 
   * @example
   * https://xxx
   */
  thirdpartyWorkflowUrl?: string;
  /**
   * @remarks
   * The title of the approval process.
   * 
   * @example
   * Permission application ticket - 384\\*\\*\\*\\*
   */
  title?: string;
  /**
   * @remarks
   * The approval status of the ticket. Valid values:
   * 
   * *   **AUDITING**: The ticket is being reviewed.
   * *   **REJECT**: The ticket was rejected.
   * *   **CANCEL**: The ticket was revoked.
   * *   **APPROVED**: The ticket was approved.
   * 
   * > An approval process contains multiple approval nodes, and this parameter is returned for each approval node.
   * 
   * @example
   * APPROVED
   */
  workflowInsCode?: string;
  /**
   * @remarks
   * The details of approval nodes.
   */
  workflowNodes?: GetApprovalDetailResponseBodyApprovalDetailWorkflowNodes;
  static names(): { [key: string]: string } {
    return {
      auditId: 'AuditId',
      createTime: 'CreateTime',
      currentHandlers: 'CurrentHandlers',
      description: 'Description',
      orderId: 'OrderId',
      orderType: 'OrderType',
      reasonList: 'ReasonList',
      templateId: 'TemplateId',
      thirdpartyWorkflowComment: 'ThirdpartyWorkflowComment',
      thirdpartyWorkflowUrl: 'ThirdpartyWorkflowUrl',
      title: 'Title',
      workflowInsCode: 'WorkflowInsCode',
      workflowNodes: 'WorkflowNodes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      auditId: 'number',
      createTime: 'string',
      currentHandlers: GetApprovalDetailResponseBodyApprovalDetailCurrentHandlers,
      description: 'string',
      orderId: 'number',
      orderType: 'string',
      reasonList: GetApprovalDetailResponseBodyApprovalDetailReasonList,
      templateId: 'number',
      thirdpartyWorkflowComment: 'string',
      thirdpartyWorkflowUrl: 'string',
      title: 'string',
      workflowInsCode: 'string',
      workflowNodes: GetApprovalDetailResponseBodyApprovalDetailWorkflowNodes,
    };
  }

  validate() {
    if(this.currentHandlers && typeof (this.currentHandlers as any).validate === 'function') {
      (this.currentHandlers as any).validate();
    }
    if(this.reasonList && typeof (this.reasonList as any).validate === 'function') {
      (this.reasonList as any).validate();
    }
    if(this.workflowNodes && typeof (this.workflowNodes as any).validate === 'function') {
      (this.workflowNodes as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthorityTemplateResponseBodyAuthorityTemplateViewAuthorityTemplateItemListAuthorityTemplateItem extends $dara.Model {
  /**
   * @remarks
   * Other information. For example, you can add the logon permission on an instance to the permission template.
   * 
   * @example
   * "permissionTypes": [
   *             "LOGIN"
   *           ]
   */
  attribute?: string;
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 43***
   */
  dbId?: number;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * 188****
   */
  instanceId?: number;
  /**
   * @remarks
   * The ID of the resource.
   * 
   * @example
   * 12***
   */
  itemId?: number;
  /**
   * @remarks
   * The ID of the user who modified the resource.
   * 
   * @example
   * 51***
   */
  modifierId?: number;
  /**
   * @remarks
   * The type of the resource. Valid values:
   * 
   * *   **INSTANCE**: instance
   * *   **LOGIC_DB**: logical database
   * *   **META_DB**: physical database
   * *   **LOGIC_TABLE**: logical table
   * *   **SINGLE_TABLE**: physical table
   * 
   * @example
   * INSTANCE
   */
  resourceType?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * ExampleTable
   */
  tableName?: string;
  /**
   * @remarks
   * The ID of the permission template.
   * 
   * @example
   * 1563
   */
  templateId?: number;
  static names(): { [key: string]: string } {
    return {
      attribute: 'Attribute',
      dbId: 'DbId',
      instanceId: 'InstanceId',
      itemId: 'ItemId',
      modifierId: 'ModifierId',
      resourceType: 'ResourceType',
      tableName: 'TableName',
      templateId: 'TemplateId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      dbId: 'number',
      instanceId: 'number',
      itemId: 'number',
      modifierId: 'number',
      resourceType: 'string',
      tableName: 'string',
      templateId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthorityTemplateResponseBodyAuthorityTemplateViewAuthorityTemplateItemList extends $dara.Model {
  authorityTemplateItem?: GetAuthorityTemplateResponseBodyAuthorityTemplateViewAuthorityTemplateItemListAuthorityTemplateItem[];
  static names(): { [key: string]: string } {
    return {
      authorityTemplateItem: 'AuthorityTemplateItem',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorityTemplateItem: { 'type': 'array', 'itemType': GetAuthorityTemplateResponseBodyAuthorityTemplateViewAuthorityTemplateItemListAuthorityTemplateItem },
    };
  }

  validate() {
    if(Array.isArray(this.authorityTemplateItem)) {
      $dara.Model.validateArray(this.authorityTemplateItem);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthorityTemplateResponseBodyAuthorityTemplateView extends $dara.Model {
  /**
   * @remarks
   * The resource information in the permission template.
   */
  authorityTemplateItemList?: GetAuthorityTemplateResponseBodyAuthorityTemplateViewAuthorityTemplateItemList;
  /**
   * @remarks
   * The time when the permission template was created. The time is in the yyyy-MM-DD HH:mm:ss format.
   * 
   * @example
   * 2023-01-01 00:00:00
   */
  createTime?: string;
  /**
   * @remarks
   * The ID of the user who created the permission template.
   * 
   * @example
   * 12***
   */
  creatorId?: number;
  /**
   * @remarks
   * The description of the permission template.
   * 
   * @example
   * This template is used for business testing.
   */
  description?: string;
  /**
   * @remarks
   * The name of the permission template.
   * 
   * @example
   * TestTemplate
   */
  name?: string;
  /**
   * @remarks
   * The ID of the permission template.
   * 
   * @example
   * 1563
   */
  templateId?: number;
  static names(): { [key: string]: string } {
    return {
      authorityTemplateItemList: 'AuthorityTemplateItemList',
      createTime: 'CreateTime',
      creatorId: 'CreatorId',
      description: 'Description',
      name: 'Name',
      templateId: 'TemplateId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorityTemplateItemList: GetAuthorityTemplateResponseBodyAuthorityTemplateViewAuthorityTemplateItemList,
      createTime: 'string',
      creatorId: 'number',
      description: 'string',
      name: 'string',
      templateId: 'number',
    };
  }

  validate() {
    if(this.authorityTemplateItemList && typeof (this.authorityTemplateItemList as any).validate === 'function') {
      (this.authorityTemplateItemList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthorityTemplateItemResponseBodyAuthorityTemplateItemListAuthorityTemplateItem extends $dara.Model {
  /**
   * @remarks
   * The additional information. For example, permissions to log on to an instance are added to the permission template.
   * 
   * @example
   * "permissionTypes": [
   *             "LOGIN"
   *           ]
   */
  attribute?: string;
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 43***
   */
  dbId?: number;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * 188****
   */
  instanceId?: number;
  /**
   * @remarks
   * The ID of the resource.
   * 
   * @example
   * 12***
   */
  itemId?: number;
  /**
   * @remarks
   * The ID of the user who modifies the resource.
   * 
   * @example
   * 51***
   */
  modifierId?: number;
  /**
   * @remarks
   * The type of the resource. Valid values:
   * 
   * *   **INSTANCE**: instance
   * *   **LOGIC_DB**: logical database
   * *   **META_DB**: physical database
   * *   **LOGIC_TABLE**: logical table
   * *   **LOGIC_TABLE**: physical table
   * 
   * @example
   * INSTANCE
   */
  resourceType?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * ExampleTable
   */
  tableName?: string;
  /**
   * @remarks
   * The ID of the permission template.
   * 
   * @example
   * 1563
   */
  templateId?: number;
  static names(): { [key: string]: string } {
    return {
      attribute: 'Attribute',
      dbId: 'DbId',
      instanceId: 'InstanceId',
      itemId: 'ItemId',
      modifierId: 'ModifierId',
      resourceType: 'ResourceType',
      tableName: 'TableName',
      templateId: 'TemplateId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attribute: 'string',
      dbId: 'number',
      instanceId: 'number',
      itemId: 'number',
      modifierId: 'number',
      resourceType: 'string',
      tableName: 'string',
      templateId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthorityTemplateItemResponseBodyAuthorityTemplateItemList extends $dara.Model {
  authorityTemplateItem?: GetAuthorityTemplateItemResponseBodyAuthorityTemplateItemListAuthorityTemplateItem[];
  static names(): { [key: string]: string } {
    return {
      authorityTemplateItem: 'AuthorityTemplateItem',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorityTemplateItem: { 'type': 'array', 'itemType': GetAuthorityTemplateItemResponseBodyAuthorityTemplateItemListAuthorityTemplateItem },
    };
  }

  validate() {
    if(Array.isArray(this.authorityTemplateItem)) {
      $dara.Model.validateArray(this.authorityTemplateItem);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetClassificationTemplateResponseBodyClassificationResourceTemplateMap extends $dara.Model {
  /**
   * @example
   * 24****
   */
  resourceId?: number;
  /**
   * @example
   * INSTANCE
   */
  resourceType?: string;
  /**
   * @example
   * 3***
   */
  templateId?: number;
  /**
   * @example
   * INNER
   */
  templateType?: string;
  static names(): { [key: string]: string } {
    return {
      resourceId: 'ResourceId',
      resourceType: 'ResourceType',
      templateId: 'TemplateId',
      templateType: 'TemplateType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      resourceId: 'number',
      resourceType: 'string',
      templateId: 'number',
      templateType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDBTopologyResponseBodyDBTopologyDBTopologyInfoList extends $dara.Model {
  /**
   * @remarks
   * The name of the catalog to which the database belongs.
   * 
   * > If the database is a PostgreSQL database, the value of this parameter is the name of the database.
   * 
   * @example
   * def
   */
  catalogName?: string;
  /**
   * @remarks
   * The ID of the database for which the schema design is executed.
   * 
   * @example
   * 423532
   */
  dbId?: number;
  /**
   * @remarks
   * The type of the database engine.
   * 
   * @example
   * polardb
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment to which the database belongs. Valid values:
   * 
   * *   product: production environment
   * *   dev: development environment
   * *   pre: staging environment
   * *   test: test environment
   * *   sit: SIT environment
   * *   uat: user acceptance testing (UAT) environment
   * *   pet: stress testing environment
   * *   stag: STAG environment
   * 
   * @example
   * dev
   */
  envType?: string;
  /**
   * @remarks
   * The ID of the instance. The valid value is returned if you call the ListInstances operation. The instance ID is not the ID of the RDS instance.
   * 
   * @example
   * 4325325
   */
  instanceId?: number;
  /**
   * @remarks
   * Instance resource ID.
   * 
   * @example
   * rm-xxx
   */
  instanceResourceId?: string;
  /**
   * @remarks
   * The source of the database instance. Valid values:
   * 
   * *   **PUBLIC_OWN:** a self-managed database instance that is deployed on the Internet
   * *   **RDS:** an ApsaraDB RDS instance
   * *   **ECS_OWN:** a self-managed database that is deployed on an Elastic Compute Service (ECS) instance
   * *   **VPC_IDC:** a self-managed database instance that is deployed in a data center connected over a virtual private cloud (VPC)
   * 
   * @example
   * RDS
   */
  instanceSource?: string;
  /**
   * @remarks
   * The ID of the region in which the instance resides.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The name of the logical database.
   * 
   * > If the database is a PostgreSQL database, the value of this parameter is the name of the database schema.
   * 
   * @example
   * db_test@rm-xxx:3306
   */
  schemaName?: string;
  /**
   * @remarks
   * The name of the saved search.
   * 
   * @example
   * db_test
   */
  searchName?: string;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dbId: 'DbId',
      dbType: 'DbType',
      envType: 'EnvType',
      instanceId: 'InstanceId',
      instanceResourceId: 'InstanceResourceId',
      instanceSource: 'InstanceSource',
      regionId: 'RegionId',
      schemaName: 'SchemaName',
      searchName: 'SearchName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dbId: 'number',
      dbType: 'string',
      envType: 'string',
      instanceId: 'number',
      instanceResourceId: 'string',
      instanceSource: 'string',
      regionId: 'string',
      schemaName: 'string',
      searchName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDBTopologyResponseBodyDBTopology extends $dara.Model {
  /**
   * @remarks
   * The alias of the access point.
   * 
   * @example
   * logic_db_test
   */
  alias?: string;
  /**
   * @remarks
   * The list of database splitting topology information.
   */
  DBTopologyInfoList?: GetDBTopologyResponseBodyDBTopologyDBTopologyInfoList[];
  /**
   * @remarks
   * The type of the database engine.
   * 
   * @example
   * polardb
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment in which the database instance is deployed. Valid values:
   * 
   * *   product: production environment
   * *   dev: development environment
   * *   pre: pre-release environment
   * *   test: test environment
   * *   sit: system integration testing (SIT) environment
   * *   uat: user acceptance testing (UAT) environment
   * *   pet: stress testing environment
   * *   stag: staging environment
   * 
   * @example
   * dev
   */
  envType?: string;
  /**
   * @remarks
   * The ID of the logical database.
   * 
   * @example
   * 1234
   */
  logicDbId?: number;
  /**
   * @remarks
   * Logical database name.
   * 
   * @example
   * logic_db_test
   */
  logicDbName?: string;
  /**
   * @remarks
   * The name of the saved search.
   * 
   * @example
   * logic_db_test
   */
  searchName?: string;
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      DBTopologyInfoList: 'DBTopologyInfoList',
      dbType: 'DbType',
      envType: 'EnvType',
      logicDbId: 'LogicDbId',
      logicDbName: 'LogicDbName',
      searchName: 'SearchName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      DBTopologyInfoList: { 'type': 'array', 'itemType': GetDBTopologyResponseBodyDBTopologyDBTopologyInfoList },
      dbType: 'string',
      envType: 'string',
      logicDbId: 'number',
      logicDbName: 'string',
      searchName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.DBTopologyInfoList)) {
      $dara.Model.validateArray(this.DBTopologyInfoList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveCountResponseBodyData extends $dara.Model {
  /**
   * @remarks
   * The number of tickets that data archiving failed.
   * 
   * @example
   * 1**
   */
  failCount?: number;
  /**
   * @remarks
   * The number of tickets that data archiving is in progress.
   * 
   * @example
   * 2**
   */
  processingCount?: number;
  /**
   * @remarks
   * The number of tickets that data archiving is successful.
   * 
   * @example
   * 3**
   */
  successCount?: number;
  /**
   * @remarks
   * The total number of data archiving tickets.
   * 
   * @example
   * 6**
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      failCount: 'FailCount',
      processingCount: 'ProcessingCount',
      successCount: 'SuccessCount',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      failCount: 'number',
      processingCount: 'number',
      successCount: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataDagInfo extends $dara.Model {
  /**
   * @remarks
   * The ID of the user who created the task flow.
   * 
   * @example
   * 59****
   */
  creatorId?: string;
  /**
   * @remarks
   * The start time for scheduling. The task flow is not scheduled before this point in time.
   * 
   * @example
   * 1970-01-01
   */
  cronBeginDate?: string;
  /**
   * @remarks
   * The end time for scheduling. The task flow is not scheduled after this point in time.
   * 
   * @example
   * 9999-01-01
   */
  cronEndDate?: string;
  /**
   * @remarks
   * Indicates whether the archiving task is a scheduled task. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  cronTrigger?: boolean;
  /**
   * @remarks
   * Indicates whether the task is used to develop warehouses.
   * 
   * >  This field is a retained field that is not in use.
   * 
   * @example
   * false
   */
  DWDevelop?: boolean;
  /**
   * @remarks
   * The name of the workflow.
   * 
   * @example
   * data-archive-9099197
   */
  dagName?: string;
  /**
   * @remarks
   * The ID of the owner of the workflow.
   * 
   * @example
   * 13****
   */
  dagOwnerId?: string;
  /**
   * @remarks
   * The ID of the deployment record.
   * 
   * @example
   * 93***
   */
  deployId?: number;
  /**
   * @remarks
   * The description of the workflow.
   * 
   * @example
   * order id:9099197
   */
  description?: string;
  /**
   * @remarks
   * The ID of the editable workflow version.
   * 
   * @example
   * 24***
   */
  editDagId?: number;
  /**
   * @remarks
   * The time when the workflow was created.
   * 
   * @example
   * 2023-05-15 16:00:48
   */
  gmtCreate?: string;
  /**
   * @remarks
   * The time when the workflow was last modified.
   * 
   * @example
   * 2023-06-15 16:00:48
   */
  gmtModified?: string;
  /**
   * @remarks
   * The ID of the task flow.
   * 
   * @example
   * 24***
   */
  id?: number;
  /**
   * @remarks
   * Indicates whether the workflow is public. Valid values:
   * 
   * *   **0**: not public.
   * *   **1**: public.
   * 
   * @example
   * 0
   */
  isPublic?: number;
  /**
   * @remarks
   * Indicates whether the task is a historical task. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  legacy?: boolean;
  /**
   * @remarks
   * Indicates whether the task was created by the system. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  system?: boolean;
  /**
   * @remarks
   * The tenant ID.
   * 
   * @example
   * 5***
   */
  tenantId?: string;
  /**
   * @remarks
   * Indicates whether the workflow is triggered to run once. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  triggerOnce?: boolean;
  static names(): { [key: string]: string } {
    return {
      creatorId: 'CreatorId',
      cronBeginDate: 'CronBeginDate',
      cronEndDate: 'CronEndDate',
      cronTrigger: 'CronTrigger',
      DWDevelop: 'DWDevelop',
      dagName: 'DagName',
      dagOwnerId: 'DagOwnerId',
      deployId: 'DeployId',
      description: 'Description',
      editDagId: 'EditDagId',
      gmtCreate: 'GmtCreate',
      gmtModified: 'GmtModified',
      id: 'Id',
      isPublic: 'IsPublic',
      legacy: 'Legacy',
      system: 'System',
      tenantId: 'TenantId',
      triggerOnce: 'TriggerOnce',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creatorId: 'string',
      cronBeginDate: 'string',
      cronEndDate: 'string',
      cronTrigger: 'boolean',
      DWDevelop: 'boolean',
      dagName: 'string',
      dagOwnerId: 'string',
      deployId: 'number',
      description: 'string',
      editDagId: 'number',
      gmtCreate: 'string',
      gmtModified: 'string',
      id: 'number',
      isPublic: 'number',
      legacy: 'boolean',
      system: 'boolean',
      tenantId: 'string',
      triggerOnce: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataDbBaseInfoStandardGroup extends $dara.Model {
  /**
   * @remarks
   * The type of the instance engine. For information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * @example
   * MySQL
   */
  dbType?: string;
  /**
   * @remarks
   * The description of the security rule set.
   * 
   * @example
   * adb_mysql default
   */
  description?: string;
  /**
   * @remarks
   * Indicates whether the instance is managed in Flexible Management or Stable Change mode. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  freeOrStable?: boolean;
  /**
   * @remarks
   * The time when the security rule was created.
   * 
   * @example
   * 2020-05-24 14:12:32
   */
  gmtCreate?: string;
  /**
   * @remarks
   * The time when the security rule was last modified.
   * 
   * @example
   * 2020-05-25 14:12:32
   */
  gmtModified?: string;
  /**
   * @remarks
   * The type of the control mode of the instance. Valid values:
   * 
   * *   **COMMON**: The instance is managed in Security Collaboration mode.
   * *   **NONE_CONTROL**: The instance is managed in Flexible Management mode.
   * *   **STABLE**: The instance is managed in Stable Change mode.
   * 
   * @example
   * COMMON
   */
  groupMode?: string;
  /**
   * @remarks
   * The name of the security rule that corresponds to the control mode.
   * 
   * @example
   * adb_mysql default
   */
  groupName?: string;
  /**
   * @remarks
   * The ID of the security rule.
   * 
   * @example
   * 24***
   */
  id?: number;
  /**
   * @remarks
   * The user ID of the last modified security rule.
   * 
   * @example
   * 12****
   */
  lastMenderId?: number;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      description: 'Description',
      freeOrStable: 'FreeOrStable',
      gmtCreate: 'GmtCreate',
      gmtModified: 'GmtModified',
      groupMode: 'GroupMode',
      groupName: 'GroupName',
      id: 'Id',
      lastMenderId: 'LastMenderId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      description: 'string',
      freeOrStable: 'boolean',
      gmtCreate: 'string',
      gmtModified: 'string',
      groupMode: 'string',
      groupName: 'string',
      id: 'number',
      lastMenderId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataDbBaseInfo extends $dara.Model {
  /**
   * @remarks
   * The alias of the database instance.
   * 
   * @example
   * tf-testAccDMSEnterpriseLogicDatabase853****
   */
  alias?: string;
  /**
   * @remarks
   * The timeout period of queries on the database.
   * 
   * @example
   * 600
   */
  alterTimeout?: number;
  /**
   * @remarks
   * Indicates whether access control is enabled for data assets. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  assetControl?: boolean;
  /**
   * @remarks
   * The name of the instance in the instance list.
   * 
   * @example
   * test
   */
  catalogName?: string;
  /**
   * @remarks
   * Indicates whether the instance is added to the DMS whitelist.
   * 
   * @example
   * whitelist_done
   */
  clusterNode?: string;
  /**
   * @remarks
   * The ID of the database. You can call the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.
   * 
   * >  You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to query the ID of a physical database or the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to query the ID of a logical database.
   * 
   * @example
   * 348****
   */
  dbId?: number;
  /**
   * @remarks
   * The type of the database. For information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * @example
   * MySQL
   */
  dbType?: string;
  /**
   * @remarks
   * The ID of the database administrator (DBA) of the instance.
   * 
   * @example
   * 16****
   */
  dbaId?: number;
  /**
   * @remarks
   * The nickname of the DBA of the instance.
   * 
   * @example
   * DBA
   */
  dbaName?: string;
  /**
   * @remarks
   * The complete endpoint of the database.
   * 
   * @example
   * test@rm-2ze756u8837****.mysql.rds.aliyuncs.com:3306 [test]
   */
  description?: string;
  /**
   * @remarks
   * The encoding format of the database.
   * 
   * @example
   * utf8
   */
  encoding?: string;
  /**
   * @remarks
   * The type of the environment to which the database belongs. Valid values:
   * 
   * *   **product**: production environment
   * *   **dev**: development environment
   * *   **pre**: staging environment
   * *   **test**: test environment
   * *   **sit**: system integration testing (SIT) environment
   * *   **uat**: user acceptance testing (UAT) environment
   * *   **pet**: stress testing environment
   * *   **stag**: STAG environment
   * 
   * @example
   * product
   */
  envType?: string;
  /**
   * @remarks
   * Indicates whether the instance needs special attention. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  follow?: boolean;
  /**
   * @remarks
   * The endpoint that is used to connect to the database.
   * 
   * @example
   * rm-2ze756u8837****.mysql.rds.aliyuncs.com
   */
  host?: string;
  /**
   * @remarks
   * The region in which the database instance resides.
   * 
   * @example
   * cn-beijing
   */
  idc?: string;
  /**
   * @remarks
   * The name of the region in which the database instance resides.
   * 
   * @example
   * cn-beijing
   */
  idcTitle?: string;
  /**
   * @remarks
   * The ID of the instance to which the database belongs.
   * 
   * @example
   * 175****
   */
  instanceId?: number;
  /**
   * @remarks
   * The source of the database instance.Valid values:
   * 
   * *   **RDS**: an ApsaraDB RDS instance.
   * *   **ECS_OWN**: a self-managed database deployed on an Elastic Compute Service (ECS) instance.
   * *   **PUBLIC_OWN**: a self-managed database instance that is connected over the Internet.
   * *   **VPC_ID**: a self-managed database instance in a virtual private cloud (VPC) that is connected over Express Connect circuits.
   * *   **GATEWAY**: a database instance connected by using a database gateway.
   * 
   * @example
   * RDS
   */
  instanceSource?: string;
  /**
   * @remarks
   * The time when the database information was last obtained.
   * 
   * @example
   * 2023-05-14 18:34:45
   */
  lastSyncTime?: string;
  /**
   * @remarks
   * The instance level.
   * 
   * @example
   * medium
   */
  level?: string;
  /**
   * @remarks
   * Indicates whether the database is logical. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The IDs of the owners of the databases, which are stored as an array. You can call the [GetUser](https://help.aliyun.com/document_detail/147098.html) or [ListUsers](https://help.aliyun.com/document_detail/141938.html) operation to query the IDs of the owners.
   * 
   * >  The value of OwnerIds is the same as the value of UserId
   */
  ownerIds?: number[];
  /**
   * @remarks
   * The usernames of the database owners.
   */
  ownerNames?: string[];
  /**
   * @remarks
   * The port that is used to connect to the database.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * test
   */
  schemaName?: string;
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * @example
   * test@rm-2ze756u8837****.mysql.rds.aliyuncs.com:3306 [test]
   */
  searchName?: string;
  /**
   * @remarks
   * The details of the control mode of the instance.
   */
  standardGroup?: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataDbBaseInfoStandardGroup;
  /**
   * @remarks
   * The status of the database. Valid values:
   * 
   * *   **NORMAL**: The database is running as expected.
   * *   **DISABLE**: The database is disabled.
   * *   **OFFLINE**: The database is unpublished.
   * *   **NOT_EXIST**: The database does not exist.
   * 
   * @example
   * NORMAL
   */
  state?: string;
  /**
   * @remarks
   * The number of tables.
   * 
   * @example
   * 201
   */
  tableCount?: number;
  /**
   * @remarks
   * The name of TNS.
   * 
   * @example
   * TNS_4010
   */
  tnsName?: string;
  /**
   * @remarks
   * The unit type.
   * 
   * @example
   * -1
   */
  unitType?: string;
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      alterTimeout: 'AlterTimeout',
      assetControl: 'AssetControl',
      catalogName: 'CatalogName',
      clusterNode: 'ClusterNode',
      dbId: 'DbId',
      dbType: 'DbType',
      dbaId: 'DbaId',
      dbaName: 'DbaName',
      description: 'Description',
      encoding: 'Encoding',
      envType: 'EnvType',
      follow: 'Follow',
      host: 'Host',
      idc: 'Idc',
      idcTitle: 'IdcTitle',
      instanceId: 'InstanceId',
      instanceSource: 'InstanceSource',
      lastSyncTime: 'LastSyncTime',
      level: 'Level',
      logic: 'Logic',
      ownerIds: 'OwnerIds',
      ownerNames: 'OwnerNames',
      port: 'Port',
      schemaName: 'SchemaName',
      searchName: 'SearchName',
      standardGroup: 'StandardGroup',
      state: 'State',
      tableCount: 'TableCount',
      tnsName: 'TnsName',
      unitType: 'UnitType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      alterTimeout: 'number',
      assetControl: 'boolean',
      catalogName: 'string',
      clusterNode: 'string',
      dbId: 'number',
      dbType: 'string',
      dbaId: 'number',
      dbaName: 'string',
      description: 'string',
      encoding: 'string',
      envType: 'string',
      follow: 'boolean',
      host: 'string',
      idc: 'string',
      idcTitle: 'string',
      instanceId: 'number',
      instanceSource: 'string',
      lastSyncTime: 'string',
      level: 'string',
      logic: 'boolean',
      ownerIds: { 'type': 'array', 'itemType': 'number' },
      ownerNames: { 'type': 'array', 'itemType': 'string' },
      port: 'number',
      schemaName: 'string',
      searchName: 'string',
      standardGroup: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataDbBaseInfoStandardGroup,
      state: 'string',
      tableCount: 'number',
      tnsName: 'string',
      unitType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    if(Array.isArray(this.ownerNames)) {
      $dara.Model.validateArray(this.ownerNames);
    }
    if(this.standardGroup && typeof (this.standardGroup as any).validate === 'function') {
      (this.standardGroup as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataInstances extends $dara.Model {
  /**
   * @remarks
   * The business time of the task flow. The time is displayed in the yyyy-MM-DD HH:mm:ss format.
   * 
   * @example
   * 2023-05-14 16:00:57
   */
  businessTime?: string;
  /**
   * @remarks
   * The task flow ID. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the value of this parameter.
   * 
   * @example
   * 37***
   */
  dagId?: number;
  /**
   * @remarks
   * The time when the task flow ended. The time is displayed in the yyyy-MM-DD HH:mm:ss format.
   * 
   * @example
   * 2022-06-04 15:14:00
   */
  endTime?: string;
  /**
   * @remarks
   * The time when the task flow was created.
   * 
   * @example
   * 2023-05-14 16:00:57
   */
  gmtCreate?: string;
  /**
   * @remarks
   * The time when the task flow was last modified.
   * 
   * @example
   * 2023-05-14 16:00:57
   */
  gmtModified?: string;
  /**
   * @remarks
   * The ID of the historical task flow.
   * 
   * @example
   * 32***
   */
  historyDagId?: number;
  /**
   * @remarks
   * The ID of the instance in the task flow that is executed.
   * 
   * @example
   * 24***
   */
  id?: number;
  /**
   * @remarks
   * The context of the previous execution of the task flow.
   * 
   * @example
   * {
   *       "nodes": [
   *             48**
   *       ],
   *       "edges": {}
   * }
   */
  lastRunningContext?: string;
  /**
   * @remarks
   * The context of the current execution of the task flow.
   * 
   * @example
   * 2023-05-15 16:37:48[GMT+08:00] INFO - Resource Control is active!\\n2023-05-15 16:37:48[GMT+08:00] INFO - Starting job j_4834 at Mon May 15 16:37:48 CST 2023
   */
  msg?: string;
  /**
   * @remarks
   * The status of the task. Valid values:
   * 
   * *   **0**: The task is waiting for execution.
   * *   **1**: The task is in progress.
   * *   **2**: The task is suspended.
   * *   **3**: The task failed.
   * *   **4**: The task is successful.
   * *   **5**: The task is complete.
   * 
   * @example
   * 4
   */
  status?: number;
  /**
   * @remarks
   * The tenant ID.
   * 
   * @example
   * 5***
   */
  tenantId?: string;
  /**
   * @remarks
   * The mode in which the task flow was triggered. Valid values:
   * 
   * *   **0**: The task flow was triggered based on a schedule.
   * *   **1**: The task flow was manually triggered.
   * 
   * @example
   * 1
   */
  triggerType?: number;
  /**
   * @remarks
   * The version number.
   * 
   * @example
   * 1
   */
  version?: string;
  static names(): { [key: string]: string } {
    return {
      businessTime: 'BusinessTime',
      dagId: 'DagId',
      endTime: 'EndTime',
      gmtCreate: 'GmtCreate',
      gmtModified: 'GmtModified',
      historyDagId: 'HistoryDagId',
      id: 'Id',
      lastRunningContext: 'LastRunningContext',
      msg: 'Msg',
      status: 'Status',
      tenantId: 'TenantId',
      triggerType: 'TriggerType',
      version: 'Version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessTime: 'string',
      dagId: 'number',
      endTime: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      historyDagId: 'number',
      id: 'number',
      lastRunningContext: 'string',
      msg: 'string',
      status: 'number',
      tenantId: 'string',
      triggerType: 'number',
      version: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataNextFireTimeResult extends $dara.Model {
  /**
   * @remarks
   * The type of scheduled triggering.
   * 
   * @example
   * NOT_SET
   */
  cronFireType?: string;
  static names(): { [key: string]: string } {
    return {
      cronFireType: 'CronFireType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cronFireType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraData extends $dara.Model {
  /**
   * @remarks
   * The information about the workflow.
   */
  dagInfo?: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataDagInfo;
  /**
   * @remarks
   * The database information related to data archiving tickets.
   */
  dbBaseInfo?: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataDbBaseInfo;
  /**
   * @remarks
   * The total number of archiving tasks.
   * 
   * @example
   * 2
   */
  instanceTotal?: number;
  /**
   * @remarks
   * The list of archiving tasks.
   */
  instances?: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataInstances[];
  /**
   * @remarks
   * The time when the next task is triggered.
   */
  nextFireTimeResult?: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataNextFireTimeResult;
  /**
   * @remarks
   * The page number.
   * 
   * @example
   * 10
   */
  pageIndex?: number;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The name of the temporary table that is generated by the archiving task (indicated by the archiving task ID).
   * 
   * @example
   * {
   *       "803***": [
   *             "tmp_dms_21321_20230704144336_temp_test_check"
   *       ]
   * }
   */
  tempTableNameMap?: { [key: string]: any };
  static names(): { [key: string]: string } {
    return {
      dagInfo: 'DagInfo',
      dbBaseInfo: 'DbBaseInfo',
      instanceTotal: 'InstanceTotal',
      instances: 'Instances',
      nextFireTimeResult: 'NextFireTimeResult',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
      tempTableNameMap: 'TempTableNameMap',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagInfo: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataDagInfo,
      dbBaseInfo: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataDbBaseInfo,
      instanceTotal: 'number',
      instances: { 'type': 'array', 'itemType': GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataInstances },
      nextFireTimeResult: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraDataNextFireTimeResult,
      pageIndex: 'number',
      pageSize: 'number',
      tempTableNameMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
    };
  }

  validate() {
    if(this.dagInfo && typeof (this.dagInfo as any).validate === 'function') {
      (this.dagInfo as any).validate();
    }
    if(this.dbBaseInfo && typeof (this.dbBaseInfo as any).validate === 'function') {
      (this.dbBaseInfo as any).validate();
    }
    if(Array.isArray(this.instances)) {
      $dara.Model.validateArray(this.instances);
    }
    if(this.nextFireTimeResult && typeof (this.nextFireTimeResult as any).validate === 'function') {
      (this.nextFireTimeResult as any).validate();
    }
    if(this.tempTableNameMap) {
      $dara.Model.validateMap(this.tempTableNameMap);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginParamTableIncludes extends $dara.Model {
  /**
   * @remarks
   * The table name.
   * 
   * @example
   * tm_insured_cb
   */
  tableName?: string;
  /**
   * @remarks
   * The filter condition.
   * 
   * @example
   * id<1000 or gmt_create<\\"2023-05-14 16:00:57\\"
   */
  tableWhere?: string;
  static names(): { [key: string]: string } {
    return {
      tableName: 'TableName',
      tableWhere: 'TableWhere',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tableName: 'string',
      tableWhere: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginParam extends $dara.Model {
  /**
   * @remarks
   * The type of the archiving destination.
   * 
   * @example
   * inner_oss
   */
  archiveMethod?: string;
  /**
   * @remarks
   * The schema of the database and table to be archived.
   * 
   * @example
   * test
   */
  dbSchema?: string;
  /**
   * @remarks
   * Indicates whether the database is logical.
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  logic?: boolean;
  /**
   * @remarks
   * The post behavior of archiving.
   */
  orderAfter?: string[];
  /**
   * @remarks
   * The running method, which indicates whether to run the task immediately or at a specific point in time.
   * 
   * @example
   * now
   */
  runMethod?: string;
  /**
   * @remarks
   * The ID of the source database.
   * 
   * @example
   * 12***
   */
  sourceDatabaseId?: number;
  /**
   * @remarks
   * The list of the archived tables and the filter conditions.
   */
  tableIncludes?: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginParamTableIncludes[];
  /**
   * @remarks
   * The mapping of schemas.
   */
  tableMapping?: string[];
  /**
   * @remarks
   * The ID of the destination instance.
   * 
   * @example
   * 12***
   */
  targetInstanceId?: string;
  /**
   * @remarks
   * The time variable defined for scheduled archiving.
   */
  variables?: string[];
  static names(): { [key: string]: string } {
    return {
      archiveMethod: 'ArchiveMethod',
      dbSchema: 'DbSchema',
      logic: 'Logic',
      orderAfter: 'OrderAfter',
      runMethod: 'RunMethod',
      sourceDatabaseId: 'SourceDatabaseId',
      tableIncludes: 'TableIncludes',
      tableMapping: 'TableMapping',
      targetInstanceId: 'TargetInstanceId',
      variables: 'Variables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      archiveMethod: 'string',
      dbSchema: 'string',
      logic: 'boolean',
      orderAfter: { 'type': 'array', 'itemType': 'string' },
      runMethod: 'string',
      sourceDatabaseId: 'number',
      tableIncludes: { 'type': 'array', 'itemType': GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginParamTableIncludes },
      tableMapping: { 'type': 'array', 'itemType': 'string' },
      targetInstanceId: 'string',
      variables: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.orderAfter)) {
      $dara.Model.validateArray(this.orderAfter);
    }
    if(Array.isArray(this.tableIncludes)) {
      $dara.Model.validateArray(this.tableIncludes);
    }
    if(Array.isArray(this.tableMapping)) {
      $dara.Model.validateArray(this.tableMapping);
    }
    if(Array.isArray(this.variables)) {
      $dara.Model.validateArray(this.variables);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetail extends $dara.Model {
  /**
   * @remarks
   * The description of the data archiving tickets.
   * 
   * @example
   * Archiving of test results
   */
  comment?: string;
  /**
   * @remarks
   * The user who submitted the ticket.
   * 
   * @example
   * dmstest
   */
  committer?: string;
  /**
   * @remarks
   * The ID of the user who submitted the ticket. The ID is a user ID and not the ID of an Alibaba Cloud account.
   * 
   * @example
   * 26***
   */
  committerId?: number;
  /**
   * @remarks
   * The time when the ticket was created.
   * 
   * @example
   * 2023-05-15 16:00:48
   */
  gmtCreate?: string;
  /**
   * @remarks
   * The time when the ticket was last modified.
   * 
   * @example
   * 2023-05-23 16:00:48
   */
  gmtModified?: string;
  /**
   * @remarks
   * The ID of data archiving tickets.
   * 
   * @example
   * 868****
   */
  id?: number;
  /**
   * @remarks
   * The additional information about the ticket.
   */
  pluginExtraData?: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraData;
  /**
   * @remarks
   * The ticket creation parameter. The value is a JSON string. For more information, see [PluginType parameter](https://help.aliyun.com/document_detail/429109.html).
   */
  pluginParam?: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginParam;
  /**
   * @remarks
   * The plug-in type that corresponds to the type of the ticket. The plug-in type for data archiving is DATA_ARCHIVE. For more information, see [PluginType parameter](https://help.aliyun.com/document_detail/429109.html).
   * 
   * @example
   * DATA_ARCHIVE
   */
  pluginType?: string;
  /**
   * @remarks
   * The user IDs related to the ticket.
   */
  relatedUserList?: number[];
  /**
   * @remarks
   * The nicknames of the users that are related to the ticket.
   */
  relatedUserNickList?: string[];
  /**
   * @remarks
   * The status code of the ticket. Valid values:
   * 
   * *   **new**: newly created.
   * *   **toaudit**: being reviewed.
   * *   **Approved**: approved.
   * *   **reject**: rejected.
   * *   **processing**: being executed.
   * *   **Success**: successful.
   * *   **closed**: disabled.
   * 
   * @example
   * processing
   */
  statusCode?: string;
  /**
   * @remarks
   * The status description of the ticket.
   * 
   * @example
   * a ticket task is being executed.
   */
  statusDesc?: string;
  /**
   * @remarks
   * The ID of the approval process. You can call the [GetOrderBaseInfo](https://help.aliyun.com/document_detail/144642.html) operation to obtain the ID of the approval process.
   * 
   * @example
   * 29****
   */
  workflowInstanceId?: number;
  /**
   * @remarks
   * The description of the approval process.
   * 
   * @example
   * approved
   */
  workflowStatusDesc?: string;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      committer: 'Committer',
      committerId: 'CommitterId',
      gmtCreate: 'GmtCreate',
      gmtModified: 'GmtModified',
      id: 'Id',
      pluginExtraData: 'PluginExtraData',
      pluginParam: 'PluginParam',
      pluginType: 'PluginType',
      relatedUserList: 'RelatedUserList',
      relatedUserNickList: 'RelatedUserNickList',
      statusCode: 'StatusCode',
      statusDesc: 'StatusDesc',
      workflowInstanceId: 'WorkflowInstanceId',
      workflowStatusDesc: 'WorkflowStatusDesc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      committer: 'string',
      committerId: 'number',
      gmtCreate: 'string',
      gmtModified: 'string',
      id: 'number',
      pluginExtraData: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginExtraData,
      pluginParam: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetailPluginParam,
      pluginType: 'string',
      relatedUserList: { 'type': 'array', 'itemType': 'number' },
      relatedUserNickList: { 'type': 'array', 'itemType': 'string' },
      statusCode: 'string',
      statusDesc: 'string',
      workflowInstanceId: 'number',
      workflowStatusDesc: 'string',
    };
  }

  validate() {
    if(this.pluginExtraData && typeof (this.pluginExtraData as any).validate === 'function') {
      (this.pluginExtraData as any).validate();
    }
    if(this.pluginParam && typeof (this.pluginParam as any).validate === 'function') {
      (this.pluginParam as any).validate();
    }
    if(Array.isArray(this.relatedUserList)) {
      $dara.Model.validateArray(this.relatedUserList);
    }
    if(Array.isArray(this.relatedUserNickList)) {
      $dara.Model.validateArray(this.relatedUserNickList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectBackupFilesResponseBodyDataCorrectBackupFiles extends $dara.Model {
  fileUrl?: string[];
  static names(): { [key: string]: string } {
    return {
      fileUrl: 'FileUrl',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileUrl: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.fileUrl)) {
      $dara.Model.validateArray(this.fileUrl);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailConfigDetailCronExtConfig extends $dara.Model {
  /**
   * @remarks
   * The number of times defragmentation is performed. This parameter is valid only if the value of OptimizeTableAfterEveryClearTimes is greater than 0.
   * 
   * @example
   * 0
   */
  currentClearTaskCount?: number;
  /**
   * @remarks
   * Indicates whether the Periodically Optimize Table feature is enabled. Valid values:
   * 
   * *   **0** (default): The feature is disabled.
   * *   **A value greater than 0**: The feature is enabled. The value indicates the number of cleanups after which the system performs defragmentation.
   * 
   * @example
   * 0
   */
  optimizeTableAfterEveryClearTimes?: number;
  static names(): { [key: string]: string } {
    return {
      currentClearTaskCount: 'CurrentClearTaskCount',
      optimizeTableAfterEveryClearTimes: 'OptimizeTableAfterEveryClearTimes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentClearTaskCount: 'number',
      optimizeTableAfterEveryClearTimes: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailConfigDetailImportExtConfig extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the first row of the CSV file contains field names. Valid values:
   * 
   * *   **true**: The first row in the CSV file contains field names.
   * *   **false**: The first row in the CSV file contains data.
   * 
   * >  This parameter is valid if the value of **FileType** is **CSV** or **EXCEL**.
   * 
   * @example
   * true
   */
  csvFirstRowIsColumnDef?: boolean;
  /**
   * @remarks
   * Indicates whether an error that occurs is ignored. Valid values:
   * 
   * *   **true**: If an error occurs when SQL statements are being executed, DMS skips the current SQL statement and continues to execute subsequent SQL statements.
   * *   **false**: If an error occurs when SQL statements are being executed, DMS stops executing subsequent SQL statements.
   * 
   * @example
   * false
   */
  ignoreError?: boolean;
  /**
   * @remarks
   * The import mode. Valid values:
   * 
   * *   **FAST_MODE**: fast mode. In the Execute step, the uploaded file is read and SQL statements are executed to import data to the specified destination database. Compared with the security mode, this mode can be used to import data in a less secure but more efficient manner.
   * *   **SAFE_MODE**: security mode. In the Precheck step, the uploaded file is parsed, and SQL statements or CSV file data is cached. In the Execute step, the cached SQL statements are read and executed to import data, or the cached CSV file data is read and imported to the specified destination database. Compared with the fast mode, this mode can be used to import data in a more secure but less efficient manner.
   * 
   * @example
   * FAST_MODE
   */
  importMode?: string;
  /**
   * @remarks
   * The mode in which data is to be imported to the destination table. Valid values:
   * 
   * *   **INSERT**: The database checks the primary key during data insertion. If the primary key is duplicated, an error is reported.
   * *   **INSERT_IGNORE**: If the imported data contains data records that are the same as those in the destination table, the new data records are ignored.
   * *   **REPLACE_INTO**: If the imported data contains a row that has the same value for the primary key or unique index as an existing row in the destination table, the system deletes the existing row and inserts the new row into the destination table.
   * 
   * >  This parameter is valid if the value of FileType is CSV or EXCEL.
   * 
   * @example
   * INSERT
   */
  insertType?: string;
  static names(): { [key: string]: string } {
    return {
      csvFirstRowIsColumnDef: 'CsvFirstRowIsColumnDef',
      ignoreError: 'IgnoreError',
      importMode: 'ImportMode',
      insertType: 'InsertType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      csvFirstRowIsColumnDef: 'boolean',
      ignoreError: 'boolean',
      importMode: 'string',
      insertType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailConfigDetail extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the task is a scheduled task for historical data cleanup. This parameter is a reserved parameter and is valid only if the value of DetailType is CRON_CLEAR_DATA.
   * 
   * @example
   * true
   */
  cron?: boolean;
  /**
   * @remarks
   * The number of times the scheduled task is run. This parameter is valid only if the value of DetailType is CRON_CLEAR_DATA.
   * 
   * @example
   * 0
   */
  cronCallTimes?: number;
  /**
   * @remarks
   * The additional configuration information about historical data cleanup. This parameter is valid only if the value of DetailType is CRON_CLEAR_DATA.
   */
  cronExtConfig?: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailConfigDetailCronExtConfig;
  /**
   * @remarks
   * The CRON expression of the scheduled task. This parameter is valid only if the value of DetailType is CRON_CLEAR_DATA.
   * 
   * @example
   * 0 0 2 * * ?
   */
  cronFormat?: string;
  /**
   * @remarks
   * The time when the task was last run.
   * 
   * @example
   * 2024-04-19 02:00:00.0
   */
  cronLastCallStartTime?: string;
  /**
   * @remarks
   * The time when the task is run next time. This parameter is returned only if the value of CronStatus is SUCCESS.
   * 
   * @example
   * 2024-04-19 02:00:00
   */
  cronNextCallTime?: string;
  /**
   * @remarks
   * The state of the scheduled task. If this parameter is empty, the task is not run. Valid values:
   * 
   * *   PAUSE: The task is suspended.
   * *   WAITING: The task is waiting to be run.
   * *   SUCCESS: The task is run.
   * 
   * @example
   * SUCCESS
   */
  cronStatus?: string;
  /**
   * @remarks
   * The name of the table to which data is to be imported. This parameter is valid only if the value of DetailType is BIG_FILE. If the value of FileType is SQL, this parameter is empty.
   * 
   * @example
   * tb_import_tb_name
   */
  csvTableName?: string;
  /**
   * @remarks
   * The ID of the current data change task. This is a reserved parameter and can be ignored.
   * 
   * @example
   * 13***
   */
  currentTaskId?: number;
  /**
   * @remarks
   * The type of the ticket. Valid values:
   * 
   * *   COMMON: regular data change.
   * *   CHUNK_DML: lock-free data change.
   * *   BIG_FILE: large data import.
   * *   CRON_CLEAR_DATA: historical data cleanup.
   * *   PROCEDURE: programmable object change.
   * 
   * @example
   * BIG_FILE
   */
  detailType?: string;
  /**
   * @remarks
   * The execution duration of the scheduled task. Unit: hour. This parameter is valid only if the value of DetailType is CRON_CLEAR_DATA. If the value is greater than 0, an execution duration is set.
   * 
   * @example
   * 1
   */
  duration?: number;
  /**
   * @remarks
   * The encoding method of the file. This parameter may be empty, which indicates the value of AUTO. Valid values:
   * 
   * *   **AUTO**: automatic identification.
   * *   **UTF-8**: UTF-8 encoding.
   * *   **GBK**: GBK encoding.
   * *   **ISO-8859-1**: ISO-8859-1 encoding.
   * 
   * @example
   * UTF-8
   */
  fileEncoding?: string;
  /**
   * @remarks
   * The type of the file to be imported. This parameter is valid if the value of DetailType is BIG_FILE. Valid values:
   * 
   * *   **SQL**: an SQL file.
   * *   **CSV**: a CSV file.
   * *   **EXCEL**: an Excel file.
   * *   **JSON**: a JSON file, which is supported only by MongoDB databases.
   * 
   * @example
   * CSV
   */
  fileType?: string;
  /**
   * @remarks
   * The additional configuration information about data import. This parameter is valid if the value of DetailType is BIG_FILE.
   */
  importExtConfig?: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailConfigDetailImportExtConfig;
  static names(): { [key: string]: string } {
    return {
      cron: 'Cron',
      cronCallTimes: 'CronCallTimes',
      cronExtConfig: 'CronExtConfig',
      cronFormat: 'CronFormat',
      cronLastCallStartTime: 'CronLastCallStartTime',
      cronNextCallTime: 'CronNextCallTime',
      cronStatus: 'CronStatus',
      csvTableName: 'CsvTableName',
      currentTaskId: 'CurrentTaskId',
      detailType: 'DetailType',
      duration: 'Duration',
      fileEncoding: 'FileEncoding',
      fileType: 'FileType',
      importExtConfig: 'ImportExtConfig',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cron: 'boolean',
      cronCallTimes: 'number',
      cronExtConfig: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailConfigDetailCronExtConfig,
      cronFormat: 'string',
      cronLastCallStartTime: 'string',
      cronNextCallTime: 'string',
      cronStatus: 'string',
      csvTableName: 'string',
      currentTaskId: 'number',
      detailType: 'string',
      duration: 'number',
      fileEncoding: 'string',
      fileType: 'string',
      importExtConfig: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailConfigDetailImportExtConfig,
    };
  }

  validate() {
    if(this.cronExtConfig && typeof (this.cronExtConfig as any).validate === 'function') {
      (this.cronExtConfig as any).validate();
    }
    if(this.importExtConfig && typeof (this.importExtConfig as any).validate === 'function') {
      (this.importExtConfig as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailDatabaseListDatabase extends $dara.Model {
  /**
   * @remarks
   * The database ID.
   * 
   * @example
   * 1860****
   */
  dbId?: number;
  /**
   * @remarks
   * The engine of the database.
   * 
   * @example
   * mysql
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment to which the database belongs. Valid values:
   * 
   * *   product: production environment.
   * *   dev: development environment.
   * *   pre: pre-release environment.
   * *   test: test environment.
   * *   sit: system integration testing (SIT) environment
   * *   uat: user acceptance testing (UAT) environment.
   * *   pet: stress testing environment.
   * *   stag: staging environment.
   * 
   * @example
   * product
   */
  envType?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true.**: The database is a logical database.
   * *   **false**: The database is a physical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * @example
   * xxx@xxx:3306
   */
  searchName?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      dbType: 'DbType',
      envType: 'EnvType',
      logic: 'Logic',
      searchName: 'SearchName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      dbType: 'string',
      envType: 'string',
      logic: 'boolean',
      searchName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailDatabaseList extends $dara.Model {
  database?: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailDatabaseListDatabase[];
  static names(): { [key: string]: string } {
    return {
      database: 'Database',
    };
  }

  static types(): { [key: string]: any } {
    return {
      database: { 'type': 'array', 'itemType': GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailDatabaseListDatabase },
    };
  }

  validate() {
    if(Array.isArray(this.database)) {
      $dara.Model.validateArray(this.database);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailOrderDetail extends $dara.Model {
  /**
   * @remarks
   * The number of affected rows that is obtained by the precheck.
   * 
   * @example
   * 100
   */
  actualAffectRows?: number;
  /**
   * @remarks
   * The name of the attachment that contains the SQL statements used to change data.
   * 
   * @example
   * xxx
   */
  attachmentName?: string;
  /**
   * @remarks
   * The category of the reason for the data change.
   * 
   * @example
   * test
   */
  classify?: string;
  /**
   * @remarks
   * The estimated number of affected rows.
   * 
   * @example
   * 100
   */
  estimateAffectRows?: number;
  /**
   * @remarks
   * The executed SQL statements.
   * 
   * @example
   * update t1 set name = \\"xxx\\" where id <= 100
   */
  exeSQL?: string;
  /**
   * @remarks
   * Indicates whether the precheck result is ignored. Valid values:
   * 
   * - **true**: The precheck result is ignored.
   * - **false**: The precheck result is not ignored.
   * 
   * @example
   * false
   */
  ignoreAffectRows?: boolean;
  /**
   * @remarks
   * The reason why the precheck result is ignored.
   * 
   * @example
   * test
   */
  ignoreAffectRowsReason?: string;
  /**
   * @remarks
   * The name of the attachment that contains the SQL statements used to roll back the data change.
   * 
   * @example
   * test
   */
  rbAttachmentName?: string;
  /**
   * @remarks
   * The SQL statements used to roll back the data change.
   * 
   * @example
   * empty
   */
  rbSQL?: string;
  /**
   * @remarks
   * The format of the SQL statements used to roll back the data change. Valid values:
   * 
   * - **TEXT**: text
   * - **ATTACHMENT**: attachment
   * 
   * @example
   * text
   */
  rbSQLType?: string;
  /**
   * @remarks
   * The format of the SQL statements used to change data. Valid values:
   * 
   * - **TEXT**: text
   * - **ATTACHMENT**: attachment
   * 
   * @example
   * text
   */
  sqlType?: string;
  static names(): { [key: string]: string } {
    return {
      actualAffectRows: 'ActualAffectRows',
      attachmentName: 'AttachmentName',
      classify: 'Classify',
      estimateAffectRows: 'EstimateAffectRows',
      exeSQL: 'ExeSQL',
      ignoreAffectRows: 'IgnoreAffectRows',
      ignoreAffectRowsReason: 'IgnoreAffectRowsReason',
      rbAttachmentName: 'RbAttachmentName',
      rbSQL: 'RbSQL',
      rbSQLType: 'RbSQLType',
      sqlType: 'SqlType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualAffectRows: 'number',
      attachmentName: 'string',
      classify: 'string',
      estimateAffectRows: 'number',
      exeSQL: 'string',
      ignoreAffectRows: 'boolean',
      ignoreAffectRowsReason: 'string',
      rbAttachmentName: 'string',
      rbSQL: 'string',
      rbSQLType: 'string',
      sqlType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailPreCheckDetailTaskCheckDO extends $dara.Model {
  /**
   * @remarks
   * The state of the precheck. Valid values:
   * 
   * *   **WAITING**: The ticket is pending precheck.
   * *   **RUNNING**: The ticket is being prechecked.
   * *   **SUCCESS**: The ticket passes the precheck.
   * *   **FAIL**: The ticket fails the precheck.
   * 
   * @example
   * SUCCESS
   */
  checkStatus?: string;
  /**
   * @remarks
   * The check step of the precheck. Valid values:
   * 
   * *   **SQL_PARSE**: The system checks the syntax of the SQL statement.
   * *   **SQL_TYPE_CHECK**: The system checks the type of the SQL statement.
   * *   **PERMISSION_CHECK**: The system checks the permissions required for the data change.
   * *   **ROW_CHECK**: The system checks the number of affected rows.
   * 
   * @example
   * PERMISSION_CHECK
   */
  checkStep?: string;
  /**
   * @remarks
   * The message that appears when a check step is executed.
   * 
   * @example
   * tip messsage
   */
  userTip?: string;
  static names(): { [key: string]: string } {
    return {
      checkStatus: 'CheckStatus',
      checkStep: 'CheckStep',
      userTip: 'UserTip',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkStatus: 'string',
      checkStep: 'string',
      userTip: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailPreCheckDetail extends $dara.Model {
  taskCheckDO?: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailPreCheckDetailTaskCheckDO[];
  static names(): { [key: string]: string } {
    return {
      taskCheckDO: 'TaskCheckDO',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskCheckDO: { 'type': 'array', 'itemType': GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailPreCheckDetailTaskCheckDO },
    };
  }

  validate() {
    if(Array.isArray(this.taskCheckDO)) {
      $dara.Model.validateArray(this.taskCheckDO);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetail extends $dara.Model {
  /**
   * @remarks
   * The configurations of the ticket. This parameter is used to store the configuration information specific to a data change ticket type.
   */
  configDetail?: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailConfigDetail;
  /**
   * @remarks
   * The information about the database in which data is changed.
   */
  databaseList?: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailDatabaseList;
  /**
   * @remarks
   * The execution mode of the ticket after the ticket is approved. Valid values:
   * 
   * - **COMMITOR**: The data change is performed by the user who submits the ticket.
   * - **AUTO**: The data change is automatically performed after the ticket is approved.
   * - **LAST_AUDITOR**: The data change is performed by the last approver of the ticket.
   * 
   * @example
   * COMMITOR
   */
  execMode?: string;
  /**
   * @remarks
   * The details of the ticket.
   */
  orderDetail?: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailOrderDetail;
  /**
   * @remarks
   * The precheck details of the ticket.
   */
  preCheckDetail?: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailPreCheckDetail;
  /**
   * @remarks
   * The specific state of the data change ticket. Valid values:
   * 
   * >  The state of the ticket is not exactly equivalent to the status code for the ticket. To query the status code of the ticket, you can call the [GetOrderBaseInfo](https://help.aliyun.com/document_detail/465868.html) operation and check the value of StatusCode in the response.
   * 
   * *   **new**: The ticket is created.
   * *   **precheck**: The ticket is in the pre-check phase.
   * *   **precheckFailed**: The ticket failed to pass the precheck.
   * *   **precheck_success**: The ticket passes the precheck and waits to be submitted for approval.
   * *   **toaudit**: The ticket is being reviewed.
   * *   **Approved**: The ticket is approved.
   * *   **reject**: The ticket is rejected.
   * *   **waiting**: The task is submitted and waits to be scheduled.
   * *   **processing**: The task is being executed.
   * *   **Success**: The task is successful.
   * 
   * @example
   * approved
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      configDetail: 'ConfigDetail',
      databaseList: 'DatabaseList',
      execMode: 'ExecMode',
      orderDetail: 'OrderDetail',
      preCheckDetail: 'PreCheckDetail',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configDetail: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailConfigDetail,
      databaseList: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailDatabaseList,
      execMode: 'string',
      orderDetail: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailOrderDetail,
      preCheckDetail: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetailPreCheckDetail,
      status: 'string',
    };
  }

  validate() {
    if(this.configDetail && typeof (this.configDetail as any).validate === 'function') {
      (this.configDetail as any).validate();
    }
    if(this.databaseList && typeof (this.databaseList as any).validate === 'function') {
      (this.databaseList as any).validate();
    }
    if(this.orderDetail && typeof (this.orderDetail as any).validate === 'function') {
      (this.orderDetail as any).validate();
    }
    if(this.preCheckDetail && typeof (this.preCheckDetail as any).validate === 'function') {
      (this.preCheckDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectTaskDetailResponseBodyDataCorrectTaskDetail extends $dara.Model {
  /**
   * @remarks
   * The number of rows affected by the SQL statement.
   * 
   * @example
   * 1
   */
  actualAffectRows?: number;
  /**
   * @remarks
   * The time when the task was created.
   * 
   * @example
   * 2021-03-05 15:08:55
   */
  createTime?: string;
  /**
   * @remarks
   * The ID of the SQL task group.
   * 
   * @example
   * 1234235
   */
  DBTaskGroupId?: number;
  /**
   * @remarks
   * The state of the SQL task. Valid values:
   * 
   * *   **INIT**: The SQL task was initialized.
   * *   **PENDING**: The SQL task waited to be run.
   * *   **BE_SCHEDULED**: The SQL task waited to be scheduled.
   * *   **FAIL**: The SQL task failed.
   * *   **SUCCESS**: The SQL task was successful.
   * *   **PAUSE**: The SQL task was paused.
   * *   **DELETE**: The SQL task was deleted.
   * *   **RUNNING**: The SQL task was being run.
   * 
   * @example
   * SUCCESS
   */
  jobStatus?: string;
  static names(): { [key: string]: string } {
    return {
      actualAffectRows: 'ActualAffectRows',
      createTime: 'CreateTime',
      DBTaskGroupId: 'DBTaskGroupId',
      jobStatus: 'jobStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualAffectRows: 'number',
      createTime: 'string',
      DBTaskGroupId: 'number',
      jobStatus: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCronClearConfigResponseBodyDataCronClearConfig extends $dara.Model {
  /**
   * @remarks
   * The number of times that the task is run.
   * 
   * @example
   * 2
   */
  cronCallTimes?: string;
  /**
   * @remarks
   * The crontab expression that you can use to run the task at a specified time. For more information, see [Crontab expression](https://help.aliyun.com/document_detail/206581.html).
   * 
   * @example
   * 0 0 23 ? * 7,1
   */
  cronFormat?: string;
  /**
   * @remarks
   * The time when the task was last run.
   * 
   * @example
   * 2022-11-18 00:00:00
   */
  cronLastCallStartTime?: string;
  /**
   * @remarks
   * The time when the task is run next time. This parameter is displayed only when the status of the scheduled task is SUCCESS.
   * 
   * @example
   * 2022-11-19 00:00:00
   */
  cronNextCallTime?: string;
  /**
   * @remarks
   * The status of the scheduled task. If this parameter is empty, it indicates the task is not run. Valid values:
   * 
   * *   PAUSE: The task is suspended.
   * *   WAITING: The task is waiting to be run.
   * *   SUCCESS: The task is complete.
   * 
   * @example
   * PAUSE
   */
  cronStatus?: string;
  /**
   * @remarks
   * The number of times that the Optimize Table statement is automatically exeuted. This parameter is valid only when the value of the OptimizeTableAfterEveryClearTimes parameter is greater than 0.
   * 
   * @example
   * 0
   */
  currentClearTaskCount?: number;
  /**
   * @remarks
   * The execution duration of the task. Unit: hours. If the value is 0, it indicates the duration is not specified.
   * 
   * @example
   * 1
   */
  duration?: string;
  /**
   * @remarks
   * Specifies whether to enable automatic execution of the OPTIMIZE TABLE statement. Valid values:
   * 
   * *   0: disables automatic execution
   * *   A number greater than 0: enables automatic execution. The number specifies the number of times that cleanup operations must be performed before the OPTIMIZE TABLE statement is automatically executed.
   * 
   * @example
   * 0
   */
  optimizeTableAfterEveryClearTimes?: number;
  static names(): { [key: string]: string } {
    return {
      cronCallTimes: 'CronCallTimes',
      cronFormat: 'CronFormat',
      cronLastCallStartTime: 'CronLastCallStartTime',
      cronNextCallTime: 'CronNextCallTime',
      cronStatus: 'CronStatus',
      currentClearTaskCount: 'CurrentClearTaskCount',
      duration: 'Duration',
      optimizeTableAfterEveryClearTimes: 'OptimizeTableAfterEveryClearTimes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cronCallTimes: 'string',
      cronFormat: 'string',
      cronLastCallStartTime: 'string',
      cronNextCallTime: 'string',
      cronStatus: 'string',
      currentClearTaskCount: 'number',
      duration: 'string',
      optimizeTableAfterEveryClearTimes: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCronClearTaskDetailListResponseBodyDataCronClearTaskDetailList extends $dara.Model {
  /**
   * @remarks
   * The number of rows affected by the SQL task.
   * 
   * @example
   * 1
   */
  actualAffectRows?: number;
  /**
   * @remarks
   * The time when the SQL task was created.
   * 
   * @example
   * 2021-01-14 10:00:00
   */
  createTime?: string;
  /**
   * @remarks
   * The ID of the SQL task group.
   * 
   * @example
   * 432523
   */
  DBTaskGroupId?: number;
  /**
   * @remarks
   * The state of the SQL task. Valid values:
   * 
   * *   **INIT**: The SQL task was initialized.
   * *   **PENDING**: The SQL task waited to be run.
   * *   **BE_SCHEDULED**: The SQL task waited to be scheduled.
   * *   **FAIL**: The SQL task failed.
   * *   **SUCCESS**: The SQL task was successful.
   * *   **PAUSE**: The SQL task was paused.
   * *   **DELETE**: The SQL task was deleted.
   * *   **RUNNING**: The SQL task was being run.
   * 
   * @example
   * SUCCESS
   */
  jobStatus?: string;
  static names(): { [key: string]: string } {
    return {
      actualAffectRows: 'ActualAffectRows',
      createTime: 'CreateTime',
      DBTaskGroupId: 'DBTaskGroupId',
      jobStatus: 'jobStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualAffectRows: 'number',
      createTime: 'string',
      DBTaskGroupId: 'number',
      jobStatus: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportDownloadURLResponseBodyDownloadURLResult extends $dara.Model {
  /**
   * @remarks
   * Indicates whether export results are available for download. Valid values:
   * 
   * *   **true**: Export results are available for download.
   * *   **false**: No export results are available for download.
   * 
   * @example
   * true
   */
  hasResult?: boolean;
  /**
   * @remarks
   * The message that indicates an exception.
   * 
   * @example
   * tip message
   */
  tipMessage?: string;
  /**
   * @remarks
   * The download URL of the file that records the export results for the ticket.
   * 
   * @example
   * https://dms-idb-hangzhou.oss-cn-hangzhou.aliyuncs.com/xxx.zip
   */
  URL?: string;
  static names(): { [key: string]: string } {
    return {
      hasResult: 'HasResult',
      tipMessage: 'TipMessage',
      URL: 'URL',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hasResult: 'boolean',
      tipMessage: 'string',
      URL: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportOrderDetailResponseBodyDataExportOrderDetailKeyInfo extends $dara.Model {
  jobId?: number;
  /**
   * @remarks
   * The state of the data export ticket. Valid values:
   * 
   * *   **PRE_CHECKING**: The ticket was being prechecked.
   * *   **PRE_CHECK_SUCCESS**: The ticket passed the precheck.
   * *   **PRE_CHECK_FAIL**: The ticket failed to pass the prechecked.
   * *   **WAITING_APPLY_AUDIT**: The ticket was to be submitted for approval.
   * *   **APPLY_AUDIT_SUCCESS**: The ticket was submitted for approval.
   * *   **ENABLE_EXPORT**: The ticket was approved. Data can be exported.
   * *   **WAITING_EXPORT**: Data was to be scheduled for export.
   * *   **DOING_EXPORT**: Data was being exported.
   * *   **EXPORT_FAIL**: Data failed to be exported.
   * *   **EXPORT_SUCCESS**: Data was exported.
   * 
   * @example
   * EXPORT_SUCCESS
   */
  jobStatus?: string;
  /**
   * @remarks
   * The precheck ID.
   * 
   * @example
   * 123
   */
  preCheckId?: number;
  static names(): { [key: string]: string } {
    return {
      jobId: 'JobId',
      jobStatus: 'JobStatus',
      preCheckId: 'PreCheckId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      jobId: 'number',
      jobStatus: 'string',
      preCheckId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportOrderDetailResponseBodyDataExportOrderDetailOrderDetail extends $dara.Model {
  /**
   * @remarks
   * The number of rows that were affected by the SQL statement.
   * 
   * @example
   * 1
   */
  actualAffectRows?: number;
  /**
   * @remarks
   * The category of the reason for the data export.
   * 
   * @example
   * text
   */
  classify?: string;
  /**
   * @remarks
   * The name of the database from which data was exported.
   * 
   * @example
   * xxx@xxx:3306
   */
  database?: string;
  /**
   * @remarks
   * The ID of the database from which data was exported.
   * 
   * @example
   * 123
   */
  dbId?: number;
  /**
   * @remarks
   * The type of the environment to which the database belongs.
   * 
   * @example
   * test
   */
  envType?: string;
  /**
   * @remarks
   * The SQL statement that was executed to export data.
   * 
   * @example
   * select 1
   */
  exeSQL?: string;
  /**
   * @remarks
   * Indicates whether the affected rows are skipped.
   * 
   * @example
   * false
   */
  ignoreAffectRows?: boolean;
  /**
   * @remarks
   * The reason why the affected rows are skipped.
   * 
   * @example
   * empty
   */
  ignoreAffectRowsReason?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  static names(): { [key: string]: string } {
    return {
      actualAffectRows: 'ActualAffectRows',
      classify: 'Classify',
      database: 'Database',
      dbId: 'DbId',
      envType: 'EnvType',
      exeSQL: 'ExeSQL',
      ignoreAffectRows: 'IgnoreAffectRows',
      ignoreAffectRowsReason: 'IgnoreAffectRowsReason',
      logic: 'Logic',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualAffectRows: 'number',
      classify: 'string',
      database: 'string',
      dbId: 'number',
      envType: 'string',
      exeSQL: 'string',
      ignoreAffectRows: 'boolean',
      ignoreAffectRowsReason: 'string',
      logic: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportOrderDetailResponseBodyDataExportOrderDetail extends $dara.Model {
  /**
   * @remarks
   * The information about the ticket.
   */
  keyInfo?: GetDataExportOrderDetailResponseBodyDataExportOrderDetailKeyInfo;
  /**
   * @remarks
   * The details of the ticket.
   */
  orderDetail?: GetDataExportOrderDetailResponseBodyDataExportOrderDetailOrderDetail;
  static names(): { [key: string]: string } {
    return {
      keyInfo: 'KeyInfo',
      orderDetail: 'OrderDetail',
    };
  }

  static types(): { [key: string]: any } {
    return {
      keyInfo: GetDataExportOrderDetailResponseBodyDataExportOrderDetailKeyInfo,
      orderDetail: GetDataExportOrderDetailResponseBodyDataExportOrderDetailOrderDetail,
    };
  }

  validate() {
    if(this.keyInfo && typeof (this.keyInfo as any).validate === 'function') {
      (this.keyInfo as any).validate();
    }
    if(this.orderDetail && typeof (this.orderDetail as any).validate === 'function') {
      (this.orderDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportPreCheckDetailResponseBodyPreCheckResultPreCheckDetailListPreCheckDetailList extends $dara.Model {
  /**
   * @remarks
   * The estimated number of data rows to be affected.
   * 
   * @example
   * 1
   */
  affectRows?: number;
  /**
   * @remarks
   * The SQL statement.
   * 
   * @example
   * SELECT * FROM tmp_table LIMIT 1
   */
  SQL?: string;
  static names(): { [key: string]: string } {
    return {
      affectRows: 'AffectRows',
      SQL: 'SQL',
    };
  }

  static types(): { [key: string]: any } {
    return {
      affectRows: 'number',
      SQL: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportPreCheckDetailResponseBodyPreCheckResultPreCheckDetailList extends $dara.Model {
  preCheckDetailList?: GetDataExportPreCheckDetailResponseBodyPreCheckResultPreCheckDetailListPreCheckDetailList[];
  static names(): { [key: string]: string } {
    return {
      preCheckDetailList: 'PreCheckDetailList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      preCheckDetailList: { 'type': 'array', 'itemType': GetDataExportPreCheckDetailResponseBodyPreCheckResultPreCheckDetailListPreCheckDetailList },
    };
  }

  validate() {
    if(Array.isArray(this.preCheckDetailList)) {
      $dara.Model.validateArray(this.preCheckDetailList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportPreCheckDetailResponseBodyPreCheckResult extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to skip verification. Valid values:
   * 
   * - true
   * - false
   * 
   * @example
   * true
   */
  ignoreAffectRows?: boolean;
  /**
   * @remarks
   * The list of pre-check details.
   */
  preCheckDetailList?: GetDataExportPreCheckDetailResponseBodyPreCheckResultPreCheckDetailList;
  static names(): { [key: string]: string } {
    return {
      ignoreAffectRows: 'IgnoreAffectRows',
      preCheckDetailList: 'PreCheckDetailList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ignoreAffectRows: 'boolean',
      preCheckDetailList: GetDataExportPreCheckDetailResponseBodyPreCheckResultPreCheckDetailList,
    };
  }

  validate() {
    if(this.preCheckDetailList && typeof (this.preCheckDetailList as any).validate === 'function') {
      (this.preCheckDetailList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataImportSQLResponseBodySQLDetail extends $dara.Model {
  /**
   * @remarks
   * The SQL script.
   * 
   * @example
   * insert into t1 values (1);
   */
  execSql?: string;
  static names(): { [key: string]: string } {
    return {
      execSql: 'ExecSql',
    };
  }

  static types(): { [key: string]: any } {
    return {
      execSql: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataTrackJobDegreeResponseBodyJobDegree extends $dara.Model {
  /**
   * @remarks
   * The progress of binary log download. Valid values: 0 to 1. A value of 1 indicates that binary log download is complete.
   * 
   * @example
   * 1
   */
  downloadCompletionDegree?: number;
  /**
   * @remarks
   * The progress of binary log parsing. Valid values: 0 to 1. A value of 1 indicates that binary log parsing is complete.
   * 
   * @example
   * 1
   */
  filterCompletionDegree?: number;
  /**
   * @remarks
   * The status of the data tracking task. Valid values:
   * 
   * *   **INIT**: The task is being initialized.
   * *   **LISTING**: The binary logs are being obtained.
   * *   **LIST_SUCCESS**: The binary logs are successfully obtained.
   * *   **DOWNLOADING**: The binary logs are being downloaded.
   * *   **DOWNLOAD_FAIL**: The binary logs failed to be downloaded.
   * *   **DOWNLOAD_SUCCESS**: The binary logs are successfully downloaded.
   * *   **FILTERING**: The binary logs are being parsed.
   * *   **FILTER_FAIL**: The binary logs failed to be parsed.
   * *   **FILTER_SUCCESS**: The binary logs are successfully parsed.
   * 
   * @example
   * FILTER_SUCCESS
   */
  jobStatus?: string;
  /**
   * @remarks
   * The progress of binary log obtaining. Valid values: 0 to 1. A value of 1 indicates that binary log obtaining is complete.
   * 
   * @example
   * 1
   */
  listCompletionDegree?: number;
  /**
   * @remarks
   * The description of the task status.
   * 
   * @example
   * searching success
   */
  statusDesc?: string;
  static names(): { [key: string]: string } {
    return {
      downloadCompletionDegree: 'DownloadCompletionDegree',
      filterCompletionDegree: 'FilterCompletionDegree',
      jobStatus: 'JobStatus',
      listCompletionDegree: 'ListCompletionDegree',
      statusDesc: 'StatusDesc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downloadCompletionDegree: 'number',
      filterCompletionDegree: 'number',
      jobStatus: 'string',
      listCompletionDegree: 'number',
      statusDesc: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataTrackJobTableMetaResponseBodyTableMetaListColumns extends $dara.Model {
  /**
   * @remarks
   * The name of the character set.
   * 
   * @example
   * utf8mb4
   */
  charset?: string;
  /**
   * @remarks
   * The name of the column.
   * 
   * @example
   * claimantno
   */
  columnName?: string;
  /**
   * @remarks
   * The position of the column.
   * 
   * @example
   * 1
   */
  columnPosition?: number;
  /**
   * @remarks
   * The data type of the column. Examples: BIGINT, INT, and VARCHAR.
   * 
   * @example
   * BIGINT
   */
  columnType?: string;
  /**
   * @remarks
   * Indicates whether the column is a virtual column. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  fictive?: boolean;
  static names(): { [key: string]: string } {
    return {
      charset: 'Charset',
      columnName: 'ColumnName',
      columnPosition: 'ColumnPosition',
      columnType: 'ColumnType',
      fictive: 'Fictive',
    };
  }

  static types(): { [key: string]: any } {
    return {
      charset: 'string',
      columnName: 'string',
      columnPosition: 'number',
      columnType: 'string',
      fictive: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataTrackJobTableMetaResponseBodyTableMetaList extends $dara.Model {
  /**
   * @remarks
   * The information about columns.
   */
  columns?: GetDataTrackJobTableMetaResponseBodyTableMetaListColumns[];
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * DB165
   */
  schemaName?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * live_stat
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      columns: 'Columns',
      schemaName: 'SchemaName',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columns: { 'type': 'array', 'itemType': GetDataTrackJobTableMetaResponseBodyTableMetaListColumns },
      schemaName: 'string',
      tableName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.columns)) {
      $dara.Model.validateArray(this.columns);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataTrackOrderDetailResponseBodyDataTrackOrderDetail extends $dara.Model {
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * @example
   * xxx@yyy:3306
   */
  databaseSearchName?: string;
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 3431****
   */
  dbId?: number;
  /**
   * @remarks
   * The end time of the time range in which data operations are tracked. The time is in the yyyy-MM-dd HH:mm:ss format.
   * 
   * @example
   * 2023-04-23 10:00:00
   */
  jobEndTime?: string;
  /**
   * @remarks
   * The start time of the time range in which data operations are tracked. The time is in the yyyy-MM-dd HH:mm:ss format.
   * 
   * @example
   * 2023-04-23 00:00:00
   */
  jobStartTime?: string;
  /**
   * @remarks
   * The status of the data tracking task. Valid values:
   * 
   * *   **INIT**: The task is being initialized.
   * *   **LISTING**: The binary logs are being obtained.
   * *   **LIST_SUCCESS**: The binary logs are successfully obtained.
   * *   **DOWNLOADING**: The binary logs are being downloaded.
   * *   **DOWNLOAD_FAIL**: The binary logs failed to be downloaded.
   * *   **DOWNLOAD_SUCCESS**: The binary logs are successfully downloaded.
   * *   **FILTERING**: The binary logs are being parsed.
   * *   **FILTER_FAIL**: The binary logs failed to be parsed.
   * *   **FILTER_SUCCESS**: The binary logs are successfully parsed.
   * 
   * @example
   * FILTER_SUCCESS
   */
  jobStatus?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * as_task
   */
  schemaName?: string;
  /**
   * @remarks
   * The description of the task status.
   * 
   * @example
   * searching success
   */
  statusDesc?: string;
  /**
   * @remarks
   * The names of the tables for which data operations are tracked.
   */
  tableNames?: string[];
  /**
   * @remarks
   * The types of data operations that are tracked.
   */
  trackTypes?: string[];
  static names(): { [key: string]: string } {
    return {
      databaseSearchName: 'DatabaseSearchName',
      dbId: 'DbId',
      jobEndTime: 'JobEndTime',
      jobStartTime: 'JobStartTime',
      jobStatus: 'JobStatus',
      logic: 'Logic',
      schemaName: 'SchemaName',
      statusDesc: 'StatusDesc',
      tableNames: 'TableNames',
      trackTypes: 'TrackTypes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databaseSearchName: 'string',
      dbId: 'number',
      jobEndTime: 'string',
      jobStartTime: 'string',
      jobStatus: 'string',
      logic: 'boolean',
      schemaName: 'string',
      statusDesc: 'string',
      tableNames: { 'type': 'array', 'itemType': 'string' },
      trackTypes: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.tableNames)) {
      $dara.Model.validateArray(this.tableNames);
    }
    if(Array.isArray(this.trackTypes)) {
      $dara.Model.validateArray(this.trackTypes);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseResponseBodyDatabaseOwnerIdList extends $dara.Model {
  ownerIds?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerIds: 'OwnerIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseResponseBodyDatabaseOwnerNameList extends $dara.Model {
  ownerNames?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerNames: 'OwnerNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerNames)) {
      $dara.Model.validateArray(this.ownerNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseResponseBodyDatabase extends $dara.Model {
  /**
   * @remarks
   * The name of the catalog to which the database belongs.
   * 
   * @example
   * def
   */
  catalogName?: string;
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 984****
   */
  databaseId?: string;
  /**
   * @remarks
   * The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * @example
   * mysql
   */
  dbType?: string;
  /**
   * @remarks
   * The ID of the database administrator (DBA).
   * 
   * @example
   * 27****
   */
  dbaId?: string;
  /**
   * @remarks
   * The nickname of the DBA.
   * 
   * @example
   * dba_name
   */
  dbaName?: string;
  /**
   * @remarks
   * The encoding format of the database.
   * 
   * @example
   * utf8mb4
   */
  encoding?: string;
  /**
   * @remarks
   * The type of the environment to which the database belongs. Valid values:
   * 
   * *   **product**: production environment
   * *   **dev**: development environment
   * *   **pre**: staging environment
   * *   **test**: test environment
   * *   **sit**: SIT environment
   * *   **uat**: user acceptance testing (UAT) environment
   * *   **pet**: stress testing environment
   * *   **stag**: STAG environment
   * 
   * @example
   * product
   */
  envType?: string;
  /**
   * @remarks
   * The endpoint that is used to connect to the database.
   * 
   * @example
   * 192.168.XX.XX
   */
  host?: string;
  /**
   * @remarks
   * The alias of the instance.
   * 
   * @example
   * test
   */
  instanceAlias?: string;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * 149****
   */
  instanceId?: string;
  /**
   * @remarks
   * The IDs of the owners of the database.
   */
  ownerIdList?: GetDatabaseResponseBodyDatabaseOwnerIdList;
  /**
   * @remarks
   * The names of the owners of the database.
   */
  ownerNameList?: GetDatabaseResponseBodyDatabaseOwnerNameList;
  /**
   * @remarks
   * The port that is used to connect to the database.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * mysql
   */
  schemaName?: string;
  /**
   * @remarks
   * The keyword that is used to search for the database.
   * 
   * @example
   * mysql@192.168.XX.XX:3306
   */
  searchName?: string;
  /**
   * @remarks
   * The SID of the database.
   * 
   * >  The value of the parameter is returned only for Oracle databases.
   * 
   * @example
   * test_sid
   */
  sid?: string;
  /**
   * @remarks
   * The status of the database. Valid values:
   * 
   * *   **NORMAL**: The database is running as expected.
   * *   **DISABLE**: The database is disabled.
   * *   **OFFLINE**: The database is unpublished.
   * *   **NOT_EXIST**: The database does not exist.
   * 
   * @example
   * NORMAL
   */
  state?: string;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      databaseId: 'DatabaseId',
      dbType: 'DbType',
      dbaId: 'DbaId',
      dbaName: 'DbaName',
      encoding: 'Encoding',
      envType: 'EnvType',
      host: 'Host',
      instanceAlias: 'InstanceAlias',
      instanceId: 'InstanceId',
      ownerIdList: 'OwnerIdList',
      ownerNameList: 'OwnerNameList',
      port: 'Port',
      schemaName: 'SchemaName',
      searchName: 'SearchName',
      sid: 'Sid',
      state: 'State',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      databaseId: 'string',
      dbType: 'string',
      dbaId: 'string',
      dbaName: 'string',
      encoding: 'string',
      envType: 'string',
      host: 'string',
      instanceAlias: 'string',
      instanceId: 'string',
      ownerIdList: GetDatabaseResponseBodyDatabaseOwnerIdList,
      ownerNameList: GetDatabaseResponseBodyDatabaseOwnerNameList,
      port: 'number',
      schemaName: 'string',
      searchName: 'string',
      sid: 'string',
      state: 'string',
    };
  }

  validate() {
    if(this.ownerIdList && typeof (this.ownerIdList as any).validate === 'function') {
      (this.ownerIdList as any).validate();
    }
    if(this.ownerNameList && typeof (this.ownerNameList as any).validate === 'function') {
      (this.ownerNameList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfoConfigExportTypes extends $dara.Model {
  exportTypes?: string[];
  static names(): { [key: string]: string } {
    return {
      exportTypes: 'ExportTypes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      exportTypes: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.exportTypes)) {
      $dara.Model.validateArray(this.exportTypes);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfoConfigSQLExtOption extends $dara.Model {
  SQLExtOption?: string[];
  static names(): { [key: string]: string } {
    return {
      SQLExtOption: 'SQLExtOption',
    };
  }

  static types(): { [key: string]: any } {
    return {
      SQLExtOption: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.SQLExtOption)) {
      $dara.Model.validateArray(this.SQLExtOption);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfoConfigSelectedTables extends $dara.Model {
  selectedTables?: string[];
  static names(): { [key: string]: string } {
    return {
      selectedTables: 'SelectedTables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      selectedTables: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.selectedTables)) {
      $dara.Model.validateArray(this.selectedTables);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfoConfig extends $dara.Model {
  /**
   * @remarks
   * The database name.
   * 
   * @example
   * dmstest
   */
  dbName?: string;
  /**
   * @remarks
   * The type of data that was exported. Valid values:
   * 
   * *   **DATA**: The data of the database was exported.
   * *   **STRUCT**: The schema of the database was exported.
   * *   **DATA_STRUCT**: The data and schema of the database were exported.
   * 
   * @example
   * DATA
   */
  exportContent?: string;
  /**
   * @remarks
   * The type of schema that was exported.
   */
  exportTypes?: GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfoConfigExportTypes;
  /**
   * @remarks
   * The extension options of the SQL script.
   */
  SQLExtOption?: GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfoConfigSQLExtOption;
  /**
   * @remarks
   * The tables that were exported from the database.
   */
  selectedTables?: GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfoConfigSelectedTables;
  /**
   * @remarks
   * The format in which the database was exported. Valid values:
   * 
   * *   **SQL**
   * *   **CSV**
   * *   **XLSX**
   * 
   * @example
   * SQL
   */
  targetOption?: string;
  static names(): { [key: string]: string } {
    return {
      dbName: 'DbName',
      exportContent: 'ExportContent',
      exportTypes: 'ExportTypes',
      SQLExtOption: 'SQLExtOption',
      selectedTables: 'SelectedTables',
      targetOption: 'TargetOption',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbName: 'string',
      exportContent: 'string',
      exportTypes: GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfoConfigExportTypes,
      SQLExtOption: GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfoConfigSQLExtOption,
      selectedTables: GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfoConfigSelectedTables,
      targetOption: 'string',
    };
  }

  validate() {
    if(this.exportTypes && typeof (this.exportTypes as any).validate === 'function') {
      (this.exportTypes as any).validate();
    }
    if(this.SQLExtOption && typeof (this.SQLExtOption as any).validate === 'function') {
      (this.SQLExtOption as any).validate();
    }
    if(this.selectedTables && typeof (this.selectedTables as any).validate === 'function') {
      (this.selectedTables as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfo extends $dara.Model {
  /**
   * @remarks
   * The time when the ticket was submitted.
   * 
   * @example
   * 2023-04-13 13:44:59
   */
  auditDate?: string;
  /**
   * @remarks
   * The configuration information about the ticket.
   */
  config?: GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfoConfig;
  /**
   * @remarks
   * The database ID.
   * 
   * @example
   * 2583****
   */
  dbId?: number;
  /**
   * @remarks
   * The URL that is used to download the export result.
   * 
   * @example
   * https://oss.xxx.com
   */
  downloadURL?: string;
  static names(): { [key: string]: string } {
    return {
      auditDate: 'AuditDate',
      config: 'Config',
      dbId: 'DbId',
      downloadURL: 'DownloadURL',
    };
  }

  static types(): { [key: string]: any } {
    return {
      auditDate: 'string',
      config: GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfoConfig,
      dbId: 'number',
      downloadURL: 'string',
    };
  }

  validate() {
    if(this.config && typeof (this.config as any).validate === 'function') {
      (this.config as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetail extends $dara.Model {
  /**
   * @remarks
   * The business background information of the database export ticket.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The user who submitted the ticket.
   * 
   * @example
   * dmsuser
   */
  committer?: string;
  /**
   * @remarks
   * The ID of the user who submitted the ticket. This ID is a user ID and is not the ID of an Alibaba Cloud account.
   * 
   * @example
   * 12***
   */
  committerId?: string;
  /**
   * @remarks
   * The ticket ID.
   * 
   * @example
   * 821****
   */
  id?: number;
  /**
   * @remarks
   * The key information about the ticket.
   */
  keyInfo?: GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfo;
  /**
   * @remarks
   * The execution logs.
   * 
   * @example
   * 2023-04-12 14:58:32:015 Database Dump Start.
   * 2023-04-12 14:58:32:096 set server side query timeout, sql : set max_execution_time = 0
   */
  log?: string;
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * @example
   * test@xxx.xxx.xxx.xxx:3306
   */
  searchName?: string;
  /**
   * @remarks
   * The status description of the ticket.
   * 
   * @example
   * ticket approval
   */
  statusDesc?: string;
  /**
   * @remarks
   * The status description of the workflow.
   * 
   * @example
   * ticket approval
   */
  workflowStatusDesc?: string;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      committer: 'Committer',
      committerId: 'CommitterId',
      id: 'Id',
      keyInfo: 'KeyInfo',
      log: 'Log',
      searchName: 'SearchName',
      statusDesc: 'StatusDesc',
      workflowStatusDesc: 'WorkflowStatusDesc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      committer: 'string',
      committerId: 'string',
      id: 'number',
      keyInfo: GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetailKeyInfo,
      log: 'string',
      searchName: 'string',
      statusDesc: 'string',
      workflowStatusDesc: 'string',
    };
  }

  validate() {
    if(this.keyInfo && typeof (this.keyInfo as any).validate === 'function') {
      (this.keyInfo as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDbExportDownloadURLResponseBodyDownloadURLResult extends $dara.Model {
  /**
   * @example
   * true
   */
  hasResult?: boolean;
  /**
   * @example
   * tip message
   */
  tipMessage?: string;
  /**
   * @example
   * https://dms-idb-hangzhou.oss-cn-hangzhou.aliyuncs.com/xxx.zip
   */
  URL?: string;
  static names(): { [key: string]: string } {
    return {
      hasResult: 'HasResult',
      tipMessage: 'TipMessage',
      URL: 'URL',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hasResult: 'boolean',
      tipMessage: 'string',
      URL: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceResponseBodyInstanceOwnerIdList extends $dara.Model {
  ownerIds?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerIds: 'OwnerIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceResponseBodyInstanceOwnerNameList extends $dara.Model {
  ownerNames?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerNames: 'OwnerNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerNames)) {
      $dara.Model.validateArray(this.ownerNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceResponseBodyInstanceStandardGroup extends $dara.Model {
  /**
   * @remarks
   * The type of the control mode. Valid values:
   * 
   * *   **COMMON**: Security Collaboration
   * *   **NONE_CONTROL**: Flexible Management
   * *   **STABLE**: Stable Change
   * 
   * @example
   * NONE_CONTROL
   */
  groupMode?: string;
  /**
   * @remarks
   * The name of the security rule set corresponding to the control mode.
   * 
   * @example
   * test group name
   */
  groupName?: string;
  static names(): { [key: string]: string } {
    return {
      groupMode: 'GroupMode',
      groupName: 'GroupName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupMode: 'string',
      groupName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceResponseBodyInstance extends $dara.Model {
  /**
   * @remarks
   * The name of the database link for the database instance.
   * 
   * @example
   * test
   */
  dataLinkName?: string;
  /**
   * @remarks
   * The password that is used to log on to the database.
   * 
   * @example
   * ******
   */
  databasePassword?: string;
  /**
   * @remarks
   * The account that is used to log on to the database instance.
   * 
   * @example
   * dbuser
   */
  databaseUser?: string;
  /**
   * @remarks
   * The ID of the database administrator (DBA) for the database instance.
   * 
   * @example
   * 29****
   */
  dbaId?: string;
  /**
   * @remarks
   * The nickname of the DBA for the database instance.
   * 
   * @example
   * dbaname
   */
  dbaNickName?: string;
  /**
   * @remarks
   * Indicates whether the lock-free schema change feature is enabled for the database instance.
   * 
   * @example
   * 0
   */
  ddlOnline?: number;
  /**
   * @remarks
   * The ID of the Elastic Compute Service (ECS) instance on which the database instance is deployed.
   * 
   * @example
   * i-bp124ldpklqz59y3****
   */
  ecsInstanceId?: string;
  /**
   * @remarks
   * The ID of the region in which the database instance resides.
   * 
   * @example
   * cn-beijing
   */
  ecsRegion?: string;
  /**
   * @remarks
   * The type of the environment to which the database instance belongs. Valid values:
   * 
   * *   **product**: production environment
   * *   **dev**: development environment
   * *   **pre**: staging environment
   * *   **test**: test environment
   * *   **sit**: system integration testing (SIT) environment
   * *   **uat**: user acceptance testing (UAT) environment
   * *   **pet**: stress testing environment
   * *   **stag**: STAG environment
   * 
   * @example
   * test
   */
  envType?: string;
  /**
   * @remarks
   * The timeout period for exporting data from the database instance.
   * 
   * @example
   * 86400
   */
  exportTimeout?: number;
  /**
   * @remarks
   * The host address that is used to connect to the database instance.
   * 
   * @example
   * 192.168.XXX.XXX
   */
  host?: string;
  /**
   * @remarks
   * The alias of the database instance.
   * 
   * @example
   * test
   */
  instanceAlias?: string;
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * @example
   * 188****
   */
  instanceId?: string;
  /**
   * @remarks
   * The source of the database instance.
   * 
   * @example
   * ECS_OWN
   */
  instanceSource?: string;
  /**
   * @remarks
   * The type of the database instance.
   * 
   * @example
   * postgresql
   */
  instanceType?: string;
  /**
   * @remarks
   * The IDs of the owners for the database instance.
   */
  ownerIdList?: GetInstanceResponseBodyInstanceOwnerIdList;
  /**
   * @remarks
   * The nicknames of the owners for the database instance.
   */
  ownerNameList?: GetInstanceResponseBodyInstanceOwnerNameList;
  /**
   * @remarks
   * The port number that is used to connect to the database instance.
   * 
   * @example
   * 5432
   */
  port?: number;
  /**
   * @remarks
   * The timeout period for querying data in the database instance.
   * 
   * @example
   * 7200
   */
  queryTimeout?: number;
  /**
   * @remarks
   * The ID of the security rule set for the database instance.
   * 
   * @example
   * 3****
   */
  safeRuleId?: string;
  /**
   * @remarks
   * Whether sensitive data protection is enabled.  Valid values:
   * 
   * - **true**: Enable.
   * 
   * - **false**: Close.
   * 
   * @example
   * false
   */
  sellSitd?: string;
  /**
   * @remarks
   * The SID of the database instance.
   * 
   * @example
   * test
   */
  sid?: string;
  /**
   * @remarks
   * The control mode of the database instance.
   */
  standardGroup?: GetInstanceResponseBodyInstanceStandardGroup;
  /**
   * @remarks
   * The status of the database instance. Valid values:
   * 
   * *   **NORMAL**: normal
   * *   **DISABLE**: disabled
   * 
   * @example
   * NORMAL
   */
  state?: string;
  /**
   * @remarks
   * Indicates whether the cross-database query feature is enabled for the database instance. Valid values:
   * 
   * *   **0**: disabled
   * *   **1**: enabled
   * 
   * @example
   * 0
   */
  useDsql?: number;
  /**
   * @remarks
   * The ID of the virtual private cloud (VPC) to which the database instance belongs.
   * 
   * @example
   * vpc-o6wrloqsdqc9io3mg****
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      dataLinkName: 'DataLinkName',
      databasePassword: 'DatabasePassword',
      databaseUser: 'DatabaseUser',
      dbaId: 'DbaId',
      dbaNickName: 'DbaNickName',
      ddlOnline: 'DdlOnline',
      ecsInstanceId: 'EcsInstanceId',
      ecsRegion: 'EcsRegion',
      envType: 'EnvType',
      exportTimeout: 'ExportTimeout',
      host: 'Host',
      instanceAlias: 'InstanceAlias',
      instanceId: 'InstanceId',
      instanceSource: 'InstanceSource',
      instanceType: 'InstanceType',
      ownerIdList: 'OwnerIdList',
      ownerNameList: 'OwnerNameList',
      port: 'Port',
      queryTimeout: 'QueryTimeout',
      safeRuleId: 'SafeRuleId',
      sellSitd: 'SellSitd',
      sid: 'Sid',
      standardGroup: 'StandardGroup',
      state: 'State',
      useDsql: 'UseDsql',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataLinkName: 'string',
      databasePassword: 'string',
      databaseUser: 'string',
      dbaId: 'string',
      dbaNickName: 'string',
      ddlOnline: 'number',
      ecsInstanceId: 'string',
      ecsRegion: 'string',
      envType: 'string',
      exportTimeout: 'number',
      host: 'string',
      instanceAlias: 'string',
      instanceId: 'string',
      instanceSource: 'string',
      instanceType: 'string',
      ownerIdList: GetInstanceResponseBodyInstanceOwnerIdList,
      ownerNameList: GetInstanceResponseBodyInstanceOwnerNameList,
      port: 'number',
      queryTimeout: 'number',
      safeRuleId: 'string',
      sellSitd: 'string',
      sid: 'string',
      standardGroup: GetInstanceResponseBodyInstanceStandardGroup,
      state: 'string',
      useDsql: 'number',
      vpcId: 'string',
    };
  }

  validate() {
    if(this.ownerIdList && typeof (this.ownerIdList as any).validate === 'function') {
      (this.ownerIdList as any).validate();
    }
    if(this.ownerNameList && typeof (this.ownerNameList as any).validate === 'function') {
      (this.ownerNameList as any).validate();
    }
    if(this.standardGroup && typeof (this.standardGroup as any).validate === 'function') {
      (this.standardGroup as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetLhSpaceByNameResponseBodyLakehouseSpace extends $dara.Model {
  /**
   * @remarks
   * The ID of the user who creates the workspace.
   * 
   * @example
   * 51***
   */
  creatorId?: string;
  /**
   * @remarks
   * The description of the workspace.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The ID of the development database.
   * 
   * @example
   * 2435****
   */
  devDbId?: number;
  /**
   * @remarks
   * The type of the database. Valid values:
   * 
   * *   **14**: AnalyticDB for MySQL
   * *   **18**: AnalyticDB for PostgreSQL
   * 
   * @example
   * 14
   */
  dwDbType?: string;
  /**
   * @remarks
   * The ID of the workspace.
   * 
   * @example
   * 1
   */
  id?: number;
  /**
   * @remarks
   * Indicates whether the workspace is deleted. Valid values:
   * 
   * *   **true**: The workspace is deleted.
   * *   **false**: The workspace is not deleted.
   * 
   * @example
   * false
   */
  isDeleted?: boolean;
  /**
   * @remarks
   * The mode in which the workspace runs. Valid values:
   * 
   * *   **0**: basic mode
   * *   **1**: standard mode
   * 
   * @example
   * 1
   */
  mode?: number;
  /**
   * @remarks
   * The ID of the production database.
   * 
   * @example
   * 2442****
   */
  prodDbId?: number;
  /**
   * @remarks
   * The configuration of the workspace. Valid values:
   * 
   * *   **skipManualRunCheck**: No security rule check is required in the trial run phase.
   * *   **skipPublishApprove**: No approval is required for publishing and O\\&M.
   * 
   * @example
   * {\\"skipManualRunCheck\\":true,\\"skipPublishApprove\\":true}
   */
  spaceConfig?: string;
  /**
   * @remarks
   * The name of the workspace.
   * 
   * @example
   * test_space
   */
  spaceName?: string;
  /**
   * @remarks
   * The ID of the tenant to which the workspace belongs.
   * 
   * @example
   * 3***
   */
  tenantId?: string;
  static names(): { [key: string]: string } {
    return {
      creatorId: 'CreatorId',
      description: 'Description',
      devDbId: 'DevDbId',
      dwDbType: 'DwDbType',
      id: 'Id',
      isDeleted: 'IsDeleted',
      mode: 'Mode',
      prodDbId: 'ProdDbId',
      spaceConfig: 'SpaceConfig',
      spaceName: 'SpaceName',
      tenantId: 'TenantId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creatorId: 'string',
      description: 'string',
      devDbId: 'number',
      dwDbType: 'string',
      id: 'number',
      isDeleted: 'boolean',
      mode: 'number',
      prodDbId: 'number',
      spaceConfig: 'string',
      spaceName: 'string',
      tenantId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetLogicDatabaseResponseBodyLogicDatabaseDatabaseIds extends $dara.Model {
  databaseIds?: number[];
  static names(): { [key: string]: string } {
    return {
      databaseIds: 'DatabaseIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databaseIds: { 'type': 'array', 'itemType': 'number' },
    };
  }

  validate() {
    if(Array.isArray(this.databaseIds)) {
      $dara.Model.validateArray(this.databaseIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetLogicDatabaseResponseBodyLogicDatabaseOwnerIdList extends $dara.Model {
  ownerIds?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerIds: 'OwnerIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetLogicDatabaseResponseBodyLogicDatabaseOwnerNameList extends $dara.Model {
  ownerNames?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerNames: 'OwnerNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerNames)) {
      $dara.Model.validateArray(this.ownerNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetLogicDatabaseResponseBodyLogicDatabase extends $dara.Model {
  /**
   * @remarks
   * The alias of the logical database.
   * 
   * @example
   * test_logic_alias
   */
  alias?: string;
  /**
   * @remarks
   * The ID of the logical database.
   * 
   * @example
   * 1***
   */
  databaseId?: string;
  /**
   * @remarks
   * The IDs of database shards of the logical database.
   */
  databaseIds?: GetLogicDatabaseResponseBodyLogicDatabaseDatabaseIds;
  /**
   * @remarks
   * The database engine. For more information about the valid values of the DbType parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * @example
   * POLARDB
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment to which the database belongs. Valid values:
   * 
   * *   product: production environment
   * *   dev: development environment
   * *   pre: pre-release environment
   * *   test: test environment
   * *   sit: system integration testing (SIT) environment
   * *   uat: user acceptance testing (UAT) environment
   * *   pet: stress testing environment
   * *   stag: staging environment
   * 
   * @example
   * dev
   */
  envType?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. The return value is true.
   * 
   * @example
   * true
   */
  logic?: boolean;
  /**
   * @remarks
   * The IDs of the owners of the logical database.
   */
  ownerIdList?: GetLogicDatabaseResponseBodyLogicDatabaseOwnerIdList;
  /**
   * @remarks
   * The names of the owners of the logical database.
   */
  ownerNameList?: GetLogicDatabaseResponseBodyLogicDatabaseOwnerNameList;
  /**
   * @remarks
   * The name of the logical database.
   * 
   * @example
   * test_logic_db
   */
  schemaName?: string;
  /**
   * @remarks
   * The name that is used to search for the logical database.
   * 
   * @example
   * test_logic_db[test_logic_alias]
   */
  searchName?: string;
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      databaseId: 'DatabaseId',
      databaseIds: 'DatabaseIds',
      dbType: 'DbType',
      envType: 'EnvType',
      logic: 'Logic',
      ownerIdList: 'OwnerIdList',
      ownerNameList: 'OwnerNameList',
      schemaName: 'SchemaName',
      searchName: 'SearchName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      databaseId: 'string',
      databaseIds: GetLogicDatabaseResponseBodyLogicDatabaseDatabaseIds,
      dbType: 'string',
      envType: 'string',
      logic: 'boolean',
      ownerIdList: GetLogicDatabaseResponseBodyLogicDatabaseOwnerIdList,
      ownerNameList: GetLogicDatabaseResponseBodyLogicDatabaseOwnerNameList,
      schemaName: 'string',
      searchName: 'string',
    };
  }

  validate() {
    if(this.databaseIds && typeof (this.databaseIds as any).validate === 'function') {
      (this.databaseIds as any).validate();
    }
    if(this.ownerIdList && typeof (this.ownerIdList as any).validate === 'function') {
      (this.ownerIdList as any).validate();
    }
    if(this.ownerNameList && typeof (this.ownerNameList as any).validate === 'function') {
      (this.ownerNameList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMetaTableColumnResponseBodyColumnList extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the column is an auto-increment column. Valid values:
   * 
   * *   **true**: The column is an auto-increment column.
   * *   **false**: The column is not an auto-increment column.
   * 
   * @example
   * false
   */
  autoIncrement?: boolean;
  /**
   * @remarks
   * The ID of the column.
   * 
   * @example
   * 63513****
   */
  columnId?: string;
  /**
   * @remarks
   * The name of the column.
   * 
   * @example
   * has_promotion
   */
  columnName?: string;
  /**
   * @remarks
   * The data type of the column.
   * 
   * > The return value of a column is not unique, such as **bigint** or **int**.
   * 
   * @example
   * bigint(1)
   */
  columnType?: string;
  /**
   * @remarks
   * The length of the field.
   * 
   * @example
   * 0
   */
  dataLength?: number;
  /**
   * @remarks
   * The precision of the field.
   * 
   * @example
   * 19
   */
  dataPrecision?: number;
  /**
   * @remarks
   * The number of decimal places for the field.
   * 
   * @example
   * 0
   */
  dataScale?: number;
  /**
   * @remarks
   * The description of the column.
   * 
   * @example
   * Whether discounts are provided
   */
  description?: string;
  /**
   * @remarks
   * Indicates whether the field can be empty. Valid values:
   * 
   * *   **true**: The field can be empty.
   * *   **false**: The field cannot be empty.
   * 
   * @example
   * false
   */
  nullable?: boolean;
  /**
   * @remarks
   * The position of the field in the table.
   * 
   * @example
   * 1
   */
  position?: number;
  /**
   * @remarks
   * Indicates whether the field is the primary key. Valid values:
   * 
   * *   **true**: The field is the primary key.
   * *   **false**: The field is not the primary key.
   * 
   * @example
   * true
   */
  primaryKey?: string;
  /**
   * @remarks
   * The sensitivity level of the column. Valid values:
   * 
   * *   **INNER**: The column is not sensitive.
   * *   **SENSITIVE**: The column is sensitive.
   * *   **CONFIDENTIAL**: The column is confidential.
   * 
   * > For more information, see [Sensitivity levels of columns](https://help.aliyun.com/document_detail/66091.html).
   * 
   * @example
   * INNER
   */
  securityLevel?: string;
  static names(): { [key: string]: string } {
    return {
      autoIncrement: 'AutoIncrement',
      columnId: 'ColumnId',
      columnName: 'ColumnName',
      columnType: 'ColumnType',
      dataLength: 'DataLength',
      dataPrecision: 'DataPrecision',
      dataScale: 'DataScale',
      description: 'Description',
      nullable: 'Nullable',
      position: 'Position',
      primaryKey: 'PrimaryKey',
      securityLevel: 'SecurityLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoIncrement: 'boolean',
      columnId: 'string',
      columnName: 'string',
      columnType: 'string',
      dataLength: 'number',
      dataPrecision: 'number',
      dataScale: 'number',
      description: 'string',
      nullable: 'boolean',
      position: 'number',
      primaryKey: 'string',
      securityLevel: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMetaTableDetailInfoResponseBodyDetailInfoColumnList extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the column is an auto-increment column. Valid values:
   * 
   * *   true: The column is an auto-increment column.
   * *   false: The column is not an auto-increment column.
   * 
   * @example
   * true
   */
  autoIncrement?: boolean;
  /**
   * @remarks
   * The ID of the column.
   * 
   * @example
   * 191234849
   */
  columnId?: string;
  /**
   * @remarks
   * The name of the column.
   * 
   * @example
   * id
   */
  columnName?: string;
  /**
   * @remarks
   * The data type of the column. Examples: Bigint, Int, and Varchar.
   * 
   * @example
   * bigint(20) unsigned
   */
  columnType?: string;
  /**
   * @remarks
   * The length of the field.
   * 
   * @example
   * 0
   */
  dataLength?: number;
  /**
   * @remarks
   * The precision of the field.
   * 
   * @example
   * 0
   */
  dataPrecision?: number;
  /**
   * @remarks
   * The scale of the column.
   * 
   * @example
   * 0
   */
  dataScale?: number;
  /**
   * @remarks
   * The description of the column.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * Indicates whether the column is nullable. Valid values:
   * 
   * *   true: The column is nullable.
   * *   false: The column is not nullable.
   * 
   * @example
   * false
   */
  nullable?: boolean;
  /**
   * @remarks
   * The position of the field in the table.
   * 
   * @example
   * 1
   */
  position?: string;
  static names(): { [key: string]: string } {
    return {
      autoIncrement: 'AutoIncrement',
      columnId: 'ColumnId',
      columnName: 'ColumnName',
      columnType: 'ColumnType',
      dataLength: 'DataLength',
      dataPrecision: 'DataPrecision',
      dataScale: 'DataScale',
      description: 'Description',
      nullable: 'Nullable',
      position: 'Position',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoIncrement: 'boolean',
      columnId: 'string',
      columnName: 'string',
      columnType: 'string',
      dataLength: 'number',
      dataPrecision: 'number',
      dataScale: 'number',
      description: 'string',
      nullable: 'boolean',
      position: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMetaTableDetailInfoResponseBodyDetailInfoIndexList extends $dara.Model {
  /**
   * @remarks
   * The index column.
   */
  indexColumns?: string[];
  /**
   * @remarks
   * The ID of the index.
   * 
   * @example
   * 123
   */
  indexId?: string;
  /**
   * @remarks
   * The name of the index.
   * 
   * @example
   * PRIMARY
   */
  indexName?: string;
  /**
   * @remarks
   * The type of the index. Examples: Primary, Unique, and Normal.
   * 
   * @example
   * Primary
   */
  indexType?: string;
  /**
   * @remarks
   * Indicates whether the index is unique. Valid values:
   * 
   * *   true: The index is unique.
   * *   false: The index is not unique.
   * 
   * @example
   * false
   */
  unique?: boolean;
  static names(): { [key: string]: string } {
    return {
      indexColumns: 'IndexColumns',
      indexId: 'IndexId',
      indexName: 'IndexName',
      indexType: 'IndexType',
      unique: 'Unique',
    };
  }

  static types(): { [key: string]: any } {
    return {
      indexColumns: { 'type': 'array', 'itemType': 'string' },
      indexId: 'string',
      indexName: 'string',
      indexType: 'string',
      unique: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.indexColumns)) {
      $dara.Model.validateArray(this.indexColumns);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMetaTableDetailInfoResponseBodyDetailInfo extends $dara.Model {
  /**
   * @remarks
   * The columns in the table.
   */
  columnList?: GetMetaTableDetailInfoResponseBodyDetailInfoColumnList[];
  /**
   * @remarks
   * The list of indexes.
   */
  indexList?: GetMetaTableDetailInfoResponseBodyDetailInfoIndexList[];
  static names(): { [key: string]: string } {
    return {
      columnList: 'ColumnList',
      indexList: 'IndexList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnList: { 'type': 'array', 'itemType': GetMetaTableDetailInfoResponseBodyDetailInfoColumnList },
      indexList: { 'type': 'array', 'itemType': GetMetaTableDetailInfoResponseBodyDetailInfoIndexList },
    };
  }

  validate() {
    if(Array.isArray(this.columnList)) {
      $dara.Model.validateArray(this.columnList);
    }
    if(Array.isArray(this.indexList)) {
      $dara.Model.validateArray(this.indexList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOnlineDDLProgressResponseBodyOnlineDDLTaskDetail extends $dara.Model {
  /**
   * @remarks
   * The cleanup policy of the original table after the cut-over. Valid values:
   * 
   * *   **DROP**: Invalid original tables are deleted.
   * *   **MOVE**: Invalid original tables are moved to the test database. You can delete the tables manually.
   * *   **NOTHING**: Invalid original tables are retained in the original database. You can delete the tables manually.
   * 
   * @example
   * DROP
   */
  cleanStrategy?: string;
  /**
   * @remarks
   * The policy of full replication. Valid values:
   * 
   * *   **AUTO**: DMS dynamically adjusts the chunk size based on the performance of the database. Tables are locked for less than 1.5 seconds during a single replication operation.
   * *   **RUNNING**: DMS uses the specified value of the CopyChunkSize parameter. The valid value of the CopyChunkSize parameter ranges from 1 to 60000. If you set this parameter to RUNNING, you must specify the CopyChunkSize parameter.
   * 
   * @example
   * AUTO
   */
  copyChunkMode?: string;
  /**
   * @remarks
   * The size of each chunk that is used to replicate data. This parameter is used to specify the size of each chunk. A larger chunk size increases the replication efficiency and decreases the business performance.
   * 
   * > During full replication, the original table is divided into N small chunks and each chunk is replicated to the temporary table one by one. By default, DMS dynamically adjusts the size of each chunk.
   * 
   * @example
   * 1000
   */
  copyChunkSize?: number;
  /**
   * @remarks
   * The actual amount of data replicated from the original table in the lock-free change operation.
   * 
   * @example
   * 9
   */
  copyCount?: number;
  /**
   * @remarks
   * The estimated total number of rows of the data. The value is obtained from the statistical data in the information_schema database. In most cases, the estimated total number of rows is smaller than the actual number of rows in a table.
   * 
   * @example
   * 10
   */
  copyTotal?: number;
  /**
   * @remarks
   * The number of retries when the cut-over fails.
   * 
   * @example
   * 3
   */
  cutoverFailRetryTimes?: number;
  /**
   * @remarks
   * The maximum period of time that a table can be locked during cut-over. Unit: seconds.
   * 
   * @example
   * 2
   */
  cutoverLockTimeSeconds?: number;
  /**
   * @remarks
   * The end of the time window of the cut-over operation. This value is at least 30 minutes later than the CutoverWindowStartTime parameter. Default value: 23:59:59
   * 
   * @example
   * 13:00:00
   */
  cutoverWindowEndTime?: string;
  /**
   * @remarks
   * The beginning of the time window of the cut-over operation. Default value: 00:00:00. This parameter controls the time window of the cut-over. Cut-over can be performed only when the cut-over conditions are met and the time is within the specified time window. If the time is not within the time window, the cut-over operation is not performed until the time reaches the beginning of the time window.
   * 
   * @example
   * 12:00:00
   */
  cutoverWindowStartTime?: string;
  /**
   * @remarks
   * The replay latency of DMS. Unit: seconds. The replay latency is the period of time that is taken to replay the binary logs of the table to the temporary table. The latency does not indicate the data migration latency between a primary database and a secondary database.
   * 
   * @example
   * 0
   */
  delaySeconds?: number;
  /**
   * @remarks
   * The state of the task. Valid values:
   * 
   * *   **INIT**: The task is being initialized.
   * *   **SUCCESS**: The task is complete.
   * *   **RUNNING**: The task is being executed.
   * *   **WAITING_CUTOVER**: The task is waiting for cut-over.
   * *   **RESTARTING**: The task is restarting.
   * *   **PAUSE**: The task is suspended.
   * *   **UNSUPPORTED**: The task is not supported.
   * *   **CANCELED**: The task is canceled.
   * *   **FAIL**: The task failed.
   * *   **INTERRUPT**: The task is interrupted.
   * 
   * @example
   * SUCCESS
   */
  jobStatus?: string;
  /**
   * @remarks
   * The estimated execution progress. The actual progress is subject to the task status.
   * 
   * @example
   * 90%
   */
  progressRatio?: string;
  /**
   * @remarks
   * The description of the task status.
   * 
   * @example
   * Success
   */
  statusDesc?: string;
  static names(): { [key: string]: string } {
    return {
      cleanStrategy: 'CleanStrategy',
      copyChunkMode: 'CopyChunkMode',
      copyChunkSize: 'CopyChunkSize',
      copyCount: 'CopyCount',
      copyTotal: 'CopyTotal',
      cutoverFailRetryTimes: 'CutoverFailRetryTimes',
      cutoverLockTimeSeconds: 'CutoverLockTimeSeconds',
      cutoverWindowEndTime: 'CutoverWindowEndTime',
      cutoverWindowStartTime: 'CutoverWindowStartTime',
      delaySeconds: 'DelaySeconds',
      jobStatus: 'JobStatus',
      progressRatio: 'ProgressRatio',
      statusDesc: 'StatusDesc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cleanStrategy: 'string',
      copyChunkMode: 'string',
      copyChunkSize: 'number',
      copyCount: 'number',
      copyTotal: 'number',
      cutoverFailRetryTimes: 'number',
      cutoverLockTimeSeconds: 'number',
      cutoverWindowEndTime: 'string',
      cutoverWindowStartTime: 'string',
      delaySeconds: 'number',
      jobStatus: 'string',
      progressRatio: 'string',
      statusDesc: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOpLogResponseBodyOpLogDetailsOpLogDetail extends $dara.Model {
  /**
   * @remarks
   * The endpoint of the database instance.
   * 
   * > 
   * 
   * *   This parameter is valid only for database instances of the LocalInstance type.
   * 
   * *   This parameter is valid only for operations on the functional modules related to tasks.
   * 
   * @example
   * dmstest_prod_database@dmstest.rds... [Test instance]
   */
  database?: string;
  /**
   * @remarks
   * The functional module for which the operation log is queried.
   * 
   * @example
   * SECURITY_RULE
   */
  module?: string;
  /**
   * @remarks
   * The details of the operation.
   * 
   * @example
   * SELECT * FROM `orders` \\n LIMIT 20
   */
  opContent?: string;
  /**
   * @remarks
   * The time when the operation was performed.
   * 
   * @example
   * 2022-03-28 16:45:19
   */
  opTime?: string;
  /**
   * @remarks
   * The ID of the user who performed the operation.
   * 
   * @example
   * 51****
   */
  opUserId?: number;
  /**
   * @remarks
   * The ID of the ticket or task.
   * 
   * >  This parameter is valid only for operations on the functional modules related to tasks and the task management module in system management.
   * 
   * @example
   * 509****
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account.
   * 
   * @example
   * 22275482072787****
   */
  userId?: string;
  /**
   * @remarks
   * The display name of the user.
   * 
   * @example
   * test_name
   */
  userNick?: string;
  static names(): { [key: string]: string } {
    return {
      database: 'Database',
      module: 'Module',
      opContent: 'OpContent',
      opTime: 'OpTime',
      opUserId: 'OpUserId',
      orderId: 'OrderId',
      userId: 'UserId',
      userNick: 'UserNick',
    };
  }

  static types(): { [key: string]: any } {
    return {
      database: 'string',
      module: 'string',
      opContent: 'string',
      opTime: 'string',
      opUserId: 'number',
      orderId: 'number',
      userId: 'string',
      userNick: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOpLogResponseBodyOpLogDetails extends $dara.Model {
  opLogDetail?: GetOpLogResponseBodyOpLogDetailsOpLogDetail[];
  static names(): { [key: string]: string } {
    return {
      opLogDetail: 'OpLogDetail',
    };
  }

  static types(): { [key: string]: any } {
    return {
      opLogDetail: { 'type': 'array', 'itemType': GetOpLogResponseBodyOpLogDetailsOpLogDetail },
    };
  }

  validate() {
    if(Array.isArray(this.opLogDetail)) {
      $dara.Model.validateArray(this.opLogDetail);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOrderBaseInfoResponseBodyOrderBaseInfoRelatedUserList extends $dara.Model {
  userIds?: string[];
  static names(): { [key: string]: string } {
    return {
      userIds: 'UserIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.userIds)) {
      $dara.Model.validateArray(this.userIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOrderBaseInfoResponseBodyOrderBaseInfoRelatedUserNickList extends $dara.Model {
  userNicks?: string[];
  static names(): { [key: string]: string } {
    return {
      userNicks: 'UserNicks',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userNicks: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.userNicks)) {
      $dara.Model.validateArray(this.userNicks);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOrderBaseInfoResponseBodyOrderBaseInfo extends $dara.Model {
  /**
   * @remarks
   * The Key of the ticket attachment. This information is returned only when an attachment is uploaded when a ticket is created.
   * 
   * @example
   * upload_order_info_856887_f356366f-f0f8-42fc-ba57-4a509303e814_18072d8a9bce876e3073bc655c2865f.png
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The remarks of the ticket.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The applicant.
   * 
   * @example
   * xxx
   */
  committer?: string;
  /**
   * @remarks
   * The ID of the applicant. Note: The ID is different from the Alibaba Cloud account ID of the applicant.
   * 
   * @example
   * 1
   */
  committerId?: number;
  /**
   * @remarks
   * The time when the ticket was created.
   * 
   * @example
   * 2019-10-10 00:00:00
   */
  createTime?: string;
  /**
   * @remarks
   * The time when the ticket was last modified.
   * 
   * @example
   * 2019-10-10 00:00:00
   */
  lastModifyTime?: string;
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * @example
   * 12345
   */
  orderId?: number;
  /**
   * @remarks
   * The original file name of the ticket attachment. This information is returned only when an attachment is uploaded when a ticket is created.
   * 
   * @example
   * 18072d8a9bce876e3073bc655c2865f.png
   */
  originAttachmentName?: string;
  /**
   * @remarks
   * The type of the ticket. For more information about the value of this parameter, see the request parameters of the [CreateOrder](https://help.aliyun.com/document_detail/465865.html) operation.
   * 
   * @example
   * DC_COMMON
   */
  pluginType?: string;
  /**
   * @remarks
   * The IDs of the operators that are related to the ticket.
   */
  relatedUserList?: GetOrderBaseInfoResponseBodyOrderBaseInfoRelatedUserList;
  /**
   * @remarks
   * The nicknames of the operators that are related to the ticket.
   */
  relatedUserNickList?: GetOrderBaseInfoResponseBodyOrderBaseInfoRelatedUserNickList;
  /**
   * @remarks
   * The status code of the ticket. Valid values:
   * 
   * *   **new**: The ticket is created.
   * *   **toaudit**: The ticket is being reviewed.
   * *   **Approved**: The ticket is approved.
   * *   **reject**: The ticket is rejected.
   * *   **processing**: The ticket is being executed.
   * *   **success**: The ticket is executed.
   * *   **closed**: The ticket is closed.
   * 
   * @example
   * success
   */
  statusCode?: string;
  /**
   * @remarks
   * The description of the status.
   * 
   * @example
   * success
   */
  statusDesc?: string;
  /**
   * @remarks
   * The ID of the approval process.
   * 
   * @example
   * 1
   */
  workflowInstanceId?: number;
  /**
   * @remarks
   * The description of the approval process.
   * 
   * @example
   * approved
   */
  workflowStatusDesc?: string;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      committer: 'Committer',
      committerId: 'CommitterId',
      createTime: 'CreateTime',
      lastModifyTime: 'LastModifyTime',
      orderId: 'OrderId',
      originAttachmentName: 'OriginAttachmentName',
      pluginType: 'PluginType',
      relatedUserList: 'RelatedUserList',
      relatedUserNickList: 'RelatedUserNickList',
      statusCode: 'StatusCode',
      statusDesc: 'StatusDesc',
      workflowInstanceId: 'WorkflowInstanceId',
      workflowStatusDesc: 'WorkflowStatusDesc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      committer: 'string',
      committerId: 'number',
      createTime: 'string',
      lastModifyTime: 'string',
      orderId: 'number',
      originAttachmentName: 'string',
      pluginType: 'string',
      relatedUserList: GetOrderBaseInfoResponseBodyOrderBaseInfoRelatedUserList,
      relatedUserNickList: GetOrderBaseInfoResponseBodyOrderBaseInfoRelatedUserNickList,
      statusCode: 'string',
      statusDesc: 'string',
      workflowInstanceId: 'number',
      workflowStatusDesc: 'string',
    };
  }

  validate() {
    if(this.relatedUserList && typeof (this.relatedUserList as any).validate === 'function') {
      (this.relatedUserList as any).validate();
    }
    if(this.relatedUserNickList && typeof (this.relatedUserNickList as any).validate === 'function') {
      (this.relatedUserNickList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOwnerApplyOrderDetailResponseBodyOwnerApplyOrderDetailResourcesResourceDetail extends $dara.Model {
  /**
   * @remarks
   * The type of the database engine.
   * 
   * @example
   * MYSQL
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment to which the instance belongs. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).
   * 
   * @example
   * PRODUCT
   */
  envType?: string;
  /**
   * @remarks
   * The IDs of the original owners.
   */
  ownerIds?: number[];
  /**
   * @remarks
   * The nicknames of the owners.
   */
  ownerNickNames?: string[];
  /**
   * @remarks
   * The search name of the resource.
   * 
   * @example
   * yuyang【test】
   */
  searchName?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * > : This parameter is returned when you submit a Database-OWNER ticket.
   * 
   * @example
   * test
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      envType: 'EnvType',
      ownerIds: 'OwnerIds',
      ownerNickNames: 'OwnerNickNames',
      searchName: 'SearchName',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      envType: 'string',
      ownerIds: { 'type': 'array', 'itemType': 'number' },
      ownerNickNames: { 'type': 'array', 'itemType': 'string' },
      searchName: 'string',
      tableName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    if(Array.isArray(this.ownerNickNames)) {
      $dara.Model.validateArray(this.ownerNickNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOwnerApplyOrderDetailResponseBodyOwnerApplyOrderDetailResources extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true**: The instance is a logical database.
   * *   **false**: The instance is not a logical database.
   * 
   * @example
   * true
   */
  logic?: boolean;
  /**
   * @remarks
   * The details of the resource.
   */
  resourceDetail?: GetOwnerApplyOrderDetailResponseBodyOwnerApplyOrderDetailResourcesResourceDetail;
  /**
   * @remarks
   * The ID of the resource.
   * 
   * @example
   * 12345
   */
  targetId?: string;
  static names(): { [key: string]: string } {
    return {
      logic: 'Logic',
      resourceDetail: 'ResourceDetail',
      targetId: 'TargetId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logic: 'boolean',
      resourceDetail: GetOwnerApplyOrderDetailResponseBodyOwnerApplyOrderDetailResourcesResourceDetail,
      targetId: 'string',
    };
  }

  validate() {
    if(this.resourceDetail && typeof (this.resourceDetail as any).validate === 'function') {
      (this.resourceDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOwnerApplyOrderDetailResponseBodyOwnerApplyOrderDetail extends $dara.Model {
  /**
   * @remarks
   * The type of the submitted ticket. Valid values:
   * 
   * *   **INSTANCE**: the ticket that applies for the permissions to be an instance owner
   * *   **DB**: the ticket that applies for the permissions to be a database owner
   * *   **TABLE**: the ticket that applies for the permissions to be a table owner
   * 
   * @example
   * DB
   */
  applyType?: string;
  /**
   * @remarks
   * The details of the requested resource.
   */
  resources?: GetOwnerApplyOrderDetailResponseBodyOwnerApplyOrderDetailResources[];
  static names(): { [key: string]: string } {
    return {
      applyType: 'ApplyType',
      resources: 'Resources',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyType: 'string',
      resources: { 'type': 'array', 'itemType': GetOwnerApplyOrderDetailResponseBodyOwnerApplyOrderDetailResources },
    };
  }

  validate() {
    if(Array.isArray(this.resources)) {
      $dara.Model.validateArray(this.resources);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPagedInstanceResponseBodyDataInstance extends $dara.Model {
  /**
   * @example
   * 2023-05-14 16:00:57
   */
  businessTime?: string;
  /**
   * @example
   * 3
   */
  checkStatus?: number;
  /**
   * @example
   * 33753
   */
  dagId?: number;
  /**
   * @example
   * false
   */
  delete?: string;
  /**
   * @example
   * 2023-04-23 10:23:20
   */
  endTime?: string;
  /**
   * @example
   * 2023-03-28 10:50:45
   */
  gmtCreate?: string;
  /**
   * @example
   * 2023-04-18 15:28:16
   */
  gmtModified?: string;
  /**
   * @example
   * 6851
   */
  historyDagId?: number;
  /**
   * @example
   * 24271
   */
  id?: number;
  /**
   * @example
   * {”nodes":[11694,11695]"}
   */
  lastRunningContext?: string;
  msg?: string;
  /**
   * @example
   * 1
   */
  status?: number;
  /**
   * @example
   * 1
   */
  taskType?: number;
  /**
   * @example
   * 3406
   */
  tenantId?: string;
  /**
   * @example
   * 1
   */
  triggerType?: number;
  /**
   * @example
   * 1
   */
  version?: string;
  static names(): { [key: string]: string } {
    return {
      businessTime: 'BusinessTime',
      checkStatus: 'CheckStatus',
      dagId: 'DagId',
      delete: 'Delete',
      endTime: 'EndTime',
      gmtCreate: 'GmtCreate',
      gmtModified: 'GmtModified',
      historyDagId: 'HistoryDagId',
      id: 'Id',
      lastRunningContext: 'LastRunningContext',
      msg: 'Msg',
      status: 'Status',
      taskType: 'TaskType',
      tenantId: 'TenantId',
      triggerType: 'TriggerType',
      version: 'Version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessTime: 'string',
      checkStatus: 'number',
      dagId: 'number',
      delete: 'string',
      endTime: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      historyDagId: 'number',
      id: 'number',
      lastRunningContext: 'string',
      msg: 'string',
      status: 'number',
      taskType: 'number',
      tenantId: 'string',
      triggerType: 'number',
      version: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPagedInstanceResponseBodyData extends $dara.Model {
  instance?: GetPagedInstanceResponseBodyDataInstance[];
  static names(): { [key: string]: string } {
    return {
      instance: 'Instance',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instance: { 'type': 'array', 'itemType': GetPagedInstanceResponseBodyDataInstance },
    };
  }

  validate() {
    if(Array.isArray(this.instance)) {
      $dara.Model.validateArray(this.instance);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResourcesColumnInfo extends $dara.Model {
  /**
   * @remarks
   * The name of the column.
   * 
   * @example
   * test_col
   */
  columnName?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * test_tb
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      tableName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResourcesDatabaseInfo extends $dara.Model {
  /**
   * @remarks
   * The database ID.
   * 
   * @example
   * 12345
   */
  dbId?: number;
  /**
   * @remarks
   * The type of the database engine.
   * 
   * @example
   * MySQL
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment to which the instance belongs. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).
   * 
   * @example
   * product
   */
  envType?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The IDs of the owners of the database.
   */
  ownerIds?: number[];
  /**
   * @remarks
   * The nicknames of the owners of the database.
   */
  ownerNickNames?: string[];
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * @example
   * test@xxxx:3306【test】
   */
  searchName?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      dbType: 'DbType',
      envType: 'EnvType',
      logic: 'Logic',
      ownerIds: 'OwnerIds',
      ownerNickNames: 'OwnerNickNames',
      searchName: 'SearchName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      dbType: 'string',
      envType: 'string',
      logic: 'boolean',
      ownerIds: { 'type': 'array', 'itemType': 'number' },
      ownerNickNames: { 'type': 'array', 'itemType': 'string' },
      searchName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    if(Array.isArray(this.ownerNickNames)) {
      $dara.Model.validateArray(this.ownerNickNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResourcesInstanceInfo extends $dara.Model {
  /**
   * @remarks
   * The type of the database engine.
   * 
   * @example
   * MySQL
   */
  dbType?: string;
  /**
   * @remarks
   * The ID of the database administrator (DBA) of the instance.
   * 
   * @example
   * 12345
   */
  dbaId?: number;
  /**
   * @remarks
   * The nickname of the DBA of the instance.
   * 
   * @example
   * test_dba
   */
  dbaNickName?: string;
  /**
   * @remarks
   * The type of the environment to which the instance belongs. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).
   * 
   * @example
   * product
   */
  envType?: string;
  /**
   * @remarks
   * The endpoint of the instance.
   * 
   * @example
   * xxxx
   */
  host?: string;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * 12345
   */
  instanceId?: string;
  /**
   * @remarks
   * The IDs of the owners of the instance.
   */
  ownerIds?: number[];
  /**
   * @remarks
   * The nicknames of the owners of the instance.
   */
  ownerNickName?: string[];
  /**
   * @remarks
   * The port that is used to connect to the instance.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The name that is used to search for the instance.
   * 
   * @example
   * xxxx:3306
   */
  searchName?: string;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      dbaId: 'DbaId',
      dbaNickName: 'DbaNickName',
      envType: 'EnvType',
      host: 'Host',
      instanceId: 'InstanceId',
      ownerIds: 'OwnerIds',
      ownerNickName: 'OwnerNickName',
      port: 'Port',
      searchName: 'SearchName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      dbaId: 'number',
      dbaNickName: 'string',
      envType: 'string',
      host: 'string',
      instanceId: 'string',
      ownerIds: { 'type': 'array', 'itemType': 'number' },
      ownerNickName: { 'type': 'array', 'itemType': 'string' },
      port: 'number',
      searchName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    if(Array.isArray(this.ownerNickName)) {
      $dara.Model.validateArray(this.ownerNickName);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResourcesTableInfo extends $dara.Model {
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * test_tb
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tableName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResources extends $dara.Model {
  /**
   * @remarks
   * The information about the column.
   */
  columnInfo?: GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResourcesColumnInfo;
  /**
   * @remarks
   * The information about the database.
   */
  databaseInfo?: GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResourcesDatabaseInfo;
  /**
   * @remarks
   * The information about the instance.
   */
  instanceInfo?: GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResourcesInstanceInfo;
  /**
   * @remarks
   * The information about the table.
   */
  tableInfo?: GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResourcesTableInfo;
  static names(): { [key: string]: string } {
    return {
      columnInfo: 'ColumnInfo',
      databaseInfo: 'DatabaseInfo',
      instanceInfo: 'InstanceInfo',
      tableInfo: 'TableInfo',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnInfo: GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResourcesColumnInfo,
      databaseInfo: GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResourcesDatabaseInfo,
      instanceInfo: GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResourcesInstanceInfo,
      tableInfo: GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResourcesTableInfo,
    };
  }

  validate() {
    if(this.columnInfo && typeof (this.columnInfo as any).validate === 'function') {
      (this.columnInfo as any).validate();
    }
    if(this.databaseInfo && typeof (this.databaseInfo as any).validate === 'function') {
      (this.databaseInfo as any).validate();
    }
    if(this.instanceInfo && typeof (this.instanceInfo as any).validate === 'function') {
      (this.instanceInfo as any).validate();
    }
    if(this.tableInfo && typeof (this.tableInfo as any).validate === 'function') {
      (this.tableInfo as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPermApplyOrderDetailResponseBodyPermApplyOrderDetail extends $dara.Model {
  /**
   * @remarks
   * The type of objects on which you apply for permissions. Valid values:
   * 
   * *   **DB**: database
   * *   **TAB**: table
   * *   **COL**: column
   * *   **INSTANT**: instance
   * 
   * @example
   * DB
   */
  applyType?: string;
  /**
   * @remarks
   * The type of the permissions that you apply for. Valid values:
   * 
   * *   **1**: the permissions to query information.
   * *   **2**: the permissions to export information.
   * *   **3**: the permissions to query and export information.
   * *   **4**: the permissions to modify information.
   * *   **5**: the permissions to query and modify information.
   * *   **6**: the permissions to export and modify information.
   * *   **7**: the permissions to query, export, and modify information.
   * *   **8**: the permissions to log on to the database.
   * 
   * @example
   * 7
   */
  permType?: number;
  /**
   * @remarks
   * The list of resources.
   */
  resources?: GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResources[];
  /**
   * @remarks
   * The validity duration of the permissions. Unit: seconds.
   * 
   * @example
   * 3600
   */
  seconds?: number;
  static names(): { [key: string]: string } {
    return {
      applyType: 'ApplyType',
      permType: 'PermType',
      resources: 'Resources',
      seconds: 'Seconds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyType: 'string',
      permType: 'number',
      resources: { 'type': 'array', 'itemType': GetPermApplyOrderDetailResponseBodyPermApplyOrderDetailResources },
      seconds: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.resources)) {
      $dara.Model.validateArray(this.resources);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPhysicalDatabaseResponseBodyDatabaseOwnerIdList extends $dara.Model {
  ownerIds?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerIds: 'OwnerIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPhysicalDatabaseResponseBodyDatabaseOwnerNameList extends $dara.Model {
  ownerNames?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerNames: 'OwnerNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerNames)) {
      $dara.Model.validateArray(this.ownerNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPhysicalDatabaseResponseBodyDatabase extends $dara.Model {
  /**
   * @remarks
   * The name of the catalog to which the database belongs.
   * 
   * > : If the database is a PostgreSQL database, the name of the database is displayed.
   * 
   * @example
   * def
   */
  catalogName?: string;
  /**
   * @remarks
   * The ID of the physical database.
   * 
   * @example
   * 43125312
   */
  databaseId?: string;
  /**
   * @remarks
   * The type of the database engine.
   * 
   * @example
   * mysql
   */
  dbType?: string;
  /**
   * @remarks
   * The user ID of the DBA in the destination database.
   * 
   * @example
   * 43253
   */
  dbaId?: string;
  /**
   * @remarks
   * The nickname of the database administrator (DBA) in the destination database.
   * 
   * @example
   * dmstest
   */
  dbaName?: string;
  /**
   * @remarks
   * The encoding format of the database.
   * 
   * @example
   * utf8mb4
   */
  encoding?: string;
  /**
   * @remarks
   * The type of the environment to which the database belongs. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).
   * 
   * @example
   * product
   */
  envType?: string;
  /**
   * @remarks
   * The endpoint that is used to connect to the database.
   * 
   * @example
   * rm-xxxab3r272.mysql.rds.aliyuncs.com
   */
  host?: string;
  /**
   * @remarks
   * The alias of the database instance.
   * 
   * @example
   * test
   */
  instanceAlias?: string;
  /**
   * @remarks
   * The instance ID of the destination database.
   * 
   * @example
   * 43215325
   */
  instanceId?: string;
  /**
   * @remarks
   * The user IDs of the database owners.
   */
  ownerIdList?: GetPhysicalDatabaseResponseBodyDatabaseOwnerIdList;
  /**
   * @remarks
   * The nicknames of the database owners.
   */
  ownerNameList?: GetPhysicalDatabaseResponseBodyDatabaseOwnerNameList;
  /**
   * @remarks
   * The port that is used to connect to the database.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * > : If the database is a PostgreSQL database, the name of the mode is displayed.
   * 
   * @example
   * dmstest
   */
  schemaName?: string;
  /**
   * @remarks
   * The name that is used for searching the database.
   * 
   * @example
   * dmstest@rm-xxxab3r272.mysql.rds.aliyuncs.com:3306
   */
  searchName?: string;
  /**
   * @remarks
   * The system ID (SID) of the database.
   * 
   * > : The value of the parameter is returned only for Oracle databases.
   * 
   * @example
   * def
   */
  sid?: string;
  /**
   * @remarks
   * The state of the database. Valid values:
   * 
   * *   **NORMAL**: The database is normal.
   * *   **DISABLE**: The database is disabled.
   * *   **OFFLINE**: The database is unpublished.
   * *   **NOT_EXIST**: The database does not exist.
   * 
   * @example
   * NORMAL
   */
  state?: string;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      databaseId: 'DatabaseId',
      dbType: 'DbType',
      dbaId: 'DbaId',
      dbaName: 'DbaName',
      encoding: 'Encoding',
      envType: 'EnvType',
      host: 'Host',
      instanceAlias: 'InstanceAlias',
      instanceId: 'InstanceId',
      ownerIdList: 'OwnerIdList',
      ownerNameList: 'OwnerNameList',
      port: 'Port',
      schemaName: 'SchemaName',
      searchName: 'SearchName',
      sid: 'Sid',
      state: 'State',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      databaseId: 'string',
      dbType: 'string',
      dbaId: 'string',
      dbaName: 'string',
      encoding: 'string',
      envType: 'string',
      host: 'string',
      instanceAlias: 'string',
      instanceId: 'string',
      ownerIdList: GetPhysicalDatabaseResponseBodyDatabaseOwnerIdList,
      ownerNameList: GetPhysicalDatabaseResponseBodyDatabaseOwnerNameList,
      port: 'number',
      schemaName: 'string',
      searchName: 'string',
      sid: 'string',
      state: 'string',
    };
  }

  validate() {
    if(this.ownerIdList && typeof (this.ownerIdList as any).validate === 'function') {
      (this.ownerIdList as any).validate();
    }
    if(this.ownerNameList && typeof (this.ownerNameList as any).validate === 'function') {
      (this.ownerNameList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetProxyAccessResponseBodyProxyAccess extends $dara.Model {
  /**
   * @remarks
   * The username of the database account that is authorized to enable the secure access proxy feature for an instance.
   * 
   * @example
   * hObpgEXoca42q***
   */
  accessId?: string;
  /**
   * @remarks
   * The time when the user is authorized to enable the secure access proxy feature for an instance.
   * 
   * @example
   * 1643034647
   */
  gmtCreate?: string;
  /**
   * @remarks
   * The username of the independent database account.
   * 
   * @example
   * ***
   */
  indepAccount?: string;
  /**
   * @remarks
   * The ID of the instance for which the secure access proxy feature is enabled.
   * 
   * @example
   * 1922545
   */
  instanceId?: number;
  /**
   * @remarks
   * The method that is used to authorize the user to enable the secure access proxy feature for an instance. Valid values:
   * 
   * *   **Authorization by the Alibaba Cloud Account ()**: The information in the parentheses () indicates the ID of the Alibaba Cloud account.
   * *   **Authorization by submitting the ticket ()**:The information in the parentheses () indicates the number of the ticket that the user submits to apply for permissions.
   * 
   * @example
   * Authorization by the Alibaba Cloud account (29490401597700\\*\\*\\*\\*)
   */
  originInfo?: string;
  /**
   * @remarks
   * The ID that DMS generates after the user is authorized to enable the secure access proxy feature for an instance. The ID is unique in DMS. You can call the [ListProxyAccesses](https://help.aliyun.com/document_detail/295386.html) operation to query the ID.
   * 
   * @example
   * 2002
   */
  proxyAccessId?: number;
  /**
   * @remarks
   * The ID of the secure access proxy.
   * 
   * >  You can call the [ListProxies](https://help.aliyun.com/document_detail/295371.html) operation to query the ID of the secure access proxy.
   * 
   * @example
   * 1905
   */
  proxyId?: number;
  /**
   * @remarks
   * The ID of the user.
   * 
   * @example
   * 12***
   */
  userId?: number;
  /**
   * @remarks
   * The nickname of the user.
   * 
   * @example
   * user
   */
  userName?: string;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account.
   * 
   * @example
   * 25936669186260****
   */
  userUid?: string;
  static names(): { [key: string]: string } {
    return {
      accessId: 'AccessId',
      gmtCreate: 'GmtCreate',
      indepAccount: 'IndepAccount',
      instanceId: 'InstanceId',
      originInfo: 'OriginInfo',
      proxyAccessId: 'ProxyAccessId',
      proxyId: 'ProxyId',
      userId: 'UserId',
      userName: 'UserName',
      userUid: 'UserUid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessId: 'string',
      gmtCreate: 'string',
      indepAccount: 'string',
      instanceId: 'number',
      originInfo: 'string',
      proxyAccessId: 'number',
      proxyId: 'number',
      userId: 'number',
      userName: 'string',
      userUid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSQLReviewCheckResultStatusResponseBodyCheckResultStatusCheckStatusResult extends $dara.Model {
  /**
   * @remarks
   * The number of SQL statements that failed to pass the review.
   * 
   * @example
   * 1
   */
  checkNotPass?: number;
  /**
   * @remarks
   * The number of SQL statements that passed the review.
   * 
   * @example
   * 8
   */
  checkPass?: number;
  /**
   * @remarks
   * The number of SQL statements that failed to pass the manual review.
   * 
   * @example
   * 0
   */
  forceNotPass?: number;
  /**
   * @remarks
   * The number of SQL statements that passed the manual review.
   * 
   * @example
   * 1
   */
  forcePass?: number;
  /**
   * @remarks
   * The number of SQL statements to be reviewed.
   * 
   * @example
   * 0
   */
  new?: number;
  /**
   * @remarks
   * The number of abnormal SQL statements.
   * 
   * @example
   * 0
   */
  unknown?: number;
  static names(): { [key: string]: string } {
    return {
      checkNotPass: 'CheckNotPass',
      checkPass: 'CheckPass',
      forceNotPass: 'ForceNotPass',
      forcePass: 'ForcePass',
      new: 'New',
      unknown: 'Unknown',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkNotPass: 'number',
      checkPass: 'number',
      forceNotPass: 'number',
      forcePass: 'number',
      new: 'number',
      unknown: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSQLReviewCheckResultStatusResponseBodyCheckResultStatusSQLReviewResult extends $dara.Model {
  /**
   * @remarks
   * The number of SQL statements that must be modified.
   * 
   * @example
   * 1
   */
  mustImprove?: number;
  /**
   * @remarks
   * The number of SQL statements that have potential issues.
   * 
   * @example
   * 0
   */
  potentialIssue?: number;
  /**
   * @remarks
   * The number of SQL statements that can be modified.
   * 
   * @example
   * 3
   */
  suggestImprove?: number;
  /**
   * @remarks
   * The number of SQL statements that can use indexes.
   * 
   * @example
   * 2
   */
  tableIndexSuggest?: number;
  /**
   * @remarks
   * The number of SQL statements that can be used for lock-free data changes.
   * 
   * @example
   * 0
   */
  useDmsDmlUnlock?: number;
  /**
   * @remarks
   * The number of SQL statements that can be used for lock-free schema changes.
   * 
   * @example
   * 0
   */
  useDmsToolkit?: number;
  static names(): { [key: string]: string } {
    return {
      mustImprove: 'MustImprove',
      potentialIssue: 'PotentialIssue',
      suggestImprove: 'SuggestImprove',
      tableIndexSuggest: 'TableIndexSuggest',
      useDmsDmlUnlock: 'UseDmsDmlUnlock',
      useDmsToolkit: 'UseDmsToolkit',
    };
  }

  static types(): { [key: string]: any } {
    return {
      mustImprove: 'number',
      potentialIssue: 'number',
      suggestImprove: 'number',
      tableIndexSuggest: 'number',
      useDmsDmlUnlock: 'number',
      useDmsToolkit: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSQLReviewCheckResultStatusResponseBodyCheckResultStatus extends $dara.Model {
  /**
   * @remarks
   * The result of the SQL status check.
   */
  checkStatusResult?: GetSQLReviewCheckResultStatusResponseBodyCheckResultStatusCheckStatusResult;
  /**
   * @remarks
   * The number of SQL statements that were reviewed.
   * 
   * @example
   * 10
   */
  checkedCount?: number;
  /**
   * @remarks
   * The optimization suggestion for SQL statements.
   */
  SQLReviewResult?: GetSQLReviewCheckResultStatusResponseBodyCheckResultStatusSQLReviewResult;
  /**
   * @remarks
   * The total number of SQL statements.
   * 
   * @example
   * 10
   */
  totalSQLCount?: number;
  static names(): { [key: string]: string } {
    return {
      checkStatusResult: 'CheckStatusResult',
      checkedCount: 'CheckedCount',
      SQLReviewResult: 'SQLReviewResult',
      totalSQLCount: 'TotalSQLCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkStatusResult: GetSQLReviewCheckResultStatusResponseBodyCheckResultStatusCheckStatusResult,
      checkedCount: 'number',
      SQLReviewResult: GetSQLReviewCheckResultStatusResponseBodyCheckResultStatusSQLReviewResult,
      totalSQLCount: 'number',
    };
  }

  validate() {
    if(this.checkStatusResult && typeof (this.checkStatusResult as any).validate === 'function') {
      (this.checkStatusResult as any).validate();
    }
    if(this.SQLReviewResult && typeof (this.SQLReviewResult as any).validate === 'function') {
      (this.SQLReviewResult as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSQLReviewOptimizeDetailResponseBodyOptimizeDetailQualityResultResultsScripts extends $dara.Model {
  /**
   * @remarks
   * The content of the SQL script.
   * 
   * @example
   * alter table xxx add index idx_xx(yyy);
   */
  content?: string;
  /**
   * @remarks
   * The purpose of the SQL script. The value is set to AddIndex.
   * 
   * @example
   * AddIndex
   */
  opType?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * xxx
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'Content',
      opType: 'OpType',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      opType: 'string',
      tableName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSQLReviewOptimizeDetailResponseBodyOptimizeDetailQualityResultResults extends $dara.Model {
  /**
   * @remarks
   * The comment that is specified when you create the SQL review rule. For more information, see [SQL review optimization](https://help.aliyun.com/document_detail/194114.html).
   * 
   * @example
   * xxx business rule: the query must have a where condition.
   */
  comments?: string;
  /**
   * @remarks
   * The optimization suggestion for the SQL statement. Valid values:
   * 
   * *   **MUST_IMPROVE**: The SQL statement must be improved.
   * *   **POTENTIAL_ISSUE**: The SQL statement contains potential issues.
   * *   **SUGGEST_IMPROVE**: We recommend that you improve the SQL statement.
   * *   **USEDMSTOOLKIT**: We recommend that you change schemas without locking tables.
   * *   **USEDMSDML_UNLOCK**: We recommend that you change data without locking tables.
   * *   **TABLEINDEXSUGGEST**: We recommend that you use SQL statements that use indexes.
   * 
   * @example
   * MUST_IMPROVE
   */
  feedback?: string;
  /**
   * @remarks
   * The review results.
   */
  messages?: string[];
  /**
   * @remarks
   * The name of the rule. For more information, see [SQL review optimization](https://help.aliyun.com/document_detail/194114.html).
   * 
   * @example
   * SELECT_SUGGEST_ASSIGN_WHERE
   */
  ruleName?: string;
  /**
   * @remarks
   * The type of the SQL review rule. Valid values:
   * 
   * *   **REVIEW**: a rule that is used to review SQL statements based on standards.
   * *   **OPTIMIZE**: a rule that is used to provide optimization suggestions.
   * 
   * @example
   * REVIEW
   */
  ruleType?: string;
  /**
   * @remarks
   * The SQL script for data changes.
   */
  scripts?: GetSQLReviewOptimizeDetailResponseBodyOptimizeDetailQualityResultResultsScripts[];
  static names(): { [key: string]: string } {
    return {
      comments: 'Comments',
      feedback: 'Feedback',
      messages: 'Messages',
      ruleName: 'RuleName',
      ruleType: 'RuleType',
      scripts: 'Scripts',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comments: 'string',
      feedback: 'string',
      messages: { 'type': 'array', 'itemType': 'string' },
      ruleName: 'string',
      ruleType: 'string',
      scripts: { 'type': 'array', 'itemType': GetSQLReviewOptimizeDetailResponseBodyOptimizeDetailQualityResultResultsScripts },
    };
  }

  validate() {
    if(Array.isArray(this.messages)) {
      $dara.Model.validateArray(this.messages);
    }
    if(Array.isArray(this.scripts)) {
      $dara.Model.validateArray(this.scripts);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSQLReviewOptimizeDetailResponseBodyOptimizeDetailQualityResult extends $dara.Model {
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * syntax error
   */
  errorMessage?: string;
  /**
   * @remarks
   * Indicates whether an error occurs. Valid values:
   * 
   * *   **true**: An error occurs.
   * *   **false**: No error occurs.
   * 
   * @example
   * false
   */
  occurError?: boolean;
  /**
   * @remarks
   * The review results based on rules.
   */
  results?: GetSQLReviewOptimizeDetailResponseBodyOptimizeDetailQualityResultResults[];
  static names(): { [key: string]: string } {
    return {
      errorMessage: 'ErrorMessage',
      occurError: 'OccurError',
      results: 'Results',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorMessage: 'string',
      occurError: 'boolean',
      results: { 'type': 'array', 'itemType': GetSQLReviewOptimizeDetailResponseBodyOptimizeDetailQualityResultResults },
    };
  }

  validate() {
    if(Array.isArray(this.results)) {
      $dara.Model.validateArray(this.results);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSQLReviewOptimizeDetailResponseBodyOptimizeDetail extends $dara.Model {
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 111222
   */
  dbId?: number;
  /**
   * @remarks
   * The ID of the instance to which the database belongs.
   * 
   * @example
   * 123321
   */
  instanceId?: number;
  /**
   * @remarks
   * The quality of the SQL statement.
   */
  qualityResult?: GetSQLReviewOptimizeDetailResponseBodyOptimizeDetailQualityResult;
  /**
   * @remarks
   * The key that is used to query the details of optimization suggestions.
   * 
   * @example
   * a57e54ec5433475ea3082d882fdb****
   */
  queryKey?: string;
  /**
   * @remarks
   * The type of the SQL statement. Valid values: DELETE, UPDATE, and ALTER_TABLE.
   * 
   * @example
   * UPDATE
   */
  sqlType?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      instanceId: 'InstanceId',
      qualityResult: 'QualityResult',
      queryKey: 'QueryKey',
      sqlType: 'SqlType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      instanceId: 'number',
      qualityResult: GetSQLReviewOptimizeDetailResponseBodyOptimizeDetailQualityResult,
      queryKey: 'string',
      sqlType: 'string',
    };
  }

  validate() {
    if(this.qualityResult && typeof (this.qualityResult as any).validate === 'function') {
      (this.qualityResult as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStandardGroupResponseBodyStandardGroup extends $dara.Model {
  /**
   * @example
   * mysql
   */
  dbType?: string;
  description?: string;
  /**
   * @example
   * 41****
   */
  groupId?: number;
  /**
   * @example
   * COMMON
   */
  groupMode?: string;
  /**
   * @example
   * poc_test
   */
  groupName?: string;
  /**
   * @example
   * 51****
   */
  lastMenderId?: number;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      description: 'Description',
      groupId: 'GroupId',
      groupMode: 'GroupMode',
      groupName: 'GroupName',
      lastMenderId: 'LastMenderId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      description: 'string',
      groupId: 'number',
      groupMode: 'string',
      groupName: 'string',
      lastMenderId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncExecSqlDetailResponseBodyStructSyncExecSqlDetail extends $dara.Model {
  /**
   * @remarks
   * The SQL statements that are executed.
   */
  execSql?: string;
  /**
   * @remarks
   * The total number of SQL statements.
   * 
   * @example
   * 1
   */
  totalSqlCount?: number;
  static names(): { [key: string]: string } {
    return {
      execSql: 'ExecSql',
      totalSqlCount: 'TotalSqlCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      execSql: 'string',
      totalSqlCount: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncJobAnalyzeResultResponseBodyStructSyncJobAnalyzeResultResultList extends $dara.Model {
  /**
   * @remarks
   * The SQL script.
   */
  script?: string;
  /**
   * @remarks
   * The name of the source table.
   * 
   * @example
   * helloz_bak
   */
  sourceTableName?: string;
  /**
   * @remarks
   * The name of the destination table.
   * 
   * @example
   * helloz_bak
   */
  targetTableName?: string;
  static names(): { [key: string]: string } {
    return {
      script: 'Script',
      sourceTableName: 'SourceTableName',
      targetTableName: 'TargetTableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      script: 'string',
      sourceTableName: 'string',
      targetTableName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncJobAnalyzeResultResponseBodyStructSyncJobAnalyzeResultSummaryList extends $dara.Model {
  /**
   * @remarks
   * The type of the comparison. Valid values:
   * 
   * *   **CREATE_TABLE**: compares the created tables.
   * *   **ALTER_TABLE**: compares the modified tables.
   * *   **EQUAL_TABLE**: compares the identical tables.
   * *   **PASS_TABLE**: compares the tables that are skipped during schema synchronization.
   * *   **NOT_COMPARE**: does not compare tables.
   * 
   * @example
   * CREATE_TABLE
   */
  compareType?: string;
  /**
   * @remarks
   * The number of tables.
   * 
   * @example
   * 1
   */
  count?: number;
  static names(): { [key: string]: string } {
    return {
      compareType: 'CompareType',
      count: 'Count',
    };
  }

  static types(): { [key: string]: any } {
    return {
      compareType: 'string',
      count: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncJobAnalyzeResultResponseBodyStructSyncJobAnalyzeResult extends $dara.Model {
  /**
   * @remarks
   * The details of the analysis results.
   */
  resultList?: GetStructSyncJobAnalyzeResultResponseBodyStructSyncJobAnalyzeResultResultList[];
  /**
   * @remarks
   * The statistics on the analysis results.
   */
  summaryList?: GetStructSyncJobAnalyzeResultResponseBodyStructSyncJobAnalyzeResultSummaryList[];
  static names(): { [key: string]: string } {
    return {
      resultList: 'ResultList',
      summaryList: 'SummaryList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      resultList: { 'type': 'array', 'itemType': GetStructSyncJobAnalyzeResultResponseBodyStructSyncJobAnalyzeResultResultList },
      summaryList: { 'type': 'array', 'itemType': GetStructSyncJobAnalyzeResultResponseBodyStructSyncJobAnalyzeResultSummaryList },
    };
  }

  validate() {
    if(Array.isArray(this.resultList)) {
      $dara.Model.validateArray(this.resultList);
    }
    if(Array.isArray(this.summaryList)) {
      $dara.Model.validateArray(this.summaryList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncJobDetailResponseBodyStructSyncJobDetail extends $dara.Model {
  /**
   * @remarks
   * The ID of the SQL task group.
   * 
   * @example
   * 12345
   */
  DBTaskGroupId?: number;
  /**
   * @remarks
   * The number of SQL statements that have been executed.
   * 
   * @example
   * 1
   */
  executeCount?: number;
  /**
   * @remarks
   * The status of the task. Valid values:
   * 
   * *   **NEW**: The task was created.
   * *   **COMPARING**: The schemas of tables were being compared.
   * *   **COMPARE_BREAK**: The schema comparison was interrupted.
   * *   **COMPARE_FINISH**: The comparison was finished.
   * *   **NOT_SCRIPTS**: The comparison was finished but no executable script was available.
   * *   **SUBMITED_DBTASK**: The task was submitted.
   * *   **DBTASK_SUCCESS**: The task was complete.
   * *   **SUBMITED_WORKFLOW**: The ticket was submitted.
   * *   **WORKFLOW_SUCCESS**: The ticket was approved.
   * 
   * @example
   * DBTASK_SUCCESS
   */
  jobStatus?: string;
  /**
   * @remarks
   * The description of the task.
   * 
   * @example
   * test
   */
  message?: string;
  /**
   * @remarks
   * The type of security rule. Valid values:
   * 
   * *   **CANNOT_SYNC**: Synchronization cannot be performed.
   * *   **WITH_APPROVE**: The schema synchronization can be performed after the ticket is approved. You can call the [SubmitStructSyncOrderApproval](https://help.aliyun.com/document_detail/206166.html) operation to submit the ticket for approval.
   * *   **WITHOUT_APPROVE**: The schema synchronization can be performed without approval.
   * 
   * @example
   * WITHOUT_APPROVE
   */
  securityRule?: string;
  /**
   * @remarks
   * The total number of SQL statements.
   * 
   * @example
   * 1
   */
  sqlCount?: number;
  /**
   * @remarks
   * The number of tables that have been analyzed.
   * 
   * @example
   * 2
   */
  tableAnalyzed?: number;
  /**
   * @remarks
   * The total number of tables.
   * 
   * @example
   * 2
   */
  tableCount?: number;
  static names(): { [key: string]: string } {
    return {
      DBTaskGroupId: 'DBTaskGroupId',
      executeCount: 'ExecuteCount',
      jobStatus: 'JobStatus',
      message: 'Message',
      securityRule: 'SecurityRule',
      sqlCount: 'SqlCount',
      tableAnalyzed: 'TableAnalyzed',
      tableCount: 'TableCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      DBTaskGroupId: 'number',
      executeCount: 'number',
      jobStatus: 'string',
      message: 'string',
      securityRule: 'string',
      sqlCount: 'number',
      tableAnalyzed: 'number',
      tableCount: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailSourceDatabaseInfo extends $dara.Model {
  /**
   * @remarks
   * The ID of the source database.
   * 
   * @example
   * 432532
   */
  dbId?: number;
  /**
   * @remarks
   * The type of the database engine.
   * 
   * @example
   * MySQL
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment to which the database instance belongs. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).
   * 
   * @example
   * dev
   */
  envType?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is not a logical database
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * @example
   * test
   */
  searchName?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      dbType: 'DbType',
      envType: 'EnvType',
      logic: 'Logic',
      searchName: 'SearchName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      dbType: 'string',
      envType: 'string',
      logic: 'boolean',
      searchName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailSourceVersionInfo extends $dara.Model {
  /**
   * @remarks
   * The version number.
   * 
   * @example
   * e179bbb8163dcdcfacda24858bedb4d8006ae2b8
   */
  versionId?: string;
  static names(): { [key: string]: string } {
    return {
      versionId: 'VersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      versionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailTableInfoList extends $dara.Model {
  /**
   * @remarks
   * The name of the table whose schema you want to synchronize.
   * 
   * @example
   * test_tbl
   */
  sourceTableName?: string;
  /**
   * @remarks
   * The name of the table to which you want to synchronize the schema of a table.
   * 
   * @example
   * test_tbl
   */
  targetTableName?: string;
  static names(): { [key: string]: string } {
    return {
      sourceTableName: 'SourceTableName',
      targetTableName: 'TargetTableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      sourceTableName: 'string',
      targetTableName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailTargetDatabaseInfo extends $dara.Model {
  /**
   * @remarks
   * The ID of the destination database.
   * 
   * @example
   * 432543
   */
  dbId?: number;
  /**
   * @remarks
   * The type of the database engine.
   * 
   * @example
   * MySQL
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment to which the database instance belongs. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).
   * 
   * @example
   * dev
   */
  envType?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is not a logical database
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * @example
   * test
   */
  searchName?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      dbType: 'DbType',
      envType: 'EnvType',
      logic: 'Logic',
      searchName: 'SearchName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      dbType: 'string',
      envType: 'string',
      logic: 'boolean',
      searchName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailTargetVersionInfo extends $dara.Model {
  /**
   * @remarks
   * The version number.
   * 
   * @example
   * e179bbb8163dcdcfacda24858bedb4d8006ae2b8
   */
  versionId?: string;
  static names(): { [key: string]: string } {
    return {
      versionId: 'VersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      versionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncOrderDetailResponseBodyStructSyncOrderDetail extends $dara.Model {
  /**
   * @remarks
   * Indicates whether to skip errors. Valid values:
   * 
   * *   **true**: skips the error and continues to execute SQL statements.
   * *   **false**: stops executing SQL statements.
   * 
   * @example
   * false
   */
  ignoreError?: boolean;
  /**
   * @remarks
   * The information about the source database.
   */
  sourceDatabaseInfo?: GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailSourceDatabaseInfo;
  /**
   * @remarks
   * The schema version of the source database. Valid values:
   * 
   * *   **DATASOURCE**: the default latest version of the system
   * *   **VERSION**: a previous schema version that you manually specify
   * 
   * @example
   * VERSION
   */
  sourceType?: string;
  /**
   * @remarks
   * The version information about the source instance.
   * 
   * > This parameter is displayed only when the value of the **SourceType** parameter is **VERSION**.
   */
  sourceVersionInfo?: GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailSourceVersionInfo;
  /**
   * @remarks
   * The information about the table whose schema you want to synchronize.
   */
  tableInfoList?: GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailTableInfoList[];
  /**
   * @remarks
   * The information about the destination database.
   */
  targetDatabaseInfo?: GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailTargetDatabaseInfo;
  /**
   * @remarks
   * The schema version of the destination database. Valid values:
   * 
   * *   **DATASOURCE**: the default latest version of the system
   * *   **VERSION**: a previous schema version that you manually specify
   * 
   * @example
   * DATASOURCE
   */
  targetType?: string;
  /**
   * @remarks
   * The version information about the destination instance.
   * 
   * > This parameter is displayed only when the value of the **SourceType** parameter is **VERSION**.
   */
  targetVersionInfo?: GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailTargetVersionInfo;
  static names(): { [key: string]: string } {
    return {
      ignoreError: 'IgnoreError',
      sourceDatabaseInfo: 'SourceDatabaseInfo',
      sourceType: 'SourceType',
      sourceVersionInfo: 'SourceVersionInfo',
      tableInfoList: 'TableInfoList',
      targetDatabaseInfo: 'TargetDatabaseInfo',
      targetType: 'TargetType',
      targetVersionInfo: 'TargetVersionInfo',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ignoreError: 'boolean',
      sourceDatabaseInfo: GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailSourceDatabaseInfo,
      sourceType: 'string',
      sourceVersionInfo: GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailSourceVersionInfo,
      tableInfoList: { 'type': 'array', 'itemType': GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailTableInfoList },
      targetDatabaseInfo: GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailTargetDatabaseInfo,
      targetType: 'string',
      targetVersionInfo: GetStructSyncOrderDetailResponseBodyStructSyncOrderDetailTargetVersionInfo,
    };
  }

  validate() {
    if(this.sourceDatabaseInfo && typeof (this.sourceDatabaseInfo as any).validate === 'function') {
      (this.sourceDatabaseInfo as any).validate();
    }
    if(this.sourceVersionInfo && typeof (this.sourceVersionInfo as any).validate === 'function') {
      (this.sourceVersionInfo as any).validate();
    }
    if(Array.isArray(this.tableInfoList)) {
      $dara.Model.validateArray(this.tableInfoList);
    }
    if(this.targetDatabaseInfo && typeof (this.targetDatabaseInfo as any).validate === 'function') {
      (this.targetDatabaseInfo as any).validate();
    }
    if(this.targetVersionInfo && typeof (this.targetVersionInfo as any).validate === 'function') {
      (this.targetVersionInfo as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDBTopologyResponseBodyDBTopologyDataSourceListDatabaseListTableList extends $dara.Model {
  /**
   * @remarks
   * The ID of the table.
   * 
   * @example
   * NORMAL
   */
  tableId?: string;
  /**
   * @remarks
   * The name of the physical table.
   * 
   * @example
   * 151977812
   */
  tableName?: string;
  /**
   * @remarks
   * The type of the table. This is a reserved parameter.
   * 
   * @example
   * yuyang_test_0000
   */
  tableType?: string;
  static names(): { [key: string]: string } {
    return {
      tableId: 'TableId',
      tableName: 'TableName',
      tableType: 'TableType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tableId: 'string',
      tableName: 'string',
      tableType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDBTopologyResponseBodyDBTopologyDataSourceListDatabaseList extends $dara.Model {
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 489347
   */
  dbId?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * db-test
   */
  dbName?: string;
  /**
   * @remarks
   * The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * @example
   * MySQL
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment to which the database belongs. Valid values:
   * 
   * *   **product**: production environment
   * *   **dev**: development environment
   * *   **pre**: pre-release environment
   * *   **test**: test environment
   * *   **sit**: system integration testing (SIT) environment
   * *   **uat**: user acceptance testing (UAT) environment
   * *   **pet**: stress testing environment
   * *   **stag**: staging environment
   * 
   * > For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).
   * 
   * @example
   * pre
   */
  envType?: string;
  /**
   * @remarks
   * The physical tables.
   */
  tableList?: GetTableDBTopologyResponseBodyDBTopologyDataSourceListDatabaseListTableList[];
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      dbName: 'DbName',
      dbType: 'DbType',
      envType: 'EnvType',
      tableList: 'TableList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'string',
      dbName: 'string',
      dbType: 'string',
      envType: 'string',
      tableList: { 'type': 'array', 'itemType': GetTableDBTopologyResponseBodyDBTopologyDataSourceListDatabaseListTableList },
    };
  }

  validate() {
    if(Array.isArray(this.tableList)) {
      $dara.Model.validateArray(this.tableList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDBTopologyResponseBodyDBTopologyDataSourceList extends $dara.Model {
  /**
   * @remarks
   * The physical databases.
   */
  databaseList?: GetTableDBTopologyResponseBodyDBTopologyDataSourceListDatabaseList[];
  /**
   * @remarks
   * The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * @example
   * MySQL
   */
  dbType?: string;
  /**
   * @remarks
   * The endpoint of the data source.
   * 
   * @example
   * xxx.mysql.polardb.rds.aliyuncs.com
   */
  host?: string;
  /**
   * @remarks
   * The port that is used to connect to the data source.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The system ID (SID) of the data source.
   * 
   * @example
   * def
   */
  sid?: string;
  static names(): { [key: string]: string } {
    return {
      databaseList: 'DatabaseList',
      dbType: 'DbType',
      host: 'Host',
      port: 'Port',
      sid: 'Sid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databaseList: { 'type': 'array', 'itemType': GetTableDBTopologyResponseBodyDBTopologyDataSourceListDatabaseList },
      dbType: 'string',
      host: 'string',
      port: 'number',
      sid: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.databaseList)) {
      $dara.Model.validateArray(this.databaseList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDBTopologyResponseBodyDBTopology extends $dara.Model {
  /**
   * @remarks
   * The data sources.
   */
  dataSourceList?: GetTableDBTopologyResponseBodyDBTopologyDataSourceList[];
  /**
   * @remarks
   * The GUID of the table in DMS.
   * 
   * @example
   * IDB_L_9032.db-test.yuyang_test
   */
  tableGuid?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * > 
   * 
   * *   If a logical table is queried, the name of the logical table is returned.
   * 
   * *   If a physical table is queried, the name of the physical table is returned.
   * 
   * @example
   * yuyang_test
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      dataSourceList: 'DataSourceList',
      tableGuid: 'TableGuid',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataSourceList: { 'type': 'array', 'itemType': GetTableDBTopologyResponseBodyDBTopologyDataSourceList },
      tableGuid: 'string',
      tableName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.dataSourceList)) {
      $dara.Model.validateArray(this.dataSourceList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDesignProjectFlowResponseBodyProjectFlowFlowNodeArray extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the ticket can be returned to the schema design node. Valid values:
   * 
   * *   **1**: The ticket can be returned to the schema design node.
   * *   **0**: The ticket cannot be returned to the schema design node. This value can be returned only for the PUBLISH node.
   * 
   * @example
   * 1
   */
  backToDesign?: boolean;
  /**
   * @remarks
   * Indicates whether the current node can be skipped. Valid values:
   * 
   * *   **1**: The current node can be skipped.
   * *   **0**: The current node cannot be skipped. This value can be returned only for the PUBLISH node.
   * 
   * @example
   * 0
   */
  canSkip?: boolean;
  /**
   * @remarks
   * The role of the node in the process.
   * 
   * *   START: The ticket was created.
   * *   DESIGN: The schema is being created.
   * *   PUBLISH: The schema is published.
   * *   END: The ticket is complete.
   * 
   * @example
   * DESIGN
   */
  nodeRole?: string;
  /**
   * @remarks
   * The title of the node.
   */
  nodeTitle?: string;
  /**
   * @remarks
   * The position of the node in the process. The value starts from 1.
   * 
   * @example
   * 1
   */
  position?: number;
  /**
   * @remarks
   * Indicates whether the node is the anchor node. A schema design process has only one anchor node, on which the schema is published. After the schema is published on the anchor node, a post-publish image is generated and the DDL metadata lock is released.
   * 
   * @example
   * false
   */
  publishAnchor?: boolean;
  /**
   * @remarks
   * The available publishing strategies.
   */
  publishStrategies?: string[];
  static names(): { [key: string]: string } {
    return {
      backToDesign: 'BackToDesign',
      canSkip: 'CanSkip',
      nodeRole: 'NodeRole',
      nodeTitle: 'NodeTitle',
      position: 'Position',
      publishAnchor: 'PublishAnchor',
      publishStrategies: 'PublishStrategies',
    };
  }

  static types(): { [key: string]: any } {
    return {
      backToDesign: 'boolean',
      canSkip: 'boolean',
      nodeRole: 'string',
      nodeTitle: 'string',
      position: 'number',
      publishAnchor: 'boolean',
      publishStrategies: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.publishStrategies)) {
      $dara.Model.validateArray(this.publishStrategies);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDesignProjectFlowResponseBodyProjectFlow extends $dara.Model {
  /**
   * @remarks
   * The position of the current node in the process.
   * 
   * @example
   * 2
   */
  currentPosition?: number;
  /**
   * @remarks
   * The nodes in the process.
   */
  flowNodeArray?: GetTableDesignProjectFlowResponseBodyProjectFlowFlowNodeArray[];
  /**
   * @remarks
   * The description of the security rule set that is applied to the schema design ticket.
   * 
   * @example
   * mysq_test
   */
  ruleComment?: string;
  /**
   * @remarks
   * The name of the security rule set that is applied to the schema design ticket.
   * 
   * @example
   * mysql default
   */
  ruleName?: string;
  static names(): { [key: string]: string } {
    return {
      currentPosition: 'CurrentPosition',
      flowNodeArray: 'FlowNodeArray',
      ruleComment: 'RuleComment',
      ruleName: 'RuleName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPosition: 'number',
      flowNodeArray: { 'type': 'array', 'itemType': GetTableDesignProjectFlowResponseBodyProjectFlowFlowNodeArray },
      ruleComment: 'string',
      ruleName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.flowNodeArray)) {
      $dara.Model.validateArray(this.flowNodeArray);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDesignProjectInfoResponseBodyProjectInfoBaseDatabase extends $dara.Model {
  /**
   * @remarks
   * The alias of the database instance.
   * 
   * @example
   * poc_test
   */
  alias?: string;
  /**
   * @remarks
   * The database ID.
   * 
   * @example
   * 11****
   */
  dbId?: number;
  /**
   * @remarks
   * The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * @example
   * POLARDB
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment in which the database instance is deployed. Valid values:
   * 
   * *   **product**: production environment.
   * *   **dev**: development environment.
   * *   **pre**: pre-release environment.
   * *   **test**: test environment.
   * *   **sit**: system integration testing (SIT) environment.
   * *   **uat**: user acceptance testing (UAT) environment.
   * *   **pet**: stress testing environment.
   * *   **stag**: staging environment.
   * 
   * @example
   * dev
   */
  envType?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The database name.
   * 
   * @example
   * bk_atc020
   */
  schemaName?: string;
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * @example
   * schema_name@127.0.XX.XX
   */
  searchName?: string;
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      dbId: 'DbId',
      dbType: 'DbType',
      envType: 'EnvType',
      logic: 'Logic',
      schemaName: 'SchemaName',
      searchName: 'SearchName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      dbId: 'number',
      dbType: 'string',
      envType: 'string',
      logic: 'boolean',
      schemaName: 'string',
      searchName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDesignProjectInfoResponseBodyProjectInfo extends $dara.Model {
  /**
   * @remarks
   * The information about the change base database of the schema design ticket.
   */
  baseDatabase?: GetTableDesignProjectInfoResponseBodyProjectInfoBaseDatabase;
  /**
   * @remarks
   * The ID of the user who created the ticket.
   * 
   * @example
   * 71****
   */
  creatorId?: number;
  /**
   * @remarks
   * The description of the schema design project.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The time when the ticket was created.
   * 
   * @example
   * 2024-04-23 02:57:01
   */
  gmtCreate?: string;
  /**
   * @remarks
   * The time when the ticket was last modified.
   * 
   * @example
   * 2024-04-23 02:57:01
   */
  gmtModified?: string;
  /**
   * @remarks
   * The ticket ID.
   * 
   * @example
   * 95****
   */
  orderId?: number;
  /**
   * @remarks
   * The project ID.
   * 
   * @example
   * 12****
   */
  projectId?: number;
  /**
   * @remarks
   * The state of the schema design project. Valid values:
   * 
   * *   **DESIGN**: The schema is being designed.
   * *   **PUBLISHED**: The schema is published.
   * *   **CLOSE**: The ticket is closed.
   * 
   * @example
   * DESIGN
   */
  status?: string;
  /**
   * @remarks
   * The name of the schema design project.
   * 
   * @example
   * test
   */
  title?: string;
  static names(): { [key: string]: string } {
    return {
      baseDatabase: 'BaseDatabase',
      creatorId: 'CreatorId',
      description: 'Description',
      gmtCreate: 'GmtCreate',
      gmtModified: 'GmtModified',
      orderId: 'OrderId',
      projectId: 'ProjectId',
      status: 'Status',
      title: 'Title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baseDatabase: GetTableDesignProjectInfoResponseBodyProjectInfoBaseDatabase,
      creatorId: 'number',
      description: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      orderId: 'number',
      projectId: 'number',
      status: 'string',
      title: 'string',
    };
  }

  validate() {
    if(this.baseDatabase && typeof (this.baseDatabase as any).validate === 'function') {
      (this.baseDatabase as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableTopologyResponseBodyTableTopologyTableTopologyInfoList extends $dara.Model {
  /**
   * @remarks
   * The ID of the physical database.
   * 
   * @example
   * 43215
   */
  dbId?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * yuyang_test
   */
  dbName?: string;
  /**
   * @remarks
   * The name that is used to search for the database.
   * > We recommend that you do not use this parameter for business development. The format of the parameter value may be modified in later versions.
   * 
   * @example
   * yuyang_test@localhost:3306
   * [yuyang_test_dev]
   */
  dbSearchName?: string;
  /**
   * @remarks
   * The database engine.
   * 
   * @example
   * mysql
   */
  dbType?: string;
  /**
   * @remarks
   * The ID of the instance to which the physical database belongs.
   * 
   * @example
   * 4325325
   */
  instanceId?: number;
  /**
   * @remarks
   * The ID of the resource related to the instance. The resource corresponds with the database instance type returned in the InstanceSource parameter.
   * 
   * *   **RDS**:The ID of the ApsaraDB RDS instance.
   * *   **ECS_OWN**: The ID of the Elastic Compute Service (ECS) instance.
   * *   **PUBLIC_OWN**: This parameter is left empty for self-managed database instances that are connected over the Internet.
   * *   **VPC_ID**:The ID of the virtual private cloud (VPC).
   * *   **GATEWAY**: The ID of the database gateway.
   * 
   * @example
   * rm-xxx
   */
  instanceResourceId?: string;
  /**
   * @remarks
   * The type of the database instance. Valid values:
   * 
   * *   **RDS**: an ApsaraDB RDS instance.
   * *   **ECS_OWN**: a self-managed database that is deployed on an ECS instance
   * *   **PUBLIC_OWN**: a self-managed database instance that is connected over the Internet.
   * *   **VPC_ID**: a self-managed database instance in a VPC that is connected over Express Connect circuits.
   * *   **GATEWAY**: a database instance connected by using a database gateway.
   * 
   * @example
   * RDS
   */
  instanceSource?: string;
  /**
   * @remarks
   * The region ID of the instance.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The number of tables.
   * 
   * @example
   * 6
   */
  tableCount?: number;
  /**
   * @remarks
   * The expression of the names of logical tables.
   * 
   * **
   * 
   * **Description** This parameter is not returned for physical tables.
   * 
   * @example
   * test_ch_[0000-0005]
   */
  tableNameExpr?: string;
  /**
   * @remarks
   * The names of tables.
   * 
   * > The table names are separated by commas (,).
   * 
   * @example
   * test_ch_0000,test_ch_0001,test_ch_0002,test_ch_0003,test_ch_0004,test_ch_0005
   */
  tableNameList?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      dbName: 'DbName',
      dbSearchName: 'DbSearchName',
      dbType: 'DbType',
      instanceId: 'InstanceId',
      instanceResourceId: 'InstanceResourceId',
      instanceSource: 'InstanceSource',
      regionId: 'RegionId',
      tableCount: 'TableCount',
      tableNameExpr: 'TableNameExpr',
      tableNameList: 'TableNameList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      dbName: 'string',
      dbSearchName: 'string',
      dbType: 'string',
      instanceId: 'number',
      instanceResourceId: 'string',
      instanceSource: 'string',
      regionId: 'string',
      tableCount: 'number',
      tableNameExpr: 'string',
      tableNameList: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableTopologyResponseBodyTableTopology extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the table is a logical table. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  logic?: boolean;
  /**
   * @remarks
   * The GUID of the table in DMS.
   * 
   * @example
   * IDB_L_308302.yuyang_test.test_ch
   */
  tableGuid?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * test_ch
   */
  tableName?: string;
  /**
   * @remarks
   * Information of the topology of the table.
   */
  tableTopologyInfoList?: GetTableTopologyResponseBodyTableTopologyTableTopologyInfoList[];
  static names(): { [key: string]: string } {
    return {
      logic: 'Logic',
      tableGuid: 'TableGuid',
      tableName: 'TableName',
      tableTopologyInfoList: 'TableTopologyInfoList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logic: 'boolean',
      tableGuid: 'string',
      tableName: 'string',
      tableTopologyInfoList: { 'type': 'array', 'itemType': GetTableTopologyResponseBodyTableTopologyTableTopologyInfoList },
    };
  }

  validate() {
    if(Array.isArray(this.tableTopologyInfoList)) {
      $dara.Model.validateArray(this.tableTopologyInfoList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskResponseBodyTask extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow to which the node belongs.
   * 
   * @example
   * 7321
   */
  dagId?: number;
  /**
   * @remarks
   * The position of the node on the Directed Acyclic Graph (DAG).
   * 
   * @example
   * {"{\\"x\\":0,\\"y\\":0,\\"layoutType\\":\\"Horizontal\\"}",  "id": 51***}
   */
  graphParam?: string;
  /**
   * @remarks
   * The advanced configuration for the node.
   */
  nodeConfig?: string;
  /**
   * @remarks
   * The configuration for the node.
   * 
   * @example
   * {\\"dbList\\":[{\\"instanceId\\":177****}"   }
   */
  nodeContent?: string;
  /**
   * @remarks
   * The name of the node.
   * 
   * @example
   * Cross-database Spark SQL-1
   */
  nodeName?: string;
  /**
   * @remarks
   * The output variables for the node. This parameter is available only for some types of nodes.
   * 
   * @example
   * { "outputs":[ "extractMethod":"json" , "variableName":"var",   "description":"demo desc" } ] }
   */
  nodeOutput?: string;
  /**
   * @remarks
   * The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](https://help.aliyun.com/document_detail/424705.html).
   * 
   * @example
   * SPARK_SQL
   */
  nodeType?: string;
  /**
   * @remarks
   * The time variables configured for the node.
   * 
   * @example
   * {\\"variables\\":[{\\"name\\":\\"Today\\",\\"pattern\\":\\"yyyy-MM-dd|+1d\\"}]}
   */
  timeVariables?: string;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      graphParam: 'GraphParam',
      nodeConfig: 'NodeConfig',
      nodeContent: 'NodeContent',
      nodeName: 'NodeName',
      nodeOutput: 'NodeOutput',
      nodeType: 'NodeType',
      timeVariables: 'TimeVariables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      graphParam: 'string',
      nodeConfig: 'string',
      nodeContent: 'string',
      nodeName: 'string',
      nodeOutput: 'string',
      nodeType: 'string',
      timeVariables: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskFlowGraphResponseBodyTaskFlowGraphEdgesEdge extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the task flow edge.
   * 
   * @example
   * 24***
   */
  id?: number;
  /**
   * @remarks
   * The ID of the end node on the edge.
   * 
   * @example
   * 44***
   */
  nodeEnd?: number;
  /**
   * @remarks
   * The ID of the start node on the edge.
   * 
   * @example
   * 44***
   */
  nodeFrom?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      id: 'Id',
      nodeEnd: 'NodeEnd',
      nodeFrom: 'NodeFrom',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      id: 'number',
      nodeEnd: 'number',
      nodeFrom: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskFlowGraphResponseBodyTaskFlowGraphEdges extends $dara.Model {
  edge?: GetTaskFlowGraphResponseBodyTaskFlowGraphEdgesEdge[];
  static names(): { [key: string]: string } {
    return {
      edge: 'Edge',
    };
  }

  static types(): { [key: string]: any } {
    return {
      edge: { 'type': 'array', 'itemType': GetTaskFlowGraphResponseBodyTaskFlowGraphEdgesEdge },
    };
  }

  validate() {
    if(Array.isArray(this.edge)) {
      $dara.Model.validateArray(this.edge);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskFlowGraphResponseBodyTaskFlowGraphNodesNode extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The position of the node in the DAG.
   * 
   * @example
   * {\\"x\\":541,\\"y\\":322,\\"layoutType\\":\\"Horizontal\\"}
   */
  graphParam?: string;
  /**
   * @remarks
   * The advanced configuration of the node.
   */
  nodeConfig?: string;
  /**
   * @remarks
   * The configuration of the node.
   * 
   * @example
   * {ODI3OTNRVC****UHVFT29"}
   */
  nodeContent?: string;
  /**
   * @remarks
   * The ID of the node.
   * 
   * @example
   * 44***
   */
  nodeId?: number;
  /**
   * @remarks
   * The name of the node.
   * 
   * @example
   * test
   */
  nodeName?: string;
  /**
   * @remarks
   * The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](https://help.aliyun.com/document_detail/424705.html).
   * 
   * @example
   * 36
   */
  nodeType?: number;
  /**
   * @remarks
   * The time variables for the node.
   * 
   * @example
   * {\\"variables\\":[{\\"name\\":\\"Today\\",\\"pattern\\":\\"yyyy-MM-dd|+1d\\"}]}
   */
  timeVariables?: string;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      graphParam: 'GraphParam',
      nodeConfig: 'NodeConfig',
      nodeContent: 'NodeContent',
      nodeId: 'NodeId',
      nodeName: 'NodeName',
      nodeType: 'NodeType',
      timeVariables: 'TimeVariables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      graphParam: 'string',
      nodeConfig: 'string',
      nodeContent: 'string',
      nodeId: 'number',
      nodeName: 'string',
      nodeType: 'number',
      timeVariables: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskFlowGraphResponseBodyTaskFlowGraphNodes extends $dara.Model {
  node?: GetTaskFlowGraphResponseBodyTaskFlowGraphNodesNode[];
  static names(): { [key: string]: string } {
    return {
      node: 'Node',
    };
  }

  static types(): { [key: string]: any } {
    return {
      node: { 'type': 'array', 'itemType': GetTaskFlowGraphResponseBodyTaskFlowGraphNodesNode },
    };
  }

  validate() {
    if(Array.isArray(this.node)) {
      $dara.Model.validateArray(this.node);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskFlowGraphResponseBodyTaskFlowGraph extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the task flow is editable. Valid values:
   * 
   * - **true**: editable
   * - **false**: non-editable
   * 
   * @example
   * true
   */
  canEdit?: boolean;
  /**
   * @remarks
   * The name of the task flow.
   * 
   * @example
   * test
   */
  dagName?: string;
  /**
   * @remarks
   * The list of task flow edges.
   */
  edges?: GetTaskFlowGraphResponseBodyTaskFlowGraphEdges;
  /**
   * @remarks
   * The node list of the task flow.
   */
  nodes?: GetTaskFlowGraphResponseBodyTaskFlowGraphNodes;
  /**
   * @remarks
   * The status of the task flow. Valid values:
   * 
   * - **0**: invalid
   * - **1**: not scheduled
   * - **2**: to be scheduled
   * 
   * @example
   * 2
   */
  status?: number;
  static names(): { [key: string]: string } {
    return {
      canEdit: 'CanEdit',
      dagName: 'DagName',
      edges: 'Edges',
      nodes: 'Nodes',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      canEdit: 'boolean',
      dagName: 'string',
      edges: GetTaskFlowGraphResponseBodyTaskFlowGraphEdges,
      nodes: GetTaskFlowGraphResponseBodyTaskFlowGraphNodes,
      status: 'number',
    };
  }

  validate() {
    if(this.edges && typeof (this.edges as any).validate === 'function') {
      (this.edges as any).validate();
    }
    if(this.nodes && typeof (this.nodes as any).validate === 'function') {
      (this.nodes as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskFlowNotificationResponseBodyNotification extends $dara.Model {
  /**
   * @remarks
   * Indicates whether notifications for failed task flows are enabled. Valid values:
   * 
   * *   **true**: enabled
   * *   **false**: disabled
   * 
   * @example
   * true
   */
  dagNotificationFail?: boolean;
  /**
   * @remarks
   * Indicates whether service level agreement (SLA) global notifications for task flows are enabled. Valid values:
   * 
   * *   **true**: enabled
   * *   **false**: disabled
   * 
   * @example
   * true
   */
  dagNotificationSla?: boolean;
  /**
   * @remarks
   * Indicates whether notifications for successful task flows are enabled. Valid values:
   * 
   * *   **true**: enabled
   * *   **false**: disabled
   * 
   * @example
   * true
   */
  dagNotificationSuccess?: boolean;
  static names(): { [key: string]: string } {
    return {
      dagNotificationFail: 'DagNotificationFail',
      dagNotificationSla: 'DagNotificationSla',
      dagNotificationSuccess: 'DagNotificationSuccess',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagNotificationFail: 'boolean',
      dagNotificationSla: 'boolean',
      dagNotificationSuccess: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskInstanceRelationResponseBodyNodeListNode extends $dara.Model {
  /**
   * @remarks
   * The business time of the node.
   * 
   * @example
   * 2021-11-09 14:37:26
   */
  businessTime?: string;
  /**
   * @remarks
   * The time when the execution of the task flow was complete. The time is displayed in the yyyy-MM-DD HH:mm:ss format.
   * 
   * @example
   * 2021-11-11 14:38:57
   */
  endTime?: string;
  /**
   * @remarks
   * The amount of time consumed for running the node. Unit: milliseconds.
   * 
   * @example
   * 170655
   */
  executeTime?: number;
  /**
   * @remarks
   * The ID of the execution record of the task flow.
   * 
   * @example
   * 14059
   */
  id?: number;
  /**
   * @remarks
   * The description of the task.
   * 
   * @example
   * test
   */
  message?: string;
  /**
   * @remarks
   * The ID of the node.
   * 
   * @example
   * 14059
   */
  nodeId?: number;
  /**
   * @remarks
   * The name of the node.
   * 
   * @example
   * Spark SQL-1
   */
  nodeName?: string;
  /**
   * @remarks
   * The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](https://help.aliyun.com/document_detail/424705.html).
   * 
   * @example
   * 36
   */
  nodeType?: number;
  /**
   * @remarks
   * The status of the node. Valid values:
   * 
   * *   **0**: The node is waiting to be scheduled.
   * *   **1**: The node is running.
   * *   **2**: The node is suspended.
   * *   **3**: The node failed to run.
   * *   **4**: The node is run.
   * *   **5**: The node is complete.
   * 
   * @example
   * 4
   */
  status?: number;
  static names(): { [key: string]: string } {
    return {
      businessTime: 'BusinessTime',
      endTime: 'EndTime',
      executeTime: 'ExecuteTime',
      id: 'Id',
      message: 'Message',
      nodeId: 'NodeId',
      nodeName: 'NodeName',
      nodeType: 'NodeType',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessTime: 'string',
      endTime: 'string',
      executeTime: 'number',
      id: 'number',
      message: 'string',
      nodeId: 'number',
      nodeName: 'string',
      nodeType: 'number',
      status: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskInstanceRelationResponseBodyNodeList extends $dara.Model {
  node?: GetTaskInstanceRelationResponseBodyNodeListNode[];
  static names(): { [key: string]: string } {
    return {
      node: 'Node',
    };
  }

  static types(): { [key: string]: any } {
    return {
      node: { 'type': 'array', 'itemType': GetTaskInstanceRelationResponseBodyNodeListNode },
    };
  }

  validate() {
    if(Array.isArray(this.node)) {
      $dara.Model.validateArray(this.node);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserResponseBodyUserRoleIdList extends $dara.Model {
  roleIds?: number[];
  static names(): { [key: string]: string } {
    return {
      roleIds: 'RoleIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roleIds: { 'type': 'array', 'itemType': 'number' },
    };
  }

  validate() {
    if(Array.isArray(this.roleIds)) {
      $dara.Model.validateArray(this.roleIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserResponseBodyUserRoleNameList extends $dara.Model {
  roleNames?: string[];
  static names(): { [key: string]: string } {
    return {
      roleNames: 'RoleNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roleNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.roleNames)) {
      $dara.Model.validateArray(this.roleNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserResponseBodyUser extends $dara.Model {
  /**
   * @remarks
   * The number of queries that are performed on the current day.
   * 
   * @example
   * 3
   */
  curExecuteCount?: number;
  /**
   * @remarks
   * The number of rows that are queried on the current day.
   * 
   * @example
   * 28
   */
  curResultCount?: number;
  /**
   * @remarks
   * The DingTalk chatbot URL that is used to receive notifications.
   * 
   * > 
   * 
   * *   The system returns this parameter if the user has set a DingTalk chatbot URL in the console. To set a DingTalk chatbot URL in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.
   * 
   * *   The system does not return this parameter if the user has not set a DingTalk chatbot URL.
   * 
   * @example
   * https://XXX.dingtalk.com/robot/send?access_token=***
   */
  dingRobot?: string;
  /**
   * @remarks
   * The email address that is used to receive notifications.
   * 
   * > 
   * 
   * *   The system returns this parameter if the user has set an email address in the console. To set an email address in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.
   * 
   * *   The system does not return this parameter if the user has not set an email address.
   * 
   * @example
   * Uesr_email
   */
  email?: string;
  /**
   * @remarks
   * The last point in time when the user logged on to the console.
   * 
   * @example
   * 2021-11-08 11:26:21
   */
  lastLoginTime?: string;
  /**
   * @remarks
   * The maximum number of queries that can be performed on the current day.
   * 
   * @example
   * 2000
   */
  maxExecuteCount?: number;
  /**
   * @remarks
   * The maximum number of rows that can be queried on the current day.
   * 
   * @example
   * 10000
   */
  maxResultCount?: number;
  /**
   * @remarks
   * The mobile number of the user.
   * 
   * > 
   * 
   * *   The system returns this parameter if the user has set a mobile phone number in the console. To set a mobile phone number in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.
   * 
   * *   The system does not return this parameter if the user has not set a mobile phone number.
   * 
   * @example
   * 1389223****
   */
  mobile?: string;
  /**
   * @remarks
   * The nickname of the user.
   * 
   * @example
   * User_NickName
   */
  nickName?: string;
  /**
   * @remarks
   * The notification method. The system returns one or more values. Valid values:
   * 
   * *   **SMS**: text message
   * *   **EMAIL**: email.
   * *   **DINGDING**: DingTalk.
   * *   **DINGROBOT**: DingTalk chatbot.
   * *   **WEBHOOK**: webhook.
   * 
   * @example
   * EMAIL
   */
  notificationMode?: string;
  /**
   * @remarks
   * The UID of the Alibaba Cloud account of the user.
   * 
   * > An Alibaba Cloud account can contain one or more RAM users.
   * 
   * @example
   * 140692647406****
   */
  parentUid?: number;
  /**
   * @remarks
   * The list of role IDs.
   */
  roleIdList?: GetUserResponseBodyUserRoleIdList;
  /**
   * @remarks
   * The list of role names.
   */
  roleNameList?: GetUserResponseBodyUserRoleNameList;
  /**
   * @remarks
   * The signature method that is used to secure connections when a webhook URL is used. Valid values:
   * 
   * *   **NONE**: no signature.
   * *   **HMAC_SHA1**: HMAC_SHA1.
   * 
   * @example
   * NONE
   */
  signatureMethod?: string;
  /**
   * @remarks
   * The status of the user. Valid values:
   * 
   * *   **NORMAL**: The user is normal.
   * *   **DISABLE**: The user is disabled.
   * *   **DELETE**: The user is deleted.
   * 
   * @example
   * NORMAL
   */
  state?: string;
  /**
   * @remarks
   * The UID of the user.
   * 
   * @example
   * 22275482072787****
   */
  uid?: string;
  /**
   * @remarks
   * The ID of the user.
   * 
   * @example
   * 51****
   */
  userId?: string;
  /**
   * @remarks
   * The webhook URL that is used to receive notifications.
   * 
   * > 
   * 
   * *   If the user has set a webhook URL, DMS sends notifications to the specified URL.
   * 
   * *   The system does not return this parameter if the user has not set a webhook URL.
   * 
   * @example
   * http://dms-XXX.aliyun.com:8***
   */
  webhook?: string;
  static names(): { [key: string]: string } {
    return {
      curExecuteCount: 'CurExecuteCount',
      curResultCount: 'CurResultCount',
      dingRobot: 'DingRobot',
      email: 'Email',
      lastLoginTime: 'LastLoginTime',
      maxExecuteCount: 'MaxExecuteCount',
      maxResultCount: 'MaxResultCount',
      mobile: 'Mobile',
      nickName: 'NickName',
      notificationMode: 'NotificationMode',
      parentUid: 'ParentUid',
      roleIdList: 'RoleIdList',
      roleNameList: 'RoleNameList',
      signatureMethod: 'SignatureMethod',
      state: 'State',
      uid: 'Uid',
      userId: 'UserId',
      webhook: 'Webhook',
    };
  }

  static types(): { [key: string]: any } {
    return {
      curExecuteCount: 'number',
      curResultCount: 'number',
      dingRobot: 'string',
      email: 'string',
      lastLoginTime: 'string',
      maxExecuteCount: 'number',
      maxResultCount: 'number',
      mobile: 'string',
      nickName: 'string',
      notificationMode: 'string',
      parentUid: 'number',
      roleIdList: GetUserResponseBodyUserRoleIdList,
      roleNameList: GetUserResponseBodyUserRoleNameList,
      signatureMethod: 'string',
      state: 'string',
      uid: 'string',
      userId: 'string',
      webhook: 'string',
    };
  }

  validate() {
    if(this.roleIdList && typeof (this.roleIdList as any).validate === 'function') {
      (this.roleIdList as any).validate();
    }
    if(this.roleNameList && typeof (this.roleNameList as any).validate === 'function') {
      (this.roleNameList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserActiveTenantResponseBodyTenant extends $dara.Model {
  /**
   * @remarks
   * The status of the tenant. Valid values:
   * 
   * *   **ACTIVE**: The tenant is used to access DMS.
   * *   **IN_ACTIVE**: The tenant is not used.
   * 
   * @example
   * ACTIVE
   */
  status?: string;
  /**
   * @remarks
   * The name of the tenant.
   * 
   * @example
   * test_name
   */
  tenantName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      status: 'Status',
      tenantName: 'TenantName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      status: 'string',
      tenantName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserUploadFileJobResponseBodyUploadFileJobDetailUploadOSSParam extends $dara.Model {
  /**
   * @remarks
   * The name of the OSS bucket.
   * 
   * @example
   * test_bucket
   */
  bucketName?: string;
  /**
   * @remarks
   * The endpoint of the OSS bucket.
   * 
   * @example
   * http://oss-cn-hangzhou.aliyuncs.com
   */
  endpoint?: string;
  /**
   * @remarks
   * The name of the OSS object.
   * 
   * @example
   * test.sql
   */
  objectName?: string;
  static names(): { [key: string]: string } {
    return {
      bucketName: 'BucketName',
      endpoint: 'Endpoint',
      objectName: 'ObjectName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bucketName: 'string',
      endpoint: 'string',
      objectName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserUploadFileJobResponseBodyUploadFileJobDetail extends $dara.Model {
  /**
   * @remarks
   * The key of the file that is returned after the file is uploaded. You can use this key when you upload the file as an attachment in a ticket.
   * 
   * @example
   * upload_3c7edea3-e4c3-4403-857d-737043036f69_test.sql
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The name of the file.
   * 
   * @example
   * test.sql
   */
  fileName?: string;
  /**
   * @remarks
   * The size of the file. Unit: byte.
   * 
   * @example
   * 2968269
   */
  fileSize?: number;
  /**
   * @remarks
   * The purpose of the uploaded file. Valid values:
   * 
   * *   **datacorrect**: The file is uploaded to change data.
   * *   **order_info_attachment**: The file is uploaded as an attachment in a ticket.
   * *   **big-file**: The file is uploaded to import multiple data records at a time.
   * *   **sqlreview**: The file is uploaded for SQL review.
   * 
   * @example
   * datacorrect
   */
  fileSource?: string;
  /**
   * @remarks
   * The key of the file upload task.
   * 
   * @example
   * 65254a4c1614235217749100e
   */
  jobKey?: string;
  /**
   * @remarks
   * The status of the file upload task. Valid values:
   * 
   * *   **INIT**: The file upload task was initialized.
   * *   **PENDING**: The file upload task waited to be run.
   * *   **BE_SCHEDULED**: The file upload task waited to be scheduled.
   * *   **FAIL**: The file upload task failed.
   * *   **SUCCESS**: The file upload task was successful.
   * *   **RUNNING**: The file upload task was being run.
   * 
   * @example
   * SUCCESS
   */
  jobStatus?: string;
  /**
   * @remarks
   * The information about the status of the file upload task.
   * 
   * @example
   * success
   */
  jobStatusDesc?: string;
  /**
   * @remarks
   * The information about the Object Storage Service (OSS) bucket from which the file is uploaded.
   * 
   * > This parameter is returned if the value of **UploadType** is **OSS**.
   */
  uploadOSSParam?: GetUserUploadFileJobResponseBodyUploadFileJobDetailUploadOSSParam;
  /**
   * @remarks
   * The method used to upload the file. Valid values:
   * 
   * *   **URL**
   * *   **OSS**
   * 
   * @example
   * URL
   */
  uploadType?: string;
  /**
   * @remarks
   * The URL of the file.
   * 
   * > This parameter is returned if the value of **UploadType** is **URL**.
   * 
   * @example
   * http://xxxx/test.sql
   */
  uploadURL?: string;
  /**
   * @remarks
   * The size of the uploaded file. Unit: byte.
   * 
   * @example
   * 2968269
   */
  uploadedSize?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      fileName: 'FileName',
      fileSize: 'FileSize',
      fileSource: 'FileSource',
      jobKey: 'JobKey',
      jobStatus: 'JobStatus',
      jobStatusDesc: 'JobStatusDesc',
      uploadOSSParam: 'UploadOSSParam',
      uploadType: 'UploadType',
      uploadURL: 'UploadURL',
      uploadedSize: 'UploadedSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      fileName: 'string',
      fileSize: 'number',
      fileSource: 'string',
      jobKey: 'string',
      jobStatus: 'string',
      jobStatusDesc: 'string',
      uploadOSSParam: GetUserUploadFileJobResponseBodyUploadFileJobDetailUploadOSSParam,
      uploadType: 'string',
      uploadURL: 'string',
      uploadedSize: 'number',
    };
  }

  validate() {
    if(this.uploadOSSParam && typeof (this.uploadOSSParam as any).validate === 'function') {
      (this.uploadOSSParam as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAbacAuthorizationsResponseBodyAuthorizationList extends $dara.Model {
  /**
   * @example
   * 32****
   */
  authorizationId?: number;
  /**
   * @example
   * 51****
   */
  identityId?: number;
  /**
   * @example
   * test_user
   */
  identityName?: string;
  /**
   * @example
   * USER
   */
  identityType?: string;
  /**
   * @example
   * 12****
   */
  policyId?: number;
  /**
   * @example
   * policy_test
   */
  policyName?: string;
  /**
   * @example
   * USER_DEFINE
   */
  policySource?: string;
  static names(): { [key: string]: string } {
    return {
      authorizationId: 'AuthorizationId',
      identityId: 'IdentityId',
      identityName: 'IdentityName',
      identityType: 'IdentityType',
      policyId: 'PolicyId',
      policyName: 'PolicyName',
      policySource: 'PolicySource',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorizationId: 'number',
      identityId: 'number',
      identityName: 'string',
      identityType: 'string',
      policyId: 'number',
      policyName: 'string',
      policySource: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAbacPoliciesResponseBodyPolicyList extends $dara.Model {
  /**
   * @example
   * {
   *   "Statement": [
   *     {
   *       "Action": "*",
   *       "Effect": "Allow",
   *       "Resource": "*",
   *       "Condition": {
   *         "StringEqualsIgnoreCase": {
   *           "dms:DbType": [
   *             "redis"
   *           ]
   *         }
   *       }
   *     }
   *   ],
   *   "Version": "1"
   * }
   */
  abacPolicyContent?: string;
  /**
   * @example
   * test
   */
  abacPolicyDesc?: string;
  /**
   * @example
   * 12****
   */
  abacPolicyId?: number;
  /**
   * @example
   * policy_test
   */
  abacPolicyName?: string;
  /**
   * @example
   * USER_DEFINE
   */
  abacPolicySource?: string;
  /**
   * @example
   * 51****
   */
  creatorId?: number;
  static names(): { [key: string]: string } {
    return {
      abacPolicyContent: 'AbacPolicyContent',
      abacPolicyDesc: 'AbacPolicyDesc',
      abacPolicyId: 'AbacPolicyId',
      abacPolicyName: 'AbacPolicyName',
      abacPolicySource: 'AbacPolicySource',
      creatorId: 'CreatorId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      abacPolicyContent: 'string',
      abacPolicyDesc: 'string',
      abacPolicyId: 'number',
      abacPolicyName: 'string',
      abacPolicySource: 'string',
      creatorId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorityTemplateResponseBodyAuthorityTemplateViewListAuthorityTemplateView extends $dara.Model {
  /**
   * @example
   * 2023-10-26 11:37:47
   */
  createTime?: string;
  /**
   * @example
   * 522****
   */
  creatorId?: number;
  description?: string;
  name?: string;
  /**
   * @example
   * 2592
   */
  templateId?: number;
  static names(): { [key: string]: string } {
    return {
      createTime: 'CreateTime',
      creatorId: 'CreatorId',
      description: 'Description',
      name: 'Name',
      templateId: 'TemplateId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'string',
      creatorId: 'number',
      description: 'string',
      name: 'string',
      templateId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorityTemplateResponseBodyAuthorityTemplateViewList extends $dara.Model {
  authorityTemplateView?: ListAuthorityTemplateResponseBodyAuthorityTemplateViewListAuthorityTemplateView[];
  static names(): { [key: string]: string } {
    return {
      authorityTemplateView: 'AuthorityTemplateView',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorityTemplateView: { 'type': 'array', 'itemType': ListAuthorityTemplateResponseBodyAuthorityTemplateViewListAuthorityTemplateView },
    };
  }

  validate() {
    if(Array.isArray(this.authorityTemplateView)) {
      $dara.Model.validateArray(this.authorityTemplateView);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedDatabasesForUserResponseBodyDatabasesPermissionDetail extends $dara.Model {
  /**
   * @example
   * DATABASE
   */
  dsType?: string;
  /**
   * @example
   * 2024-12-06 10:00:00
   */
  expireDate?: string;
  message?: string;
  /**
   * @example
   * CORRECT
   */
  permType?: string;
  static names(): { [key: string]: string } {
    return {
      dsType: 'DsType',
      expireDate: 'ExpireDate',
      message: 'Message',
      permType: 'PermType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dsType: 'string',
      expireDate: 'string',
      message: 'string',
      permType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedDatabasesForUserResponseBodyDatabases extends $dara.Model {
  /**
   * @example
   * 254****
   */
  dbId?: string;
  /**
   * @example
   * MYSQL
   */
  dbType?: string;
  /**
   * @example
   * product
   */
  envType?: string;
  /**
   * @example
   * 235****
   */
  instanceId?: string;
  /**
   * @example
   * false
   */
  logic?: boolean;
  permissionDetail?: ListAuthorizedDatabasesForUserResponseBodyDatabasesPermissionDetail;
  /**
   * @example
   * poc_testdb
   */
  schemaName?: string;
  /**
   * @example
   * poc
   */
  searchName?: string;
  /**
   * @example
   * 51****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      dbType: 'DbType',
      envType: 'EnvType',
      instanceId: 'InstanceId',
      logic: 'Logic',
      permissionDetail: 'PermissionDetail',
      schemaName: 'SchemaName',
      searchName: 'SearchName',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'string',
      dbType: 'string',
      envType: 'string',
      instanceId: 'string',
      logic: 'boolean',
      permissionDetail: ListAuthorizedDatabasesForUserResponseBodyDatabasesPermissionDetail,
      schemaName: 'string',
      searchName: 'string',
      userId: 'string',
    };
  }

  validate() {
    if(this.permissionDetail && typeof (this.permissionDetail as any).validate === 'function') {
      (this.permissionDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedInstancesForUserResponseBodyInstancesPermissionDetail extends $dara.Model {
  /**
   * @example
   * DATABASE
   */
  dsType?: string;
  /**
   * @example
   * 2024-12-06 10:00:00
   */
  expireDate?: string;
  message?: string;
  /**
   * @example
   * CORRECT
   */
  permType?: string;
  static names(): { [key: string]: string } {
    return {
      dsType: 'DsType',
      expireDate: 'ExpireDate',
      message: 'Message',
      permType: 'PermType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dsType: 'string',
      expireDate: 'string',
      message: 'string',
      permType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedInstancesForUserResponseBodyInstances extends $dara.Model {
  /**
   * @example
   * MySQL
   */
  dbType?: string;
  /**
   * @example
   * product
   */
  envType?: string;
  /**
   * @example
   * rm-2zex9lrc0gz0****.mysql.rds.aliyuncs.com
   */
  host?: string;
  /**
   * @example
   * DMS_TEST
   */
  instanceAlias?: string;
  /**
   * @example
   * 21****
   */
  instanceId?: string;
  permissionDetail?: ListAuthorizedInstancesForUserResponseBodyInstancesPermissionDetail;
  /**
   * @example
   * 3306
   */
  port?: string;
  /**
   * @example
   * 51****
   */
  userId?: string;
  /**
   * @example
   * user_test
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      envType: 'EnvType',
      host: 'Host',
      instanceAlias: 'InstanceAlias',
      instanceId: 'InstanceId',
      permissionDetail: 'PermissionDetail',
      port: 'Port',
      userId: 'UserId',
      userName: 'UserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      envType: 'string',
      host: 'string',
      instanceAlias: 'string',
      instanceId: 'string',
      permissionDetail: ListAuthorizedInstancesForUserResponseBodyInstancesPermissionDetail,
      port: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  validate() {
    if(this.permissionDetail && typeof (this.permissionDetail as any).validate === 'function') {
      (this.permissionDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedUsersForDatabaseResponseBodyUsers extends $dara.Model {
  /**
   * @example
   * 164882191****
   */
  uid?: string;
  /**
   * @example
   * 51****
   */
  userId?: string;
  /**
   * @example
   * user_test
   */
  userNickName?: string;
  static names(): { [key: string]: string } {
    return {
      uid: 'Uid',
      userId: 'UserId',
      userNickName: 'UserNickName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      uid: 'string',
      userId: 'string',
      userNickName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedUsersForInstanceResponseBodyUsers extends $dara.Model {
  /**
   * @example
   * 164882191****
   */
  uid?: string;
  /**
   * @example
   * 51***
   */
  userId?: string;
  /**
   * @example
   * user_test
   */
  userNickName?: string;
  /**
   * @example
   * user01
   */
  userRealName?: string;
  static names(): { [key: string]: string } {
    return {
      uid: 'Uid',
      userId: 'UserId',
      userNickName: 'UserNickName',
      userRealName: 'UserRealName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      uid: 'string',
      userId: 'string',
      userNickName: 'string',
      userRealName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListClassificationTemplatesResponseBodyTemplateList extends $dara.Model {
  /**
   * @remarks
   * The name of the classification template.
   * 
   * @example
   * test
   */
  name?: string;
  /**
   * @remarks
   * The remarks.
   * 
   * @example
   * test
   */
  remark?: string;
  /**
   * @remarks
   * The ID of the classification template.
   * 
   * @example
   * 3**
   */
  templateId?: number;
  /**
   * @remarks
   * The type of the classification template. Valid values:
   * 
   * *   **INNER**: built-in template
   * *   **USER_DEFINE**: custom template
   * 
   * @example
   * USER_DEFINE
   */
  templateType?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'Name',
      remark: 'Remark',
      templateId: 'TemplateId',
      templateType: 'TemplateType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      remark: 'string',
      templateId: 'number',
      templateType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListColumnsResponseBodyColumnListColumn extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the column is an auto-increment column. Valid values:
   * 
   * *   true: The column is an auto-increment column.
   * *   false: The column is not an auto-increment column.
   * 
   * @example
   * false
   */
  autoIncrement?: boolean;
  /**
   * @remarks
   * The ID of the column.
   * 
   * @example
   * 62589****
   */
  columnId?: string;
  /**
   * @remarks
   * The name of the column.
   * 
   * @example
   * name
   */
  columnName?: string;
  /**
   * @remarks
   * The data type of the column.
   * 
   * @example
   * varchar
   */
  columnType?: string;
  /**
   * @remarks
   * The length of the field.
   * 
   * @example
   * 4
   */
  dataLength?: number;
  /**
   * @remarks
   * The number of valid digits for the field.
   * 
   * @example
   * 0
   */
  dataPrecision?: number;
  /**
   * @remarks
   * The number of decimal places for the field.
   * 
   * @example
   * 0
   */
  dataScale?: number;
  /**
   * @remarks
   * The default value of the column.
   * 
   * @example
   * def_value
   */
  defaultValue?: string;
  /**
   * @remarks
   * The description of the column.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The type of the masking algorithm that is used for the field. Valid values:
   * 
   * *   null: No masking algorithm is used.
   * *   DEFAULT: A full masking algorithm is used.
   * *   FIX_POS: The fixed position is masked.
   * *   FIX_CHAR: The fixed characters are replaced.
   * 
   * @example
   * DEFAULT
   */
  functionType?: string;
  /**
   * @remarks
   * Indicates whether the column can be empty. Valid values:
   * 
   * *   **true**: The column can be empty.
   * *   **false**: The column cannot be empty.
   * 
   * @example
   * false
   */
  nullable?: boolean;
  /**
   * @remarks
   * The security level of the column. Valid values:
   * 
   * *   INNER: The column is an internal column but not sensitive.
   * *   SENSITIVE: The column is a sensitive column.
   * *   CONFIDENTIAL: The column is a confidential column.
   * 
   * > For more information, see [Sensitivity levels of fields](https://help.aliyun.com/document_detail/66091.html).
   * 
   * @example
   * INNER
   */
  securityLevel?: string;
  /**
   * @remarks
   * Indicates whether the column is a sensitive column. Valid values:
   * 
   * *   **true**: The column is a sensitive column.
   * *   **false**: The column is not a sensitive column.
   * 
   * @example
   * false
   */
  sensitive?: boolean;
  static names(): { [key: string]: string } {
    return {
      autoIncrement: 'AutoIncrement',
      columnId: 'ColumnId',
      columnName: 'ColumnName',
      columnType: 'ColumnType',
      dataLength: 'DataLength',
      dataPrecision: 'DataPrecision',
      dataScale: 'DataScale',
      defaultValue: 'DefaultValue',
      description: 'Description',
      functionType: 'FunctionType',
      nullable: 'Nullable',
      securityLevel: 'SecurityLevel',
      sensitive: 'Sensitive',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoIncrement: 'boolean',
      columnId: 'string',
      columnName: 'string',
      columnType: 'string',
      dataLength: 'number',
      dataPrecision: 'number',
      dataScale: 'number',
      defaultValue: 'string',
      description: 'string',
      functionType: 'string',
      nullable: 'boolean',
      securityLevel: 'string',
      sensitive: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListColumnsResponseBodyColumnList extends $dara.Model {
  column?: ListColumnsResponseBodyColumnListColumn[];
  static names(): { [key: string]: string } {
    return {
      column: 'Column',
    };
  }

  static types(): { [key: string]: any } {
    return {
      column: { 'type': 'array', 'itemType': ListColumnsResponseBodyColumnListColumn },
    };
  }

  validate() {
    if(Array.isArray(this.column)) {
      $dara.Model.validateArray(this.column);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDAGVersionsResponseBodyDagVersionListDagVersion extends $dara.Model {
  /**
   * @remarks
   * The name of the task flow.
   * 
   * @example
   * Spark SQL
   */
  dagName?: string;
  /**
   * @remarks
   * The ID of the task flow owner.
   * 
   * @example
   * 51****
   */
  dagOwnerId?: string;
  /**
   * @remarks
   * The name of the task flow owner.
   * 
   * @example
   * name
   */
  dagOwnerNickName?: string;
  /**
   * @remarks
   * The ID of the previously published version.
   * 
   * @example
   * 2****
   */
  lastVersionId?: number;
  /**
   * @remarks
   * The description of the version.
   * 
   * @example
   * test_OSS
   */
  versionComments?: string;
  /**
   * @remarks
   * The ID of the version.
   * 
   * @example
   * 2****
   */
  versionId?: number;
  static names(): { [key: string]: string } {
    return {
      dagName: 'DagName',
      dagOwnerId: 'DagOwnerId',
      dagOwnerNickName: 'DagOwnerNickName',
      lastVersionId: 'LastVersionId',
      versionComments: 'VersionComments',
      versionId: 'VersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagName: 'string',
      dagOwnerId: 'string',
      dagOwnerNickName: 'string',
      lastVersionId: 'number',
      versionComments: 'string',
      versionId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDAGVersionsResponseBodyDagVersionList extends $dara.Model {
  dagVersion?: ListDAGVersionsResponseBodyDagVersionListDagVersion[];
  static names(): { [key: string]: string } {
    return {
      dagVersion: 'DagVersion',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagVersion: { 'type': 'array', 'itemType': ListDAGVersionsResponseBodyDagVersionListDagVersion },
    };
  }

  validate() {
    if(Array.isArray(this.dagVersion)) {
      $dara.Model.validateArray(this.dagVersion);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDBTaskSQLJobResponseBodyDBTaskSQLJobList extends $dara.Model {
  /**
   * @remarks
   * The description of the SQL task.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The time when the SQL task was created.
   * 
   * @example
   * 2021-02-18 17:49:20
   */
  createTime?: string;
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 43214523
   */
  dbId?: number;
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * @example
   * test@xxx:3306【test】
   */
  dbSearchName?: string;
  /**
   * @remarks
   * The ID of the SQL task group.
   * 
   * @example
   * 4324132
   */
  dbTaskGroupId?: number;
  /**
   * @remarks
   * The ID of the SQL task.
   * 
   * @example
   * 123435
   */
  jobId?: number;
  /**
   * @remarks
   * The type of the SQL task.
   * 
   * @example
   * STRUCT_SYNC
   */
  jobType?: string;
  /**
   * @remarks
   * The time when the SQL task was last executed.
   * 
   * @example
   * 2021-02-18 17:49:31
   */
  lastExecTime?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is a logical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The state of the SQL task. Valid values:
   * 
   * *   **INIT**: The SQL task was initialized.
   * *   **PENDING**: The SQL task waited to be run.
   * *   **BE_SCHEDULED**: The SQL task waited to be scheduled.
   * *   **FAIL**: The SQL task failed.
   * *   **SUCCESS**: The SQL task was successful.
   * *   **PAUSE**: The SQL task was paused.
   * *   **DELETE**: The SQL task was deleted.
   * *   **RUNNING**: The SQL task was being run.
   * 
   * @example
   * SUCCESS
   */
  status?: string;
  /**
   * @remarks
   * Indicates whether the SQL task is executed as a transaction. Valid values:
   * 
   * *   **true**: The SQL task is executed as a transaction.
   * *   **false**: The SQL task is not executed as a transaction.
   * 
   * @example
   * false
   */
  transactional?: boolean;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      createTime: 'CreateTime',
      dbId: 'DbId',
      dbSearchName: 'DbSearchName',
      dbTaskGroupId: 'DbTaskGroupId',
      jobId: 'JobId',
      jobType: 'JobType',
      lastExecTime: 'LastExecTime',
      logic: 'Logic',
      status: 'Status',
      transactional: 'Transactional',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      createTime: 'string',
      dbId: 'number',
      dbSearchName: 'string',
      dbTaskGroupId: 'number',
      jobId: 'number',
      jobType: 'string',
      lastExecTime: 'string',
      logic: 'boolean',
      status: 'string',
      transactional: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDBTaskSQLJobDetailResponseBodyDBTaskSQLJobDetailList extends $dara.Model {
  /**
   * @remarks
   * The number of rows affected by the SQL task.
   * 
   * @example
   * 0
   */
  affectRows?: number;
  /**
   * @remarks
   * The SQL statement that was executed in the SQL task.
   * 
   * @example
   * update a set id = 1 where id  = 1;
   */
  currentSql?: string;
  /**
   * @remarks
   * The ID of the physical database.
   * 
   * @example
   * 1988****
   */
  dbId?: number;
  /**
   * @remarks
   * The point in time when the SQL task ended.
   * 
   * @example
   * 2021-12-16 00:00:01
   */
  endTime?: string;
  /**
   * @remarks
   * The number of times that the SQL statement was executed.
   * 
   * @example
   * 1
   */
  executeCount?: number;
  /**
   * @remarks
   * The ID of the details of the SQL task.
   * 
   * @example
   * 24723****
   */
  jobDetailId?: number;
  /**
   * @remarks
   * The ID of the SQL task.
   * 
   * @example
   * 1276****
   */
  jobId?: number;
  /**
   * @remarks
   * The details of the operational log.
   * 
   * @example
   * log_info
   */
  log?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is a physical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * Indicates whether the SQL statement was skipped. Valid values:
   * 
   * *   **true**: The SQL statement was skipped.
   * *   **false**: The SQL statement was not skipped.
   * 
   * @example
   * false
   */
  skip?: boolean;
  /**
   * @remarks
   * The type of the SQL statement, such as DELETE, UPDATE, or ALTER_TABLE.
   * 
   * @example
   * CREATE_TABLE
   */
  sqlType?: string;
  /**
   * @remarks
   * The point in time when the SQL task started.
   * 
   * @example
   * 2021-12-16 00:00:00
   */
  startTime?: string;
  /**
   * @remarks
   * The status of the SQL task. Valid values:
   * 
   * *   **INIT**: The SQL task was initialized.
   * *   **PENDING**: The SQL task waited to be run.
   * *   **BE_SCHEDULED**: The SQL task waited to be scheduled.
   * *   **FAIL**: The SQL task failed.
   * *   **SUCCESS**: The SQL task was successful.
   * *   **PAUSE**: The SQL task was paused.
   * *   **DELETE**: The SQL task was deleted.
   * *   **RUNNING**: The SQL task was being run.
   * 
   * @example
   * SUCCESS
   */
  status?: string;
  /**
   * @remarks
   * The duration of the SQL task. Unit: milliseconds.
   * 
   * @example
   * 38
   */
  timeDelay?: number;
  static names(): { [key: string]: string } {
    return {
      affectRows: 'AffectRows',
      currentSql: 'CurrentSql',
      dbId: 'DbId',
      endTime: 'EndTime',
      executeCount: 'ExecuteCount',
      jobDetailId: 'JobDetailId',
      jobId: 'JobId',
      log: 'Log',
      logic: 'Logic',
      skip: 'Skip',
      sqlType: 'SqlType',
      startTime: 'StartTime',
      status: 'Status',
      timeDelay: 'TimeDelay',
    };
  }

  static types(): { [key: string]: any } {
    return {
      affectRows: 'number',
      currentSql: 'string',
      dbId: 'number',
      endTime: 'string',
      executeCount: 'number',
      jobDetailId: 'number',
      jobId: 'number',
      log: 'string',
      logic: 'boolean',
      skip: 'boolean',
      sqlType: 'string',
      startTime: 'string',
      status: 'string',
      timeDelay: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDDLPublishRecordsResponseBodyDDLPublishRecordListPublishTaskInfoListPublishJobList extends $dara.Model {
  /**
   * @remarks
   * The ID of the SQL task group.
   * 
   * @example
   * 423515
   */
  DBTaskGroupId?: number;
  /**
   * @remarks
   * The number of SQL statements that are executed.
   * 
   * @example
   * 0
   */
  executeCount?: number;
  /**
   * @remarks
   * The script for data changes.
   * 
   * @example
   * ALTER TABLE test_toolkit_rename_table_after_rename MODIFY COLUMN gmt_modified datetime NOT NULL
   */
  scripts?: string;
  /**
   * @remarks
   * The description of the state.
   * 
   * @example
   * NONE
   */
  statusDesc?: string;
  /**
   * @remarks
   * The name of the table after the change.
   * 
   * @example
   * test_toolkit_rename_table_after_rename
   */
  tableName?: string;
  /**
   * @remarks
   * The state of the publishing task. Valid values:
   * 
   * *   **NONE**: The state of the task is unknown.
   * *   **SUCCESS**: The task is successful.
   * *   **FAIL**: The task fails.
   * 
   * @example
   * NONE
   */
  taskJobStatus?: string;
  static names(): { [key: string]: string } {
    return {
      DBTaskGroupId: 'DBTaskGroupId',
      executeCount: 'ExecuteCount',
      scripts: 'Scripts',
      statusDesc: 'StatusDesc',
      tableName: 'TableName',
      taskJobStatus: 'TaskJobStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      DBTaskGroupId: 'number',
      executeCount: 'number',
      scripts: 'string',
      statusDesc: 'string',
      tableName: 'string',
      taskJobStatus: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDDLPublishRecordsResponseBodyDDLPublishRecordListPublishTaskInfoList extends $dara.Model {
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 4325
   */
  dbId?: number;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: the database is not a logical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The time to publish the ticket.
   * 
   * @example
   * 2020-12-14 20:52:38
   */
  planTime?: string;
  /**
   * @remarks
   * The list of the publishing tasks.
   */
  publishJobList?: ListDDLPublishRecordsResponseBodyDDLPublishRecordListPublishTaskInfoListPublishJobList[];
  /**
   * @remarks
   * The publishing policy. Valid values:
   * 
   * *   **IMMEDIATELY**: immediately publishes the ticket.
   * *   **REGULARLY**: publishes the ticket at a scheduled time.
   * 
   * @example
   * IMMEDIATELY
   */
  publishStrategy?: string;
  /**
   * @remarks
   * The description of the state.
   * 
   * @example
   * NONE
   */
  statusDesc?: string;
  /**
   * @remarks
   * The state of the task.
   * 
   * @example
   * NONE
   */
  taskJobStatus?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      logic: 'Logic',
      planTime: 'PlanTime',
      publishJobList: 'PublishJobList',
      publishStrategy: 'PublishStrategy',
      statusDesc: 'StatusDesc',
      taskJobStatus: 'TaskJobStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      logic: 'boolean',
      planTime: 'string',
      publishJobList: { 'type': 'array', 'itemType': ListDDLPublishRecordsResponseBodyDDLPublishRecordListPublishTaskInfoListPublishJobList },
      publishStrategy: 'string',
      statusDesc: 'string',
      taskJobStatus: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.publishJobList)) {
      $dara.Model.validateArray(this.publishJobList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDDLPublishRecordsResponseBodyDDLPublishRecordList extends $dara.Model {
  /**
   * @remarks
   * The time when the approval expires.
   * 
   * @example
   * 2020-12-14 20:52:38
   */
  auditExpireTime?: string;
  /**
   * @remarks
   * The approval state of the ticket. Valid values:
   * 
   * *   **EXEMPT_PASS**: The ticket passes without approval.
   * *   **TO_AUDIT**: The ticket is pending for approval.
   * *   **CANCEL**: The ticket is canceled.
   * *   **SUCCESS**: The ticket is approved.
   * *   **FAIL**: The ticket fails to pass the approval.
   * 
   * @example
   * CANCEL
   */
  auditStatus?: string;
  /**
   * @remarks
   * Release remarks.
   * 
   * @example
   * Release remarks
   */
  comment?: string;
  /**
   * @remarks
   * The ID of the user who creates the ticket. You can obtain the user ID by calling the [GetUser](https://help.aliyun.com/document_detail/147098.html) operation and querying the value of the UserId parameter. The value is not the unique ID (UID) of the Alibaba Cloud account.
   * 
   * @example
   * 1423
   */
  creatorId?: number;
  /**
   * @remarks
   * Indicates whether the approval is terminated. Valid values:
   * 
   * *   **true**: The approval is terminated.
   * *   **false**: The approval is not terminated.
   * 
   * > Multiple reasons can terminate the approval. For example, you withdraw the application or your ticket is not approved before the specified time.
   * 
   * @example
   * true
   */
  finality?: boolean;
  /**
   * @remarks
   * The reason for the termination.
   * 
   * @example
   * CANCEL
   */
  finalityReason?: string;
  /**
   * @remarks
   * The publishing state of the ticket. Valid values:
   * 
   * *   **START**: The ticket is created.
   * *   **ANALYZE**: The ticket is under analysis.
   * *   **AUDIT**: The ticket is under approval.
   * *   **DISPATCH**: A task is generated for the ticket.
   * *   **SUCCESS**: The task is successful.
   * 
   * @example
   * AUDIT
   */
  publishStatus?: string;
  /**
   * @remarks
   * The list of publishing tasks.
   */
  publishTaskInfoList?: ListDDLPublishRecordsResponseBodyDDLPublishRecordListPublishTaskInfoList[];
  /**
   * @remarks
   * The risk level of the operation. Valid values:
   * 
   * *   **NONE_RISK**: The operation does not have risks.
   * *   **LOW_RISK**: The operation is at low risk.
   * *   **MIDDLE_RISK**: The operation is at medium risk.
   * *   **HIGH_RISK**: The operation is at high risk.
   * 
   * @example
   * LOW_RISK
   */
  riskLevel?: string;
  /**
   * @remarks
   * The description of the publishing state.
   * 
   * @example
   * CANCEL
   */
  statusDesc?: string;
  /**
   * @remarks
   * The ID of the approval process.
   * 
   * @example
   * 432153
   */
  workflowInstanceId?: number;
  static names(): { [key: string]: string } {
    return {
      auditExpireTime: 'AuditExpireTime',
      auditStatus: 'AuditStatus',
      comment: 'Comment',
      creatorId: 'CreatorId',
      finality: 'Finality',
      finalityReason: 'FinalityReason',
      publishStatus: 'PublishStatus',
      publishTaskInfoList: 'PublishTaskInfoList',
      riskLevel: 'RiskLevel',
      statusDesc: 'StatusDesc',
      workflowInstanceId: 'WorkflowInstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      auditExpireTime: 'string',
      auditStatus: 'string',
      comment: 'string',
      creatorId: 'number',
      finality: 'boolean',
      finalityReason: 'string',
      publishStatus: 'string',
      publishTaskInfoList: { 'type': 'array', 'itemType': ListDDLPublishRecordsResponseBodyDDLPublishRecordListPublishTaskInfoList },
      riskLevel: 'string',
      statusDesc: 'string',
      workflowInstanceId: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.publishTaskInfoList)) {
      $dara.Model.validateArray(this.publishTaskInfoList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataCorrectPreCheckDBResponseBodyPreCheckDBList extends $dara.Model {
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 43***
   */
  dbId?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * test@localhost:3306
   */
  searchName?: string;
  /**
   * @remarks
   * The number of SQL statements.
   * 
   * @example
   * 1
   */
  sqlNum?: number;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      searchName: 'SearchName',
      sqlNum: 'SqlNum',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      searchName: 'string',
      sqlNum: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataCorrectPreCheckSQLResponseBodyPreCheckSQLList extends $dara.Model {
  /**
   * @remarks
   * The estimated number of affected rows.
   * 
   * @example
   * 0
   */
  affectRows?: number;
  /**
   * @remarks
   * The SQL statement.
   * 
   * @example
   * OPTIMIZE TABLE `Text_TableNames`
   */
  checkSQL?: string;
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 1930****
   */
  dbId?: number;
  /**
   * @remarks
   * The key that is used to query the details of optimization suggestions. You can call the [GetSQLReviewOptimizeDetail](https://help.aliyun.com/document_detail/265977.html) operation to query the details of optimization suggestions based on the key.
   * 
   * @example
   * b9e771fc6ec247dea6d06a32c777****
   */
  SQLReviewQueryKey?: string;
  /**
   * @remarks
   * The review status of the SQL statement. Valid values:
   * 
   * *   **WAITING**: The SQL statement is pending for review.
   * *   **RUNNING**: The SQL statement is being reviewed.
   * *   **IGNORE**: The SQL statement review is skipped.
   * *   **PASS**: The SQL statement passed the review.
   * *   **BLOCK**: The SQL statement failed the review.
   * 
   * @example
   * WAITING
   */
  sqlReviewStatus?: string;
  /**
   * @remarks
   * The type of the SQL statement, such as DELETE, UPDATE, or ALTER_TABLE.
   * 
   * @example
   * OPTIMIZE
   */
  sqlType?: string;
  /**
   * @remarks
   * The name of the table whose data is changed.
   * 
   * @example
   * Text_TableNames
   */
  tableNames?: string;
  static names(): { [key: string]: string } {
    return {
      affectRows: 'AffectRows',
      checkSQL: 'CheckSQL',
      dbId: 'DbId',
      SQLReviewQueryKey: 'SQLReviewQueryKey',
      sqlReviewStatus: 'SqlReviewStatus',
      sqlType: 'SqlType',
      tableNames: 'TableNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      affectRows: 'number',
      checkSQL: 'string',
      dbId: 'number',
      SQLReviewQueryKey: 'string',
      sqlReviewStatus: 'string',
      sqlType: 'string',
      tableNames: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataImportSQLPreCheckDetailResponseBodyPreCheckSQLDetailList extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the precheck of the SQL statement was skipped. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  skip?: boolean;
  /**
   * @remarks
   * The SQL ID, which indicates the sequence number of the SQL statement. The number starts with 1.
   * 
   * @example
   * 1
   */
  sqlId?: number;
  /**
   * @remarks
   * The type of the SQL statement, such as DELETE, UPDATE, or ALTER_TABLE.
   * 
   * @example
   * INSERT
   */
  sqlType?: string;
  /**
   * @remarks
   * The state of the ticket. Valid values:
   * 
   * *   **INIT**: The ticket was being initialized.
   * *   **RUNNING**: The ticket was in progress.
   * *   **SUCCESS**: The ticket was complete.
   * *   **TIMEOUT**: The ticket was skipped due to timeout.
   * *   **FAIL**: The ticket failed.
   * 
   * @example
   * SUCCESS
   */
  statusCode?: string;
  static names(): { [key: string]: string } {
    return {
      skip: 'Skip',
      sqlId: 'SqlId',
      sqlType: 'SqlType',
      statusCode: 'StatusCode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      skip: 'boolean',
      sqlId: 'number',
      sqlType: 'string',
      statusCode: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabaseUserPermssionsResponseBodyUserPermissionsUserPermissionPermDetailsPermDetail extends $dara.Model {
  /**
   * @remarks
   * The time when the permission was created.
   * 
   * @example
   * 2019-12-12 00:00:00
   */
  createDate?: string;
  /**
   * @remarks
   * The time when the permissions expire.
   * 
   * @example
   * 2020-12-12 00:00:00
   */
  expireDate?: string;
  /**
   * @remarks
   * The extra information. This parameter is reserved.
   * 
   * @example
   * DEFAULT
   */
  extraData?: string;
  /**
   * @remarks
   * The description of the entity that authorizes the permission.
   * 
   * @example
   * xxx grant
   */
  originFrom?: string;
  /**
   * @remarks
   * The type of the permission. Valid values:
   * 
   * *   QUERY: the query permissions
   * *   EXPORT: the export permissions
   * *   CORRECT: the change permissions
   * 
   * @example
   * QUERY
   */
  permType?: string;
  /**
   * @remarks
   * The ID of the authorization record.
   * 
   * @example
   * 13434
   */
  userAccessId?: string;
  static names(): { [key: string]: string } {
    return {
      createDate: 'CreateDate',
      expireDate: 'ExpireDate',
      extraData: 'ExtraData',
      originFrom: 'OriginFrom',
      permType: 'PermType',
      userAccessId: 'UserAccessId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createDate: 'string',
      expireDate: 'string',
      extraData: 'string',
      originFrom: 'string',
      permType: 'string',
      userAccessId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabaseUserPermssionsResponseBodyUserPermissionsUserPermissionPermDetails extends $dara.Model {
  permDetail?: ListDatabaseUserPermssionsResponseBodyUserPermissionsUserPermissionPermDetailsPermDetail[];
  static names(): { [key: string]: string } {
    return {
      permDetail: 'PermDetail',
    };
  }

  static types(): { [key: string]: any } {
    return {
      permDetail: { 'type': 'array', 'itemType': ListDatabaseUserPermssionsResponseBodyUserPermissionsUserPermissionPermDetailsPermDetail },
    };
  }

  validate() {
    if(Array.isArray(this.permDetail)) {
      $dara.Model.validateArray(this.permDetail);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabaseUserPermssionsResponseBodyUserPermissionsUserPermission extends $dara.Model {
  /**
   * @remarks
   * The alias of the database instance.
   * 
   * @example
   * instance_alias
   */
  alias?: string;
  /**
   * @remarks
   * The name of a column.
   * 
   * @example
   * column_name
   */
  columnName?: string;
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 1234
   */
  dbId?: string;
  /**
   * @remarks
   * The type of the database engine.
   * 
   * @example
   * mysql
   */
  dbType?: string;
  /**
   * @remarks
   * The type of resources on which the user has permissions.
   * 
   * @example
   * DATABASE
   */
  dsType?: string;
  /**
   * @remarks
   * The type of the environment to which the database belongs.
   * 
   * @example
   * product
   */
  envType?: string;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * 1443
   */
  instanceId?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The details of user permissions.
   */
  permDetails?: ListDatabaseUserPermssionsResponseBodyUserPermissionsUserPermissionPermDetails;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * xxx@xxxx:3306
   */
  schemaName?: string;
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * @example
   * xxx
   */
  searchName?: string;
  /**
   * @remarks
   * The ID of the table.
   * 
   * @example
   * 42345
   */
  tableId?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * table_name
   */
  tableName?: string;
  /**
   * @remarks
   * The ID of the user.
   * 
   * @example
   * 14324
   */
  userId?: string;
  /**
   * @remarks
   * The nickname of the user.
   * 
   * @example
   * user_nick_name
   */
  userNickName?: string;
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      columnName: 'ColumnName',
      dbId: 'DbId',
      dbType: 'DbType',
      dsType: 'DsType',
      envType: 'EnvType',
      instanceId: 'InstanceId',
      logic: 'Logic',
      permDetails: 'PermDetails',
      schemaName: 'SchemaName',
      searchName: 'SearchName',
      tableId: 'TableId',
      tableName: 'TableName',
      userId: 'UserId',
      userNickName: 'UserNickName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      columnName: 'string',
      dbId: 'string',
      dbType: 'string',
      dsType: 'string',
      envType: 'string',
      instanceId: 'string',
      logic: 'boolean',
      permDetails: ListDatabaseUserPermssionsResponseBodyUserPermissionsUserPermissionPermDetails,
      schemaName: 'string',
      searchName: 'string',
      tableId: 'string',
      tableName: 'string',
      userId: 'string',
      userNickName: 'string',
    };
  }

  validate() {
    if(this.permDetails && typeof (this.permDetails as any).validate === 'function') {
      (this.permDetails as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabaseUserPermssionsResponseBodyUserPermissions extends $dara.Model {
  userPermission?: ListDatabaseUserPermssionsResponseBodyUserPermissionsUserPermission[];
  static names(): { [key: string]: string } {
    return {
      userPermission: 'UserPermission',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userPermission: { 'type': 'array', 'itemType': ListDatabaseUserPermssionsResponseBodyUserPermissionsUserPermission },
    };
  }

  validate() {
    if(Array.isArray(this.userPermission)) {
      $dara.Model.validateArray(this.userPermission);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabasesResponseBodyDatabaseListDatabaseOwnerIdList extends $dara.Model {
  ownerIds?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerIds: 'OwnerIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabasesResponseBodyDatabaseListDatabaseOwnerNameList extends $dara.Model {
  ownerNames?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerNames: 'OwnerNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerNames)) {
      $dara.Model.validateArray(this.ownerNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabasesResponseBodyDatabaseListDatabase extends $dara.Model {
  /**
   * @remarks
   * The name of the catalog to which the database belongs.
   * 
   * @example
   * 1
   */
  catalogName?: string;
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 1
   */
  databaseId?: string;
  /**
   * @remarks
   * The type of the database engine.
   * 
   * @example
   * mysql
   */
  dbType?: string;
  /**
   * @remarks
   * The ID of the DBA.
   * 
   * @example
   * 1
   */
  dbaId?: string;
  /**
   * @remarks
   * The nickname of the Database administrator (DBA) to which the database belongs.
   * 
   * @example
   * dba_user
   */
  dbaName?: string;
  /**
   * @remarks
   * The encoding format of the database.
   * 
   * @example
   * utf-8
   */
  encoding?: string;
  /**
   * @remarks
   * The type of the environment to which the database belongs.
   * 
   * @example
   * dev
   */
  envType?: string;
  /**
   * @remarks
   * The endpoint of the instance to which the database belongs.
   * 
   * @example
   * xxx.xxx.xxx.xxx
   */
  host?: string;
  /**
   * @remarks
   * The ID of the instance to which the database belongs.
   * 
   * @example
   * 1
   */
  instanceId?: string;
  /**
   * @remarks
   * The IDs of the owners of the database.
   */
  ownerIdList?: ListDatabasesResponseBodyDatabaseListDatabaseOwnerIdList;
  /**
   * @remarks
   * The nicknames of the database owners.
   */
  ownerNameList?: ListDatabasesResponseBodyDatabaseListDatabaseOwnerNameList;
  /**
   * @remarks
   * The connection port of the instance to which the database belongs.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * test
   */
  schemaName?: string;
  /**
   * @remarks
   * The name that is used for searching the database.
   * 
   * @example
   * test@xxx.xxx.xxx.xxx:3306
   */
  searchName?: string;
  /**
   * @remarks
   * The system ID (SID) of the instance to which the database belongs.
   * 
   * @example
   * test
   */
  sid?: string;
  /**
   * @remarks
   * The state of the database. Valid values:
   * 
   * *   NORMAL: The database is normal.
   * *   DISABLE: The database is disabled.
   * *   OFFLINE: The database is unpublished.
   * *   NOT_EXIST: The database does not exist.
   * 
   * @example
   * NORMAL
   */
  state?: string;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      databaseId: 'DatabaseId',
      dbType: 'DbType',
      dbaId: 'DbaId',
      dbaName: 'DbaName',
      encoding: 'Encoding',
      envType: 'EnvType',
      host: 'Host',
      instanceId: 'InstanceId',
      ownerIdList: 'OwnerIdList',
      ownerNameList: 'OwnerNameList',
      port: 'Port',
      schemaName: 'SchemaName',
      searchName: 'SearchName',
      sid: 'Sid',
      state: 'State',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      databaseId: 'string',
      dbType: 'string',
      dbaId: 'string',
      dbaName: 'string',
      encoding: 'string',
      envType: 'string',
      host: 'string',
      instanceId: 'string',
      ownerIdList: ListDatabasesResponseBodyDatabaseListDatabaseOwnerIdList,
      ownerNameList: ListDatabasesResponseBodyDatabaseListDatabaseOwnerNameList,
      port: 'number',
      schemaName: 'string',
      searchName: 'string',
      sid: 'string',
      state: 'string',
    };
  }

  validate() {
    if(this.ownerIdList && typeof (this.ownerIdList as any).validate === 'function') {
      (this.ownerIdList as any).validate();
    }
    if(this.ownerNameList && typeof (this.ownerNameList as any).validate === 'function') {
      (this.ownerNameList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabasesResponseBodyDatabaseList extends $dara.Model {
  database?: ListDatabasesResponseBodyDatabaseListDatabase[];
  static names(): { [key: string]: string } {
    return {
      database: 'Database',
    };
  }

  static types(): { [key: string]: any } {
    return {
      database: { 'type': 'array', 'itemType': ListDatabasesResponseBodyDatabaseListDatabase },
    };
  }

  validate() {
    if(Array.isArray(this.database)) {
      $dara.Model.validateArray(this.database);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDefaultSLARulesResponseBodySLARuleListSLARule extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow.
   * 
   * @example
   * 0
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the SLA rule.
   * 
   * @example
   * 1
   */
  id?: number;
  /**
   * @remarks
   * The timeout period. Unit: minutes.
   * 
   * @example
   * 1080
   */
  intervalMinutes?: number;
  /**
   * @remarks
   * The ID of the task node.
   * 
   * @example
   * 0
   */
  nodeId?: number;
  /**
   * @remarks
   * The type of the rule. Valid values:
   * 
   * *   **0**: an SLA rule for a task flow
   * *   **1**: an SLA rule for a task node
   * 
   * @example
   * 0
   */
  ruleType?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      id: 'Id',
      intervalMinutes: 'IntervalMinutes',
      nodeId: 'NodeId',
      ruleType: 'RuleType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      id: 'number',
      intervalMinutes: 'number',
      nodeId: 'number',
      ruleType: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDefaultSLARulesResponseBodySLARuleList extends $dara.Model {
  SLARule?: ListDefaultSLARulesResponseBodySLARuleListSLARule[];
  static names(): { [key: string]: string } {
    return {
      SLARule: 'SLARule',
    };
  }

  static types(): { [key: string]: any } {
    return {
      SLARule: { 'type': 'array', 'itemType': ListDefaultSLARulesResponseBodySLARuleListSLARule },
    };
  }

  validate() {
    if(Array.isArray(this.SLARule)) {
      $dara.Model.validateArray(this.SLARule);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDesensitizationRuleResponseBodyDesensitizationRuleList extends $dara.Model {
  /**
   * @remarks
   * The parameter.
   * 
   * @example
   * {paramName: salt, paramValue: 1}
   */
  funcParams?: string;
  /**
   * @remarks
   * The example.
   * 
   * @example
   * [{paramName: testStr, paramValue: 1}]
   */
  funcSample?: string;
  /**
   * @remarks
   * The algorithm type.
   * 
   * @example
   * MD5
   */
  functionType?: string;
  /**
   * @remarks
   * The ID of the user who last modified the masking rule.
   * 
   * @example
   * 2
   */
  lastModifierId?: string;
  /**
   * @remarks
   * The name of the user who last modified the masking rule.
   * 
   * @example
   * test user
   */
  lastModifierName?: string;
  /**
   * @remarks
   * The number of times that the masking was used.
   * 
   * @example
   * 1
   */
  referenceCount?: number;
  /**
   * @remarks
   * The description of the rule.
   * 
   * @example
   * hash desensitization algorithm
   */
  ruleDesc?: string;
  /**
   * @remarks
   * The ID of the masking rule.
   * 
   * @example
   * 23
   */
  ruleId?: number;
  /**
   * @remarks
   * The name of the masking rule.
   * 
   * @example
   * default desensitization rule test
   */
  ruleName?: string;
  /**
   * @remarks
   * The algorithm used for masking.
   * 
   * @example
   * HASH
   */
  ruleType?: string;
  static names(): { [key: string]: string } {
    return {
      funcParams: 'FuncParams',
      funcSample: 'FuncSample',
      functionType: 'FunctionType',
      lastModifierId: 'LastModifierId',
      lastModifierName: 'LastModifierName',
      referenceCount: 'ReferenceCount',
      ruleDesc: 'RuleDesc',
      ruleId: 'RuleId',
      ruleName: 'RuleName',
      ruleType: 'RuleType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      funcParams: 'string',
      funcSample: 'string',
      functionType: 'string',
      lastModifierId: 'string',
      lastModifierName: 'string',
      referenceCount: 'number',
      ruleDesc: 'string',
      ruleId: 'number',
      ruleName: 'string',
      ruleType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListEffectiveOrdersResponseBodyOrderSummaryOrderList extends $dara.Model {
  /**
   * @remarks
   * The UID of the user who placed the order.
   * 
   * @example
   * 2698420314****
   */
  buyerId?: string;
  /**
   * @remarks
   * The time when the instance expires.
   * 
   * @example
   * 2022-11-24 00:00:00
   */
  endTime?: string;
  /**
   * @remarks
   * The maximum number of database instances that you can use DMS to manage.
   * 
   * @example
   * 7
   */
  insNum?: string;
  /**
   * @remarks
   * The ID of the instance for the purchased service.
   * 
   * @example
   * rm-bp1xd1v866****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the order.
   * 
   * @example
   * 2190037****
   */
  orderId?: string;
  /**
   * @remarks
   * The time when the instance is started.
   * 
   * @example
   * 2022-10-24 00:00:00
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      buyerId: 'BuyerId',
      endTime: 'EndTime',
      insNum: 'InsNum',
      instanceId: 'InstanceId',
      orderId: 'OrderId',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      buyerId: 'string',
      endTime: 'string',
      insNum: 'string',
      instanceId: 'string',
      orderId: 'string',
      startTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListEffectiveOrdersResponseBodyOrderSummary extends $dara.Model {
  /**
   * @remarks
   * The commodity code of DMS.
   * 
   * *   dms_pre_public_cn: DMS that uses the subscription billing method
   * *   dms_post_public_cn: DMS that uses the pay-as-you-go billing method
   * 
   * @example
   * dms_pre_public_cn
   */
  commodityCode?: string;
  /**
   * @remarks
   * The type of the service.
   * 
   * *   **VersionType**: DMS that supports control modes
   * *   **SensitiveDataProtection**: DMS that supports sensitive data protection
   * 
   * @example
   * VersionType
   */
  commodityType?: string;
  /**
   * @remarks
   * Details about the orders.
   */
  orderList?: ListEffectiveOrdersResponseBodyOrderSummaryOrderList[];
  /**
   * @remarks
   * The sum of the number of instances that you can use DMS to manage in all orders.
   * 
   * @example
   * 12
   */
  totalQuota?: number;
  /**
   * @remarks
   * The control mode of DMS. Valid values:
   * 
   * *   **stand**: Stable Change
   * *   **safety**: Security Collaboration
   * 
   * @example
   * safety
   */
  versionType?: string;
  static names(): { [key: string]: string } {
    return {
      commodityCode: 'CommodityCode',
      commodityType: 'CommodityType',
      orderList: 'OrderList',
      totalQuota: 'TotalQuota',
      versionType: 'VersionType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commodityCode: 'string',
      commodityType: 'string',
      orderList: { 'type': 'array', 'itemType': ListEffectiveOrdersResponseBodyOrderSummaryOrderList },
      totalQuota: 'number',
      versionType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.orderList)) {
      $dara.Model.validateArray(this.orderList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIndexesResponseBodyIndexListIndex extends $dara.Model {
  /**
   * @remarks
   * The description of the index.
   * 
   * @example
   * test
   */
  indexComment?: string;
  /**
   * @remarks
   * The ID of the index.
   * 
   * @example
   * 1
   */
  indexId?: string;
  /**
   * @remarks
   * The name of the index.
   * 
   * @example
   * idx_test
   */
  indexName?: string;
  /**
   * @remarks
   * The type of the index. Valid values:
   * 
   * *   Primary
   * *   Unique
   * *   Normal
   * *   FullText
   * *   Spatial
   * 
   * @example
   * Primary
   */
  indexType?: string;
  /**
   * @remarks
   * The ID of the table.
   * 
   * @example
   * 1
   */
  tableId?: string;
  static names(): { [key: string]: string } {
    return {
      indexComment: 'IndexComment',
      indexId: 'IndexId',
      indexName: 'IndexName',
      indexType: 'IndexType',
      tableId: 'TableId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      indexComment: 'string',
      indexId: 'string',
      indexName: 'string',
      indexType: 'string',
      tableId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIndexesResponseBodyIndexList extends $dara.Model {
  index?: ListIndexesResponseBodyIndexListIndex[];
  static names(): { [key: string]: string } {
    return {
      index: 'Index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      index: { 'type': 'array', 'itemType': ListIndexesResponseBodyIndexListIndex },
    };
  }

  validate() {
    if(Array.isArray(this.index)) {
      $dara.Model.validateArray(this.index);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstanceLoginAuditLogResponseBodyInstanceLoginAuditLogListInstanceLoginAuditLog extends $dara.Model {
  /**
   * @remarks
   * The database account that is used to log on to the instance.
   * 
   * @example
   * test_User
   */
  dbUser?: string;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * 177****
   */
  instanceId?: number;
  /**
   * @remarks
   * The name of the instance.
   * 
   * @example
   * rm-bp144d5ky4l4rli0417****.mysql.rds.aliyuncs.com:3306[rm-bp144d5ky4l4r****]
   */
  instanceName?: string;
  /**
   * @remarks
   * The time when the user performed an operation on the instance.
   * 
   * @example
   * 2021-11-18 11:13:26
   */
  opTime?: string;
  /**
   * @remarks
   * The source IP address of the request.
   * 
   * @example
   * 117.36.XX.XX,100.104.XX.XX
   */
  requestIp?: string;
  /**
   * @remarks
   * The ID of the user.
   * 
   * @example
   * 12****
   */
  userId?: number;
  /**
   * @remarks
   * The alias of the user.
   * 
   * @example
   * test_UserName
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      dbUser: 'DbUser',
      instanceId: 'InstanceId',
      instanceName: 'InstanceName',
      opTime: 'OpTime',
      requestIp: 'RequestIp',
      userId: 'UserId',
      userName: 'UserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbUser: 'string',
      instanceId: 'number',
      instanceName: 'string',
      opTime: 'string',
      requestIp: 'string',
      userId: 'number',
      userName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstanceLoginAuditLogResponseBodyInstanceLoginAuditLogList extends $dara.Model {
  instanceLoginAuditLog?: ListInstanceLoginAuditLogResponseBodyInstanceLoginAuditLogListInstanceLoginAuditLog[];
  static names(): { [key: string]: string } {
    return {
      instanceLoginAuditLog: 'InstanceLoginAuditLog',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceLoginAuditLog: { 'type': 'array', 'itemType': ListInstanceLoginAuditLogResponseBodyInstanceLoginAuditLogListInstanceLoginAuditLog },
    };
  }

  validate() {
    if(Array.isArray(this.instanceLoginAuditLog)) {
      $dara.Model.validateArray(this.instanceLoginAuditLog);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstanceUserPermissionsResponseBodyUserPermissionsUserPermissionPermDetailsPermDetail extends $dara.Model {
  /**
   * @remarks
   * The time when the permissions were granted.
   * 
   * @example
   * 2019-12-12 00:00:00
   */
  createDate?: string;
  /**
   * @remarks
   * The time when the permissions expire.
   * 
   * @example
   * 2020-12-12 00:00:00
   */
  expireDate?: string;
  /**
   * @remarks
   * This parameter is reserved.
   * 
   * @example
   * XXX
   */
  extraData?: string;
  /**
   * @remarks
   * The user who grants the permissions.
   * 
   * @example
   * xxx authorization
   */
  originFrom?: string;
  /**
   * @remarks
   * The type of the permissions. Valid values:
   * 
   * *   LOGIN: the logon permissions
   * *   PERF: the query permissions on the instance
   * 
   * @example
   * LOGIN
   */
  permType?: string;
  /**
   * @remarks
   * The ID of the authorization record.
   * 
   * @example
   * 773****
   */
  userAccessId?: string;
  static names(): { [key: string]: string } {
    return {
      createDate: 'CreateDate',
      expireDate: 'ExpireDate',
      extraData: 'ExtraData',
      originFrom: 'OriginFrom',
      permType: 'PermType',
      userAccessId: 'UserAccessId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createDate: 'string',
      expireDate: 'string',
      extraData: 'string',
      originFrom: 'string',
      permType: 'string',
      userAccessId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstanceUserPermissionsResponseBodyUserPermissionsUserPermissionPermDetails extends $dara.Model {
  permDetail?: ListInstanceUserPermissionsResponseBodyUserPermissionsUserPermissionPermDetailsPermDetail[];
  static names(): { [key: string]: string } {
    return {
      permDetail: 'PermDetail',
    };
  }

  static types(): { [key: string]: any } {
    return {
      permDetail: { 'type': 'array', 'itemType': ListInstanceUserPermissionsResponseBodyUserPermissionsUserPermissionPermDetailsPermDetail },
    };
  }

  validate() {
    if(Array.isArray(this.permDetail)) {
      $dara.Model.validateArray(this.permDetail);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstanceUserPermissionsResponseBodyUserPermissionsUserPermission extends $dara.Model {
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * 174****
   */
  instanceId?: string;
  /**
   * @remarks
   * The details of permissions.
   */
  permDetails?: ListInstanceUserPermissionsResponseBodyUserPermissionsUserPermissionPermDetails;
  /**
   * @remarks
   * The ID of the user.
   * 
   * @example
   * 51****
   */
  userId?: string;
  /**
   * @remarks
   * The nickname of the user.
   * 
   * @example
   * test_nick_name
   */
  userNickName?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      permDetails: 'PermDetails',
      userId: 'UserId',
      userNickName: 'UserNickName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      permDetails: ListInstanceUserPermissionsResponseBodyUserPermissionsUserPermissionPermDetails,
      userId: 'string',
      userNickName: 'string',
    };
  }

  validate() {
    if(this.permDetails && typeof (this.permDetails as any).validate === 'function') {
      (this.permDetails as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstanceUserPermissionsResponseBodyUserPermissions extends $dara.Model {
  userPermission?: ListInstanceUserPermissionsResponseBodyUserPermissionsUserPermission[];
  static names(): { [key: string]: string } {
    return {
      userPermission: 'UserPermission',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userPermission: { 'type': 'array', 'itemType': ListInstanceUserPermissionsResponseBodyUserPermissionsUserPermission },
    };
  }

  validate() {
    if(Array.isArray(this.userPermission)) {
      $dara.Model.validateArray(this.userPermission);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesResponseBodyInstanceListInstanceOwnerIdList extends $dara.Model {
  ownerIds?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerIds: 'OwnerIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesResponseBodyInstanceListInstanceOwnerNameList extends $dara.Model {
  ownerNames?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerNames: 'OwnerNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerNames)) {
      $dara.Model.validateArray(this.ownerNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesResponseBodyInstanceListInstanceStandardGroup extends $dara.Model {
  /**
   * @remarks
   * The type of the control mode. Valid values:
   * 
   * *   **COMMON**: Security Collaboration
   * *   **NONE_CONTROL**: Flexible Management
   * *   **STABLE**: Stable Change
   * 
   * @example
   * COMMON
   */
  groupMode?: string;
  /**
   * @remarks
   * The name of the security rule corresponding to the control mode.
   * 
   * @example
   * test
   */
  groupName?: string;
  static names(): { [key: string]: string } {
    return {
      groupMode: 'GroupMode',
      groupName: 'GroupName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupMode: 'string',
      groupName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesResponseBodyInstanceListInstance extends $dara.Model {
  /**
   * @remarks
   * The name of the database link for the database instance.
   * 
   * @example
   * dblink_test
   */
  dataLinkName?: string;
  /**
   * @remarks
   * The password that is used to log on to the database instance.
   * 
   * @example
   * ******
   */
  databasePassword?: string;
  /**
   * @remarks
   * The account that is used to log on to the database.
   * 
   * @example
   * dbUser
   */
  databaseUser?: string;
  /**
   * @remarks
   * The ID of the database administrator (DBA) of the database instance.
   * 
   * @example
   * 31****
   */
  dbaId?: string;
  /**
   * @remarks
   * The nickname of the DBA of the instance.
   * 
   * @example
   * dbaName
   */
  dbaNickName?: string;
  /**
   * @remarks
   * Indicates whether the lock-free schema change feature is enabled for the database instance.
   * 
   * @example
   * 1
   */
  ddlOnline?: number;
  /**
   * @remarks
   * The ID of the ECS instance on which the database instance is deployed.
   * 
   * @example
   * 150****
   */
  ecsInstanceId?: string;
  /**
   * @remarks
   * The ID of the region in which the database instance resides.
   * 
   * @example
   * cn-hangzhou
   */
  ecsRegion?: string;
  /**
   * @remarks
   * The type of the environment to which the database instance belongs. Valid values:
   * 
   * *   **product:** production environment
   * *   **dev**: development environment
   * *   **pre**: pre-release environment
   * *   **test**: test environment
   * *   **sit**: SIT environment
   * *   **uat**: UAT environment
   * *   **pet**: stress testing environment
   * *   **stag:** staging environment
   * 
   * @example
   * product
   */
  envType?: string;
  /**
   * @remarks
   * The timeout period for exporting data from the database instance.
   * 
   * @example
   * 86400
   */
  exportTimeout?: number;
  /**
   * @remarks
   * The host address that is used to connect to the database instance.
   * 
   * @example
   * ****.mysql.rds.aliyuncs.com
   */
  host?: string;
  /**
   * @remarks
   * The alias of the database instance.
   * 
   * @example
   * test
   */
  instanceAlias?: string;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * 150***
   */
  instanceId?: string;
  /**
   * @remarks
   * The source of the database instance.
   * 
   * @example
   * RDS
   */
  instanceSource?: string;
  /**
   * @remarks
   * The type of the database instance.
   * 
   * @example
   * mysql
   */
  instanceType?: string;
  /**
   * @remarks
   * The IDs of the owners of the database instance.
   */
  ownerIdList?: ListInstancesResponseBodyInstanceListInstanceOwnerIdList;
  /**
   * @remarks
   * The nicknames of the owners of the database instance.
   */
  ownerNameList?: ListInstancesResponseBodyInstanceListInstanceOwnerNameList;
  /**
   * @remarks
   * The port number that is used to connect to the database instance.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The timeout period for querying data in the database instance.
   * 
   * @example
   * 60
   */
  queryTimeout?: number;
  /**
   * @remarks
   * The ID of the security rule set of the database instance.
   * 
   * @example
   * 1
   */
  safeRuleId?: string;
  /**
   * @remarks
   * Indicates whether the sensitive data protection feature is enabled. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  sellSitd?: boolean;
  /**
   * @remarks
   * The system ID (SID) of the database instance.
   * 
   * @example
   * test
   */
  sid?: string;
  /**
   * @remarks
   * The control mode of the database instance.
   */
  standardGroup?: ListInstancesResponseBodyInstanceListInstanceStandardGroup;
  /**
   * @remarks
   * The status of the database instance.
   * 
   * @example
   * NORMAL
   */
  state?: string;
  /**
   * @remarks
   * Indicates whether the cross-database query feature is enabled for the database instance. Valid values:
   * 
   * *   **0**: disabled
   * *   **1:**: enabled
   * 
   * @example
   * 1
   */
  useDsql?: number;
  /**
   * @remarks
   * The ID of the VPC to which the database instance belongs.
   * 
   * @example
   * vpc-o6wrloqsdqc9io3mg****
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      dataLinkName: 'DataLinkName',
      databasePassword: 'DatabasePassword',
      databaseUser: 'DatabaseUser',
      dbaId: 'DbaId',
      dbaNickName: 'DbaNickName',
      ddlOnline: 'DdlOnline',
      ecsInstanceId: 'EcsInstanceId',
      ecsRegion: 'EcsRegion',
      envType: 'EnvType',
      exportTimeout: 'ExportTimeout',
      host: 'Host',
      instanceAlias: 'InstanceAlias',
      instanceId: 'InstanceId',
      instanceSource: 'InstanceSource',
      instanceType: 'InstanceType',
      ownerIdList: 'OwnerIdList',
      ownerNameList: 'OwnerNameList',
      port: 'Port',
      queryTimeout: 'QueryTimeout',
      safeRuleId: 'SafeRuleId',
      sellSitd: 'SellSitd',
      sid: 'Sid',
      standardGroup: 'StandardGroup',
      state: 'State',
      useDsql: 'UseDsql',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataLinkName: 'string',
      databasePassword: 'string',
      databaseUser: 'string',
      dbaId: 'string',
      dbaNickName: 'string',
      ddlOnline: 'number',
      ecsInstanceId: 'string',
      ecsRegion: 'string',
      envType: 'string',
      exportTimeout: 'number',
      host: 'string',
      instanceAlias: 'string',
      instanceId: 'string',
      instanceSource: 'string',
      instanceType: 'string',
      ownerIdList: ListInstancesResponseBodyInstanceListInstanceOwnerIdList,
      ownerNameList: ListInstancesResponseBodyInstanceListInstanceOwnerNameList,
      port: 'number',
      queryTimeout: 'number',
      safeRuleId: 'string',
      sellSitd: 'boolean',
      sid: 'string',
      standardGroup: ListInstancesResponseBodyInstanceListInstanceStandardGroup,
      state: 'string',
      useDsql: 'number',
      vpcId: 'string',
    };
  }

  validate() {
    if(this.ownerIdList && typeof (this.ownerIdList as any).validate === 'function') {
      (this.ownerIdList as any).validate();
    }
    if(this.ownerNameList && typeof (this.ownerNameList as any).validate === 'function') {
      (this.ownerNameList as any).validate();
    }
    if(this.standardGroup && typeof (this.standardGroup as any).validate === 'function') {
      (this.standardGroup as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesResponseBodyInstanceList extends $dara.Model {
  instance?: ListInstancesResponseBodyInstanceListInstance[];
  static names(): { [key: string]: string } {
    return {
      instance: 'Instance',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instance: { 'type': 'array', 'itemType': ListInstancesResponseBodyInstanceListInstance },
    };
  }

  validate() {
    if(Array.isArray(this.instance)) {
      $dara.Model.validateArray(this.instance);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLhTaskFlowAndScenarioResponseBodyRawDAGListDag extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the task flow can be modified. Valid values:
   * 
   * *   **true**: The task flow can be modified.
   * *   **false**: The task flow cannot be modified.
   * 
   * @example
   * true
   */
  canEdit?: boolean;
  /**
   * @remarks
   * The ID of the user who creates the task flow.
   * 
   * @example
   * 51****
   */
  creatorId?: string;
  /**
   * @remarks
   * The name of the user who creates the workspace.
   * 
   * @example
   * Creator_Name
   */
  creatorNickName?: string;
  /**
   * @remarks
   * The name of the task flow.
   * 
   * @example
   * Dag_Name
   */
  dagName?: string;
  /**
   * @remarks
   * The user ID of the task flow owner.
   * 
   * @example
   * 51****
   */
  dagOwnerId?: string;
  /**
   * @remarks
   * The name of the task flow owner.
   * 
   * @example
   * Owner_Name
   */
  dagOwnerNickName?: string;
  /**
   * @remarks
   * The extended field. No meaning is specified for this field.
   * 
   * @example
   * -
   */
  dataFlowId?: number;
  /**
   * @remarks
   * The extended field. No meaning is specified for this field.
   * 
   * @example
   * -
   */
  demoId?: string;
  /**
   * @remarks
   * The ID of the latest deployment record.
   * 
   * @example
   * 12**
   */
  deployId?: number;
  /**
   * @remarks
   * The ID of the task flow.
   * 
   * @example
   * 134137****
   */
  id?: number;
  /**
   * @remarks
   * Indicates whether the task flow is deleted. Valid values:
   * 
   * *   **true**: deleted
   * *   **false**: not deleted
   * 
   * @example
   * false
   */
  isDeleted?: boolean;
  /**
   * @remarks
   * The status of the latest execution. Valid values:
   * 
   * *   **0**: invalid
   * *   **1**: scheduling disabled
   * *   **2**: waiting to be scheduled
   * 
   * @example
   * 0
   */
  latestInstanceStatus?: number;
  /**
   * @remarks
   * The time when the latest execution record was generated.
   * 
   * @example
   * 2022-04-14
   */
  latestInstanceTime?: number;
  /**
   * @remarks
   * The ID of the business scenario.
   * 
   * @example
   * 2**
   */
  scenarioId?: number;
  /**
   * @remarks
   * The ID of the workspace.
   * 
   * @example
   * 1
   */
  spaceId?: number;
  /**
   * @remarks
   * The status of the task flow. Valid values:
   * 
   * *   **0**: invalid
   * *   **1**: scheduling disabled
   * *   **2**: waiting to be scheduled
   * 
   * @example
   * 2
   */
  status?: number;
  static names(): { [key: string]: string } {
    return {
      canEdit: 'CanEdit',
      creatorId: 'CreatorId',
      creatorNickName: 'CreatorNickName',
      dagName: 'DagName',
      dagOwnerId: 'DagOwnerId',
      dagOwnerNickName: 'DagOwnerNickName',
      dataFlowId: 'DataFlowId',
      demoId: 'DemoId',
      deployId: 'DeployId',
      id: 'Id',
      isDeleted: 'IsDeleted',
      latestInstanceStatus: 'LatestInstanceStatus',
      latestInstanceTime: 'LatestInstanceTime',
      scenarioId: 'ScenarioId',
      spaceId: 'SpaceId',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      canEdit: 'boolean',
      creatorId: 'string',
      creatorNickName: 'string',
      dagName: 'string',
      dagOwnerId: 'string',
      dagOwnerNickName: 'string',
      dataFlowId: 'number',
      demoId: 'string',
      deployId: 'number',
      id: 'number',
      isDeleted: 'boolean',
      latestInstanceStatus: 'number',
      latestInstanceTime: 'number',
      scenarioId: 'number',
      spaceId: 'number',
      status: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLhTaskFlowAndScenarioResponseBodyRawDAGList extends $dara.Model {
  dag?: ListLhTaskFlowAndScenarioResponseBodyRawDAGListDag[];
  static names(): { [key: string]: string } {
    return {
      dag: 'Dag',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dag: { 'type': 'array', 'itemType': ListLhTaskFlowAndScenarioResponseBodyRawDAGListDag },
    };
  }

  validate() {
    if(Array.isArray(this.dag)) {
      $dara.Model.validateArray(this.dag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLhTaskFlowAndScenarioResponseBodyScenarioDAGListScenarioDAGDagListDag extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the task flow can be modified. Valid values:
   * 
   * - **true**: The task flow can be modified.
   * - **false**: The task flow cannot be modified.
   * 
   * @example
   * true
   */
  canEdit?: boolean;
  /**
   * @remarks
   * The ID of the user who creates the task flow.
   * 
   * @example
   * 51****
   */
  creatorId?: string;
  /**
   * @remarks
   * The name of the user who creates the workspace.
   * 
   * @example
   * Creator_Name
   */
  creatorNickName?: string;
  /**
   * @remarks
   * The name of the task flow.
   * 
   * @example
   * Dag_Name
   */
  dagName?: string;
  /**
   * @remarks
   * The user ID of the task flow owner.
   * 
   * @example
   * 51****
   */
  dagOwnerId?: string;
  /**
   * @remarks
   * The name of the task flow owner.
   * 
   * @example
   * Owner_Name
   */
  dagOwnerNickName?: string;
  /**
   * @remarks
   * The extended field. No meaning is specified for this field.
   * 
   * @example
   * -
   */
  dataFlowId?: number;
  /**
   * @remarks
   * The extended field. No meaning is specified for this field.
   * 
   * @example
   * -
   */
  demoId?: string;
  /**
   * @remarks
   * The ID of the latest deployment record.
   * 
   * @example
   * 12**
   */
  deployId?: number;
  /**
   * @remarks
   * The ID of the task flow.
   * 
   * @example
   * 9***
   */
  id?: number;
  /**
   * @remarks
   * Indicates whether the task flow is deleted. Valid values:
   * 
   * - **true**: deleted
   * - **false**: not deleted
   * 
   * @example
   * false
   */
  isDeleted?: boolean;
  /**
   * @remarks
   * The status of the latest execution. Valid values:
   * 
   * - 0: invalid
   * - 1: scheduling disabled
   * - 2: waiting to be scheduled
   * 
   * @example
   * 1
   */
  latestInstanceStatus?: number;
  /**
   * @remarks
   * The time when the latest execution record was generated.
   * 
   * @example
   * 2022-04-14
   */
  latestInstanceTime?: number;
  /**
   * @remarks
   * The ID of the business scenario.
   * 
   * @example
   * 2**
   */
  scenarioId?: number;
  /**
   * @remarks
   * The ID of the workspace.
   * 
   * @example
   * 1
   */
  spaceId?: number;
  /**
   * @remarks
   * The status of the task flow. Valid values:
   * 
   * - **0**: invalid
   * - **1**: scheduling disabled
   * - **2**: waiting to be scheduled
   * 
   * @example
   * 1
   */
  status?: number;
  static names(): { [key: string]: string } {
    return {
      canEdit: 'CanEdit',
      creatorId: 'CreatorId',
      creatorNickName: 'CreatorNickName',
      dagName: 'DagName',
      dagOwnerId: 'DagOwnerId',
      dagOwnerNickName: 'DagOwnerNickName',
      dataFlowId: 'DataFlowId',
      demoId: 'DemoId',
      deployId: 'DeployId',
      id: 'Id',
      isDeleted: 'IsDeleted',
      latestInstanceStatus: 'LatestInstanceStatus',
      latestInstanceTime: 'LatestInstanceTime',
      scenarioId: 'ScenarioId',
      spaceId: 'SpaceId',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      canEdit: 'boolean',
      creatorId: 'string',
      creatorNickName: 'string',
      dagName: 'string',
      dagOwnerId: 'string',
      dagOwnerNickName: 'string',
      dataFlowId: 'number',
      demoId: 'string',
      deployId: 'number',
      id: 'number',
      isDeleted: 'boolean',
      latestInstanceStatus: 'number',
      latestInstanceTime: 'number',
      scenarioId: 'number',
      spaceId: 'number',
      status: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLhTaskFlowAndScenarioResponseBodyScenarioDAGListScenarioDAGDagList extends $dara.Model {
  dag?: ListLhTaskFlowAndScenarioResponseBodyScenarioDAGListScenarioDAGDagListDag[];
  static names(): { [key: string]: string } {
    return {
      dag: 'Dag',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dag: { 'type': 'array', 'itemType': ListLhTaskFlowAndScenarioResponseBodyScenarioDAGListScenarioDAGDagListDag },
    };
  }

  validate() {
    if(Array.isArray(this.dag)) {
      $dara.Model.validateArray(this.dag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLhTaskFlowAndScenarioResponseBodyScenarioDAGListScenarioDAGScenario extends $dara.Model {
  /**
   * @remarks
   * The ID of the user who creates the business scenario.
   * 
   * @example
   * 51****
   */
  creatorId?: string;
  /**
   * @remarks
   * The description of the business scenario.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The name of the business scenario.
   * 
   * @example
   * Scenario_2
   */
  scenarioName?: string;
  static names(): { [key: string]: string } {
    return {
      creatorId: 'CreatorId',
      description: 'Description',
      scenarioName: 'ScenarioName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creatorId: 'string',
      description: 'string',
      scenarioName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLhTaskFlowAndScenarioResponseBodyScenarioDAGListScenarioDAG extends $dara.Model {
  /**
   * @remarks
   * The list of task flows.
   */
  dagList?: ListLhTaskFlowAndScenarioResponseBodyScenarioDAGListScenarioDAGDagList;
  /**
   * @remarks
   * The information about the business scenario.
   */
  scenario?: ListLhTaskFlowAndScenarioResponseBodyScenarioDAGListScenarioDAGScenario;
  static names(): { [key: string]: string } {
    return {
      dagList: 'DagList',
      scenario: 'Scenario',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagList: ListLhTaskFlowAndScenarioResponseBodyScenarioDAGListScenarioDAGDagList,
      scenario: ListLhTaskFlowAndScenarioResponseBodyScenarioDAGListScenarioDAGScenario,
    };
  }

  validate() {
    if(this.dagList && typeof (this.dagList as any).validate === 'function') {
      (this.dagList as any).validate();
    }
    if(this.scenario && typeof (this.scenario as any).validate === 'function') {
      (this.scenario as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLhTaskFlowAndScenarioResponseBodyScenarioDAGList extends $dara.Model {
  scenarioDAG?: ListLhTaskFlowAndScenarioResponseBodyScenarioDAGListScenarioDAG[];
  static names(): { [key: string]: string } {
    return {
      scenarioDAG: 'ScenarioDAG',
    };
  }

  static types(): { [key: string]: any } {
    return {
      scenarioDAG: { 'type': 'array', 'itemType': ListLhTaskFlowAndScenarioResponseBodyScenarioDAGListScenarioDAG },
    };
  }

  validate() {
    if(Array.isArray(this.scenarioDAG)) {
      $dara.Model.validateArray(this.scenarioDAG);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicDatabasesResponseBodyLogicDatabaseListLogicDatabaseDatabaseIds extends $dara.Model {
  databaseIds?: number[];
  static names(): { [key: string]: string } {
    return {
      databaseIds: 'DatabaseIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databaseIds: { 'type': 'array', 'itemType': 'number' },
    };
  }

  validate() {
    if(Array.isArray(this.databaseIds)) {
      $dara.Model.validateArray(this.databaseIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicDatabasesResponseBodyLogicDatabaseListLogicDatabaseOwnerIdList extends $dara.Model {
  ownerIds?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerIds: 'OwnerIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicDatabasesResponseBodyLogicDatabaseListLogicDatabaseOwnerNameList extends $dara.Model {
  ownerNames?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerNames: 'OwnerNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerNames)) {
      $dara.Model.validateArray(this.ownerNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicDatabasesResponseBodyLogicDatabaseListLogicDatabase extends $dara.Model {
  /**
   * @remarks
   * The alias of the logical database.
   * 
   * @example
   * logic_db_alias
   */
  alias?: string;
  /**
   * @remarks
   * The ID of the logical database.
   * 
   * @example
   * 1***
   */
  databaseId?: string;
  /**
   * @remarks
   * Logical database sub-ID list.
   */
  databaseIds?: ListLogicDatabasesResponseBodyLogicDatabaseListLogicDatabaseDatabaseIds;
  /**
   * @remarks
   * The type of the logical database. For more information about the valid values of this parameter, see [DbType parameter](https://www.alibabacloud.com/help/en/data-management-service/latest/dbtype-parameter).
   * 
   * @example
   * polardb
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment to which the logical database belongs. Valid values:
   * 
   * - **product**: production environment
   * - **dev**: development environment
   * - **pre**: staging environment
   * - **test**: test environment
   * - **sit**: system integration testing (SIT) environment
   * - **uat**: user acceptance testing (UAT) environment
   * - **pet**: stress testing environment
   * - **stag**: STAG environment
   * 
   * @example
   * test
   */
  envType?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. The return value is true.
   * 
   * @example
   * true
   */
  logic?: boolean;
  /**
   * @remarks
   * The IDs of the owners of the logical database.
   */
  ownerIdList?: ListLogicDatabasesResponseBodyLogicDatabaseListLogicDatabaseOwnerIdList;
  /**
   * @remarks
   * The names of the owners of the logical database.
   */
  ownerNameList?: ListLogicDatabasesResponseBodyLogicDatabaseListLogicDatabaseOwnerNameList;
  /**
   * @remarks
   * The name of the logical database.
   * 
   * @example
   * logic_db
   */
  schemaName?: string;
  /**
   * @remarks
   * The name that is used to search for the logical database.
   * 
   * > We recommend that you do not use this parameter for business development. The format of the parameter value may be modified in later versions.
   * 
   * @example
   * logic_db[logic_db_alias]
   */
  searchName?: string;
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      databaseId: 'DatabaseId',
      databaseIds: 'DatabaseIds',
      dbType: 'DbType',
      envType: 'EnvType',
      logic: 'Logic',
      ownerIdList: 'OwnerIdList',
      ownerNameList: 'OwnerNameList',
      schemaName: 'SchemaName',
      searchName: 'SearchName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      databaseId: 'string',
      databaseIds: ListLogicDatabasesResponseBodyLogicDatabaseListLogicDatabaseDatabaseIds,
      dbType: 'string',
      envType: 'string',
      logic: 'boolean',
      ownerIdList: ListLogicDatabasesResponseBodyLogicDatabaseListLogicDatabaseOwnerIdList,
      ownerNameList: ListLogicDatabasesResponseBodyLogicDatabaseListLogicDatabaseOwnerNameList,
      schemaName: 'string',
      searchName: 'string',
    };
  }

  validate() {
    if(this.databaseIds && typeof (this.databaseIds as any).validate === 'function') {
      (this.databaseIds as any).validate();
    }
    if(this.ownerIdList && typeof (this.ownerIdList as any).validate === 'function') {
      (this.ownerIdList as any).validate();
    }
    if(this.ownerNameList && typeof (this.ownerNameList as any).validate === 'function') {
      (this.ownerNameList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicDatabasesResponseBodyLogicDatabaseList extends $dara.Model {
  logicDatabase?: ListLogicDatabasesResponseBodyLogicDatabaseListLogicDatabase[];
  static names(): { [key: string]: string } {
    return {
      logicDatabase: 'LogicDatabase',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logicDatabase: { 'type': 'array', 'itemType': ListLogicDatabasesResponseBodyLogicDatabaseListLogicDatabase },
    };
  }

  validate() {
    if(Array.isArray(this.logicDatabase)) {
      $dara.Model.validateArray(this.logicDatabase);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicTableRouteConfigResponseBodyLogicTableRouteConfigListLogicTableRouteConfig extends $dara.Model {
  /**
   * @remarks
   * The routing algorithm expression.
   * 
   * @example
   * #id#%16\\t
   */
  routeExpr?: string;
  /**
   * @remarks
   * The unique key of the routing algorithm.
   * 
   * @example
   * 1
   */
  routeKey?: string;
  /**
   * @remarks
   * The ID of the logical table.
   * 
   * @example
   * 4****
   */
  tableId?: number;
  static names(): { [key: string]: string } {
    return {
      routeExpr: 'RouteExpr',
      routeKey: 'RouteKey',
      tableId: 'TableId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      routeExpr: 'string',
      routeKey: 'string',
      tableId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicTableRouteConfigResponseBodyLogicTableRouteConfigList extends $dara.Model {
  logicTableRouteConfig?: ListLogicTableRouteConfigResponseBodyLogicTableRouteConfigListLogicTableRouteConfig[];
  static names(): { [key: string]: string } {
    return {
      logicTableRouteConfig: 'LogicTableRouteConfig',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logicTableRouteConfig: { 'type': 'array', 'itemType': ListLogicTableRouteConfigResponseBodyLogicTableRouteConfigListLogicTableRouteConfig },
    };
  }

  validate() {
    if(Array.isArray(this.logicTableRouteConfig)) {
      $dara.Model.validateArray(this.logicTableRouteConfig);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicTablesResponseBodyLogicTableListLogicTableOwnerIdList extends $dara.Model {
  ownerIds?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerIds: 'OwnerIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicTablesResponseBodyLogicTableListLogicTableOwnerNameList extends $dara.Model {
  ownerNames?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerNames: 'OwnerNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerNames)) {
      $dara.Model.validateArray(this.ownerNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicTablesResponseBodyLogicTableListLogicTable extends $dara.Model {
  /**
   * @remarks
   * The ID of the logical database.
   * 
   * @example
   * 1
   */
  databaseId?: string;
  /**
   * @remarks
   * Indicates whether the table is a logical table. The value is fixed to true.
   * 
   * @example
   * true
   */
  logic?: boolean;
  /**
   * @remarks
   * The IDs of the owners of the logical tables.
   */
  ownerIdList?: ListLogicTablesResponseBodyLogicTableListLogicTableOwnerIdList;
  /**
   * @remarks
   * The nicknames of the owners of the logical tables.
   */
  ownerNameList?: ListLogicTablesResponseBodyLogicTableListLogicTableOwnerNameList;
  /**
   * @remarks
   * The logical database to which the logical table belongs.
   * 
   * @example
   * yuyang_test
   */
  schemaName?: string;
  /**
   * @remarks
   * The number of logical tables.
   * 
   * @example
   * 4
   */
  tableCount?: string;
  /**
   * @remarks
   * The expression of the logical table.
   * 
   * @example
   * test[1-4]
   */
  tableExpr?: string;
  /**
   * @remarks
   * The GUID of the logical table.
   * 
   * @example
   * IDB_L_308302.yuyang_test.test_ch
   */
  tableGuid?: string;
  /**
   * @remarks
   * The ID of the logical table.
   * 
   * @example
   * 1
   */
  tableId?: string;
  /**
   * @remarks
   * The name of the logical table.
   * 
   * @example
   * test
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      databaseId: 'DatabaseId',
      logic: 'Logic',
      ownerIdList: 'OwnerIdList',
      ownerNameList: 'OwnerNameList',
      schemaName: 'SchemaName',
      tableCount: 'TableCount',
      tableExpr: 'TableExpr',
      tableGuid: 'TableGuid',
      tableId: 'TableId',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databaseId: 'string',
      logic: 'boolean',
      ownerIdList: ListLogicTablesResponseBodyLogicTableListLogicTableOwnerIdList,
      ownerNameList: ListLogicTablesResponseBodyLogicTableListLogicTableOwnerNameList,
      schemaName: 'string',
      tableCount: 'string',
      tableExpr: 'string',
      tableGuid: 'string',
      tableId: 'string',
      tableName: 'string',
    };
  }

  validate() {
    if(this.ownerIdList && typeof (this.ownerIdList as any).validate === 'function') {
      (this.ownerIdList as any).validate();
    }
    if(this.ownerNameList && typeof (this.ownerNameList as any).validate === 'function') {
      (this.ownerNameList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicTablesResponseBodyLogicTableList extends $dara.Model {
  logicTable?: ListLogicTablesResponseBodyLogicTableListLogicTable[];
  static names(): { [key: string]: string } {
    return {
      logicTable: 'LogicTable',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logicTable: { 'type': 'array', 'itemType': ListLogicTablesResponseBodyLogicTableListLogicTable },
    };
  }

  validate() {
    if(Array.isArray(this.logicTable)) {
      $dara.Model.validateArray(this.logicTable);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOrdersResponseBodyOrdersOrder extends $dara.Model {
  /**
   * @remarks
   * The remarks of the ticket.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The user who submitted the ticket.
   * 
   * @example
   * test
   */
  committer?: string;
  /**
   * @remarks
   * The ID of the user who submitted the ticket.
   * 
   * @example
   * 51****
   */
  committerId?: number;
  /**
   * @remarks
   * The time when the ticket was created.
   * 
   * @example
   * 2022-04-08 11:15:46
   */
  createTime?: string;
  /**
   * @remarks
   * The time when the ticket was last modified.
   * 
   * @example
   * 2022-04-08 11:27:45
   */
  lastModifyTime?: string;
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * @example
   * 51****
   */
  orderId?: number;
  /**
   * @remarks
   * The type of the ticket.
   * 
   * @example
   * DC_COMMON
   */
  pluginType?: string;
  /**
   * @remarks
   * The status code of the ticket. Valid values:
   * 
   * *   **fail**: The ticket fails to be executed.
   * *   **toaudit**: The ticket is waiting for approval.
   * *   **cancel**: The ticket is cancelled.
   * *   **processing**: The ticket is being executed.
   * *   **approved**: The ticket is approved.
   * *   **reject**: The ticket is rejected.
   * *   **success**: The ticket is executed.
   * *   **closed**: The ticket is closed.
   * 
   * @example
   * success
   */
  statusCode?: string;
  /**
   * @remarks
   * The status description of the ticket.
   * 
   * @example
   * changed successfully
   */
  statusDesc?: string;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      committer: 'Committer',
      committerId: 'CommitterId',
      createTime: 'CreateTime',
      lastModifyTime: 'LastModifyTime',
      orderId: 'OrderId',
      pluginType: 'PluginType',
      statusCode: 'StatusCode',
      statusDesc: 'StatusDesc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      committer: 'string',
      committerId: 'number',
      createTime: 'string',
      lastModifyTime: 'string',
      orderId: 'number',
      pluginType: 'string',
      statusCode: 'string',
      statusDesc: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOrdersResponseBodyOrders extends $dara.Model {
  order?: ListOrdersResponseBodyOrdersOrder[];
  static names(): { [key: string]: string } {
    return {
      order: 'Order',
    };
  }

  static types(): { [key: string]: any } {
    return {
      order: { 'type': 'array', 'itemType': ListOrdersResponseBodyOrdersOrder },
    };
  }

  validate() {
    if(Array.isArray(this.order)) {
      $dara.Model.validateArray(this.order);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListProxiesResponseBodyProxyList extends $dara.Model {
  /**
   * @remarks
   * The ID of the user who enabled the secure access proxy feature.
   * 
   * @example
   * 12****
   */
  creatorId?: number;
  /**
   * @remarks
   * The nickname of the user who enabled the secure access proxy feature.
   * 
   * @example
   * test_name
   */
  creatorName?: string;
  /**
   * @remarks
   * The number of the port that was used by HTTPS clients to connect to the database instance.
   * 
   * @example
   * 443
   */
  httpsPort?: number;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * 183****
   */
  instanceId?: number;
  /**
   * @remarks
   * Indicates whether the internal endpoint is enabled. Default value: **true**.
   * 
   * @example
   * true
   */
  privateEnable?: boolean;
  /**
   * @remarks
   * The internal endpoint.
   * 
   * @example
   * dphzmy-5j8oimjsz6ze****.proxy.dms.aliyuncs.com
   */
  privateHost?: string;
  /**
   * @remarks
   * The number of the port that is used to connect the database instance.
   * 
   * @example
   * 3306
   */
  protocolPort?: number;
  /**
   * @remarks
   * The type of the database. Example: MYSQL.
   * 
   * @example
   * MYSQL
   */
  protocolType?: string;
  /**
   * @remarks
   * The ID of the secure access proxy.
   * 
   * @example
   * 4**
   */
  proxyId?: number;
  /**
   * @remarks
   * Indicates whether the public endpoint is enabled. Valid values:
   * 
   * *   **true**: The public endpoint is enabled.
   * *   **false**: The public endpoint is disabled.
   * 
   * @example
   * false
   */
  publicEnable?: boolean;
  /**
   * @remarks
   * The public endpoint. A public endpoint is returned no matter whether the public endpoint is enabled or disabled.
   * 
   * > 
   * 
   * *   If the value of the PublicEnable parameter is **true**, a valid public endpoint that can be resolved by using Alibaba Cloud DNS (DNS) is returned.
   * 
   * *   If the value of the PublicEnable parameter is **false**, an invalid public endpoint that cannot be resolved by using DNS is returned.
   * 
   * @example
   * dphzmy-5j8oimjsz6ze****-pub.proxy.dms.aliyuncs.com
   */
  publicHost?: string;
  /**
   * @remarks
   * The ID of the region.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      creatorId: 'CreatorId',
      creatorName: 'CreatorName',
      httpsPort: 'HttpsPort',
      instanceId: 'InstanceId',
      privateEnable: 'PrivateEnable',
      privateHost: 'PrivateHost',
      protocolPort: 'ProtocolPort',
      protocolType: 'ProtocolType',
      proxyId: 'ProxyId',
      publicEnable: 'PublicEnable',
      publicHost: 'PublicHost',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creatorId: 'number',
      creatorName: 'string',
      httpsPort: 'number',
      instanceId: 'number',
      privateEnable: 'boolean',
      privateHost: 'string',
      protocolPort: 'number',
      protocolType: 'string',
      proxyId: 'number',
      publicEnable: 'boolean',
      publicHost: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListProxyAccessesResponseBodyProxyAccessList extends $dara.Model {
  /**
   * @remarks
   * The username of the database account that is authorized to access the database instance by using the secure access proxy feature.
   * 
   * @example
   * MXPL8HalI22m****
   */
  accessId?: string;
  /**
   * @remarks
   * The time when the user is authorized to access the database instance by using the secure access proxy feature.
   * 
   * @example
   * 2021-03-31 10:34:18
   */
  gmtCreate?: string;
  /**
   * @remarks
   * The username of the independent database account.
   * 
   * @example
   * ****
   */
  indepAccount?: string;
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * @example
   * 164****
   */
  instanceId?: number;
  /**
   * @remarks
   * The method that is used to authorize the user to access the database instance by using the secure access proxy feature. Valid values: 
   * 
   * - **Authorization by the Alibaba Cloud Account ()**: The information in the parentheses () indicates the user ID (UID) of the Alibaba Cloud account.
   * - **Authorization by submitting the ticket ()**:The information in the parentheses () indicates the number of the ticket that the user submits to apply for permissions.
   * 
   * @example
   * Authorization by the Alibaba Cloud Account(29490401597700****)
   */
  originInfo?: string;
  /**
   * @remarks
   * The ID that DMS generates after the user is authorized to access the database instance by using the secure access proxy feature. The ID is unique in DMS.
   * 
   * @example
   * ****
   */
  proxyAccessId?: number;
  /**
   * @remarks
   * The ID of the secure access proxy.
   * 
   * @example
   * 47
   */
  proxyId?: number;
  /**
   * @remarks
   * The ID of the user.
   * 
   * @example
   * 26****
   */
  userId?: number;
  /**
   * @remarks
   * The nickname of the user.
   * 
   * @example
   * user
   */
  userName?: string;
  /**
   * @remarks
   * The UID of the Alibaba Cloud account.
   * 
   * @example
   * 25936669186260****
   */
  userUid?: string;
  static names(): { [key: string]: string } {
    return {
      accessId: 'AccessId',
      gmtCreate: 'GmtCreate',
      indepAccount: 'IndepAccount',
      instanceId: 'InstanceId',
      originInfo: 'OriginInfo',
      proxyAccessId: 'ProxyAccessId',
      proxyId: 'ProxyId',
      userId: 'UserId',
      userName: 'UserName',
      userUid: 'UserUid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessId: 'string',
      gmtCreate: 'string',
      indepAccount: 'string',
      instanceId: 'number',
      originInfo: 'string',
      proxyAccessId: 'number',
      proxyId: 'number',
      userId: 'number',
      userName: 'string',
      userUid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListProxySQLExecAuditLogResponseBodyProxySQLExecAuditLogListProxySQLExecAuditLog extends $dara.Model {
  /**
   * @remarks
   * Indicates the total number of rows returned after the SQL statement was executed. If an SELECT SQL statement is executed, the return value of this parameter indicates the total number of the queried data rows.
   * 
   * @example
   * 1
   */
  affectRows?: number;
  /**
   * @remarks
   * The amount of time that is consumed to execute the SQL statement. Unit: milliseconds.
   * 
   * @example
   * 1324
   */
  elapsedTime?: number;
  /**
   * @remarks
   * The execution status of the SQL statement. Valid values:
   * 
   * *   **FAIL**: The execution of the SQL statement fails.
   * *   **CANCEL**: The execution of the SQL statement is canceled.
   * *   **SUCCESS**: The SQL statement is executed.
   * 
   * @example
   * SUCCESS
   */
  execState?: string;
  /**
   * @remarks
   * The ID of the database instance.
   * 
   * @example
   * 4***
   */
  instanceId?: number;
  /**
   * @remarks
   * The name of the database instance.
   * 
   * @example
   * pc-uf662nrg017c6****.mysql.polardb.rds.aliyuncs.com:3306【test】
   */
  instanceName?: string;
  /**
   * @remarks
   * The time at which the user executes the SQL statement on the database instance. The value of this parameter must be a timestamp that follows the UNIX time format.
   * 
   * @example
   * 1636876446000
   */
  opTime?: string;
  /**
   * @remarks
   * The description.
   * 
   * @example
   * success
   */
  remark?: string;
  /**
   * @remarks
   * The SQL statement that was executed.
   * 
   * @example
   * select 1;
   */
  SQL?: string;
  /**
   * @remarks
   * The type of the SQL statement. Valid values:
   * 
   * *   **SELECT**
   * *   **INSERT**
   * *   **DELETE**
   * *   **CREATE_TABLE**
   * 
   * >  You can choose Operation Audit > Secure Access Proxy in the top navigation bar of the DMS console to view more types of SQL statements.
   * 
   * @example
   * SELECT
   */
  SQLType?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * test_db
   */
  schemaName?: string;
  /**
   * @remarks
   * The ID of the user.
   * 
   * @example
   * 4****
   */
  userId?: number;
  /**
   * @remarks
   * The nickname of the user.
   * 
   * @example
   * testNickName
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      affectRows: 'AffectRows',
      elapsedTime: 'ElapsedTime',
      execState: 'ExecState',
      instanceId: 'InstanceId',
      instanceName: 'InstanceName',
      opTime: 'OpTime',
      remark: 'Remark',
      SQL: 'SQL',
      SQLType: 'SQLType',
      schemaName: 'SchemaName',
      userId: 'UserId',
      userName: 'UserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      affectRows: 'number',
      elapsedTime: 'number',
      execState: 'string',
      instanceId: 'number',
      instanceName: 'string',
      opTime: 'string',
      remark: 'string',
      SQL: 'string',
      SQLType: 'string',
      schemaName: 'string',
      userId: 'number',
      userName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListProxySQLExecAuditLogResponseBodyProxySQLExecAuditLogList extends $dara.Model {
  proxySQLExecAuditLog?: ListProxySQLExecAuditLogResponseBodyProxySQLExecAuditLogListProxySQLExecAuditLog[];
  static names(): { [key: string]: string } {
    return {
      proxySQLExecAuditLog: 'ProxySQLExecAuditLog',
    };
  }

  static types(): { [key: string]: any } {
    return {
      proxySQLExecAuditLog: { 'type': 'array', 'itemType': ListProxySQLExecAuditLogResponseBodyProxySQLExecAuditLogListProxySQLExecAuditLog },
    };
  }

  validate() {
    if(Array.isArray(this.proxySQLExecAuditLog)) {
      $dara.Model.validateArray(this.proxySQLExecAuditLog);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSLARulesResponseBodySLARuleListSLARule extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow.
   * 
   * @example
   * 11****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the SLA rule.
   * 
   * @example
   * 2
   */
  id?: number;
  /**
   * @remarks
   * The timeout period. Unit: minutes.
   * 
   * @example
   * 1080
   */
  intervalMinutes?: number;
  /**
   * @remarks
   * The ID of the task node.
   * 
   * @example
   * 1
   */
  nodeId?: number;
  /**
   * @remarks
   * The type of the rule. Valid values:
   * 
   * *   **0**: an SLA rule for a task flow
   * *   **1**: an SLA rule for a task node
   * 
   * @example
   * 0
   */
  ruleType?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      id: 'Id',
      intervalMinutes: 'IntervalMinutes',
      nodeId: 'NodeId',
      ruleType: 'RuleType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      id: 'number',
      intervalMinutes: 'number',
      nodeId: 'number',
      ruleType: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSLARulesResponseBodySLARuleList extends $dara.Model {
  SLARule?: ListSLARulesResponseBodySLARuleListSLARule[];
  static names(): { [key: string]: string } {
    return {
      SLARule: 'SLARule',
    };
  }

  static types(): { [key: string]: any } {
    return {
      SLARule: { 'type': 'array', 'itemType': ListSLARulesResponseBodySLARuleListSLARule },
    };
  }

  validate() {
    if(Array.isArray(this.SLARule)) {
      $dara.Model.validateArray(this.SLARule);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSQLExecAuditLogResponseBodySQLExecAuditLogListSQLExecAuditLog extends $dara.Model {
  /**
   * @remarks
   * The number of rows affected by the SQL statement. For example, if you execute an SQL statement to query data, the number of retrieved rows is returned.
   * 
   * @example
   * 2
   */
  affectRows?: number;
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 2157****
   */
  dbId?: number;
  /**
   * @remarks
   * The amount of time consumed by the execution of the SQL statement. Unit: milliseconds.
   * 
   * @example
   * 18
   */
  elapsedTime?: number;
  /**
   * @remarks
   * The execution status of the SQL statement. Valid values:
   * 
   * *   **FAIL**: The SQL statement fails to be executed.
   * *   **NOEXE**: The SQL statement has not been executed.
   * *   **RUNNING**: The SQL statement is being executed.
   * *   **CANCEL**: The execution of the SQL statement is canceled.
   * *   **SUCCESS**: The SQL statement is executed.
   * 
   * @example
   * SUCCESS
   */
  execState?: string;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * 185***
   */
  instanceId?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * >  If the SQL statement takes effect on an instance, the name of the instance is returned.
   * 
   * @example
   * polar123@pc-bp1h9tgq4st9g****.mysql.polardb.rds.aliyuncs.com:3306[polar_qw_test]
   */
  instanceName?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is a physical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The time when the operation specified by the SQL statement was performed on the instance or database.
   * 
   * @example
   * 2021-11-08 11:04:27
   */
  opTime?: string;
  /**
   * @remarks
   * The comment on the SQL statement.
   * 
   * @example
   * success
   */
  remark?: string;
  /**
   * @remarks
   * The SQL statement that was written.
   * 
   * @example
   * SELECT * FROM `polar123`.`p_qw` ORDER BY `id` DESC
   */
  SQL?: string;
  /**
   * @remarks
   * The type of the SQL statement. Valid values:
   * 
   * *   **SELECT**: the SQL statement that is used to query data.
   * *   **INSERT**: the SQL statement that is used to insert data.
   * *   **DELETE**: the SQL statement that is used to delete data.
   * *   **CREATE_TABLE**: the SQL statement that is used to create tables.
   * 
   * >  To view more types of SQL statements, log on to the DMS console and click Security and Specifications. In the left-side navigation pane, click **Operation Audit**. Then, you can view all supported types of SQL statements from the **SQL type** drop-down list.
   * 
   * @example
   * SELECT
   */
  SQLType?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * polar123
   */
  schemaName?: string;
  /**
   * @remarks
   * The ID of the user who wrote the SQL statement.
   * 
   * @example
   * 12****
   */
  userId?: number;
  /**
   * @remarks
   * The nickname of the user who wrote the SQL statement.
   * 
   * @example
   * test_UserName
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      affectRows: 'AffectRows',
      dbId: 'DbId',
      elapsedTime: 'ElapsedTime',
      execState: 'ExecState',
      instanceId: 'InstanceId',
      instanceName: 'InstanceName',
      logic: 'Logic',
      opTime: 'OpTime',
      remark: 'Remark',
      SQL: 'SQL',
      SQLType: 'SQLType',
      schemaName: 'SchemaName',
      userId: 'UserId',
      userName: 'UserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      affectRows: 'number',
      dbId: 'number',
      elapsedTime: 'number',
      execState: 'string',
      instanceId: 'number',
      instanceName: 'string',
      logic: 'boolean',
      opTime: 'string',
      remark: 'string',
      SQL: 'string',
      SQLType: 'string',
      schemaName: 'string',
      userId: 'number',
      userName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSQLExecAuditLogResponseBodySQLExecAuditLogList extends $dara.Model {
  SQLExecAuditLog?: ListSQLExecAuditLogResponseBodySQLExecAuditLogListSQLExecAuditLog[];
  static names(): { [key: string]: string } {
    return {
      SQLExecAuditLog: 'SQLExecAuditLog',
    };
  }

  static types(): { [key: string]: any } {
    return {
      SQLExecAuditLog: { 'type': 'array', 'itemType': ListSQLExecAuditLogResponseBodySQLExecAuditLogListSQLExecAuditLog },
    };
  }

  validate() {
    if(Array.isArray(this.SQLExecAuditLog)) {
      $dara.Model.validateArray(this.SQLExecAuditLog);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSQLReviewOriginSQLRequestOrderActionDetailPage extends $dara.Model {
  /**
   * @remarks
   * The page number.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNumber: 'number',
      pageSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSQLReviewOriginSQLRequestOrderActionDetail extends $dara.Model {
  /**
   * @remarks
   * The review status of the SQL statement. Valid values:
   * 
   * *   **new**: The SQL statement was waiting to be reviewed.
   * *   **unknown**: The SQL statement cannot be parsed.
   * *   **check_not_pass**: The SQL statement failed to pass the review.
   * *   **check_pass**: The SQL statement passed the review.
   * *   **force_pass**: The SQL statement passed the manual review.
   * *   **force_not_pass**: The SQL statement failed to pass the manual review.
   * 
   * @example
   * check_not_pass
   */
  checkStatusResult?: string;
  /**
   * @remarks
   * The ID of the file that contains the SQL statements to be reviewed.
   * 
   * @example
   * 123345
   */
  fileId?: number;
  /**
   * @remarks
   * The pagination information.
   */
  page?: ListSQLReviewOriginSQLRequestOrderActionDetailPage;
  /**
   * @remarks
   * The optimization suggestion for the SQL statement. Valid values:
   * 
   * *   **MUST_IMPROVE**: The SQL statement must be optimized.
   * *   **POTENTIAL_ISSUE**: The SQL statement contains potential issues.
   * *   **SUGGEST_IMPROVE**: We recommend that you optimize the SQL statement.
   * *   **USE_DMS_TOOLKIT**: We recommend that you change schemas without locking tables.
   * *   **USE_DMS_DML_UNLOCK**: We recommend that you change data without locking tables.
   * *   **TABLE_INDEX_SUGGEST**: We recommend that you optimize indexes for the SQL statement.
   * 
   * @example
   * MUST_IMPROVE
   */
  SQLReviewResult?: string;
  static names(): { [key: string]: string } {
    return {
      checkStatusResult: 'CheckStatusResult',
      fileId: 'FileId',
      page: 'Page',
      SQLReviewResult: 'SQLReviewResult',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkStatusResult: 'string',
      fileId: 'number',
      page: ListSQLReviewOriginSQLRequestOrderActionDetailPage,
      SQLReviewResult: 'string',
    };
  }

  validate() {
    if(this.page && typeof (this.page as any).validate === 'function') {
      (this.page as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSQLReviewOriginSQLResponseBodyOriginSQLList extends $dara.Model {
  /**
   * @remarks
   * The review status of the SQL statement. Valid values:
   * 
   * *   **new**: The SQL statement was waiting to be reviewed.
   * *   **unknown**: The SQL statement cannot be parsed.
   * *   **check_not_pass**: The SQL statement failed to pass the review.
   * *   **check_pass**: The SQL statement passed the review.
   * *   **force_pass**: The SQL statement passed the manual review.
   * *   **force_not_pass**: The SQL statement failed to pass the manual review.
   * 
   * @example
   * check_pass
   */
  checkStatus?: string;
  /**
   * @remarks
   * The time when the SQL statement was reviewed.
   * 
   * @example
   * 2021-06-09 21:07:00
   */
  checkedTime?: string;
  /**
   * @remarks
   * The file ID.
   * 
   * @example
   * 123321
   */
  fileId?: number;
  /**
   * @remarks
   * The name of the file.
   * 
   * @example
   * test.sql
   */
  fileName?: string;
  /**
   * @remarks
   * The statistics on the optimization suggestions for SQL statements. The value is a JSON string. Valid values:
   * 
   * *   **MUST_IMPROVE**: The SQL statements must be optimized.
   * *   **POTENTIAL_ISSUE**: The SQL statements contain potential issues.
   * *   **SUGGEST_IMPROVE**: We recommend that you optimize the SQL statements.
   * *   **USEDMSTOOLKIT**: We recommend that you change schemas without locking tables.
   * *   **USEDMSDML_UNLOCK**: We recommend that you change data without locking tables.
   * *   **TABLEINDEXSUGGEST**: We recommend that you optimize indexes for the SQL statements.
   * 
   * @example
   * {"POTENTIAL_ISSUE":1,"SUGGEST_IMPROVE":1}
   */
  reviewSummary?: string;
  /**
   * @remarks
   * The SQL statement in the file.
   * 
   * @example
   * select id from table_name
   */
  SQLContent?: string;
  /**
   * @remarks
   * The ID of the SQL statement.
   * 
   * @example
   * 1111
   */
  SQLId?: number;
  /**
   * @remarks
   * The name of the SQL statement.
   * 
   * @example
   * getByPk
   */
  SQLName?: string;
  /**
   * @remarks
   * The key that is used to query the information about optimization suggestions. You can call the [GetSQLReviewOptimizeDetail](https://help.aliyun.com/document_detail/465919.html) operation to query the details based on this key.
   * 
   * @example
   * a57e54ec5433475ea3082d882fdb89c5
   */
  SQLReviewQueryKey?: string;
  /**
   * @remarks
   * The MD5 hash value that is obtained after the SQL statement is calculated by using a hash algorithm.
   * 
   * @example
   * 95adb6e77a0884d9e50232cb8c5c969d
   */
  sqlHash?: string;
  /**
   * @remarks
   * The description of the review status.
   * 
   * @example
   * passed the test
   */
  statusDesc?: string;
  static names(): { [key: string]: string } {
    return {
      checkStatus: 'CheckStatus',
      checkedTime: 'CheckedTime',
      fileId: 'FileId',
      fileName: 'FileName',
      reviewSummary: 'ReviewSummary',
      SQLContent: 'SQLContent',
      SQLId: 'SQLId',
      SQLName: 'SQLName',
      SQLReviewQueryKey: 'SQLReviewQueryKey',
      sqlHash: 'SqlHash',
      statusDesc: 'StatusDesc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkStatus: 'string',
      checkedTime: 'string',
      fileId: 'number',
      fileName: 'string',
      reviewSummary: 'string',
      SQLContent: 'string',
      SQLId: 'number',
      SQLName: 'string',
      SQLReviewQueryKey: 'string',
      sqlHash: 'string',
      statusDesc: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScenariosResponseBodyScenarioList extends $dara.Model {
  /**
   * @remarks
   * The ID of the user who created the business scenario.
   * 
   * @example
   * 23***
   */
  creatorId?: string;
  /**
   * @remarks
   * The description of the business scenario.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The ID of the business scenario.
   * 
   * @example
   * 41***
   */
  id?: number;
  /**
   * @remarks
   * The name of the business scenario.
   * 
   * @example
   * test
   */
  scenarioName?: string;
  static names(): { [key: string]: string } {
    return {
      creatorId: 'CreatorId',
      description: 'Description',
      id: 'Id',
      scenarioName: 'ScenarioName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creatorId: 'string',
      description: 'string',
      id: 'number',
      scenarioName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnInfoResponseBodySensitiveColumnListSensitiveColumnDefaultDesensitizationRule extends $dara.Model {
  /**
   * @example
   * 101**
   */
  ruleId?: number;
  /**
   * @example
   * test
   */
  ruleName?: string;
  static names(): { [key: string]: string } {
    return {
      ruleId: 'RuleId',
      ruleName: 'RuleName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ruleId: 'number',
      ruleName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnInfoResponseBodySensitiveColumnListSensitiveColumnSemiDesensitizationRuleListSemiDesensitizationRule extends $dara.Model {
  /**
   * @example
   * 10***
   */
  ruleId?: number;
  /**
   * @example
   * test01
   */
  ruleName?: string;
  static names(): { [key: string]: string } {
    return {
      ruleId: 'RuleId',
      ruleName: 'RuleName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ruleId: 'number',
      ruleName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnInfoResponseBodySensitiveColumnListSensitiveColumnSemiDesensitizationRuleList extends $dara.Model {
  semiDesensitizationRule?: ListSensitiveColumnInfoResponseBodySensitiveColumnListSensitiveColumnSemiDesensitizationRuleListSemiDesensitizationRule[];
  static names(): { [key: string]: string } {
    return {
      semiDesensitizationRule: 'SemiDesensitizationRule',
    };
  }

  static types(): { [key: string]: any } {
    return {
      semiDesensitizationRule: { 'type': 'array', 'itemType': ListSensitiveColumnInfoResponseBodySensitiveColumnListSensitiveColumnSemiDesensitizationRuleListSemiDesensitizationRule },
    };
  }

  validate() {
    if(Array.isArray(this.semiDesensitizationRule)) {
      $dara.Model.validateArray(this.semiDesensitizationRule);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnInfoResponseBodySensitiveColumnListSensitiveColumn extends $dara.Model {
  categoryName?: string;
  /**
   * @example
   * test_column
   */
  columnName?: string;
  defaultDesensitizationRule?: ListSensitiveColumnInfoResponseBodySensitiveColumnListSensitiveColumnDefaultDesensitizationRule;
  /**
   * @example
   * 183****
   */
  instanceId?: number;
  /**
   * @example
   * False
   */
  isPlain?: boolean;
  sampleData?: string;
  /**
   * @example
   * test_schema
   */
  schemaName?: string;
  securityLevel?: string;
  semiDesensitizationRuleList?: ListSensitiveColumnInfoResponseBodySensitiveColumnListSensitiveColumnSemiDesensitizationRuleList;
  /**
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * S1
   */
  userSensitivityLevel?: string;
  static names(): { [key: string]: string } {
    return {
      categoryName: 'CategoryName',
      columnName: 'ColumnName',
      defaultDesensitizationRule: 'DefaultDesensitizationRule',
      instanceId: 'InstanceId',
      isPlain: 'IsPlain',
      sampleData: 'SampleData',
      schemaName: 'SchemaName',
      securityLevel: 'SecurityLevel',
      semiDesensitizationRuleList: 'SemiDesensitizationRuleList',
      tableName: 'TableName',
      userSensitivityLevel: 'UserSensitivityLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      categoryName: 'string',
      columnName: 'string',
      defaultDesensitizationRule: ListSensitiveColumnInfoResponseBodySensitiveColumnListSensitiveColumnDefaultDesensitizationRule,
      instanceId: 'number',
      isPlain: 'boolean',
      sampleData: 'string',
      schemaName: 'string',
      securityLevel: 'string',
      semiDesensitizationRuleList: ListSensitiveColumnInfoResponseBodySensitiveColumnListSensitiveColumnSemiDesensitizationRuleList,
      tableName: 'string',
      userSensitivityLevel: 'string',
    };
  }

  validate() {
    if(this.defaultDesensitizationRule && typeof (this.defaultDesensitizationRule as any).validate === 'function') {
      (this.defaultDesensitizationRule as any).validate();
    }
    if(this.semiDesensitizationRuleList && typeof (this.semiDesensitizationRuleList as any).validate === 'function') {
      (this.semiDesensitizationRuleList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnInfoResponseBodySensitiveColumnList extends $dara.Model {
  sensitiveColumn?: ListSensitiveColumnInfoResponseBodySensitiveColumnListSensitiveColumn[];
  static names(): { [key: string]: string } {
    return {
      sensitiveColumn: 'SensitiveColumn',
    };
  }

  static types(): { [key: string]: any } {
    return {
      sensitiveColumn: { 'type': 'array', 'itemType': ListSensitiveColumnInfoResponseBodySensitiveColumnListSensitiveColumn },
    };
  }

  validate() {
    if(Array.isArray(this.sensitiveColumn)) {
      $dara.Model.validateArray(this.sensitiveColumn);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnsResponseBodySensitiveColumnListSensitiveColumn extends $dara.Model {
  /**
   * @remarks
   * The number of sensitive fields.
   * 
   * @example
   * 1
   */
  columnCount?: number;
  /**
   * @remarks
   * The name of the field.
   * 
   * @example
   * test_column
   */
  columnName?: string;
  /**
   * @remarks
   * The type of the de-identification algorithm. Valid values:
   * 
   * *   DEFAULT: All characters are masked. This is the default value.
   * *   FIX_POS: The characters at specific positions are masked.
   * *   FIX_CHAR: Specific characters are masked.
   * 
   * @example
   * DEFAULT
   */
  functionType?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * test_schema
   */
  schemaName?: string;
  /**
   * @remarks
   * The sensitivity level of the field. Valid values:
   * 
   * *   SENSITIVE
   * *   CONFIDENTIAL
   * 
   * @example
   * SENSITIVE
   */
  securityLevel?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      columnCount: 'ColumnCount',
      columnName: 'ColumnName',
      functionType: 'FunctionType',
      schemaName: 'SchemaName',
      securityLevel: 'SecurityLevel',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnCount: 'number',
      columnName: 'string',
      functionType: 'string',
      schemaName: 'string',
      securityLevel: 'string',
      tableName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnsResponseBodySensitiveColumnList extends $dara.Model {
  sensitiveColumn?: ListSensitiveColumnsResponseBodySensitiveColumnListSensitiveColumn[];
  static names(): { [key: string]: string } {
    return {
      sensitiveColumn: 'SensitiveColumn',
    };
  }

  static types(): { [key: string]: any } {
    return {
      sensitiveColumn: { 'type': 'array', 'itemType': ListSensitiveColumnsResponseBodySensitiveColumnListSensitiveColumn },
    };
  }

  validate() {
    if(Array.isArray(this.sensitiveColumn)) {
      $dara.Model.validateArray(this.sensitiveColumn);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnsDetailResponseBodySensitiveColumnsDetailListSensitiveColumnsDetail extends $dara.Model {
  /**
   * @remarks
   * The description of the field.
   * 
   * @example
   * test
   */
  columnDescription?: string;
  /**
   * @remarks
   * The name of the field.
   * 
   * @example
   * ColumnName_test
   */
  columnName?: string;
  /**
   * @remarks
   * The data type of the field.
   * 
   * @example
   * varchar(32)
   */
  columnType?: string;
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 1860****
   */
  dbId?: number;
  /**
   * @remarks
   * The type of the database.
   * 
   * @example
   * mysql
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment to which the database belongs.
   * 
   * @example
   * product
   */
  envType?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is not a logical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * SchemaName_test
   */
  schemaName?: string;
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * @example
   * test@xxx:3306
   */
  searchName?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * test
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      columnDescription: 'ColumnDescription',
      columnName: 'ColumnName',
      columnType: 'ColumnType',
      dbId: 'DbId',
      dbType: 'DbType',
      envType: 'EnvType',
      logic: 'Logic',
      schemaName: 'SchemaName',
      searchName: 'SearchName',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnDescription: 'string',
      columnName: 'string',
      columnType: 'string',
      dbId: 'number',
      dbType: 'string',
      envType: 'string',
      logic: 'boolean',
      schemaName: 'string',
      searchName: 'string',
      tableName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnsDetailResponseBodySensitiveColumnsDetailList extends $dara.Model {
  sensitiveColumnsDetail?: ListSensitiveColumnsDetailResponseBodySensitiveColumnsDetailListSensitiveColumnsDetail[];
  static names(): { [key: string]: string } {
    return {
      sensitiveColumnsDetail: 'SensitiveColumnsDetail',
    };
  }

  static types(): { [key: string]: any } {
    return {
      sensitiveColumnsDetail: { 'type': 'array', 'itemType': ListSensitiveColumnsDetailResponseBodySensitiveColumnsDetailListSensitiveColumnsDetail },
    };
  }

  validate() {
    if(Array.isArray(this.sensitiveColumnsDetail)) {
      $dara.Model.validateArray(this.sensitiveColumnsDetail);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveDataAuditLogResponseBodySensitiveDataAuditLogListSensitiveDataLog extends $dara.Model {
  /**
   * @remarks
   * The name of the column that contains sensitive data.
   * 
   * @example
   * ExampleColumnName
   */
  columnName?: string;
  /**
   * @remarks
   * The permission that the user has on the column. Valid values:
   * 
   * *   **No permission**
   * *   **Partial redaction**
   * *   **Plaintext**
   * *   **Change**
   * *   **Enable data masking**
   * *   **Disable data masking**
   * 
   * @example
   * Change
   */
  columnPermissionType?: string;
  /**
   * @remarks
   * The algorithm used for data masking.
   * 
   * @example
   * Default - Full redaction
   */
  desensitizationRule?: string;
  /**
   * @remarks
   * The sensitivity level of the data. Valid values:
   * 
   * *   **Low**
   * *   **Medium**
   * *   **High**
   * 
   * @example
   * Low
   */
  securityLevel?: string;
  /**
   * @remarks
   * The name of the table that stores the sensitive data.
   * 
   * @example
   * ExampleTableName
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      columnPermissionType: 'ColumnPermissionType',
      desensitizationRule: 'DesensitizationRule',
      securityLevel: 'SecurityLevel',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      columnPermissionType: 'string',
      desensitizationRule: 'string',
      securityLevel: 'string',
      tableName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveDataAuditLogResponseBodySensitiveDataAuditLogList extends $dara.Model {
  /**
   * @remarks
   * The name of the database that stores the sensitive data.
   * 
   * @example
   * ExampleDbName@xxx.xxx.xxx.xxx:3306
   */
  dbDisplayName?: string;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * 12****
   */
  instanceId?: number;
  /**
   * @remarks
   * The name of the function module whose audit logs were queried.
   * 
   * @example
   * SQL_CONSOLE
   */
  moduleName?: string;
  /**
   * @remarks
   * The time when the operation was performed. The time is in the yyyy-MM-DD HH:mm:ss format.
   * 
   * @example
   * 2022-11-18 10:01:00
   */
  opTime?: string;
  /**
   * @remarks
   * The logs for sensitive data.
   */
  sensitiveDataLog?: ListSensitiveDataAuditLogResponseBodySensitiveDataAuditLogListSensitiveDataLog[];
  /**
   * @remarks
   * The details of the object on which the operation was performed. The value of this parameter is in one of the following formats:
   * 
   * *   Object name - object ID
   * *   Object name (object ID)
   * 
   * @example
   * Ticket - 1\\*\\*\\*\\*
   */
  targetName?: string;
  /**
   * @remarks
   * The user ID of the requester.
   * 
   * @example
   * 1**
   */
  userId?: number;
  /**
   * @remarks
   * The username of the requester.
   * 
   * @example
   * ExampleUserName
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      dbDisplayName: 'DbDisplayName',
      instanceId: 'InstanceId',
      moduleName: 'ModuleName',
      opTime: 'OpTime',
      sensitiveDataLog: 'SensitiveDataLog',
      targetName: 'TargetName',
      userId: 'UserId',
      userName: 'UserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbDisplayName: 'string',
      instanceId: 'number',
      moduleName: 'string',
      opTime: 'string',
      sensitiveDataLog: { 'type': 'array', 'itemType': ListSensitiveDataAuditLogResponseBodySensitiveDataAuditLogListSensitiveDataLog },
      targetName: 'string',
      userId: 'number',
      userName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.sensitiveDataLog)) {
      $dara.Model.validateArray(this.sensitiveDataLog);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitivityLevelResponseBodySensitivityLevelList extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the fields of the sensitive level are displayed in plaintext.
   * 
   * @example
   * true
   */
  isPlain?: boolean;
  /**
   * @remarks
   * The name of the sensitive level.
   * 
   * @example
   * S2
   */
  name?: string;
  /**
   * @remarks
   * The ID of the classification template.
   * 
   * @example
   * 1070
   */
  templateId?: string;
  /**
   * @remarks
   * The type of the classification template. Valid values:
   * 
   * *   **INNER**: a built-in template.
   * *   **USER_DEFINE**: a custom template.
   * 
   * @example
   * INNER
   */
  templateType?: string;
  static names(): { [key: string]: string } {
    return {
      isPlain: 'IsPlain',
      name: 'Name',
      templateId: 'TemplateId',
      templateType: 'TemplateType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isPlain: 'boolean',
      name: 'string',
      templateId: 'string',
      templateType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListStandardGroupsResponseBodyStandardGroupList extends $dara.Model {
  /**
   * @remarks
   * The type of the database engine. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * @example
   * mysql
   */
  dbType?: string;
  /**
   * @remarks
   * The description of the security rule set.
   * 
   * @example
   * test_rule
   */
  description?: string;
  /**
   * @remarks
   * The ID of the security rule set.
   * 
   * @example
   * 41****
   */
  groupId?: number;
  /**
   * @remarks
   * The control mode. Valid values:
   * 
   * *   **NONE_CONTROL**: Flexible Management
   * *   **STABLE**: Stable Change
   * *   **COMMON**: Security Collaboration
   * 
   * @example
   * COMMON
   */
  groupMode?: string;
  /**
   * @remarks
   * The name of the security rule set.
   * 
   * @example
   * test_group
   */
  groupName?: string;
  /**
   * @remarks
   * The ID of the user who queries the security sets.
   * 
   * @example
   * 51****
   */
  lastMenderId?: number;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      description: 'Description',
      groupId: 'GroupId',
      groupMode: 'GroupMode',
      groupName: 'GroupName',
      lastMenderId: 'LastMenderId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      description: 'string',
      groupId: 'number',
      groupMode: 'string',
      groupName: 'string',
      lastMenderId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTablesResponseBodyTableListTableOwnerIdList extends $dara.Model {
  ownerIds?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerIds: 'OwnerIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTablesResponseBodyTableListTableOwnerNameList extends $dara.Model {
  ownerNames?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerNames: 'OwnerNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerNames)) {
      $dara.Model.validateArray(this.ownerNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTablesResponseBodyTableListTable extends $dara.Model {
  /**
   * @remarks
   * The ID of the physical database.
   * 
   * @example
   * 1860****
   */
  databaseId?: string;
  /**
   * @remarks
   * The description of the table.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The encoding format of the table.
   * 
   * @example
   * utf8
   */
  encoding?: string;
  /**
   * @remarks
   * The engine of the table.
   * 
   * @example
   * InnoDB
   */
  engine?: string;
  /**
   * @remarks
   * The number of rows in the table. This is a statistical value and does not indicate the actual number of rows.
   * 
   * @example
   * 10085
   */
  numRows?: number;
  /**
   * @remarks
   * The ID list of the table owners.
   */
  ownerIdList?: ListTablesResponseBodyTableListTableOwnerIdList;
  /**
   * @remarks
   * The nickname list of the table owners.
   */
  ownerNameList?: ListTablesResponseBodyTableListTableOwnerNameList;
  /**
   * @remarks
   * The storage space that is occupied by the table. This is a statistical value and does not indicate the accurate storage space. Unit: MB.
   * 
   * @example
   * 1024
   */
  storeCapacity?: number;
  /**
   * @remarks
   * The GUID of the table in DMS.
   * 
   * @example
   * IDB_44743****.qntest.consumption_records
   */
  tableGuid?: string;
  /**
   * @remarks
   * The ID of the table.
   * 
   * @example
   * 44743****
   */
  tableId?: string;
  /**
   * @remarks
   * The table name.
   * 
   * @example
   * consumption_records
   */
  tableName?: string;
  /**
   * @remarks
   * The database in which the table resides.
   * 
   * @example
   * qntest
   */
  tableSchemaName?: string;
  /**
   * @remarks
   * The type of the table. Default value: NORMAL.
   * 
   * @example
   * NORMAL
   */
  tableType?: string;
  static names(): { [key: string]: string } {
    return {
      databaseId: 'DatabaseId',
      description: 'Description',
      encoding: 'Encoding',
      engine: 'Engine',
      numRows: 'NumRows',
      ownerIdList: 'OwnerIdList',
      ownerNameList: 'OwnerNameList',
      storeCapacity: 'StoreCapacity',
      tableGuid: 'TableGuid',
      tableId: 'TableId',
      tableName: 'TableName',
      tableSchemaName: 'TableSchemaName',
      tableType: 'TableType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databaseId: 'string',
      description: 'string',
      encoding: 'string',
      engine: 'string',
      numRows: 'number',
      ownerIdList: ListTablesResponseBodyTableListTableOwnerIdList,
      ownerNameList: ListTablesResponseBodyTableListTableOwnerNameList,
      storeCapacity: 'number',
      tableGuid: 'string',
      tableId: 'string',
      tableName: 'string',
      tableSchemaName: 'string',
      tableType: 'string',
    };
  }

  validate() {
    if(this.ownerIdList && typeof (this.ownerIdList as any).validate === 'function') {
      (this.ownerIdList as any).validate();
    }
    if(this.ownerNameList && typeof (this.ownerNameList as any).validate === 'function') {
      (this.ownerNameList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTablesResponseBodyTableList extends $dara.Model {
  table?: ListTablesResponseBodyTableListTable[];
  static names(): { [key: string]: string } {
    return {
      table: 'Table',
    };
  }

  static types(): { [key: string]: any } {
    return {
      table: { 'type': 'array', 'itemType': ListTablesResponseBodyTableListTable },
    };
  }

  validate() {
    if(Array.isArray(this.table)) {
      $dara.Model.validateArray(this.table);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowResponseBodyTaskFlowListTaskFlow extends $dara.Model {
  /**
   * @remarks
   * The ID of the user who creates the task flow.
   * 
   * @example
   * 51****
   */
  creatorId?: string;
  /**
   * @remarks
   * The name of the user who creates the task flow.
   * 
   * @example
   * Creator_NickName
   */
  creatorNickName?: string;
  /**
   * @remarks
   * The name of the task flow owner.
   * 
   * @example
   * Owner_NickName
   */
  dagOwnerNickName?: string;
  /**
   * @remarks
   * The ID of the latest deployment record.
   * 
   * @example
   * 12**
   */
  deployId?: number;
  /**
   * @remarks
   * The ID of the task flow.
   * 
   * @example
   * 134137****
   */
  id?: number;
  /**
   * @remarks
   * The status of the latest execution. Valid values:
   * 
   * *   **0**: invalid.
   * *   **1**: scheduling disabled.
   * *   **2**: waiting to be scheduled.
   * 
   * @example
   * 0
   */
  latestInstanceStatus?: number;
  /**
   * @remarks
   * The time when the latest execution record was generated.
   * 
   * @example
   * 2022-04-13
   */
  latestInstanceTime?: string;
  /**
   * @remarks
   * The status of the task flow. Valid values:
   * 
   * *   **0**: The task flow is invalid.
   * *   **1**: Scheduling is disabled for the task flow.
   * *   **2**: The task flow is waiting to be scheduled.
   * 
   * @example
   * 2
   */
  status?: number;
  static names(): { [key: string]: string } {
    return {
      creatorId: 'CreatorId',
      creatorNickName: 'CreatorNickName',
      dagOwnerNickName: 'DagOwnerNickName',
      deployId: 'DeployId',
      id: 'Id',
      latestInstanceStatus: 'LatestInstanceStatus',
      latestInstanceTime: 'LatestInstanceTime',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creatorId: 'string',
      creatorNickName: 'string',
      dagOwnerNickName: 'string',
      deployId: 'number',
      id: 'number',
      latestInstanceStatus: 'number',
      latestInstanceTime: 'string',
      status: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowResponseBodyTaskFlowList extends $dara.Model {
  taskFlow?: ListTaskFlowResponseBodyTaskFlowListTaskFlow[];
  static names(): { [key: string]: string } {
    return {
      taskFlow: 'TaskFlow',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskFlow: { 'type': 'array', 'itemType': ListTaskFlowResponseBodyTaskFlowListTaskFlow },
    };
  }

  validate() {
    if(Array.isArray(this.taskFlow)) {
      $dara.Model.validateArray(this.taskFlow);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowConstantsResponseBodyDagConstantsDagConstant extends $dara.Model {
  /**
   * @remarks
   * The constant key.
   * 
   * @example
   * example
   */
  key?: string;
  /**
   * @remarks
   * The constant value.
   * 
   * @example
   * 0
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowConstantsResponseBodyDagConstants extends $dara.Model {
  dagConstant?: ListTaskFlowConstantsResponseBodyDagConstantsDagConstant[];
  static names(): { [key: string]: string } {
    return {
      dagConstant: 'DagConstant',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagConstant: { 'type': 'array', 'itemType': ListTaskFlowConstantsResponseBodyDagConstantsDagConstant },
    };
  }

  validate() {
    if(Array.isArray(this.dagConstant)) {
      $dara.Model.validateArray(this.dagConstant);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowCooperatorsResponseBodyCooperatorListCooperator extends $dara.Model {
  /**
   * @remarks
   * The email address of the user.
   * 
   * @example
   * test@XX.com
   */
  email?: string;
  /**
   * @remarks
   * The username.
   * 
   * @example
   * name
   */
  loginName?: string;
  /**
   * @remarks
   * The alias of the user.
   * 
   * @example
   * name
   */
  nickName?: string;
  /**
   * @remarks
   * userId.
   * 
   * @example
   * 123
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      email: 'Email',
      loginName: 'LoginName',
      nickName: 'NickName',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      email: 'string',
      loginName: 'string',
      nickName: 'string',
      userId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowCooperatorsResponseBodyCooperatorList extends $dara.Model {
  cooperator?: ListTaskFlowCooperatorsResponseBodyCooperatorListCooperator[];
  static names(): { [key: string]: string } {
    return {
      cooperator: 'Cooperator',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cooperator: { 'type': 'array', 'itemType': ListTaskFlowCooperatorsResponseBodyCooperatorListCooperator },
    };
  }

  validate() {
    if(Array.isArray(this.cooperator)) {
      $dara.Model.validateArray(this.cooperator);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowEdgesByConditionResponseBodyEdgesEdge extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow edge.
   * 
   * @example
   * 24***
   */
  id?: number;
  /**
   * @remarks
   * The ID of the end node on the edge.
   * 
   * @example
   * 44***
   */
  nodeEnd?: number;
  /**
   * @remarks
   * The ID of the start node on the edge.
   * 
   * @example
   * 44***
   */
  nodeFrom?: number;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      nodeEnd: 'NodeEnd',
      nodeFrom: 'NodeFrom',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      nodeEnd: 'number',
      nodeFrom: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowEdgesByConditionResponseBodyEdges extends $dara.Model {
  edge?: ListTaskFlowEdgesByConditionResponseBodyEdgesEdge[];
  static names(): { [key: string]: string } {
    return {
      edge: 'Edge',
    };
  }

  static types(): { [key: string]: any } {
    return {
      edge: { 'type': 'array', 'itemType': ListTaskFlowEdgesByConditionResponseBodyEdgesEdge },
    };
  }

  validate() {
    if(Array.isArray(this.edge)) {
      $dara.Model.validateArray(this.edge);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowInstanceResponseBodyDAGInstanceListDAGInstance extends $dara.Model {
  /**
   * @remarks
   * The business time of the task flow. The time is displayed in the yyyy-MM-DD HH:mm:ss format.
   * 
   * @example
   * 2021-11-10 14:37:26
   */
  businessTime?: string;
  /**
   * @remarks
   * The ID of the task flow.
   * 
   * @example
   * 7***
   */
  dagId?: string;
  /**
   * @remarks
   * The name of the task flow.
   * 
   * @example
   * Spark_SQL_test
   */
  dagName?: string;
  /**
   * @remarks
   * The version of the task flow.
   * 
   * @example
   * []
   */
  dagVersion?: string;
  /**
   * @remarks
   * The time when the execution of the task flow was complete. The time is displayed in the yyyy-MM-DD HH:mm:ss format.
   * 
   * @example
   * 2021-11-11 14:38:57
   */
  endTime?: string;
  /**
   * @remarks
   * The ID of the previously published version of the task flow.
   * 
   * @example
   * 2****
   */
  historyDagId?: number;
  /**
   * @remarks
   * The ID of the execution record.
   * 
   * @example
   * 9234
   */
  id?: number;
  /**
   * @remarks
   * The description of the task.
   * 
   * @example
   * test
   */
  message?: string;
  /**
   * @remarks
   * The name of the task flow owner.
   * 
   * @example
   * test_name
   */
  ownerName?: string;
  /**
   * @remarks
   * The status of the task flow. Valid values:
   * 
   * *   **0**: The task flow is waiting to be scheduled.
   * *   **1**: The task flow is being executed.
   * *   **2**: The task flow is paused.
   * *   **3**: The task flow failed.
   * *   **4**: The task flow is executed.
   * *   **5**: The task flow is complete.
   * 
   * @example
   * 4
   */
  status?: number;
  /**
   * @remarks
   * The mode in which the task flow is triggered. Valid values:
   * 
   * *   **0**: The task flow is automatically triggered based on periodic scheduling.
   * *   **1**: The task flow is manually triggered.
   * 
   * @example
   * 1
   */
  triggerType?: number;
  /**
   * @remarks
   * The time when the execution of the task flow was start. The time is displayed in the yyyy-MM-DD HH:mm:ss format.
   * 
   * @example
   * 2021-11-11 14:35:57
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      businessTime: 'BusinessTime',
      dagId: 'DagId',
      dagName: 'DagName',
      dagVersion: 'DagVersion',
      endTime: 'EndTime',
      historyDagId: 'HistoryDagId',
      id: 'Id',
      message: 'Message',
      ownerName: 'OwnerName',
      status: 'Status',
      triggerType: 'TriggerType',
      startTime: 'startTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      businessTime: 'string',
      dagId: 'string',
      dagName: 'string',
      dagVersion: 'string',
      endTime: 'string',
      historyDagId: 'number',
      id: 'number',
      message: 'string',
      ownerName: 'string',
      status: 'number',
      triggerType: 'number',
      startTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowInstanceResponseBodyDAGInstanceList extends $dara.Model {
  DAGInstance?: ListTaskFlowInstanceResponseBodyDAGInstanceListDAGInstance[];
  static names(): { [key: string]: string } {
    return {
      DAGInstance: 'DAGInstance',
    };
  }

  static types(): { [key: string]: any } {
    return {
      DAGInstance: { 'type': 'array', 'itemType': ListTaskFlowInstanceResponseBodyDAGInstanceListDAGInstance },
    };
  }

  validate() {
    if(Array.isArray(this.DAGInstance)) {
      $dara.Model.validateArray(this.DAGInstance);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowTimeVariablesResponseBodyTimeVariablesTimeVariable extends $dara.Model {
  /**
   * @remarks
   * The name of the time variable.
   * 
   * @example
   * time_test
   */
  name?: string;
  /**
   * @remarks
   * The format of the time variable.
   * 
   * @example
   * 2018-09-26|+7h
   */
  pattern?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'Name',
      pattern: 'Pattern',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      pattern: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowTimeVariablesResponseBodyTimeVariables extends $dara.Model {
  timeVariable?: ListTaskFlowTimeVariablesResponseBodyTimeVariablesTimeVariable[];
  static names(): { [key: string]: string } {
    return {
      timeVariable: 'TimeVariable',
    };
  }

  static types(): { [key: string]: any } {
    return {
      timeVariable: { 'type': 'array', 'itemType': ListTaskFlowTimeVariablesResponseBodyTimeVariablesTimeVariable },
    };
  }

  validate() {
    if(Array.isArray(this.timeVariable)) {
      $dara.Model.validateArray(this.timeVariable);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowsByPageResponseBodyTaskFlowListTaskFlow extends $dara.Model {
  /**
   * @remarks
   * The ID of the user who created the task flow.
   * 
   * @example
   * 51****
   */
  creatorId?: string;
  /**
   * @remarks
   * The username of the user who created the task flow.
   * 
   * @example
   * Creator_NickName
   */
  creatorNickName?: string;
  /**
   * @remarks
   * The start time of scheduled scheduling. The task flow is not scheduled before this point in time.
   * 
   * @example
   * 1970-01-01
   */
  cronBeginDate?: string;
  /**
   * @remarks
   * The end time of scheduled scheduling. The task flow is not scheduled after this point in time.
   * 
   * @example
   * 2023-01-01
   */
  cronEndDate?: string;
  /**
   * @remarks
   * Scheduled Cron.
   * 
   * @example
   * 0 0 1 * * ? *
   */
  cronStr?: string;
  /**
   * @remarks
   * Whether to enable scheduled scheduling.
   * 
   * @example
   * false
   */
  cronSwitch?: boolean;
  /**
   * @remarks
   * Scheduling cycle type. Valid values:
   * - **2**: Hourly scheduling
   * - **3**: Daily scheduling
   * - **4**: Weekly scheduling
   * - **5**: Monthly scheduling
   * 
   * @example
   * 2
   */
  cronType?: number;
  /**
   * @remarks
   * The name of the task flow.
   * 
   * @example
   * poc_task_test
   */
  dagName?: string;
  /**
   * @remarks
   * The user ID of the task flow owner.
   * 
   * @example
   * 12***89
   */
  dagOwnerId?: string;
  /**
   * @remarks
   * The username of the owner of the task flow.
   * 
   * @example
   * Owner_NickName
   */
  dagOwnerNickName?: string;
  /**
   * @remarks
   * The ID of the last deployment record of the task flow.
   * 
   * @example
   * 65***
   */
  deployId?: number;
  /**
   * @remarks
   * The description of the task flow.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The ID of the task flow.
   * 
   * @example
   * 7***
   */
  id?: number;
  /**
   * @remarks
   * The status of the last execution of the task flow. Valid values:
   * 
   * *   **0**: invalid
   * *   **1**: scheduling disabled
   * *   **2**: waiting to be scheduled
   * 
   * @example
   * 0
   */
  latestInstanceStatus?: number;
  /**
   * @remarks
   * The time when the last execution record was created.
   * 
   * @example
   * 2022-04-13
   */
  latestInstanceTime?: string;
  /**
   * @remarks
   * The ID of the application scenario.
   * 
   * @example
   * 1245
   */
  scenarioId?: string;
  /**
   * @remarks
   * Event scheduling configuration, JSON string format.
   * 
   * @example
   * {\\"triggerType\\":\\"1\\",\\"specificTime\\":\\"2022-11-15 11:59\\"}
   */
  scheduleParam?: string;
  /**
   * @remarks
   * The status of the task flow. Valid values:
   * 
   * *   **0**: invalid
   * *   **1**: scheduling disabled
   * *   **2**: waiting to be scheduled
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * Time zone setting. Default value: East 8(Asia/Shanghai).
   * 
   * @example
   * Asia/Shanghai
   */
  timeZoneId?: string;
  /**
   * @remarks
   * The trigger type. Valid values:
   * - **0**: Periodic scheduling
   * - **1**: Run manually
   * 
   * @example
   * 0
   */
  triggerType?: number;
  static names(): { [key: string]: string } {
    return {
      creatorId: 'CreatorId',
      creatorNickName: 'CreatorNickName',
      cronBeginDate: 'CronBeginDate',
      cronEndDate: 'CronEndDate',
      cronStr: 'CronStr',
      cronSwitch: 'CronSwitch',
      cronType: 'CronType',
      dagName: 'DagName',
      dagOwnerId: 'DagOwnerId',
      dagOwnerNickName: 'DagOwnerNickName',
      deployId: 'DeployId',
      description: 'Description',
      id: 'Id',
      latestInstanceStatus: 'LatestInstanceStatus',
      latestInstanceTime: 'LatestInstanceTime',
      scenarioId: 'ScenarioId',
      scheduleParam: 'ScheduleParam',
      status: 'Status',
      timeZoneId: 'TimeZoneId',
      triggerType: 'TriggerType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creatorId: 'string',
      creatorNickName: 'string',
      cronBeginDate: 'string',
      cronEndDate: 'string',
      cronStr: 'string',
      cronSwitch: 'boolean',
      cronType: 'number',
      dagName: 'string',
      dagOwnerId: 'string',
      dagOwnerNickName: 'string',
      deployId: 'number',
      description: 'string',
      id: 'number',
      latestInstanceStatus: 'number',
      latestInstanceTime: 'string',
      scenarioId: 'string',
      scheduleParam: 'string',
      status: 'number',
      timeZoneId: 'string',
      triggerType: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowsByPageResponseBodyTaskFlowList extends $dara.Model {
  taskFlow?: ListTaskFlowsByPageResponseBodyTaskFlowListTaskFlow[];
  static names(): { [key: string]: string } {
    return {
      taskFlow: 'TaskFlow',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskFlow: { 'type': 'array', 'itemType': ListTaskFlowsByPageResponseBodyTaskFlowListTaskFlow },
    };
  }

  validate() {
    if(Array.isArray(this.taskFlow)) {
      $dara.Model.validateArray(this.taskFlow);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTasksInTaskFlowResponseBodyTasksTask extends $dara.Model {
  /**
   * @remarks
   * The position of the node on the Directed Acyclic Graph (DAG).
   * 
   * @example
   * {\\"x\\":435,\\"y\\":192,\\"layoutType\\":\\"Horizontal\\"}
   */
  graphParam?: string;
  /**
   * @remarks
   * The advanced configuration for the node.
   * 
   * @example
   * {     "rerun":{    "rerunEnable":true,      "rerunCount":1,   "rerunInterval":10 //  }}
   */
  nodeConfig?: string;
  /**
   * @remarks
   * The configuration for the node.
   * 
   * @example
   * {     "dbId":123***,  "sql":"",    "dbType":"polardb" }
   */
  nodeContent?: string;
  /**
   * @remarks
   * The ID of the node.
   * 
   * @example
   * 92***
   */
  nodeId?: string;
  /**
   * @remarks
   * The name of the node.
   * 
   * @example
   * Cross-Database Spark SQL-1
   */
  nodeName?: string;
  /**
   * @remarks
   * The output variables for the task.
   * 
   * @example
   * {  "outputs":[{ { "row":0, "column":-1,                  "combiner":"," }            "extractMethod":"{\\"row\\":0,\\"column\\":-1,\\"combiner\\":\\",\\"}",         "variableName":"var",    "description":"For demo"} ] }
   */
  nodeOutput?: string;
  /**
   * @remarks
   * The type of the node. For more information about the valid values for this parameter, see [NodeType parameter](https://help.aliyun.com/document_detail/424705.html).
   * 
   * @example
   * SPARK_SQL
   */
  nodeType?: string;
  /**
   * @remarks
   * The time variables configured for the node.
   * 
   * @example
   * {\\"variables\\":[{\\"name\\":\\"test1\\",\\"pattern\\":\\"yyyy-MM-dd
   */
  timeVariables?: string;
  static names(): { [key: string]: string } {
    return {
      graphParam: 'GraphParam',
      nodeConfig: 'NodeConfig',
      nodeContent: 'NodeContent',
      nodeId: 'NodeId',
      nodeName: 'NodeName',
      nodeOutput: 'NodeOutput',
      nodeType: 'NodeType',
      timeVariables: 'TimeVariables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      graphParam: 'string',
      nodeConfig: 'string',
      nodeContent: 'string',
      nodeId: 'string',
      nodeName: 'string',
      nodeOutput: 'string',
      nodeType: 'string',
      timeVariables: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTasksInTaskFlowResponseBodyTasks extends $dara.Model {
  task?: ListTasksInTaskFlowResponseBodyTasksTask[];
  static names(): { [key: string]: string } {
    return {
      task: 'Task',
    };
  }

  static types(): { [key: string]: any } {
    return {
      task: { 'type': 'array', 'itemType': ListTasksInTaskFlowResponseBodyTasksTask },
    };
  }

  validate() {
    if(Array.isArray(this.task)) {
      $dara.Model.validateArray(this.task);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserPermissionsResponseBodyUserPermissionsUserPermissionPermDetailsPermDetail extends $dara.Model {
  /**
   * @remarks
   * The time when the permissions were granted.
   * 
   * @example
   * 2019-12-12 00:00:00
   */
  createDate?: string;
  /**
   * @remarks
   * The time when the permissions expire.
   * 
   * @example
   * 2020-12-12 00:00:00
   */
  expireDate?: string;
  /**
   * @remarks
   * This parameter is reserved.
   * 
   * @example
   * xxx
   */
  extraData?: string;
  /**
   * @remarks
   * The user who grants the permissions.
   * 
   * @example
   * xxx authorization
   */
  originFrom?: string;
  /**
   * @remarks
   * The type of the permissions. Valid values:
   * 
   * *   QUERY: the query permissions
   * *   EXPORT: the export permissions
   * *   CORRECT: the change permissions
   * 
   * @example
   * QUERY
   */
  permType?: string;
  /**
   * @remarks
   * The ID of the authorization record.
   * 
   * @example
   * 758****
   */
  userAccessId?: string;
  static names(): { [key: string]: string } {
    return {
      createDate: 'CreateDate',
      expireDate: 'ExpireDate',
      extraData: 'ExtraData',
      originFrom: 'OriginFrom',
      permType: 'PermType',
      userAccessId: 'UserAccessId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createDate: 'string',
      expireDate: 'string',
      extraData: 'string',
      originFrom: 'string',
      permType: 'string',
      userAccessId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserPermissionsResponseBodyUserPermissionsUserPermissionPermDetails extends $dara.Model {
  permDetail?: ListUserPermissionsResponseBodyUserPermissionsUserPermissionPermDetailsPermDetail[];
  static names(): { [key: string]: string } {
    return {
      permDetail: 'PermDetail',
    };
  }

  static types(): { [key: string]: any } {
    return {
      permDetail: { 'type': 'array', 'itemType': ListUserPermissionsResponseBodyUserPermissionsUserPermissionPermDetailsPermDetail },
    };
  }

  validate() {
    if(Array.isArray(this.permDetail)) {
      $dara.Model.validateArray(this.permDetail);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserPermissionsResponseBodyUserPermissionsUserPermission extends $dara.Model {
  /**
   * @remarks
   * The alias of the instance.
   * 
   * @example
   * instance_alias
   */
  alias?: string;
  /**
   * @remarks
   * The name of the field.
   * 
   * @example
   * column_name
   */
  columnName?: string;
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 1860****
   */
  dbId?: string;
  /**
   * @remarks
   * The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://www.alibabacloud.com/help/en/data-management-service/latest/dbtype-parameter).
   * 
   * @example
   * polardb
   */
  dbType?: string;
  /**
   * @remarks
   * The permissions on a specific type of objects that are granted to the user. Valid values: 
   * 
   * - DATABASE: permissions on physical databases
   * - LOGIC_DATABASE: permissions on logical databases
   * - TABLE: permissions on physical tables
   * - LOGIC_TABLE: permissions on logical tables
   * 
   * @example
   * DATABASE
   */
  dsType?: string;
  /**
   * @remarks
   * The type of the environment to which the database belongs. Valid values:
   * 
   * - product: production environment
   * - dev: development environment
   * - pre: staging environment
   * - test: test environment
   * - sit: SIT environment
   * - uat: UAT environment
   * - pet: stress testing environment
   * - stag: STAG environment
   * 
   * @example
   * dev
   */
  envType?: string;
  /**
   * @remarks
   * The endpoint that is used to connect the database.
   * 
   * @example
   * rm-bp144d5ky4l4r****
   */
  host?: string;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * 174****
   */
  instanceId?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   true: The database is a logical database.
   * *   false: The database is a physical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The details of permissions.
   */
  permDetails?: ListUserPermissionsResponseBodyUserPermissionsUserPermissionPermDetails;
  /**
   * @remarks
   * The port that is used to connect to the instance.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * test_db
   */
  schemaName?: string;
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * @example
   * test_db@xxx:3306
   */
  searchName?: string;
  /**
   * @remarks
   * The ID of the table.
   * 
   * @example
   * 13434
   */
  tableId?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @remarks
   * The ID of the user.
   * 
   * @example
   * 51****
   */
  userId?: string;
  /**
   * @remarks
   * The nickname of the user.
   * 
   * @example
   * nick_name
   */
  userNickName?: string;
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      columnName: 'ColumnName',
      dbId: 'DbId',
      dbType: 'DbType',
      dsType: 'DsType',
      envType: 'EnvType',
      host: 'Host',
      instanceId: 'InstanceId',
      logic: 'Logic',
      permDetails: 'PermDetails',
      port: 'Port',
      schemaName: 'SchemaName',
      searchName: 'SearchName',
      tableId: 'TableId',
      tableName: 'TableName',
      userId: 'UserId',
      userNickName: 'UserNickName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      columnName: 'string',
      dbId: 'string',
      dbType: 'string',
      dsType: 'string',
      envType: 'string',
      host: 'string',
      instanceId: 'string',
      logic: 'boolean',
      permDetails: ListUserPermissionsResponseBodyUserPermissionsUserPermissionPermDetails,
      port: 'number',
      schemaName: 'string',
      searchName: 'string',
      tableId: 'string',
      tableName: 'string',
      userId: 'string',
      userNickName: 'string',
    };
  }

  validate() {
    if(this.permDetails && typeof (this.permDetails as any).validate === 'function') {
      (this.permDetails as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserPermissionsResponseBodyUserPermissions extends $dara.Model {
  userPermission?: ListUserPermissionsResponseBodyUserPermissionsUserPermission[];
  static names(): { [key: string]: string } {
    return {
      userPermission: 'UserPermission',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userPermission: { 'type': 'array', 'itemType': ListUserPermissionsResponseBodyUserPermissionsUserPermission },
    };
  }

  validate() {
    if(Array.isArray(this.userPermission)) {
      $dara.Model.validateArray(this.userPermission);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserTenantsResponseBodyTenantList extends $dara.Model {
  /**
   * @remarks
   * The status of the tenant. Valid values:
   * 
   * *   **ACTIVE**: The tenant is used to access DMS.
   * *   **IN_ACTIVE**: The tenant is not used.
   * 
   * @example
   * ACTIVE
   */
  status?: string;
  /**
   * @remarks
   * The name of the tenant.
   * 
   * @example
   * test_name
   */
  tenantName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      status: 'Status',
      tenantName: 'TenantName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      status: 'string',
      tenantName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUsersResponseBodyUserListUserRoleIdList extends $dara.Model {
  roleIds?: number[];
  static names(): { [key: string]: string } {
    return {
      roleIds: 'RoleIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roleIds: { 'type': 'array', 'itemType': 'number' },
    };
  }

  validate() {
    if(Array.isArray(this.roleIds)) {
      $dara.Model.validateArray(this.roleIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUsersResponseBodyUserListUserRoleNameList extends $dara.Model {
  roleNames?: string[];
  static names(): { [key: string]: string } {
    return {
      roleNames: 'RoleNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      roleNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.roleNames)) {
      $dara.Model.validateArray(this.roleNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUsersResponseBodyUserListUser extends $dara.Model {
  /**
   * @remarks
   * The number of queries that were performed on the current day.
   * 
   * @example
   * 0
   */
  curExecuteCount?: number;
  /**
   * @remarks
   * The number of rows that were queried on the current day.
   * 
   * @example
   * 0
   */
  curResultCount?: number;
  /**
   * @remarks
   * The DingTalk chatbot URL that is used to receive notifications.
   * 
   * > 
   * 
   * *   The system returns this parameter if you have set a DingTalk chatbot URL in the console. To set a DingTalk chatbot URL in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.
   * 
   * *   The system does not return this parameter if you have not set a DingTalk chatbot URL.
   * 
   * @example
   * https://XXX.dingtalk.com/robot/send?access_token=9b7a4a562cbe7fcdea9962afac7b9d7b4504d564948083419750f9cafa78e4ef
   */
  dingRobot?: string;
  /**
   * @remarks
   * The email address that is used to receive notifications.
   * 
   * > 
   * 
   * *   The system returns this parameter if you have set an email address in the console. To set an email address in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.
   * 
   * *   The system does not return this parameter if you have not set an email address.
   * 
   * @example
   * username@example.com
   */
  email?: string;
  /**
   * @remarks
   * The time when the user last logged on to the console.
   * 
   * @example
   * 2021-11-08 13:43:43
   */
  lastLoginTime?: string;
  /**
   * @remarks
   * The maximum number of queries that can be performed on the current day.
   * 
   * @example
   * 2000
   */
  maxExecuteCount?: number;
  /**
   * @remarks
   * The maximum number of rows that can be queried on the current day.
   * 
   * @example
   * 50000
   */
  maxResultCount?: number;
  /**
   * @remarks
   * The mobile phone number of the user.
   * 
   * > 
   * 
   * *   The system returns this parameter if you have set a mobile phone number in the console. To set a mobile phone number in the console, move the pointer over the profile picture in the upper-right corner and click the Edit icon next to **Notice**.
   * 
   * *   The system does not return this parameter if you have not set a mobile phone number.
   * 
   * @example
   * 1389999****
   */
  mobile?: string;
  /**
   * @remarks
   * The nickname of the user.
   * 
   * @example
   * test_NickName
   */
  nickName?: string;
  /**
   * @remarks
   * The notification method. The system returns one or more values. Valid values:
   * 
   * *   **SMS**: text message
   * *   **EMAIL**: email.
   * *   **DINGDING**: DingTalk.
   * *   **DINGROBOT**: DingTalk chatbot.
   * *   **WEBHOOK**: webhook.
   * 
   * @example
   * DINGROBOT
   */
  notificationMode?: string;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account of the user.
   * 
   * @example
   * 140692647406****
   */
  parentUid?: string;
  /**
   * @remarks
   * The IDs of the roles.
   */
  roleIdList?: ListUsersResponseBodyUserListUserRoleIdList;
  /**
   * @remarks
   * The names of roles.
   */
  roleNameList?: ListUsersResponseBodyUserListUserRoleNameList;
  /**
   * @remarks
   * The signature method that is used to secure connections when a webhook URL is used. Valid values:
   * 
   * *   **NONE**: no signature.
   * *   **HMAC_SHA1**: HMAC_SHA1.
   * 
   * @example
   * HMAC_SHA1
   */
  signatureMethod?: string;
  /**
   * @remarks
   * The status of the user. Valid values:
   * 
   * *   **NORMAL**: The user is normal.
   * *   **DISABLE**: The user is disabled.
   * *   **DELETE**: The user is deleted.
   * 
   * @example
   * NORMAL
   */
  state?: string;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account.
   * 
   * @example
   * 167382665015****
   */
  uid?: string;
  /**
   * @remarks
   * The ID of the user.
   * 
   * @example
   * 8****
   */
  userId?: string;
  /**
   * @remarks
   * The webhook URL that is used to receive notifications.
   * 
   * > 
   * 
   * *   If you have set a webhook URL, DMS sends notifications to the specified URL.
   * 
   * *   The system does not return this parameter if you have not set a webhook URL.
   * 
   * @example
   * http://dms-XXX.aliyun.com:8***
   */
  webhook?: string;
  static names(): { [key: string]: string } {
    return {
      curExecuteCount: 'CurExecuteCount',
      curResultCount: 'CurResultCount',
      dingRobot: 'DingRobot',
      email: 'Email',
      lastLoginTime: 'LastLoginTime',
      maxExecuteCount: 'MaxExecuteCount',
      maxResultCount: 'MaxResultCount',
      mobile: 'Mobile',
      nickName: 'NickName',
      notificationMode: 'NotificationMode',
      parentUid: 'ParentUid',
      roleIdList: 'RoleIdList',
      roleNameList: 'RoleNameList',
      signatureMethod: 'SignatureMethod',
      state: 'State',
      uid: 'Uid',
      userId: 'UserId',
      webhook: 'Webhook',
    };
  }

  static types(): { [key: string]: any } {
    return {
      curExecuteCount: 'number',
      curResultCount: 'number',
      dingRobot: 'string',
      email: 'string',
      lastLoginTime: 'string',
      maxExecuteCount: 'number',
      maxResultCount: 'number',
      mobile: 'string',
      nickName: 'string',
      notificationMode: 'string',
      parentUid: 'string',
      roleIdList: ListUsersResponseBodyUserListUserRoleIdList,
      roleNameList: ListUsersResponseBodyUserListUserRoleNameList,
      signatureMethod: 'string',
      state: 'string',
      uid: 'string',
      userId: 'string',
      webhook: 'string',
    };
  }

  validate() {
    if(this.roleIdList && typeof (this.roleIdList as any).validate === 'function') {
      (this.roleIdList as any).validate();
    }
    if(this.roleNameList && typeof (this.roleNameList as any).validate === 'function') {
      (this.roleNameList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUsersResponseBodyUserList extends $dara.Model {
  user?: ListUsersResponseBodyUserListUser[];
  static names(): { [key: string]: string } {
    return {
      user: 'User',
    };
  }

  static types(): { [key: string]: any } {
    return {
      user: { 'type': 'array', 'itemType': ListUsersResponseBodyUserListUser },
    };
  }

  validate() {
    if(Array.isArray(this.user)) {
      $dara.Model.validateArray(this.user);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowNodesResponseBodyWorkflowNodesWorkflowNodeAuditUsersAuditUser extends $dara.Model {
  /**
   * @remarks
   * The nickname of the approver.
   * 
   * @example
   * test
   */
  nickName?: string;
  /**
   * @remarks
   * The real name of the approver.
   * 
   * @example
   * test
   */
  realName?: string;
  /**
   * @remarks
   * The ID of the approver. The ID is different from the ID of the Alibaba Cloud account of the approver.
   * 
   * @example
   * 123
   */
  userId?: number;
  static names(): { [key: string]: string } {
    return {
      nickName: 'NickName',
      realName: 'RealName',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nickName: 'string',
      realName: 'string',
      userId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowNodesResponseBodyWorkflowNodesWorkflowNodeAuditUsers extends $dara.Model {
  auditUser?: ListWorkFlowNodesResponseBodyWorkflowNodesWorkflowNodeAuditUsersAuditUser[];
  static names(): { [key: string]: string } {
    return {
      auditUser: 'AuditUser',
    };
  }

  static types(): { [key: string]: any } {
    return {
      auditUser: { 'type': 'array', 'itemType': ListWorkFlowNodesResponseBodyWorkflowNodesWorkflowNodeAuditUsersAuditUser },
    };
  }

  validate() {
    if(Array.isArray(this.auditUser)) {
      $dara.Model.validateArray(this.auditUser);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowNodesResponseBodyWorkflowNodesWorkflowNode extends $dara.Model {
  /**
   * @remarks
   * The details about approvers.
   */
  auditUsers?: ListWorkFlowNodesResponseBodyWorkflowNodesWorkflowNodeAuditUsers;
  /**
   * @remarks
   * The description of the approval template.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The ID of the creator. This ID is different from the ID of the Alibaba Cloud account of the creator.
   * 
   * @example
   * 123
   */
  createUserId?: number;
  /**
   * @remarks
   * The name of the user who creates the approval node.
   * 
   * @example
   * test
   */
  createUserNickName?: string;
  /**
   * @remarks
   * The ID of the approval node.
   * 
   * @example
   * 123
   */
  nodeId?: number;
  /**
   * @remarks
   * The name of the approval node.
   * 
   * @example
   * test
   */
  nodeName?: string;
  /**
   * @remarks
   * The type of the approval node. Valid values:
   * 
   * *   SYS: The approval node is predefined by the system.
   * *   USER_LIST: The approval node is created by a user.
   * 
   * @example
   * SYS
   */
  nodeType?: string;
  static names(): { [key: string]: string } {
    return {
      auditUsers: 'AuditUsers',
      comment: 'Comment',
      createUserId: 'CreateUserId',
      createUserNickName: 'CreateUserNickName',
      nodeId: 'NodeId',
      nodeName: 'NodeName',
      nodeType: 'NodeType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      auditUsers: ListWorkFlowNodesResponseBodyWorkflowNodesWorkflowNodeAuditUsers,
      comment: 'string',
      createUserId: 'number',
      createUserNickName: 'string',
      nodeId: 'number',
      nodeName: 'string',
      nodeType: 'string',
    };
  }

  validate() {
    if(this.auditUsers && typeof (this.auditUsers as any).validate === 'function') {
      (this.auditUsers as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowNodesResponseBodyWorkflowNodes extends $dara.Model {
  workflowNode?: ListWorkFlowNodesResponseBodyWorkflowNodesWorkflowNode[];
  static names(): { [key: string]: string } {
    return {
      workflowNode: 'WorkflowNode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      workflowNode: { 'type': 'array', 'itemType': ListWorkFlowNodesResponseBodyWorkflowNodesWorkflowNode },
    };
  }

  validate() {
    if(Array.isArray(this.workflowNode)) {
      $dara.Model.validateArray(this.workflowNode);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowTemplatesResponseBodyWorkFlowTemplatesWorkFlowTemplateWorkflowNodesWorkflowNode extends $dara.Model {
  /**
   * @remarks
   * The description of the approval node.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The ID of the creator.
   * 
   * @example
   * 1234
   */
  createUserId?: number;
  /**
   * @remarks
   * The ID of the approval node.
   * 
   * @example
   * 123
   */
  nodeId?: number;
  /**
   * @remarks
   * The name of the approval node.
   * 
   * @example
   * test
   */
  nodeName?: string;
  /**
   * @remarks
   * The type of the approval node. Valid values:
   * 
   * *   SYS: The approval node is predefined by the system.
   * *   USER_LIST: The approval node is created by a user.
   * 
   * @example
   * SYS
   */
  nodeType?: string;
  /**
   * @remarks
   * The position of the approval node.
   * 
   * @example
   * 1
   */
  position?: number;
  /**
   * @remarks
   * The ID of the template.
   * 
   * @example
   * 12345
   */
  templateId?: number;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      createUserId: 'CreateUserId',
      nodeId: 'NodeId',
      nodeName: 'NodeName',
      nodeType: 'NodeType',
      position: 'Position',
      templateId: 'TemplateId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      createUserId: 'number',
      nodeId: 'number',
      nodeName: 'string',
      nodeType: 'string',
      position: 'number',
      templateId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowTemplatesResponseBodyWorkFlowTemplatesWorkFlowTemplateWorkflowNodes extends $dara.Model {
  workflowNode?: ListWorkFlowTemplatesResponseBodyWorkFlowTemplatesWorkFlowTemplateWorkflowNodesWorkflowNode[];
  static names(): { [key: string]: string } {
    return {
      workflowNode: 'WorkflowNode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      workflowNode: { 'type': 'array', 'itemType': ListWorkFlowTemplatesResponseBodyWorkFlowTemplatesWorkFlowTemplateWorkflowNodesWorkflowNode },
    };
  }

  validate() {
    if(Array.isArray(this.workflowNode)) {
      $dara.Model.validateArray(this.workflowNode);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowTemplatesResponseBodyWorkFlowTemplatesWorkFlowTemplate extends $dara.Model {
  /**
   * @remarks
   * The description of the approval template.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The ID of the creator.
   * 
   * @example
   * 1234
   */
  createUserId?: number;
  /**
   * @remarks
   * Indicates whether the approval template is enabled. Valid values:
   * 
   * *   Y: The approval template is enabled.
   * *   N: The approval template is disabled.
   * 
   * @example
   * Y
   */
  enabled?: string;
  /**
   * @remarks
   * Indicates whether the approval template is predefined by the system. Valid values:
   * 
   * *   1: The approval template is predefined by the system.
   * *   0: The approval template is not predefined by the system.
   * 
   * @example
   * 1
   */
  isSystem?: number;
  /**
   * @remarks
   * The ID of the approval template.
   * 
   * @example
   * 12345
   */
  templateId?: number;
  /**
   * @remarks
   * The name of the approval template.
   * 
   * @example
   * Admin
   */
  templateName?: string;
  /**
   * @remarks
   * The details of approval nodes.
   */
  workflowNodes?: ListWorkFlowTemplatesResponseBodyWorkFlowTemplatesWorkFlowTemplateWorkflowNodes;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      createUserId: 'CreateUserId',
      enabled: 'Enabled',
      isSystem: 'IsSystem',
      templateId: 'TemplateId',
      templateName: 'TemplateName',
      workflowNodes: 'WorkflowNodes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      createUserId: 'number',
      enabled: 'string',
      isSystem: 'number',
      templateId: 'number',
      templateName: 'string',
      workflowNodes: ListWorkFlowTemplatesResponseBodyWorkFlowTemplatesWorkFlowTemplateWorkflowNodes,
    };
  }

  validate() {
    if(this.workflowNodes && typeof (this.workflowNodes as any).validate === 'function') {
      (this.workflowNodes as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowTemplatesResponseBodyWorkFlowTemplates extends $dara.Model {
  workFlowTemplate?: ListWorkFlowTemplatesResponseBodyWorkFlowTemplatesWorkFlowTemplate[];
  static names(): { [key: string]: string } {
    return {
      workFlowTemplate: 'WorkFlowTemplate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      workFlowTemplate: { 'type': 'array', 'itemType': ListWorkFlowTemplatesResponseBodyWorkFlowTemplatesWorkFlowTemplate },
    };
  }

  validate() {
    if(Array.isArray(this.workFlowTemplate)) {
      $dara.Model.validateArray(this.workFlowTemplate);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PreviewWorkflowResponseBodyWorkflowDetailWorkflowNodeListWorkflowNodeAuditUserListAuditUser extends $dara.Model {
  /**
   * @example
   * Owner
   */
  nickName?: string;
  /**
   * @example
   * db_test
   */
  realName?: string;
  /**
   * @example
   * 16***
   */
  userId?: number;
  static names(): { [key: string]: string } {
    return {
      nickName: 'NickName',
      realName: 'RealName',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nickName: 'string',
      realName: 'string',
      userId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PreviewWorkflowResponseBodyWorkflowDetailWorkflowNodeListWorkflowNodeAuditUserList extends $dara.Model {
  auditUser?: PreviewWorkflowResponseBodyWorkflowDetailWorkflowNodeListWorkflowNodeAuditUserListAuditUser[];
  static names(): { [key: string]: string } {
    return {
      auditUser: 'AuditUser',
    };
  }

  static types(): { [key: string]: any } {
    return {
      auditUser: { 'type': 'array', 'itemType': PreviewWorkflowResponseBodyWorkflowDetailWorkflowNodeListWorkflowNodeAuditUserListAuditUser },
    };
  }

  validate() {
    if(Array.isArray(this.auditUser)) {
      $dara.Model.validateArray(this.auditUser);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PreviewWorkflowResponseBodyWorkflowDetailWorkflowNodeListWorkflowNode extends $dara.Model {
  auditUserList?: PreviewWorkflowResponseBodyWorkflowDetailWorkflowNodeListWorkflowNodeAuditUserList;
  comment?: string;
  /**
   * @example
   * Owner
   */
  nodeName?: string;
  /**
   * @example
   * SYS
   */
  nodeType?: string;
  static names(): { [key: string]: string } {
    return {
      auditUserList: 'AuditUserList',
      comment: 'Comment',
      nodeName: 'NodeName',
      nodeType: 'NodeType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      auditUserList: PreviewWorkflowResponseBodyWorkflowDetailWorkflowNodeListWorkflowNodeAuditUserList,
      comment: 'string',
      nodeName: 'string',
      nodeType: 'string',
    };
  }

  validate() {
    if(this.auditUserList && typeof (this.auditUserList as any).validate === 'function') {
      (this.auditUserList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PreviewWorkflowResponseBodyWorkflowDetailWorkflowNodeList extends $dara.Model {
  workflowNode?: PreviewWorkflowResponseBodyWorkflowDetailWorkflowNodeListWorkflowNode[];
  static names(): { [key: string]: string } {
    return {
      workflowNode: 'WorkflowNode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      workflowNode: { 'type': 'array', 'itemType': PreviewWorkflowResponseBodyWorkflowDetailWorkflowNodeListWorkflowNode },
    };
  }

  validate() {
    if(Array.isArray(this.workflowNode)) {
      $dara.Model.validateArray(this.workflowNode);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PreviewWorkflowResponseBodyWorkflowDetail extends $dara.Model {
  comment?: string;
  wfCateName?: string;
  workflowNodeList?: PreviewWorkflowResponseBodyWorkflowDetailWorkflowNodeList;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      wfCateName: 'WfCateName',
      workflowNodeList: 'WorkflowNodeList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      wfCateName: 'string',
      workflowNodeList: PreviewWorkflowResponseBodyWorkflowDetailWorkflowNodeList,
    };
  }

  validate() {
    if(this.workflowNodeList && typeof (this.workflowNodeList as any).validate === 'function') {
      (this.workflowNodeList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataTrackResultDownloadStatusResponseBodyStatusResult extends $dara.Model {
  /**
   * @remarks
   * The status of the download task. Valid values:
   * 
   * *   **INIT**: The download task is being initialized.
   * *   **LISTING**: The download task is in a transient intermediate state during the initialization.
   * *   **DOWNLOADING**: The download task is being processed.
   * *   **DOWNLOAD_SUCCESS**: The download task was successfully processed.
   * *   **DOWNLOAD_FAIL**: The download task failed.
   * 
   * @example
   * DOWNLOAD_SUCCESS
   */
  downloadStatus?: string;
  /**
   * @remarks
   * The URL that is used to download data tracking logs. This parameter is returned only when the value of DownloadStatus is DOWNLOAD_SUCCESS.
   * 
   * @example
   * https://idbsaasstore.oss-cn-zhangjiakou.aliyuncs.com/****_REDO_31201_207.zip?Expires=1682239593&OSSAccessKeyId=****&Signature=****
   */
  downloadUrl?: string;
  /**
   * @remarks
   * The description of the state.
   * 
   * @example
   * SUCCESS
   */
  statusDesc?: string;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 69
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      downloadStatus: 'DownloadStatus',
      downloadUrl: 'DownloadUrl',
      statusDesc: 'StatusDesc',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downloadStatus: 'string',
      downloadUrl: 'string',
      statusDesc: 'string',
      totalCount: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDataTrackResultRequestColumnFilter extends $dara.Model {
  /**
   * @remarks
   * The end value of the range used in the filter condition. This parameter takes effect only when Operator is set to BETWEEN.
   * 
   * @example
   * 10
   */
  betweenEnd?: string;
  /**
   * @remarks
   * The start value of the range used in the filter condition. This parameter takes effect only when Operator is set to BETWEEN.
   * 
   * @example
   * 1
   */
  betweenStart?: string;
  /**
   * @remarks
   * The name of the column.
   * 
   * @example
   * c_payer_name
   */
  columnName?: string;
  /**
   * @remarks
   * The IN list used in the filter condition. This parameter takes effect only when Operator is set to IN or NOT_IN.
   */
  inList?: string[];
  /**
   * @remarks
   * The type of the operator used to configure the filter condition. Valid values:
   * 
   * *   **EQUAL**: retrieves the column whose value is equal to the specified value.
   * *   **NOT_EQUAL**: retrieves the column whose value is not equal to the specified value.
   * *   **IN**: retrieves the column whose value is in the IN list.
   * *   **BETWEEN**: retrieves the column whose value is in the specified range.
   * *   **LESS**: retrieves the column whose value is less than the specified value.
   * *   **MORE**: retrieves the column whose value is greater than the specified value.
   * *   **NOT_IN**: retrieves the column whose value is not in the IN list.
   * 
   * @example
   * EQUAL
   */
  operator?: string;
  /**
   * @remarks
   * The value used in the filter condition.
   * 
   * @example
   * 1
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      betweenEnd: 'BetweenEnd',
      betweenStart: 'BetweenStart',
      columnName: 'ColumnName',
      inList: 'InList',
      operator: 'Operator',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      betweenEnd: 'string',
      betweenStart: 'string',
      columnName: 'string',
      inList: { 'type': 'array', 'itemType': 'string' },
      operator: 'string',
      value: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.inList)) {
      $dara.Model.validateArray(this.inList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDataTrackResultResponseBodyTrackResultEventList extends $dara.Model {
  /**
   * @remarks
   * The data records after you perform data operations in the database.
   */
  dataAfter?: string[];
  /**
   * @remarks
   * The data records before you perform data operations in the database.
   */
  dataBefore?: string[];
  /**
   * @remarks
   * The ID of the event.
   * 
   * @example
   * 1
   */
  eventId?: number;
  /**
   * @remarks
   * The length of the event content. Unit: bytes.
   * 
   * @example
   * 4324
   */
  eventLength?: number;
  /**
   * @remarks
   * The event time.
   * 
   * @example
   * 2023-04-23 10:25:47
   */
  eventTimestamp?: string;
  /**
   * @remarks
   * The type of the event. Valid values:
   * 
   * *   **WRITE_ROWS**: indicates an INSERT operation.
   * *   **UPDATE_ROWS**: indicates an UPDATE operation.
   * *   **DELETE_ROWS**: indicates a DELETE operation.
   * *   **EXT_WRITE_ROWS**: indicates an INSERT operation, which is equivalent to WRITE_ROWS.
   * *   **EXT_UPDATE_ROWS**: indicates an UPDATE operation, which is equivalent to UPDATE_ROWS.
   * *   **EXT_DELETE_ROWS**: indicates a DELETE operation, which is equivalent to DELETE_ROWS.
   * 
   * @example
   * UPDATE_ROWS
   */
  eventType?: string;
  /**
   * @remarks
   * The SQL statements used to roll back the data change.
   * 
   * @example
   * -- Timestamp:2023-04-23 10:25:47 #1\\r\\nUPDATE `dc_test`.`tb_chunk_dml` SET `id`=1 , `gmt_create`=\\"2021-09-30T00:00:00\\" , `content`=\\"2023-03-30 14:51:50\\" , `c1`=\\"2023-04-17 13:42:03\\" , `c_id`=1 , `c13425`=\\"b\\\\\\"\\" , `c432532535`= null , `c1432`= null , `c143243253`= null , `c1432535`= null , `c43125325`= null , `c3425325`= null WHERE  (`id`=1)"
   */
  rollSQL?: string;
  static names(): { [key: string]: string } {
    return {
      dataAfter: 'DataAfter',
      dataBefore: 'DataBefore',
      eventId: 'EventId',
      eventLength: 'EventLength',
      eventTimestamp: 'EventTimestamp',
      eventType: 'EventType',
      rollSQL: 'RollSQL',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataAfter: { 'type': 'array', 'itemType': 'string' },
      dataBefore: { 'type': 'array', 'itemType': 'string' },
      eventId: 'number',
      eventLength: 'number',
      eventTimestamp: 'string',
      eventType: 'string',
      rollSQL: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.dataAfter)) {
      $dara.Model.validateArray(this.dataAfter);
    }
    if(Array.isArray(this.dataBefore)) {
      $dara.Model.validateArray(this.dataBefore);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDataTrackResultResponseBodyTrackResultTableInfoListColumns extends $dara.Model {
  /**
   * @remarks
   * The name of the column.
   * 
   * @example
   * basic_platform
   */
  columnName?: string;
  /**
   * @remarks
   * The position of the column.
   * 
   * @example
   * 1
   */
  columnPosition?: number;
  /**
   * @remarks
   * The data type of the column. Examples: BIGINT, INT, and VARCHAR.
   * 
   * @example
   * BIGINT
   */
  columnType?: string;
  /**
   * @remarks
   * Indicates whether the column is a virtual column. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  fictive?: boolean;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      columnPosition: 'ColumnPosition',
      columnType: 'ColumnType',
      fictive: 'Fictive',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      columnPosition: 'number',
      columnType: 'string',
      fictive: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDataTrackResultResponseBodyTrackResultTableInfoList extends $dara.Model {
  /**
   * @remarks
   * The information about columns.
   */
  columns?: SearchDataTrackResultResponseBodyTrackResultTableInfoListColumns[];
  /**
   * @remarks
   * The description of the column.
   * 
   * @example
   * auto-description
   */
  description?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * prod_eb_vas
   */
  schemaName?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * import_table_test1
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      columns: 'Columns',
      description: 'Description',
      schemaName: 'SchemaName',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columns: { 'type': 'array', 'itemType': SearchDataTrackResultResponseBodyTrackResultTableInfoListColumns },
      description: 'string',
      schemaName: 'string',
      tableName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.columns)) {
      $dara.Model.validateArray(this.columns);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDataTrackResultResponseBodyTrackResult extends $dara.Model {
  /**
   * @remarks
   * The details of the event logs.
   */
  eventList?: SearchDataTrackResultResponseBodyTrackResultEventList[];
  /**
   * @remarks
   * The metadata of tables for which you track data operations.
   */
  tableInfoList?: SearchDataTrackResultResponseBodyTrackResultTableInfoList[];
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 109
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      eventList: 'EventList',
      tableInfoList: 'TableInfoList',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      eventList: { 'type': 'array', 'itemType': SearchDataTrackResultResponseBodyTrackResultEventList },
      tableInfoList: { 'type': 'array', 'itemType': SearchDataTrackResultResponseBodyTrackResultTableInfoList },
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.eventList)) {
      $dara.Model.validateArray(this.eventList);
    }
    if(Array.isArray(this.tableInfoList)) {
      $dara.Model.validateArray(this.tableInfoList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDatabaseResponseBodySearchDatabaseListSearchDatabaseOwnerIdList extends $dara.Model {
  ownerIds?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerIds: 'OwnerIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDatabaseResponseBodySearchDatabaseListSearchDatabaseOwnerNameList extends $dara.Model {
  ownerNames?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerNames: 'OwnerNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerNames)) {
      $dara.Model.validateArray(this.ownerNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDatabaseResponseBodySearchDatabaseListSearchDatabase extends $dara.Model {
  /**
   * @remarks
   * The alias of the database.
   * 
   * @example
   * test_rds
   */
  alias?: string;
  /**
   * @remarks
   * The name of the catalog to which the database belongs.
   * 
   * > If the type of the database engine is PostgreSQL, the name of the database is displayed.
   * 
   * @example
   * dmstest
   */
  catalogName?: string;
  /**
   * @remarks
   * The ID of the database.
   * 
   * @example
   * 2528****
   */
  databaseId?: string;
  /**
   * @remarks
   * The name of the data link for cross-database queries.
   * 
   * @example
   * datalink_name
   */
  datalinkName?: string;
  /**
   * @remarks
   * The type of the database engine.
   * 
   * @example
   * mysql
   */
  dbType?: string;
  /**
   * @remarks
   * The ID of the user who assumes the database administrator (DBA) role.
   * 
   * @example
   * 10****
   */
  dbaId?: string;
  /**
   * @remarks
   * The encoding method of the database.
   * 
   * @example
   * utf8
   */
  encoding?: string;
  /**
   * @remarks
   * The environment type of the database. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).
   * 
   * @example
   * test
   */
  envType?: string;
  /**
   * @remarks
   * The endpoint of the instance in which the database resides.
   * 
   * @example
   * rm-xxxx.mysql.rds.aliyuncs.com
   */
  host?: string;
  /**
   * @remarks
   * Indicates whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is not a logical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The IDs of the owners of the databases.
   */
  ownerIdList?: SearchDatabaseResponseBodySearchDatabaseListSearchDatabaseOwnerIdList;
  /**
   * @remarks
   * The nicknames of the database owners.
   */
  ownerNameList?: SearchDatabaseResponseBodySearchDatabaseListSearchDatabaseOwnerNameList;
  /**
   * @remarks
   * The port of the instance in which the database resides.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * test
   */
  schemaName?: string;
  /**
   * @remarks
   * The name that is used to search for the database.
   * 
   * @example
   * test@xxx.xxx.xxx.xxx:3306
   */
  searchName?: string;
  /**
   * @remarks
   * The system ID (SID) of the instance in which the database resides.
   * 
   * @example
   * testSid
   */
  sid?: string;
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      catalogName: 'CatalogName',
      databaseId: 'DatabaseId',
      datalinkName: 'DatalinkName',
      dbType: 'DbType',
      dbaId: 'DbaId',
      encoding: 'Encoding',
      envType: 'EnvType',
      host: 'Host',
      logic: 'Logic',
      ownerIdList: 'OwnerIdList',
      ownerNameList: 'OwnerNameList',
      port: 'Port',
      schemaName: 'SchemaName',
      searchName: 'SearchName',
      sid: 'Sid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      catalogName: 'string',
      databaseId: 'string',
      datalinkName: 'string',
      dbType: 'string',
      dbaId: 'string',
      encoding: 'string',
      envType: 'string',
      host: 'string',
      logic: 'boolean',
      ownerIdList: SearchDatabaseResponseBodySearchDatabaseListSearchDatabaseOwnerIdList,
      ownerNameList: SearchDatabaseResponseBodySearchDatabaseListSearchDatabaseOwnerNameList,
      port: 'number',
      schemaName: 'string',
      searchName: 'string',
      sid: 'string',
    };
  }

  validate() {
    if(this.ownerIdList && typeof (this.ownerIdList as any).validate === 'function') {
      (this.ownerIdList as any).validate();
    }
    if(this.ownerNameList && typeof (this.ownerNameList as any).validate === 'function') {
      (this.ownerNameList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDatabaseResponseBodySearchDatabaseList extends $dara.Model {
  searchDatabase?: SearchDatabaseResponseBodySearchDatabaseListSearchDatabase[];
  static names(): { [key: string]: string } {
    return {
      searchDatabase: 'SearchDatabase',
    };
  }

  static types(): { [key: string]: any } {
    return {
      searchDatabase: { 'type': 'array', 'itemType': SearchDatabaseResponseBodySearchDatabaseListSearchDatabase },
    };
  }

  validate() {
    if(Array.isArray(this.searchDatabase)) {
      $dara.Model.validateArray(this.searchDatabase);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchTableResponseBodySearchTableListSearchTableOwnerIdList extends $dara.Model {
  ownerIds?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerIds: 'OwnerIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerIds)) {
      $dara.Model.validateArray(this.ownerIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchTableResponseBodySearchTableListSearchTableOwnerNameList extends $dara.Model {
  ownerNames?: string[];
  static names(): { [key: string]: string } {
    return {
      ownerNames: 'OwnerNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.ownerNames)) {
      $dara.Model.validateArray(this.ownerNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchTableResponseBodySearchTableListSearchTable extends $dara.Model {
  /**
   * @remarks
   * The name that is used to search for the database to which the table belongs.
   * 
   * @example
   * test
   */
  DBSearchName?: string;
  /**
   * @remarks
   * The ID of the database to which the table belongs.
   * 
   * @example
   * 1
   */
  databaseId?: string;
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * test
   */
  dbName?: string;
  /**
   * @remarks
   * The type of the database. Valid values:
   * 
   * *   **MySQL**
   * *   **SQLServer**
   * *   **PostgreSQL**
   * *   **Oracle**
   * *   **DRDS**
   * *   **OceanBase**
   * *   **Mongo**
   * *   **Redis**
   * 
   * @example
   * mysql
   */
  dbType?: string;
  /**
   * @remarks
   * The description of the table.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The encoding format of the table.
   * 
   * @example
   * utf8
   */
  encoding?: string;
  /**
   * @remarks
   * The engine of the table.
   * 
   * @example
   * innodb
   */
  engine?: string;
  /**
   * @remarks
   * The type of the environment to which the database belongs.
   * 
   * @example
   * test
   */
  envType?: string;
  /**
   * @remarks
   * Indicates whether the table is a logical table. Valid values:
   * 
   * *   **true**: The table is a logical table.
   * *   **false**: The table is not a logical table.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The IDs of the table owners.
   */
  ownerIdList?: SearchTableResponseBodySearchTableListSearchTableOwnerIdList;
  /**
   * @remarks
   * The nicknames of the table owners.
   */
  ownerNameList?: SearchTableResponseBodySearchTableListSearchTableOwnerNameList;
  /**
   * @remarks
   * The GUID of the table.
   * 
   * @example
   * IDB_L_9032.db-test.yuyang_test
   */
  tableGuid?: string;
  /**
   * @remarks
   * The ID of the table.
   * 
   * @example
   * 1
   */
  tableId?: string;
  /**
   * @remarks
   * The name of the table.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @remarks
   * The name of the database to which the table belongs.
   * 
   * @example
   * test@xxx.xxx.xxx.xxx:3306
   */
  tableSchemaName?: string;
  static names(): { [key: string]: string } {
    return {
      DBSearchName: 'DBSearchName',
      databaseId: 'DatabaseId',
      dbName: 'DbName',
      dbType: 'DbType',
      description: 'Description',
      encoding: 'Encoding',
      engine: 'Engine',
      envType: 'EnvType',
      logic: 'Logic',
      ownerIdList: 'OwnerIdList',
      ownerNameList: 'OwnerNameList',
      tableGuid: 'TableGuid',
      tableId: 'TableId',
      tableName: 'TableName',
      tableSchemaName: 'TableSchemaName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      DBSearchName: 'string',
      databaseId: 'string',
      dbName: 'string',
      dbType: 'string',
      description: 'string',
      encoding: 'string',
      engine: 'string',
      envType: 'string',
      logic: 'boolean',
      ownerIdList: SearchTableResponseBodySearchTableListSearchTableOwnerIdList,
      ownerNameList: SearchTableResponseBodySearchTableListSearchTableOwnerNameList,
      tableGuid: 'string',
      tableId: 'string',
      tableName: 'string',
      tableSchemaName: 'string',
    };
  }

  validate() {
    if(this.ownerIdList && typeof (this.ownerIdList as any).validate === 'function') {
      (this.ownerIdList as any).validate();
    }
    if(this.ownerNameList && typeof (this.ownerNameList as any).validate === 'function') {
      (this.ownerNameList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchTableResponseBodySearchTableList extends $dara.Model {
  searchTable?: SearchTableResponseBodySearchTableListSearchTable[];
  static names(): { [key: string]: string } {
    return {
      searchTable: 'SearchTable',
    };
  }

  static types(): { [key: string]: any } {
    return {
      searchTable: { 'type': 'array', 'itemType': SearchTableResponseBodySearchTableListSearchTable },
    };
  }

  validate() {
    if(Array.isArray(this.searchTable)) {
      $dara.Model.validateArray(this.searchTable);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAuthorityTemplateResponseBodyAuthorityTemplateView extends $dara.Model {
  /**
   * @remarks
   * The ID of the user who created the permission template.
   * 
   * @example
   * 12***
   */
  creatorId?: number;
  /**
   * @remarks
   * The description of the permission template.
   * 
   * @example
   * This template is used for business testing.
   */
  description?: string;
  /**
   * @remarks
   * The name of the permission template.
   * 
   * @example
   * Test template.
   */
  name?: string;
  /**
   * @remarks
   * The ID of the permission template.
   * 
   * @example
   * 1563
   */
  templateId?: number;
  static names(): { [key: string]: string } {
    return {
      creatorId: 'CreatorId',
      description: 'Description',
      name: 'Name',
      templateId: 'TemplateId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creatorId: 'number',
      description: 'string',
      name: 'string',
      templateId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateSLARulesRequestSlaRuleList extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The timeout period. Unit: minutes.
   * 
   * This parameter is required.
   * 
   * @example
   * 1080
   */
  intervalMinutes?: number;
  /**
   * @remarks
   * The ID of the task node.
   * 
   * @example
   * 0
   */
  nodeId?: number;
  /**
   * @remarks
   * The rule type. Valid values:
   * 
   * *   **0**: SLA rules for task flows
   * *   **1**: SLA rules for nodes
   * 
   * This parameter is required.
   * 
   * @example
   * 0
   */
  type?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      intervalMinutes: 'IntervalMinutes',
      nodeId: 'NodeId',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      intervalMinutes: 'number',
      nodeId: 'number',
      type: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateStandardGroupResponseBodyStandardGroup extends $dara.Model {
  /**
   * @remarks
   * The type of the database for which the security rules are used.
   * 
   * @example
   * mysql
   */
  dbType?: string;
  /**
   * @remarks
   * The description of the security rule set.
   * 
   * @example
   * Production Environment test rules
   */
  description?: string;
  /**
   * @remarks
   * The security rule set ID.
   * 
   * @example
   * 41****
   */
  groupId?: number;
  /**
   * @remarks
   * The control mode. Valid values:
   * 
   * *   **NONE_CONTROL**: Flexible Management
   * *   **STABLE**: Stable Change
   * *   **COMMON**: Security Collaboration
   * 
   * @example
   * COMMON
   */
  groupMode?: string;
  /**
   * @remarks
   * The name of the security rule set.
   * 
   * @example
   * poc_test
   */
  groupName?: string;
  /**
   * @remarks
   * The ID of the user who last modified the security rules.
   * 
   * @example
   * 51****
   */
  lastMenderId?: number;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      description: 'Description',
      groupId: 'GroupId',
      groupMode: 'GroupMode',
      groupName: 'GroupName',
      lastMenderId: 'LastMenderId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      description: 'string',
      groupId: 'number',
      groupMode: 'string',
      groupName: 'string',
      lastMenderId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowConstantsRequestDagConstants extends $dara.Model {
  /**
   * @remarks
   * The key name of a constant for the task flow.
   * 
   * @example
   * poc_test
   */
  key?: string;
  /**
   * @remarks
   * The key value of a constant for the task flow.
   * 
   * @example
   * poc_test
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowEdgesRequestEdges extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow edge.
   * 
   * This parameter is required.
   * 
   * @example
   * 24***
   */
  id?: number;
  /**
   * @remarks
   * The ID of the end node of the edge.
   * 
   * This parameter is required.
   * 
   * @example
   * 44***
   */
  nodeEnd?: number;
  /**
   * @remarks
   * The ID of the start node of the edge.
   * 
   * This parameter is required.
   * 
   * @example
   * 44***
   */
  nodeFrom?: number;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      nodeEnd: 'NodeEnd',
      nodeFrom: 'NodeFrom',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      nodeEnd: 'number',
      nodeFrom: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowRelationsRequestEdges extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow edge.
   * 
   * @example
   * 24***
   */
  id?: number;
  /**
   * @remarks
   * The ID of the end node on the edge.
   * 
   * @example
   * 44***
   */
  nodeEnd?: number;
  /**
   * @remarks
   * The ID of the start node on the edge.
   * 
   * @example
   * 44***
   */
  nodeFrom?: number;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      nodeEnd: 'NodeEnd',
      nodeFrom: 'NodeFrom',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      nodeEnd: 'number',
      nodeFrom: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AsyncTaskVO extends $dara.Model {
  datasetId?: string;
  id?: number;
  remark?: string;
  taskName?: string;
  taskStatus?: number;
  taskType?: number;
  userId?: number;
  static names(): { [key: string]: string } {
    return {
      datasetId: 'DatasetId',
      id: 'Id',
      remark: 'Remark',
      taskName: 'TaskName',
      taskStatus: 'TaskStatus',
      taskType: 'TaskType',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      datasetId: 'string',
      id: 'number',
      remark: 'string',
      taskName: 'string',
      taskStatus: 'number',
      taskType: 'number',
      userId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DLCatalog extends $dara.Model {
  description?: string;
  location?: string;
  name?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      location: 'Location',
      name: 'Name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      location: 'string',
      name: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DLColumn extends $dara.Model {
  comment?: string;
  name?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      name: 'Name',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      name: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DLDatabase extends $dara.Model {
  catalogName?: string;
  dbId?: number;
  description?: string;
  location?: string;
  name?: string;
  parameters?: { [key: string]: any };
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dbId: 'DbId',
      description: 'Description',
      location: 'Location',
      name: 'Name',
      parameters: 'Parameters',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dbId: 'number',
      description: 'string',
      location: 'string',
      name: 'string',
      parameters: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
    };
  }

  validate() {
    if(this.parameters) {
      $dara.Model.validateMap(this.parameters);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DLOrder extends $dara.Model {
  col?: string;
  order?: number;
  static names(): { [key: string]: string } {
    return {
      col: 'Col',
      order: 'Order',
    };
  }

  static types(): { [key: string]: any } {
    return {
      col: 'string',
      order: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DLPartition extends $dara.Model {
  catalogName?: string;
  createTime?: number;
  dbName?: string;
  lastAccessTime?: number;
  parameters?: { [key: string]: string };
  sd?: DLStorageDescriptor;
  tableName?: string;
  values?: string[];
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      createTime: 'CreateTime',
      dbName: 'DbName',
      lastAccessTime: 'LastAccessTime',
      parameters: 'Parameters',
      sd: 'Sd',
      tableName: 'TableName',
      values: 'Values',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      createTime: 'number',
      dbName: 'string',
      lastAccessTime: 'number',
      parameters: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      sd: DLStorageDescriptor,
      tableName: 'string',
      values: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(this.parameters) {
      $dara.Model.validateMap(this.parameters);
    }
    if(this.sd && typeof (this.sd as any).validate === 'function') {
      (this.sd as any).validate();
    }
    if(Array.isArray(this.values)) {
      $dara.Model.validateArray(this.values);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DLPartitionInput extends $dara.Model {
  createTime?: number;
  lastAccessTime?: number;
  parameters?: { [key: string]: string };
  storageDescriptor?: DLStorageDescriptor;
  values?: string[];
  static names(): { [key: string]: string } {
    return {
      createTime: 'CreateTime',
      lastAccessTime: 'LastAccessTime',
      parameters: 'Parameters',
      storageDescriptor: 'StorageDescriptor',
      values: 'Values',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'number',
      lastAccessTime: 'number',
      parameters: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      storageDescriptor: DLStorageDescriptor,
      values: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(this.parameters) {
      $dara.Model.validateMap(this.parameters);
    }
    if(this.storageDescriptor && typeof (this.storageDescriptor as any).validate === 'function') {
      (this.storageDescriptor as any).validate();
    }
    if(Array.isArray(this.values)) {
      $dara.Model.validateArray(this.values);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DLSerdeInfo extends $dara.Model {
  description?: string;
  deserializerClass?: string;
  name?: string;
  parameters?: { [key: string]: any };
  serdeType?: number;
  serializationLib?: string;
  serializerClass?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      deserializerClass: 'DeserializerClass',
      name: 'Name',
      parameters: 'Parameters',
      serdeType: 'SerdeType',
      serializationLib: 'SerializationLib',
      serializerClass: 'SerializerClass',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      deserializerClass: 'string',
      name: 'string',
      parameters: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      serdeType: 'number',
      serializationLib: 'string',
      serializerClass: 'string',
    };
  }

  validate() {
    if(this.parameters) {
      $dara.Model.validateMap(this.parameters);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DLSkewedInfo extends $dara.Model {
  skewedColNames?: string[];
  skewedColValueLocationMaps?: { [key: string]: any };
  skewedColValues?: string[][];
  static names(): { [key: string]: string } {
    return {
      skewedColNames: 'SkewedColNames',
      skewedColValueLocationMaps: 'SkewedColValueLocationMaps',
      skewedColValues: 'SkewedColValues',
    };
  }

  static types(): { [key: string]: any } {
    return {
      skewedColNames: { 'type': 'array', 'itemType': 'string' },
      skewedColValueLocationMaps: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      skewedColValues: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
    };
  }

  validate() {
    if(Array.isArray(this.skewedColNames)) {
      $dara.Model.validateArray(this.skewedColNames);
    }
    if(this.skewedColValueLocationMaps) {
      $dara.Model.validateMap(this.skewedColValueLocationMaps);
    }
    if(Array.isArray(this.skewedColValues)) {
      $dara.Model.validateArray(this.skewedColValues);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DLStorageDescriptor extends $dara.Model {
  bucketCols?: string[];
  columns?: DLColumn[];
  inputFormat?: string;
  isCompressed?: boolean;
  location?: string;
  numBuckets?: number;
  originalColumns?: DLColumn[];
  outputFormat?: string;
  parameters?: { [key: string]: any };
  serdeInfo?: DLSerdeInfo;
  skewedInfo?: DLSkewedInfo;
  sortCols?: DLOrder[];
  static names(): { [key: string]: string } {
    return {
      bucketCols: 'BucketCols',
      columns: 'Columns',
      inputFormat: 'InputFormat',
      isCompressed: 'IsCompressed',
      location: 'Location',
      numBuckets: 'NumBuckets',
      originalColumns: 'OriginalColumns',
      outputFormat: 'OutputFormat',
      parameters: 'Parameters',
      serdeInfo: 'SerdeInfo',
      skewedInfo: 'SkewedInfo',
      sortCols: 'SortCols',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bucketCols: { 'type': 'array', 'itemType': 'string' },
      columns: { 'type': 'array', 'itemType': DLColumn },
      inputFormat: 'string',
      isCompressed: 'boolean',
      location: 'string',
      numBuckets: 'number',
      originalColumns: { 'type': 'array', 'itemType': DLColumn },
      outputFormat: 'string',
      parameters: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      serdeInfo: DLSerdeInfo,
      skewedInfo: DLSkewedInfo,
      sortCols: { 'type': 'array', 'itemType': DLOrder },
    };
  }

  validate() {
    if(Array.isArray(this.bucketCols)) {
      $dara.Model.validateArray(this.bucketCols);
    }
    if(Array.isArray(this.columns)) {
      $dara.Model.validateArray(this.columns);
    }
    if(Array.isArray(this.originalColumns)) {
      $dara.Model.validateArray(this.originalColumns);
    }
    if(this.parameters) {
      $dara.Model.validateMap(this.parameters);
    }
    if(this.serdeInfo && typeof (this.serdeInfo as any).validate === 'function') {
      (this.serdeInfo as any).validate();
    }
    if(this.skewedInfo && typeof (this.skewedInfo as any).validate === 'function') {
      (this.skewedInfo as any).validate();
    }
    if(Array.isArray(this.sortCols)) {
      $dara.Model.validateArray(this.sortCols);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DLTable extends $dara.Model {
  catalogName?: string;
  createTime?: number;
  creatorId?: number;
  dbId?: number;
  dbName?: string;
  description?: string;
  lastAccessTime?: number;
  location?: string;
  modifierId?: number;
  name?: string;
  owner?: string;
  ownerType?: string;
  parameters?: { [key: string]: any };
  partitionKeys?: DLColumn[];
  retention?: number;
  storageDescriptor?: DLStorageDescriptor;
  tableType?: string;
  viewExpandedText?: string;
  viewOriginalText?: string;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      createTime: 'CreateTime',
      creatorId: 'CreatorId',
      dbId: 'DbId',
      dbName: 'DbName',
      description: 'Description',
      lastAccessTime: 'LastAccessTime',
      location: 'Location',
      modifierId: 'ModifierId',
      name: 'Name',
      owner: 'Owner',
      ownerType: 'OwnerType',
      parameters: 'Parameters',
      partitionKeys: 'PartitionKeys',
      retention: 'Retention',
      storageDescriptor: 'StorageDescriptor',
      tableType: 'TableType',
      viewExpandedText: 'ViewExpandedText',
      viewOriginalText: 'ViewOriginalText',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      createTime: 'number',
      creatorId: 'number',
      dbId: 'number',
      dbName: 'string',
      description: 'string',
      lastAccessTime: 'number',
      location: 'string',
      modifierId: 'number',
      name: 'string',
      owner: 'string',
      ownerType: 'string',
      parameters: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      partitionKeys: { 'type': 'array', 'itemType': DLColumn },
      retention: 'number',
      storageDescriptor: DLStorageDescriptor,
      tableType: 'string',
      viewExpandedText: 'string',
      viewOriginalText: 'string',
    };
  }

  validate() {
    if(this.parameters) {
      $dara.Model.validateMap(this.parameters);
    }
    if(Array.isArray(this.partitionKeys)) {
      $dara.Model.validateArray(this.partitionKeys);
    }
    if(this.storageDescriptor && typeof (this.storageDescriptor as any).validate === 'function') {
      (this.storageDescriptor as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DLTablebaseInfo extends $dara.Model {
  catalogName?: string;
  createTime?: number;
  creatorId?: number;
  dbId?: number;
  dbName?: string;
  description?: string;
  lastAccessTime?: number;
  location?: string;
  modifierId?: number;
  name?: string;
  owner?: string;
  ownerType?: string;
  parameters?: { [key: string]: any };
  partitionKeys?: DLColumn[];
  retention?: number;
  tableType?: string;
  viewExpandedText?: string;
  viewOriginalText?: string;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      createTime: 'CreateTime',
      creatorId: 'CreatorId',
      dbId: 'DbId',
      dbName: 'DbName',
      description: 'Description',
      lastAccessTime: 'LastAccessTime',
      location: 'Location',
      modifierId: 'ModifierId',
      name: 'Name',
      owner: 'Owner',
      ownerType: 'OwnerType',
      parameters: 'Parameters',
      partitionKeys: 'PartitionKeys',
      retention: 'Retention',
      tableType: 'TableType',
      viewExpandedText: 'ViewExpandedText',
      viewOriginalText: 'ViewOriginalText',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      createTime: 'number',
      creatorId: 'number',
      dbId: 'number',
      dbName: 'string',
      description: 'string',
      lastAccessTime: 'number',
      location: 'string',
      modifierId: 'number',
      name: 'string',
      owner: 'string',
      ownerType: 'string',
      parameters: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      partitionKeys: { 'type': 'array', 'itemType': DLColumn },
      retention: 'number',
      tableType: 'string',
      viewExpandedText: 'string',
      viewOriginalText: 'string',
    };
  }

  validate() {
    if(this.parameters) {
      $dara.Model.validateMap(this.parameters);
    }
    if(Array.isArray(this.partitionKeys)) {
      $dara.Model.validateArray(this.partitionKeys);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DatasetItemVO extends $dara.Model {
  asyncTaskList?: AsyncTaskVO[];
  datasetStatus?: number;
  datasetType?: number;
  digest?: string;
  fileSystem?: string;
  id?: string;
  keyName?: string;
  moreInfo?: string;
  path?: string;
  projectsLinked?: ProjectDetailsLiteVO[];
  recentTaskStatus?: number;
  remark?: string;
  schema?: string;
  tableName?: string;
  url?: string;
  static names(): { [key: string]: string } {
    return {
      asyncTaskList: 'AsyncTaskList',
      datasetStatus: 'DatasetStatus',
      datasetType: 'DatasetType',
      digest: 'Digest',
      fileSystem: 'FileSystem',
      id: 'Id',
      keyName: 'KeyName',
      moreInfo: 'MoreInfo',
      path: 'Path',
      projectsLinked: 'ProjectsLinked',
      recentTaskStatus: 'RecentTaskStatus',
      remark: 'Remark',
      schema: 'Schema',
      tableName: 'TableName',
      url: 'Url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncTaskList: { 'type': 'array', 'itemType': AsyncTaskVO },
      datasetStatus: 'number',
      datasetType: 'number',
      digest: 'string',
      fileSystem: 'string',
      id: 'string',
      keyName: 'string',
      moreInfo: 'string',
      path: 'string',
      projectsLinked: { 'type': 'array', 'itemType': ProjectDetailsLiteVO },
      recentTaskStatus: 'number',
      remark: 'string',
      schema: 'string',
      tableName: 'string',
      url: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.asyncTaskList)) {
      $dara.Model.validateArray(this.asyncTaskList);
    }
    if(Array.isArray(this.projectsLinked)) {
      $dara.Model.validateArray(this.projectsLinked);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDataKeyVO extends $dara.Model {
  colName?: string;
  dbName?: string;
  mekId?: number;
  schemaName?: string;
  tblName?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      colName: 'ColName',
      dbName: 'DbName',
      mekId: 'MekId',
      schemaName: 'SchemaName',
      tblName: 'TblName',
      userName: 'UserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      colName: 'string',
      dbName: 'string',
      mekId: 'number',
      schemaName: 'string',
      tblName: 'string',
      userName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportMasterKeyVO extends $dara.Model {
  encryptMekDataBase64?: string;
  mekId?: number;
  projectId?: number[];
  static names(): { [key: string]: string } {
    return {
      encryptMekDataBase64: 'EncryptMekDataBase64',
      mekId: 'MekId',
      projectId: 'ProjectId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      encryptMekDataBase64: 'string',
      mekId: 'number',
      projectId: { 'type': 'array', 'itemType': 'number' },
    };
  }

  validate() {
    if(Array.isArray(this.projectId)) {
      $dara.Model.validateArray(this.projectId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PartitionError extends $dara.Model {
  errorDetail?: string;
  values?: string[];
  static names(): { [key: string]: string } {
    return {
      errorDetail: 'ErrorDetail',
      values: 'Values',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorDetail: 'string',
      values: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.values)) {
      $dara.Model.validateArray(this.values);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ProjectDetailsLiteVO extends $dara.Model {
  id?: number;
  projectName?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      projectName: 'ProjectName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      projectName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StsApplyVO extends $dara.Model {
  aliyunId?: string;
  duration?: number;
  static names(): { [key: string]: string } {
    return {
      aliyunId: 'AliyunId',
      duration: 'Duration',
    };
  }

  static types(): { [key: string]: any } {
    return {
      aliyunId: 'string',
      duration: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StsTokenVO extends $dara.Model {
  accessKeyId?: string;
  accessKeySecret?: string;
  expiration?: string;
  securityToken?: string;
  static names(): { [key: string]: string } {
    return {
      accessKeyId: 'AccessKeyId',
      accessKeySecret: 'AccessKeySecret',
      expiration: 'Expiration',
      securityToken: 'SecurityToken',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessKeyId: 'string',
      accessKeySecret: 'string',
      expiration: 'string',
      securityToken: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TeeEvidenceVO extends $dara.Model {
  cipherSuite?: string;
  enclaveData?: string;
  encryptPublicKeyPem?: string;
  encryptPublicKeyType?: string;
  modifiedDate?: string;
  publicKey?: string;
  publicKeyRaBase64?: string;
  publicKeyRaType?: string;
  quoteReport?: string;
  signPublicKeyPem?: string;
  signPublicKeyType?: string;
  trustedMrEnclave?: string[];
  static names(): { [key: string]: string } {
    return {
      cipherSuite: 'CipherSuite',
      enclaveData: 'EnclaveData',
      encryptPublicKeyPem: 'EncryptPublicKeyPem',
      encryptPublicKeyType: 'EncryptPublicKeyType',
      modifiedDate: 'ModifiedDate',
      publicKey: 'PublicKey',
      publicKeyRaBase64: 'PublicKeyRaBase64',
      publicKeyRaType: 'PublicKeyRaType',
      quoteReport: 'QuoteReport',
      signPublicKeyPem: 'SignPublicKeyPem',
      signPublicKeyType: 'SignPublicKeyType',
      trustedMrEnclave: 'TrustedMrEnclave',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cipherSuite: 'string',
      enclaveData: 'string',
      encryptPublicKeyPem: 'string',
      encryptPublicKeyType: 'string',
      modifiedDate: 'string',
      publicKey: 'string',
      publicKeyRaBase64: 'string',
      publicKeyRaType: 'string',
      quoteReport: 'string',
      signPublicKeyPem: 'string',
      signPublicKeyType: 'string',
      trustedMrEnclave: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.trustedMrEnclave)) {
      $dara.Model.validateArray(this.trustedMrEnclave);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UsersDetailsVO extends $dara.Model {
  approvalSignatureBase64?: string;
  approvalSqlTemplate?: string;
  approvalStatus?: string;
  creator?: number;
  dataReady?: number;
  id?: number;
  mekid?: number;
  pathPrefix?: string;
  resultParty?: number;
  uid?: string;
  userConfirmed?: number;
  userName?: string;
  userPublicKeyPem?: string;
  static names(): { [key: string]: string } {
    return {
      approvalSignatureBase64: 'ApprovalSignatureBase64',
      approvalSqlTemplate: 'ApprovalSqlTemplate',
      approvalStatus: 'ApprovalStatus',
      creator: 'Creator',
      dataReady: 'DataReady',
      id: 'Id',
      mekid: 'Mekid',
      pathPrefix: 'PathPrefix',
      resultParty: 'ResultParty',
      uid: 'Uid',
      userConfirmed: 'UserConfirmed',
      userName: 'UserName',
      userPublicKeyPem: 'UserPublicKeyPem',
    };
  }

  static types(): { [key: string]: any } {
    return {
      approvalSignatureBase64: 'string',
      approvalSqlTemplate: 'string',
      approvalStatus: 'string',
      creator: 'number',
      dataReady: 'number',
      id: 'number',
      mekid: 'number',
      pathPrefix: 'string',
      resultParty: 'number',
      uid: 'string',
      userConfirmed: 'number',
      userName: 'string',
      userPublicKeyPem: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenStructDLTableInput extends $dara.Model {
  createTime?: number;
  creatorId?: number;
  description?: string;
  lastAccessTime?: number;
  location?: string;
  modifierId?: number;
  name?: string;
  owner?: string;
  ownerType?: string;
  parameters?: { [key: string]: string };
  partitionKeys?: DLColumn[];
  retention?: number;
  storageDescriptor?: DLStorageDescriptor;
  tableType?: string;
  viewExpandedText?: string;
  viewOriginalText?: string;
  static names(): { [key: string]: string } {
    return {
      createTime: 'CreateTime',
      creatorId: 'CreatorId',
      description: 'Description',
      lastAccessTime: 'LastAccessTime',
      location: 'Location',
      modifierId: 'ModifierId',
      name: 'Name',
      owner: 'Owner',
      ownerType: 'OwnerType',
      parameters: 'Parameters',
      partitionKeys: 'PartitionKeys',
      retention: 'Retention',
      storageDescriptor: 'StorageDescriptor',
      tableType: 'TableType',
      viewExpandedText: 'ViewExpandedText',
      viewOriginalText: 'ViewOriginalText',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'number',
      creatorId: 'number',
      description: 'string',
      lastAccessTime: 'number',
      location: 'string',
      modifierId: 'number',
      name: 'string',
      owner: 'string',
      ownerType: 'string',
      parameters: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      partitionKeys: { 'type': 'array', 'itemType': DLColumn },
      retention: 'number',
      storageDescriptor: DLStorageDescriptor,
      tableType: 'string',
      viewExpandedText: 'string',
      viewOriginalText: 'string',
    };
  }

  validate() {
    if(this.parameters) {
      $dara.Model.validateMap(this.parameters);
    }
    if(Array.isArray(this.partitionKeys)) {
      $dara.Model.validateArray(this.partitionKeys);
    }
    if(this.storageDescriptor && typeof (this.storageDescriptor as any).validate === 'function') {
      (this.storageDescriptor as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddAuthorityTemplateItemsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  items?: AddAuthorityTemplateItemsRequestItems[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  templateId?: number;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      items: 'Items',
      templateId: 'TemplateId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      items: { 'type': 'array', 'itemType': AddAuthorityTemplateItemsRequestItems },
      templateId: 'number',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.items)) {
      $dara.Model.validateArray(this.items);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddAuthorityTemplateItemsShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  itemsShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  templateId?: number;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      itemsShrink: 'Items',
      templateId: 'TemplateId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      itemsShrink: 'string',
      templateId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddAuthorityTemplateItemsResponseBody extends $dara.Model {
  /**
   * @example
   * true
   */
  data?: boolean;
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 3D3FB827-E667-50DB-AD59-C83F8237FECB
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: 'boolean',
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddAuthorityTemplateItemsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddAuthorityTemplateItemsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddAuthorityTemplateItemsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDesensitizationRuleRequest extends $dara.Model {
  /**
   * @remarks
   * The parameters of the algorithm.
   */
  functionParams?: { [key: string]: string }[];
  /**
   * @remarks
   * The type of the masking algorithm.
   * 
   * Valid values:
   * 
   * *   FIX_POS : masks characters in the specified position.
   * *   DATE_ROUNDING: rounds the date.
   * *   PLAINTEXT: does not mask data.
   * *   SHA1: masks characters by using the secure hash algorithm 1 (SHA-1)
   * *   HMAC: masks characters by using the hash-based message authentication code (HMAC).
   * *   STRING_TRANSFORM: shift characters.
   * *   NUMBER_ROUNDING: rounds numbers.
   * *   AES: masks characters by using the advanced encryption standard (AES) algorithm.
   * *   SHA256: masks characters by using SHA-256 algorithm.
   * *   DES: masks characters by using the data encryption standard (DES) algorithm.
   * *   MAP_REPLACE: masks the mapped data.
   * *   FIX_CHAR: masks fixed characters.
   * *   DEFAULT: masks all characters.
   * *   RANDOM_REPLACE: randomly replaces characters.
   * *   MD5: masks characters by using the MD5 algorithm.
   * 
   * This parameter is required.
   * 
   * @example
   * MD5
   */
  functionType?: string;
  /**
   * @remarks
   * The description of the rule.
   * 
   * @example
   * hash algorithm
   */
  ruleDescription?: string;
  /**
   * @remarks
   * The name of the rule.
   * 
   * This parameter is required.
   * 
   * @example
   * desensitization algorithm test
   */
  ruleName?: string;
  /**
   * @remarks
   * The masking algorithm.
   * 
   * Valid values:
   * 
   * *   PLAINTEXT
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   TRANSFORM
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ENCRYPT
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   REPLACE
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   HASH
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   MASK
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * This parameter is required.
   * 
   * @example
   * HASH
   */
  ruleType?: string;
  /**
   * @remarks
   * The tenant ID.
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      functionParams: 'FunctionParams',
      functionType: 'FunctionType',
      ruleDescription: 'RuleDescription',
      ruleName: 'RuleName',
      ruleType: 'RuleType',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      functionParams: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
      functionType: 'string',
      ruleDescription: 'string',
      ruleName: 'string',
      ruleType: 'string',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.functionParams)) {
      $dara.Model.validateArray(this.functionParams);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDesensitizationRuleResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code that is returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * The ID generated for the data masking rule.
   * 
   * @example
   * 35***
   */
  ruleId?: number;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      ruleId: 'RuleId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      ruleId: 'number',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDesensitizationRuleResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddDesensitizationRuleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddDesensitizationRuleResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddInstanceRequest extends $dara.Model {
  /**
   * @example
   * dblink_test
   */
  dataLinkName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test***
   */
  databasePassword?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * testsdb
   */
  databaseUser?: string;
  /**
   * @example
   * 27****
   */
  dbaId?: number;
  /**
   * @example
   * 2
   */
  ddlOnline?: number;
  /**
   * @example
   * i-2zei9gs1t7h8l7ac****
   */
  ecsInstanceId?: string;
  /**
   * @example
   * cn-hangzhou
   */
  ecsRegion?: string;
  /**
   * @example
   * Y
   */
  enableSellCommon?: string;
  /**
   * @example
   * Y
   */
  enableSellSitd?: string;
  /**
   * @example
   * NULL
   */
  enableSellStable?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * Y
   */
  enableSellTrust?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * product
   */
  envType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 86400
   */
  exportTimeout?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 172.XX.XXX.254
   */
  host?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  instanceAlias?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * RDS
   */
  instanceSource?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * MySQL
   */
  instanceType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * VPC
   */
  networkType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 7200
   */
  queryTimeout?: number;
  safeRule?: string;
  /**
   * @example
   * testSid
   */
  sid?: string;
  /**
   * @example
   * false
   */
  skipTest?: boolean;
  /**
   * @example
   * 31***
   */
  templateId?: number;
  /**
   * @example
   * INNER
   */
  templateType?: string;
  /**
   * @example
   * 23****
   */
  tid?: number;
  /**
   * @example
   * 1
   */
  useDsql?: number;
  useSsl?: number;
  /**
   * @example
   * vpc-2zef4o1hu7ljd****
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      dataLinkName: 'DataLinkName',
      databasePassword: 'DatabasePassword',
      databaseUser: 'DatabaseUser',
      dbaId: 'DbaId',
      ddlOnline: 'DdlOnline',
      ecsInstanceId: 'EcsInstanceId',
      ecsRegion: 'EcsRegion',
      enableSellCommon: 'EnableSellCommon',
      enableSellSitd: 'EnableSellSitd',
      enableSellStable: 'EnableSellStable',
      enableSellTrust: 'EnableSellTrust',
      envType: 'EnvType',
      exportTimeout: 'ExportTimeout',
      host: 'Host',
      instanceAlias: 'InstanceAlias',
      instanceSource: 'InstanceSource',
      instanceType: 'InstanceType',
      networkType: 'NetworkType',
      port: 'Port',
      queryTimeout: 'QueryTimeout',
      safeRule: 'SafeRule',
      sid: 'Sid',
      skipTest: 'SkipTest',
      templateId: 'TemplateId',
      templateType: 'TemplateType',
      tid: 'Tid',
      useDsql: 'UseDsql',
      useSsl: 'UseSsl',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataLinkName: 'string',
      databasePassword: 'string',
      databaseUser: 'string',
      dbaId: 'number',
      ddlOnline: 'number',
      ecsInstanceId: 'string',
      ecsRegion: 'string',
      enableSellCommon: 'string',
      enableSellSitd: 'string',
      enableSellStable: 'string',
      enableSellTrust: 'string',
      envType: 'string',
      exportTimeout: 'number',
      host: 'string',
      instanceAlias: 'string',
      instanceSource: 'string',
      instanceType: 'string',
      networkType: 'string',
      port: 'number',
      queryTimeout: 'number',
      safeRule: 'string',
      sid: 'string',
      skipTest: 'boolean',
      templateId: 'number',
      templateType: 'string',
      tid: 'number',
      useDsql: 'number',
      useSsl: 'number',
      vpcId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddInstanceResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddLhMembersRequest extends $dara.Model {
  /**
   * @remarks
   * The information about the users to be added.
   * 
   * This parameter is required.
   */
  members?: AddLhMembersRequestMembers[];
  /**
   * @remarks
   * The ID of the object.
   * 
   * *   If the object is a workspace, you can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to obtain the workspace ID.
   * *   If the object is a task flow, you can call the [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  objectId?: number;
  /**
   * @remarks
   * The type of the object. Valid values:
   * 
   * *   **0**: workspace
   * *   **1**: task flow
   * 
   * This parameter is required.
   * 
   * @example
   * 0
   */
  objectType?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3000
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      members: 'Members',
      objectId: 'ObjectId',
      objectType: 'ObjectType',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      members: { 'type': 'array', 'itemType': AddLhMembersRequestMembers },
      objectId: 'number',
      objectType: 'number',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.members)) {
      $dara.Model.validateArray(this.members);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddLhMembersShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The information about the users to be added.
   * 
   * This parameter is required.
   */
  membersShrink?: string;
  /**
   * @remarks
   * The ID of the object.
   * 
   * *   If the object is a workspace, you can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to obtain the workspace ID.
   * *   If the object is a task flow, you can call the [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  objectId?: number;
  /**
   * @remarks
   * The type of the object. Valid values:
   * 
   * *   **0**: workspace
   * *   **1**: task flow
   * 
   * This parameter is required.
   * 
   * @example
   * 0
   */
  objectType?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3000
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      membersShrink: 'Members',
      objectId: 'ObjectId',
      objectType: 'ObjectType',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      membersShrink: 'string',
      objectId: 'number',
      objectType: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddLhMembersResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 31853A2B-DC9D-5B39-8492-D2AC8BCF550E
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddLhMembersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddLhMembersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddLhMembersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddLogicTableRouteConfigRequest extends $dara.Model {
  /**
   * @remarks
   * The routing algorithm expression. For more information about how to configure a routing algorithm expression, see [Configure a routing algorithm](https://www.alibabacloud.com/help/en/data-management-service/latest/configure-a-routing-algorithm).
   * 
   * This parameter is required.
   * 
   * @example
   * #id#%16
   */
  routeExpr?: string;
  /**
   * @remarks
   * The unique key of the routing algorithm. 
   * 
   * > - You can create a custom unique key for the routing algorithm. No requirements are imposed on custom unique keys.
   * > - The unique key of the routing algorithm in the same logical table must be unique.
   * 
   * This parameter is required.
   * 
   * @example
   * id-hash-mod16
   */
  routeKey?: string;
  /**
   * @remarks
   * The ID of the logical table. You can call the [ListLogicTables](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogictables) operation to query the ID of the logical table.
   * 
   * This parameter is required.
   * 
   * @example
   * 4****
   */
  tableId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.
   * 
   * @example
   * 4***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      routeExpr: 'RouteExpr',
      routeKey: 'RouteKey',
      tableId: 'TableId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      routeExpr: 'string',
      routeKey: 'string',
      tableId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddLogicTableRouteConfigResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * can not find table, tableId : 11133
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * B43AD641-49C2-5299-9E06-1B37EC1B****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * - **true**: The request was successful.
   * - **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddLogicTableRouteConfigResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddLogicTableRouteConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddLogicTableRouteConfigResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddTaskFlowEdgesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The list of edges of the task flow.
   * 
   * This parameter is required.
   */
  edges?: AddTaskFlowEdgesRequestEdges[];
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      edges: 'Edges',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      edges: { 'type': 'array', 'itemType': AddTaskFlowEdgesRequestEdges },
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.edges)) {
      $dara.Model.validateArray(this.edges);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddTaskFlowEdgesShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The list of edges of the task flow.
   * 
   * This parameter is required.
   */
  edgesShrink?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      edgesShrink: 'Edges',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      edgesShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddTaskFlowEdgesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The list of task flow edge IDs.
   */
  edgeIds?: AddTaskFlowEdgesResponseBodyEdgeIds;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * E5EE2B9E-2F95-57FA-B284-CB441CEE49D6
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      edgeIds: 'EdgeIds',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      edgeIds: AddTaskFlowEdgesResponseBodyEdgeIds,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.edgeIds && typeof (this.edgeIds as any).validate === 'function') {
      (this.edgeIds as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddTaskFlowEdgesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddTaskFlowEdgesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddTaskFlowEdgesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AnalyzeSQLLineageRequest extends $dara.Model {
  /**
   * @remarks
   * The database ID.
   * 
   * >  You can call one of the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html), [ListDatabases](https://help.aliyun.com/document_detail/141873.html), and [GetDatabase](https://help.aliyun.com/document_detail/141869.html) operations to obtain the database ID provided in the DatabaseId response parameter.
   * 
   * This parameter is required.
   * 
   * @example
   * 123***
   */
  dbId?: number;
  /**
   * @remarks
   * The SQL statement.
   * 
   * This parameter is required.
   * 
   * @example
   * insert into a (id) select id from b;
   */
  sqlContent?: string;
  /**
   * @remarks
   * The tenant ID.
   * 
   * >  To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      sqlContent: 'SqlContent',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      sqlContent: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AnalyzeSQLLineageResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * Returned data set of SQL lineage.
   */
  lineageResult?: AnalyzeSQLLineageResponseBodyLineageResult;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B4B07137-F6AE-4756-8474-7F92BB6C4E04
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      lineageResult: 'LineageResult',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      lineageResult: AnalyzeSQLLineageResponseBodyLineageResult,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.lineageResult && typeof (this.lineageResult as any).validate === 'function') {
      (this.lineageResult as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AnalyzeSQLLineageResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AnalyzeSQLLineageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AnalyzeSQLLineageResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApproveOrderRequest extends $dara.Model {
  /**
   * @remarks
   * If ApprovalType is set to ADD_APPROVAL_NODE, you need to specify this parameter. The ID of the user that is added as the new approval node. This node must be a user-defined approval node. You can call the ListUserDefineWorkFlowNodes operation to obtain the value of this parameter.
   * 
   * @example
   * 1
   */
  approvalNodeId?: number;
  /**
   * @remarks
   * The position of the new approval node. You must specify this parameter if ApprovalType is set to ADD_APPROVAL_NODE. Valid values:
   * 
   * *   **PRE_ADD_APPROVAL_NODE**: before the current approval node.
   * *   **POST_ADD_APPROVAL_NODE**: after the current approval node.
   * 
   * @example
   * POST_ADD_APPROVAL_NODE
   */
  approvalNodePos?: string;
  /**
   * @remarks
   * The action that you want to perform on the ticket. Valid values:
   * 
   * *   **AGREE**
   * *   **CANCEL**
   * *   **REJECT**
   * *   **TRANSFER**
   * *   **ADD_APPROVAL_NODE**
   * 
   * This parameter is required.
   * 
   * @example
   * agree
   */
  approvalType?: string;
  /**
   * @remarks
   * The description of the ticket.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The ID of the user to which the ticket is transferred. If ApprovalType is set to TRANSFER, you need to specify this parameter.
   * 
   * @example
   * 12***
   */
  newApprover?: number;
  /**
   * @remarks
   * >  You can specify this parameter if ApprovalType is set to TRANSFER. You need to only specify one of NewApproverList and NewApprover.
   * 
   * The IDs of the users to whom the ticket is transferred. Separate multiple IDs with commas (,).
   * 
   * @example
   * 154***,155***,156***
   */
  newApproverList?: string;
  /**
   * @remarks
   * The ID of the user that transfers the ticket to another user. The default value is the ID of the current user. If the current user is an administrator or a database administrator (DBA), the user can change the value of this parameter to the ID of another user.
   * 
   * @example
   * 23***
   */
  oldApprover?: number;
  /**
   * @remarks
   * The UID of the Alibaba Cloud account that actually calls the API.
   * 
   * @example
   * 21400447956867****
   */
  realLoginUserUid?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.
   * 
   * @example
   * -1
   */
  tid?: number;
  /**
   * @remarks
   * The ID of the approval process. You can call the [GetOrderBaseInfo](https://help.aliyun.com/document_detail/144642.html) operation to obtain the ID of the approval process.
   * 
   * This parameter is required.
   * 
   * @example
   * 1234
   */
  workflowInstanceId?: number;
  static names(): { [key: string]: string } {
    return {
      approvalNodeId: 'ApprovalNodeId',
      approvalNodePos: 'ApprovalNodePos',
      approvalType: 'ApprovalType',
      comment: 'Comment',
      newApprover: 'NewApprover',
      newApproverList: 'NewApproverList',
      oldApprover: 'OldApprover',
      realLoginUserUid: 'RealLoginUserUid',
      tid: 'Tid',
      workflowInstanceId: 'WorkflowInstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      approvalNodeId: 'number',
      approvalNodePos: 'string',
      approvalType: 'string',
      comment: 'string',
      newApprover: 'number',
      newApproverList: 'string',
      oldApprover: 'number',
      realLoginUserUid: 'string',
      tid: 'number',
      workflowInstanceId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApproveOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApproveOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApproveOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApproveOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BackFillRequest extends $dara.Model {
  /**
   * @remarks
   * The running sequence of task flows for data backfill. Valid values:
   * 
   * *   **0**: reverse chronological order.
   * *   **1**: chronological order. This is the default value.
   * 
   * @example
   * 0
   */
  asc?: boolean;
  /**
   * @remarks
   * The date for the data to be backfilled. This parameter is required if you specify a date for data backfill.
   * 
   * @example
   * 2022-01-14
   */
  backFillDate?: string;
  /**
   * @remarks
   * The start date of the date range for the data to be backfilled. This parameter is required if you specify a date range for data backfill.
   * 
   * @example
   * 2022-01-14
   */
  backFillDateBegin?: string;
  /**
   * @remarks
   * The end date of the date range for the data to be backfilled. This parameter is required if you specify a date range for data backfill.
   * 
   * @example
   * 2022-09-29
   */
  backFillDateEnd?: string;
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * Filter condition, which specifies the list of node IDs in the task flow that do not need to supplement data.
   */
  filterNodeIds?: number[];
  /**
   * @remarks
   * The ID of the historical task flow.
   * 
   * @example
   * 16***
   */
  historyDagId?: number;
  /**
   * @remarks
   * The interval at which data backfill is performed. Unit: hours. Minimum value: 1. Default value: 24.
   * 
   * @example
   * 24
   */
  interval?: number;
  /**
   * @remarks
   * Specifies whether to run descendant nodes. Default value: true.
   * 
   * @example
   * true
   */
  isTriggerSubTree?: boolean;
  /**
   * @remarks
   * The number of nodes for which you want to backfill data.
   */
  startNodeIds?: number[];
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      asc: 'Asc',
      backFillDate: 'BackFillDate',
      backFillDateBegin: 'BackFillDateBegin',
      backFillDateEnd: 'BackFillDateEnd',
      dagId: 'DagId',
      filterNodeIds: 'FilterNodeIds',
      historyDagId: 'HistoryDagId',
      interval: 'Interval',
      isTriggerSubTree: 'IsTriggerSubTree',
      startNodeIds: 'StartNodeIds',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asc: 'boolean',
      backFillDate: 'string',
      backFillDateBegin: 'string',
      backFillDateEnd: 'string',
      dagId: 'number',
      filterNodeIds: { 'type': 'array', 'itemType': 'number' },
      historyDagId: 'number',
      interval: 'number',
      isTriggerSubTree: 'boolean',
      startNodeIds: { 'type': 'array', 'itemType': 'number' },
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.filterNodeIds)) {
      $dara.Model.validateArray(this.filterNodeIds);
    }
    if(Array.isArray(this.startNodeIds)) {
      $dara.Model.validateArray(this.startNodeIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BackFillShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The running sequence of task flows for data backfill. Valid values:
   * 
   * *   **0**: reverse chronological order.
   * *   **1**: chronological order. This is the default value.
   * 
   * @example
   * 0
   */
  asc?: boolean;
  /**
   * @remarks
   * The date for the data to be backfilled. This parameter is required if you specify a date for data backfill.
   * 
   * @example
   * 2022-01-14
   */
  backFillDate?: string;
  /**
   * @remarks
   * The start date of the date range for the data to be backfilled. This parameter is required if you specify a date range for data backfill.
   * 
   * @example
   * 2022-01-14
   */
  backFillDateBegin?: string;
  /**
   * @remarks
   * The end date of the date range for the data to be backfilled. This parameter is required if you specify a date range for data backfill.
   * 
   * @example
   * 2022-09-29
   */
  backFillDateEnd?: string;
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * Filter condition, which specifies the list of node IDs in the task flow that do not need to supplement data.
   */
  filterNodeIdsShrink?: string;
  /**
   * @remarks
   * The ID of the historical task flow.
   * 
   * @example
   * 16***
   */
  historyDagId?: number;
  /**
   * @remarks
   * The interval at which data backfill is performed. Unit: hours. Minimum value: 1. Default value: 24.
   * 
   * @example
   * 24
   */
  interval?: number;
  /**
   * @remarks
   * Specifies whether to run descendant nodes. Default value: true.
   * 
   * @example
   * true
   */
  isTriggerSubTree?: boolean;
  /**
   * @remarks
   * The number of nodes for which you want to backfill data.
   */
  startNodeIdsShrink?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      asc: 'Asc',
      backFillDate: 'BackFillDate',
      backFillDateBegin: 'BackFillDateBegin',
      backFillDateEnd: 'BackFillDateEnd',
      dagId: 'DagId',
      filterNodeIdsShrink: 'FilterNodeIds',
      historyDagId: 'HistoryDagId',
      interval: 'Interval',
      isTriggerSubTree: 'IsTriggerSubTree',
      startNodeIdsShrink: 'StartNodeIds',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asc: 'boolean',
      backFillDate: 'string',
      backFillDateBegin: 'string',
      backFillDateEnd: 'string',
      dagId: 'number',
      filterNodeIdsShrink: 'string',
      historyDagId: 'number',
      interval: 'number',
      isTriggerSubTree: 'boolean',
      startNodeIdsShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BackFillResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the execution record of the task flow.
   * 
   * @example
   * 47****
   */
  dagInstanceId?: number;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the node.
   * 
   * @example
   * 43****
   */
  nodeId?: number;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 7FAD400F-7A5C-4193-8F9A-39D86C4F0231
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      dagInstanceId: 'DagInstanceId',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      nodeId: 'NodeId',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagInstanceId: 'number',
      errorCode: 'string',
      errorMessage: 'string',
      nodeId: 'number',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BackFillResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: BackFillResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: BackFillResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchCreateDataLakePartitionsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * true
   */
  ifNotExists?: boolean;
  /**
   * @example
   * true
   */
  needResult?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  partitionInputs?: DLPartitionInput[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      ifNotExists: 'IfNotExists',
      needResult: 'NeedResult',
      partitionInputs: 'PartitionInputs',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      ifNotExists: 'boolean',
      needResult: 'boolean',
      partitionInputs: { 'type': 'array', 'itemType': DLPartitionInput },
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.partitionInputs)) {
      $dara.Model.validateArray(this.partitionInputs);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchCreateDataLakePartitionsShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * true
   */
  ifNotExists?: boolean;
  /**
   * @example
   * true
   */
  needResult?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  partitionInputsShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      ifNotExists: 'IfNotExists',
      needResult: 'NeedResult',
      partitionInputsShrink: 'PartitionInputs',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      ifNotExists: 'boolean',
      needResult: 'boolean',
      partitionInputsShrink: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchCreateDataLakePartitionsResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  partitions?: DLPartition[];
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      partitions: 'Partitions',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      partitions: { 'type': 'array', 'itemType': DLPartition },
      requestId: 'string',
      success: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.partitions)) {
      $dara.Model.validateArray(this.partitions);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchCreateDataLakePartitionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: BatchCreateDataLakePartitionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: BatchCreateDataLakePartitionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchDeleteDataLakePartitionsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * true
   */
  ifExists?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  partitionValuesList?: string[][];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * table_name
   */
  tableName?: string;
  /**
   * @example
   * 3****
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      ifExists: 'IfExists',
      partitionValuesList: 'PartitionValuesList',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      ifExists: 'boolean',
      partitionValuesList: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.partitionValuesList)) {
      $dara.Model.validateArray(this.partitionValuesList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchDeleteDataLakePartitionsResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  partitionErrors?: PartitionError[];
  /**
   * @example
   * 5B96E35F-A58E-5399-9041-09CF9A1E46EA
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      partitionErrors: 'PartitionErrors',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      partitionErrors: { 'type': 'array', 'itemType': PartitionError },
      requestId: 'string',
      success: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.partitionErrors)) {
      $dara.Model.validateArray(this.partitionErrors);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchDeleteDataLakePartitionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: BatchDeleteDataLakePartitionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: BatchDeleteDataLakePartitionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchUpdateDataLakePartitionsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  partitionInputs?: DLPartitionInput[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      partitionInputs: 'PartitionInputs',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      partitionInputs: { 'type': 'array', 'itemType': DLPartitionInput },
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.partitionInputs)) {
      $dara.Model.validateArray(this.partitionInputs);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchUpdateDataLakePartitionsShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  partitionInputsShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      partitionInputsShrink: 'PartitionInputs',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      partitionInputsShrink: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchUpdateDataLakePartitionsResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  partitionErrors?: PartitionError[];
  /**
   * @example
   * C5B8E84B-42B6-4374-AD5A-6264E1753378
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      partitionErrors: 'PartitionErrors',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      partitionErrors: { 'type': 'array', 'itemType': PartitionError },
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.partitionErrors)) {
      $dara.Model.validateArray(this.partitionErrors);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchUpdateDataLakePartitionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: BatchUpdateDataLakePartitionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: BatchUpdateDataLakePartitionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BuyPayAsYouGoOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The type of the resource that you want to purchase.
   * 
   * *   **VersionType**: DMS that supports control modes
   * *   **SensitiveDataProtection**: DMS that supports sensitive data protection
   * 
   * This parameter is required.
   * 
   * @example
   * SensitiveDataProtection
   */
  commodityType?: string;
  /**
   * @remarks
   * The number of database instances that you want to use DMS to manage.
   * 
   * > A quota can be used for only one database instance.
   * 
   * This parameter is required.
   * 
   * @example
   * 7
   */
  insNum?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The control mode of DMS. Valid values:
   * 
   * *   **stand**: Stable Change
   * *   **safety**: Security Collaboration
   * 
   * @example
   * stand
   */
  versionType?: string;
  static names(): { [key: string]: string } {
    return {
      commodityType: 'CommodityType',
      insNum: 'InsNum',
      tid: 'Tid',
      versionType: 'VersionType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commodityType: 'string',
      insNum: 'number',
      tid: 'number',
      versionType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BuyPayAsYouGoOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * If the purchase is successful, the ID of the purchased instance is returned.
   * 
   * @example
   * dms_pre_public_cn-nif23l****
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C51420E3-144A-4A94-B473-8662FCF4AD10
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      instanceId: 'InstanceId',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      instanceId: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BuyPayAsYouGoOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: BuyPayAsYouGoOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: BuyPayAsYouGoOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChangeColumnSecLevelRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the field. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the name of the field.
   * 
   * > You can also call the [ListColumns](https://help.aliyun.com/document_detail/141870.html) operation to obtain the name of the field.
   * 
   * This parameter is required.
   * 
   * @example
   * test_column
   */
  columnName?: string;
  /**
   * @remarks
   * The ID of the database. You can call the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the ID of the database.
   * 
   * > You can also call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to obtain the ID of a physical database and the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to obtain the ID of a logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * 325
   */
  dbId?: number;
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   true: The database is a physical database.
   * *   false: The database is a logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * false
   */
  isLogic?: boolean;
  /**
   * @remarks
   * The new sensitivity level of the field that you want to specify. Valid values:
   * 
   * *   INNER: low sensitivity level
   * *   SENSITIVE: medium sensitivity level
   * *   CONFIDENTIAL: high sensitivity level
   * 
   * This parameter is required.
   * 
   * @example
   * SENSITIVE
   */
  newLevel?: string;
  /**
   * @remarks
   * The name of the database. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the name of the database.
   * 
   * *   You can also call the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the name of the database.
   * *   You can also call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to obtain the name of a physical database and the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to obtain the name of a logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * test_schema
   */
  schemaName?: string;
  /**
   * @remarks
   * The name of the table. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the name of the table.
   * 
   * > You can also call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to obtain the name of the table.
   * 
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 43253
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      dbId: 'DbId',
      isLogic: 'IsLogic',
      newLevel: 'NewLevel',
      schemaName: 'SchemaName',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      dbId: 'number',
      isLogic: 'boolean',
      newLevel: 'string',
      schemaName: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChangeColumnSecLevelResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C51420E3-144A-4A94-B473-8662FCF4AD10
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   true: The request was successful.
   * *   false: The request failed.
   * 
   * @example
   * false
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChangeColumnSecLevelResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ChangeColumnSecLevelResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ChangeColumnSecLevelResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChangeColumnSecurityLevelRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_column
   */
  columnName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 325**
   */
  dbId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * false
   */
  isLogic?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * S2
   */
  newSensitivityLevel?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_schema
   */
  schemaName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 10****
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      dbId: 'DbId',
      isLogic: 'IsLogic',
      newSensitivityLevel: 'NewSensitivityLevel',
      schemaName: 'SchemaName',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      dbId: 'number',
      isLogic: 'boolean',
      newSensitivityLevel: 'string',
      schemaName: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChangeColumnSecurityLevelResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * E103C5F9-DE47-53F2-BF34-D71DF38F****
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChangeColumnSecurityLevelResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ChangeColumnSecurityLevelResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ChangeColumnSecurityLevelResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChangeLhDagOwnerRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 9***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the user to be specified as the new owner of the task flow. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain the user ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 50****
   */
  ownerUserId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      ownerUserId: 'OwnerUserId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      ownerUserId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChangeLhDagOwnerResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 9997630E-1993-5E6D-9DF1-4EFEE755FE31
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChangeLhDagOwnerResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ChangeLhDagOwnerResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ChangeLhDagOwnerResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CloseOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The reason why the ticket is closed.
   * 
   * This parameter is required.
   * 
   * @example
   * close reason
   */
  closeReason?: string;
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 1343
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      closeReason: 'CloseReason',
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      closeReason: 'string',
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CloseOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CloseOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CloseOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CloseOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAbacAuthorizationRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * USER
   */
  identityType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12****
   */
  policyId?: number;
  /**
   * @example
   * 31****
   */
  roleId?: number;
  /**
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @example
   * 51****
   */
  userId?: number;
  static names(): { [key: string]: string } {
    return {
      identityType: 'IdentityType',
      policyId: 'PolicyId',
      roleId: 'RoleId',
      tid: 'Tid',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      identityType: 'string',
      policyId: 'number',
      roleId: 'number',
      tid: 'number',
      userId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAbacAuthorizationResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  result?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      result: 'Result',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      result: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAbacAuthorizationResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateAbacAuthorizationResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateAbacAuthorizationResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAbacPolicyRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * {
   *   "Statement": [
   *     {
   *       "Action": "*",
   *       "Effect": "Allow",
   *       "Resource": "*",
   *       "Condition": {
   *         "StringEqualsIgnoreCase": {
   *           "dms:DbType": [
   *             "redis"
   *           ]
   *         }
   *       }
   *     }
   *   ],
   *   "Version": "1"
   * }
   */
  abacPolicyContent?: string;
  /**
   * @example
   * test
   */
  abacPolicyDesc?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * policy_test
   */
  abacPolicyName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      abacPolicyContent: 'AbacPolicyContent',
      abacPolicyDesc: 'AbacPolicyDesc',
      abacPolicyName: 'AbacPolicyName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      abacPolicyContent: 'string',
      abacPolicyDesc: 'string',
      abacPolicyName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAbacPolicyResponseBody extends $dara.Model {
  /**
   * @example
   * 12****
   */
  createPolicyResult?: number;
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      createPolicyResult: 'CreatePolicyResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createPolicyResult: 'number',
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAbacPolicyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateAbacPolicyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateAbacPolicyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthorityTemplateRequest extends $dara.Model {
  /**
   * @remarks
   * The description of the permission template.
   * 
   * @example
   * This template is used for business testing.
   */
  description?: string;
  /**
   * @remarks
   * The name of the permission template.
   * 
   * This parameter is required.
   * 
   * @example
   * Test template.
   */
  name?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      name: 'Name',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      name: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthorityTemplateResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the permission template.
   */
  authorityTemplateView?: CreateAuthorityTemplateResponseBodyAuthorityTemplateView;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      authorityTemplateView: 'AuthorityTemplateView',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorityTemplateView: CreateAuthorityTemplateResponseBodyAuthorityTemplateView,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      tid: 'number',
    };
  }

  validate() {
    if(this.authorityTemplateView && typeof (this.authorityTemplateView as any).validate === 'function') {
      (this.authorityTemplateView as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthorityTemplateResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateAuthorityTemplateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateAuthorityTemplateResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataArchiveOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The description of the task.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters for archiving data.
   * 
   * This parameter is required.
   */
  param?: CreateDataArchiveOrderRequestParam;
  /**
   * @remarks
   * The ID of the parent ticket. A parent ticket is generated only when a child ticket is created.
   * 
   * @example
   * 123****
   */
  parentId?: number;
  /**
   * @remarks
   * The type of the plug-in. Default value: DATA_ARCHIVE.
   * 
   * @example
   * DATA_ARCHIVE
   */
  pluginType?: string;
  /**
   * @remarks
   * The list of the related users.
   */
  relatedUserList?: string[];
  /**
   * @remarks
   * The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      param: 'Param',
      parentId: 'ParentId',
      pluginType: 'PluginType',
      relatedUserList: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      param: CreateDataArchiveOrderRequestParam,
      parentId: 'number',
      pluginType: 'string',
      relatedUserList: { 'type': 'array', 'itemType': 'string' },
      tid: 'number',
    };
  }

  validate() {
    if(this.param && typeof (this.param as any).validate === 'function') {
      (this.param as any).validate();
    }
    if(Array.isArray(this.relatedUserList)) {
      $dara.Model.validateArray(this.relatedUserList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataArchiveOrderShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The description of the task.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters for archiving data.
   * 
   * This parameter is required.
   */
  paramShrink?: string;
  /**
   * @remarks
   * The ID of the parent ticket. A parent ticket is generated only when a child ticket is created.
   * 
   * @example
   * 123****
   */
  parentId?: number;
  /**
   * @remarks
   * The type of the plug-in. Default value: DATA_ARCHIVE.
   * 
   * @example
   * DATA_ARCHIVE
   */
  pluginType?: string;
  /**
   * @remarks
   * The list of the related users.
   */
  relatedUserListShrink?: string;
  /**
   * @remarks
   * The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      paramShrink: 'Param',
      parentId: 'ParentId',
      pluginType: 'PluginType',
      relatedUserListShrink: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      paramShrink: 'string',
      parentId: 'number',
      pluginType: 'string',
      relatedUserListShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataArchiveOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the data archiving ticket.
   */
  createOrderResult?: number[];
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request, which is used to query logs and troubleshoot issues.
   * 
   * @example
   * 283C461F-11D8-48AA-B695-DF092DA32AF3
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: { 'type': 'array', 'itemType': 'number' },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.createOrderResult)) {
      $dara.Model.validateArray(this.createOrderResult);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataArchiveOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDataArchiveOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDataArchiveOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataCorrectOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of the AttachmentKey parameter.
   * 
   * @example
   * order_attachment.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The purpose or objective of the data change. This parameter is used to help reduce unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  param?: CreateDataCorrectOrderRequestParam;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The stakeholders of the data change. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.
   */
  relatedUserList?: number[];
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      param: 'Param',
      realLoginUserUid: 'RealLoginUserUid',
      relatedUserList: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      param: CreateDataCorrectOrderRequestParam,
      realLoginUserUid: 'string',
      relatedUserList: { 'type': 'array', 'itemType': 'number' },
      tid: 'number',
    };
  }

  validate() {
    if(this.param && typeof (this.param as any).validate === 'function') {
      (this.param as any).validate();
    }
    if(Array.isArray(this.relatedUserList)) {
      $dara.Model.validateArray(this.relatedUserList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataCorrectOrderShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of the AttachmentKey parameter.
   * 
   * @example
   * order_attachment.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The purpose or objective of the data change. This parameter is used to help reduce unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  paramShrink?: string;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The stakeholders of the data change. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.
   */
  relatedUserListShrink?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      paramShrink: 'Param',
      realLoginUserUid: 'RealLoginUserUid',
      relatedUserListShrink: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      paramShrink: 'string',
      realLoginUserUid: 'string',
      relatedUserListShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataCorrectOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The IDs of the tickets.
   */
  createOrderResult?: number[];
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: { 'type': 'array', 'itemType': 'number' },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.createOrderResult)) {
      $dara.Model.validateArray(this.createOrderResult);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataCorrectOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDataCorrectOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDataCorrectOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataCronClearOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment for the ticket. The attachment provides more instructions for this operation.
   * 
   * You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to query the key of the attachment.
   * 
   * @example
   * order_attachement.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The purpose or objective of the data change. This reduces unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  param?: CreateDataCronClearOrderRequestParam;
  /**
   * @remarks
   * The stakeholders of this operation. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than Data Management (DMS) administrators and database administrators (DBAs) are not allowed to view the ticket details.
   */
  relatedUserList?: number[];
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  The ID of the tenant is displayed when you move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the Manage DMS tenants topic.
   * 
   * @example
   * 123454324
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      param: 'Param',
      relatedUserList: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      param: CreateDataCronClearOrderRequestParam,
      relatedUserList: { 'type': 'array', 'itemType': 'number' },
      tid: 'number',
    };
  }

  validate() {
    if(this.param && typeof (this.param as any).validate === 'function') {
      (this.param as any).validate();
    }
    if(Array.isArray(this.relatedUserList)) {
      $dara.Model.validateArray(this.relatedUserList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataCronClearOrderShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment for the ticket. The attachment provides more instructions for this operation.
   * 
   * You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to query the key of the attachment.
   * 
   * @example
   * order_attachement.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The purpose or objective of the data change. This reduces unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  paramShrink?: string;
  /**
   * @remarks
   * The stakeholders of this operation. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than Data Management (DMS) administrators and database administrators (DBAs) are not allowed to view the ticket details.
   */
  relatedUserListShrink?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  The ID of the tenant is displayed when you move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the Manage DMS tenants topic.
   * 
   * @example
   * 123454324
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      paramShrink: 'Param',
      relatedUserListShrink: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      paramShrink: 'string',
      relatedUserListShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataCronClearOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket.
   */
  createOrderResult?: number[];
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: { 'type': 'array', 'itemType': 'number' },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.createOrderResult)) {
      $dara.Model.validateArray(this.createOrderResult);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataCronClearOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDataCronClearOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDataCronClearOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataExportOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key.
   * 
   * @example
   * order_attachment.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The purpose or objective of the ticket. This parameter helps reduce unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * business_test
   */
  comment?: string;
  /**
   * @remarks
   * The ID of the parent ticket.
   * 
   * @example
   * 877****
   */
  parentId?: number;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  pluginParam?: CreateDataExportOrderRequestPluginParam;
  /**
   * @remarks
   * The UID of the Alibaba Cloud account that actually calls the API.
   * 
   * @example
   * 21400447956867****
   */
  realLoginUserUid?: string;
  /**
   * @remarks
   * The stakeholders involved in this operation.
   */
  relatedUserList?: number[];
  /**
   * @remarks
   * The tenant ID.
   * 
   * > To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      parentId: 'ParentId',
      pluginParam: 'PluginParam',
      realLoginUserUid: 'RealLoginUserUid',
      relatedUserList: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      parentId: 'number',
      pluginParam: CreateDataExportOrderRequestPluginParam,
      realLoginUserUid: 'string',
      relatedUserList: { 'type': 'array', 'itemType': 'number' },
      tid: 'number',
    };
  }

  validate() {
    if(this.pluginParam && typeof (this.pluginParam as any).validate === 'function') {
      (this.pluginParam as any).validate();
    }
    if(Array.isArray(this.relatedUserList)) {
      $dara.Model.validateArray(this.relatedUserList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataExportOrderShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key.
   * 
   * @example
   * order_attachment.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The purpose or objective of the ticket. This parameter helps reduce unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * business_test
   */
  comment?: string;
  /**
   * @remarks
   * The ID of the parent ticket.
   * 
   * @example
   * 877****
   */
  parentId?: number;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  pluginParamShrink?: string;
  /**
   * @remarks
   * The UID of the Alibaba Cloud account that actually calls the API.
   * 
   * @example
   * 21400447956867****
   */
  realLoginUserUid?: string;
  /**
   * @remarks
   * The stakeholders involved in this operation.
   */
  relatedUserListShrink?: string;
  /**
   * @remarks
   * The tenant ID.
   * 
   * > To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      parentId: 'ParentId',
      pluginParamShrink: 'PluginParam',
      realLoginUserUid: 'RealLoginUserUid',
      relatedUserListShrink: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      parentId: 'number',
      pluginParamShrink: 'string',
      realLoginUserUid: 'string',
      relatedUserListShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataExportOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The content of the ticket.
   */
  createOrderResult?: CreateDataExportOrderResponseBodyCreateOrderResult;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 7FAD400F-7A5C-4193-8F9A-39D86C4F0231
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   true
   * *   false
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: CreateDataExportOrderResponseBodyCreateOrderResult,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.createOrderResult && typeof (this.createOrderResult as any).validate === 'function') {
      (this.createOrderResult as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataExportOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDataExportOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDataExportOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataImportOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of the AttachmentKey parameter.
   * 
   * @example
   * order_attachment.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The purpose or objective of the data import. This parameter is used to help reduce unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  param?: CreateDataImportOrderRequestParam;
  /**
   * @remarks
   * The stakeholders of the data import. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.
   */
  relatedUserList?: number[];
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      param: 'Param',
      relatedUserList: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      param: CreateDataImportOrderRequestParam,
      relatedUserList: { 'type': 'array', 'itemType': 'number' },
      tid: 'number',
    };
  }

  validate() {
    if(this.param && typeof (this.param as any).validate === 'function') {
      (this.param as any).validate();
    }
    if(Array.isArray(this.relatedUserList)) {
      $dara.Model.validateArray(this.relatedUserList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataImportOrderShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of the AttachmentKey parameter.
   * 
   * @example
   * order_attachment.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The purpose or objective of the data import. This parameter is used to help reduce unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  paramShrink?: string;
  /**
   * @remarks
   * The stakeholders of the data import. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.
   */
  relatedUserListShrink?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      paramShrink: 'Param',
      relatedUserListShrink: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      paramShrink: 'string',
      relatedUserListShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataImportOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket.
   */
  createOrderResult?: number[];
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: { 'type': 'array', 'itemType': 'number' },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.createOrderResult)) {
      $dara.Model.validateArray(this.createOrderResult);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataImportOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDataImportOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDataImportOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataLakeDatabaseRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * oss://path/to/database
   */
  location?: string;
  parameters?: { [key: string]: string };
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      description: 'Description',
      location: 'Location',
      parameters: 'Parameters',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      description: 'string',
      location: 'string',
      parameters: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      tid: 'number',
    };
  }

  validate() {
    if(this.parameters) {
      $dara.Model.validateMap(this.parameters);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataLakeDatabaseShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * oss://path/to/database
   */
  location?: string;
  parametersShrink?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      description: 'Description',
      location: 'Location',
      parametersShrink: 'Parameters',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      description: 'string',
      location: 'string',
      parametersShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataLakeDatabaseResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * D911009F-3E95-5AFD-8CF1-73F7B4F15D6E
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataLakeDatabaseResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDataLakeDatabaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDataLakeDatabaseResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataLakePartitionRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * true
   */
  ifNotExists?: boolean;
  /**
   * @example
   * true
   */
  needResult?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  partitionInput?: DLPartitionInput;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      ifNotExists: 'IfNotExists',
      needResult: 'NeedResult',
      partitionInput: 'PartitionInput',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      ifNotExists: 'boolean',
      needResult: 'boolean',
      partitionInput: DLPartitionInput,
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    if(this.partitionInput && typeof (this.partitionInput as any).validate === 'function') {
      (this.partitionInput as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataLakePartitionShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * true
   */
  ifNotExists?: boolean;
  /**
   * @example
   * true
   */
  needResult?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  partitionInputShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      ifNotExists: 'IfNotExists',
      needResult: 'NeedResult',
      partitionInputShrink: 'PartitionInput',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      ifNotExists: 'boolean',
      needResult: 'boolean',
      partitionInputShrink: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataLakePartitionResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  partition?: DLPartition;
  /**
   * @example
   * 427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D
   */
  requestId?: string;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      partition: 'Partition',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      partition: DLPartition,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.partition && typeof (this.partition as any).validate === 'function') {
      (this.partition as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataLakePartitionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDataLakePartitionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDataLakePartitionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataLakeTableRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  tableInput?: OpenStructDLTableInput;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      tableInput: 'TableInput',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      tableInput: OpenStructDLTableInput,
      tid: 'number',
    };
  }

  validate() {
    if(this.tableInput && typeof (this.tableInput as any).validate === 'function') {
      (this.tableInput as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataLakeTableShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  tableInputShrink?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      tableInputShrink: 'TableInput',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      tableInputShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataLakeTableResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 7FAD400F-7A5C-4193-8F9A-39D86C4F0231
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  table?: DLTable;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      table: 'Table',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      table: DLTable,
    };
  }

  validate() {
    if(this.table && typeof (this.table as any).validate === 'function') {
      (this.table as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataLakeTableResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDataLakeTableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDataLakeTableResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataTrackOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The purpose or objective of the data tracking ticket. This parameter is used to help reduce unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  param?: CreateDataTrackOrderRequestParam;
  /**
   * @remarks
   * The IDs of the operators that are related to the ticket.
   */
  relatedUserList?: string[];
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      param: 'Param',
      relatedUserList: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      param: CreateDataTrackOrderRequestParam,
      relatedUserList: { 'type': 'array', 'itemType': 'string' },
      tid: 'number',
    };
  }

  validate() {
    if(this.param && typeof (this.param as any).validate === 'function') {
      (this.param as any).validate();
    }
    if(Array.isArray(this.relatedUserList)) {
      $dara.Model.validateArray(this.relatedUserList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataTrackOrderShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The purpose or objective of the data tracking ticket. This parameter is used to help reduce unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  paramShrink?: string;
  /**
   * @remarks
   * The IDs of the operators that are related to the ticket.
   */
  relatedUserListShrink?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      paramShrink: 'Param',
      relatedUserListShrink: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      paramShrink: 'string',
      relatedUserListShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataTrackOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The IDs of the data tracking tickets.
   */
  createOrderResult?: number[];
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 283C461F-11D8-48AA-B695-DF092DA32AF3
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: { 'type': 'array', 'itemType': 'number' },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.createOrderResult)) {
      $dara.Model.validateArray(this.createOrderResult);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataTrackOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDataTrackOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDataTrackOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDatabaseExportOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key.
   * 
   * @example
   * order_attachment.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The purpose or objective of the ticket. This parameter helps reduce unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * document_test
   */
  comment?: string;
  /**
   * @remarks
   * The ID of the parent ticket.
   * 
   * @example
   * 877****
   */
  parentId?: number;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  pluginParam?: CreateDatabaseExportOrderRequestPluginParam;
  /**
   * @remarks
   * The stakeholders involved in this operation.
   */
  relatedUserList?: number[];
  /**
   * @remarks
   * The tenant ID.
   * 
   * > To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      parentId: 'ParentId',
      pluginParam: 'PluginParam',
      relatedUserList: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      parentId: 'number',
      pluginParam: CreateDatabaseExportOrderRequestPluginParam,
      relatedUserList: { 'type': 'array', 'itemType': 'number' },
      tid: 'number',
    };
  }

  validate() {
    if(this.pluginParam && typeof (this.pluginParam as any).validate === 'function') {
      (this.pluginParam as any).validate();
    }
    if(Array.isArray(this.relatedUserList)) {
      $dara.Model.validateArray(this.relatedUserList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDatabaseExportOrderShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key.
   * 
   * @example
   * order_attachment.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The purpose or objective of the ticket. This parameter helps reduce unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * document_test
   */
  comment?: string;
  /**
   * @remarks
   * The ID of the parent ticket.
   * 
   * @example
   * 877****
   */
  parentId?: number;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  pluginParamShrink?: string;
  /**
   * @remarks
   * The stakeholders involved in this operation.
   */
  relatedUserListShrink?: string;
  /**
   * @remarks
   * The tenant ID.
   * 
   * > To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      parentId: 'ParentId',
      pluginParamShrink: 'PluginParam',
      relatedUserListShrink: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      parentId: 'number',
      pluginParamShrink: 'string',
      relatedUserListShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDatabaseExportOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The information about the ticket.
   */
  createOrderResult?: CreateDatabaseExportOrderResponseBodyCreateOrderResult;
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   true
   * *   false
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: CreateDatabaseExportOrderResponseBodyCreateOrderResult,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.createOrderResult && typeof (this.createOrderResult as any).validate === 'function') {
      (this.createOrderResult as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDatabaseExportOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDatabaseExportOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDatabaseExportOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDifyInstanceRequest extends $dara.Model {
  adbpgInstanceMode?: string;
  clientToken?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  dataRegion?: string;
  databaseOption?: string;
  dbEngineType?: string;
  dbEngineVersion?: string;
  dbInstanceAccount?: string;
  dbInstanceCategory?: string;
  dbInstanceClass?: string;
  dbInstancePassword?: string;
  dbResourceId?: number;
  dbStorageSize?: string;
  dbStorageType?: string;
  dryRun?: boolean;
  kvStoreAccount?: string;
  kvStoreEngineVersion?: string;
  kvStoreInstanceClass?: string;
  kvStoreNodeType?: string;
  kvStoreOption?: string;
  kvStorePassword?: string;
  kvStoreResourceId?: number;
  kvStoreType?: string;
  ossPath?: string;
  ossResourceId?: number;
  payPeriod?: number;
  payPeriodType?: string;
  payType?: string;
  replicas?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  resourceQuota?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  securityGroupId?: string;
  segDiskPerformanceLevel?: string;
  segNodeNum?: number;
  storageType?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  vSwitchId?: string;
  vectordbAccount?: string;
  vectordbCategory?: string;
  vectordbEngineVersion?: string;
  vectordbInstanceSpec?: string;
  vectordbOption?: string;
  vectordbPassword?: string;
  vectordbResourceId?: number;
  vectordbStorageSize?: string;
  vectordbStorageType?: string;
  vectordbType?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  vpcId?: string;
  workspaceDescription?: string;
  workspaceId?: string;
  workspaceName?: string;
  workspaceOption?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  zoneId?: string;
  static names(): { [key: string]: string } {
    return {
      adbpgInstanceMode: 'AdbpgInstanceMode',
      clientToken: 'ClientToken',
      dataRegion: 'DataRegion',
      databaseOption: 'DatabaseOption',
      dbEngineType: 'DbEngineType',
      dbEngineVersion: 'DbEngineVersion',
      dbInstanceAccount: 'DbInstanceAccount',
      dbInstanceCategory: 'DbInstanceCategory',
      dbInstanceClass: 'DbInstanceClass',
      dbInstancePassword: 'DbInstancePassword',
      dbResourceId: 'DbResourceId',
      dbStorageSize: 'DbStorageSize',
      dbStorageType: 'DbStorageType',
      dryRun: 'DryRun',
      kvStoreAccount: 'KvStoreAccount',
      kvStoreEngineVersion: 'KvStoreEngineVersion',
      kvStoreInstanceClass: 'KvStoreInstanceClass',
      kvStoreNodeType: 'KvStoreNodeType',
      kvStoreOption: 'KvStoreOption',
      kvStorePassword: 'KvStorePassword',
      kvStoreResourceId: 'KvStoreResourceId',
      kvStoreType: 'KvStoreType',
      ossPath: 'OssPath',
      ossResourceId: 'OssResourceId',
      payPeriod: 'PayPeriod',
      payPeriodType: 'PayPeriodType',
      payType: 'PayType',
      replicas: 'Replicas',
      resourceQuota: 'ResourceQuota',
      securityGroupId: 'SecurityGroupId',
      segDiskPerformanceLevel: 'SegDiskPerformanceLevel',
      segNodeNum: 'SegNodeNum',
      storageType: 'StorageType',
      vSwitchId: 'VSwitchId',
      vectordbAccount: 'VectordbAccount',
      vectordbCategory: 'VectordbCategory',
      vectordbEngineVersion: 'VectordbEngineVersion',
      vectordbInstanceSpec: 'VectordbInstanceSpec',
      vectordbOption: 'VectordbOption',
      vectordbPassword: 'VectordbPassword',
      vectordbResourceId: 'VectordbResourceId',
      vectordbStorageSize: 'VectordbStorageSize',
      vectordbStorageType: 'VectordbStorageType',
      vectordbType: 'VectordbType',
      vpcId: 'VpcId',
      workspaceDescription: 'WorkspaceDescription',
      workspaceId: 'WorkspaceId',
      workspaceName: 'WorkspaceName',
      workspaceOption: 'WorkspaceOption',
      zoneId: 'ZoneId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adbpgInstanceMode: 'string',
      clientToken: 'string',
      dataRegion: 'string',
      databaseOption: 'string',
      dbEngineType: 'string',
      dbEngineVersion: 'string',
      dbInstanceAccount: 'string',
      dbInstanceCategory: 'string',
      dbInstanceClass: 'string',
      dbInstancePassword: 'string',
      dbResourceId: 'number',
      dbStorageSize: 'string',
      dbStorageType: 'string',
      dryRun: 'boolean',
      kvStoreAccount: 'string',
      kvStoreEngineVersion: 'string',
      kvStoreInstanceClass: 'string',
      kvStoreNodeType: 'string',
      kvStoreOption: 'string',
      kvStorePassword: 'string',
      kvStoreResourceId: 'number',
      kvStoreType: 'string',
      ossPath: 'string',
      ossResourceId: 'number',
      payPeriod: 'number',
      payPeriodType: 'string',
      payType: 'string',
      replicas: 'number',
      resourceQuota: 'string',
      securityGroupId: 'string',
      segDiskPerformanceLevel: 'string',
      segNodeNum: 'number',
      storageType: 'string',
      vSwitchId: 'string',
      vectordbAccount: 'string',
      vectordbCategory: 'string',
      vectordbEngineVersion: 'string',
      vectordbInstanceSpec: 'string',
      vectordbOption: 'string',
      vectordbPassword: 'string',
      vectordbResourceId: 'number',
      vectordbStorageSize: 'string',
      vectordbStorageType: 'string',
      vectordbType: 'string',
      vpcId: 'string',
      workspaceDescription: 'string',
      workspaceId: 'string',
      workspaceName: 'string',
      workspaceOption: 'string',
      zoneId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDifyInstanceResponseBody extends $dara.Model {
  code?: string;
  data?: CreateDifyInstanceResponseBodyData;
  errorCode?: string;
  httpStatusCode?: number;
  message?: string;
  requestId?: string;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      errorCode: 'ErrorCode',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: CreateDifyInstanceResponseBodyData,
      errorCode: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDifyInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDifyInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDifyInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateFreeLockCorrectOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of the AttachmentKey parameter.
   * 
   * @example
   * order_attachment.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The purpose or objective of the data change. This parameter is used to help reduce unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  param?: CreateFreeLockCorrectOrderRequestParam;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The stakeholders of the data change. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.
   */
  relatedUserList?: number[];
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      param: 'Param',
      realLoginUserUid: 'RealLoginUserUid',
      relatedUserList: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      param: CreateFreeLockCorrectOrderRequestParam,
      realLoginUserUid: 'string',
      relatedUserList: { 'type': 'array', 'itemType': 'number' },
      tid: 'number',
    };
  }

  validate() {
    if(this.param && typeof (this.param as any).validate === 'function') {
      (this.param as any).validate();
    }
    if(Array.isArray(this.relatedUserList)) {
      $dara.Model.validateArray(this.relatedUserList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateFreeLockCorrectOrderShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The key of the attachment that provides more instructions for the ticket. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to obtain the attachment key from the value of the AttachmentKey parameter.
   * 
   * @example
   * order_attachment.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The purpose or objective of the data change. This parameter is used to help reduce unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  paramShrink?: string;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The stakeholders of the data change. All stakeholders can view the ticket details and assist in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.
   */
  relatedUserListShrink?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      paramShrink: 'Param',
      realLoginUserUid: 'RealLoginUserUid',
      relatedUserListShrink: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      paramShrink: 'string',
      realLoginUserUid: 'string',
      relatedUserListShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateFreeLockCorrectOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket.
   */
  createOrderResult?: number[];
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: { 'type': 'array', 'itemType': 'number' },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.createOrderResult)) {
      $dara.Model.validateArray(this.createOrderResult);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateFreeLockCorrectOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateFreeLockCorrectOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateFreeLockCorrectOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLakeHouseSpaceRequest extends $dara.Model {
  /**
   * @remarks
   * The description of the workspace.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The ID of the development database. You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 2435****
   */
  devDbId?: string;
  /**
   * @remarks
   * The type of the database. Valid values:
   * 
   * *   **14**: AnalyticDB for MySQL
   * *   **18**: AnalyticDB for PostgreSQL
   * 
   * This parameter is required.
   * 
   * @example
   * 14
   */
  dwDbType?: string;
  /**
   * @remarks
   * The mode in which the workspace runs. Valid values:
   * 
   * *   **0**: basic mode. This mode is unavailable.
   * *   **1**: standard mode.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  mode?: string;
  /**
   * @remarks
   * The ID of the production database. You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the ID.
   * 
   * @example
   * 2442****
   */
  prodDbId?: string;
  /**
   * @remarks
   * The configuration of the workspace. Valid values:
   * 
   * *   **skipManualRunCheck**: No security rule check is required in the trial run phase.
   * *   **skipPublishApprove**: No approval is required for publishing and O\\&M.
   * 
   * This parameter is required.
   * 
   * @example
   * {\\"skipManualRunCheck\\":true,\\"skipPublishApprove\\":true}
   */
  spaceConfig?: string;
  /**
   * @remarks
   * The name of the workspace.
   * 
   * This parameter is required.
   * 
   * @example
   * test_space
   */
  spaceName?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      devDbId: 'DevDbId',
      dwDbType: 'DwDbType',
      mode: 'Mode',
      prodDbId: 'ProdDbId',
      spaceConfig: 'SpaceConfig',
      spaceName: 'SpaceName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      devDbId: 'string',
      dwDbType: 'string',
      mode: 'string',
      prodDbId: 'string',
      spaceConfig: 'string',
      spaceName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLakeHouseSpaceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * InvalidParameterValid
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * Invalid parameters: space name,mode,prod db id,db type,config.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 7FAD400F-7A5C-4193-8F9A-39D86C4F0231
   */
  requestId?: string;
  /**
   * @remarks
   * The ID of the workspace.
   * 
   * @example
   * 24
   */
  spaceId?: number;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      spaceId: 'SpaceId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      spaceId: 'number',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLakeHouseSpaceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateLakeHouseSpaceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateLakeHouseSpaceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogicDatabaseRequest extends $dara.Model {
  /**
   * @remarks
   * The alias of the logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * test_logic_db
   */
  alias?: string;
  /**
   * @remarks
   * The IDs of the physical databases that compose the logical database. You can specify one or more database IDs. You can call the [ListDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the IDs of the physical databases.
   * 
   * This parameter is required.
   */
  databaseIds?: number[];
  /**
   * @remarks
   * The ID of the tenant. 
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      databaseIds: 'DatabaseIds',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      databaseIds: { 'type': 'array', 'itemType': 'number' },
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.databaseIds)) {
      $dara.Model.validateArray(this.databaseIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogicDatabaseShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The alias of the logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * test_logic_db
   */
  alias?: string;
  /**
   * @remarks
   * The IDs of the physical databases that compose the logical database. You can specify one or more database IDs. You can call the [ListDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the IDs of the physical databases.
   * 
   * This parameter is required.
   */
  databaseIdsShrink?: string;
  /**
   * @remarks
   * The ID of the tenant. 
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      databaseIdsShrink: 'DatabaseIds',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      databaseIdsShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogicDatabaseResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the logical database.
   * 
   * @example
   * 1***
   */
  logicDbId?: number;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C51420E3-144A-4A94-B473-8662FCF4AD10
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * - true: The request is successful.
   * - false: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      logicDbId: 'LogicDbId',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      logicDbId: 'number',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogicDatabaseResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateLogicDatabaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateLogicDatabaseResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The key of an attachment that is returned after the attachment is uploaded. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to query the key of the attachment.
   * 
   * @example
   * test_AttachmentKey
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The description of the ticket to be created.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The ticket creation parameter. The value is a JSON string. The value of this parameter differs based on the type of the ticket. For more information, see the **PluginParam parameter** section in this topic.
   * 
   * This parameter is required.
   * 
   * @example
   * {PluginParam_test}
   */
  pluginParam?: { [key: string]: any };
  /**
   * @remarks
   * The type of the ticket. For more information, see [PluginType parameter](https://help.aliyun.com/document_detail/429109.html).
   * 
   * This parameter is required.
   * 
   * @example
   * DATA_EXPORT
   */
  pluginType?: string;
  /**
   * @remarks
   * The IDs of the stakeholders that are involved in the ticket. Separate multiple IDs with commas (,).
   * 
   * @example
   * user1,user2
   */
  relatedUserList?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      pluginParam: 'PluginParam',
      pluginType: 'PluginType',
      relatedUserList: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      pluginParam: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      pluginType: 'string',
      relatedUserList: 'string',
      tid: 'number',
    };
  }

  validate() {
    if(this.pluginParam) {
      $dara.Model.validateMap(this.pluginParam);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOrderShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The key of an attachment that is returned after the attachment is uploaded. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to query the key of the attachment.
   * 
   * @example
   * test_AttachmentKey
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The description of the ticket to be created.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The ticket creation parameter. The value is a JSON string. The value of this parameter differs based on the type of the ticket. For more information, see the **PluginParam parameter** section in this topic.
   * 
   * This parameter is required.
   * 
   * @example
   * {PluginParam_test}
   */
  pluginParamShrink?: string;
  /**
   * @remarks
   * The type of the ticket. For more information, see [PluginType parameter](https://help.aliyun.com/document_detail/429109.html).
   * 
   * This parameter is required.
   * 
   * @example
   * DATA_EXPORT
   */
  pluginType?: string;
  /**
   * @remarks
   * The IDs of the stakeholders that are involved in the ticket. Separate multiple IDs with commas (,).
   * 
   * @example
   * user1,user2
   */
  relatedUserList?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      pluginParamShrink: 'PluginParam',
      pluginType: 'PluginType',
      relatedUserList: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      pluginParamShrink: 'string',
      pluginType: 'string',
      relatedUserList: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket.
   */
  createOrderResult?: CreateOrderResponseBodyCreateOrderResult;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 427688B8-ADFB-4C4E-9D45-EF5C1FD6****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: CreateOrderResponseBodyCreateOrderResult,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.createOrderResult && typeof (this.createOrderResult as any).validate === 'function') {
      (this.createOrderResult as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateProcCorrectOrderRequest extends $dara.Model {
  /**
   * @example
   * order_attachment.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  param?: CreateProcCorrectOrderRequestParam;
  relatedUserList?: number[];
  /**
   * @example
   * 4***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      param: 'Param',
      relatedUserList: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      param: CreateProcCorrectOrderRequestParam,
      relatedUserList: { 'type': 'array', 'itemType': 'number' },
      tid: 'number',
    };
  }

  validate() {
    if(this.param && typeof (this.param as any).validate === 'function') {
      (this.param as any).validate();
    }
    if(Array.isArray(this.relatedUserList)) {
      $dara.Model.validateArray(this.relatedUserList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateProcCorrectOrderShrinkRequest extends $dara.Model {
  /**
   * @example
   * order_attachment.txt
   */
  attachmentKey?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  paramShrink?: string;
  relatedUserListShrink?: string;
  /**
   * @example
   * 4***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      paramShrink: 'Param',
      relatedUserListShrink: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      paramShrink: 'string',
      relatedUserListShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateProcCorrectOrderResponseBody extends $dara.Model {
  createOrderResult?: number[];
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: { 'type': 'array', 'itemType': 'number' },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.createOrderResult)) {
      $dara.Model.validateArray(this.createOrderResult);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateProcCorrectOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateProcCorrectOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateProcCorrectOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateProxyRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the database instance. You can call the [ListInstances](https://www.alibabacloud.com/help/en/data-management-service/latest/listinstances) or [GetInstance](https://www.alibabacloud.com/help/en/data-management-service/latest/getinstance) operation to query the database instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 183****
   */
  instanceId?: number;
  /**
   * @remarks
   * The password of the database account.
   * 
   * This parameter is required.
   * 
   * @example
   * ******
   */
  password?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The username of the database account.
   * 
   * This parameter is required.
   * 
   * @example
   * username
   */
  username?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      password: 'Password',
      tid: 'Tid',
      username: 'Username',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'number',
      password: 'string',
      tid: 'number',
      username: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateProxyResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * InvalidParameterValid
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * the instance proxy already exists.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the secure access proxy.
   * 
   * @example
   * 4**
   */
  proxyId?: number;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4FFD154E-F57F-5374-B568-D6276F15****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * - **true**: The request was successful.
   * - **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      proxyId: 'ProxyId',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      proxyId: 'number',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateProxyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateProxyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateProxyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateProxyAccessRequest extends $dara.Model {
  /**
   * @remarks
   * The database account.
   * 
   * @example
   * xxx
   */
  indepAccount?: string;
  /**
   * @remarks
   * The password that is used to log on to the database.
   * 
   * @example
   * xxx
   */
  indepPassword?: string;
  /**
   * @remarks
   * The ID of the security protection agent. You can call the [ListProxies](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxies) or [GetProxy](https://www.alibabacloud.com/help/en/data-management-service/latest/getproxy) operation to obtain this parameter.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  proxyId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to obtain this parameter.
   * 
   * @example
   * 1
   */
  tid?: number;
  /**
   * @remarks
   * The ID of the user. You can call the [ListUsers](https://www.alibabacloud.com/help/en/data-management-service/latest/listusers) or [GetUser](https://www.alibabacloud.com/help/en/data-management-service/latest/getuser) operation to obtain this parameter.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  userId?: number;
  static names(): { [key: string]: string } {
    return {
      indepAccount: 'IndepAccount',
      indepPassword: 'IndepPassword',
      proxyId: 'ProxyId',
      tid: 'Tid',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      indepAccount: 'string',
      indepPassword: 'string',
      proxyId: 'number',
      tid: 'number',
      userId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateProxyAccessResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned to the query task.
   * 
   * @example
   * 200
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the security protection authorization. After the security protection agent authorizes the target user, the system automatically generates a security protection authorization ID. The ID is globally unique.
   * 
   * @example
   * 1
   */
  proxyAccessId?: number;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the call was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      proxyAccessId: 'ProxyAccessId',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      proxyAccessId: 'number',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateProxyAccessResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateProxyAccessResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateProxyAccessResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePublishGroupTaskRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the database for which the schema design is executed.
   * 
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  dbId?: number;
  /**
   * @remarks
   * Indicates whether the database is a logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * > : You can create a schema design ticket in the DMS console. For more information, see [Design schemas](https://help.aliyun.com/document_detail/69711.html). You can also create a schema design ticket by calling the [CreateOrder](https://help.aliyun.com/document_detail/144649.html) operation and obtain the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 142435
   */
  orderId?: number;
  /**
   * @remarks
   * The time to execute the schema design ticket.
   * 
   * @example
   * 2019-10-10 00:00:00
   */
  planTime?: string;
  /**
   * @remarks
   * The policy to execute the schema design ticket. Valid values:
   * 
   * *   IMMEDIATELY: immediately executes the schema design ticket.
   * *   REGULARLY: executes the schema design ticket at a scheduled time.
   * 
   * This parameter is required.
   * 
   * @example
   * IMMEDIATELY
   */
  publishStrategy?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      logic: 'Logic',
      orderId: 'OrderId',
      planTime: 'PlanTime',
      publishStrategy: 'PublishStrategy',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      logic: 'boolean',
      orderId: 'number',
      planTime: 'string',
      publishStrategy: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePublishGroupTaskResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The ID of the job.
   * 
   * @example
   * 413452
   */
  taskId?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      taskId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePublishGroupTaskResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreatePublishGroupTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreatePublishGroupTaskResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSQLReviewOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The purpose or objective of the SQL review. This reduces unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  param?: CreateSQLReviewOrderRequestParam;
  /**
   * @remarks
   * The stakeholders involved in this operation. All the specified stakeholders can view the ticket details and take part in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.
   */
  relatedUserList?: number[];
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      param: 'Param',
      relatedUserList: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      param: CreateSQLReviewOrderRequestParam,
      relatedUserList: { 'type': 'array', 'itemType': 'number' },
      tid: 'number',
    };
  }

  validate() {
    if(this.param && typeof (this.param as any).validate === 'function') {
      (this.param as any).validate();
    }
    if(Array.isArray(this.relatedUserList)) {
      $dara.Model.validateArray(this.relatedUserList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSQLReviewOrderShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The purpose or objective of the SQL review. This reduces unnecessary communication.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  paramShrink?: string;
  /**
   * @remarks
   * The stakeholders involved in this operation. All the specified stakeholders can view the ticket details and take part in the approval process. Irrelevant users other than DMS administrators and database administrators (DBAs) are not allowed to view the ticket details.
   */
  relatedUserListShrink?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      paramShrink: 'Param',
      relatedUserListShrink: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      paramShrink: 'string',
      relatedUserListShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSQLReviewOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The result of the ticket creation task.
   */
  createOrderResult?: number[];
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * 200
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: { 'type': 'array', 'itemType': 'number' },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.createOrderResult)) {
      $dara.Model.validateArray(this.createOrderResult);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSQLReviewOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateSQLReviewOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateSQLReviewOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateScenarioRequest extends $dara.Model {
  /**
   * @remarks
   * The description of the business scenario.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The name of the business scenario.
   * 
   * This parameter is required.
   * 
   * @example
   * Business scenario - test
   */
  scenarioName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      scenarioName: 'ScenarioName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      scenarioName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateScenarioResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4E1D2B4D-3E53-4ABC-999D-1D2520B3471A
   */
  requestId?: string;
  /**
   * @remarks
   * The ID of the business scenario.
   * 
   * @example
   * 36***
   */
  scenarioId?: number;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      scenarioId: 'ScenarioId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      scenarioId: 'number',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateScenarioResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateScenarioResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateScenarioResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStandardGroupRequest extends $dara.Model {
  /**
   * @remarks
   * The type of the database engine. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * This parameter is required.
   * 
   * @example
   * mysql
   */
  dbType?: string;
  /**
   * @remarks
   * The description of the security rule set.
   * 
   * This parameter is required.
   * 
   * @example
   * test_rule
   */
  description?: string;
  /**
   * @remarks
   * The name of the security rule set.
   * 
   * This parameter is required.
   * 
   * @example
   * test_group
   */
  groupName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * @example
   * 3000
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      description: 'Description',
      groupName: 'GroupName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      description: 'string',
      groupName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStandardGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * xxx
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 34E01EDD-6A16-4CF0-9541-C644D1BE01AA
   */
  requestId?: string;
  /**
   * @remarks
   * The information about the created security rule set.
   */
  standardGroup?: CreateStandardGroupResponseBodyStandardGroup;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      standardGroup: 'StandardGroup',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      standardGroup: CreateStandardGroupResponseBodyStandardGroup,
      success: 'boolean',
    };
  }

  validate() {
    if(this.standardGroup && typeof (this.standardGroup as any).validate === 'function') {
      (this.standardGroup as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStandardGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateStandardGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateStandardGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStructSyncOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The key of an attachment that is returned after the attachment is uploaded. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to query the key of the attachment.
   * 
   * @example
   * upload_3c7edea3-e4c3-4403-857d-737043036f69_test.sql
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The remarks of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  param?: CreateStructSyncOrderRequestParam;
  /**
   * @remarks
   * The IDs of the stakeholders.
   */
  relatedUserList?: number[];
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      param: 'Param',
      relatedUserList: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      param: CreateStructSyncOrderRequestParam,
      relatedUserList: { 'type': 'array', 'itemType': 'number' },
      tid: 'number',
    };
  }

  validate() {
    if(this.param && typeof (this.param as any).validate === 'function') {
      (this.param as any).validate();
    }
    if(Array.isArray(this.relatedUserList)) {
      $dara.Model.validateArray(this.relatedUserList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStructSyncOrderShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The key of an attachment that is returned after the attachment is uploaded. You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to query the key of the attachment.
   * 
   * @example
   * upload_3c7edea3-e4c3-4403-857d-737043036f69_test.sql
   */
  attachmentKey?: string;
  /**
   * @remarks
   * The remarks of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  comment?: string;
  /**
   * @remarks
   * The parameters of the ticket.
   * 
   * This parameter is required.
   */
  paramShrink?: string;
  /**
   * @remarks
   * The IDs of the stakeholders.
   */
  relatedUserListShrink?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      attachmentKey: 'AttachmentKey',
      comment: 'Comment',
      paramShrink: 'Param',
      relatedUserListShrink: 'RelatedUserList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attachmentKey: 'string',
      comment: 'string',
      paramShrink: 'string',
      relatedUserListShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStructSyncOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The result of creating the ticket.
   */
  createOrderResult?: number[];
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4E1D2B4D-3E53-4ABC-999D-1D2520B3471A
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      createOrderResult: 'CreateOrderResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createOrderResult: { 'type': 'array', 'itemType': 'number' },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.createOrderResult)) {
      $dara.Model.validateArray(this.createOrderResult);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateStructSyncOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateStructSyncOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateStructSyncOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTaskRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 7***
   */
  dagId?: number;
  /**
   * @remarks
   * The position of the node on the Directed Acyclic Graph (DAG).
   * 
   * @example
   * test
   */
  graphParam?: string;
  /**
   * @remarks
   * The configuration of the node.
   * 
   * @example
   * test
   */
  nodeContent?: string;
  /**
   * @remarks
   * The name of the node that you want to create.
   * 
   * This parameter is required.
   * 
   * @example
   * zhttest
   */
  nodeName?: string;
  /**
   * @remarks
   * The output variables configured for the task.
   * 
   * @example
   * test
   */
  nodeOutput?: string;
  /**
   * @remarks
   * The type of the node that you want to create. For more information about the valid values for this parameter, see [NodeType parameter](https://help.aliyun.com/document_detail/424705.html).
   * 
   * This parameter is required.
   * 
   * @example
   * 36
   */
  nodeType?: string;
  /**
   * @remarks
   * The tenant ID.
   * 
   * >  To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The time variables configured for the node.
   * 
   * @example
   * test
   */
  timeVariables?: string;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      graphParam: 'GraphParam',
      nodeContent: 'NodeContent',
      nodeName: 'NodeName',
      nodeOutput: 'NodeOutput',
      nodeType: 'NodeType',
      tid: 'Tid',
      timeVariables: 'TimeVariables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      graphParam: 'string',
      nodeContent: 'string',
      nodeName: 'string',
      nodeOutput: 'string',
      nodeType: 'string',
      tid: 'number',
      timeVariables: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTaskResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * InvalidParameterValid
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * InvalidParameterValid
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the task node returned when the task was created.
   * 
   * @example
   * 3***
   */
  nodeId?: number;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * CFD8FE00-36D9-4C1B-940D-65A7B73D9066
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   true
   * *   false
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      nodeId: 'NodeId',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      nodeId: 'number',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTaskResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateTaskResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTaskFlowRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the task flow.
   * 
   * This parameter is required.
   * 
   * @example
   * Dag_Name
   */
  dagName?: string;
  /**
   * @remarks
   * The description of the task flow.
   * 
   * @example
   * zht_test
   */
  description?: string;
  /**
   * @remarks
   * The ID of the scenario.
   * 
   * @example
   * 2**
   */
  scenarioId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagName: 'DagName',
      description: 'Description',
      scenarioId: 'ScenarioId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagName: 'string',
      description: 'string',
      scenarioId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTaskFlowResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow.
   * 
   * @example
   * 33***
   */
  dagId?: number;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * User can not access to Tenant [1]
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 19DA51A9-AC3E-5C36-8351-07EBCD2B89A1
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTaskFlowResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateTaskFlowResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateTaskFlowResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateUploadFileJobRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the attachment file.
   * 
   * >  The file name must end with .txt or .sql. For example, the file name can be test.txt or test.sql.
   * 
   * This parameter is required.
   * 
   * @example
   * test.txt
   */
  fileName?: string;
  /**
   * @remarks
   * The purpose of the attachment file. Valid values:
   * 
   * *   **datacorrect**: The file is uploaded to change data.
   * *   **order_info_attachment**: The file is uploaded as an attachment in a ticket.
   * *   **big-file**: The file is uploaded to import multiple data records at a time.
   * *   **sqlreview**: The file is uploaded for SQL review.
   * 
   * This parameter is required.
   * 
   * @example
   * datacorrect
   */
  fileSource?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The URL of the attachment file. The URL must be an HTTP URL or an HTTPS URL.
   * 
   * >  You can upload the attachment file to an Object Storage Service (OSS) bucket and obtain the URL of the file in the OSS console. For more information, see [Share objects](https://help.aliyun.com/document_detail/195674.html).
   * 
   * This parameter is required.
   * 
   * @example
   * https://XXX.oss-cn-hangzhou.aliyuncs.com/test.txt
   */
  uploadURL?: string;
  static names(): { [key: string]: string } {
    return {
      fileName: 'FileName',
      fileSource: 'FileSource',
      tid: 'Tid',
      uploadURL: 'UploadURL',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileName: 'string',
      fileSource: 'string',
      tid: 'number',
      uploadURL: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateUploadFileJobResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * InvalidParameterValid
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * Unsupported url scheme : null, scheme must be https or http
   */
  errorMessage?: string;
  /**
   * @remarks
   * The key of the task.
   * 
   * >  You can call the [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html) operation to query the progress and details of the task.
   * 
   * @example
   * 761f18031635736380812****
   */
  jobKey?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * E103C5F9-DE47-53F2-BF34-D71DF38F****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      jobKey: 'JobKey',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      jobKey: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateUploadFileJobResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateUploadFileJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateUploadFileJobResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateUploadOSSFileJobRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the file.
   * 
   * > The file name must end with .txt or .sql. For example, the file name can be text.txt.
   * 
   * This parameter is required.
   * 
   * @example
   * test.sql
   */
  fileName?: string;
  /**
   * @remarks
   * The purpose of the file upload task. Valid values:
   * 
   * *   **datacorrect**: The file is uploaded to change data.
   * *   **order_info_attachment**: The file is uploaded as an attachment in a ticket.
   * *   **big-file**: The file is uploaded to import multiple data records at a time.
   * *   **sqlreview**: The file is uploaded for SQL review.
   * 
   * This parameter is required.
   * 
   * @example
   * datacorrect
   */
  fileSource?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * -1
   */
  tid?: number;
  /**
   * @remarks
   * The information about the OSS file to be uploaded.
   * 
   * This parameter is required.
   */
  uploadTarget?: CreateUploadOSSFileJobRequestUploadTarget;
  static names(): { [key: string]: string } {
    return {
      fileName: 'FileName',
      fileSource: 'FileSource',
      tid: 'Tid',
      uploadTarget: 'UploadTarget',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileName: 'string',
      fileSource: 'string',
      tid: 'number',
      uploadTarget: CreateUploadOSSFileJobRequestUploadTarget,
    };
  }

  validate() {
    if(this.uploadTarget && typeof (this.uploadTarget as any).validate === 'function') {
      (this.uploadTarget as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateUploadOSSFileJobShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the file.
   * 
   * > The file name must end with .txt or .sql. For example, the file name can be text.txt.
   * 
   * This parameter is required.
   * 
   * @example
   * test.sql
   */
  fileName?: string;
  /**
   * @remarks
   * The purpose of the file upload task. Valid values:
   * 
   * *   **datacorrect**: The file is uploaded to change data.
   * *   **order_info_attachment**: The file is uploaded as an attachment in a ticket.
   * *   **big-file**: The file is uploaded to import multiple data records at a time.
   * *   **sqlreview**: The file is uploaded for SQL review.
   * 
   * This parameter is required.
   * 
   * @example
   * datacorrect
   */
  fileSource?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * -1
   */
  tid?: number;
  /**
   * @remarks
   * The information about the OSS file to be uploaded.
   * 
   * This parameter is required.
   */
  uploadTargetShrink?: string;
  static names(): { [key: string]: string } {
    return {
      fileName: 'FileName',
      fileSource: 'FileSource',
      tid: 'Tid',
      uploadTargetShrink: 'UploadTarget',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileName: 'string',
      fileSource: 'string',
      tid: 'number',
      uploadTargetShrink: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateUploadOSSFileJobResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The key of the file upload task. You can query the upload progress and task details. For more information, see [GetUserUploadFileJob](https://help.aliyun.com/document_detail/206069.html).
   * 
   * @example
   * 65254a4c1614235217749100e
   */
  jobKey?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4E1D2B4D-3E53-4ABC-999D-1D2520B3471A
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      jobKey: 'JobKey',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      jobKey: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateUploadOSSFileJobResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateUploadOSSFileJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateUploadOSSFileJobResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAbacAuthorizationRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 123***
   */
  authorizationId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * USER
   */
  identityType?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      authorizationId: 'AuthorizationId',
      identityType: 'IdentityType',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorizationId: 'number',
      identityType: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAbacAuthorizationResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 207176D7-A9B3-55CE-A9DA-14E223A31913
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  result?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      result: 'Result',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      result: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAbacAuthorizationResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteAbacAuthorizationResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteAbacAuthorizationResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAbacPolicyRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12****
   */
  abacPolicyId?: number;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      abacPolicyId: 'AbacPolicyId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      abacPolicyId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAbacPolicyResponseBody extends $dara.Model {
  /**
   * @example
   * true
   */
  deletePolicyResult?: boolean;
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      deletePolicyResult: 'DeletePolicyResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deletePolicyResult: 'boolean',
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAbacPolicyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteAbacPolicyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteAbacPolicyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAuthorityTemplateRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2592
   */
  templateId?: number;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      templateId: 'TemplateId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      templateId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAuthorityTemplateResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAuthorityTemplateResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteAuthorityTemplateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteAuthorityTemplateResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataLakeDatabaseRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataLakeDatabaseResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * C51420E3-144A-4A94-B473-8662FCF4AD10
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataLakeDatabaseResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteDataLakeDatabaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteDataLakeDatabaseResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataLakePartitionRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * true
   */
  ifExists?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  partitionValues?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * table_name
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      ifExists: 'IfExists',
      partitionValues: 'PartitionValues',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      ifExists: 'boolean',
      partitionValues: { 'type': 'array', 'itemType': 'string' },
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.partitionValues)) {
      $dara.Model.validateArray(this.partitionValues);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataLakePartitionShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * true
   */
  ifExists?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  partitionValuesShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * table_name
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      ifExists: 'IfExists',
      partitionValuesShrink: 'PartitionValues',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      ifExists: 'boolean',
      partitionValuesShrink: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataLakePartitionResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataLakePartitionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteDataLakePartitionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteDataLakePartitionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataLakeTableRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataLakeTableResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 8E88933E-E3D4-5BA8-8CBF-0A1CAE666690
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataLakeTableResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteDataLakeTableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteDataLakeTableResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteInstanceRequest extends $dara.Model {
  /**
   * @remarks
   * The endpoint of the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to obtain the endpoint.
   * 
   * This parameter is required.
   * 
   * @example
   * xxx.mysql.rds.aliyuncs.com
   */
  host?: string;
  /**
   * @remarks
   * The port number that is used to connect to the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to obtain the port number.
   * 
   * This parameter is required.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The system ID (SID) of the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to obtain the SID.
   * 
   * @example
   * testSid
   */
  sid?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      host: 'Host',
      port: 'Port',
      sid: 'Sid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      host: 'string',
      port: 'number',
      sid: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteInstanceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code that is returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * B4B07137-F6AE-4756-8474-7F92BB6C4E04
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteLakeHouseSpaceRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the workspace. You can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to obtain the workspace ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 24
   */
  spaceId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      spaceId: 'SpaceId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      spaceId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteLakeHouseSpaceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * NoPermission
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * You are not authorized to perform this operation.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * E76DD2E7-EBAC-5724-B163-19AAC233F8F2
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   true: The request is successful.
   * *   false: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteLakeHouseSpaceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteLakeHouseSpaceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteLakeHouseSpaceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteLhMembersRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the user to be removed. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain the user ID.
   * 
   * This parameter is required.
   */
  memberIds?: number[];
  /**
   * @remarks
   * The ID of the object.
   * 
   * *   If the object is a workspace, you can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to obtain the workspace ID.
   * *   If the object is a task flow, you can call the [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 9***
   */
  objectId?: number;
  /**
   * @remarks
   * The type of the object. Valid values:
   * 
   * *   **0**: workspace
   * *   **1**: task flow
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  objectType?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      memberIds: 'MemberIds',
      objectId: 'ObjectId',
      objectType: 'ObjectType',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      memberIds: { 'type': 'array', 'itemType': 'number' },
      objectId: 'number',
      objectType: 'number',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.memberIds)) {
      $dara.Model.validateArray(this.memberIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteLhMembersShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the user to be removed. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain the user ID.
   * 
   * This parameter is required.
   */
  memberIdsShrink?: string;
  /**
   * @remarks
   * The ID of the object.
   * 
   * *   If the object is a workspace, you can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to obtain the workspace ID.
   * *   If the object is a task flow, you can call the [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 9***
   */
  objectId?: number;
  /**
   * @remarks
   * The type of the object. Valid values:
   * 
   * *   **0**: workspace
   * *   **1**: task flow
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  objectType?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      memberIdsShrink: 'MemberIds',
      objectId: 'ObjectId',
      objectType: 'ObjectType',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      memberIdsShrink: 'string',
      objectId: 'number',
      objectType: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteLhMembersResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * F1C78D32-1AFD-58AD-9DD2-C8A0896969DD
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteLhMembersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteLhMembersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteLhMembersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteLogicDatabaseRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the logical database. You can call the [ListLogicDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogicdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the ID of the logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * 1***
   */
  logicDbId?: number;
  /**
   * @remarks
   * The ID of the tenant. 
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      logicDbId: 'LogicDbId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logicDbId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteLogicDatabaseResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C51420E3-144A-4A94-B473-8662FCF4AD10
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * - true: The request is successful.
   * - false: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteLogicDatabaseResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteLogicDatabaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteLogicDatabaseResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteLogicTableRouteConfigRequest extends $dara.Model {
  /**
   * @remarks
   * The unique key of the routing algorithm. You can call the [ListLogicTableRouteConfig](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogictablerouteconfig) operation to query the unique key.
   * 
   * This parameter is required.
   * 
   * @example
   * id-hash-mod15
   */
  routeKey?: string;
  /**
   * @remarks
   * The ID of the logical table. You can call the [ListLogicTables](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogictables) operation to query the ID of the logical table.
   * 
   * This parameter is required.
   * 
   * @example
   * 1****
   */
  tableId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      routeKey: 'RouteKey',
      tableId: 'TableId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      routeKey: 'string',
      tableId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteLogicTableRouteConfigResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * MissingRouteKey
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * RouteKey is mandatory for this action.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * A916A004-A88C-5B39-ABDB-DE808E80****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * - **true**: The request was successful.
   * - **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteLogicTableRouteConfigResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteLogicTableRouteConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteLogicTableRouteConfigResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteProxyRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the security protection agent. You can call the [ListProxies](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxies) or [GetProxy](https://www.alibabacloud.com/help/en/data-management-service/latest/getproxy) operation to obtain this parameter.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  proxyId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to obtain this parameter.
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      proxyId: 'ProxyId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      proxyId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteProxyResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned to the query task.
   * 
   * @example
   * 200
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the call was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteProxyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteProxyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteProxyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteProxyAccessRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the security protection authorization. After the security protection agent authorizes the target user, the system automatically generates a security protection authorization ID. The ID is globally unique. You can call the [ListProxyAccesses](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxyaccesses) operation to obtain this parameter.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  proxyAccessId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to obtain this parameter.
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      proxyAccessId: 'ProxyAccessId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      proxyAccessId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteProxyAccessResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned to the query task.
   * 
   * @example
   * 200
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the call was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteProxyAccessResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteProxyAccessResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteProxyAccessResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteScenarioRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the business scenario.
   * 
   * This parameter is required.
   * 
   * @example
   * 12***
   */
  scenarioId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      scenarioId: 'ScenarioId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      scenarioId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteScenarioResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 12***
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteScenarioResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteScenarioResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteScenarioResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteStandardGroupRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 242***
   */
  groupId?: number;
  /**
   * @example
   * 23****
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      groupId: 'GroupId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteStandardGroupResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * C5B8E84B-42B6-4374-AD5A-6264E1753378
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteStandardGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteStandardGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteStandardGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteTaskRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the node you want to delete.
   * 
   * This parameter is required.
   * 
   * @example
   * 54****
   */
  nodeId?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      nodeId: 'NodeId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeId: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteTaskResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * Unknown server error
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 3B460770-40D9-5F07-B68A-173D1D708B72
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteTaskResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteTaskResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteTaskFlowRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the ID of the task flow.
   * 
   * This parameter is required.
   * 
   * @example
   * 134137***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteTaskFlowResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 9AFE13F6-A4FD-581B-BFDE-B63B1CDC2336
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteTaskFlowResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteTaskFlowResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteTaskFlowResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteTaskFlowEdgesByConditionRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the task flow edge to delete.
   * 
   * @example
   * 24***
   */
  id?: number;
  /**
   * @remarks
   * The ID of the end node of the edge to delete.
   * 
   * @example
   * 44***
   */
  nodeEnd?: number;
  /**
   * @remarks
   * The ID of the start node on the edge to delete.
   * 
   * @example
   * 44***
   */
  nodeFrom?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      id: 'Id',
      nodeEnd: 'NodeEnd',
      nodeFrom: 'NodeFrom',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      id: 'number',
      nodeEnd: 'number',
      nodeFrom: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteTaskFlowEdgesByConditionResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * 21234B66-6859-5558-9E5B-006EFE915CD0
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteTaskFlowEdgesByConditionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteTaskFlowEdgesByConditionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteTaskFlowEdgesByConditionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteUserRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the tenant. 
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.
   * 
   * @example
   * -1
   */
  tid?: number;
  /**
   * @remarks
   * The unique ID (UID) of Alibaba Cloud account to delete.
   * 
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  uid?: string;
  static names(): { [key: string]: string } {
    return {
      tid: 'Tid',
      uid: 'Uid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tid: 'number',
      uid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteUserResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * The specified user not exists.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 34E01EDD-6A16-4CF0-9541-C644D1BE01AA
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteUserResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteUserResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDifyDefaultVpcRequest extends $dara.Model {
  clientToken?: string;
  dataRegion?: string;
  workspaceId?: string;
  static names(): { [key: string]: string } {
    return {
      clientToken: 'ClientToken',
      dataRegion: 'DataRegion',
      workspaceId: 'WorkspaceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientToken: 'string',
      dataRegion: 'string',
      workspaceId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDifyDefaultVpcResponseBody extends $dara.Model {
  code?: string;
  data?: DescribeDifyDefaultVpcResponseBodyData;
  errorCode?: string;
  httpStatusCode?: number;
  message?: string;
  requestId?: string;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      errorCode: 'ErrorCode',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeDifyDefaultVpcResponseBodyData,
      errorCode: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDifyDefaultVpcResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDifyDefaultVpcResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDifyDefaultVpcResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableUserRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * -1
   */
  tid?: number;
  /**
   * @remarks
   * The UID of the Alibaba Cloud account.
   * 
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  uid?: string;
  static names(): { [key: string]: string } {
    return {
      tid: 'Tid',
      uid: 'Uid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tid: 'number',
      uid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableUserResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * The specified user not exists.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 34E01EDD-6A16-4CF0-9541-C644D1BE01AA
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * - true: The request is successful.
   * - false: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableUserResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DisableUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DisableUserResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadDataTrackResultRequest extends $dara.Model {
  /**
   * @remarks
   * The condition to filter columns.
   */
  columnFilter?: DownloadDataTrackResultRequestColumnFilter;
  /**
   * @remarks
   * The IDs of the events.
   */
  eventIdList?: number[];
  /**
   * @remarks
   * The end time of the time range in which you want to track data operations. The time must be specified in the yyyy-MM-dd HH:mm:ss format.
   * 
   * @example
   * 2023-04-23 10:00:00
   */
  filterEndTime?: string;
  /**
   * @remarks
   * The start time of the time range in which you want to track data operations. The time must be specified in the yyyy-MM-dd HH:mm:ss format.
   * 
   * @example
   * 2023-04-23 00:00:00
   */
  filterStartTime?: string;
  /**
   * @remarks
   * The names of the tables for which you want to track data operations.
   */
  filterTableList?: string[];
  /**
   * @remarks
   * The types of data operations that you want to track.
   */
  filterTypeList?: string[];
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 406****
   */
  orderId?: number;
  /**
   * @remarks
   * The type of the SQL statement.
   * 
   * *   **REVERSE**: undoes or rolls back an executed SQL statement, which is equivalent to the UNDO SQL statement.
   * *   **FORWARD**: redoes or re-executes an SQL statement that failed to be executed, which is equivalent to the REDO SQL statement.
   * 
   * This parameter is required.
   * 
   * @example
   * REVERSE
   */
  rollbackSQLType?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      columnFilter: 'ColumnFilter',
      eventIdList: 'EventIdList',
      filterEndTime: 'FilterEndTime',
      filterStartTime: 'FilterStartTime',
      filterTableList: 'FilterTableList',
      filterTypeList: 'FilterTypeList',
      orderId: 'OrderId',
      rollbackSQLType: 'RollbackSQLType',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnFilter: DownloadDataTrackResultRequestColumnFilter,
      eventIdList: { 'type': 'array', 'itemType': 'number' },
      filterEndTime: 'string',
      filterStartTime: 'string',
      filterTableList: { 'type': 'array', 'itemType': 'string' },
      filterTypeList: { 'type': 'array', 'itemType': 'string' },
      orderId: 'number',
      rollbackSQLType: 'string',
      tid: 'number',
    };
  }

  validate() {
    if(this.columnFilter && typeof (this.columnFilter as any).validate === 'function') {
      (this.columnFilter as any).validate();
    }
    if(Array.isArray(this.eventIdList)) {
      $dara.Model.validateArray(this.eventIdList);
    }
    if(Array.isArray(this.filterTableList)) {
      $dara.Model.validateArray(this.filterTableList);
    }
    if(Array.isArray(this.filterTypeList)) {
      $dara.Model.validateArray(this.filterTypeList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadDataTrackResultShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The condition to filter columns.
   */
  columnFilterShrink?: string;
  /**
   * @remarks
   * The IDs of the events.
   */
  eventIdListShrink?: string;
  /**
   * @remarks
   * The end time of the time range in which you want to track data operations. The time must be specified in the yyyy-MM-dd HH:mm:ss format.
   * 
   * @example
   * 2023-04-23 10:00:00
   */
  filterEndTime?: string;
  /**
   * @remarks
   * The start time of the time range in which you want to track data operations. The time must be specified in the yyyy-MM-dd HH:mm:ss format.
   * 
   * @example
   * 2023-04-23 00:00:00
   */
  filterStartTime?: string;
  /**
   * @remarks
   * The names of the tables for which you want to track data operations.
   */
  filterTableListShrink?: string;
  /**
   * @remarks
   * The types of data operations that you want to track.
   */
  filterTypeListShrink?: string;
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 406****
   */
  orderId?: number;
  /**
   * @remarks
   * The type of the SQL statement.
   * 
   * *   **REVERSE**: undoes or rolls back an executed SQL statement, which is equivalent to the UNDO SQL statement.
   * *   **FORWARD**: redoes or re-executes an SQL statement that failed to be executed, which is equivalent to the REDO SQL statement.
   * 
   * This parameter is required.
   * 
   * @example
   * REVERSE
   */
  rollbackSQLType?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      columnFilterShrink: 'ColumnFilter',
      eventIdListShrink: 'EventIdList',
      filterEndTime: 'FilterEndTime',
      filterStartTime: 'FilterStartTime',
      filterTableListShrink: 'FilterTableList',
      filterTypeListShrink: 'FilterTypeList',
      orderId: 'OrderId',
      rollbackSQLType: 'RollbackSQLType',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnFilterShrink: 'string',
      eventIdListShrink: 'string',
      filterEndTime: 'string',
      filterStartTime: 'string',
      filterTableListShrink: 'string',
      filterTypeListShrink: 'string',
      orderId: 'number',
      rollbackSQLType: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadDataTrackResultResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the download key, which is used to download the parsing result of the data tracking task.
   * 
   * @example
   * e23dd7ec-a19f-4a69-8eb3-8ffd26e6****
   */
  downloadKeyId?: string;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B43AD641-49C2-5299-9E06-1B37EC1B****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      downloadKeyId: 'DownloadKeyId',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downloadKeyId: 'string',
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadDataTrackResultResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DownloadDataTrackResultResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DownloadDataTrackResultResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EditLogicDatabaseRequest extends $dara.Model {
  /**
   * @remarks
   * - The alias of the logical database. If you want to change the alias, specify a new alias.
   * - If you do not need to change the alias of the logical database, call the [GetLogicDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/getlogicdatabase) or [GetDBTopology](https://www.alibabacloud.com/help/en/data-management-service/latest/getdbtopology) operation to query the alias of the logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * test_logic_db
   */
  alias?: string;
  /**
   * @remarks
   * - The IDs of the physical databases that compose the logical database. If you want to change the physical databases, you can call the [ListDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the IDs of the new physical databases that you want to specify.
   * - If you do not want to change the physical databases, you can call the [GetDBTopology](https://www.alibabacloud.com/help/en/data-management-service/latest/getdbtopology) operation to query the IDs of the physical databases that compose the logical database.
   * 
   * This parameter is required.
   */
  databaseIds?: number[];
  /**
   * @remarks
   * The ID of the logical database. You can call the [ListLogicDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogicdatabases) operation to query the ID of the logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * 1***
   */
  logicDbId?: number;
  /**
   * @remarks
   * The ID of the tenant. 
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      databaseIds: 'DatabaseIds',
      logicDbId: 'LogicDbId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      databaseIds: { 'type': 'array', 'itemType': 'number' },
      logicDbId: 'number',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.databaseIds)) {
      $dara.Model.validateArray(this.databaseIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EditLogicDatabaseShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * - The alias of the logical database. If you want to change the alias, specify a new alias.
   * - If you do not need to change the alias of the logical database, call the [GetLogicDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/getlogicdatabase) or [GetDBTopology](https://www.alibabacloud.com/help/en/data-management-service/latest/getdbtopology) operation to query the alias of the logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * test_logic_db
   */
  alias?: string;
  /**
   * @remarks
   * - The IDs of the physical databases that compose the logical database. If you want to change the physical databases, you can call the [ListDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the IDs of the new physical databases that you want to specify.
   * - If you do not want to change the physical databases, you can call the [GetDBTopology](https://www.alibabacloud.com/help/en/data-management-service/latest/getdbtopology) operation to query the IDs of the physical databases that compose the logical database.
   * 
   * This parameter is required.
   */
  databaseIdsShrink?: string;
  /**
   * @remarks
   * The ID of the logical database. You can call the [ListLogicDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogicdatabases) operation to query the ID of the logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * 1***
   */
  logicDbId?: number;
  /**
   * @remarks
   * The ID of the tenant. 
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://www.alibabacloud.com/help/en/data-management-service/latest/manage-dms-tenants) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      databaseIdsShrink: 'DatabaseIds',
      logicDbId: 'LogicDbId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      databaseIdsShrink: 'string',
      logicDbId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EditLogicDatabaseResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C51420E3-144A-4A94-B473-8662FCF4AD10
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * - true: The request is successful.
   * - false: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EditLogicDatabaseResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: EditLogicDatabaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: EditLogicDatabaseResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EnableUserRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To obtain the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Tenant information](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  /**
   * @remarks
   * The UID of the Alibaba Cloud account.
   * 
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  uid?: string;
  static names(): { [key: string]: string } {
    return {
      tid: 'Tid',
      uid: 'Uid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tid: 'number',
      uid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EnableUserResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * The specified user not exists.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 34E01EDD-6A16-4CF0-9541-C644D1BE01AA
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EnableUserResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: EnableUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: EnableUserResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteDataCorrectRequest extends $dara.Model {
  /**
   * @remarks
   * The parameters that are required to perform the data change.
   * 
   * ```
   * 
   * json
   * "actionDetail" : {
   *     "startTime" :"2021-07-01 00:00:00", // Specify the start time to change data. If you want to immediately change data, you do not need to set this parameter. 
   *     "endTime" : "2021-07-01 01:00:00", // Specify the end time to change data. If you want to immediately change data, you do not need to set this parameter. 
   *     "transaction" : false, // Specify whether to change data as a transaction. 
   *     "backupData" : true // Specify whether to back up data. 
   *   }
   * ```
   * 
   * @example
   * { "startTime" : "2021-07-01 00:00:00", "endTime" : "2021-07-01 01:00:00", "transaction" : false, "backupData" : true }
   */
  actionDetail?: { [key: string]: any };
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 406****
   */
  orderId?: number;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: string;
  static names(): { [key: string]: string } {
    return {
      actionDetail: 'ActionDetail',
      orderId: 'OrderId',
      realLoginUserUid: 'RealLoginUserUid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actionDetail: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      orderId: 'number',
      realLoginUserUid: 'string',
      tid: 'string',
    };
  }

  validate() {
    if(this.actionDetail) {
      $dara.Model.validateMap(this.actionDetail);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteDataCorrectShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The parameters that are required to perform the data change.
   * 
   * ```
   * 
   * json
   * "actionDetail" : {
   *     "startTime" :"2021-07-01 00:00:00", // Specify the start time to change data. If you want to immediately change data, you do not need to set this parameter. 
   *     "endTime" : "2021-07-01 01:00:00", // Specify the end time to change data. If you want to immediately change data, you do not need to set this parameter. 
   *     "transaction" : false, // Specify whether to change data as a transaction. 
   *     "backupData" : true // Specify whether to back up data. 
   *   }
   * ```
   * 
   * @example
   * { "startTime" : "2021-07-01 00:00:00", "endTime" : "2021-07-01 01:00:00", "transaction" : false, "backupData" : true }
   */
  actionDetailShrink?: string;
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 406****
   */
  orderId?: number;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: string;
  static names(): { [key: string]: string } {
    return {
      actionDetailShrink: 'ActionDetail',
      orderId: 'OrderId',
      realLoginUserUid: 'RealLoginUserUid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actionDetailShrink: 'string',
      orderId: 'number',
      realLoginUserUid: 'string',
      tid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteDataCorrectResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * Unknown server error
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * EADDA791-2809-58CE-A303-743A77FF****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteDataCorrectResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExecuteDataCorrectResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExecuteDataCorrectResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteDataExportRequest extends $dara.Model {
  /**
   * @remarks
   * The parameters that are required to perform the operation:
   * 
   * ```json
   * {
   *    "fileType": "CSV", // The format of the exported file.
   *    "encoding": "" // The encoding format.
   *  }
   * ```
   * 
   * @example
   * {    "fileType": "CSV",    "encoding": ""  }
   */
  actionDetail?: { [key: string]: any };
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 1234
   */
  orderId?: number;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      actionDetail: 'ActionDetail',
      orderId: 'OrderId',
      realLoginUserUid: 'RealLoginUserUid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actionDetail: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      orderId: 'number',
      realLoginUserUid: 'string',
      tid: 'number',
    };
  }

  validate() {
    if(this.actionDetail) {
      $dara.Model.validateMap(this.actionDetail);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteDataExportShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The parameters that are required to perform the operation:
   * 
   * ```json
   * {
   *    "fileType": "CSV", // The format of the exported file.
   *    "encoding": "" // The encoding format.
   *  }
   * ```
   * 
   * @example
   * {    "fileType": "CSV",    "encoding": ""  }
   */
  actionDetailShrink?: string;
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 1234
   */
  orderId?: number;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      actionDetailShrink: 'ActionDetail',
      orderId: 'OrderId',
      realLoginUserUid: 'RealLoginUserUid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actionDetailShrink: 'string',
      orderId: 'number',
      realLoginUserUid: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteDataExportResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * FE8EE2F1-4880-46BC-A704-5CF63EAF9A04
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteDataExportResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExecuteDataExportResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExecuteDataExportResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteScriptRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the database.
   * 
   * >  This parameter is equivalent to the DatabaseId parameter in the SearchDatabase, ListDatabases, and GetDatabase operations. You can call one of these operations to obtain the required database ID. For more information, see [SearchDatabase](https://help.aliyun.com/document_detail/141876.html), [ListDatabases](https://help.aliyun.com/document_detail/141873.html), and [GetDatabase](https://help.aliyun.com/document_detail/141869.html).
   * 
   * This parameter is required.
   * 
   * @example
   * 123
   */
  dbId?: number;
  /**
   * @remarks
   * Specifies whether the database is a logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The SQL statements to be executed. Data query language (DQL) statements, data definition language (DDL) statements, and data manipulation language (DML) statements are supported. The control mode of the instance that you want to query determines whether you can execute DDL and DML statements.
   * 
   * This parameter is required.
   * 
   * @example
   * select dt from report_daily
   */
  script?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To obtain the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Tenant information](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 234
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      logic: 'Logic',
      script: 'Script',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      logic: 'boolean',
      script: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteScriptResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message about the gateway.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * FE8EE2F1-4880-46BC-A704-5CF63EAF9A04
   */
  requestId?: string;
  /**
   * @remarks
   * The results of the SQL statements that are executed, in the format of an array. Each entry in the array indicates the result of an SQL statement.
   */
  results?: ExecuteScriptResponseBodyResults[];
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      results: 'Results',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      results: { 'type': 'array', 'itemType': ExecuteScriptResponseBodyResults },
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.results)) {
      $dara.Model.validateArray(this.results);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteScriptResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExecuteScriptResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExecuteScriptResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteStructSyncRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 112345
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteStructSyncResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4E1D2B4D-3E53-4ABC-999D-1D2520B3471A
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecuteStructSyncResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExecuteStructSyncResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExecuteStructSyncResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAbacPolicyRequest extends $dara.Model {
  /**
   * @example
   * 12****
   */
  abacPolicyId?: number;
  /**
   * @example
   * policy_test
   */
  abacPolicyName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      abacPolicyId: 'AbacPolicyId',
      abacPolicyName: 'AbacPolicyName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      abacPolicyId: 'number',
      abacPolicyName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAbacPolicyResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  policy?: GetAbacPolicyResponseBodyPolicy;
  /**
   * @example
   * 2B7844DE-A0C3-50ED-A796-8F07D377144C
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      policy: 'Policy',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      policy: GetAbacPolicyResponseBodyPolicy,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.policy && typeof (this.policy as any).validate === 'function') {
      (this.policy as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAbacPolicyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAbacPolicyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAbacPolicyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetApprovalDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The ID of the approval process. You can call the [GetOrderBaseInfo](https://help.aliyun.com/document_detail/144642.html) operation to obtain the ID of the approval process.
   * 
   * This parameter is required.
   * 
   * @example
   * 184****
   */
  workflowInstanceId?: number;
  static names(): { [key: string]: string } {
    return {
      tid: 'Tid',
      workflowInstanceId: 'WorkflowInstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tid: 'number',
      workflowInstanceId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetApprovalDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The approval details of the ticket.
   */
  approvalDetail?: GetApprovalDetailResponseBodyApprovalDetail;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * MissingWorkflowInstanceId
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * WorkflowInstanceId is mandatory for this action.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 66DE630B-ECA1-52A3-9198-602066F9****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      approvalDetail: 'ApprovalDetail',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      approvalDetail: GetApprovalDetailResponseBodyApprovalDetail,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.approvalDetail && typeof (this.approvalDetail as any).validate === 'function') {
      (this.approvalDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetApprovalDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetApprovalDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetApprovalDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthorityTemplateRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the permission template.
   * 
   * This parameter is required.
   * 
   * @example
   * 1563
   */
  templateId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      templateId: 'TemplateId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      templateId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthorityTemplateResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the permission template.
   */
  authorityTemplateView?: GetAuthorityTemplateResponseBodyAuthorityTemplateView;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      authorityTemplateView: 'AuthorityTemplateView',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorityTemplateView: GetAuthorityTemplateResponseBodyAuthorityTemplateView,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      tid: 'number',
    };
  }

  validate() {
    if(this.authorityTemplateView && typeof (this.authorityTemplateView as any).validate === 'function') {
      (this.authorityTemplateView as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthorityTemplateResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAuthorityTemplateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAuthorityTemplateResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthorityTemplateItemRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the permission template.
   * 
   * This parameter is required.
   * 
   * @example
   * 1563
   */
  templateId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      templateId: 'TemplateId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      templateId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthorityTemplateItemResponseBody extends $dara.Model {
  /**
   * @remarks
   * The permission templates.
   */
  authorityTemplateItemList?: GetAuthorityTemplateItemResponseBodyAuthorityTemplateItemList;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 5B96E35F-A58E-5399-9041-09CF9A1E46EA
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      authorityTemplateItemList: 'AuthorityTemplateItemList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorityTemplateItemList: GetAuthorityTemplateItemResponseBodyAuthorityTemplateItemList,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      tid: 'number',
    };
  }

  validate() {
    if(this.authorityTemplateItemList && typeof (this.authorityTemplateItemList as any).validate === 'function') {
      (this.authorityTemplateItemList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthorityTemplateItemResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAuthorityTemplateItemResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAuthorityTemplateItemResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetClassificationTemplateRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 169****
   */
  instanceId?: number;
  /**
   * @example
   * 23***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetClassificationTemplateResponseBody extends $dara.Model {
  classificationResourceTemplateMap?: GetClassificationTemplateResponseBodyClassificationResourceTemplateMap;
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      classificationResourceTemplateMap: 'ClassificationResourceTemplateMap',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      classificationResourceTemplateMap: GetClassificationTemplateResponseBodyClassificationResourceTemplateMap,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.classificationResourceTemplateMap && typeof (this.classificationResourceTemplateMap as any).validate === 'function') {
      (this.classificationResourceTemplateMap as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetClassificationTemplateResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetClassificationTemplateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetClassificationTemplateResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDBTaskSQLJobLogRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the SQL task. You can call the [ListDBTaskSQLJob](https://help.aliyun.com/document_detail/207049.html) operation to query the ID of the SQL task.
   * 
   * This parameter is required.
   * 
   * @example
   * 1276****
   */
  jobId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      jobId: 'JobId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      jobId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDBTaskSQLJobLogResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * MissingJobId
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * JobId is mandatory for this action.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The log that records the scheduling details.
   * 
   * @example
   * log_****
   */
  log?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4AC23904-55DE-550B-9676-E8946F07****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      log: 'Log',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      log: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDBTaskSQLJobLogResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDBTaskSQLJobLogResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDBTaskSQLJobLogResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDBTopologyRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the logical database. You can call the [ListLogicDatabases](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogicdatabases) or [SearchDatabase](https://www.alibabacloud.com/help/en/data-management-service/latest/searchdatabase) operation to query the ID of the logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * 134***
   */
  logicDbId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 43***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      logicDbId: 'LogicDbId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logicDbId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDBTopologyResponseBody extends $dara.Model {
  /**
   * @remarks
   * The topology of the data table.
   */
  DBTopology?: GetDBTopologyResponseBodyDBTopology;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C5B8E84B-42B6-4374-AD5A-6264E1753378
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      DBTopology: 'DBTopology',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      DBTopology: GetDBTopologyResponseBodyDBTopology,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.DBTopology && typeof (this.DBTopology as any).validate === 'function') {
      (this.DBTopology as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDBTopologyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDBTopologyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDBTopologyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveCountRequest extends $dara.Model {
  /**
   * @remarks
   * The type of the identity. Default value: AS_ADMIN.
   * 
   * @example
   * AS_ADMIN
   */
  orderResultType?: string;
  /**
   * @remarks
   * The plugin type. Default value: DATA_ARCHIVE.
   * 
   * @example
   * DATA_ARCHIVE
   */
  pluginType?: string;
  /**
   * @remarks
   * The time when the ticket is modified or created. The statistics of data archiving tickets are calculated based on the creation time.
   * 
   * @example
   * CREATE_TIME
   */
  searchDateType?: string;
  /**
   * @remarks
   * The tenant ID.
   * 
   * >  To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 2****
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderResultType: 'OrderResultType',
      pluginType: 'PluginType',
      searchDateType: 'SearchDateType',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderResultType: 'string',
      pluginType: 'string',
      searchDateType: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveCountResponseBody extends $dara.Model {
  /**
   * @remarks
   * The data returned.
   */
  data?: GetDataArchiveCountResponseBodyData;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 4B63CAC5-BD7F-5C7C-82C9-59DFFBC3C5C2
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: GetDataArchiveCountResponseBodyData,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveCountResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataArchiveCountResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataArchiveCountResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveOrderDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of data archiving tickets.
   * 
   * This parameter is required.
   * 
   * @example
   * 868****
   */
  orderId?: number;
  /**
   * @remarks
   * The tenant ID.
   * 
   * >  To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 5***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveOrderDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of data archiving tickets.
   */
  dataArchiveOrderDetail?: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetail;
  /**
   * @remarks
   * The error code returned if the call failed.
   * 
   * @example
   * NoPermission
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned if the request failed.
   * 
   * @example
   * User [19929582****] not exist
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request, which is used to query logs and troubleshoot issues.
   * 
   * @example
   * 4161CE36-28DF-5191-8A6F-A17076A0B124
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * Tracks service requests.
   * 
   * @example
   * 0a06e1e316757357507896067d3780
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      dataArchiveOrderDetail: 'DataArchiveOrderDetail',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      traceId: 'TraceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataArchiveOrderDetail: GetDataArchiveOrderDetailResponseBodyDataArchiveOrderDetail,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      traceId: 'string',
    };
  }

  validate() {
    if(this.dataArchiveOrderDetail && typeof (this.dataArchiveOrderDetail as any).validate === 'function') {
      (this.dataArchiveOrderDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataArchiveOrderDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataArchiveOrderDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataArchiveOrderDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectBackupFilesRequest extends $dara.Model {
  /**
   * @remarks
   * The parameters that are required to perform the operation. You do not need to specify this parameter.
   * 
   * @example
   * {}
   */
  actionDetail?: { [key: string]: any };
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 4200000
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      actionDetail: 'ActionDetail',
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actionDetail: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    if(this.actionDetail) {
      $dara.Model.validateMap(this.actionDetail);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectBackupFilesShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The parameters that are required to perform the operation. You do not need to specify this parameter.
   * 
   * @example
   * {}
   */
  actionDetailShrink?: string;
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 4200000
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      actionDetailShrink: 'ActionDetail',
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actionDetailShrink: 'string',
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectBackupFilesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The download URL of the backup file for the ticket.
   */
  dataCorrectBackupFiles?: GetDataCorrectBackupFilesResponseBodyDataCorrectBackupFiles;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4AFF4109-FEFB-44E8-96A3-923B1FA8C46E
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      dataCorrectBackupFiles: 'DataCorrectBackupFiles',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataCorrectBackupFiles: GetDataCorrectBackupFilesResponseBodyDataCorrectBackupFiles,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.dataCorrectBackupFiles && typeof (this.dataCorrectBackupFiles as any).validate === 'function') {
      (this.dataCorrectBackupFiles as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectBackupFilesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataCorrectBackupFilesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataCorrectBackupFilesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectOrderDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 420****
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectOrderDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The information about the data change ticket.
   */
  dataCorrectOrderDetail?: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetail;
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the operation was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      dataCorrectOrderDetail: 'DataCorrectOrderDetail',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataCorrectOrderDetail: GetDataCorrectOrderDetailResponseBodyDataCorrectOrderDetail,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.dataCorrectOrderDetail && typeof (this.dataCorrectOrderDetail as any).validate === 'function') {
      (this.dataCorrectOrderDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectOrderDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataCorrectOrderDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataCorrectOrderDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectRollbackFileRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 51****
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectRollbackFileResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The download URL of the attachment.
   * 
   * @example
   * https://dmsxxx
   */
  fileUrl?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 3CDB8601-AD74-4A47-8114-08E08CD6****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      fileUrl: 'FileUrl',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      fileUrl: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectRollbackFileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataCorrectRollbackFileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataCorrectRollbackFileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectSQLFileRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 730000
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectSQLFileResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The download URL of the SQL script.
   * 
   * @example
   * https://dmsxxx
   */
  fileUrl?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 283C461F-11D8-48AA-B695-DF092DA32AF3
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      fileUrl: 'FileUrl',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      fileUrl: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectSQLFileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataCorrectSQLFileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataCorrectSQLFileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectTaskDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket. You can call the [CreateDataCorrectOrder](https://help.aliyun.com/document_detail/208388.html), [CreateDataImportOrder](https://help.aliyun.com/document_detail/208387.html), or [CreateFreeLockCorrectOrder](https://help.aliyun.com/document_detail/208386.html) operation to obtain the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 12435523
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * 14325432
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectTaskDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the data change task.
   */
  dataCorrectTaskDetail?: GetDataCorrectTaskDetailResponseBodyDataCorrectTaskDetail;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * B5FD0BC8-2D90-4478-B8EC-A0E92E0B1773
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      dataCorrectTaskDetail: 'DataCorrectTaskDetail',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataCorrectTaskDetail: GetDataCorrectTaskDetailResponseBodyDataCorrectTaskDetail,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.dataCorrectTaskDetail && typeof (this.dataCorrectTaskDetail as any).validate === 'function') {
      (this.dataCorrectTaskDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCorrectTaskDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataCorrectTaskDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataCorrectTaskDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCronClearConfigRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 420****
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCronClearConfigResponseBody extends $dara.Model {
  /**
   * @remarks
   * Data configuration.
   */
  dataCronClearConfig?: GetDataCronClearConfigResponseBodyDataCronClearConfig;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 283C461F-11D8-48AA-B695-DF092DA32AF3
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   true: The request was successful.
   * *   false: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      dataCronClearConfig: 'DataCronClearConfig',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataCronClearConfig: GetDataCronClearConfigResponseBodyDataCronClearConfig,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.dataCronClearConfig && typeof (this.dataCronClearConfig as any).validate === 'function') {
      (this.dataCronClearConfig as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCronClearConfigResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataCronClearConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataCronClearConfigResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCronClearTaskDetailListRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket. You can query the ticket ID from the response parameters of the [CreateDataCronClearOrder](https://help.aliyun.com/document_detail/208385.html) operation.
   * 
   * This parameter is required.
   * 
   * @example
   * 432532
   */
  orderId?: number;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * 12345
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      pageNumber: 'number',
      pageSize: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCronClearTaskDetailListResponseBody extends $dara.Model {
  /**
   * @remarks
   * The historical data cleansing tasks
   */
  dataCronClearTaskDetailList?: GetDataCronClearTaskDetailListResponseBodyDataCronClearTaskDetailList[];
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C1D39814-9808-47F8-AFE0-AF167239AC9B
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of SQL tasks.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      dataCronClearTaskDetailList: 'DataCronClearTaskDetailList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataCronClearTaskDetailList: { 'type': 'array', 'itemType': GetDataCronClearTaskDetailListResponseBodyDataCronClearTaskDetailList },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.dataCronClearTaskDetailList)) {
      $dara.Model.validateArray(this.dataCronClearTaskDetailList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataCronClearTaskDetailListResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataCronClearTaskDetailListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataCronClearTaskDetailListResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportDownloadURLRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 546****
   */
  orderId?: number;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      realLoginUserUid: 'RealLoginUserUid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      realLoginUserUid: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportDownloadURLResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details about the download URL of the file that records the export results for the ticket.
   */
  downloadURLResult?: GetDataExportDownloadURLResponseBodyDownloadURLResult;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4BF24EA5-9013-4C85-AE68-6C23AF5E0097
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      downloadURLResult: 'DownloadURLResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downloadURLResult: GetDataExportDownloadURLResponseBodyDownloadURLResult,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.downloadURLResult && typeof (this.downloadURLResult as any).validate === 'function') {
      (this.downloadURLResult as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportDownloadURLResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataExportDownloadURLResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataExportDownloadURLResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportOrderDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/465867.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 123456
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportOrderDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The information about the data export ticket.
   */
  dataExportOrderDetail?: GetDataExportOrderDetailResponseBodyDataExportOrderDetail;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values: Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      dataExportOrderDetail: 'DataExportOrderDetail',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataExportOrderDetail: GetDataExportOrderDetailResponseBodyDataExportOrderDetail,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.dataExportOrderDetail && typeof (this.dataExportOrderDetail as any).validate === 'function') {
      (this.dataExportOrderDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportOrderDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataExportOrderDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataExportOrderDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportPreCheckDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 34****
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportPreCheckDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * Indicates the result of the precheck task.
   */
  preCheckResult?: GetDataExportPreCheckDetailResponseBodyPreCheckResult;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C1D39814-9808-47F8-AFE0-AF167239AC9B
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      preCheckResult: 'PreCheckResult',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      preCheckResult: GetDataExportPreCheckDetailResponseBodyPreCheckResult,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.preCheckResult && typeof (this.preCheckResult as any).validate === 'function') {
      (this.preCheckResult as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataExportPreCheckDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataExportPreCheckDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataExportPreCheckDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataImportSQLRequest extends $dara.Model {
  /**
   * @remarks
   * The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 14****
   */
  orderId?: number;
  /**
   * @remarks
   * The SQL ID. You can call the ListDataImportSQLPreCheckDetail operation to query the SQL ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15****
   */
  sqlId?: number;
  /**
   * @remarks
   * The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      sqlId: 'SqlId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      sqlId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataImportSQLResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * B43AD641-49C2-5299-9E06-1B37EC1B****
   */
  requestId?: string;
  /**
   * @remarks
   * The details of SQL statements.
   */
  SQLDetail?: GetDataImportSQLResponseBodySQLDetail;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      SQLDetail: 'SQLDetail',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      SQLDetail: GetDataImportSQLResponseBodySQLDetail,
      success: 'boolean',
    };
  }

  validate() {
    if(this.SQLDetail && typeof (this.SQLDetail as any).validate === 'function') {
      (this.SQLDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataImportSQLResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataImportSQLResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataImportSQLResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataLakeCatalogRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   * 
   * **if can be null:**
   * false
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   * 
   * **if can be null:**
   * false
   */
  dataRegion?: string;
  /**
   * @example
   * 3
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataLakeCatalogResponseBody extends $dara.Model {
  catalog?: DLCatalog;
  /**
   * @example
   * 400
   */
  errorCode?: string;
  /**
   * @example
   * code: 404, can not find catalog, name : hiv request id: 6090E571-E5B1-1E6D-BF44-F9E10E8B7EB1
   */
  errorMessage?: string;
  /**
   * @example
   * FE8EE2F1-4880-46BC-A704-5CF63EAF9A04
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      catalog: 'Catalog',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalog: DLCatalog,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.catalog && typeof (this.catalog as any).validate === 'function') {
      (this.catalog as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataLakeCatalogResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataLakeCatalogResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataLakeCatalogResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataLakeDatabaseRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   * 
   * **if can be null:**
   * false
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   * 
   * **if can be null:**
   * false
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   * 
   * **if can be null:**
   * false
   */
  name?: string;
  /**
   * @example
   * 3
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      name: 'Name',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      name: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataLakeDatabaseResponseBody extends $dara.Model {
  database?: DLDatabase;
  /**
   * @example
   * 404
   */
  errorCode?: string;
  /**
   * @example
   * code: 404, can not find catalog, name : hive1 request id: FF737753-9641-1F51-AFDA-7DF541114B29
   */
  errorMessage?: string;
  /**
   * @example
   * E5EE2B9E-2F95-57FA-B284-CB441CEE49D6
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      database: 'Database',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      database: DLDatabase,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.database && typeof (this.database as any).validate === 'function') {
      (this.database as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataLakeDatabaseResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataLakeDatabaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataLakeDatabaseResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataLakePartitionRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  partitionValues?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      partitionValues: 'PartitionValues',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      partitionValues: { 'type': 'array', 'itemType': 'string' },
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.partitionValues)) {
      $dara.Model.validateArray(this.partitionValues);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataLakePartitionShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  partitionValuesShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      partitionValuesShrink: 'PartitionValues',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      partitionValuesShrink: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataLakePartitionResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  partition?: DLPartition;
  /**
   * @example
   * FE8EE2F1-4880-46BC-A704-5CF63EAF9A04
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      partition: 'Partition',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      partition: DLPartition,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.partition && typeof (this.partition as any).validate === 'function') {
      (this.partition as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataLakePartitionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataLakePartitionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataLakePartitionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataLakeTableRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   * 
   * **if can be null:**
   * false
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   * 
   * **if can be null:**
   * false
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   * 
   * **if can be null:**
   * false
   */
  dbName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100g_customer
   * 
   * **if can be null:**
   * false
   */
  name?: string;
  /**
   * @example
   * 3
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      name: 'Name',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      name: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataLakeTableResponseBody extends $dara.Model {
  /**
   * @example
   * 400
   */
  errorCode?: string;
  /**
   * @example
   * Unknown server error
   */
  errorMessage?: string;
  /**
   * @example
   * 4E1D2B4D-3E53-4ABC-999D-1D2520B3471A
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: string;
  table?: DLTable;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      table: 'Table',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'string',
      table: DLTable,
    };
  }

  validate() {
    if(this.table && typeof (this.table as any).validate === 'function') {
      (this.table as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataLakeTableResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataLakeTableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataLakeTableResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataTrackJobDegreeRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 321****
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataTrackJobDegreeResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The progress details of the data tracking task.
   */
  jobDegree?: GetDataTrackJobDegreeResponseBodyJobDegree;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * C51420E3-144A-4A94-B473-8662FCF4AD10
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      jobDegree: 'JobDegree',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      jobDegree: GetDataTrackJobDegreeResponseBodyJobDegree,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.jobDegree && typeof (this.jobDegree as any).validate === 'function') {
      (this.jobDegree as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataTrackJobDegreeResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataTrackJobDegreeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataTrackJobDegreeResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataTrackJobTableMetaRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the ID of the tenant.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataTrackJobTableMetaResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The metadata of tables.
   */
  tableMetaList?: GetDataTrackJobTableMetaResponseBodyTableMetaList[];
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      tableMetaList: 'TableMetaList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      tableMetaList: { 'type': 'array', 'itemType': GetDataTrackJobTableMetaResponseBodyTableMetaList },
    };
  }

  validate() {
    if(Array.isArray(this.tableMetaList)) {
      $dara.Model.validateArray(this.tableMetaList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataTrackJobTableMetaResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataTrackJobTableMetaResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataTrackJobTableMetaResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataTrackOrderDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 4328****
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataTrackOrderDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the ticket.
   */
  dataTrackOrderDetail?: GetDataTrackOrderDetailResponseBodyDataTrackOrderDetail;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 283C461F-11D8-48AA-B695-DF092DA32AF3
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      dataTrackOrderDetail: 'DataTrackOrderDetail',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataTrackOrderDetail: GetDataTrackOrderDetailResponseBodyDataTrackOrderDetail,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.dataTrackOrderDetail && typeof (this.dataTrackOrderDetail as any).validate === 'function') {
      (this.dataTrackOrderDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDataTrackOrderDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDataTrackOrderDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDataTrackOrderDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseRequest extends $dara.Model {
  /**
   * @remarks
   * The endpoint that is used to connect to the database.
   * 
   * This parameter is required.
   * 
   * @example
   * 192.168.XX.XX
   */
  host?: string;
  /**
   * @remarks
   * The port that is used to connect to the database.
   * 
   * This parameter is required.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The name of the database.
   * 
   * This parameter is required.
   * 
   * @example
   * mysql
   */
  schemaName?: string;
  /**
   * @remarks
   * The system identifier (SID) of the database.
   * 
   * >  The SID uniquely identifies an Oracle database. After a database is created, a SID is generated for the database.
   * 
   * @example
   * test_sid
   */
  sid?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the ID of the tenant.
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      host: 'Host',
      port: 'Port',
      schemaName: 'SchemaName',
      sid: 'Sid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      host: 'string',
      port: 'number',
      schemaName: 'string',
      sid: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the database.
   */
  database?: GetDatabaseResponseBodyDatabase;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * An unknown error occurred.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 3CDB8601-AD74-4A47-8114-08E08CD6****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      database: 'Database',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      database: GetDatabaseResponseBodyDatabase,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.database && typeof (this.database as any).validate === 'function') {
      (this.database as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDatabaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDatabaseResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseExportOrderDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 821****
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseExportOrderDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the database export ticket.
   */
  databaseExportOrderDetail?: GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetail;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * CFD8FE00-36D9-4C1B-940D-65A7B73D9066
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      databaseExportOrderDetail: 'DatabaseExportOrderDetail',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databaseExportOrderDetail: GetDatabaseExportOrderDetailResponseBodyDatabaseExportOrderDetail,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.databaseExportOrderDetail && typeof (this.databaseExportOrderDetail as any).validate === 'function') {
      (this.databaseExportOrderDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDatabaseExportOrderDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDatabaseExportOrderDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDatabaseExportOrderDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDbExportDownloadURLRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 73****
   */
  orderId?: number;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDbExportDownloadURLResponseBody extends $dara.Model {
  downloadURLResult?: GetDbExportDownloadURLResponseBodyDownloadURLResult;
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      downloadURLResult: 'DownloadURLResult',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downloadURLResult: GetDbExportDownloadURLResponseBodyDownloadURLResult,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.downloadURLResult && typeof (this.downloadURLResult as any).validate === 'function') {
      (this.downloadURLResult as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDbExportDownloadURLResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDbExportDownloadURLResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDbExportDownloadURLResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceRequest extends $dara.Model {
  /**
   * @remarks
   * The endpoint of the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) operation to obtain the endpoint.
   * 
   * This parameter is required.
   * 
   * @example
   * 172.17.XXX.XXX
   */
  host?: string;
  /**
   * @remarks
   * The port number that is used to connect to the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) operation to obtain the port number.
   * 
   * This parameter is required.
   * 
   * @example
   * 5432
   */
  port?: number;
  /**
   * @remarks
   * The system ID (SID) of the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) operation to obtain the SID.
   * 
   * @example
   * test
   */
  sid?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.
   * 
   * @example
   * 2***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      host: 'Host',
      port: 'Port',
      sid: 'Sid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      host: 'string',
      port: 'number',
      sid: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code that is returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The details of the database instance.
   */
  instance?: GetInstanceResponseBodyInstance;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * F6C80B69-3203-56AC-8021-18BA72A6F4E1
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * - **true**: The request was successful.
   * - **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      instance: 'Instance',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      instance: GetInstanceResponseBodyInstance,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.instance && typeof (this.instance as any).validate === 'function') {
      (this.instance as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetIntervalLimitOfSLARequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 11****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetIntervalLimitOfSLAResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The minimum scheduling cycle. Unit: minutes.
   * 
   * @example
   * 59
   */
  intervalLimit?: number;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 5B96E35F-A58E-5399-9041-09CF9A1E46EA
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      intervalLimit: 'IntervalLimit',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      intervalLimit: 'number',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetIntervalLimitOfSLAResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetIntervalLimitOfSLAResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetIntervalLimitOfSLAResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetLhSpaceByNameRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the workspace.
   * 
   * This parameter is required.
   * 
   * @example
   * test_space
   */
  spaceName?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3000
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      spaceName: 'SpaceName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      spaceName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetLhSpaceByNameResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The workspace for data warehouse development.
   */
  lakehouseSpace?: GetLhSpaceByNameResponseBodyLakehouseSpace;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * FE8CA4A8-AB2D-55B7-BD30-01A4609F40D8
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      lakehouseSpace: 'LakehouseSpace',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      lakehouseSpace: GetLhSpaceByNameResponseBodyLakehouseSpace,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.lakehouseSpace && typeof (this.lakehouseSpace as any).validate === 'function') {
      (this.lakehouseSpace as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetLhSpaceByNameResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetLhSpaceByNameResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetLhSpaceByNameResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetLogicDatabaseRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the logical database. You can call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the ID of the logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * 1***
   */
  dbId?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetLogicDatabaseResponseBody extends $dara.Model {
  /**
   * @remarks
   * The status code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The details of the logical database.
   */
  logicDatabase?: GetLogicDatabaseResponseBodyLogicDatabase;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 90260530-565C-42B9-A6E8-893481FE6AB6
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   true: The request was successful.
   * *   false: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      logicDatabase: 'LogicDatabase',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      logicDatabase: GetLogicDatabaseResponseBodyLogicDatabase,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.logicDatabase && typeof (this.logicDatabase as any).validate === 'function') {
      (this.logicDatabase as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetLogicDatabaseResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetLogicDatabaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetLogicDatabaseResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMetaTableColumnRequest extends $dara.Model {
  /**
   * @remarks
   * The globally unique identifier (GUID) of the table in Data Management (DMS).
   * 
   * *   If the database to which the table belongs is a logical database, you can call the [ListLogicTables](https://help.aliyun.com/document_detail/141875.html) operation to obtain the value of this parameter.
   * *   If the database to which the table belongs is a physical database, you can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to obtain the value of this parameter.
   * 
   * This parameter is required.
   * 
   * @example
   * IDB_40753****.qntest2.activity_setting
   */
  tableGuid?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      tableGuid: 'TableGuid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tableGuid: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMetaTableColumnResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details about fields in the table.
   */
  columnList?: GetMetaTableColumnResponseBodyColumnList[];
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * MissingTableGuid
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * TableGuid is mandatory for this action.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 087DFBA1-378B-5D25-B13B-31F6409F****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      columnList: 'ColumnList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnList: { 'type': 'array', 'itemType': GetMetaTableColumnResponseBodyColumnList },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.columnList)) {
      $dara.Model.validateArray(this.columnList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMetaTableColumnResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetMetaTableColumnResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetMetaTableColumnResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMetaTableDetailInfoRequest extends $dara.Model {
  /**
   * @remarks
   * The GUID of the table in Data Management (DMS).
   * 
   * > 
   * 
   * *   You can call the [ListLogicTables](https://help.aliyun.com/document_detail/141875.html) operation with ReturnGuid set to true to query the GUIDs of logical tables in a specific logical database.
   * 
   * *   You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation with ReturnGuid set to true to query the GUIDs of tables in a specific physical database.
   * 
   * This parameter is required.
   * 
   * @example
   * IDB_L_9032.db-test.yuyang_test
   */
  tableGuid?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the Manage DMS tenants topic.
   * 
   * @example
   * 123
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      tableGuid: 'TableGuid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tableGuid: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMetaTableDetailInfoResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the table.
   */
  detailInfo?: GetMetaTableDetailInfoResponseBodyDetailInfo;
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * E881CB2F-DE42-42E5-90EB-8B3173DCB9B9
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      detailInfo: 'DetailInfo',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      detailInfo: GetMetaTableDetailInfoResponseBodyDetailInfo,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.detailInfo && typeof (this.detailInfo as any).validate === 'function') {
      (this.detailInfo as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMetaTableDetailInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetMetaTableDetailInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetMetaTableDetailInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOnlineDDLProgressRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the OnlineDDL SQL task details. You can call the [ListDBTaskSQLJobDetail](https://help.aliyun.com/document_detail/207073.html) operation to obtain the task detail ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  jobDetailId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      jobDetailId: 'JobDetailId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      jobDetailId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOnlineDDLProgressResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The details of the task.
   */
  onlineDDLTaskDetail?: GetOnlineDDLProgressResponseBodyOnlineDDLTaskDetail;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 34E01EDD-6A16-4CF0-9541-C644D1BE01AA
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      onlineDDLTaskDetail: 'OnlineDDLTaskDetail',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      onlineDDLTaskDetail: GetOnlineDDLProgressResponseBodyOnlineDDLTaskDetail,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.onlineDDLTaskDetail && typeof (this.onlineDDLTaskDetail as any).validate === 'function') {
      (this.onlineDDLTaskDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOnlineDDLProgressResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetOnlineDDLProgressResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetOnlineDDLProgressResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOpLogRequest extends $dara.Model {
  /**
   * @remarks
   * DatabaseName.
   * 
   * @example
   * dmstest@rm-bp1qb97d4b****.mysql.rds.aliyuncs.com:3306[poc_dev]
   */
  databaseName?: string;
  /**
   * @remarks
   * The end of the time range to query. Specify the time in the yyyy-MM-DD HH:mm:ss format.
   * 
   * This parameter is required.
   * 
   * @example
   * 2022-03-29 10:00:00
   */
  endTime?: string;
  /**
   * @remarks
   * The functional module for which you want to query operation logs. If you do not specify this parameter, operation logs for all functional modules are returned. Valid values:
   * 
   * *   **PERMISSION**: permissions
   * *   **OWNER**: data owner
   * *   **SQL_CONSOLE**: data query
   * *   **SQL_CONSOLE_EXPORT**: query result export
   * *   **DATA_CHANGE**: data change
   * *   **DATA_EXPORT**: data export
   * *   **SQL_REVIEW**: SQL review
   * *   **DT_SYNC**: database and table synchronization
   * *   **DT_DETAIL**: database and table details
   * *   **DB_TASK**: task management
   * *   **INSTANCE_MANAGE**: instance management
   * *   **USER_MANAGE**: user management
   * *   **SECURITY_RULE**: security rules
   * *   **CONFIG_MANAGE**: configuration management
   * *   **RESOURCE_AUTH**: resource authorization
   * *   **ACCESS_WHITE_IP**: access IP address whitelist
   * *   **NDDL**: schema design
   * *   **DSQL_CONSOLE**: cross-database data query
   * *   **DSQL_CONSOLE_EXPORT**: cross-database query result export
   * *   **DATA_TRACT**: data tracking
   * *   **DATA_QUALITY**: data quality
   * *   **DATALINK_MANAGE** :DBLink management
   * *   **DATASEC_MANAGE**: sensitive data management
   * *   **SELL**: sales
   * 
   * @example
   * SECURITY_RULE
   */
  module?: string;
  /**
   * @remarks
   * The number of the page to return. Pages start from page 1.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page. Valid values:
   * 
   * *   30
   * *   50
   * *   100
   * 
   * This parameter is required.
   * 
   * @example
   * 30
   */
  pageSize?: number;
  /**
   * @remarks
   * The beginning of the time range to query. Specify the time in the yyyy-MM-DD HH:mm:ss format.
   * 
   * This parameter is required.
   * 
   * @example
   * 2022-03-23 10:00:00
   */
  startTime?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * UserNick.
   * 
   * @example
   * test_name
   */
  userNick?: string;
  static names(): { [key: string]: string } {
    return {
      databaseName: 'DatabaseName',
      endTime: 'EndTime',
      module: 'Module',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      startTime: 'StartTime',
      tid: 'Tid',
      userNick: 'UserNick',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databaseName: 'string',
      endTime: 'string',
      module: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      startTime: 'string',
      tid: 'number',
      userNick: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOpLogResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The details of the operation log.
   */
  opLogDetails?: GetOpLogResponseBodyOpLogDetails;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 47D56208-DB1D-4FD3-BE32-300E43185488
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of operation logs that are returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      opLogDetails: 'OpLogDetails',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      opLogDetails: GetOpLogResponseBodyOpLogDetails,
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.opLogDetails && typeof (this.opLogDetails as any).validate === 'function') {
      (this.opLogDetails as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOpLogResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetOpLogResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetOpLogResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOrderAttachmentFileRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 51****
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOrderAttachmentFileResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned. Take note of the following rules:
   * 
   * *   The **ErrorCode** parameter is not returned if the request is successful.
   * *   The **ErrorCode** parameter is returned if the request fails. For more information, see the **Error codes** section of this topic.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The download URL of the attachment.
   * 
   * @example
   * https://dmsxxx
   */
  fileUrl?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * FE8EE2F1-4880-46BC-A704-5CF63EAF9A04
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      fileUrl: 'FileUrl',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      fileUrl: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOrderAttachmentFileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetOrderAttachmentFileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetOrderAttachmentFileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOrderBaseInfoRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOrderBaseInfoResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The basic information about the ticket.
   */
  orderBaseInfo?: GetOrderBaseInfoResponseBodyOrderBaseInfo;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 7133DF67-5B25-460F-8285-C4CC93472C2F
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      orderBaseInfo: 'OrderBaseInfo',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      orderBaseInfo: GetOrderBaseInfoResponseBodyOrderBaseInfo,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.orderBaseInfo && typeof (this.orderBaseInfo as any).validate === 'function') {
      (this.orderBaseInfo as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOrderBaseInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetOrderBaseInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetOrderBaseInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOwnerApplyOrderDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 730000
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOwnerApplyOrderDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The details of the ticket.
   */
  ownerApplyOrderDetail?: GetOwnerApplyOrderDetailResponseBodyOwnerApplyOrderDetail;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * CB784055-E8CB-4461-AB0B-483A1DA32BB5
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      ownerApplyOrderDetail: 'OwnerApplyOrderDetail',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      ownerApplyOrderDetail: GetOwnerApplyOrderDetailResponseBodyOwnerApplyOrderDetail,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.ownerApplyOrderDetail && typeof (this.ownerApplyOrderDetail as any).validate === 'function') {
      (this.ownerApplyOrderDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOwnerApplyOrderDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetOwnerApplyOrderDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetOwnerApplyOrderDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPagedInstanceRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 868*****
   */
  orderId?: number;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPagedInstanceResponseBody extends $dara.Model {
  data?: GetPagedInstanceResponseBodyData;
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 1
   */
  pageIndex?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 7FAD400F-7A5C-4193-8F9A-39D86C4F0231
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 2
   */
  total?: number;
  /**
   * @remarks
   * Id of the request
   * 
   * @example
   * 0a06e1e316757357507896067d3780
   */
  traceId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      success: 'Success',
      total: 'Total',
      traceId: 'TraceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: GetPagedInstanceResponseBodyData,
      errorCode: 'string',
      errorMessage: 'string',
      pageIndex: 'number',
      pageSize: 'number',
      requestId: 'string',
      success: 'boolean',
      total: 'number',
      traceId: 'string',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPagedInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetPagedInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetPagedInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPermApplyOrderDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/465867.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 730000
   */
  orderId?: number;
  /**
   * @remarks
   * The tenant ID.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPermApplyOrderDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The details of the permission application ticket.
   */
  permApplyOrderDetail?: GetPermApplyOrderDetailResponseBodyPermApplyOrderDetail;
  /**
   * @remarks
   * The request ID. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * A4C4499E-5AC2-4318-9FCF-03E426781A04
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   true
   * *   false
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      permApplyOrderDetail: 'PermApplyOrderDetail',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      permApplyOrderDetail: GetPermApplyOrderDetailResponseBodyPermApplyOrderDetail,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.permApplyOrderDetail && typeof (this.permApplyOrderDetail as any).validate === 'function') {
      (this.permApplyOrderDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPermApplyOrderDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetPermApplyOrderDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetPermApplyOrderDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPhysicalDatabaseRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the physical database. You can call the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 43153
   */
  dbId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the ID of the tenant.
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPhysicalDatabaseResponseBody extends $dara.Model {
  /**
   * @remarks
   * The information about the physical database.
   */
  database?: GetPhysicalDatabaseResponseBodyDatabase;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 7FAD400F-7A5C-4193-8F9A-39D86C4F0231
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      database: 'Database',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      database: GetPhysicalDatabaseResponseBodyDatabase,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.database && typeof (this.database as any).validate === 'function') {
      (this.database as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPhysicalDatabaseResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetPhysicalDatabaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetPhysicalDatabaseResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetProxyRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the secure access proxy. You can call the [ListProxies](https://help.aliyun.com/document_detail/295371.html) operation to query the ID of the secure access proxy.
   * 
   * This parameter is required.
   * 
   * @example
   * 4**
   */
  proxyId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      proxyId: 'ProxyId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      proxyId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetProxyResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the user who enabled the secure access proxy feature.
   * 
   * @example
   * 12****
   */
  creatorId?: number;
  /**
   * @remarks
   * The nickname of the user who enabled the secure access proxy feature.
   * 
   * @example
   * test_name
   */
  creatorName?: string;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * The condition cannot be empty!
   */
  errorMessage?: string;
  /**
   * @remarks
   * The port number used by the HTTPS protocol.
   * 
   * @example
   * 443
   */
  httpsPort?: number;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * 183****
   */
  instanceId?: number;
  /**
   * @remarks
   * Indicates whether the internal endpoint was enabled. Default value: **true**.
   * 
   * @example
   * true
   */
  privateEnable?: boolean;
  /**
   * @remarks
   * The internal endpoint.
   * 
   * @example
   * dphzmy-5j8oimjsz6ze****.proxy.dms.aliyuncs.com
   */
  privateHost?: string;
  /**
   * @remarks
   * The port number used by the protocol.
   * 
   * @example
   * 3306
   */
  protocolPort?: number;
  /**
   * @remarks
   * The protocol type of the database. Example: MYSQL.
   * 
   * @example
   * MYSQL
   */
  protocolType?: string;
  /**
   * @remarks
   * The ID of the secure access proxy.
   * 
   * @example
   * 4**
   */
  proxyId?: number;
  /**
   * @remarks
   * Indicates whether the public endpoint was enabled. Valid values:
   * 
   * *   **true**: The public endpoint was enabled.
   * *   **false**: The public endpoint was disabled.
   * 
   * @example
   * true
   */
  publicEnable?: boolean;
  /**
   * @remarks
   * The public endpoint. A public endpoint is returned no matter whether the public endpoint is enabled or disabled.
   * 
   * > 
   * 
   * *   If the value of the PublicEnable parameter is **true**, a valid public endpoint that can be resolved by using Alibaba Cloud DNS is returned.
   * 
   * *   If the value of the PublicEnable parameter is **false**, an invalid public endpoint that cannot be resolved by using Alibaba Cloud DNS is returned.
   * 
   * @example
   * dphzmy-5j8oimjsz6zed7k****.proxy.dms.aliyuncs.com
   */
  publicHost?: string;
  /**
   * @remarks
   * The ID of the region in which the instance resides.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * F49D4598-2B3C-5723-865E-2CCB818E****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      creatorId: 'CreatorId',
      creatorName: 'CreatorName',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      httpsPort: 'HttpsPort',
      instanceId: 'InstanceId',
      privateEnable: 'PrivateEnable',
      privateHost: 'PrivateHost',
      protocolPort: 'ProtocolPort',
      protocolType: 'ProtocolType',
      proxyId: 'ProxyId',
      publicEnable: 'PublicEnable',
      publicHost: 'PublicHost',
      regionId: 'RegionId',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creatorId: 'number',
      creatorName: 'string',
      errorCode: 'string',
      errorMessage: 'string',
      httpsPort: 'number',
      instanceId: 'number',
      privateEnable: 'boolean',
      privateHost: 'string',
      protocolPort: 'number',
      protocolType: 'string',
      proxyId: 'number',
      publicEnable: 'boolean',
      publicHost: 'string',
      regionId: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetProxyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetProxyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetProxyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetProxyAccessRequest extends $dara.Model {
  /**
   * @remarks
   * The ID that Data Management (DMS) generates after the user is authorized to enable the secure access proxy feature for an instance. The ID is unique in DMS. You can call the [ListProxyAccesses](https://help.aliyun.com/document_detail/295386.html) operation to query the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  proxyAccessId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      proxyAccessId: 'ProxyAccessId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      proxyAccessId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetProxyAccessResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UserNotExist
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * The specified user not exists.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The authorization information about the secure access proxy feature.
   */
  proxyAccess?: GetProxyAccessResponseBodyProxyAccess;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 3CDB8601-AD74-4A47-8114-08E08CD6****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      proxyAccess: 'ProxyAccess',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      proxyAccess: GetProxyAccessResponseBodyProxyAccess,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.proxyAccess && typeof (this.proxyAccess as any).validate === 'function') {
      (this.proxyAccess as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetProxyAccessResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetProxyAccessResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetProxyAccessResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRuleNumLimitOfSLARequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 11****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRuleNumLimitOfSLAResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * D05B3EE1-B6D3-5B17-8CA6-A8054828E5B2
   */
  requestId?: string;
  /**
   * @remarks
   * The maximum number of SLA rules.
   * 
   * @example
   * 12
   */
  ruleNumLimit?: number;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      ruleNumLimit: 'RuleNumLimit',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      ruleNumLimit: 'number',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRuleNumLimitOfSLAResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetRuleNumLimitOfSLAResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetRuleNumLimitOfSLAResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSQLReviewCheckResultStatusRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket. You can obtain the ticket ID from the response parameters of the [CreateSQLReviewOrder](https://help.aliyun.com/document_detail/257777.html) operation.
   * 
   * This parameter is required.
   * 
   * @example
   * 123321
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the ID of the tenant.
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSQLReviewCheckResultStatusResponseBody extends $dara.Model {
  /**
   * @remarks
   * The result of the SQL review.
   */
  checkResultStatus?: GetSQLReviewCheckResultStatusResponseBodyCheckResultStatus;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      checkResultStatus: 'CheckResultStatus',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkResultStatus: GetSQLReviewCheckResultStatusResponseBodyCheckResultStatus,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.checkResultStatus && typeof (this.checkResultStatus as any).validate === 'function') {
      (this.checkResultStatus as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSQLReviewCheckResultStatusResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetSQLReviewCheckResultStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetSQLReviewCheckResultStatusResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSQLReviewOptimizeDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The key that is used to query the details of optimization suggestions. You can call the [ListSQLReviewOriginSQL](https://help.aliyun.com/document_detail/257870.html) operation to query the key.
   * 
   * This parameter is required.
   * 
   * @example
   * a57e54ec5433475ea3082d882fdb****
   */
  SQLReviewQueryKey?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the ID of the tenant.
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      SQLReviewQueryKey: 'SQLReviewQueryKey',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      SQLReviewQueryKey: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSQLReviewOptimizeDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The details of optimization suggestions for SQL statements.
   */
  optimizeDetail?: GetSQLReviewOptimizeDetailResponseBodyOptimizeDetail;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      optimizeDetail: 'OptimizeDetail',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      optimizeDetail: GetSQLReviewOptimizeDetailResponseBodyOptimizeDetail,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.optimizeDetail && typeof (this.optimizeDetail as any).validate === 'function') {
      (this.optimizeDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSQLReviewOptimizeDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetSQLReviewOptimizeDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetSQLReviewOptimizeDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStandardGroupRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 242***
   */
  groupId?: number;
  /**
   * @example
   * 23****
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      groupId: 'GroupId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStandardGroupResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * BF7E9543-F431-566A-991A-B5C493EA36C2
   */
  requestId?: string;
  standardGroup?: GetStandardGroupResponseBodyStandardGroup;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      standardGroup: 'StandardGroup',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      standardGroup: GetStandardGroupResponseBodyStandardGroup,
      success: 'boolean',
    };
  }

  validate() {
    if(this.standardGroup && typeof (this.standardGroup as any).validate === 'function') {
      (this.standardGroup as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStandardGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetStandardGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetStandardGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncExecSqlDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 342153
   */
  orderId?: number;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      pageNumber: 'number',
      pageSize: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncExecSqlDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1810E635-A2D7-428B-BAA9-85DAEB9B1A77
   */
  requestId?: string;
  /**
   * @remarks
   * The details of the SQL statements.
   */
  structSyncExecSqlDetail?: GetStructSyncExecSqlDetailResponseBodyStructSyncExecSqlDetail;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      structSyncExecSqlDetail: 'StructSyncExecSqlDetail',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      structSyncExecSqlDetail: GetStructSyncExecSqlDetailResponseBodyStructSyncExecSqlDetail,
      success: 'boolean',
    };
  }

  validate() {
    if(this.structSyncExecSqlDetail && typeof (this.structSyncExecSqlDetail as any).validate === 'function') {
      (this.structSyncExecSqlDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncExecSqlDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetStructSyncExecSqlDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetStructSyncExecSqlDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncJobAnalyzeResultRequest extends $dara.Model {
  /**
   * @remarks
   * The type of the comparison. Valid values:
   * 
   * *   **CREATE_TABLE**: compares the created tables.
   * *   **ALTER_TABLE**: compares the modified tables.
   * *   **EQUAL_TABLE**: compares the identical tables.
   * *   **PASS_TABLE**: compares the tables that are skipped during schema synchronization.
   * *   **NOT_COMPARE**: does not compare tables.
   * 
   * @example
   * CREATE_TABLE
   */
  compareType?: string;
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 1342355
   */
  orderId?: number;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      compareType: 'CompareType',
      orderId: 'OrderId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      compareType: 'string',
      orderId: 'number',
      pageNumber: 'number',
      pageSize: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncJobAnalyzeResultResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1810E635-A2D7-428B-BAA9-85DAEB9B1A77
   */
  requestId?: string;
  /**
   * @remarks
   * The analysis result of the schema synchronization task.
   */
  structSyncJobAnalyzeResult?: GetStructSyncJobAnalyzeResultResponseBodyStructSyncJobAnalyzeResult;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      structSyncJobAnalyzeResult: 'StructSyncJobAnalyzeResult',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      structSyncJobAnalyzeResult: GetStructSyncJobAnalyzeResultResponseBodyStructSyncJobAnalyzeResult,
      success: 'boolean',
    };
  }

  validate() {
    if(this.structSyncJobAnalyzeResult && typeof (this.structSyncJobAnalyzeResult as any).validate === 'function') {
      (this.structSyncJobAnalyzeResult as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncJobAnalyzeResultResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetStructSyncJobAnalyzeResultResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetStructSyncJobAnalyzeResultResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncJobDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 4324321
   */
  orderId?: number;
  /**
   * @remarks
   * The tenant ID.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncJobDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 48602B78-0DDF-414C-8688-70CAB6070115
   */
  requestId?: string;
  /**
   * @remarks
   * The details of the schema synchronization task.
   */
  structSyncJobDetail?: GetStructSyncJobDetailResponseBodyStructSyncJobDetail;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      structSyncJobDetail: 'StructSyncJobDetail',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      structSyncJobDetail: GetStructSyncJobDetailResponseBodyStructSyncJobDetail,
      success: 'boolean',
    };
  }

  validate() {
    if(this.structSyncJobDetail && typeof (this.structSyncJobDetail as any).validate === 'function') {
      (this.structSyncJobDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncJobDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetStructSyncJobDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetStructSyncJobDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncOrderDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 43****
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncOrderDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4E1D2B4D-3E53-4ABC-999D-1D2520B3471A
   */
  requestId?: string;
  /**
   * @remarks
   * The details of the schema synchronization ticket.
   */
  structSyncOrderDetail?: GetStructSyncOrderDetailResponseBodyStructSyncOrderDetail;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      structSyncOrderDetail: 'StructSyncOrderDetail',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      structSyncOrderDetail: GetStructSyncOrderDetailResponseBodyStructSyncOrderDetail,
      success: 'boolean',
    };
  }

  validate() {
    if(this.structSyncOrderDetail && typeof (this.structSyncOrderDetail as any).validate === 'function') {
      (this.structSyncOrderDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetStructSyncOrderDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetStructSyncOrderDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetStructSyncOrderDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDBTopologyRequest extends $dara.Model {
  /**
   * @remarks
   * The GUID of the table in DMS.
   * 
   * > 
   * 
   * *   If the database to which the table belongs is a logical database, you can call the [ListLogicTables](https://help.aliyun.com/document_detail/141875.html) operation to obtain the GUID. The value of the ReturnGuid parameter must be set to true.
   * 
   * *   If the database to which the table belongs is a physical database, you can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to obtain the GUID. The value of the ReturnGuid parameter must be set to true.
   * 
   * This parameter is required.
   * 
   * @example
   * IDB_L_9032.db-test.yuyang_test
   */
  tableGuid?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      tableGuid: 'TableGuid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tableGuid: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDBTopologyResponseBody extends $dara.Model {
  /**
   * @remarks
   * The topology of the data table.
   */
  DBTopology?: GetTableDBTopologyResponseBodyDBTopology;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 853F7FD4-D922-4EFB-931C-D253EF159E06
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      DBTopology: 'DBTopology',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      DBTopology: GetTableDBTopologyResponseBodyDBTopology,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.DBTopology && typeof (this.DBTopology as any).validate === 'function') {
      (this.DBTopology as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDBTopologyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetTableDBTopologyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetTableDBTopologyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDesignProjectFlowRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the schema design ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 95****
   */
  orderId?: number;
  /**
   * @remarks
   * The tenant ID.
   * 
   * >  To view the tenant ID, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDesignProjectFlowResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The information about the schema design process.
   */
  projectFlow?: GetTableDesignProjectFlowResponseBodyProjectFlow;
  /**
   * @remarks
   * The request ID. You can use the request ID to query logs and troubleshoot issues.
   * 
   * @example
   * B5FD0BC8-2D90-4478-B8EC-A0E92E0B1773
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      projectFlow: 'ProjectFlow',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      projectFlow: GetTableDesignProjectFlowResponseBodyProjectFlow,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.projectFlow && typeof (this.projectFlow as any).validate === 'function') {
      (this.projectFlow as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDesignProjectFlowResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetTableDesignProjectFlowResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetTableDesignProjectFlowResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDesignProjectInfoRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the schema design ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/465867.html) operation to obtain the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 95****
   */
  orderId?: number;
  /**
   * @remarks
   * The tenant ID.
   * 
   * >  To view the tenant ID, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDesignProjectInfoResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The information about the schema design project.
   */
  projectInfo?: GetTableDesignProjectInfoResponseBodyProjectInfo;
  /**
   * @remarks
   * The request ID. You can use the request ID to query logs and troubleshoot issues.
   * 
   * @example
   * 48778434-5796-571A-8455-A59146588401
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      projectInfo: 'ProjectInfo',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      projectInfo: GetTableDesignProjectInfoResponseBodyProjectInfo,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.projectInfo && typeof (this.projectInfo as any).validate === 'function') {
      (this.projectInfo as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableDesignProjectInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetTableDesignProjectInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetTableDesignProjectInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableTopologyRequest extends $dara.Model {
  /**
   * @remarks
   * The GUID of the table in Data Management (DMS).
   * 
   * > 
   * > - You can call the [ListLogicTables](https://help.aliyun.com/document_detail/141875.html) operation with ReturnGuid set to true to query the GUIDs of logical tables in a specific logical database.
   * > - You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation with ReturnGuid set to true to query the GUIDs of tables in a specific physical database.
   * 
   * This parameter is required.
   * 
   * @example
   * IDB_L_308302.yuyang_test.test_ch
   */
  tableGuid?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Tenant information](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      tableGuid: 'TableGuid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tableGuid: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableTopologyResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * F5ED6A40-F344-4C7D-A8F0-5685CA584CA7
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The topology information.
   */
  tableTopology?: GetTableTopologyResponseBodyTableTopology;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      tableTopology: 'TableTopology',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      tableTopology: GetTableTopologyResponseBodyTableTopology,
    };
  }

  validate() {
    if(this.tableTopology && typeof (this.tableTopology as any).validate === 'function') {
      (this.tableTopology as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTableTopologyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetTableTopologyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetTableTopologyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 51***
   */
  nodeId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      nodeId: 'NodeId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 7838266C-E17B-58F4-B072-4DC356B58258
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The task node.
   */
  task?: GetTaskResponseBodyTask;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      task: 'Task',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      task: GetTaskResponseBodyTask,
    };
  }

  validate() {
    if(this.task && typeof (this.task as any).validate === 'function') {
      (this.task as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetTaskResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskFlowGraphRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskFlowGraphResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * D9D91166-A626-5F4E-9CA6-7AB10C59DBD8
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The list of DAG variables of the task flow.
   */
  taskFlowGraph?: GetTaskFlowGraphResponseBodyTaskFlowGraph;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      taskFlowGraph: 'TaskFlowGraph',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      taskFlowGraph: GetTaskFlowGraphResponseBodyTaskFlowGraph,
    };
  }

  validate() {
    if(this.taskFlowGraph && typeof (this.taskFlowGraph as any).validate === 'function') {
      (this.taskFlowGraph as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskFlowGraphResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetTaskFlowGraphResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetTaskFlowGraphResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskFlowNotificationRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskFlowNotificationResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The notification settings specified by the user.
   */
  notification?: GetTaskFlowNotificationResponseBodyNotification;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * F19D575F-EBEA-5683-AFA3-A8F6D9A7DE03
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      notification: 'Notification',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      notification: GetTaskFlowNotificationResponseBodyNotification,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.notification && typeof (this.notification as any).validate === 'function') {
      (this.notification as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskFlowNotificationResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetTaskFlowNotificationResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetTaskFlowNotificationResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskInstanceRelationRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the ID of the task flow.
   * 
   * This parameter is required.
   * 
   * @example
   * 7***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to obtain the execution record ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 47****
   */
  dagInstanceId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      dagInstanceId: 'DagInstanceId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      dagInstanceId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskInstanceRelationResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The information about the nodes in the execution record of the task flow.
   */
  nodeList?: GetTaskInstanceRelationResponseBodyNodeList;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 028BF827-3801-5869-8548-F4A039256304
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      nodeList: 'NodeList',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      nodeList: GetTaskInstanceRelationResponseBodyNodeList,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.nodeList && typeof (this.nodeList as any).validate === 'function') {
      (this.nodeList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskInstanceRelationResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetTaskInstanceRelationResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetTaskInstanceRelationResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The UID of the Alibaba Cloud account. You can view your UID by moving the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console.
   * 
   * @example
   * 22973492647626****
   */
  uid?: string;
  /**
   * @remarks
   * The ID of the user. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) operation to query the ID of the user.
   * 
   * @example
   * 51****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      tid: 'Tid',
      uid: 'Uid',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tid: 'number',
      uid: 'string',
      userId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * Unknown server error
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 804BB128-CAFA-5DD0-BA1E-43DDE488****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The information about the user.
   */
  user?: GetUserResponseBodyUser;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      user: 'User',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      user: GetUserResponseBodyUser,
    };
  }

  validate() {
    if(this.user && typeof (this.user as any).validate === 'function') {
      (this.user as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetUserResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserActiveTenantRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserActiveTenantResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * TenantNotExist
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * The specified tenant does not exist.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4B63CAC5-BD7F-5C7C-82C9-59DFFBC3C5C2
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The details of the tenant.
   */
  tenant?: GetUserActiveTenantResponseBodyTenant;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      tenant: 'Tenant',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      tenant: GetUserActiveTenantResponseBodyTenant,
    };
  }

  validate() {
    if(this.tenant && typeof (this.tenant as any).validate === 'function') {
      (this.tenant as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserActiveTenantResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetUserActiveTenantResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetUserActiveTenantResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserUploadFileJobRequest extends $dara.Model {
  /**
   * @remarks
   * The key of the file upload task. The key is returned when you call the [CreateUploadFileJob](https://help.aliyun.com/document_detail/206059.html) or [CreateUploadOSSFileJob](https://help.aliyun.com/document_detail/206060.html) operation.
   * 
   * This parameter is required.
   * 
   * @example
   * 65254a49100e
   */
  jobKey?: string;
  /**
   * @remarks
   * The tenant ID.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      jobKey: 'JobKey',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      jobKey: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserUploadFileJobResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * BDEFE9F2-B3B4-42D0-83AE-ECF9FC067DCD
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The details of the file upload task.
   */
  uploadFileJobDetail?: GetUserUploadFileJobResponseBodyUploadFileJobDetail;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      uploadFileJobDetail: 'UploadFileJobDetail',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      uploadFileJobDetail: GetUserUploadFileJobResponseBodyUploadFileJobDetail,
    };
  }

  validate() {
    if(this.uploadFileJobDetail && typeof (this.uploadFileJobDetail as any).validate === 'function') {
      (this.uploadFileJobDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetUserUploadFileJobResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetUserUploadFileJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetUserUploadFileJobResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GrantTemplateAuthorityRequest extends $dara.Model {
  /**
   * @remarks
   * The reason why you want to grant permissions on resources to the users by using the permission template.
   * 
   * @example
   * Business test.
   */
  comment?: string;
  /**
   * @remarks
   * The time when the permission expires. Specify the time in the yyyy-MM-DD HH:mm:ss format.
   * 
   * This parameter is required.
   * 
   * @example
   * 2023-03-08 17:58:53
   */
  expireDate?: string;
  /**
   * @remarks
   * The ID of the permission template.
   * 
   * This parameter is required.
   * 
   * @example
   * 1563
   */
  templateId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The IDs of users to which you want to grant permissions on resources by using the permission template.
   * 
   * This parameter is required.
   * 
   * @example
   * [12***,34***,56***]
   */
  userIds?: string;
  static names(): { [key: string]: string } {
    return {
      comment: 'Comment',
      expireDate: 'ExpireDate',
      templateId: 'TemplateId',
      tid: 'Tid',
      userIds: 'UserIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      expireDate: 'string',
      templateId: 'number',
      tid: 'number',
      userIds: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GrantTemplateAuthorityResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 34E01EDD-6A16-4CF0-9541-C644D1BE01AA
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the permissions on resources were granted to the users by using the permission template.
   * 
   * @example
   * true
   */
  result?: boolean;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   true: The request was successful.
   * *   false: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      result: 'Result',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      result: 'boolean',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GrantTemplateAuthorityResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GrantTemplateAuthorityResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GrantTemplateAuthorityResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GrantUserPermissionRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the database. You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to query the ID of a physical database and the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to query the ID of a logical database.
   * 
   * >  The value of the DatabaseId parameter is that of the DbId parameter.
   * 
   * @example
   * 1***
   */
  dbId?: string;
  /**
   * @remarks
   * The permissions on a specific type of object that you want to grant to the user. Valid values:
   * 
   * *   INSTANCE: permissions on instances
   * *   DATABASE: permissions on physical databases
   * *   LOGIC_DATABASE: permissions on logical databases
   * *   TABLE: permissions on physical tables
   * *   LOGIC_TABLE: permissions on logical tables
   * 
   * This parameter is required.
   * 
   * @example
   * DATABASE
   */
  dsType?: string;
  /**
   * @remarks
   * The time when the permissions expire.
   * 
   * This parameter is required.
   * 
   * @example
   * 2021-12-12 00:00:00
   */
  expireDate?: string;
  /**
   * @remarks
   * The ID of the instance. You must specify this parameter if you grant permissions on an instance to the user. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the ID of the instance.
   * 
   * @example
   * 174****
   */
  instanceId?: number;
  /**
   * @remarks
   * Specifies whether the database is a logical database. You must specify this parameter if you grant permissions on a database to the user. Valid values:
   * 
   * *   true: The database is a logical database.
   * *   false: The database is a physical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The permission type. Separate multiple permission types with commas (,). Valid values:
   * 
   * *   **QUERY**: the query permissions
   * *   **EXPORT**: the export permissions
   * *   **CORRECT**: the change permissions
   * *   **LOGIN**: the logon permissions
   * *   **PERF**: the query permissions on the performance details of the instance
   * 
   * This parameter is required.
   * 
   * @example
   * QUERY
   */
  permTypes?: string;
  /**
   * @remarks
   * The ID of the table. You must specify this parameter if you grant permissions on a table to the user. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to query the table ID.
   * 
   * @example
   * 132***
   */
  tableId?: string;
  /**
   * @remarks
   * The name of the table. You must specify this parameter if you grant permissions on a table to the user.
   * 
   * @example
   * table_name
   */
  tableName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The ID of the user. You can call the [GetUser](https://help.aliyun.com/document_detail/147098.html) or [ListUsers](https://help.aliyun.com/document_detail/141938.html) operation to query the ID of the user.
   * 
   * >  The user ID is different from the ID of your Alibaba Cloud account.
   * 
   * This parameter is required.
   * 
   * @example
   * 51****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      dsType: 'DsType',
      expireDate: 'ExpireDate',
      instanceId: 'InstanceId',
      logic: 'Logic',
      permTypes: 'PermTypes',
      tableId: 'TableId',
      tableName: 'TableName',
      tid: 'Tid',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'string',
      dsType: 'string',
      expireDate: 'string',
      instanceId: 'number',
      logic: 'boolean',
      permTypes: 'string',
      tableId: 'string',
      tableName: 'string',
      tid: 'number',
      userId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GrantUserPermissionResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * A99CD576-1E18-4E86-931E-C3CCE56DC030
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   true: The request was successful.
   * *   false: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GrantUserPermissionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GrantUserPermissionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GrantUserPermissionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InspectProxyAccessSecretRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the security protection authorization. After the security protection agent authorizes the target user, the system automatically generates a security protection authorization ID. The ID is globally unique. You can call the [ListProxyAccesses](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxyaccesses) operation to obtain this parameter.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  proxyAccessId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) or [ListUserTenants](https://www.alibabacloud.com/help/en/data-management-service/latest/listusertenants) operation to obtain this parameter.
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      proxyAccessId: 'ProxyAccessId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      proxyAccessId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InspectProxyAccessSecretResponseBody extends $dara.Model {
  /**
   * @remarks
   * The authorization password of the security protection agent.
   * 
   * @example
   * xxx
   */
  accessSecret?: string;
  /**
   * @remarks
   * The error code returned to the query task.
   * 
   * @example
   * 200
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the call was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      accessSecret: 'AccessSecret',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessSecret: 'string',
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InspectProxyAccessSecretResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InspectProxyAccessSecretResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InspectProxyAccessSecretResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAbacAuthorizationsRequest extends $dara.Model {
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 12****
   */
  policyId?: string;
  /**
   * @example
   * USER_DEFINE
   */
  policySource?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      policyId: 'PolicyId',
      policySource: 'PolicySource',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNumber: 'number',
      pageSize: 'number',
      policyId: 'string',
      policySource: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAbacAuthorizationsResponseBody extends $dara.Model {
  authorizationList?: ListAbacAuthorizationsResponseBodyAuthorizationList[];
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 7FAD400F-7A5C-4193-8F9A-39D86C4F0231
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 3
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      authorizationList: 'AuthorizationList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorizationList: { 'type': 'array', 'itemType': ListAbacAuthorizationsResponseBodyAuthorizationList },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.authorizationList)) {
      $dara.Model.validateArray(this.authorizationList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAbacAuthorizationsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListAbacAuthorizationsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListAbacAuthorizationsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAbacPoliciesRequest extends $dara.Model {
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * policy_test
   */
  searchKey?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      searchKey: 'SearchKey',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNumber: 'number',
      pageSize: 'number',
      searchKey: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAbacPoliciesResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  policyList?: ListAbacPoliciesResponseBodyPolicyList[];
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @example
   * 5
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      policyList: 'PolicyList',
      requestId: 'RequestId',
      success: 'Success',
      tid: 'Tid',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      policyList: { 'type': 'array', 'itemType': ListAbacPoliciesResponseBodyPolicyList },
      requestId: 'string',
      success: 'boolean',
      tid: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.policyList)) {
      $dara.Model.validateArray(this.policyList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAbacPoliciesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListAbacPoliciesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListAbacPoliciesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorityTemplateRequest extends $dara.Model {
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  searchKey?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      searchKey: 'SearchKey',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNumber: 'number',
      pageSize: 'number',
      searchKey: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorityTemplateResponseBody extends $dara.Model {
  authorityTemplateViewList?: ListAuthorityTemplateResponseBodyAuthorityTemplateViewList;
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 31853A2B-DC9D-5B39-8492-D2AC8BCF550E
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @example
   * 10
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      authorityTemplateViewList: 'AuthorityTemplateViewList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      tid: 'Tid',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorityTemplateViewList: ListAuthorityTemplateResponseBodyAuthorityTemplateViewList,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      tid: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.authorityTemplateViewList && typeof (this.authorityTemplateViewList as any).validate === 'function') {
      (this.authorityTemplateViewList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorityTemplateResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListAuthorityTemplateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListAuthorityTemplateResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedDatabasesForUserRequest extends $dara.Model {
  /**
   * @example
   * MySQL
   */
  dbType?: string;
  /**
   * @example
   * product
   */
  envType?: string;
  /**
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @example
   * 1
   */
  pageNumber?: string;
  /**
   * @example
   * 20
   */
  pageSize?: string;
  /**
   * @example
   * policy_test
   */
  searchKey?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 51****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      envType: 'EnvType',
      logic: 'Logic',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      searchKey: 'SearchKey',
      tid: 'Tid',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      envType: 'string',
      logic: 'boolean',
      pageNumber: 'string',
      pageSize: 'string',
      searchKey: 'string',
      tid: 'number',
      userId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedDatabasesForUserResponseBody extends $dara.Model {
  databases?: ListAuthorizedDatabasesForUserResponseBodyDatabases[];
  /**
   * @example
   * 012AE0B5-4B52-532F-BD7C-1EE9F182089B
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      databases: 'Databases',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databases: { 'type': 'array', 'itemType': ListAuthorizedDatabasesForUserResponseBodyDatabases },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.databases)) {
      $dara.Model.validateArray(this.databases);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedDatabasesForUserResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListAuthorizedDatabasesForUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListAuthorizedDatabasesForUserResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedInstancesForUserRequest extends $dara.Model {
  /**
   * @example
   * MySQL
   */
  dbType?: string;
  /**
   * @example
   * product
   */
  envType?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: string;
  /**
   * @example
   * 20
   */
  pageSize?: string;
  /**
   * @example
   * policy_test
   */
  searchKey?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 51****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      envType: 'EnvType',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      searchKey: 'SearchKey',
      tid: 'Tid',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      envType: 'string',
      pageNumber: 'string',
      pageSize: 'string',
      searchKey: 'string',
      tid: 'number',
      userId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedInstancesForUserResponseBody extends $dara.Model {
  instances?: ListAuthorizedInstancesForUserResponseBodyInstances[];
  /**
   * @example
   * B7DB89CC-017D-5503-8953-38FFE241A618
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      instances: 'Instances',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instances: { 'type': 'array', 'itemType': ListAuthorizedInstancesForUserResponseBodyInstances },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.instances)) {
      $dara.Model.validateArray(this.instances);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedInstancesForUserResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListAuthorizedInstancesForUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListAuthorizedInstancesForUserResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedUsersForDatabaseRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 135***
   */
  dbId?: string;
  /**
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @example
   * 1
   */
  pageNumber?: string;
  /**
   * @example
   * 20
   */
  pageSize?: string;
  /**
   * @example
   * poc_test
   */
  searchKey?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      logic: 'Logic',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      searchKey: 'SearchKey',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'string',
      logic: 'boolean',
      pageNumber: 'string',
      pageSize: 'string',
      searchKey: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedUsersForDatabaseResponseBody extends $dara.Model {
  /**
   * @example
   * FE8EE2F1-4880-46BC-A704-5CF63EAF9A04
   */
  requestId?: string;
  users?: ListAuthorizedUsersForDatabaseResponseBodyUsers[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      users: 'Users',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      users: { 'type': 'array', 'itemType': ListAuthorizedUsersForDatabaseResponseBodyUsers },
    };
  }

  validate() {
    if(Array.isArray(this.users)) {
      $dara.Model.validateArray(this.users);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedUsersForDatabaseResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListAuthorizedUsersForDatabaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListAuthorizedUsersForDatabaseResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedUsersForInstanceRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174****
   */
  instanceId?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: string;
  /**
   * @example
   * 20
   */
  pageSize?: string;
  /**
   * @example
   * poc_test
   */
  searchKey?: string;
  /**
   * @example
   * 3****
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      searchKey: 'SearchKey',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pageNumber: 'string',
      pageSize: 'string',
      searchKey: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedUsersForInstanceResponseBody extends $dara.Model {
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  users?: ListAuthorizedUsersForInstanceResponseBodyUsers[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      users: 'Users',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      users: { 'type': 'array', 'itemType': ListAuthorizedUsersForInstanceResponseBodyUsers },
    };
  }

  validate() {
    if(Array.isArray(this.users)) {
      $dara.Model.validateArray(this.users);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthorizedUsersForInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListAuthorizedUsersForInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListAuthorizedUsersForInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListClassificationTemplatesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListClassificationTemplatesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 90260530-565C-42B9-A6E8-893481FE6AB6
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The list of templates.
   */
  templateList?: ListClassificationTemplatesResponseBodyTemplateList[];
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      templateList: 'TemplateList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      templateList: { 'type': 'array', 'itemType': ListClassificationTemplatesResponseBodyTemplateList },
    };
  }

  validate() {
    if(Array.isArray(this.templateList)) {
      $dara.Model.validateArray(this.templateList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListClassificationTemplatesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListClassificationTemplatesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListClassificationTemplatesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListColumnsRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is a physical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The ID of the table. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to obtain the table ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 39281****
   */
  tableId?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      logic: 'Logic',
      tableId: 'TableId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logic: 'boolean',
      tableId: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListColumnsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details about columns.
   */
  columnList?: ListColumnsResponseBodyColumnList;
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0AD9AC55-5873-474A-9F33-4285806A3619
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      columnList: 'ColumnList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnList: ListColumnsResponseBodyColumnList,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.columnList && typeof (this.columnList as any).validate === 'function') {
      (this.columnList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListColumnsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListColumnsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListColumnsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDAGVersionsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the ID of the task flow.
   * 
   * This parameter is required.
   * 
   * @example
   * 7***
   */
  dagId?: number;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageIndex?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * This parameter is required.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      pageIndex: 'number',
      pageSize: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDAGVersionsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The information about the published versions.
   */
  dagVersionList?: ListDAGVersionsResponseBodyDagVersionList;
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C7775630-7901-51B9-8782-9B585EC0799A
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      dagVersionList: 'DagVersionList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagVersionList: ListDAGVersionsResponseBodyDagVersionList,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.dagVersionList && typeof (this.dagVersionList as any).validate === 'function') {
      (this.dagVersionList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDAGVersionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDAGVersionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDAGVersionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDBTaskSQLJobRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the SQL task group. You can call the [GetStructSyncJobDetail](https://help.aliyun.com/document_detail/206160.html) operation to obtain this parameter.
   * 
   * This parameter is required.
   * 
   * @example
   * 1324235
   */
  DBTaskGroupId?: number;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      DBTaskGroupId: 'DBTaskGroupId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      DBTaskGroupId: 'number',
      pageNumber: 'number',
      pageSize: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDBTaskSQLJobResponseBody extends $dara.Model {
  /**
   * @remarks
   * The list of the SQL tasks.
   */
  DBTaskSQLJobList?: ListDBTaskSQLJobResponseBodyDBTaskSQLJobList[];
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * F6C47680-8D2D-43A4-8902-F2740D71A398
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of the SQL tasks.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      DBTaskSQLJobList: 'DBTaskSQLJobList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      DBTaskSQLJobList: { 'type': 'array', 'itemType': ListDBTaskSQLJobResponseBodyDBTaskSQLJobList },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.DBTaskSQLJobList)) {
      $dara.Model.validateArray(this.DBTaskSQLJobList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDBTaskSQLJobResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDBTaskSQLJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDBTaskSQLJobResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDBTaskSQLJobDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the SQL task. You can call the [ListDBTaskSQLJob](https://help.aliyun.com/document_detail/207049.html) operation to query the SQL task ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 1276****
   */
  jobId?: number;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      jobId: 'JobId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      jobId: 'number',
      pageNumber: 'number',
      pageSize: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDBTaskSQLJobDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of SQL tasks.
   */
  DBTaskSQLJobDetailList?: ListDBTaskSQLJobDetailResponseBodyDBTaskSQLJobDetailList[];
  /**
   * @remarks
   * The error code that is returned.
   * 
   * @example
   * MissingJobId
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned.
   * 
   * @example
   * JobId is mandatory for this action.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 3F044E33-FE09-58F1-8C61-A0F612EC****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of SQL tasks.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      DBTaskSQLJobDetailList: 'DBTaskSQLJobDetailList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      DBTaskSQLJobDetailList: { 'type': 'array', 'itemType': ListDBTaskSQLJobDetailResponseBodyDBTaskSQLJobDetailList },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.DBTaskSQLJobDetailList)) {
      $dara.Model.validateArray(this.DBTaskSQLJobDetailList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDBTaskSQLJobDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDBTaskSQLJobDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDBTaskSQLJobDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDDLPublishRecordsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * > You can create a schema design ticket in the Data Management (DMS) console. For more information, see [Design schemas](https://help.aliyun.com/document_detail/69711.html). You can also call the [CreateOrder](https://help.aliyun.com/document_detail/144649.html) operation to create a schema design ticket and obtain the ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 3214325
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, log on to the DMS console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDDLPublishRecordsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the publishing records.
   */
  DDLPublishRecordList?: ListDDLPublishRecordsResponseBodyDDLPublishRecordList[];
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * A1549FB0-D4B8-4140-919F-17322C1072B8
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      DDLPublishRecordList: 'DDLPublishRecordList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      DDLPublishRecordList: { 'type': 'array', 'itemType': ListDDLPublishRecordsResponseBodyDDLPublishRecordList },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.DDLPublishRecordList)) {
      $dara.Model.validateArray(this.DDLPublishRecordList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDDLPublishRecordsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDDLPublishRecordsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDDLPublishRecordsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataCorrectPreCheckDBRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket for the data change.
   * 
   * This parameter is required.
   * 
   * @example
   * 432****
   */
  orderId?: number;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * Valid values: an integer that is greater than 0.
   * 
   * Default value: 1.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the ID of the tenant.
   * 
   * @example
   * 4321****
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      pageNumber: 'number',
      pageSize: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataCorrectPreCheckDBResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The information about the databases that are involved in the precheck.
   */
  preCheckDBList?: ListDataCorrectPreCheckDBResponseBodyPreCheckDBList[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 95A972AF-FAED-4768-9360-7C0DF5D594D0
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      preCheckDBList: 'PreCheckDBList',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      preCheckDBList: { 'type': 'array', 'itemType': ListDataCorrectPreCheckDBResponseBodyPreCheckDBList },
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.preCheckDBList)) {
      $dara.Model.validateArray(this.preCheckDBList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataCorrectPreCheckDBResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDataCorrectPreCheckDBResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDataCorrectPreCheckDBResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataCorrectPreCheckSQLRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the database. The database can be a physical database or a logical database.
   * 
   * *   To query the ID of a physical database, call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
   * *   To query the ID of a logical database, call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
   * 
   * @example
   * 1930****
   */
  dbId?: number;
  /**
   * @remarks
   * The ID of the data change ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the data change ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 453****
   */
  orderId?: number;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      orderId: 'OrderId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'number',
      orderId: 'number',
      pageNumber: 'number',
      pageSize: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataCorrectPreCheckSQLResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The precheck information about SQL statements.
   */
  preCheckSQLList?: ListDataCorrectPreCheckSQLResponseBodyPreCheckSQLList[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 31853A2B-DC9D-5B39-8492-D2AC8BCF550E
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      preCheckSQLList: 'PreCheckSQLList',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      preCheckSQLList: { 'type': 'array', 'itemType': ListDataCorrectPreCheckSQLResponseBodyPreCheckSQLList },
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.preCheckSQLList)) {
      $dara.Model.validateArray(this.preCheckSQLList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataCorrectPreCheckSQLResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDataCorrectPreCheckSQLResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDataCorrectPreCheckSQLResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataImportSQLPreCheckDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 11****
   */
  orderId?: number;
  /**
   * @remarks
   * The page number. Pages start from page 1.
   * 
   * @example
   * 1
   */
  pageNumer?: number;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The type of the SQL statement. Valid values:
   * 
   * *   **SELECT**
   * *   **INSERT**
   * *   **DELETE**
   * *   **CREATE_TABLE**
   * 
   * > You can log on to the Data Management (DMS) console and choose **Security and Specifications** > **Operation Audit** in the top navigation bar to view more types of SQL statements.
   * 
   * @example
   * INSERT
   */
  sqlType?: string;
  /**
   * @remarks
   * The state of the ticket. If you leave this parameter empty, all the states are queried by default. Valid values:
   * 
   * *   **INIT**: The ticket is being initialized.
   * *   **RUNNING**: The ticket is in progress.
   * *   **SUCCESS**: The ticket is complete.
   * *   **TIMEOUT**: The ticket is skipped due to timeout.
   * *   **FAIL**: The ticket fails.
   * 
   * @example
   * SUCCESS
   */
  statusCode?: string;
  /**
   * @remarks
   * The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      pageNumer: 'PageNumer',
      pageSize: 'PageSize',
      sqlType: 'SqlType',
      statusCode: 'StatusCode',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      pageNumer: 'number',
      pageSize: 'number',
      sqlType: 'string',
      statusCode: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataImportSQLPreCheckDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The precheck information of SQL statements.
   */
  preCheckSQLDetailList?: ListDataImportSQLPreCheckDetailResponseBodyPreCheckSQLDetailList[];
  /**
   * @remarks
   * The request ID. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * 31853A2B-DC9D-5B39-8492-D2AC8BCF550E
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The number of SQL statements.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      preCheckSQLDetailList: 'PreCheckSQLDetailList',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      preCheckSQLDetailList: { 'type': 'array', 'itemType': ListDataImportSQLPreCheckDetailResponseBodyPreCheckSQLDetailList },
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.preCheckSQLDetailList)) {
      $dara.Model.validateArray(this.preCheckSQLDetailList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataImportSQLPreCheckDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDataImportSQLPreCheckDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDataImportSQLPreCheckDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataImportSQLTypeRequest extends $dara.Model {
  /**
   * @remarks
   * The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 420****
   */
  orderId?: number;
  /**
   * @remarks
   * The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataImportSQLTypeResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * E5EE2B9E-2F95-57FA-B284-CB441CEE49D6
   */
  requestId?: string;
  /**
   * @remarks
   * The types of SQL statements.
   */
  sqlTypeResult?: string[];
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      sqlTypeResult: 'SqlTypeResult',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      sqlTypeResult: { 'type': 'array', 'itemType': 'string' },
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.sqlTypeResult)) {
      $dara.Model.validateArray(this.sqlTypeResult);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataImportSQLTypeResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDataImportSQLTypeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDataImportSQLTypeResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeCatalogRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   * 
   * **if can be null:**
   * false
   */
  dataRegion?: string;
  /**
   * @example
   * hive
   * 
   * **if can be null:**
   * false
   */
  searchKey?: string;
  /**
   * @example
   * 3
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dataRegion: 'DataRegion',
      searchKey: 'SearchKey',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataRegion: 'string',
      searchKey: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeCatalogResponseBody extends $dara.Model {
  cataLogList?: DLCatalog[];
  /**
   * @example
   * 400
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * E76DD2E7-EBAC-5724-B163-19AAC233F8F2
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      cataLogList: 'CataLogList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cataLogList: { 'type': 'array', 'itemType': DLCatalog },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.cataLogList)) {
      $dara.Model.validateArray(this.cataLogList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeCatalogResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDataLakeCatalogResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDataLakeCatalogResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeDatabaseRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   * 
   * **if can be null:**
   * false
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   * 
   * **if can be null:**
   * false
   */
  dataRegion?: string;
  maxResults?: number;
  nextToken?: string;
  /**
   * @example
   * default
   * 
   * **if can be null:**
   * false
   */
  searchKey?: string;
  /**
   * @example
   * 3
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      searchKey: 'SearchKey',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      maxResults: 'number',
      nextToken: 'string',
      searchKey: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeDatabaseResponseBody extends $dara.Model {
  databaseList?: DLDatabase[];
  /**
   * @example
   * 400
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  maxResults?: number;
  nextToken?: string;
  /**
   * @example
   * 4E1D2B4D-3E53-4ABC-999D-1D2520B3471A
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      databaseList: 'DatabaseList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databaseList: { 'type': 'array', 'itemType': DLDatabase },
      errorCode: 'string',
      errorMessage: 'string',
      maxResults: 'number',
      nextToken: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.databaseList)) {
      $dara.Model.validateArray(this.databaseList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeDatabaseResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDataLakeDatabaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDataLakeDatabaseResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakePartitionRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   * 
   * **if can be null:**
   * false
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @example
   * f056501ada12c1cc
   */
  nextToken?: string;
  partNames?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      partNames: 'PartNames',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      maxResults: 'number',
      nextToken: 'string',
      partNames: { 'type': 'array', 'itemType': 'string' },
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.partNames)) {
      $dara.Model.validateArray(this.partNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakePartitionShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   * 
   * **if can be null:**
   * false
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @example
   * f056501ada12c1cc
   */
  nextToken?: string;
  partNamesShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      partNamesShrink: 'PartNames',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      maxResults: 'number',
      nextToken: 'string',
      partNamesShrink: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakePartitionResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @example
   * NesLoKLEdIZrKhDT7I2gS****
   */
  nextToken?: string;
  partitionList?: DLPartition[];
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      partitionList: 'PartitionList',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      maxResults: 'number',
      nextToken: 'string',
      partitionList: { 'type': 'array', 'itemType': DLPartition },
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.partitionList)) {
      $dara.Model.validateArray(this.partitionList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakePartitionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDataLakePartitionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDataLakePartitionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakePartitionByFilterRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   * 
   * **if can be null:**
   * false
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ds>20241201
   */
  filter?: string;
  /**
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @example
   * f056501ada12c1cc
   */
  nextToken?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      filter: 'Filter',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      filter: 'string',
      maxResults: 'number',
      nextToken: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakePartitionByFilterResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @example
   * NesLoKLEdIZrKhDT7I2gS****
   */
  nextToken?: string;
  partitionList?: DLPartition[];
  /**
   * @example
   * 427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      partitionList: 'PartitionList',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      maxResults: 'number',
      nextToken: 'string',
      partitionList: { 'type': 'array', 'itemType': DLPartition },
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.partitionList)) {
      $dara.Model.validateArray(this.partitionList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakePartitionByFilterResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDataLakePartitionByFilterResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDataLakePartitionByFilterResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakePartitionNameRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   * 
   * **if can be null:**
   * false
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @example
   * f056501ada12c1cc
   */
  nextToken?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * table_name
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      maxResults: 'number',
      nextToken: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakePartitionNameResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @example
   * NesLoKLEdIZrKhDT7I2gS****
   */
  nextToken?: string;
  partitionNameList?: string[];
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      partitionNameList: 'PartitionNameList',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      maxResults: 'number',
      nextToken: 'string',
      partitionNameList: { 'type': 'array', 'itemType': 'string' },
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.partitionNameList)) {
      $dara.Model.validateArray(this.partitionNameList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakePartitionNameResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDataLakePartitionNameResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDataLakePartitionNameResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeTableRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   * 
   * **if can be null:**
   * false
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @example
   * f056501ada12c1cc
   */
  nextToken?: string;
  /**
   * @example
   * .*
   */
  tableNamePattern?: string;
  /**
   * @example
   * MANAGED_TABLE
   */
  tableType?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      tableNamePattern: 'TableNamePattern',
      tableType: 'TableType',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      maxResults: 'number',
      nextToken: 'string',
      tableNamePattern: 'string',
      tableType: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeTableResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @example
   * NesLoKLEdIZrKhDT7I2gS****
   */
  nextToken?: string;
  /**
   * @example
   * 3D3FB827-E667-50DB-AD59-C83F8237FECB
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  tableList?: DLTable[];
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      requestId: 'RequestId',
      success: 'Success',
      tableList: 'TableList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      maxResults: 'number',
      nextToken: 'string',
      requestId: 'string',
      success: 'boolean',
      tableList: { 'type': 'array', 'itemType': DLTable },
    };
  }

  validate() {
    if(Array.isArray(this.tableList)) {
      $dara.Model.validateArray(this.tableList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeTableResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDataLakeTableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDataLakeTableResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeTableNameRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   * 
   * **if can be null:**
   * false
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @example
   * f056501ada12c1cc
   */
  nextToken?: string;
  /**
   * @example
   * .*
   */
  tableNamePattern?: string;
  /**
   * @example
   * MANAGED_TABLE
   */
  tableType?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      tableNamePattern: 'TableNamePattern',
      tableType: 'TableType',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      maxResults: 'number',
      nextToken: 'string',
      tableNamePattern: 'string',
      tableType: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeTableNameResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @example
   * NesLoKLEdIZrKhDT7I2gS****
   */
  nextToken?: string;
  /**
   * @example
   * C5B8E84B-42B6-4374-AD5A-6264E1753378
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  tableNameList?: string[];
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      requestId: 'RequestId',
      success: 'Success',
      tableNameList: 'TableNameList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      maxResults: 'number',
      nextToken: 'string',
      requestId: 'string',
      success: 'boolean',
      tableNameList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.tableNameList)) {
      $dara.Model.validateArray(this.tableNameList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeTableNameResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDataLakeTableNameResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDataLakeTableNameResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeTablebaseInfoRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * 1
   */
  page?: number;
  /**
   * @example
   * 10
   */
  rows?: number;
  /**
   * @example
   * test
   */
  searchKey?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      page: 'Page',
      rows: 'Rows',
      searchKey: 'SearchKey',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      page: 'number',
      rows: 'number',
      searchKey: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeTablebaseInfoResponseBody extends $dara.Model {
  /**
   * @example
   * 400
   */
  errorCode?: string;
  /**
   * @example
   * Specified parameter Rows is not valid.
   */
  errorMessage?: string;
  /**
   * @example
   * B43AD641-49C2-5299-9E06-1B37EC1B****
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  tablebaseInfoList?: DLTablebaseInfo[];
  /**
   * @example
   * 100
   */
  totalCount?: string;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      tablebaseInfoList: 'TablebaseInfoList',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      tablebaseInfoList: { 'type': 'array', 'itemType': DLTablebaseInfo },
      totalCount: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.tablebaseInfoList)) {
      $dara.Model.validateArray(this.tablebaseInfoList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataLakeTablebaseInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDataLakeTablebaseInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDataLakeTablebaseInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabaseUserPermssionsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the database.
   * 
   * This parameter is required.
   * 
   * @example
   * 123
   */
  dbId?: string;
  /**
   * @remarks
   * Specifies whether the database is a logical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The type of the permission. Valid values:
   * 
   * *   DATABASE: permissions on databases
   * *   TABLE: permissions on tables
   * *   COLUMN: permissions on fields
   * 
   * This parameter is required.
   * 
   * @example
   * DATABASE
   */
  permType?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  /**
   * @remarks
   * The nickname of the user.
   * 
   * @example
   * search_user_name
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      logic: 'Logic',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      permType: 'PermType',
      tid: 'Tid',
      userName: 'UserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'string',
      logic: 'boolean',
      pageNumber: 'number',
      pageSize: 'number',
      permType: 'string',
      tid: 'number',
      userName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabaseUserPermssionsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 68075D06-7406-4887-83A7-F558A4D28C13
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  /**
   * @remarks
   * The details of user permissions.
   */
  userPermissions?: ListDatabaseUserPermssionsResponseBodyUserPermissions;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
      userPermissions: 'UserPermissions',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
      userPermissions: ListDatabaseUserPermssionsResponseBodyUserPermissions,
    };
  }

  validate() {
    if(this.userPermissions && typeof (this.userPermissions as any).validate === 'function') {
      (this.userPermissions as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabaseUserPermssionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDatabaseUserPermssionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDatabaseUserPermssionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabasesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the instance. The valid value is returned if you call the ListInstances operation. The instance ID is not the ID of the RDS instance.
   * 
   * This parameter is required.
   * 
   * @example
   * 12***
   */
  instanceId?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return per page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabasesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the databases.
   */
  databaseList?: ListDatabasesResponseBodyDatabaseList;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 5541CDA6-F674-435C-81BD-40C2FB926CE3
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The number of databases that belong to an instance.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      databaseList: 'DatabaseList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databaseList: ListDatabasesResponseBodyDatabaseList,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.databaseList && typeof (this.databaseList as any).validate === 'function') {
      (this.databaseList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDatabasesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDatabasesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDatabasesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDefaultSLARulesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 11****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDefaultSLARulesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 3E8AF4C3-A822-53A8-970C-059EE83BBD5A
   */
  requestId?: string;
  /**
   * @remarks
   * The list of SLA rules.
   */
  SLARuleList?: ListDefaultSLARulesResponseBodySLARuleList;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      SLARuleList: 'SLARuleList',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      SLARuleList: ListDefaultSLARulesResponseBodySLARuleList,
      success: 'boolean',
    };
  }

  validate() {
    if(this.SLARuleList && typeof (this.SLARuleList as any).validate === 'function') {
      (this.SLARuleList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDefaultSLARulesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDefaultSLARulesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDefaultSLARulesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDesensitizationRuleRequest extends $dara.Model {
  /**
   * @remarks
   * The type of the masking algorithm.
   * 
   * @example
   * MD5
   */
  funcType?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page. The maximum value is 100.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the masking rule.
   * 
   * @example
   * 1
   */
  ruleId?: number;
  /**
   * @remarks
   * The name of the masking rule.
   * 
   * @example
   * default desensitization rule test
   */
  ruleName?: string;
  /**
   * @remarks
   * The algorithm used for masking.
   * 
   * @example
   * HASH
   */
  ruleType?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      funcType: 'FuncType',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      ruleId: 'RuleId',
      ruleName: 'RuleName',
      ruleType: 'RuleType',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      funcType: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      ruleId: 'number',
      ruleName: 'string',
      ruleType: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDesensitizationRuleResponseBody extends $dara.Model {
  /**
   * @remarks
   * The list of masking rules.
   */
  desensitizationRuleList?: ListDesensitizationRuleResponseBodyDesensitizationRuleList[];
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * This parameter is required.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * E76DD2E7-EBAC-5724-B163-19AAC233F8F2
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   true: The request was successful.
   * *   false: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of entries returned. By default, this parameter is not returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      desensitizationRuleList: 'DesensitizationRuleList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desensitizationRuleList: { 'type': 'array', 'itemType': ListDesensitizationRuleResponseBodyDesensitizationRuleList },
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.desensitizationRuleList)) {
      $dara.Model.validateArray(this.desensitizationRuleList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDesensitizationRuleResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDesensitizationRuleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDesensitizationRuleResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListEffectiveOrdersRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListEffectiveOrdersResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The information about orders.
   */
  orderSummary?: ListEffectiveOrdersResponseBodyOrderSummary[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * A8FE12AA-300D-5FDF-806F-C2CB99161F32
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      orderSummary: 'OrderSummary',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      orderSummary: { 'type': 'array', 'itemType': ListEffectiveOrdersResponseBodyOrderSummary },
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.orderSummary)) {
      $dara.Model.validateArray(this.orderSummary);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListEffectiveOrdersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListEffectiveOrdersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListEffectiveOrdersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIndexesRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether the table is a logical table.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The ID of the table.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  tableId?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 0
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      logic: 'Logic',
      tableId: 'TableId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logic: 'boolean',
      tableId: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIndexesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The details of indexes.
   */
  indexList?: ListIndexesResponseBodyIndexList;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1F4DE2F1-5B47-462A-A973-E02EB7AF386B
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      indexList: 'IndexList',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      indexList: ListIndexesResponseBodyIndexList,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.indexList && typeof (this.indexList as any).validate === 'function') {
      (this.indexList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIndexesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListIndexesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListIndexesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstanceLoginAuditLogRequest extends $dara.Model {
  /**
   * @remarks
   * The end of the time range to query.
   * 
   * >  The end time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format. We recommend that you use the StartTime and EndTime parameters to specify a time range that does not exceed one day. This way, the returned entries can be displayed by page to increase query efficiency.
   * 
   * This parameter is required.
   * 
   * @example
   * 2021-11-18 18:00:00
   */
  endTime?: string;
  /**
   * @remarks
   * The alias of the user.
   * 
   * @example
   * test_OpUserName
   */
  opUserName?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page. Maximum value: 100.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The name of the database or instance whose logon records you want to query.
   * 
   * >  If SQL statements are executed at the instance level, you can set this parameter to an instance name. If SQL statements are executed at the database level, you can set this parameter to a database name.
   * 
   * @example
   * test_SearchName
   */
  searchName?: string;
  /**
   * @remarks
   * The beginning of the time range to query.
   * 
   * >  The start time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format.
   * 
   * This parameter is required.
   * 
   * @example
   * 2021-11-18 11:00:00
   */
  startTime?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      opUserName: 'OpUserName',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      searchName: 'SearchName',
      startTime: 'StartTime',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'string',
      opUserName: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      searchName: 'string',
      startTime: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstanceLoginAuditLogResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * InvalidPageSize
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * Specified parameter PageSize is not valid.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The logon records of the instance.
   */
  instanceLoginAuditLogList?: ListInstanceLoginAuditLogResponseBodyInstanceLoginAuditLogList;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 074CE7C9-4F9C-5B62-89BC-7B4914A3****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The number of entries returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      instanceLoginAuditLogList: 'InstanceLoginAuditLogList',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      instanceLoginAuditLogList: ListInstanceLoginAuditLogResponseBodyInstanceLoginAuditLogList,
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.instanceLoginAuditLogList && typeof (this.instanceLoginAuditLogList as any).validate === 'function') {
      (this.instanceLoginAuditLogList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstanceLoginAuditLogResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListInstanceLoginAuditLogResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListInstanceLoginAuditLogResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstanceUserPermissionsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the ID of the instance.
   * 
   * This parameter is required.
   * 
   * @example
   * 174****
   */
  instanceId?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 100
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The nickname of the user. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to query the nickname of the user.
   * 
   * >  The value of the NickName parameter is that of the UserName parameter.
   * 
   * @example
   * test_nick_name
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      tid: 'Tid',
      userName: 'UserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      tid: 'number',
      userName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstanceUserPermissionsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 7D162AAE-6501-5691-BF14-D7018F662895
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * - true: The request is successful.
   * - false: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of returned entries.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  /**
   * @remarks
   * The permissions of the user on the instance.
   */
  userPermissions?: ListInstanceUserPermissionsResponseBodyUserPermissions;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
      userPermissions: 'UserPermissions',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
      userPermissions: ListInstanceUserPermissionsResponseBodyUserPermissions,
    };
  }

  validate() {
    if(this.userPermissions && typeof (this.userPermissions as any).validate === 'function') {
      (this.userPermissions as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstanceUserPermissionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListInstanceUserPermissionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListInstanceUserPermissionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesRequest extends $dara.Model {
  /**
   * @remarks
   * The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * @example
   * MySQL
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment to which the database instance belongs. Valid values:
   * 
   * *   **product:** production environment
   * *   **dev**: development environment
   * *   **pre**: pre-release environment
   * *   **test**: test environment
   * *   **sit**: system integration testing (SIT) environment
   * *   **uat**: user acceptance testing (UAT) environment
   * *   **pet**: stress testing environment
   * *   **stag:** staging environment
   * 
   * @example
   * product
   */
  envType?: string;
  /**
   * @remarks
   * The source of the database instance. Valid values:
   * 
   * *   **PUBLIC_OWN**: a self-managed database instance that is deployed on the Internet
   * *   **RDS**: an ApsaraDB RDS instance
   * *   **ECS_OWN**: a self-managed database that is deployed on an Elastic Compute Service (ECS) instance
   * *   **VPC_IDC**: a self-managed database instance that is deployed in a data center connected over a virtual private cloud (VPC)
   * 
   * @example
   * RDS
   */
  instanceSource?: string;
  /**
   * @remarks
   * The status of the database instance. Valid values:
   * 
   * *   **NORMAL**
   * *   **DISABLE**
   * 
   * @example
   * NORMAL
   */
  instanceState?: string;
  /**
   * @remarks
   * The network type of the database instance. Valid values:
   * 
   * *   **CLASSIC:** classic network
   * *   **VPC:** VPC
   * 
   * @example
   * VPC
   */
  netType?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page. The number cannot exceed 100.
   * 
   * @example
   * 50
   */
  pageSize?: number;
  /**
   * @remarks
   * The keyword that is used to search for database instances.
   * 
   * @example
   * test
   */
  searchKey?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      envType: 'EnvType',
      instanceSource: 'InstanceSource',
      instanceState: 'InstanceState',
      netType: 'NetType',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      searchKey: 'SearchKey',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      envType: 'string',
      instanceSource: 'string',
      instanceState: 'string',
      netType: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      searchKey: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code that is returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The information about the database instances that are returned.
   */
  instanceList?: ListInstancesResponseBodyInstanceList;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B4B07137-F6AE-4756-8474-7F92BB6C4E04
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of database instances that are returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      instanceList: 'InstanceList',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      instanceList: ListInstancesResponseBodyInstanceList,
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.instanceList && typeof (this.instanceList as any).validate === 'function') {
      (this.instanceList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListInstancesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListInstancesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLhTaskFlowAndScenarioRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the workspace. You can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to obtain the workspace ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 24
   */
  spaceId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The ID of the user. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain the user ID.
   * 
   * @example
   * 51****
   */
  userId?: number;
  static names(): { [key: string]: string } {
    return {
      spaceId: 'SpaceId',
      tid: 'Tid',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      spaceId: 'number',
      tid: 'number',
      userId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLhTaskFlowAndScenarioResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The task flows in the default business scenario.
   */
  rawDAGList?: ListLhTaskFlowAndScenarioResponseBodyRawDAGList;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 48602B78-0DDF-414C-8688-70CAB6070115
   */
  requestId?: string;
  /**
   * @remarks
   * The task flows in other business scenarios.
   */
  scenarioDAGList?: ListLhTaskFlowAndScenarioResponseBodyScenarioDAGList;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * - **true**: The request is successful.
   * - **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      rawDAGList: 'RawDAGList',
      requestId: 'RequestId',
      scenarioDAGList: 'ScenarioDAGList',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      rawDAGList: ListLhTaskFlowAndScenarioResponseBodyRawDAGList,
      requestId: 'string',
      scenarioDAGList: ListLhTaskFlowAndScenarioResponseBodyScenarioDAGList,
      success: 'boolean',
    };
  }

  validate() {
    if(this.rawDAGList && typeof (this.rawDAGList as any).validate === 'function') {
      (this.rawDAGList as any).validate();
    }
    if(this.scenarioDAGList && typeof (this.scenarioDAGList as any).validate === 'function') {
      (this.scenarioDAGList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLhTaskFlowAndScenarioResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListLhTaskFlowAndScenarioResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListLhTaskFlowAndScenarioResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicDatabasesRequest extends $dara.Model {
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 50
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.
   * 
   * @example
   * 3422
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNumber: 'number',
      pageSize: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicDatabasesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code that is returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The details of logical databases.
   */
  logicDatabaseList?: ListLogicDatabasesResponseBodyLogicDatabaseList;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 8068AF82-8A1A-592C-AC2E-6B75338BAB87
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * - **true**: The request is successful.
   * - **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of logical databases.
   * 
   * @example
   * 7
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      logicDatabaseList: 'LogicDatabaseList',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      logicDatabaseList: ListLogicDatabasesResponseBodyLogicDatabaseList,
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.logicDatabaseList && typeof (this.logicDatabaseList as any).validate === 'function') {
      (this.logicDatabaseList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicDatabasesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListLogicDatabasesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListLogicDatabasesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicTableRouteConfigRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the logical table. You can call the [ListLogicTables](https://www.alibabacloud.com/help/en/data-management-service/latest/listlogictables) operation to query the ID of the logical table.
   * 
   * This parameter is required.
   * 
   * @example
   * 1****
   */
  tableId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      tableId: 'TableId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tableId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicTableRouteConfigResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * MissingTableId
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * TableId is mandatory for this action.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The routing algorithms.
   */
  logicTableRouteConfigList?: ListLogicTableRouteConfigResponseBodyLogicTableRouteConfigList;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 7C6A0D7D-B034-59F6-854C-32425AC6****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * - **true**: The request was successful.
   * - **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      logicTableRouteConfigList: 'LogicTableRouteConfigList',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      logicTableRouteConfigList: ListLogicTableRouteConfigResponseBodyLogicTableRouteConfigList,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.logicTableRouteConfigList && typeof (this.logicTableRouteConfigList as any).validate === 'function') {
      (this.logicTableRouteConfigList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicTableRouteConfigResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListLogicTableRouteConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListLogicTableRouteConfigResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicTablesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  databaseId?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * Specifies whether to return the GUID of the table.
   * 
   * @example
   * true
   */
  returnGuid?: boolean;
  /**
   * @remarks
   * The keyword that is used to search for the logical tables. Prefix match is supported.
   * 
   * @example
   * test
   */
  searchName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      databaseId: 'DatabaseId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      returnGuid: 'ReturnGuid',
      searchName: 'SearchName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databaseId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      returnGuid: 'boolean',
      searchName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicTablesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The details of the logical tables.
   */
  logicTableList?: ListLogicTablesResponseBodyLogicTableList;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * F1E6484F-9DF1-4406-9BDE-0861C4629B69
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of logical tables that meet the query conditions.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      logicTableList: 'LogicTableList',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      logicTableList: ListLogicTablesResponseBodyLogicTableList,
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.logicTableList && typeof (this.logicTableList as any).validate === 'function') {
      (this.logicTableList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogicTablesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListLogicTablesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListLogicTablesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOrdersRequest extends $dara.Model {
  /**
   * @remarks
   * The end of the time range to query.
   * 
   * @example
   * 2022-04-09 11:00:00
   */
  endTime?: string;
  /**
   * @remarks
   * The scope of the tickets that you want to query. Valid values:
   * 
   * *   **AS_ADMIN**: all tickets.
   * *   **AS_COMMITTER**: the tickets that are submitted by the current user.
   * *   **AS_HANDLER**: the tickets to be processed by the current user.
   * *   **AS_OWNER**: the tickets that are processed by the current user.
   * *   **AS_Related**: the tickets that are related to the current user.
   * 
   * @example
   * AS_ADMIN
   */
  orderResultType?: string;
  /**
   * @remarks
   * The status of the tickets that you want to query. Valid values:
   * 
   * *   **ALL**: queries the tickets of all statuses.
   * *   **FINISHED**: queries the tickets that are completed.
   * *   **RUNNING**: queries the tickets that are being processed.
   * 
   * @example
   * ALL
   */
  orderStatus?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The type of the tickets that you want to query. For more information, see [PluginType parameter](https://help.aliyun.com/document_detail/429109.html).
   * 
   * @example
   * DC_COMMON
   */
  pluginType?: string;
  /**
   * @remarks
   * The keyword that is used to query tickets.
   * 
   * @example
   * test
   */
  searchContent?: string;
  /**
   * @remarks
   * The time condition based on which you want to query tickets. Valid values:
   * 
   * *   **CREATE_TIME**: the time when a ticket was created.
   * *   **MODIFY_TIME**: the time when a ticket was last modified.
   * 
   * @example
   * CREATE_TIME
   */
  searchDateType?: string;
  /**
   * @remarks
   * The beginning of the time range to query.
   * 
   * @example
   * 2022-04-08 11:00:00
   */
  startTime?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3000
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      orderResultType: 'OrderResultType',
      orderStatus: 'OrderStatus',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      pluginType: 'PluginType',
      searchContent: 'SearchContent',
      searchDateType: 'SearchDateType',
      startTime: 'StartTime',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'string',
      orderResultType: 'string',
      orderStatus: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      pluginType: 'string',
      searchContent: 'string',
      searchDateType: 'string',
      startTime: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOrdersResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The details about the tickets.
   */
  orders?: ListOrdersResponseBodyOrders;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * - **true**: The request was successful.
   * - **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of entries that are returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      orders: 'Orders',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      orders: ListOrdersResponseBodyOrders,
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.orders && typeof (this.orders as any).validate === 'function') {
      (this.orders as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOrdersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListOrdersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListOrdersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListProxiesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListProxiesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * User can not access to Tenant [123445]
   */
  errorMessage?: string;
  /**
   * @remarks
   * The proxies that are generated by the secure access proxy feature.
   */
  proxyList?: ListProxiesResponseBodyProxyList[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 5812180E-555F-5F90-BE4F-280576F4****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      proxyList: 'ProxyList',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      proxyList: { 'type': 'array', 'itemType': ListProxiesResponseBodyProxyList },
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.proxyList)) {
      $dara.Model.validateArray(this.proxyList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListProxiesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListProxiesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListProxiesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListProxyAccessesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the secure access proxy. 
   * 
   * >  You can call the [ListProxies](https://www.alibabacloud.com/help/en/data-management-service/latest/listproxies) operation to query the ID of the secure access proxy.
   * 
   * This parameter is required.
   * 
   * @example
   * 47
   */
  proxyId?: number;
  /**
   * @remarks
   * The ID of the tenant. 
   * 
   * >  You can call the [GetUserActiveTenant](https://www.alibabacloud.com/help/en/data-management-service/latest/getuseractivetenant) operation to query the ID of the tenant.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      proxyId: 'ProxyId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      proxyId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListProxyAccessesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * MissingProxyId
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * ProxyId is mandatory for this action.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The information about the users that are authorized to access the database instance by using the secure access proxy feature.
   */
  proxyAccessList?: ListProxyAccessesResponseBodyProxyAccessList[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * E53D178A-85E9-5E1F-88B6-3CB1FCF2****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * - **true**: The request was successful.
   * - **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      proxyAccessList: 'ProxyAccessList',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      proxyAccessList: { 'type': 'array', 'itemType': ListProxyAccessesResponseBodyProxyAccessList },
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.proxyAccessList)) {
      $dara.Model.validateArray(this.proxyAccessList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListProxyAccessesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListProxyAccessesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListProxyAccessesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListProxySQLExecAuditLogRequest extends $dara.Model {
  /**
   * @remarks
   * The end of the time range to query. The value of this parameter must be a timestamp that follows the UNIX time format.
   * 
   * This parameter is required.
   * 
   * @example
   * 1636962846000
   */
  endTime?: number;
  /**
   * @remarks
   * The execution status of the SQL statement. Valid values:
   * 
   * *   **FAIL**: The execution of the SQL statement fails.
   * *   **CANCEL**: The execution of the SQL statement is canceled.
   * *   **SUCCESS**: The SQL statement is executed.
   * 
   * @example
   * SUCCESS
   */
  execState?: string;
  /**
   * @remarks
   * The alias of the user.
   * 
   * @example
   * testNickName
   */
  opUserName?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page. Maximum values: 100.
   * 
   * @example
   * 100
   */
  pageSize?: number;
  /**
   * @remarks
   * The type of SQL statement. Valid values:
   * 
   * *   **SELECT**
   * *   **INSERT**
   * *   **DELETE**
   * *   **CREATE_TABLE**
   * 
   * >  You can choose Operation Audit > Secure Access Proxy in the top navigation bar of the DMS console to view more types of SQL statements.
   * 
   * @example
   * SELECT
   */
  SQLType?: string;
  /**
   * @remarks
   * The name of the database instance.
   * 
   * @example
   * test
   */
  searchName?: string;
  /**
   * @remarks
   * The beginning of the time range to query. The value of this parameter must be a timestamp that follows the UNIX time format.
   * 
   * This parameter is required.
   * 
   * @example
   * 1636876446000
   */
  startTime?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 14****
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      execState: 'ExecState',
      opUserName: 'OpUserName',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      SQLType: 'SQLType',
      searchName: 'SearchName',
      startTime: 'StartTime',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'number',
      execState: 'string',
      opUserName: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      SQLType: 'string',
      searchName: 'string',
      startTime: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListProxySQLExecAuditLogResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * InvalidStartTime
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * Specified parameter StartTime is not valid.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The audit information about the database instance that is provided by the secure access proxy feature.
   */
  proxySQLExecAuditLogList?: ListProxySQLExecAuditLogResponseBodyProxySQLExecAuditLogList;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 50ECB006-2C35-5FCA-91B9-01987A0B****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The number of entries returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      proxySQLExecAuditLogList: 'ProxySQLExecAuditLogList',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      proxySQLExecAuditLogList: ListProxySQLExecAuditLogResponseBodyProxySQLExecAuditLogList,
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.proxySQLExecAuditLogList && typeof (this.proxySQLExecAuditLogList as any).validate === 'function') {
      (this.proxySQLExecAuditLogList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListProxySQLExecAuditLogResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListProxySQLExecAuditLogResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListProxySQLExecAuditLogResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSLARulesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 11****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSLARulesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 3D1A59F4-EB2B-5D24-80A5-90C446A00DE2
   */
  requestId?: string;
  /**
   * @remarks
   * The list of SLA rules.
   */
  SLARuleList?: ListSLARulesResponseBodySLARuleList;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      SLARuleList: 'SLARuleList',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      SLARuleList: ListSLARulesResponseBodySLARuleList,
      success: 'boolean',
    };
  }

  validate() {
    if(this.SLARuleList && typeof (this.SLARuleList as any).validate === 'function') {
      (this.SLARuleList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSLARulesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListSLARulesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListSLARulesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSQLExecAuditLogRequest extends $dara.Model {
  /**
   * @remarks
   * The end of the time range to query.
   * 
   * >  The end time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format. We recommend that you use the StartTime and EndTime parameters to specify a time range that does not exceed one day. The returned entries can be displayed by page to improve query efficiency.
   * 
   * This parameter is required.
   * 
   * @example
   * 2021-11-08 11:00:00
   */
  endTime?: string;
  /**
   * @remarks
   * The execution status of the SQL statement. Valid values:
   * 
   * *   **FAIL**: The SQL statement fails to be executed.
   * *   **NOEXE**: The SQL statement has not been executed.
   * *   **RUNNING**: The SQL statement is being executed.
   * *   **CANCEL**: The execution of the SQL statement is canceled.
   * *   **SUCCESS**: The SQL statement is executed.
   * 
   * @example
   * SUCCESS
   */
  execState?: string;
  /**
   * @remarks
   * The nickname of the user who wrote the SQL statement.
   * 
   * @example
   * test_OpUserName
   */
  opUserName?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page. The value cannot exceed 100.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The name of the database or instance based on which you want to query SQL statements.
   * 
   * >  If the SQL statements to be queried are at the instance level, you can set this parameter to an instance name. If the SQL statements to be queried are at the database level, you can set this parameter to a database name.
   * 
   * @example
   * test_SearchName
   */
  searchName?: string;
  /**
   * @remarks
   * The type of the SQL statement. Valid values:
   * 
   * *   **SELECT**: the SQL statement that is used to query data.
   * *   **INSERT**: the SQL statement that is used to insert data.
   * *   **DELETE**: the SQL statement that is used to delete data.
   * *   **CREATE_TABLE**: the SQL statement that is used to create tables.
   * 
   * >  To view more types of SQL statements, log on to the DMS console and click Security and Specifications. In the left-side navigation pane, click **Operation Audit**. Then, you can view all supported types of SQL statements from the **SQL type** drop-down list.
   * 
   * @example
   * SELECT
   */
  sqlType?: string;
  /**
   * @remarks
   * The beginning of the time range to query.
   * 
   * >  The start time supports fuzzy match. Specify the time in the YYYY-MM-DD hh:mm:ss format.
   * 
   * This parameter is required.
   * 
   * @example
   * 2021-11-08 11:04:00
   */
  startTime?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      execState: 'ExecState',
      opUserName: 'OpUserName',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      searchName: 'SearchName',
      sqlType: 'SqlType',
      startTime: 'StartTime',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'string',
      execState: 'string',
      opUserName: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      searchName: 'string',
      sqlType: 'string',
      startTime: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSQLExecAuditLogResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * MissingStartTime
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * StartTime is mandatory for this action.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 39BC9C86-95AE-58F2-9862-A7C3D896****
   */
  requestId?: string;
  /**
   * @remarks
   * The entries returned.
   */
  SQLExecAuditLogList?: ListSQLExecAuditLogResponseBodySQLExecAuditLogList;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The number of entries returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      SQLExecAuditLogList: 'SQLExecAuditLogList',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      SQLExecAuditLogList: ListSQLExecAuditLogResponseBodySQLExecAuditLogList,
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.SQLExecAuditLogList && typeof (this.SQLExecAuditLogList as any).validate === 'function') {
      (this.SQLExecAuditLogList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSQLExecAuditLogResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListSQLExecAuditLogResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListSQLExecAuditLogResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSQLReviewOriginSQLRequest extends $dara.Model {
  /**
   * @remarks
   * The parameters that are used to filter SQL statements involved in the ticket.
   */
  orderActionDetail?: ListSQLReviewOriginSQLRequestOrderActionDetail;
  /**
   * @remarks
   * The ID of the SQL review ticket. You can call the [CreateSQLReviewOrder](https://help.aliyun.com/document_detail/257777.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 123321
   */
  orderId?: number;
  /**
   * @remarks
   * The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderActionDetail: 'OrderActionDetail',
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderActionDetail: ListSQLReviewOriginSQLRequestOrderActionDetail,
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    if(this.orderActionDetail && typeof (this.orderActionDetail as any).validate === 'function') {
      (this.orderActionDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSQLReviewOriginSQLShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The parameters that are used to filter SQL statements involved in the ticket.
   */
  orderActionDetailShrink?: string;
  /**
   * @remarks
   * The ID of the SQL review ticket. You can call the [CreateSQLReviewOrder](https://help.aliyun.com/document_detail/257777.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 123321
   */
  orderId?: number;
  /**
   * @remarks
   * The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderActionDetailShrink: 'OrderActionDetail',
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderActionDetailShrink: 'string',
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSQLReviewOriginSQLResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code that is returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The information about the parsed SQL statements.
   */
  originSQLList?: ListSQLReviewOriginSQLResponseBodyOriginSQLList[];
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values: Valid values:
   * 
   * *   true
   * *   false
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The number of SQL statements in the file.
   * 
   * @example
   * 10
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      originSQLList: 'OriginSQLList',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      originSQLList: { 'type': 'array', 'itemType': ListSQLReviewOriginSQLResponseBodyOriginSQLList },
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.originSQLList)) {
      $dara.Model.validateArray(this.originSQLList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSQLReviewOriginSQLResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListSQLReviewOriginSQLResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListSQLReviewOriginSQLResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScenariosRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScenariosResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 7FAD400F-7A5C-4193-8F9A-39D86C4F0231
   */
  requestId?: string;
  /**
   * @remarks
   * The details of the returned business scenarios.
   */
  scenarioList?: ListScenariosResponseBodyScenarioList[];
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      scenarioList: 'ScenarioList',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      scenarioList: { 'type': 'array', 'itemType': ListScenariosResponseBodyScenarioList },
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.scenarioList)) {
      $dara.Model.validateArray(this.scenarioList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScenariosResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListScenariosResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListScenariosResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnInfoRequest extends $dara.Model {
  /**
   * @example
   * test_column
   */
  columnName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 183****
   */
  instanceId?: number;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 100
   */
  pageSize?: number;
  /**
   * @example
   * test_schema
   */
  schemaName?: string;
  /**
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      schemaName: 'SchemaName',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      instanceId: 'number',
      pageNumber: 'number',
      pageSize: 'number',
      schemaName: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnInfoResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  sensitiveColumnList?: ListSensitiveColumnInfoResponseBodySensitiveColumnList;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      sensitiveColumnList: 'SensitiveColumnList',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      sensitiveColumnList: ListSensitiveColumnInfoResponseBodySensitiveColumnList,
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.sensitiveColumnList && typeof (this.sensitiveColumnList as any).validate === 'function') {
      (this.sensitiveColumnList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListSensitiveColumnInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListSensitiveColumnInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnsRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the field. You can call the [ListColumns](https://help.aliyun.com/document_detail/141870.html) operation to query the name of the field.
   * 
   * @example
   * test_column
   */
  columnName?: string;
  /**
   * @remarks
   * The ID of the database. You can call the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to query the ID of the database.
   * 
   * >  You can also call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to query the ID of the physical database and the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to query the ID of a logical database.
   * 
   * @example
   * 1860
   */
  dbId?: number;
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   true: The database is a logical database.
   * *   false: The database is a physical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 100
   */
  pageSize?: number;
  /**
   * @remarks
   * The name of the database. You can call the [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to query the name of the database.
   * 
   * >  You can also call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to query the name of a physical database and the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to query the name of a logical database.
   * 
   * @example
   * test_schema
   */
  schemaName?: string;
  /**
   * @remarks
   * The sensitivity level of the field. Valid values:
   * 
   * *   SENSITIVE: medium sensitivity level
   * *   CONFIDENTIAL: high sensitivity level
   * 
   * @example
   * SENSITIVE
   */
  securityLevel?: string;
  /**
   * @remarks
   * The name of the table. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to query the ID of the table.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * 3
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      dbId: 'DbId',
      logic: 'Logic',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      schemaName: 'SchemaName',
      securityLevel: 'SecurityLevel',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      dbId: 'number',
      logic: 'boolean',
      pageNumber: 'number',
      pageSize: 'number',
      schemaName: 'string',
      securityLevel: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 09D82FD7-F87F-59EF-AA82-AEF71B09E306
   */
  requestId?: string;
  /**
   * @remarks
   * The sensitive fields.
   */
  sensitiveColumnList?: ListSensitiveColumnsResponseBodySensitiveColumnList;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * - true: The request is successful.
   * - false: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of returned entries.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      sensitiveColumnList: 'SensitiveColumnList',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      sensitiveColumnList: ListSensitiveColumnsResponseBodySensitiveColumnList,
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.sensitiveColumnList && typeof (this.sensitiveColumnList as any).validate === 'function') {
      (this.sensitiveColumnList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListSensitiveColumnsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListSensitiveColumnsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnsDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the field. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the name of the field.
   * 
   * >  You can also call the [ListColumns](https://help.aliyun.com/document_detail/141870.html) operation to obtain the name of the field.
   * 
   * This parameter is required.
   * 
   * @example
   * ColumnName_test
   */
  columnName?: string;
  /**
   * @remarks
   * The ID of the database. The database can be a physical database or a logical database.
   * 
   * *   To obtain the ID of a physical database, call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
   * *   To obtain the ID of a logical database, call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
   * 
   * @example
   * 1860****
   */
  dbId?: number;
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is a physical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The name of the database. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the name of the database.
   * 
   * > * You can also call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the name of a physical database.
   * > * You can also call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the name of a logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * SchemaName_test
   */
  schemaName?: string;
  /**
   * @remarks
   * The name of the table. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the name of the table.
   * 
   * >  You can also call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to obtain the name of the table.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  tableName?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      dbId: 'DbId',
      logic: 'Logic',
      schemaName: 'SchemaName',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      dbId: 'number',
      logic: 'boolean',
      schemaName: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnsDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 7629888F-C9FB-4D16-A7D3-B443FE06FBD4
   */
  requestId?: string;
  /**
   * @remarks
   * The details of the sensitive field.
   */
  sensitiveColumnsDetailList?: ListSensitiveColumnsDetailResponseBodySensitiveColumnsDetailList;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * - **true**: The request was successful.
   * - **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      sensitiveColumnsDetailList: 'SensitiveColumnsDetailList',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      sensitiveColumnsDetailList: ListSensitiveColumnsDetailResponseBodySensitiveColumnsDetailList,
      success: 'boolean',
    };
  }

  validate() {
    if(this.sensitiveColumnsDetailList && typeof (this.sensitiveColumnsDetailList as any).validate === 'function') {
      (this.sensitiveColumnsDetailList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveColumnsDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListSensitiveColumnsDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListSensitiveColumnsDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveDataAuditLogRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the column that contains sensitive data.
   * 
   * @example
   * ExampleColumnName
   */
  columnName?: string;
  /**
   * @remarks
   * The name of the database that stores the sensitive data.
   * 
   * @example
   * ExampleDbName
   */
  dbName?: string;
  /**
   * @remarks
   * The end of the time range for which you want to query the audit logs for sensitive information. Specify the time in the yyyy-MM-DD HH:mm:ss format.
   * 
   * @example
   * 2022-11-18 11:00:00
   */
  endTime?: string;
  /**
   * @remarks
   * The function module whose audit logs you want to query for sensitive data. If you do not specify this parameter, all audit logs are queried. Valid values:
   * 
   * *   **SQL_CONSOLE**: data query
   * *   **SQL_CONSOLE_EXPORT**: query result export
   * *   **DATA_CHANGE**: data change
   * *   **DATA_EXPORT**: data export
   * 
   * @example
   * SQL_CONSOLE
   */
  moduleName?: string;
  /**
   * @remarks
   * The username of the requester.
   * 
   * @example
   * ExampleOpUserName
   */
  opUserName?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page. Example: 100
   * 
   * @example
   * 100
   */
  pageSize?: number;
  /**
   * @remarks
   * The beginning of the time range for which you want to query the audit logs for sensitive information. Specify the time in the yyyy-MM-DD HH:mm:ss format.
   * 
   * @example
   * 2022-11-18 10:00:00
   */
  startTime?: string;
  /**
   * @remarks
   * The name of the table that stores the sensitive data.
   * 
   * @example
   * ExampleTableName
   */
  tableName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      dbName: 'DbName',
      endTime: 'EndTime',
      moduleName: 'ModuleName',
      opUserName: 'OpUserName',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      startTime: 'StartTime',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      dbName: 'string',
      endTime: 'string',
      moduleName: 'string',
      opUserName: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      startTime: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveDataAuditLogResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * E0D21075-CD3E-4D98-8264-FD8AD04A63B6
   */
  requestId?: string;
  /**
   * @remarks
   * The audit logs for sensitive data.
   */
  sensitiveDataAuditLogList?: ListSensitiveDataAuditLogResponseBodySensitiveDataAuditLogList[];
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 100
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      sensitiveDataAuditLogList: 'SensitiveDataAuditLogList',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      sensitiveDataAuditLogList: { 'type': 'array', 'itemType': ListSensitiveDataAuditLogResponseBodySensitiveDataAuditLogList },
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.sensitiveDataAuditLogList)) {
      $dara.Model.validateArray(this.sensitiveDataAuditLogList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitiveDataAuditLogResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListSensitiveDataAuditLogResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListSensitiveDataAuditLogResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitivityLevelRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the classification template. You can call the [ListClassificationTemplates](https://help.aliyun.com/document_detail/460613.html) operation to query the ID of the classification template.
   * 
   * @example
   * 15**
   */
  templateId?: number;
  /**
   * @remarks
   * The type of the classification template. You can call the [ListClassificationTemplates](https://help.aliyun.com/document_detail/460613.html) operation to query the type of the classification template.
   * 
   * Valid values:
   * 
   * *   USER_DEFINE: a custom template.
   * *   INNER: a built-in template.
   * 
   * @example
   * INNER
   */
  templateType?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) in the topic "Manage DMS tenants."
   * 
   * @example
   * 20***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      templateId: 'TemplateId',
      templateType: 'TemplateType',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      templateId: 'number',
      templateType: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitivityLevelResponseBody extends $dara.Model {
  /**
   * @remarks
   * The status code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 4E1D2B4D-3E53-4ABC-999D-1D2520B3471A
   */
  requestId?: string;
  /**
   * @remarks
   * The sensitivity levels.
   */
  sensitivityLevelList?: ListSensitivityLevelResponseBodySensitivityLevelList[];
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      sensitivityLevelList: 'SensitivityLevelList',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      sensitivityLevelList: { 'type': 'array', 'itemType': ListSensitivityLevelResponseBodySensitivityLevelList },
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.sensitivityLevelList)) {
      $dara.Model.validateArray(this.sensitivityLevelList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSensitivityLevelResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListSensitivityLevelResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListSensitivityLevelResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListStandardGroupsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListStandardGroupsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * xxx
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 34E01EDD-6A16-4CF0-9541-C644D1BE01AA
   */
  requestId?: string;
  /**
   * @remarks
   * The security rule sets returned.
   */
  standardGroupList?: ListStandardGroupsResponseBodyStandardGroupList[];
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      standardGroupList: 'StandardGroupList',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      standardGroupList: { 'type': 'array', 'itemType': ListStandardGroupsResponseBodyStandardGroupList },
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.standardGroupList)) {
      $dara.Model.validateArray(this.standardGroupList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListStandardGroupsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListStandardGroupsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListStandardGroupsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTablesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the physical database. You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the ID of the physical database.
   * 
   * This parameter is required.
   * 
   * @example
   * 1860****
   */
  databaseId?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * Specifies whether to return the GUID of a table. Valid values:
   * 
   * *   **true**: returns the GUID of a table.
   * *   **false**: does not return the GUID of a table.
   * 
   * @example
   * true
   */
  returnGuid?: boolean;
  /**
   * @remarks
   * The name used to search for tables. Fuzzy search is supported.
   * 
   * @example
   * test
   */
  searchName?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      databaseId: 'DatabaseId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      returnGuid: 'ReturnGuid',
      searchName: 'SearchName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databaseId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      returnGuid: 'boolean',
      searchName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTablesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * B16FB618-5E96-4FFD-BB0D-490C890A4030
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The details of the tables.
   */
  tableList?: ListTablesResponseBodyTableList;
  /**
   * @remarks
   * The total number of tables that meet the query conditions.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      tableList: 'TableList',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      tableList: ListTablesResponseBodyTableList,
      totalCount: 'number',
    };
  }

  validate() {
    if(this.tableList && typeof (this.tableList as any).validate === 'function') {
      (this.tableList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTablesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListTablesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListTablesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4116147E-C628-5816-8779-8EEAF8E973F4
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The information about the task flows returned.
   */
  taskFlowList?: ListTaskFlowResponseBodyTaskFlowList;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      taskFlowList: 'TaskFlowList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      taskFlowList: ListTaskFlowResponseBodyTaskFlowList,
    };
  }

  validate() {
    if(this.taskFlowList && typeof (this.taskFlowList as any).validate === 'function') {
      (this.taskFlowList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListTaskFlowResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListTaskFlowResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowConstantsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 3****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowConstantsResponseBody extends $dara.Model {
  /**
   * @remarks
   * A list of constant key-value pairs for the task flow.
   */
  dagConstants?: ListTaskFlowConstantsResponseBodyDagConstants;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * 028BF827-3801-5869-8548-F4A039256304
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      dagConstants: 'DagConstants',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagConstants: ListTaskFlowConstantsResponseBodyDagConstants,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.dagConstants && typeof (this.dagConstants as any).validate === 'function') {
      (this.dagConstants as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowConstantsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListTaskFlowConstantsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListTaskFlowConstantsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowCooperatorsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowCooperatorsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The users that are involved in the task flow.
   */
  cooperatorList?: ListTaskFlowCooperatorsResponseBodyCooperatorList;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * 54C99C70-2DFF-5A8C-A252-EBAA1EB668EC
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      cooperatorList: 'CooperatorList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cooperatorList: ListTaskFlowCooperatorsResponseBodyCooperatorList,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.cooperatorList && typeof (this.cooperatorList as any).validate === 'function') {
      (this.cooperatorList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowCooperatorsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListTaskFlowCooperatorsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListTaskFlowCooperatorsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowEdgesByConditionRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the task flow edge.
   * 
   * @example
   * 24***
   */
  id?: number;
  /**
   * @remarks
   * The ID of the end node on the edge.
   * 
   * @example
   * 44***
   */
  nodeEnd?: number;
  /**
   * @remarks
   * The ID of the start node on the edge.
   * 
   * @example
   * 44***
   */
  nodeFrom?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      id: 'Id',
      nodeEnd: 'NodeEnd',
      nodeFrom: 'NodeFrom',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      id: 'number',
      nodeEnd: 'number',
      nodeFrom: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowEdgesByConditionResponseBody extends $dara.Model {
  /**
   * @remarks
   * The list of task flow edges.
   */
  edges?: ListTaskFlowEdgesByConditionResponseBodyEdges;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * D86249CD-422F-5ACF-85BA-9187C986AE0B
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      edges: 'Edges',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      edges: ListTaskFlowEdgesByConditionResponseBodyEdges,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.edges && typeof (this.edges as any).validate === 'function') {
      (this.edges as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowEdgesByConditionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListTaskFlowEdgesByConditionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListTaskFlowEdgesByConditionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowInstanceRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the ID of the task flow.
   * 
   * This parameter is required.
   * 
   * @example
   * 7***
   */
  dagId?: number;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageIndex?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * This parameter is required.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The beginning of the time range to query the execution records of the task flow. Specify the time in the yyyy-MM-DD format.
   * 
   * @example
   * 2022-01-07
   */
  startTimeBegin?: string;
  /**
   * @remarks
   * The end of the time range to query the execution records of the task flow. Specify the time in the yyyy-MM-DD format.
   * 
   * @example
   * 2022-04-08
   */
  startTimeEnd?: string;
  /**
   * @remarks
   * The running status of the task node. Valid values:
   * 
   * - **0**: Waiting for scheduling
   * 
   * - **1**: Running
   * 
   * - **2**: Suspend
   * 
   * - **3**: Failed to run
   * 
   * - **4**: Run successfully
   * 
   * - **5**: Completed
   * 
   * @example
   * 3
   */
  status?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The mode in which the task flow is triggered. Valid values:
   * 
   * *   **0**: The task flow is automatically triggered based on periodic scheduling.
   * *   **1**: The task flow is manually triggered.
   * 
   * @example
   * 1
   */
  triggerType?: number;
  /**
   * @remarks
   * Adjust filter conditions:
   * 
   * - true: StartTimeBegin and StartTimeEnd are the time range for filtering services.
   * 
   * - false: StartTimeBegin and StartTimeEnd are the time range for the task to run.
   * 
   * @example
   * true
   */
  useBizDate?: boolean;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
      startTimeBegin: 'StartTimeBegin',
      startTimeEnd: 'StartTimeEnd',
      status: 'Status',
      tid: 'Tid',
      triggerType: 'TriggerType',
      useBizDate: 'UseBizDate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      pageIndex: 'number',
      pageSize: 'number',
      startTimeBegin: 'string',
      startTimeEnd: 'string',
      status: 'number',
      tid: 'number',
      triggerType: 'number',
      useBizDate: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowInstanceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The information about the execution records returned.
   */
  DAGInstanceList?: ListTaskFlowInstanceResponseBodyDAGInstanceList;
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 8CFF2295-8249-5287-B888-DBD4F0D76CB0
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of execution records returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      DAGInstanceList: 'DAGInstanceList',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      DAGInstanceList: ListTaskFlowInstanceResponseBodyDAGInstanceList,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.DAGInstanceList && typeof (this.DAGInstanceList as any).validate === 'function') {
      (this.DAGInstanceList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListTaskFlowInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListTaskFlowInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowTimeVariablesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 11****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowTimeVariablesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * EC12A3BE-149F-5365-AF33-12CC8C963923
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The time variables for the task flow.
   */
  timeVariables?: ListTaskFlowTimeVariablesResponseBodyTimeVariables;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      timeVariables: 'TimeVariables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      timeVariables: ListTaskFlowTimeVariablesResponseBodyTimeVariables,
    };
  }

  validate() {
    if(this.timeVariables && typeof (this.timeVariables as any).validate === 'function') {
      (this.timeVariables as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowTimeVariablesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListTaskFlowTimeVariablesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListTaskFlowTimeVariablesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowsByPageRequest extends $dara.Model {
  /**
   * @remarks
   * Filter condition, task flow ID list.
   */
  dagIdList?: number[];
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageIndex?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * Filter condition, application scenario ID.
   * 
   * @example
   * 12***
   */
  scenarioId?: number;
  /**
   * @remarks
   * The keyword that is used to search for task flow names.
   * 
   * @example
   * Test node
   */
  searchKey?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagIdList: 'DagIdList',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
      scenarioId: 'ScenarioId',
      searchKey: 'SearchKey',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagIdList: { 'type': 'array', 'itemType': 'number' },
      pageIndex: 'number',
      pageSize: 'number',
      scenarioId: 'number',
      searchKey: 'string',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.dagIdList)) {
      $dara.Model.validateArray(this.dagIdList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowsByPageShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * Filter condition, task flow ID list.
   */
  dagIdListShrink?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageIndex?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * Filter condition, application scenario ID.
   * 
   * @example
   * 12***
   */
  scenarioId?: number;
  /**
   * @remarks
   * The keyword that is used to search for task flow names.
   * 
   * @example
   * Test node
   */
  searchKey?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagIdListShrink: 'DagIdList',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
      scenarioId: 'ScenarioId',
      searchKey: 'SearchKey',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagIdListShrink: 'string',
      pageIndex: 'number',
      pageSize: 'number',
      scenarioId: 'number',
      searchKey: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowsByPageResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 6CB28697-BFE2-5739-9228-3971990E982C
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The details of the returned task flows.
   */
  taskFlowList?: ListTaskFlowsByPageResponseBodyTaskFlowList;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 24
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      taskFlowList: 'TaskFlowList',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      taskFlowList: ListTaskFlowsByPageResponseBodyTaskFlowList,
      totalCount: 'number',
    };
  }

  validate() {
    if(this.taskFlowList && typeof (this.taskFlowList as any).validate === 'function') {
      (this.taskFlowList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTaskFlowsByPageResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListTaskFlowsByPageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListTaskFlowsByPageResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTasksInTaskFlowRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 32***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTasksInTaskFlowResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * 8B36B063-6B7D-5595-9FCF-3844B7B7ACD4
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The tasks in the task flow.
   */
  tasks?: ListTasksInTaskFlowResponseBodyTasks;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      tasks: 'Tasks',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      tasks: ListTasksInTaskFlowResponseBodyTasks,
    };
  }

  validate() {
    if(this.tasks && typeof (this.tasks as any).validate === 'function') {
      (this.tasks as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTasksInTaskFlowResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListTasksInTaskFlowResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListTasksInTaskFlowResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserPermissionsRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the database.
   * 
   * @example
   * db_name
   */
  databaseName?: string;
  /**
   * @remarks
   * The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * @example
   * polardb
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment to which the database belongs. Valid values:
   * 
   * *   product: production environment
   * *   dev: development environment
   * *   pre: staging environment
   * *   test: test environment
   * *   sit: SIT environment
   * *   uat: user acceptance testing (UAT) environment
   * *   pet: stress testing environment
   * *   stag: STAG environment
   * 
   * @example
   * dev
   */
  envType?: string;
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   true: The database is a logical database.
   * *   false: The database is a physical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 5
   */
  pageSize?: number;
  /**
   * @remarks
   * The permissions on a specific type of resources that you want to query. Valid values:
   * 
   * *   DATABASE: permissions on databases
   * *   TABLE: permissions on tables
   * *   COLUMN: permissions on fields
   * *   INSTANCE: permissions on instances
   * 
   * This parameter is required.
   * 
   * @example
   * DATABASE
   */
  permType?: string;
  /**
   * @remarks
   * The keyword used in the query. For example, if you want to query permissions on an instance, you can specify the endpoint of the instance, such as rm-bp144d5ky4l4r****.
   * 
   * @example
   * rm-bp144d5ky4l4r****
   */
  searchKey?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The ID of the user. You can call the [GetUser](https://help.aliyun.com/document_detail/147098.html) or [ListUsers](https://help.aliyun.com/document_detail/141938.html) operation to query the ID of the user.
   * 
   * >  The user ID is different from the ID of your Alibaba Cloud account.
   * 
   * This parameter is required.
   * 
   * @example
   * 51****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      databaseName: 'DatabaseName',
      dbType: 'DbType',
      envType: 'EnvType',
      logic: 'Logic',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      permType: 'PermType',
      searchKey: 'SearchKey',
      tid: 'Tid',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      databaseName: 'string',
      dbType: 'string',
      envType: 'string',
      logic: 'boolean',
      pageNumber: 'number',
      pageSize: 'number',
      permType: 'string',
      searchKey: 'string',
      tid: 'number',
      userId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserPermissionsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C51420E3-144A-4A94-B473-8662FCF4AD10
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * - true: The request is successful.
   * - false: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of entries that meet the query conditions.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  /**
   * @remarks
   * The details of the permissions that the user has.
   */
  userPermissions?: ListUserPermissionsResponseBodyUserPermissions;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
      userPermissions: 'UserPermissions',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
      userPermissions: ListUserPermissionsResponseBodyUserPermissions,
    };
  }

  validate() {
    if(this.userPermissions && typeof (this.userPermissions as any).validate === 'function') {
      (this.userPermissions as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserPermissionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListUserPermissionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListUserPermissionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserTenantsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserTenantsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * TenantNotExist
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * The specified tenant does not exist.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C478D9DA-3615-50F6-A2BC-7855AD65****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The details of the tenants that were returned.
   */
  tenantList?: ListUserTenantsResponseBodyTenantList[];
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      tenantList: 'TenantList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      tenantList: { 'type': 'array', 'itemType': ListUserTenantsResponseBodyTenantList },
    };
  }

  validate() {
    if(Array.isArray(this.tenantList)) {
      $dara.Model.validateArray(this.tenantList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserTenantsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListUserTenantsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListUserTenantsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUsersRequest extends $dara.Model {
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * **
   * 
   * Valid values: 10, 20, 50, and 100.**** Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The role that is assigned to the user. Valid values:
   * 
   * *   **USER**: a regular user.
   * *   **DBA** : a database administrator (DBA).
   * *   **ADMIN**: a Data Management (DMS) administrator.
   * *   **SECURITY_ADMIN**: a security administrator.
   * *   **STRUCT_READ_ONLY**: a schema read-only user.
   * 
   * >  To check your role, move the pointer over the profile picture in the upper-right corner of the DMS console.
   * 
   * @example
   * DBA
   */
  role?: string;
  /**
   * @remarks
   * The search keyword. Fuzzy match is supported.
   * 
   * @example
   * test
   */
  searchKey?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The status of the user. Valid values:
   * 
   * *   **NORMAL**: The user is normal.
   * *   **DISABLE**: The user is disabled.
   * *   **DELETE**: The user is deleted.
   * 
   * @example
   * NORMAL
   */
  userState?: string;
  static names(): { [key: string]: string } {
    return {
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      role: 'Role',
      searchKey: 'SearchKey',
      tid: 'Tid',
      userState: 'UserState',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNumber: 'number',
      pageSize: 'number',
      role: 'string',
      searchKey: 'string',
      tid: 'number',
      userState: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUsersResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * InvalidTid
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * Specified parameter Tid is not valid.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 69161997-6030-53BA-A333-DBEC83B732FF
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 3
   */
  totalCount?: number;
  /**
   * @remarks
   * The details of users.
   */
  userList?: ListUsersResponseBodyUserList;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
      userList: 'UserList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
      userList: ListUsersResponseBodyUserList,
    };
  }

  validate() {
    if(this.userList && typeof (this.userList as any).validate === 'function') {
      (this.userList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUsersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListUsersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListUsersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowNodesRequest extends $dara.Model {
  /**
   * @remarks
   * The name that is used to search for approval nodes.
   * 
   * @example
   * admin
   */
  searchName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      searchName: 'SearchName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      searchName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowNodesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * CFD8FE00-36D9-4C1B-940D-65A7B73D9066
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The details of approval nodes.
   */
  workflowNodes?: ListWorkFlowNodesResponseBodyWorkflowNodes;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      workflowNodes: 'WorkflowNodes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      workflowNodes: ListWorkFlowNodesResponseBodyWorkflowNodes,
    };
  }

  validate() {
    if(this.workflowNodes && typeof (this.workflowNodes as any).validate === 'function') {
      (this.workflowNodes as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowNodesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListWorkFlowNodesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListWorkFlowNodesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowTemplatesRequest extends $dara.Model {
  /**
   * @remarks
   * The name that is used to query approval templates.
   * 
   * @example
   * Admin
   */
  searchName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      searchName: 'SearchName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      searchName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowTemplatesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 41067071-0243-4AAB-B3CF-4DE6D54F53B4
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The approval templates.
   */
  workFlowTemplates?: ListWorkFlowTemplatesResponseBodyWorkFlowTemplates;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      workFlowTemplates: 'WorkFlowTemplates',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      workFlowTemplates: ListWorkFlowTemplatesResponseBodyWorkFlowTemplates,
    };
  }

  validate() {
    if(this.workFlowTemplates && typeof (this.workFlowTemplates as any).validate === 'function') {
      (this.workFlowTemplates as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWorkFlowTemplatesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListWorkFlowTemplatesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListWorkFlowTemplatesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MakeTaskFlowInstanceSuccessRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 7***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to query the execution record ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 47****
   */
  dagInstanceId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      dagInstanceId: 'DagInstanceId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      dagInstanceId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MakeTaskFlowInstanceSuccessResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 028BF827-3801-5869-8548-F4A039256304
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MakeTaskFlowInstanceSuccessResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: MakeTaskFlowInstanceSuccessResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: MakeTaskFlowInstanceSuccessResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDataCorrectExecSQLRequest extends $dara.Model {
  /**
   * @remarks
   * The new SQL script.
   * 
   * This parameter is required.
   * 
   * @example
   * update tb set id = 1 where id = 1;
   */
  execSQL?: string;
  /**
   * @remarks
   * The ID of the data change ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 4328****
   */
  orderId?: number;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 4****
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      execSQL: 'ExecSQL',
      orderId: 'OrderId',
      realLoginUserUid: 'RealLoginUserUid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      execSQL: 'string',
      orderId: 'number',
      realLoginUserUid: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDataCorrectExecSQLResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * InvalidOrderId
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * Specified parameter OrderId is not valid.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDataCorrectExecSQLResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDataCorrectExecSQLResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDataCorrectExecSQLResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesensitizationStrategyRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the field. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the field name.
   * 
   * >  You can also call the [ListColumns](https://help.aliyun.com/document_detail/141870.html) operation to obtain the field name.
   * 
   * This parameter is required.
   * 
   * @example
   * test_column
   */
  columnName?: string;
  /**
   * @remarks
   * The ID of the database. You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to obtain the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 123
   */
  dbId?: number;
  /**
   * @remarks
   * The desensitization algorithm of the field setting. The default value is false. The values are as follows:
   * 
   * - **true**: default desensitization algorithm.
   * 
   * - **false** :semi-desensitization algorithm.
   * 
   * @example
   * false
   */
  isDefault?: boolean;
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a physical database.
   * *   **false**: The database is a logical database.
   * 
   * This parameter is required.
   * 
   * @example
   * false
   */
  isLogic?: boolean;
  /**
   * @remarks
   * Specifies whether to reset the masking rule. Valid value:
   * 
   * *   **true**: Reset the masking rule.
   * *   **false**: Do not reset the masking rule. This is the default value.
   * 
   * @example
   * false
   */
  isReset?: boolean;
  /**
   * @remarks
   * The ID of the masking rule.
   * 
   * @example
   * 53
   */
  ruleId?: number;
  /**
   * @remarks
   * The name of the database. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the database name.
   * 
   * > 
   * 
   * *   If the database is a physical database, you can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the database name.
   * 
   * *   If the database is a logical database, you can call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation to obtain the name of the database.
   * 
   * This parameter is required.
   * 
   * @example
   * test_schema
   */
  schemaName?: string;
  /**
   * @remarks
   * The name of the table. You can call the [ListSensitiveColumns](https://help.aliyun.com/document_detail/188103.html) operation to obtain the table name.
   * 
   * >  You can also call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to obtain the table name.
   * 
   * This parameter is required.
   * 
   * @example
   * test_table
   */
  tableName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) in the topic "Manage DMS tenants."
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      dbId: 'DbId',
      isDefault: 'IsDefault',
      isLogic: 'IsLogic',
      isReset: 'IsReset',
      ruleId: 'RuleId',
      schemaName: 'SchemaName',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      dbId: 'number',
      isDefault: 'boolean',
      isLogic: 'boolean',
      isReset: 'boolean',
      ruleId: 'number',
      schemaName: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesensitizationStrategyResponseBody extends $dara.Model {
  /**
   * @remarks
   * The status code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 283C461F-11D8-48AA-B695-DF092DA32AF3
   */
  requestId?: string;
  /**
   * @remarks
   * The returned result.
   * 
   * @example
   * True
   */
  result?: boolean;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * false
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      result: 'Result',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      result: 'boolean',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesensitizationStrategyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDesensitizationStrategyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDesensitizationStrategyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyInstanceRequest extends $dara.Model {
  /**
   * @example
   * dblink_test
   */
  dataLinkName?: string;
  /**
   * @example
   * test***
   */
  databasePassword?: string;
  /**
   * @example
   * testsdb
   */
  databaseUser?: string;
  /**
   * @example
   * 27****
   */
  dbaId?: number;
  /**
   * @example
   * 2
   */
  ddlOnline?: number;
  /**
   * @example
   * i-2zei9gs1t7h8l7ac****
   */
  ecsInstanceId?: string;
  /**
   * @example
   * cn-hangzhou
   */
  ecsRegion?: string;
  /**
   * @example
   * Y
   */
  enableSellCommon?: string;
  /**
   * @example
   * Y
   */
  enableSellSitd?: string;
  /**
   * @example
   * NULL
   */
  enableSellStable?: string;
  /**
   * @example
   * Y
   */
  enableSellTrust?: string;
  /**
   * @example
   * dev
   */
  envType?: string;
  /**
   * @example
   * 86400
   */
  exportTimeout?: number;
  /**
   * @example
   * 192.XXX.0.56
   */
  host?: string;
  /**
   * @example
   * instance_test
   */
  instanceAlias?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 183****
   */
  instanceId?: string;
  /**
   * @example
   * RDS
   */
  instanceSource?: string;
  /**
   * @example
   * MySQL
   */
  instanceType?: string;
  /**
   * @example
   * VPC
   */
  networkType?: string;
  /**
   * @example
   * 3306
   */
  port?: number;
  /**
   * @example
   * 7200
   */
  queryTimeout?: number;
  safeRule?: string;
  /**
   * @example
   * testSid
   */
  sid?: string;
  /**
   * @example
   * false
   */
  skipTest?: boolean;
  /**
   * @example
   * 31***
   */
  templateId?: number;
  /**
   * @example
   * INNER
   */
  templateType?: string;
  /**
   * @example
   * 23****
   */
  tid?: number;
  /**
   * @example
   * 1
   */
  useDsql?: number;
  useSsl?: number;
  /**
   * @example
   * vpc-bp10wnlcmor****
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      dataLinkName: 'DataLinkName',
      databasePassword: 'DatabasePassword',
      databaseUser: 'DatabaseUser',
      dbaId: 'DbaId',
      ddlOnline: 'DdlOnline',
      ecsInstanceId: 'EcsInstanceId',
      ecsRegion: 'EcsRegion',
      enableSellCommon: 'EnableSellCommon',
      enableSellSitd: 'EnableSellSitd',
      enableSellStable: 'EnableSellStable',
      enableSellTrust: 'EnableSellTrust',
      envType: 'EnvType',
      exportTimeout: 'ExportTimeout',
      host: 'Host',
      instanceAlias: 'InstanceAlias',
      instanceId: 'InstanceId',
      instanceSource: 'InstanceSource',
      instanceType: 'InstanceType',
      networkType: 'NetworkType',
      port: 'Port',
      queryTimeout: 'QueryTimeout',
      safeRule: 'SafeRule',
      sid: 'Sid',
      skipTest: 'SkipTest',
      templateId: 'TemplateId',
      templateType: 'TemplateType',
      tid: 'Tid',
      useDsql: 'UseDsql',
      useSsl: 'UseSsl',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataLinkName: 'string',
      databasePassword: 'string',
      databaseUser: 'string',
      dbaId: 'number',
      ddlOnline: 'number',
      ecsInstanceId: 'string',
      ecsRegion: 'string',
      enableSellCommon: 'string',
      enableSellSitd: 'string',
      enableSellStable: 'string',
      enableSellTrust: 'string',
      envType: 'string',
      exportTimeout: 'number',
      host: 'string',
      instanceAlias: 'string',
      instanceId: 'string',
      instanceSource: 'string',
      instanceType: 'string',
      networkType: 'string',
      port: 'number',
      queryTimeout: 'number',
      safeRule: 'string',
      sid: 'string',
      skipTest: 'boolean',
      templateId: 'number',
      templateType: 'string',
      tid: 'number',
      useDsql: 'number',
      useSsl: 'number',
      vpcId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyInstanceResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MoveTaskFlowToScenarioRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 11****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the business scenario to which you want to migrate your task flow. If this parameter is set to the default value or a value that is less than or equal to 0, the task flow is migrated to the default business scenario.
   * 
   * @example
   * 1****
   */
  scenarioId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      scenarioId: 'ScenarioId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      scenarioId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MoveTaskFlowToScenarioResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * D85FD18C-4322-5D49-8C14-5A10E668F86C
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MoveTaskFlowToScenarioResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: MoveTaskFlowToScenarioResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: MoveTaskFlowToScenarioResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OfflineTaskFlowRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 7***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OfflineTaskFlowResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * A8FE12AA-300D-5FDF-806F-C2CB99161F32
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OfflineTaskFlowResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: OfflineTaskFlowResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: OfflineTaskFlowResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PauseDataCorrectSQLJobRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the SQL task. You can call the [GetDataCorrectTaskDetail](https://help.aliyun.com/document_detail/208481.html) or [ListDBTaskSQLJob](https://help.aliyun.com/document_detail/207049.html) operation to obtain the value of this parameter.
   * 
   * >  If Type is set to SINGLE, you must pass in the value of JobId to confirm the ID of the SQL task that you want to pause.
   * 
   * @example
   * 43253
   */
  jobId?: number;
  /**
   * @remarks
   * The ID of the data change ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the data change ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 43253
   */
  orderId?: number;
  /**
   * @remarks
   * The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 4325
   */
  tid?: number;
  /**
   * @remarks
   * The type of the pause operation. Valid values:
   * 
   * *   ALL: pauses all SQL tasks.
   * *   SINGLE: pauses a single SQL task.
   * 
   * This parameter is required.
   * 
   * @example
   * SINGLE
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      jobId: 'JobId',
      orderId: 'OrderId',
      tid: 'Tid',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      jobId: 'number',
      orderId: 'number',
      tid: 'number',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PauseDataCorrectSQLJobResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code that is returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 335C5BC8-490C-56EF-BDDE-94A4B53FEB72
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PauseDataCorrectSQLJobResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: PauseDataCorrectSQLJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: PauseDataCorrectSQLJobResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PauseDataExportJobRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1276****
   */
  jobId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 546****
   */
  orderId?: number;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      jobId: 'JobId',
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      jobId: 'number',
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PauseDataExportJobResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 7FAD400F-7A5C-4193-8F9A-39D86C4F0231
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PauseDataExportJobResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: PauseDataExportJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: PauseDataExportJobResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PreviewWorkflowRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1069****
   */
  orderId?: number;
  /**
   * @example
   * 23****
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PreviewWorkflowResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  workflowDetail?: PreviewWorkflowResponseBodyWorkflowDetail;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      workflowDetail: 'WorkflowDetail',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      workflowDetail: PreviewWorkflowResponseBodyWorkflowDetail,
    };
  }

  validate() {
    if(this.workflowDetail && typeof (this.workflowDetail as any).validate === 'function') {
      (this.workflowDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PreviewWorkflowResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: PreviewWorkflowResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: PreviewWorkflowResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PublishAndDeployTaskFlowRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 7***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The description of the version.
   * 
   * @example
   * vc_test
   */
  versionComments?: string;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
      versionComments: 'VersionComments',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
      versionComments: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PublishAndDeployTaskFlowResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the deployment record.
   * 
   * @example
   * 12**
   */
  deployId?: number;
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * Unknown server error
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 64E26249-B61F-51C6-B6DF-47EFF50128CC
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      deployId: 'DeployId',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deployId: 'number',
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PublishAndDeployTaskFlowResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: PublishAndDeployTaskFlowResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: PublishAndDeployTaskFlowResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataTrackResultDownloadStatusRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the download key, which is used to identify the parsing progress of data tracking logs. You can call the DownloadDataTrackResult operation to query the ID of the key.
   * 
   * This parameter is required.
   * 
   * @example
   * e23dd7ec-a19f-4a69-8eb3-8ffd26e6****
   */
  downloadKeyId?: string;
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 11****
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the ID of the tenant.
   * 
   * @example
   * 1***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      downloadKeyId: 'DownloadKeyId',
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downloadKeyId: 'string',
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataTrackResultDownloadStatusResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * The information about the download progress.
   */
  statusResult?: QueryDataTrackResultDownloadStatusResponseBodyStatusResult;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      statusResult: 'StatusResult',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      statusResult: QueryDataTrackResultDownloadStatusResponseBodyStatusResult,
      success: 'boolean',
    };
  }

  validate() {
    if(this.statusResult && typeof (this.statusResult as any).validate === 'function') {
      (this.statusResult as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataTrackResultDownloadStatusResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: QueryDataTrackResultDownloadStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: QueryDataTrackResultDownloadStatusResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReDeployLhDagVersionRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to obtain the ID of the task flow.
   * 
   * This parameter is required.
   * 
   * @example
   * 7***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the task flow version. You can call the [ListDAGVersions](https://help.aliyun.com/document_detail/424682.html) operation to obtain the ID of the task flow version.
   * 
   * @example
   * 2****
   */
  dagVersion?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the ID of the tenant.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      dagVersion: 'DagVersion',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      dagVersion: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReDeployLhDagVersionResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the deployment record.
   * 
   * @example
   * 15990
   */
  deployId?: number;
  /**
   * @remarks
   * The error code returned if the request fails.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request fails.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 035C92E0-2EAD-50E5-A6DD-550F5F73D7CE
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      deployId: 'DeployId',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deployId: 'number',
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReDeployLhDagVersionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ReDeployLhDagVersionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ReDeployLhDagVersionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReRunTaskFlowInstanceRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 7***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to query the execution record ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 47****
   */
  dagInstanceId?: number;
  /**
   * @remarks
   * The version number of the task flow. You can call the ListTaskFlowVersions operation to query the version number of the task flow.
   * 
   * @example
   * 2****
   */
  dagVersion?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      dagInstanceId: 'DagInstanceId',
      dagVersion: 'DagVersion',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      dagInstanceId: 'number',
      dagVersion: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReRunTaskFlowInstanceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 8CFF2295-8249-5287-B888-DBD4F0D76CB0
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   true: The request was successful.
   * *   false: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReRunTaskFlowInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ReRunTaskFlowInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ReRunTaskFlowInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RefundPayAsYouGoOrderRequest extends $dara.Model {
  /**
   * @remarks
   * The instance ID in the sales order.
   * 
   * This parameter is required.
   * 
   * @example
   * dms_pre_public_intl-sg-vf****
   */
  instanceId?: string;
  /**
   * @remarks
   * The order ID of the order for the pay-as-you-go resource. You can call the ListEffectiveOrders operation to query the order ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 2190037****
   */
  orderId?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      orderId: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RefundPayAsYouGoOrderResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C51420E3-144A-4A94-B473-8662FCF4AD10
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RefundPayAsYouGoOrderResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RefundPayAsYouGoOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RefundPayAsYouGoOrderResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RegisterInstanceRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the database link for cross-database queries.
   * 
   * > 
   * 
   * *   This parameter is required if UseDsql is set to 1.
   * 
   * *   The name can contain only lowercase letters and underscores (_).
   * 
   * *   The name must be unique within a tenant.
   * 
   * @example
   * dblink_test
   */
  dataLinkName?: string;
  /**
   * @remarks
   * The password that is used to log on to the database.
   * 
   * This parameter is required.
   * 
   * @example
   * ******
   */
  databasePassword?: string;
  /**
   * @remarks
   * The account that is used to log on to the database.
   * 
   * This parameter is required.
   * 
   * @example
   * dmstest
   */
  databaseUser?: string;
  /**
   * @remarks
   * The ID of the user who assumes the DBA role of the database instance. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the user ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 22275482072787****
   */
  dbaUid?: number;
  /**
   * @remarks
   * The ID of the user who assumes the DBA role of the database instance. If the user ID is a non-numeric value such as a role or an account, you can use this parameter to replace DbaUid.
   * 
   * @example
   * 22275482072787****
   */
  dbaUidByString?: string;
  /**
   * @remarks
   * Specifies whether to enable the lock-free schema change feature for the database instance. Valid values:
   * 
   * *   **0**: disables the lock-free schema change feature.
   * *   **1**: uses the online DDL of MySQL first.
   * *   **2**: uses the lock-free schema change feature of DMS first.
   * 
   * > Supported database types: ApsaraDB RDS for MySQL, PolarDB for MySQL, ApsaraDB MyBase for MySQL, and third-party MySQL databases.
   * 
   * @example
   * 2
   */
  ddlOnline?: number;
  /**
   * @remarks
   * The ID of the ECS instance on which the database instance is deployed.
   * 
   * > This parameter is required if the InstanceSource parameter is set to ECS_OWN.
   * 
   * @example
   * i-2zei9gs1t7h8l7ac****
   */
  ecsInstanceId?: string;
  /**
   * @remarks
   * The ID of the region in which the database instance resides.
   * 
   * > This parameter is required if the InstanceSource parameter is set to RDS, ECS_OWN, or VPC_IDC.
   * 
   * @example
   * cn-hangzhou
   */
  ecsRegion?: string;
  /**
   * @remarks
   * *   **Y:** enables the sensitive data protection feature
   * *   **NULL or other:** disables the sensitive data protection feature
   * 
   * @example
   * Y
   */
  enableSellSitd?: string;
  /**
   * @remarks
   * The type of the environment in which the database instance is deployed. Valid values:
   * 
   * *   product: production environment
   * *   dev: development environment
   * *   pre: pre-release environment
   * *   test: test environment
   * *   sit: system integration testing (SIT) environment
   * *   uat: user acceptance testing (UAT) environment
   * *   pet: stress testing environment
   * *   stag: staging environment
   * 
   * This parameter is required.
   * 
   * @example
   * product
   */
  envType?: string;
  /**
   * @remarks
   * The timeout period for exporting data from the database instance. Unit: seconds.
   * 
   * This parameter is required.
   * 
   * @example
   * 600
   */
  exportTimeout?: number;
  /**
   * @remarks
   * The host address that is used to connect to the database instance.
   * 
   * This parameter is required.
   * 
   * @example
   * 172.XX.XXX.254
   */
  host?: string;
  /**
   * @remarks
   * The alias of the database instance. Specify an alias that can help you identify the database instance in DMS.
   * 
   * This parameter is required.
   * 
   * @example
   * Test instance
   */
  instanceAlias?: string;
  /**
   * @remarks
   * The source of the database instance. Valid values:
   * 
   * *   **PUBLIC_OWN:** a self-managed database instance that is deployed on the Internet
   * *   **RDS:** an ApsaraDB RDS instance
   * *   **ECS_OWN:** a self-managed database that is deployed on an Elastic Compute Service (ECS) instance
   * *   **VPC_IDC:** a self-managed database instance that is deployed in a data center connected over a virtual private cloud (VPC)
   * 
   * This parameter is required.
   * 
   * @example
   * RDS
   */
  instanceSource?: string;
  /**
   * @remarks
   * The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * This parameter is required.
   * 
   * @example
   * MySQL
   */
  instanceType?: string;
  /**
   * @remarks
   * The network type of the database instance. Valid values:
   * 
   * *   **CLASSIC:** classic network
   * *   **VPC:** VPC
   * 
   * This parameter is required.
   * 
   * @example
   * VPC
   */
  networkType?: string;
  /**
   * @remarks
   * The port that is used to connect to the database instance.
   * 
   * This parameter is required.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The timeout period for querying data in the database instance. Unit: seconds.
   * 
   * This parameter is required.
   * 
   * @example
   * 60
   */
  queryTimeout?: number;
  /**
   * @remarks
   * The name of the security rule set (GroupName) for the database instance. You can call the [ListStandardGroups](https://help.aliyun.com/document_detail/417891.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the name of the security rule set.
   * 
   * This parameter is required.
   * 
   * @example
   * Test
   */
  safeRule?: string;
  /**
   * @remarks
   * The system ID (SID) of the database.
   * 
   * > This parameter is required if the InstanceType parameter is set to ORACLE.
   * 
   * @example
   * XXX
   */
  sid?: string;
  /**
   * @remarks
   * Specifies whether to skip the connectivity test. Valid values:
   * 
   * *   **true:** skips the connectivity test
   * *   **false:** does not skip the connectivity test
   * 
   * @example
   * true
   */
  skipTest?: boolean;
  /**
   * @remarks
   * The ID of the classification template. You can call the [ListClassificationTemplates](https://help.aliyun.com/document_detail/460613.html) operation to query the template ID.
   * 
   * @example
   * 31***
   */
  templateId?: number;
  /**
   * @remarks
   * The type of the classification template. You can call the [ListClassificationTemplates](https://help.aliyun.com/document_detail/460613.html) operation to query the template type.
   * 
   * @example
   * INNER
   */
  templateType?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * Specifies whether to enable the cross-database query feature for the database instance. Valid values:
   * 
   * *   **0**: disables the cross-database query feature.
   * *   **1**: enables the cross-database query feature.
   * 
   * > Supported database types: MySQL, SQL Server, PostgreSQL, PolarDB for PostgreSQL (compatible with Oracle), and ApsaraDB for Redis.
   * 
   * @example
   * 1
   */
  useDsql?: number;
  /**
   * @remarks
   * The ID of the VPC to which the database instance belongs.
   * 
   * > This parameter is required if the InstanceSource parameter is set to VPC_IDC.
   * 
   * @example
   * vpc-xxxxxxxxxxxxxxxxxxxxx
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      dataLinkName: 'DataLinkName',
      databasePassword: 'DatabasePassword',
      databaseUser: 'DatabaseUser',
      dbaUid: 'DbaUid',
      dbaUidByString: 'DbaUidByString',
      ddlOnline: 'DdlOnline',
      ecsInstanceId: 'EcsInstanceId',
      ecsRegion: 'EcsRegion',
      enableSellSitd: 'EnableSellSitd',
      envType: 'EnvType',
      exportTimeout: 'ExportTimeout',
      host: 'Host',
      instanceAlias: 'InstanceAlias',
      instanceSource: 'InstanceSource',
      instanceType: 'InstanceType',
      networkType: 'NetworkType',
      port: 'Port',
      queryTimeout: 'QueryTimeout',
      safeRule: 'SafeRule',
      sid: 'Sid',
      skipTest: 'SkipTest',
      templateId: 'TemplateId',
      templateType: 'TemplateType',
      tid: 'Tid',
      useDsql: 'UseDsql',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataLinkName: 'string',
      databasePassword: 'string',
      databaseUser: 'string',
      dbaUid: 'number',
      dbaUidByString: 'string',
      ddlOnline: 'number',
      ecsInstanceId: 'string',
      ecsRegion: 'string',
      enableSellSitd: 'string',
      envType: 'string',
      exportTimeout: 'number',
      host: 'string',
      instanceAlias: 'string',
      instanceSource: 'string',
      instanceType: 'string',
      networkType: 'string',
      port: 'number',
      queryTimeout: 'number',
      safeRule: 'string',
      sid: 'string',
      skipTest: 'boolean',
      templateId: 'number',
      templateType: 'string',
      tid: 'number',
      useDsql: 'number',
      vpcId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RegisterInstanceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * F4E2A94B-604F-43FF-93E7-F4EE3DCF412E
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true:** The request was successful.
   * *   **false:** The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RegisterInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RegisterInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RegisterInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RegisterUserRequest extends $dara.Model {
  /**
   * @remarks
   * The mobile number of the user.
   * 
   * @example
   * 130000000xx
   */
  mobile?: string;
  /**
   * @remarks
   * The role that you want to assign to the user. Valid values:
   * 
   * *   **USER**: a regular user role
   * *   **DBA**: a database administrator (DBA) role
   * *   **ADMIN**: a DMS administrator role
   * *   **SECURITY_ADMIN**: a security administrator role
   * 
   * >  If you do not specify this parameter, the regular user role is assigned to the user by default. You can assign one or more roles to the user. Separate multiple roles with commas (,).
   * 
   * @example
   * USER,DBA
   */
  roleNames?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To query ID of the tenant, move the pointer over the profile picture in the upper-right corner of the DMS console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * -1
   */
  tid?: number;
  /**
   * @remarks
   * The UID of the Alibaba Cloud account of the user that you want to register.
   * 
   * This parameter is required.
   * 
   * @example
   * 12345678
   */
  uid?: string;
  /**
   * @remarks
   * The nickname of the user.
   * 
   * @example
   * dmstest
   */
  userNick?: string;
  static names(): { [key: string]: string } {
    return {
      mobile: 'Mobile',
      roleNames: 'RoleNames',
      tid: 'Tid',
      uid: 'Uid',
      userNick: 'UserNick',
    };
  }

  static types(): { [key: string]: any } {
    return {
      mobile: 'string',
      roleNames: 'string',
      tid: 'number',
      uid: 'string',
      userNick: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RegisterUserResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * 403
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * The specified user already exists.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 34E01EDD-6A16-4CF0-9541-C644D1BE01AA
   */
  requestId?: string;
  /**
   * @remarks
   * *   true: The request was successful.
   * *   false: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RegisterUserResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RegisterUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RegisterUserResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveDataExportJobRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1276****
   */
  jobId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 420****
   */
  orderId?: number;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      jobId: 'JobId',
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      jobId: 'number',
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveDataExportJobResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveDataExportJobResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RemoveDataExportJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RemoveDataExportJobResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RestartDataCorrectSQLJobRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the SQL task. You can call the [GetDataCorrectTaskDetail](https://help.aliyun.com/document_detail/208481.html) and [ListDBTaskSQLJob](https://help.aliyun.com/document_detail/207049.html) operations to obtain the value of this parameter.
   * 
   * If the Type parameter is set to SINGLE, you must pass the value of the JobId parameter to confirm the ID of the SQL task that you want to rerun.
   * 
   * @example
   * 43253
   */
  jobId?: number;
  /**
   * @remarks
   * The ID of the data change ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the data change ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 453****
   */
  orderId?: number;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The type of the rerun operation. Valid values:
   * 
   * *   **ALL**: reruns all SQL tasks.
   * *   **SINGLE**: reruns a single SQL task.
   * 
   * This parameter is required.
   * 
   * @example
   * ALL
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      jobId: 'JobId',
      orderId: 'OrderId',
      realLoginUserUid: 'RealLoginUserUid',
      tid: 'Tid',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      jobId: 'number',
      orderId: 'number',
      realLoginUserUid: 'string',
      tid: 'number',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RestartDataCorrectSQLJobResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 809B52F2-CD2B-53DA-88C8-F7042787E673
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RestartDataCorrectSQLJobResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RestartDataCorrectSQLJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RestartDataCorrectSQLJobResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RestartDataExportJobRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1276****
   */
  jobId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 420****
   */
  orderId?: number;
  /**
   * @example
   * 23****
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      jobId: 'JobId',
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      jobId: 'number',
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RestartDataExportJobResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 7FAD400F-7A5C-4193-8F9A-39D86C4F0231
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RestartDataExportJobResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RestartDataExportJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RestartDataExportJobResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResumeTaskFlowInstanceRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 11****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to query the execution record ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 3****
   */
  dagInstanceId?: number;
  /**
   * @remarks
   * The version number of the task flow. You can call the [ListDAGVersions](https://help.aliyun.com/document_detail/424682.html) operation to query the version number.
   * 
   * @example
   * []
   */
  dagVersion?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      dagInstanceId: 'DagInstanceId',
      dagVersion: 'DagVersion',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      dagInstanceId: 'number',
      dagVersion: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResumeTaskFlowInstanceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 7FF2E325-763F-5E27-9157-C3CFA02F4CBF
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResumeTaskFlowInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ResumeTaskFlowInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ResumeTaskFlowInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RetryDataCorrectPreCheckRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the data change ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ID of the data change ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 414****
   */
  orderId?: number;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      realLoginUserUid: 'RealLoginUserUid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      realLoginUserUid: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RetryDataCorrectPreCheckResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * MissingOrderId
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned.
   * 
   * @example
   * OrderId is mandatory for this action.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 5BC081C7-5F77-5C92-9758-E1ED17CA****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RetryDataCorrectPreCheckResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RetryDataCorrectPreCheckResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RetryDataCorrectPreCheckResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RevokeTemplateAuthorityRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the permission template.
   * 
   * This parameter is required.
   * 
   * @example
   * 1563
   */
  templateId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The IDs of users from whom you want to revoke permissions by using a permission template.
   * 
   * This parameter is required.
   * 
   * @example
   * [12***,34***,56***]
   */
  userIds?: string;
  static names(): { [key: string]: string } {
    return {
      templateId: 'TemplateId',
      tid: 'Tid',
      userIds: 'UserIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      templateId: 'number',
      tid: 'number',
      userIds: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RevokeTemplateAuthorityResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C51420E3-144A-4A94-B473-8662FCF4AD10
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the permissions were revoked from the users.
   * 
   * @example
   * true
   */
  result?: boolean;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      result: 'Result',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      result: 'boolean',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RevokeTemplateAuthorityResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RevokeTemplateAuthorityResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RevokeTemplateAuthorityResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RevokeUserPermissionRequest extends $dara.Model {
  /**
   * @remarks
   * The database ID. The database can be a physical database or a logical database.
   * 
   * *   To query the ID of a physical database, call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
   * *   To query the ID of a logical database, call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) or [SearchDatabase](https://help.aliyun.com/document_detail/141876.html) operation.
   * 
   * @example
   * 1860****
   */
  dbId?: string;
  /**
   * @remarks
   * The type of the object on which you want to revoke permissions from a user. Valid values:
   * 
   * *   **INSTANCE**: instances.
   * *   **DATABASE**: physical databases.
   * *   **LOGIC_DATABASE**: logical databases.
   * *   **TABLE**: physical tables.
   * *   **LOGIC_TABLE**: logical tables.
   * 
   * This parameter is required.
   * 
   * @example
   * DATABASE
   */
  dsType?: string;
  /**
   * @remarks
   * The database instance ID. You must specify this parameter if you revoke a permission from the database instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the ID of the database instance.
   * 
   * @example
   * 174****
   */
  instanceId?: number;
  /**
   * @remarks
   * Specifies whether the database is a logical database. Valid values:
   * 
   * *   **true**: The database is a logical database.
   * *   **false**: The database is a physical database.
   * 
   * > 
   * 
   * *   If the database is a logical database, set this parameter to **true**.
   * 
   * *   If the database is a physical database, set this parameter to **false**.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The type of the permissions. Valid values:
   * 
   * *   **QUERY**: query permissions.
   * *   **EXPORT**: export permissions.
   * *   **CORRECT**: change permissions.
   * *   **LOGIN**: logon permissions.
   * *   **PERF**: query permissions on the performance details of an instance.
   * 
   * This parameter is required.
   * 
   * @example
   * CORRECT
   */
  permTypes?: string;
  /**
   * @remarks
   * The table ID. You must specify this parameter if you revoke a permission from the table. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to query the table ID.
   * 
   * @example
   * 13****
   */
  tableId?: string;
  /**
   * @remarks
   * The name of the table. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to query the table name.
   * 
   * @example
   * table_name
   */
  tableName?: string;
  /**
   * @remarks
   * The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The permission ID. You can call the [ListUserPermission](https://help.aliyun.com/document_detail/146957.html) operation to query the permission ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 774****
   */
  userAccessId?: string;
  /**
   * @remarks
   * The user ID. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to query the ID of the user.
   * 
   * This parameter is required.
   * 
   * @example
   * 51****
   */
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      dsType: 'DsType',
      instanceId: 'InstanceId',
      logic: 'Logic',
      permTypes: 'PermTypes',
      tableId: 'TableId',
      tableName: 'TableName',
      tid: 'Tid',
      userAccessId: 'UserAccessId',
      userId: 'UserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'string',
      dsType: 'string',
      instanceId: 'number',
      logic: 'boolean',
      permTypes: 'string',
      tableId: 'string',
      tableName: 'string',
      tid: 'number',
      userAccessId: 'string',
      userId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RevokeUserPermissionResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code that is returned.
   * 
   * @example
   * MissingUserId
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message that is returned.
   * 
   * @example
   * UserId is mandatory for this action.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * A99CD576-1E18-4E86-931E-C3CCE56D****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RevokeUserPermissionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RevokeUserPermissionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RevokeUserPermissionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDataTrackResultRequest extends $dara.Model {
  /**
   * @remarks
   * The condition to filter columns.
   */
  columnFilter?: SearchDataTrackResultRequestColumnFilter;
  /**
   * @remarks
   * The end time of the time range in which you want to track data operations. The time must be in the yyyy-MM-dd HH:mm:ss format.
   * 
   * @example
   * 2023-04-23 10:00:00
   */
  filterEndTime?: string;
  /**
   * @remarks
   * The start time of the time range in which you want to track data operations. The time must be in the yyyy-MM-dd HH:mm:ss format.
   * 
   * @example
   * 2023-04-23 00:00:00
   */
  filterStartTime?: string;
  /**
   * @remarks
   * The names of the tables for which you want to track data operations.
   */
  filterTableList?: string[];
  /**
   * @remarks
   * The types of data operations that you want to track.
   */
  filterTypeList?: string[];
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 420****
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 62***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      columnFilter: 'ColumnFilter',
      filterEndTime: 'FilterEndTime',
      filterStartTime: 'FilterStartTime',
      filterTableList: 'FilterTableList',
      filterTypeList: 'FilterTypeList',
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnFilter: SearchDataTrackResultRequestColumnFilter,
      filterEndTime: 'string',
      filterStartTime: 'string',
      filterTableList: { 'type': 'array', 'itemType': 'string' },
      filterTypeList: { 'type': 'array', 'itemType': 'string' },
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    if(this.columnFilter && typeof (this.columnFilter as any).validate === 'function') {
      (this.columnFilter as any).validate();
    }
    if(Array.isArray(this.filterTableList)) {
      $dara.Model.validateArray(this.filterTableList);
    }
    if(Array.isArray(this.filterTypeList)) {
      $dara.Model.validateArray(this.filterTypeList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDataTrackResultShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The condition to filter columns.
   */
  columnFilterShrink?: string;
  /**
   * @remarks
   * The end time of the time range in which you want to track data operations. The time must be in the yyyy-MM-dd HH:mm:ss format.
   * 
   * @example
   * 2023-04-23 10:00:00
   */
  filterEndTime?: string;
  /**
   * @remarks
   * The start time of the time range in which you want to track data operations. The time must be in the yyyy-MM-dd HH:mm:ss format.
   * 
   * @example
   * 2023-04-23 00:00:00
   */
  filterStartTime?: string;
  /**
   * @remarks
   * The names of the tables for which you want to track data operations.
   */
  filterTableListShrink?: string;
  /**
   * @remarks
   * The types of data operations that you want to track.
   */
  filterTypeListShrink?: string;
  /**
   * @remarks
   * The ID of the ticket. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to query the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 420****
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 62***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      columnFilterShrink: 'ColumnFilter',
      filterEndTime: 'FilterEndTime',
      filterStartTime: 'FilterStartTime',
      filterTableListShrink: 'FilterTableList',
      filterTypeListShrink: 'FilterTypeList',
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnFilterShrink: 'string',
      filterEndTime: 'string',
      filterStartTime: 'string',
      filterTableListShrink: 'string',
      filterTypeListShrink: 'string',
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDataTrackResultResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0C1CB646-1DE4-4AD0-B4A4-7D47DD52E931
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The parsing result of the data tracking task.
   */
  trackResult?: SearchDataTrackResultResponseBodyTrackResult;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      trackResult: 'TrackResult',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      trackResult: SearchDataTrackResultResponseBodyTrackResult,
    };
  }

  validate() {
    if(this.trackResult && typeof (this.trackResult as any).validate === 'function') {
      (this.trackResult as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDataTrackResultResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SearchDataTrackResultResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SearchDataTrackResultResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDatabaseRequest extends $dara.Model {
  /**
   * @remarks
   * The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * @example
   * MYSQL
   */
  dbType?: string;
  /**
   * @remarks
   * The environment type of the database. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).
   * 
   * @example
   * test
   */
  envType?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The keyword that is used to search for databases.
   * 
   * @example
   * testdb
   */
  searchKey?: string;
  /**
   * @remarks
   * The query range based on permissions. Valid values:
   * 
   * *   **HAS_PERMSSION**: searches for databases on which the current user has permissions.
   * *   **OWNER**: searches for databases owned by the current user.
   * *   **MY_FOCUS**: searches for databases that the current user follows.
   * *   **UNKNOWN**: searches for all databases.
   * 
   * @example
   * HAS_PERMSSION
   */
  searchRange?: string;
  /**
   * @remarks
   * The category of the database. Valid values:
   * 
   * *   **DB**: single database or logical database.
   * *   **SINGLE_DB**: single database.
   * *   **LOGIC_DB**: logical database.
   * 
   * @example
   * SINGLE_DB
   */
  searchTarget?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      envType: 'EnvType',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      searchKey: 'SearchKey',
      searchRange: 'SearchRange',
      searchTarget: 'SearchTarget',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      envType: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      searchKey: 'string',
      searchRange: 'string',
      searchTarget: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDatabaseResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * E0D21075-CD3E-4D98-8264-FD8AD04A63B6
   */
  requestId?: string;
  /**
   * @remarks
   * The information about the databases.
   */
  searchDatabaseList?: SearchDatabaseResponseBodySearchDatabaseList;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**: The request is successful.
   * *   **false**: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      searchDatabaseList: 'SearchDatabaseList',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      searchDatabaseList: SearchDatabaseResponseBodySearchDatabaseList,
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.searchDatabaseList && typeof (this.searchDatabaseList as any).validate === 'function') {
      (this.searchDatabaseList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchDatabaseResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SearchDatabaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SearchDatabaseResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchTableRequest extends $dara.Model {
  /**
   * @remarks
   * The type of database. Valid values:
   * 
   * *   **MySQL**
   * *   **SQLServer**
   * *   **PostgreSQL**
   * *   **Oracle**
   * *   **DRDS**
   * *   **OceanBase**
   * *   **Mongo**
   * *   **Redis**
   * 
   * @example
   * MySQL
   */
  dbType?: string;
  /**
   * @remarks
   * The type of the environment to which databases belong. For more information, see [Change the environment type of an instance](https://help.aliyun.com/document_detail/163309.html).
   * 
   * @example
   * PRODUCT
   */
  envType?: string;
  /**
   * @remarks
   * The number of the page to return.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * Specifies whether to return the GUID of each table.
   * 
   * @example
   * false
   */
  returnGuid?: boolean;
  /**
   * @remarks
   * The keyword that is used to query tables.
   * 
   * @example
   * test
   */
  searchKey?: string;
  /**
   * @remarks
   * The scope of tables that you want to query. Valid values:
   * 
   * *   **HAS_PERMSSION**: the tables on which the current account has permissions.
   * *   **OWNER**: the tables owned by the current account.
   * *   **MY_FOCUS**: the tables that the current account follows.
   * *   **UNKNOWN**: all tables.
   * 
   * @example
   * OWNER
   */
  searchRange?: string;
  /**
   * @remarks
   * The type of table that you want to query. Valid values:
   * 
   * *   **TABLE**: physical and logical tables
   * *   **SINGLE_TABLE**: physical tables
   * *   **LOGIC_TABLE**: logical tables
   * 
   * @example
   * LOGIC_TABLE
   */
  searchTarget?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dbType: 'DbType',
      envType: 'EnvType',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      returnGuid: 'ReturnGuid',
      searchKey: 'SearchKey',
      searchRange: 'SearchRange',
      searchTarget: 'SearchTarget',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbType: 'string',
      envType: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      returnGuid: 'boolean',
      searchKey: 'string',
      searchRange: 'string',
      searchTarget: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchTableResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1489257F-1B5D-4B5B-89EF-923C12CEEBD1
   */
  requestId?: string;
  /**
   * @remarks
   * The details of the tables.
   */
  searchTableList?: SearchTableResponseBodySearchTableList;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The total number of entries that are returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      searchTableList: 'SearchTableList',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      searchTableList: SearchTableResponseBodySearchTableList,
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.searchTableList && typeof (this.searchTableList as any).validate === 'function') {
      (this.searchTableList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchTableResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SearchTableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SearchTableResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetOwnersRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the user whom you want to specify as an owner. Separate multiple IDs with commas (,). You can call the [GetUser](https://help.aliyun.com/document_detail/147098.html) or [ListUsers](https://help.aliyun.com/document_detail/141938.html) operation to query the ID of the user.
   * 
   * >  The value of the OwnerIds parameter is that of the UserId parameter.
   * 
   * This parameter is required.
   * 
   * @example
   * 51****
   */
  ownerIds?: string;
  /**
   * @remarks
   * The type of the owner. Valid values:
   * 
   * *   INSTANCE: an owner of an instance.
   * *   DATABASE: an owner of a physical database.
   * *   LOGIC_DATABASE: an owner of a logical database.
   * *   TABLE: an owner of a physical table.
   * *   LOGIC_TABLE: an owner of a logical table.
   * 
   * This parameter is required.
   * 
   * @example
   * INSTANCE
   */
  ownerType?: string;
  /**
   * @remarks
   * The ID of the resource. The ID of the resource varies with the owner type. The owner types and resource IDs have the following mappings:
   * 
   * *   INSTANCE: the ID of an instance. You can call the [ListInstances](https://help.aliyun.com/document_detail/141936.html) operation to query the ID of the instance.
   * *   DATABASE: the ID of a physical database. You can call the [ListDatabases](https://help.aliyun.com/document_detail/141873.html) operation to query the ID of the physical database.
   * *   LOGIC_DATABASE: the ID of a logical database. You can call the [ListLogicDatabases](https://help.aliyun.com/document_detail/141874.html) operation to query the ID of the logical database.
   * *   TABLE: the ID of a physical table. You can call the [ListTables](https://help.aliyun.com/document_detail/141878.html) operation to query the ID of the physical table.
   * *   LOGIC_DATABASE: the ID of a logical table. You can call the [ListLogicTables](https://help.aliyun.com/document_detail/141875.html) operation to query the ID of the logical table.
   * 
   * This parameter is required.
   * 
   * @example
   * 174****
   */
  resourceId?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the "View information about the current tenant" section of the [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html) topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      ownerIds: 'OwnerIds',
      ownerType: 'OwnerType',
      resourceId: 'ResourceId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerIds: 'string',
      ownerType: 'string',
      resourceId: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetOwnersResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * A99CD576-1E18-4E86-931E-C3CCE56DC030
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   true: The request is successful.
   * *   false: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetOwnersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SetOwnersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SetOwnersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetWorkflowExtraInfoRequest extends $dara.Model {
  /**
   * @example
   * false
   */
  renderAddApprovalNode?: boolean;
  /**
   * @example
   * true
   */
  renderAgree?: boolean;
  /**
   * @example
   * true
   */
  renderCancel?: boolean;
  /**
   * @example
   * false
   */
  renderReject?: boolean;
  /**
   * @example
   * true
   */
  renderTransfer?: boolean;
  /**
   * @example
   * test
   */
  thirdpartyWorkflowComment?: string;
  /**
   * @example
   * https://xxx
   */
  thirdpartyWorkflowUrl?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 184****
   */
  workflowInstanceId?: number;
  static names(): { [key: string]: string } {
    return {
      renderAddApprovalNode: 'RenderAddApprovalNode',
      renderAgree: 'RenderAgree',
      renderCancel: 'RenderCancel',
      renderReject: 'RenderReject',
      renderTransfer: 'RenderTransfer',
      thirdpartyWorkflowComment: 'ThirdpartyWorkflowComment',
      thirdpartyWorkflowUrl: 'ThirdpartyWorkflowUrl',
      tid: 'Tid',
      workflowInstanceId: 'WorkflowInstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      renderAddApprovalNode: 'boolean',
      renderAgree: 'boolean',
      renderCancel: 'boolean',
      renderReject: 'boolean',
      renderTransfer: 'boolean',
      thirdpartyWorkflowComment: 'string',
      thirdpartyWorkflowUrl: 'string',
      tid: 'number',
      workflowInstanceId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetWorkflowExtraInfoResponseBody extends $dara.Model {
  /**
   * @example
   * true
   */
  data?: boolean;
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 8401893F-4235-55D5-B563-7CF7A7D037DE
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: 'boolean',
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetWorkflowExtraInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SetWorkflowExtraInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SetWorkflowExtraInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SkipDataCorrectRowCheckRequest extends $dara.Model {
  /**
   * @remarks
   * The ticket ID. You can call the [ListOrders](https://help.aliyun.com/document_detail/144643.html) operation to obtain the ticket ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 420****
   */
  orderId?: number;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The reason for skipping the verification on the number of rows in the precheck for data change.
   * 
   * This parameter is required.
   * 
   * @example
   * save test time
   */
  reason?: string;
  /**
   * @remarks
   * The tenant ID. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to obtain the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      realLoginUserUid: 'RealLoginUserUid',
      reason: 'Reason',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      realLoginUserUid: 'string',
      reason: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SkipDataCorrectRowCheckResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 7FAD400F-7A5C-4193-8F9A-39D86C4F0231
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SkipDataCorrectRowCheckResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SkipDataCorrectRowCheckResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SkipDataCorrectRowCheckResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopTaskFlowInstanceRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 7***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to query the execution record ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 47****
   */
  dagInstanceId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      dagInstanceId: 'DagInstanceId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      dagInstanceId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopTaskFlowInstanceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 028BF827-3801-5869-8548-F4A039256308
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopTaskFlowInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: StopTaskFlowInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: StopTaskFlowInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitOrderApprovalRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 12345
   */
  orderId?: number;
  realLoginUserUid?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      realLoginUserUid: 'RealLoginUserUid',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      realLoginUserUid: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitOrderApprovalResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitOrderApprovalResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SubmitOrderApprovalResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SubmitOrderApprovalResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitStructSyncOrderApprovalRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the ticket.
   * 
   * This parameter is required.
   * 
   * @example
   * 4324535
   */
  orderId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitStructSyncOrderApprovalResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4E1D2B4D-3E53-4ABC-999D-1D2520B3471D
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The ID of the approval process.
   * 
   * @example
   * 432523
   */
  workflowInstanceId?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      workflowInstanceId: 'WorkflowInstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      workflowInstanceId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitStructSyncOrderApprovalResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SubmitStructSyncOrderApprovalResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SubmitStructSyncOrderApprovalResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendDataExportJobRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1276****
   */
  jobId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 903****
   */
  orderId?: number;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      jobId: 'JobId',
      orderId: 'OrderId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      jobId: 'number',
      orderId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendDataExportJobResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * FE8EE2F1-4880-46BC-A704-5CF63EAF9A04
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendDataExportJobResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SuspendDataExportJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SuspendDataExportJobResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendTaskFlowInstanceRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 7***
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the execution record of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to query the execution record ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 47****
   */
  dagInstanceId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      dagInstanceId: 'DagInstanceId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      dagInstanceId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendTaskFlowInstanceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 028BF827-3801-5869-8548-F4A039256305
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendTaskFlowInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SuspendTaskFlowInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SuspendTaskFlowInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncDatabaseMetaRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the database.
   * 
   * This parameter is required.
   * 
   * @example
   * 123
   */
  dbId?: string;
  /**
   * @remarks
   * Specifies whether the database is a logical database.
   * 
   * @example
   * false
   */
  logic?: boolean;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dbId: 'DbId',
      logic: 'Logic',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dbId: 'string',
      logic: 'boolean',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncDatabaseMetaResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * A99CD576-1E18-4E86-931E-C3CCE56DC030
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncDatabaseMetaResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SyncDatabaseMetaResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SyncDatabaseMetaResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncInstanceMetaRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to skip synchronization for the metadata of table dictionaries. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  ignoreTable?: boolean;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * This parameter is required.
   * 
   * @example
   * 12***
   */
  instanceId?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the Manage DMS tenants topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      ignoreTable: 'IgnoreTable',
      instanceId: 'InstanceId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ignoreTable: 'boolean',
      instanceId: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncInstanceMetaResponseBody extends $dara.Model {
  /**
   * @remarks
   * Details about the topology of the data table.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error code returned.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * A99CD576-1E18-4E86-931E-C3CCE56DC030
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncInstanceMetaResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SyncInstanceMetaResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SyncInstanceMetaResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAbacPolicyRequest extends $dara.Model {
  /**
   * @example
   * {
   *   "Statement": [
   *     {
   *       "Action": "*",
   *       "Effect": "Allow",
   *       "Resource": "*",
   *       "Condition": {
   *         "StringEqualsIgnoreCase": {
   *           "dms:DbType": [
   *             "redis"
   *           ]
   *         }
   *       }
   *     }
   *   ],
   *   "Version": "1"
   * }
   */
  abacPolicyContent?: string;
  /**
   * @example
   * test
   */
  abacPolicyDesc?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12****
   */
  abacPolicyId?: number;
  /**
   * @example
   * policy_test
   */
  abacPolicyName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      abacPolicyContent: 'AbacPolicyContent',
      abacPolicyDesc: 'AbacPolicyDesc',
      abacPolicyId: 'AbacPolicyId',
      abacPolicyName: 'AbacPolicyName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      abacPolicyContent: 'string',
      abacPolicyDesc: 'string',
      abacPolicyId: 'number',
      abacPolicyName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAbacPolicyResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * CE43759B-5A72-560A-BF3D-862F38B36B9E
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * true
   */
  updatePolicyResult?: number;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      updatePolicyResult: 'UpdatePolicyResult',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      updatePolicyResult: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAbacPolicyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateAbacPolicyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateAbacPolicyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAuthorityTemplateRequest extends $dara.Model {
  /**
   * @remarks
   * The description of the permission template.
   * 
   * >  You must specify the Name or Description parameter. Otherwise, the API call fails.
   * 
   * This parameter is required.
   * 
   * @example
   * This template is used for business testing.
   */
  description?: string;
  /**
   * @remarks
   * The name of the permission template.
   * 
   * >  You must specify the Name or Description parameter. Otherwise, the API call fails.
   * 
   * This parameter is required.
   * 
   * @example
   * Test template.
   */
  name?: string;
  /**
   * @remarks
   * The ID of the permission template.
   * 
   * This parameter is required.
   * 
   * @example
   * 1563
   */
  templateId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      name: 'Name',
      templateId: 'TemplateId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      name: 'string',
      templateId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAuthorityTemplateResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the permission template.
   */
  authorityTemplateView?: UpdateAuthorityTemplateResponseBodyAuthorityTemplateView;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4E1D2B4D-3E53-4ABC-999D-1D2520B3471A
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      authorityTemplateView: 'AuthorityTemplateView',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorityTemplateView: UpdateAuthorityTemplateResponseBodyAuthorityTemplateView,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      tid: 'number',
    };
  }

  validate() {
    if(this.authorityTemplateView && typeof (this.authorityTemplateView as any).validate === 'function') {
      (this.authorityTemplateView as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAuthorityTemplateResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateAuthorityTemplateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateAuthorityTemplateResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataLakeDatabaseRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * oss://path/to/database
   */
  location?: string;
  parameters?: { [key: string]: string };
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      description: 'Description',
      location: 'Location',
      parameters: 'Parameters',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      description: 'string',
      location: 'string',
      parameters: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      tid: 'number',
    };
  }

  validate() {
    if(this.parameters) {
      $dara.Model.validateMap(this.parameters);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataLakeDatabaseShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * oss://path/to/database
   */
  location?: string;
  parametersShrink?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      description: 'Description',
      location: 'Location',
      parametersShrink: 'Parameters',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      description: 'string',
      location: 'string',
      parametersShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataLakeDatabaseResponseBody extends $dara.Model {
  database?: DLDatabase;
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 4E1D2B4D-3E53-4ABC-999D-1D2520B3471A
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      database: 'Database',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      database: DLDatabase,
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.database && typeof (this.database as any).validate === 'function') {
      (this.database as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataLakeDatabaseResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateDataLakeDatabaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateDataLakeDatabaseResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataLakePartitionRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  partitionInput?: DLPartitionInput;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * table_name
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      partitionInput: 'PartitionInput',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      partitionInput: DLPartitionInput,
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    if(this.partitionInput && typeof (this.partitionInput as any).validate === 'function') {
      (this.partitionInput as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataLakePartitionShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  partitionInputShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * table_name
   */
  tableName?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      partitionInputShrink: 'PartitionInput',
      tableName: 'TableName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      partitionInputShrink: 'string',
      tableName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataLakePartitionResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * 427688B8-ADFB-4C4E-9D45-EF5C1FD6E23D
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataLakePartitionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateDataLakePartitionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateDataLakePartitionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataLakeTableRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  tableInput?: OpenStructDLTableInput;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      tableInput: 'TableInput',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      tableInput: OpenStructDLTableInput,
      tid: 'number',
    };
  }

  validate() {
    if(this.tableInput && typeof (this.tableInput as any).validate === 'function') {
      (this.tableInput as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataLakeTableShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hive
   */
  catalogName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  dataRegion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default
   */
  dbName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  tableInputShrink?: string;
  /**
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      catalogName: 'CatalogName',
      dataRegion: 'DataRegion',
      dbName: 'DbName',
      tableInputShrink: 'TableInput',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      catalogName: 'string',
      dataRegion: 'string',
      dbName: 'string',
      tableInputShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataLakeTableResponseBody extends $dara.Model {
  /**
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @example
   * C5B8E84B-42B6-4374-AD5A-6264E1753325
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  table?: DLTable;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
      table: 'Table',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
      table: DLTable,
    };
  }

  validate() {
    if(this.table && typeof (this.table as any).validate === 'function') {
      (this.table as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataLakeTableResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateDataLakeTableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateDataLakeTableResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateInstanceRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the database link for cross-database queries.
   * 
   * > 
   * 
   * *   This parameter is required if UseDsql is set to 1.
   * 
   * *   The name can contain only lowercase letters and underscores (_).
   * 
   * *   The name must be unique within a tenant.
   * 
   * @example
   * datalink_test
   */
  dataLinkName?: string;
  /**
   * @remarks
   * The password that is used to log on to the database.
   * 
   * This parameter is required.
   * 
   * @example
   * ******
   */
  databasePassword?: string;
  /**
   * @remarks
   * The account that is used to log on to the database.
   * 
   * This parameter is required.
   * 
   * @example
   * dbuser
   */
  databaseUser?: string;
  /**
   * @remarks
   * The ID of the user who assumes the database administrator (DBA) role of the database instance. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the user ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 27****
   */
  dbaId?: string;
  /**
   * @remarks
   * Specifies whether to enable the lock-free schema change feature for the database instance. Valid values:
   * 
   * *   **0:** disables the lock-free schema change feature.
   * *   **1**: uses the online DDL of MySQL first.
   * *   **2**: uses the lock-free schema change feature of DMS first.
   * 
   * @example
   * 0
   */
  ddlOnline?: number;
  /**
   * @remarks
   * The ID of the ECS instance on which the database instance is deployed.
   * 
   * > This parameter is required if the InstanceSource parameter is set to ECS_OWN.
   * 
   * @example
   * i-2zei9gs1t7h8l7ac****
   */
  ecsInstanceId?: string;
  /**
   * @remarks
   * The ID of the region in which the database instance resides.
   * 
   * > This parameter is required if InstanceSource is set to RDS, ECS_OWN, and VPC_IDC.
   * 
   * @example
   * cn-hangzhou
   */
  ecsRegion?: string;
  /**
   * @remarks
   * *   **Y:** enables the sensitive data protection feature
   * *   **N:** disables the sensitive data protection feature
   * *   **NULL or other:** does not update the status of the sensitive data protection feature
   * 
   * @example
   * Y
   */
  enableSellSitd?: string;
  /**
   * @remarks
   * The type of the environment in which the database instance is deployed. Valid values:
   * 
   * *   **product:** production environment
   * *   **dev:** development environment
   * *   **pre:** pre-release environment
   * *   **test:** test environment
   * *   **sit:** system integration testing (SIT) environment
   * *   **uat:** user acceptance testing (UAT) environment
   * *   **pet:** stress testing environment
   * *   **stag:** staging environment
   * 
   * This parameter is required.
   * 
   * @example
   * product
   */
  envType?: string;
  /**
   * @remarks
   * The timeout period for exporting data from the database instance.
   * 
   * This parameter is required.
   * 
   * @example
   * 600
   */
  exportTimeout?: number;
  /**
   * @remarks
   * The host address that is used to connect to the database instance.
   * 
   * This parameter is required.
   * 
   * @example
   * 192.XXX.0.56
   */
  host?: string;
  /**
   * @remarks
   * The alias of the database instance. Specify an alias that can help you identify the database instance in DMS.
   * 
   * This parameter is required.
   * 
   * @example
   * instance_test
   */
  instanceAlias?: string;
  /**
   * @remarks
   * The ID of the database instance. You can call the [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the instance ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 126****
   */
  instanceId?: string;
  /**
   * @remarks
   * The source of the database instance. Valid values:
   * 
   * *   **PUBLIC_OWN:** a self-managed database instance that is deployed on the Internet
   * *   **RDS:** an ApsaraDB RDS instance
   * *   **ECS_OWN:** a self-managed database that is deployed on an Elastic Compute Service (ECS) instance
   * *   **VPC_IDC:** a self-managed database instance that is deployed in a data center connected over a virtual private cloud (VPC)
   * 
   * This parameter is required.
   * 
   * @example
   * ECS_OWN
   */
  instanceSource?: string;
  /**
   * @remarks
   * The type of the database. For more information about the valid values of this parameter, see [DbType parameter](https://help.aliyun.com/document_detail/198106.html).
   * 
   * This parameter is required.
   * 
   * @example
   * mysql
   */
  instanceType?: string;
  /**
   * @remarks
   * The port that is used to connect to the database instance.
   * 
   * This parameter is required.
   * 
   * @example
   * 3306
   */
  port?: number;
  /**
   * @remarks
   * The timeout period for querying data in the database instance.
   * 
   * This parameter is required.
   * 
   * @example
   * 60
   */
  queryTimeout?: number;
  /**
   * @remarks
   * The name of the security rule set (GroupName) for the instance. You can call the [ListStandardGroups](https://help.aliyun.com/document_detail/417891.html) or [GetInstance](https://help.aliyun.com/document_detail/141567.html) operation to query the name of the security rule set.
   * 
   * This parameter is required.
   * 
   * @example
   * 3****
   */
  safeRuleId?: string;
  /**
   * @remarks
   * The system ID (SID) of the database instance.
   * 
   * > This parameter is required if the InstanceType parameter is set to ORACLE.
   * 
   * @example
   * XXX
   */
  sid?: string;
  /**
   * @remarks
   * Specifies whether to skip the connectivity test. Valid values:
   * 
   * *   **true:** skips the connectivity test
   * *   **false:** does not skip the connectivity test
   * 
   * @example
   * false
   */
  skipTest?: boolean;
  /**
   * @remarks
   * The ID of the classification template. You can call the [ListClassificationTemplates](https://help.aliyun.com/document_detail/460613.html) operation to query the template ID.
   * 
   * @example
   * 3***
   */
  templateId?: number;
  /**
   * @remarks
   * The type of the classification template. You can call the [ListClassificationTemplates](https://help.aliyun.com/document_detail/460613.html) operation to query the template type.
   * 
   * @example
   * INNER
   */
  templateType?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * Specifies whether to enable the cross-database query feature for the database instance. Valid values:
   * 
   * *   **0**: disables the cross-database query feature.
   * *   **1**: enables the cross-database query feature.
   * 
   * > Supported database types: MySQL, SQL Server, PostgreSQL, PolarDB for PostgreSQL (compatible with Oracle), and ApsaraDB for Redis.
   * 
   * @example
   * 0
   */
  useDsql?: number;
  /**
   * @remarks
   * The ID of the VPC to which the database instance belongs.
   * 
   * > This parameter is required if the InstanceSource parameter is set to VPC_IDC.
   * 
   * @example
   * vpc-xxx
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      dataLinkName: 'DataLinkName',
      databasePassword: 'DatabasePassword',
      databaseUser: 'DatabaseUser',
      dbaId: 'DbaId',
      ddlOnline: 'DdlOnline',
      ecsInstanceId: 'EcsInstanceId',
      ecsRegion: 'EcsRegion',
      enableSellSitd: 'EnableSellSitd',
      envType: 'EnvType',
      exportTimeout: 'ExportTimeout',
      host: 'Host',
      instanceAlias: 'InstanceAlias',
      instanceId: 'InstanceId',
      instanceSource: 'InstanceSource',
      instanceType: 'InstanceType',
      port: 'Port',
      queryTimeout: 'QueryTimeout',
      safeRuleId: 'SafeRuleId',
      sid: 'Sid',
      skipTest: 'SkipTest',
      templateId: 'TemplateId',
      templateType: 'TemplateType',
      tid: 'Tid',
      useDsql: 'UseDsql',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataLinkName: 'string',
      databasePassword: 'string',
      databaseUser: 'string',
      dbaId: 'string',
      ddlOnline: 'number',
      ecsInstanceId: 'string',
      ecsRegion: 'string',
      enableSellSitd: 'string',
      envType: 'string',
      exportTimeout: 'number',
      host: 'string',
      instanceAlias: 'string',
      instanceId: 'string',
      instanceSource: 'string',
      instanceType: 'string',
      port: 'number',
      queryTimeout: 'number',
      safeRuleId: 'string',
      sid: 'string',
      skipTest: 'boolean',
      templateId: 'number',
      templateType: 'string',
      tid: 'number',
      useDsql: 'number',
      vpcId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateInstanceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * E9BEBF41-4F69-4605-A5D5-A67955173941
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true:** The request was successful.
   * *   **false:** The request failed.
   * 
   * @example
   * false
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateSLARulesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 11****
   */
  dagId?: number;
  /**
   * @remarks
   * The list of SLA rules.
   */
  slaRuleList?: UpdateSLARulesRequestSlaRuleList[];
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      slaRuleList: 'SlaRuleList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      slaRuleList: { 'type': 'array', 'itemType': UpdateSLARulesRequestSlaRuleList },
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.slaRuleList)) {
      $dara.Model.validateArray(this.slaRuleList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateSLARulesShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 11****
   */
  dagId?: number;
  /**
   * @remarks
   * The list of SLA rules.
   */
  slaRuleListShrink?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      slaRuleListShrink: 'SlaRuleList',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      slaRuleListShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateSLARulesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * 88E053F7-347B-52DD-A186-1F340EEC0C27
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateSLARulesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateSLARulesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateSLARulesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateScenarioRequest extends $dara.Model {
  /**
   * @remarks
   * The description of the business scenario.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The ID of the business scenario.
   * 
   * This parameter is required.
   * 
   * @example
   * 12***
   */
  scenarioId?: string;
  /**
   * @remarks
   * The name of the business scenario.
   * 
   * This parameter is required.
   * 
   * @example
   * Business scenario - test
   */
  scenarioName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      scenarioId: 'ScenarioId',
      scenarioName: 'ScenarioName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      scenarioId: 'string',
      scenarioName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateScenarioResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 7FAD400F-7A5C-4193-8F9A-39D86C4F0231
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateScenarioResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateScenarioResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateScenarioResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateStandardGroupRequest extends $dara.Model {
  /**
   * @remarks
   * The description of the security rule set.
   * 
   * This parameter is required.
   * 
   * @example
   * Production Environment test rules
   */
  description?: string;
  /**
   * @remarks
   * The security rule set ID. You can call the [ListStandardGroups](https://help.aliyun.com/document_detail/465940.html) operation to obtain the ID of the security rule set.
   * 
   * This parameter is required.
   * 
   * @example
   * 242***
   */
  groupId?: number;
  /**
   * @remarks
   * The name of the security rule set.
   * 
   * This parameter is required.
   * 
   * @example
   * poc_test
   */
  groupName?: string;
  /**
   * @remarks
   * The tenant ID.
   * 
   * >  To view the tenant ID, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see the [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html) section of the "Manage DMS tenants" topic.
   * 
   * @example
   * 23****
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      groupId: 'GroupId',
      groupName: 'GroupName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      groupId: 'number',
      groupName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateStandardGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID. You can use the request ID to locate logs and troubleshoot issues.
   * 
   * @example
   * 4E1D2B4D-3E53-4ABC-999D-1D2520B3471A
   */
  requestId?: string;
  /**
   * @remarks
   * The information about the security rule set.
   */
  standardGroup?: UpdateStandardGroupResponseBodyStandardGroup;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      standardGroup: 'StandardGroup',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      standardGroup: UpdateStandardGroupResponseBodyStandardGroup,
      success: 'boolean',
    };
  }

  validate() {
    if(this.standardGroup && typeof (this.standardGroup as any).validate === 'function') {
      (this.standardGroup as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateStandardGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateStandardGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateStandardGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskConfigRequest extends $dara.Model {
  /**
   * @remarks
   * The advanced configuration for the node. The value of this parameter must be a JSON string.
   * 
   * This parameter is required.
   * 
   * @example
   * { "rerun":{ "rerunEnable":true,  "rerunCount":1,   "rerunInterval":10 } }
   */
  nodeConfig?: string;
  /**
   * @remarks
   * The ID of the task node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 43****
   */
  nodeId?: string;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      nodeConfig: 'NodeConfig',
      nodeId: 'NodeId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeConfig: 'string',
      nodeId: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskConfigResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * F4E2A94B-604F-43FF-93E7-F4EE3DCF412E
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskConfigResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskConfigResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskContentRequest extends $dara.Model {
  /**
   * @remarks
   * The node configurations after modification.
   * 
   * @example
   * { "dbId":12****, "sql":"select * from test_table",   "dbType":"lindorm_sql"  }
   */
  nodeContent?: string;
  /**
   * @remarks
   * The ID of the task node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 43****
   */
  nodeId?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > To view the ID of the tenant, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see the ["View information about the current tenant"](https://help.aliyun.com/document_detail/181330.html) section of the Manage DMS tenants topic.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      nodeContent: 'NodeContent',
      nodeId: 'NodeId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeContent: 'string',
      nodeId: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskContentResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * 39557312-28D5-528F-9554-80C0700EB489
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskContentResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskContentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskContentResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowConstantsRequest extends $dara.Model {
  /**
   * @remarks
   * The constants for the task flow.
   */
  dagConstants?: UpdateTaskFlowConstantsRequestDagConstants[];
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 3****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagConstants: 'DagConstants',
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagConstants: { 'type': 'array', 'itemType': UpdateTaskFlowConstantsRequestDagConstants },
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.dagConstants)) {
      $dara.Model.validateArray(this.dagConstants);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowConstantsShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The constants for the task flow.
   */
  dagConstantsShrink?: string;
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 3****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant. You can call the [GetUserActiveTenant](https://help.aliyun.com/document_detail/198073.html) or [ListUserTenants](https://help.aliyun.com/document_detail/198074.html) operation to query the tenant ID.
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagConstantsShrink: 'DagConstants',
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagConstantsShrink: 'string',
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowConstantsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * C4CCC000-C193-5A32-B701-573F497BF729
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowConstantsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskFlowConstantsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskFlowConstantsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowCooperatorsRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the users who are involved in the task flow to be updated.
   */
  cooperatorIds?: string[];
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 11****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      cooperatorIds: 'CooperatorIds',
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cooperatorIds: { 'type': 'array', 'itemType': 'string' },
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.cooperatorIds)) {
      $dara.Model.validateArray(this.cooperatorIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowCooperatorsShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the users who are involved in the task flow to be updated.
   */
  cooperatorIdsShrink?: string;
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 11****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      cooperatorIdsShrink: 'CooperatorIds',
      dagId: 'DagId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cooperatorIdsShrink: 'string',
      dagId: 'number',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowCooperatorsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * D05B3EE1-B6D3-5B17-8CA6-A8054828E5B2
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowCooperatorsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskFlowCooperatorsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskFlowCooperatorsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowEdgesRequest extends $dara.Model {
  /**
   * @remarks
   * The task flow ID. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The list of updated task flow edges.
   * 
   * This parameter is required.
   */
  edges?: UpdateTaskFlowEdgesRequestEdges[];
  /**
   * @remarks
   * The tenant ID.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      edges: 'Edges',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      edges: { 'type': 'array', 'itemType': UpdateTaskFlowEdgesRequestEdges },
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.edges)) {
      $dara.Model.validateArray(this.edges);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowEdgesShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The task flow ID. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The list of updated task flow edges.
   * 
   * This parameter is required.
   */
  edgesShrink?: string;
  /**
   * @remarks
   * The tenant ID.
   * 
   * > To view the tenant ID, move the pointer over the profile picture in the upper-right corner of the Data Management (DMS) console. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      edgesShrink: 'Edges',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      edgesShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowEdgesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 93FC1AE1-EC54-52B1-B146-650180FB82E8
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**
   * *   **false**
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowEdgesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskFlowEdgesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskFlowEdgesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowNameAndDescRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The new name that you want to specify for the task flow.
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  dagName?: string;
  /**
   * @remarks
   * The description that you want to specify for the task flow.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      dagName: 'DagName',
      description: 'Description',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      dagName: 'string',
      description: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowNameAndDescResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * F73CCB9D-0CF3-5D3D-97B0-D852A8022663
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowNameAndDescResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskFlowNameAndDescResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskFlowNameAndDescResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowNotificationRequest extends $dara.Model {
  /**
   * @remarks
   * The unique ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * Specifies whether to enable notifications for failed task flows. Notifications are disabled by default. You can enable notifications based on your business requirements.
   * 
   * This parameter is required.
   * 
   * @example
   * true
   */
  dagNotificationFail?: boolean;
  /**
   * @remarks
   * Specifies whether to enable SLA global notifications for task flows. Notifications are disabled by default. You can enable notifications based on your business requirements.
   * 
   * This parameter is required.
   * 
   * @example
   * true
   */
  dagNotificationSla?: boolean;
  /**
   * @remarks
   * Specifies whether to enable notifications for successful task flows. Notifications are disabled by default. You can enable notifications based on your business requirements.
   * 
   * This parameter is required.
   * 
   * @example
   * true
   */
  dagNotificationSuccess?: boolean;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      dagNotificationFail: 'DagNotificationFail',
      dagNotificationSla: 'DagNotificationSla',
      dagNotificationSuccess: 'DagNotificationSuccess',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      dagNotificationFail: 'boolean',
      dagNotificationSla: 'boolean',
      dagNotificationSuccess: 'boolean',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowNotificationResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * 3BDC762F-2525-5E47-8748-D6C58BDB3B38
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowNotificationResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskFlowNotificationResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskFlowNotificationResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowOwnerRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlowInstance](https://help.aliyun.com/document_detail/424689.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The user ID of the new owner. You can call the [GetUser](https://help.aliyun.com/document_detail/147098.html) or [ListUsers](https://help.aliyun.com/document_detail/141938.html) operation to query the user ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 51****
   */
  newOwnerId?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      newOwnerId: 'NewOwnerId',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      newOwnerId: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowOwnerResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * 482C61C1-2537-5BFB-8E58-34D9F17AD3C3
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowOwnerResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskFlowOwnerResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskFlowOwnerResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowRelationsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The list of task flow edges to be updated.
   */
  edges?: UpdateTaskFlowRelationsRequestEdges[];
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      edges: 'Edges',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      edges: { 'type': 'array', 'itemType': UpdateTaskFlowRelationsRequestEdges },
      tid: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.edges)) {
      $dara.Model.validateArray(this.edges);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowRelationsShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task flow. You can call the [ListTaskFlow](https://help.aliyun.com/document_detail/424565.html) or [ListLhTaskFlowAndScenario](https://help.aliyun.com/document_detail/426672.html) operation to query the task flow ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 15***
   */
  dagId?: number;
  /**
   * @remarks
   * The list of task flow edges to be updated.
   */
  edgesShrink?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      edgesShrink: 'Edges',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      edgesShrink: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowRelationsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * 15D9E71C-405B-57D7-BE6E-707C2C7A8E0B
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowRelationsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskFlowRelationsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskFlowRelationsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowScheduleRequest extends $dara.Model {
  /**
   * @remarks
   * The start of the time range for scheduling.
   * 
   * @example
   * CronBeginDate_test
   */
  cronBeginDate?: string;
  /**
   * @remarks
   * The end of the time range for scheduling.
   * 
   * @example
   * CronEndDate_test
   */
  cronEndDate?: string;
  /**
   * @remarks
   * The cron expression for timed scheduling.
   * 
   * @example
   * CronStr_test
   */
  cronStr?: string;
  /**
   * @remarks
   * The type of the scheduling cycle. Valid values:
   * 
   * *   **MINUTE**: scheduling by minute
   * *   **HOUR**: scheduling by hour
   * *   **DAY**: scheduling by day
   * *   **WEEK**: scheduling by week
   * *   **MONTH**: scheduling by month
   * 
   * @example
   * HOUR
   */
  cronType?: string;
  /**
   * @remarks
   * The ID of the task flow.
   * 
   * This parameter is required.
   * 
   * @example
   * 7***
   */
  dagId?: number;
  /**
   * @remarks
   * The event scheduling configuration. The value of this parameter is a JSON string.
   * 
   * This parameter is required.
   * 
   * @example
   * ScheduleParam_test
   */
  scheduleParam?: string;
  /**
   * @remarks
   * Specifies whether to enable scheduling. Valid values:
   * 
   * *   **Enable**
   * *   **Disable**
   * 
   * This parameter is required.
   * 
   * @example
   * Disable
   */
  scheduleSwitch?: boolean;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The time zone. The default time zone is UTC+8 (Asia/Shanghai).
   * 
   * @example
   * Asia/Shanghai
   */
  timeZoneId?: string;
  /**
   * @remarks
   * The mode in which the task flow is triggered. Valid values:
   * 
   * *   **Cron**: The task flow is triggered based on timed scheduling.
   * *   **Event**: The task flow is triggered by events.
   * 
   * This parameter is required.
   * 
   * @example
   * Event
   */
  triggerType?: string;
  static names(): { [key: string]: string } {
    return {
      cronBeginDate: 'CronBeginDate',
      cronEndDate: 'CronEndDate',
      cronStr: 'CronStr',
      cronType: 'CronType',
      dagId: 'DagId',
      scheduleParam: 'ScheduleParam',
      scheduleSwitch: 'ScheduleSwitch',
      tid: 'Tid',
      timeZoneId: 'TimeZoneId',
      triggerType: 'TriggerType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cronBeginDate: 'string',
      cronEndDate: 'string',
      cronStr: 'string',
      cronType: 'string',
      dagId: 'number',
      scheduleParam: 'string',
      scheduleSwitch: 'boolean',
      tid: 'number',
      timeZoneId: 'string',
      triggerType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowScheduleResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * InvalidParameterValid
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * InvalidParameterValid
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to query logs and troubleshoot issues.
   * 
   * @example
   * 7BF38A13-C181-5B5E-97F1-8643F8A10093
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowScheduleResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskFlowScheduleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskFlowScheduleResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowTimeVariablesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 43****
   */
  dagId?: number;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The time variables for the task flow.
   * 
   * This parameter is required.
   * 
   * @example
   * {"variables":[ {"name":"var", "pattern":"yyyy-MM-dd|+0m+0h-2d+0w+0M+1y"} ]}
   */
  timeVariables?: string;
  static names(): { [key: string]: string } {
    return {
      dagId: 'DagId',
      tid: 'Tid',
      timeVariables: 'TimeVariables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dagId: 'number',
      tid: 'number',
      timeVariables: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowTimeVariablesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * 39557312-28D5-528F-9554-80C0700EB489
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskFlowTimeVariablesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskFlowTimeVariablesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskFlowTimeVariablesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskNameRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 449***
   */
  nodeId?: string;
  /**
   * @remarks
   * The name of the node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node name.
   * 
   * This parameter is required.
   * 
   * @example
   * Spark-test
   */
  nodeName?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      nodeId: 'NodeId',
      nodeName: 'NodeName',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeId: 'string',
      nodeName: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskNameResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * C4604178-3BE1-5973-ACF0-7D561AEEF3A8
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskNameResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskNameResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskNameResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskOutputRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 14059
   */
  nodeId?: string;
  /**
   * @remarks
   * The output variables for the task.
   * 
   * @example
   * {“outputs”:[{"row":0, "column":-1,"combiner":","}"extractMethod":"{\\"row\\":0,\\"column\\":-1,\\"combiner\\":\\",\\"}",   "variableName":"var", "description":"For demo" }]}
   */
  nodeOutput?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * >  To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  static names(): { [key: string]: string } {
    return {
      nodeId: 'NodeId',
      nodeOutput: 'NodeOutput',
      tid: 'Tid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeId: 'string',
      nodeOutput: 'string',
      tid: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskOutputResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request. You can use the ID to locate logs and troubleshoot issues.
   * 
   * @example
   * AB524768-8A5F-523A-91BD-1147187FCD62
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskOutputResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskOutputResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskOutputResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskTimeVariablesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the task node. You can call the [GetTaskInstanceRelation](https://help.aliyun.com/document_detail/424711.html) operation to query the node ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 43****
   */
  nodeId?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > :To view the ID of the tenant, go to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [View information about the current tenant](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * 3***
   */
  tid?: number;
  /**
   * @remarks
   * The time variables configured for the node. The value of this parameter must be a JSON string.
   * 
   * This parameter is required.
   * 
   * @example
   * {"variables":[ {"name":"var", "pattern":"yyyy-MM-dd|+0m+0h-2d+0w+0M+1y"} ]}
   */
  timeVariables?: string;
  static names(): { [key: string]: string } {
    return {
      nodeId: 'NodeId',
      tid: 'Tid',
      timeVariables: 'TimeVariables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeId: 'string',
      tid: 'number',
      timeVariables: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskTimeVariablesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 39557312-28D5-528F-9554-80C0700EB489
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   **true**: The request was successful.
   * *   **false**: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateTaskTimeVariablesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateTaskTimeVariablesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateTaskTimeVariablesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateUserRequest extends $dara.Model {
  /**
   * @remarks
   * The maximum number of queries that can be performed each day.
   * 
   * @example
   * 1000
   */
  maxExecuteCount?: number;
  /**
   * @remarks
   * The maximum number of rows that can be queried each day.
   * 
   * @example
   * 1000
   */
  maxResultCount?: number;
  /**
   * @remarks
   * The DingTalk ID or mobile number of the user.
   * 
   * @example
   * 188xxxxxxxx
   */
  mobile?: string;
  /**
   * @remarks
   * The roles that the user assumes. For more information about the valid values, see the Request parameters section in the [UpdateUser](https://help.aliyun.com/document_detail/465812.html) topic.
   * 
   * @example
   * ADMIN,DBA
   */
  roleNames?: string;
  /**
   * @remarks
   * The ID of the tenant.
   * 
   * > : To view the ID of the tenant, log on to the Data Management (DMS) console and move the pointer over the profile picture in the upper-right corner. For more information, see [Manage DMS tenants](https://help.aliyun.com/document_detail/181330.html).
   * 
   * @example
   * -1
   */
  tid?: number;
  /**
   * @remarks
   * The Alibaba Cloud unique ID (UID) of the user to update.
   * 
   * This parameter is required.
   * 
   * @example
   * 123456789
   */
  uid?: number;
  /**
   * @remarks
   * The nickname of the user.
   * 
   * @example
   * test
   */
  userNick?: string;
  static names(): { [key: string]: string } {
    return {
      maxExecuteCount: 'MaxExecuteCount',
      maxResultCount: 'MaxResultCount',
      mobile: 'Mobile',
      roleNames: 'RoleNames',
      tid: 'Tid',
      uid: 'Uid',
      userNick: 'UserNick',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxExecuteCount: 'number',
      maxResultCount: 'number',
      mobile: 'string',
      roleNames: 'string',
      tid: 'number',
      uid: 'number',
      userNick: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateUserResponseBody extends $dara.Model {
  /**
   * @remarks
   * The error code returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * UnknownError
   */
  errorMessage?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * E9BEBF41-4F69-4605-A5D5-A67955173941
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request succeeded.
   * 
   * @example
   * false
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateUserResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateUserResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}


export default class Client extends OpenApi {

  constructor(config: $OpenApiUtil.Config) {
    super(config);
    this._endpointRule = "central";
    this.checkConfig(config);
    this._endpoint = this.getEndpoint("dms-enterprise", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
  }


  getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {[key: string ]: string}, endpoint: string): string {
    if (!$dara.isNull(endpoint)) {
      return endpoint;
    }

    if (!$dara.isNull(endpointMap) && !$dara.isNull(endpointMap[regionId])) {
      return endpointMap[regionId];
    }

    return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
  }

  /**
   * 添加权限模板资源
   * 
   * @param tmpReq - AddAuthorityTemplateItemsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddAuthorityTemplateItemsResponse
   */
  async addAuthorityTemplateItemsWithOptions(tmpReq: AddAuthorityTemplateItemsRequest, runtime: $dara.RuntimeOptions): Promise<AddAuthorityTemplateItemsResponse> {
    tmpReq.validate();
    let request = new AddAuthorityTemplateItemsShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.items)) {
      request.itemsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.items, "Items", "json");
    }

    let query = { };
    if (!$dara.isNull(request.itemsShrink)) {
      query["Items"] = request.itemsShrink;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddAuthorityTemplateItems",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AddAuthorityTemplateItemsResponse>(await this.callApi(params, req, runtime), new AddAuthorityTemplateItemsResponse({}));
    } else {
      return $dara.cast<AddAuthorityTemplateItemsResponse>(await this.execute(params, req, runtime), new AddAuthorityTemplateItemsResponse({}));
    }

  }

  /**
   * 添加权限模板资源
   * 
   * @param request - AddAuthorityTemplateItemsRequest
   * @returns AddAuthorityTemplateItemsResponse
   */
  async addAuthorityTemplateItems(request: AddAuthorityTemplateItemsRequest): Promise<AddAuthorityTemplateItemsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addAuthorityTemplateItemsWithOptions(request, runtime);
  }

  /**
   * Adds a masking rule.
   * 
   * @param request - AddDesensitizationRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddDesensitizationRuleResponse
   */
  async addDesensitizationRuleWithOptions(request: AddDesensitizationRuleRequest, runtime: $dara.RuntimeOptions): Promise<AddDesensitizationRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.functionType)) {
      query["FunctionType"] = request.functionType;
    }

    if (!$dara.isNull(request.ruleDescription)) {
      query["RuleDescription"] = request.ruleDescription;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let body : {[key: string ]: any} = { };
    let bodyFlat : {[key: string ]: any} = { };
    if (!$dara.isNull(request.functionParams)) {
      bodyFlat["FunctionParams"] = request.functionParams;
    }

    body = {
      ...body,
      ...OpenApiUtil.query(bodyFlat),
    };
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddDesensitizationRule",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AddDesensitizationRuleResponse>(await this.callApi(params, req, runtime), new AddDesensitizationRuleResponse({}));
    } else {
      return $dara.cast<AddDesensitizationRuleResponse>(await this.execute(params, req, runtime), new AddDesensitizationRuleResponse({}));
    }

  }

  /**
   * Adds a masking rule.
   * 
   * @param request - AddDesensitizationRuleRequest
   * @returns AddDesensitizationRuleResponse
   */
  async addDesensitizationRule(request: AddDesensitizationRuleRequest): Promise<AddDesensitizationRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addDesensitizationRuleWithOptions(request, runtime);
  }

  /**
   * 添加实例
   * 
   * @param request - AddInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddInstanceResponse
   */
  async addInstanceWithOptions(request: AddInstanceRequest, runtime: $dara.RuntimeOptions): Promise<AddInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dataLinkName)) {
      query["DataLinkName"] = request.dataLinkName;
    }

    if (!$dara.isNull(request.databasePassword)) {
      query["DatabasePassword"] = request.databasePassword;
    }

    if (!$dara.isNull(request.databaseUser)) {
      query["DatabaseUser"] = request.databaseUser;
    }

    if (!$dara.isNull(request.dbaId)) {
      query["DbaId"] = request.dbaId;
    }

    if (!$dara.isNull(request.ddlOnline)) {
      query["DdlOnline"] = request.ddlOnline;
    }

    if (!$dara.isNull(request.ecsInstanceId)) {
      query["EcsInstanceId"] = request.ecsInstanceId;
    }

    if (!$dara.isNull(request.ecsRegion)) {
      query["EcsRegion"] = request.ecsRegion;
    }

    if (!$dara.isNull(request.enableSellCommon)) {
      query["EnableSellCommon"] = request.enableSellCommon;
    }

    if (!$dara.isNull(request.enableSellSitd)) {
      query["EnableSellSitd"] = request.enableSellSitd;
    }

    if (!$dara.isNull(request.enableSellStable)) {
      query["EnableSellStable"] = request.enableSellStable;
    }

    if (!$dara.isNull(request.enableSellTrust)) {
      query["EnableSellTrust"] = request.enableSellTrust;
    }

    if (!$dara.isNull(request.envType)) {
      query["EnvType"] = request.envType;
    }

    if (!$dara.isNull(request.exportTimeout)) {
      query["ExportTimeout"] = request.exportTimeout;
    }

    if (!$dara.isNull(request.host)) {
      query["Host"] = request.host;
    }

    if (!$dara.isNull(request.instanceAlias)) {
      query["InstanceAlias"] = request.instanceAlias;
    }

    if (!$dara.isNull(request.instanceSource)) {
      query["InstanceSource"] = request.instanceSource;
    }

    if (!$dara.isNull(request.instanceType)) {
      query["InstanceType"] = request.instanceType;
    }

    if (!$dara.isNull(request.networkType)) {
      query["NetworkType"] = request.networkType;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.queryTimeout)) {
      query["QueryTimeout"] = request.queryTimeout;
    }

    if (!$dara.isNull(request.safeRule)) {
      query["SafeRule"] = request.safeRule;
    }

    if (!$dara.isNull(request.sid)) {
      query["Sid"] = request.sid;
    }

    if (!$dara.isNull(request.skipTest)) {
      query["SkipTest"] = request.skipTest;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    if (!$dara.isNull(request.templateType)) {
      query["TemplateType"] = request.templateType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.useDsql)) {
      query["UseDsql"] = request.useDsql;
    }

    if (!$dara.isNull(request.useSsl)) {
      query["UseSsl"] = request.useSsl;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AddInstanceResponse>(await this.callApi(params, req, runtime), new AddInstanceResponse({}));
    } else {
      return $dara.cast<AddInstanceResponse>(await this.execute(params, req, runtime), new AddInstanceResponse({}));
    }

  }

  /**
   * 添加实例
   * 
   * @param request - AddInstanceRequest
   * @returns AddInstanceResponse
   */
  async addInstance(request: AddInstanceRequest): Promise<AddInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addInstanceWithOptions(request, runtime);
  }

  /**
   * Adds a workspace administrator, a workspace member, or a task flow developer in Data Management (DMS).
   * 
   * @remarks
   * You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
   * Usage notes:
   * *   Before you call this operation to add a user as a task flow developer, make sure that you have added the user as a workspace member.
   * *   You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](https://help.aliyun.com/document_detail/424761.html) operation.
   * *   For more information about workspace roles and permissions, see [Manage permissions on a workspace](https://help.aliyun.com/document_detail/410893.html).
   * 
   * @param tmpReq - AddLhMembersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLhMembersResponse
   */
  async addLhMembersWithOptions(tmpReq: AddLhMembersRequest, runtime: $dara.RuntimeOptions): Promise<AddLhMembersResponse> {
    tmpReq.validate();
    let request = new AddLhMembersShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.members)) {
      request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, "Members", "json");
    }

    let query = { };
    if (!$dara.isNull(request.membersShrink)) {
      query["Members"] = request.membersShrink;
    }

    if (!$dara.isNull(request.objectId)) {
      query["ObjectId"] = request.objectId;
    }

    if (!$dara.isNull(request.objectType)) {
      query["ObjectType"] = request.objectType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLhMembers",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AddLhMembersResponse>(await this.callApi(params, req, runtime), new AddLhMembersResponse({}));
    } else {
      return $dara.cast<AddLhMembersResponse>(await this.execute(params, req, runtime), new AddLhMembersResponse({}));
    }

  }

  /**
   * Adds a workspace administrator, a workspace member, or a task flow developer in Data Management (DMS).
   * 
   * @remarks
   * You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
   * Usage notes:
   * *   Before you call this operation to add a user as a task flow developer, make sure that you have added the user as a workspace member.
   * *   You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](https://help.aliyun.com/document_detail/424761.html) operation.
   * *   For more information about workspace roles and permissions, see [Manage permissions on a workspace](https://help.aliyun.com/document_detail/410893.html).
   * 
   * @param request - AddLhMembersRequest
   * @returns AddLhMembersResponse
   */
  async addLhMembers(request: AddLhMembersRequest): Promise<AddLhMembersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLhMembersWithOptions(request, runtime);
  }

  /**
   * Adds a routing algorithm to a logical table.
   * 
   * @param request - AddLogicTableRouteConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddLogicTableRouteConfigResponse
   */
  async addLogicTableRouteConfigWithOptions(request: AddLogicTableRouteConfigRequest, runtime: $dara.RuntimeOptions): Promise<AddLogicTableRouteConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.routeExpr)) {
      query["RouteExpr"] = request.routeExpr;
    }

    if (!$dara.isNull(request.routeKey)) {
      query["RouteKey"] = request.routeKey;
    }

    if (!$dara.isNull(request.tableId)) {
      query["TableId"] = request.tableId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddLogicTableRouteConfig",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AddLogicTableRouteConfigResponse>(await this.callApi(params, req, runtime), new AddLogicTableRouteConfigResponse({}));
    } else {
      return $dara.cast<AddLogicTableRouteConfigResponse>(await this.execute(params, req, runtime), new AddLogicTableRouteConfigResponse({}));
    }

  }

  /**
   * Adds a routing algorithm to a logical table.
   * 
   * @param request - AddLogicTableRouteConfigRequest
   * @returns AddLogicTableRouteConfigResponse
   */
  async addLogicTableRouteConfig(request: AddLogicTableRouteConfigRequest): Promise<AddLogicTableRouteConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addLogicTableRouteConfigWithOptions(request, runtime);
  }

  /**
   * Adds directed edges for an existing task node.
   * 
   * @remarks
   * When you add directed edges for a task node, take note of the following limits:
   * 1. The endpoints of the specified edge exist in the Directed Acyclic Graph (DAG) of the task flow specified by DagId.
   * 2. After a backward edge is added, the DAG does not contain loops.
   * 
   * @param tmpReq - AddTaskFlowEdgesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddTaskFlowEdgesResponse
   */
  async addTaskFlowEdgesWithOptions(tmpReq: AddTaskFlowEdgesRequest, runtime: $dara.RuntimeOptions): Promise<AddTaskFlowEdgesResponse> {
    tmpReq.validate();
    let request = new AddTaskFlowEdgesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.edges)) {
      request.edgesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.edges, "Edges", "json");
    }

    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.edgesShrink)) {
      query["Edges"] = request.edgesShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddTaskFlowEdges",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AddTaskFlowEdgesResponse>(await this.callApi(params, req, runtime), new AddTaskFlowEdgesResponse({}));
    } else {
      return $dara.cast<AddTaskFlowEdgesResponse>(await this.execute(params, req, runtime), new AddTaskFlowEdgesResponse({}));
    }

  }

  /**
   * Adds directed edges for an existing task node.
   * 
   * @remarks
   * When you add directed edges for a task node, take note of the following limits:
   * 1. The endpoints of the specified edge exist in the Directed Acyclic Graph (DAG) of the task flow specified by DagId.
   * 2. After a backward edge is added, the DAG does not contain loops.
   * 
   * @param request - AddTaskFlowEdgesRequest
   * @returns AddTaskFlowEdgesResponse
   */
  async addTaskFlowEdges(request: AddTaskFlowEdgesRequest): Promise<AddTaskFlowEdgesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addTaskFlowEdgesWithOptions(request, runtime);
  }

  /**
   * Analyzes the lineage (dependencies and influence) between tables and between fields in SQL statements.
   * 
   * @remarks
   * The following conditions must be met before you call this API operation.
   * *   The database instance is of one of the following types: ApsaraDB RDS for MySQL, PolarDB for MySQL, AnalyticDB for MySQL, ApsaraDB RDS for PostgreSQL, PolarDB for PostgreSQL, AnalyticDB for PostgreSQL, Oracle, and openGauss.
   * *   A database instance is managed in Security Collaboration mode. For more information about control modes, see [Control modes](https://help.aliyun.com/document_detail/151629.html).
   * 
   * @param request - AnalyzeSQLLineageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AnalyzeSQLLineageResponse
   */
  async analyzeSQLLineageWithOptions(request: AnalyzeSQLLineageRequest, runtime: $dara.RuntimeOptions): Promise<AnalyzeSQLLineageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.sqlContent)) {
      query["SqlContent"] = request.sqlContent;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AnalyzeSQLLineage",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AnalyzeSQLLineageResponse>(await this.callApi(params, req, runtime), new AnalyzeSQLLineageResponse({}));
    } else {
      return $dara.cast<AnalyzeSQLLineageResponse>(await this.execute(params, req, runtime), new AnalyzeSQLLineageResponse({}));
    }

  }

  /**
   * Analyzes the lineage (dependencies and influence) between tables and between fields in SQL statements.
   * 
   * @remarks
   * The following conditions must be met before you call this API operation.
   * *   The database instance is of one of the following types: ApsaraDB RDS for MySQL, PolarDB for MySQL, AnalyticDB for MySQL, ApsaraDB RDS for PostgreSQL, PolarDB for PostgreSQL, AnalyticDB for PostgreSQL, Oracle, and openGauss.
   * *   A database instance is managed in Security Collaboration mode. For more information about control modes, see [Control modes](https://help.aliyun.com/document_detail/151629.html).
   * 
   * @param request - AnalyzeSQLLineageRequest
   * @returns AnalyzeSQLLineageResponse
   */
  async analyzeSQLLineage(request: AnalyzeSQLLineageRequest): Promise<AnalyzeSQLLineageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.analyzeSQLLineageWithOptions(request, runtime);
  }

  /**
   * Reviews a ticket.
   * 
   * @param request - ApproveOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApproveOrderResponse
   */
  async approveOrderWithOptions(request: ApproveOrderRequest, runtime: $dara.RuntimeOptions): Promise<ApproveOrderResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.approvalNodeId)) {
      query["ApprovalNodeId"] = request.approvalNodeId;
    }

    if (!$dara.isNull(request.approvalNodePos)) {
      query["ApprovalNodePos"] = request.approvalNodePos;
    }

    if (!$dara.isNull(request.approvalType)) {
      query["ApprovalType"] = request.approvalType;
    }

    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.newApprover)) {
      query["NewApprover"] = request.newApprover;
    }

    if (!$dara.isNull(request.newApproverList)) {
      query["NewApproverList"] = request.newApproverList;
    }

    if (!$dara.isNull(request.oldApprover)) {
      query["OldApprover"] = request.oldApprover;
    }

    if (!$dara.isNull(request.realLoginUserUid)) {
      query["RealLoginUserUid"] = request.realLoginUserUid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.workflowInstanceId)) {
      query["WorkflowInstanceId"] = request.workflowInstanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ApproveOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ApproveOrderResponse>(await this.callApi(params, req, runtime), new ApproveOrderResponse({}));
    } else {
      return $dara.cast<ApproveOrderResponse>(await this.execute(params, req, runtime), new ApproveOrderResponse({}));
    }

  }

  /**
   * Reviews a ticket.
   * 
   * @param request - ApproveOrderRequest
   * @returns ApproveOrderResponse
   */
  async approveOrder(request: ApproveOrderRequest): Promise<ApproveOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.approveOrderWithOptions(request, runtime);
  }

  /**
   * Backfills data for task orchestration.
   * 
   * @remarks
   * During a data backfill, task flows are run in sequence based on their dates. You can specify whether task flows are run in chronological or reverse chronological order. After the data backfill is complete, you can specify a date or date range, and a node range to run task flows.
   * 
   * @param tmpReq - BackFillRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BackFillResponse
   */
  async backFillWithOptions(tmpReq: BackFillRequest, runtime: $dara.RuntimeOptions): Promise<BackFillResponse> {
    tmpReq.validate();
    let request = new BackFillShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.filterNodeIds)) {
      request.filterNodeIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterNodeIds, "FilterNodeIds", "json");
    }

    if (!$dara.isNull(tmpReq.startNodeIds)) {
      request.startNodeIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.startNodeIds, "StartNodeIds", "json");
    }

    let query = { };
    if (!$dara.isNull(request.asc)) {
      query["Asc"] = request.asc;
    }

    if (!$dara.isNull(request.backFillDate)) {
      query["BackFillDate"] = request.backFillDate;
    }

    if (!$dara.isNull(request.backFillDateBegin)) {
      query["BackFillDateBegin"] = request.backFillDateBegin;
    }

    if (!$dara.isNull(request.backFillDateEnd)) {
      query["BackFillDateEnd"] = request.backFillDateEnd;
    }

    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.filterNodeIdsShrink)) {
      query["FilterNodeIds"] = request.filterNodeIdsShrink;
    }

    if (!$dara.isNull(request.historyDagId)) {
      query["HistoryDagId"] = request.historyDagId;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.isTriggerSubTree)) {
      query["IsTriggerSubTree"] = request.isTriggerSubTree;
    }

    if (!$dara.isNull(request.startNodeIdsShrink)) {
      query["StartNodeIds"] = request.startNodeIdsShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "BackFill",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<BackFillResponse>(await this.callApi(params, req, runtime), new BackFillResponse({}));
    } else {
      return $dara.cast<BackFillResponse>(await this.execute(params, req, runtime), new BackFillResponse({}));
    }

  }

  /**
   * Backfills data for task orchestration.
   * 
   * @remarks
   * During a data backfill, task flows are run in sequence based on their dates. You can specify whether task flows are run in chronological or reverse chronological order. After the data backfill is complete, you can specify a date or date range, and a node range to run task flows.
   * 
   * @param request - BackFillRequest
   * @returns BackFillResponse
   */
  async backFill(request: BackFillRequest): Promise<BackFillResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.backFillWithOptions(request, runtime);
  }

  /**
   * 批量新建湖仓表分区
   * 
   * @param tmpReq - BatchCreateDataLakePartitionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BatchCreateDataLakePartitionsResponse
   */
  async batchCreateDataLakePartitionsWithOptions(tmpReq: BatchCreateDataLakePartitionsRequest, runtime: $dara.RuntimeOptions): Promise<BatchCreateDataLakePartitionsResponse> {
    tmpReq.validate();
    let request = new BatchCreateDataLakePartitionsShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.partitionInputs)) {
      request.partitionInputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.partitionInputs, "PartitionInputs", "json");
    }

    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.ifNotExists)) {
      query["IfNotExists"] = request.ifNotExists;
    }

    if (!$dara.isNull(request.needResult)) {
      query["NeedResult"] = request.needResult;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.partitionInputsShrink)) {
      body["PartitionInputs"] = request.partitionInputsShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "BatchCreateDataLakePartitions",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<BatchCreateDataLakePartitionsResponse>(await this.callApi(params, req, runtime), new BatchCreateDataLakePartitionsResponse({}));
    } else {
      return $dara.cast<BatchCreateDataLakePartitionsResponse>(await this.execute(params, req, runtime), new BatchCreateDataLakePartitionsResponse({}));
    }

  }

  /**
   * 批量新建湖仓表分区
   * 
   * @param request - BatchCreateDataLakePartitionsRequest
   * @returns BatchCreateDataLakePartitionsResponse
   */
  async batchCreateDataLakePartitions(request: BatchCreateDataLakePartitionsRequest): Promise<BatchCreateDataLakePartitionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.batchCreateDataLakePartitionsWithOptions(request, runtime);
  }

  /**
   * 批量删除湖仓表分区
   * 
   * @param request - BatchDeleteDataLakePartitionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BatchDeleteDataLakePartitionsResponse
   */
  async batchDeleteDataLakePartitionsWithOptions(request: BatchDeleteDataLakePartitionsRequest, runtime: $dara.RuntimeOptions): Promise<BatchDeleteDataLakePartitionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.ifExists)) {
      query["IfExists"] = request.ifExists;
    }

    if (!$dara.isNull(request.partitionValuesList)) {
      query["PartitionValuesList"] = request.partitionValuesList;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "BatchDeleteDataLakePartitions",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<BatchDeleteDataLakePartitionsResponse>(await this.callApi(params, req, runtime), new BatchDeleteDataLakePartitionsResponse({}));
    } else {
      return $dara.cast<BatchDeleteDataLakePartitionsResponse>(await this.execute(params, req, runtime), new BatchDeleteDataLakePartitionsResponse({}));
    }

  }

  /**
   * 批量删除湖仓表分区
   * 
   * @param request - BatchDeleteDataLakePartitionsRequest
   * @returns BatchDeleteDataLakePartitionsResponse
   */
  async batchDeleteDataLakePartitions(request: BatchDeleteDataLakePartitionsRequest): Promise<BatchDeleteDataLakePartitionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.batchDeleteDataLakePartitionsWithOptions(request, runtime);
  }

  /**
   * 批量更新湖仓表分区
   * 
   * @param tmpReq - BatchUpdateDataLakePartitionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BatchUpdateDataLakePartitionsResponse
   */
  async batchUpdateDataLakePartitionsWithOptions(tmpReq: BatchUpdateDataLakePartitionsRequest, runtime: $dara.RuntimeOptions): Promise<BatchUpdateDataLakePartitionsResponse> {
    tmpReq.validate();
    let request = new BatchUpdateDataLakePartitionsShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.partitionInputs)) {
      request.partitionInputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.partitionInputs, "PartitionInputs", "json");
    }

    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.partitionInputsShrink)) {
      body["PartitionInputs"] = request.partitionInputsShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "BatchUpdateDataLakePartitions",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<BatchUpdateDataLakePartitionsResponse>(await this.callApi(params, req, runtime), new BatchUpdateDataLakePartitionsResponse({}));
    } else {
      return $dara.cast<BatchUpdateDataLakePartitionsResponse>(await this.execute(params, req, runtime), new BatchUpdateDataLakePartitionsResponse({}));
    }

  }

  /**
   * 批量更新湖仓表分区
   * 
   * @param request - BatchUpdateDataLakePartitionsRequest
   * @returns BatchUpdateDataLakePartitionsResponse
   */
  async batchUpdateDataLakePartitions(request: BatchUpdateDataLakePartitionsRequest): Promise<BatchUpdateDataLakePartitionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.batchUpdateDataLakePartitionsWithOptions(request, runtime);
  }

  /**
   * Purchases a pay-as-you-go Data Management (DMS) resource.
   * 
   * @param request - BuyPayAsYouGoOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BuyPayAsYouGoOrderResponse
   */
  async buyPayAsYouGoOrderWithOptions(request: BuyPayAsYouGoOrderRequest, runtime: $dara.RuntimeOptions): Promise<BuyPayAsYouGoOrderResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.commodityType)) {
      query["CommodityType"] = request.commodityType;
    }

    if (!$dara.isNull(request.insNum)) {
      query["InsNum"] = request.insNum;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.versionType)) {
      query["VersionType"] = request.versionType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "BuyPayAsYouGoOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<BuyPayAsYouGoOrderResponse>(await this.callApi(params, req, runtime), new BuyPayAsYouGoOrderResponse({}));
    } else {
      return $dara.cast<BuyPayAsYouGoOrderResponse>(await this.execute(params, req, runtime), new BuyPayAsYouGoOrderResponse({}));
    }

  }

  /**
   * Purchases a pay-as-you-go Data Management (DMS) resource.
   * 
   * @param request - BuyPayAsYouGoOrderRequest
   * @returns BuyPayAsYouGoOrderResponse
   */
  async buyPayAsYouGoOrder(request: BuyPayAsYouGoOrderRequest): Promise<BuyPayAsYouGoOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.buyPayAsYouGoOrderWithOptions(request, runtime);
  }

  /**
   * Adjusts the sensitivity level of one or more fields.
   * 
   * @param request - ChangeColumnSecLevelRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ChangeColumnSecLevelResponse
   */
  async changeColumnSecLevelWithOptions(request: ChangeColumnSecLevelRequest, runtime: $dara.RuntimeOptions): Promise<ChangeColumnSecLevelResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.columnName)) {
      query["ColumnName"] = request.columnName;
    }

    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.isLogic)) {
      query["IsLogic"] = request.isLogic;
    }

    if (!$dara.isNull(request.newLevel)) {
      query["NewLevel"] = request.newLevel;
    }

    if (!$dara.isNull(request.schemaName)) {
      query["SchemaName"] = request.schemaName;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ChangeColumnSecLevel",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ChangeColumnSecLevelResponse>(await this.callApi(params, req, runtime), new ChangeColumnSecLevelResponse({}));
    } else {
      return $dara.cast<ChangeColumnSecLevelResponse>(await this.execute(params, req, runtime), new ChangeColumnSecLevelResponse({}));
    }

  }

  /**
   * Adjusts the sensitivity level of one or more fields.
   * 
   * @param request - ChangeColumnSecLevelRequest
   * @returns ChangeColumnSecLevelResponse
   */
  async changeColumnSecLevel(request: ChangeColumnSecLevelRequest): Promise<ChangeColumnSecLevelResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.changeColumnSecLevelWithOptions(request, runtime);
  }

  /**
   * 修改字段敏感序列
   * 
   * @param request - ChangeColumnSecurityLevelRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ChangeColumnSecurityLevelResponse
   */
  async changeColumnSecurityLevelWithOptions(request: ChangeColumnSecurityLevelRequest, runtime: $dara.RuntimeOptions): Promise<ChangeColumnSecurityLevelResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.columnName)) {
      query["ColumnName"] = request.columnName;
    }

    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.isLogic)) {
      query["IsLogic"] = request.isLogic;
    }

    if (!$dara.isNull(request.newSensitivityLevel)) {
      query["NewSensitivityLevel"] = request.newSensitivityLevel;
    }

    if (!$dara.isNull(request.schemaName)) {
      query["SchemaName"] = request.schemaName;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ChangeColumnSecurityLevel",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ChangeColumnSecurityLevelResponse>(await this.callApi(params, req, runtime), new ChangeColumnSecurityLevelResponse({}));
    } else {
      return $dara.cast<ChangeColumnSecurityLevelResponse>(await this.execute(params, req, runtime), new ChangeColumnSecurityLevelResponse({}));
    }

  }

  /**
   * 修改字段敏感序列
   * 
   * @param request - ChangeColumnSecurityLevelRequest
   * @returns ChangeColumnSecurityLevelResponse
   */
  async changeColumnSecurityLevel(request: ChangeColumnSecurityLevelRequest): Promise<ChangeColumnSecurityLevelResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.changeColumnSecurityLevelWithOptions(request, runtime);
  }

  /**
   * 移交数仓开发任务流
   * 
   * @remarks
   * Usage notes:
   * *   If you call this operation to transfer the ownership of a published task flow, the ownership transfer does not take effect.
   * *   You can call the [ReDeployLhDagVersion](https://help.aliyun.com/document_detail/424712.html) operation to redeploy a published version of a task flow.
   * 
   * @param request - ChangeLhDagOwnerRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ChangeLhDagOwnerResponse
   */
  async changeLhDagOwnerWithOptions(request: ChangeLhDagOwnerRequest, runtime: $dara.RuntimeOptions): Promise<ChangeLhDagOwnerResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.ownerUserId)) {
      query["OwnerUserId"] = request.ownerUserId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ChangeLhDagOwner",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ChangeLhDagOwnerResponse>(await this.callApi(params, req, runtime), new ChangeLhDagOwnerResponse({}));
    } else {
      return $dara.cast<ChangeLhDagOwnerResponse>(await this.execute(params, req, runtime), new ChangeLhDagOwnerResponse({}));
    }

  }

  /**
   * 移交数仓开发任务流
   * 
   * @remarks
   * Usage notes:
   * *   If you call this operation to transfer the ownership of a published task flow, the ownership transfer does not take effect.
   * *   You can call the [ReDeployLhDagVersion](https://help.aliyun.com/document_detail/424712.html) operation to redeploy a published version of a task flow.
   * 
   * @param request - ChangeLhDagOwnerRequest
   * @returns ChangeLhDagOwnerResponse
   */
  async changeLhDagOwner(request: ChangeLhDagOwnerRequest): Promise<ChangeLhDagOwnerResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.changeLhDagOwnerWithOptions(request, runtime);
  }

  /**
   * Closes a ticket.
   * 
   * @param request - CloseOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CloseOrderResponse
   */
  async closeOrderWithOptions(request: CloseOrderRequest, runtime: $dara.RuntimeOptions): Promise<CloseOrderResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.closeReason)) {
      query["CloseReason"] = request.closeReason;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CloseOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CloseOrderResponse>(await this.callApi(params, req, runtime), new CloseOrderResponse({}));
    } else {
      return $dara.cast<CloseOrderResponse>(await this.execute(params, req, runtime), new CloseOrderResponse({}));
    }

  }

  /**
   * Closes a ticket.
   * 
   * @param request - CloseOrderRequest
   * @returns CloseOrderResponse
   */
  async closeOrder(request: CloseOrderRequest): Promise<CloseOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.closeOrderWithOptions(request, runtime);
  }

  /**
   * 创建权限策略授权
   * 
   * @param request - CreateAbacAuthorizationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAbacAuthorizationResponse
   */
  async createAbacAuthorizationWithOptions(request: CreateAbacAuthorizationRequest, runtime: $dara.RuntimeOptions): Promise<CreateAbacAuthorizationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.identityType)) {
      query["IdentityType"] = request.identityType;
    }

    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    if (!$dara.isNull(request.roleId)) {
      query["RoleId"] = request.roleId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAbacAuthorization",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateAbacAuthorizationResponse>(await this.callApi(params, req, runtime), new CreateAbacAuthorizationResponse({}));
    } else {
      return $dara.cast<CreateAbacAuthorizationResponse>(await this.execute(params, req, runtime), new CreateAbacAuthorizationResponse({}));
    }

  }

  /**
   * 创建权限策略授权
   * 
   * @param request - CreateAbacAuthorizationRequest
   * @returns CreateAbacAuthorizationResponse
   */
  async createAbacAuthorization(request: CreateAbacAuthorizationRequest): Promise<CreateAbacAuthorizationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAbacAuthorizationWithOptions(request, runtime);
  }

  /**
   * 创建权限策略
   * 
   * @param request - CreateAbacPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAbacPolicyResponse
   */
  async createAbacPolicyWithOptions(request: CreateAbacPolicyRequest, runtime: $dara.RuntimeOptions): Promise<CreateAbacPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.abacPolicyContent)) {
      query["AbacPolicyContent"] = request.abacPolicyContent;
    }

    if (!$dara.isNull(request.abacPolicyDesc)) {
      query["AbacPolicyDesc"] = request.abacPolicyDesc;
    }

    if (!$dara.isNull(request.abacPolicyName)) {
      query["AbacPolicyName"] = request.abacPolicyName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAbacPolicy",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateAbacPolicyResponse>(await this.callApi(params, req, runtime), new CreateAbacPolicyResponse({}));
    } else {
      return $dara.cast<CreateAbacPolicyResponse>(await this.execute(params, req, runtime), new CreateAbacPolicyResponse({}));
    }

  }

  /**
   * 创建权限策略
   * 
   * @param request - CreateAbacPolicyRequest
   * @returns CreateAbacPolicyResponse
   */
  async createAbacPolicy(request: CreateAbacPolicyRequest): Promise<CreateAbacPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAbacPolicyWithOptions(request, runtime);
  }

  /**
   * Creates a permission template
   * 
   * @remarks
   * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
   * 
   * @param request - CreateAuthorityTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAuthorityTemplateResponse
   */
  async createAuthorityTemplateWithOptions(request: CreateAuthorityTemplateRequest, runtime: $dara.RuntimeOptions): Promise<CreateAuthorityTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAuthorityTemplate",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateAuthorityTemplateResponse>(await this.callApi(params, req, runtime), new CreateAuthorityTemplateResponse({}));
    } else {
      return $dara.cast<CreateAuthorityTemplateResponse>(await this.execute(params, req, runtime), new CreateAuthorityTemplateResponse({}));
    }

  }

  /**
   * Creates a permission template
   * 
   * @remarks
   * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
   * 
   * @param request - CreateAuthorityTemplateRequest
   * @returns CreateAuthorityTemplateResponse
   */
  async createAuthorityTemplate(request: CreateAuthorityTemplateRequest): Promise<CreateAuthorityTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAuthorityTemplateWithOptions(request, runtime);
  }

  /**
   * Creates a data archiving ticket to archive data to destinations such as dedicated storage space or ApsaraDB RDS for MySQL instances.
   * 
   * @remarks
   * You can call this API operation only for database instances that are managed in Security Collaboration mode.
   * 
   * @param tmpReq - CreateDataArchiveOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDataArchiveOrderResponse
   */
  async createDataArchiveOrderWithOptions(tmpReq: CreateDataArchiveOrderRequest, runtime: $dara.RuntimeOptions): Promise<CreateDataArchiveOrderResponse> {
    tmpReq.validate();
    let request = new CreateDataArchiveOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.param)) {
      request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, "Param", "json");
    }

    if (!$dara.isNull(tmpReq.relatedUserList)) {
      request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, "RelatedUserList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.paramShrink)) {
      query["Param"] = request.paramShrink;
    }

    if (!$dara.isNull(request.parentId)) {
      query["ParentId"] = request.parentId;
    }

    if (!$dara.isNull(request.pluginType)) {
      query["PluginType"] = request.pluginType;
    }

    if (!$dara.isNull(request.relatedUserListShrink)) {
      query["RelatedUserList"] = request.relatedUserListShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDataArchiveOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDataArchiveOrderResponse>(await this.callApi(params, req, runtime), new CreateDataArchiveOrderResponse({}));
    } else {
      return $dara.cast<CreateDataArchiveOrderResponse>(await this.execute(params, req, runtime), new CreateDataArchiveOrderResponse({}));
    }

  }

  /**
   * Creates a data archiving ticket to archive data to destinations such as dedicated storage space or ApsaraDB RDS for MySQL instances.
   * 
   * @remarks
   * You can call this API operation only for database instances that are managed in Security Collaboration mode.
   * 
   * @param request - CreateDataArchiveOrderRequest
   * @returns CreateDataArchiveOrderResponse
   */
  async createDataArchiveOrder(request: CreateDataArchiveOrderRequest): Promise<CreateDataArchiveOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDataArchiveOrderWithOptions(request, runtime);
  }

  /**
   * Creates a ticket for changing data in Data Management (DMS).
   * 
   * @remarks
   * For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
   * 
   * @param tmpReq - CreateDataCorrectOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDataCorrectOrderResponse
   */
  async createDataCorrectOrderWithOptions(tmpReq: CreateDataCorrectOrderRequest, runtime: $dara.RuntimeOptions): Promise<CreateDataCorrectOrderResponse> {
    tmpReq.validate();
    let request = new CreateDataCorrectOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.param)) {
      request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, "Param", "json");
    }

    if (!$dara.isNull(tmpReq.relatedUserList)) {
      request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, "RelatedUserList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.attachmentKey)) {
      query["AttachmentKey"] = request.attachmentKey;
    }

    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.paramShrink)) {
      query["Param"] = request.paramShrink;
    }

    if (!$dara.isNull(request.realLoginUserUid)) {
      query["RealLoginUserUid"] = request.realLoginUserUid;
    }

    if (!$dara.isNull(request.relatedUserListShrink)) {
      query["RelatedUserList"] = request.relatedUserListShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDataCorrectOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDataCorrectOrderResponse>(await this.callApi(params, req, runtime), new CreateDataCorrectOrderResponse({}));
    } else {
      return $dara.cast<CreateDataCorrectOrderResponse>(await this.execute(params, req, runtime), new CreateDataCorrectOrderResponse({}));
    }

  }

  /**
   * Creates a ticket for changing data in Data Management (DMS).
   * 
   * @remarks
   * For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
   * 
   * @param request - CreateDataCorrectOrderRequest
   * @returns CreateDataCorrectOrderResponse
   */
  async createDataCorrectOrder(request: CreateDataCorrectOrderRequest): Promise<CreateDataCorrectOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDataCorrectOrderWithOptions(request, runtime);
  }

  /**
   * Creates a ticket for clearing historical data.
   * 
   * @remarks
   * For more information about the historical data cleaning, see [Clear historical data](https://help.aliyun.com/document_detail/162507.html).
   * This operation can be used only for MySQL databases.
   * 
   * @param tmpReq - CreateDataCronClearOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDataCronClearOrderResponse
   */
  async createDataCronClearOrderWithOptions(tmpReq: CreateDataCronClearOrderRequest, runtime: $dara.RuntimeOptions): Promise<CreateDataCronClearOrderResponse> {
    tmpReq.validate();
    let request = new CreateDataCronClearOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.param)) {
      request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, "Param", "json");
    }

    if (!$dara.isNull(tmpReq.relatedUserList)) {
      request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, "RelatedUserList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.attachmentKey)) {
      query["AttachmentKey"] = request.attachmentKey;
    }

    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.paramShrink)) {
      query["Param"] = request.paramShrink;
    }

    if (!$dara.isNull(request.relatedUserListShrink)) {
      query["RelatedUserList"] = request.relatedUserListShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDataCronClearOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDataCronClearOrderResponse>(await this.callApi(params, req, runtime), new CreateDataCronClearOrderResponse({}));
    } else {
      return $dara.cast<CreateDataCronClearOrderResponse>(await this.execute(params, req, runtime), new CreateDataCronClearOrderResponse({}));
    }

  }

  /**
   * Creates a ticket for clearing historical data.
   * 
   * @remarks
   * For more information about the historical data cleaning, see [Clear historical data](https://help.aliyun.com/document_detail/162507.html).
   * This operation can be used only for MySQL databases.
   * 
   * @param request - CreateDataCronClearOrderRequest
   * @returns CreateDataCronClearOrderResponse
   */
  async createDataCronClearOrder(request: CreateDataCronClearOrderRequest): Promise<CreateDataCronClearOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDataCronClearOrderWithOptions(request, runtime);
  }

  /**
   * Creates a ticket to export an SQL result set.
   * 
   * @param tmpReq - CreateDataExportOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDataExportOrderResponse
   */
  async createDataExportOrderWithOptions(tmpReq: CreateDataExportOrderRequest, runtime: $dara.RuntimeOptions): Promise<CreateDataExportOrderResponse> {
    tmpReq.validate();
    let request = new CreateDataExportOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.pluginParam)) {
      request.pluginParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pluginParam, "PluginParam", "json");
    }

    if (!$dara.isNull(tmpReq.relatedUserList)) {
      request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, "RelatedUserList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.attachmentKey)) {
      query["AttachmentKey"] = request.attachmentKey;
    }

    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.parentId)) {
      query["ParentId"] = request.parentId;
    }

    if (!$dara.isNull(request.pluginParamShrink)) {
      query["PluginParam"] = request.pluginParamShrink;
    }

    if (!$dara.isNull(request.realLoginUserUid)) {
      query["RealLoginUserUid"] = request.realLoginUserUid;
    }

    if (!$dara.isNull(request.relatedUserListShrink)) {
      query["RelatedUserList"] = request.relatedUserListShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDataExportOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDataExportOrderResponse>(await this.callApi(params, req, runtime), new CreateDataExportOrderResponse({}));
    } else {
      return $dara.cast<CreateDataExportOrderResponse>(await this.execute(params, req, runtime), new CreateDataExportOrderResponse({}));
    }

  }

  /**
   * Creates a ticket to export an SQL result set.
   * 
   * @param request - CreateDataExportOrderRequest
   * @returns CreateDataExportOrderResponse
   */
  async createDataExportOrder(request: CreateDataExportOrderRequest): Promise<CreateDataExportOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDataExportOrderWithOptions(request, runtime);
  }

  /**
   * Creates a ticket for importing data to Data Management (DMS).
   * 
   * @remarks
   * For more information about the Large Data Import feature, see [Import data](https://help.aliyun.com/document_detail/161439.html).
   * 
   * @param tmpReq - CreateDataImportOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDataImportOrderResponse
   */
  async createDataImportOrderWithOptions(tmpReq: CreateDataImportOrderRequest, runtime: $dara.RuntimeOptions): Promise<CreateDataImportOrderResponse> {
    tmpReq.validate();
    let request = new CreateDataImportOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.param)) {
      request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, "Param", "json");
    }

    if (!$dara.isNull(tmpReq.relatedUserList)) {
      request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, "RelatedUserList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.attachmentKey)) {
      query["AttachmentKey"] = request.attachmentKey;
    }

    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.paramShrink)) {
      query["Param"] = request.paramShrink;
    }

    if (!$dara.isNull(request.relatedUserListShrink)) {
      query["RelatedUserList"] = request.relatedUserListShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDataImportOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDataImportOrderResponse>(await this.callApi(params, req, runtime), new CreateDataImportOrderResponse({}));
    } else {
      return $dara.cast<CreateDataImportOrderResponse>(await this.execute(params, req, runtime), new CreateDataImportOrderResponse({}));
    }

  }

  /**
   * Creates a ticket for importing data to Data Management (DMS).
   * 
   * @remarks
   * For more information about the Large Data Import feature, see [Import data](https://help.aliyun.com/document_detail/161439.html).
   * 
   * @param request - CreateDataImportOrderRequest
   * @returns CreateDataImportOrderResponse
   */
  async createDataImportOrder(request: CreateDataImportOrderRequest): Promise<CreateDataImportOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDataImportOrderWithOptions(request, runtime);
  }

  /**
   * 新建湖仓数据库
   * 
   * @param tmpReq - CreateDataLakeDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDataLakeDatabaseResponse
   */
  async createDataLakeDatabaseWithOptions(tmpReq: CreateDataLakeDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<CreateDataLakeDatabaseResponse> {
    tmpReq.validate();
    let request = new CreateDataLakeDatabaseShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.parameters)) {
      request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, "Parameters", "json");
    }

    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.location)) {
      query["Location"] = request.location;
    }

    if (!$dara.isNull(request.parametersShrink)) {
      query["Parameters"] = request.parametersShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDataLakeDatabase",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDataLakeDatabaseResponse>(await this.callApi(params, req, runtime), new CreateDataLakeDatabaseResponse({}));
    } else {
      return $dara.cast<CreateDataLakeDatabaseResponse>(await this.execute(params, req, runtime), new CreateDataLakeDatabaseResponse({}));
    }

  }

  /**
   * 新建湖仓数据库
   * 
   * @param request - CreateDataLakeDatabaseRequest
   * @returns CreateDataLakeDatabaseResponse
   */
  async createDataLakeDatabase(request: CreateDataLakeDatabaseRequest): Promise<CreateDataLakeDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDataLakeDatabaseWithOptions(request, runtime);
  }

  /**
   * 新建湖仓表分区
   * 
   * @param tmpReq - CreateDataLakePartitionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDataLakePartitionResponse
   */
  async createDataLakePartitionWithOptions(tmpReq: CreateDataLakePartitionRequest, runtime: $dara.RuntimeOptions): Promise<CreateDataLakePartitionResponse> {
    tmpReq.validate();
    let request = new CreateDataLakePartitionShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.partitionInput)) {
      request.partitionInputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.partitionInput, "PartitionInput", "json");
    }

    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.ifNotExists)) {
      query["IfNotExists"] = request.ifNotExists;
    }

    if (!$dara.isNull(request.needResult)) {
      query["NeedResult"] = request.needResult;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.partitionInputShrink)) {
      body["PartitionInput"] = request.partitionInputShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDataLakePartition",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDataLakePartitionResponse>(await this.callApi(params, req, runtime), new CreateDataLakePartitionResponse({}));
    } else {
      return $dara.cast<CreateDataLakePartitionResponse>(await this.execute(params, req, runtime), new CreateDataLakePartitionResponse({}));
    }

  }

  /**
   * 新建湖仓表分区
   * 
   * @param request - CreateDataLakePartitionRequest
   * @returns CreateDataLakePartitionResponse
   */
  async createDataLakePartition(request: CreateDataLakePartitionRequest): Promise<CreateDataLakePartitionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDataLakePartitionWithOptions(request, runtime);
  }

  /**
   * 新建湖仓表
   * 
   * @param tmpReq - CreateDataLakeTableRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDataLakeTableResponse
   */
  async createDataLakeTableWithOptions(tmpReq: CreateDataLakeTableRequest, runtime: $dara.RuntimeOptions): Promise<CreateDataLakeTableResponse> {
    tmpReq.validate();
    let request = new CreateDataLakeTableShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.tableInput)) {
      request.tableInputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tableInput, "TableInput", "json");
    }

    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.tableInputShrink)) {
      body["TableInput"] = request.tableInputShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDataLakeTable",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDataLakeTableResponse>(await this.callApi(params, req, runtime), new CreateDataLakeTableResponse({}));
    } else {
      return $dara.cast<CreateDataLakeTableResponse>(await this.execute(params, req, runtime), new CreateDataLakeTableResponse({}));
    }

  }

  /**
   * 新建湖仓表
   * 
   * @param request - CreateDataLakeTableRequest
   * @returns CreateDataLakeTableResponse
   */
  async createDataLakeTable(request: CreateDataLakeTableRequest): Promise<CreateDataLakeTableResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDataLakeTableWithOptions(request, runtime);
  }

  /**
   * Creates a data tracking ticket.
   * 
   * @remarks
   * This operation is available only for instances that are managed in Security Collaboration mode.
   * 
   * @param tmpReq - CreateDataTrackOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDataTrackOrderResponse
   */
  async createDataTrackOrderWithOptions(tmpReq: CreateDataTrackOrderRequest, runtime: $dara.RuntimeOptions): Promise<CreateDataTrackOrderResponse> {
    tmpReq.validate();
    let request = new CreateDataTrackOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.param)) {
      request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, "Param", "json");
    }

    if (!$dara.isNull(tmpReq.relatedUserList)) {
      request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, "RelatedUserList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.paramShrink)) {
      query["Param"] = request.paramShrink;
    }

    if (!$dara.isNull(request.relatedUserListShrink)) {
      query["RelatedUserList"] = request.relatedUserListShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDataTrackOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDataTrackOrderResponse>(await this.callApi(params, req, runtime), new CreateDataTrackOrderResponse({}));
    } else {
      return $dara.cast<CreateDataTrackOrderResponse>(await this.execute(params, req, runtime), new CreateDataTrackOrderResponse({}));
    }

  }

  /**
   * Creates a data tracking ticket.
   * 
   * @remarks
   * This operation is available only for instances that are managed in Security Collaboration mode.
   * 
   * @param request - CreateDataTrackOrderRequest
   * @returns CreateDataTrackOrderResponse
   */
  async createDataTrackOrder(request: CreateDataTrackOrderRequest): Promise<CreateDataTrackOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDataTrackOrderWithOptions(request, runtime);
  }

  /**
   * Creates a database export ticket.
   * 
   * @param tmpReq - CreateDatabaseExportOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDatabaseExportOrderResponse
   */
  async createDatabaseExportOrderWithOptions(tmpReq: CreateDatabaseExportOrderRequest, runtime: $dara.RuntimeOptions): Promise<CreateDatabaseExportOrderResponse> {
    tmpReq.validate();
    let request = new CreateDatabaseExportOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.pluginParam)) {
      request.pluginParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pluginParam, "PluginParam", "json");
    }

    if (!$dara.isNull(tmpReq.relatedUserList)) {
      request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, "RelatedUserList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.attachmentKey)) {
      query["AttachmentKey"] = request.attachmentKey;
    }

    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.parentId)) {
      query["ParentId"] = request.parentId;
    }

    if (!$dara.isNull(request.pluginParamShrink)) {
      query["PluginParam"] = request.pluginParamShrink;
    }

    if (!$dara.isNull(request.relatedUserListShrink)) {
      query["RelatedUserList"] = request.relatedUserListShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDatabaseExportOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDatabaseExportOrderResponse>(await this.callApi(params, req, runtime), new CreateDatabaseExportOrderResponse({}));
    } else {
      return $dara.cast<CreateDatabaseExportOrderResponse>(await this.execute(params, req, runtime), new CreateDatabaseExportOrderResponse({}));
    }

  }

  /**
   * Creates a database export ticket.
   * 
   * @param request - CreateDatabaseExportOrderRequest
   * @returns CreateDatabaseExportOrderResponse
   */
  async createDatabaseExportOrder(request: CreateDatabaseExportOrderRequest): Promise<CreateDatabaseExportOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDatabaseExportOrderWithOptions(request, runtime);
  }

  /**
   * 用于创建DIFY实例及相关资源，支持自定义配置。
   * 
   * @remarks
   * ## 请求说明
   * - `workspaceOption` 参数指示是否新建工作空间，默认使用已有工作空间。
   * - 如果选择新建工作空间 (`CreateNewInstance`)，则必须提供 `workspaceName` 和 `workspaceDescription`。
   * - `vpcId`, `VSwitchID`, `zoneId`, `regionCode`, `ResourceQuota`, `Replicas`, `storageType`, `dbInstanceClass`, `dbEngineVersion`, `kvstoreEngineVersion` 是必填项。
   * - 当 `storageType` 为 `oss` 时，需要指定 `ossBucketResourceId` 和 `ossPath`。
   * - 如果需要新建数据库实例，则必须提供 `instanceAccount` 和 `instancePassword`。
   * - 预付费模式下，`PayPeriodType` 和 `PayPeriod` 必须填写。
   * - 可以通过设置 `dryRun` 为 `true` 来执行预检查而不实际创建实例。
   * 
   * @param request - CreateDifyInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDifyInstanceResponse
   */
  async createDifyInstanceWithOptions(request: CreateDifyInstanceRequest, runtime: $dara.RuntimeOptions): Promise<CreateDifyInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.adbpgInstanceMode)) {
      query["AdbpgInstanceMode"] = request.adbpgInstanceMode;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.databaseOption)) {
      query["DatabaseOption"] = request.databaseOption;
    }

    if (!$dara.isNull(request.dbEngineType)) {
      query["DbEngineType"] = request.dbEngineType;
    }

    if (!$dara.isNull(request.dbEngineVersion)) {
      query["DbEngineVersion"] = request.dbEngineVersion;
    }

    if (!$dara.isNull(request.dbInstanceAccount)) {
      query["DbInstanceAccount"] = request.dbInstanceAccount;
    }

    if (!$dara.isNull(request.dbInstanceCategory)) {
      query["DbInstanceCategory"] = request.dbInstanceCategory;
    }

    if (!$dara.isNull(request.dbInstanceClass)) {
      query["DbInstanceClass"] = request.dbInstanceClass;
    }

    if (!$dara.isNull(request.dbInstancePassword)) {
      query["DbInstancePassword"] = request.dbInstancePassword;
    }

    if (!$dara.isNull(request.dbResourceId)) {
      query["DbResourceId"] = request.dbResourceId;
    }

    if (!$dara.isNull(request.dbStorageSize)) {
      query["DbStorageSize"] = request.dbStorageSize;
    }

    if (!$dara.isNull(request.dbStorageType)) {
      query["DbStorageType"] = request.dbStorageType;
    }

    if (!$dara.isNull(request.dryRun)) {
      query["DryRun"] = request.dryRun;
    }

    if (!$dara.isNull(request.kvStoreAccount)) {
      query["KvStoreAccount"] = request.kvStoreAccount;
    }

    if (!$dara.isNull(request.kvStoreEngineVersion)) {
      query["KvStoreEngineVersion"] = request.kvStoreEngineVersion;
    }

    if (!$dara.isNull(request.kvStoreInstanceClass)) {
      query["KvStoreInstanceClass"] = request.kvStoreInstanceClass;
    }

    if (!$dara.isNull(request.kvStoreNodeType)) {
      query["KvStoreNodeType"] = request.kvStoreNodeType;
    }

    if (!$dara.isNull(request.kvStoreOption)) {
      query["KvStoreOption"] = request.kvStoreOption;
    }

    if (!$dara.isNull(request.kvStorePassword)) {
      query["KvStorePassword"] = request.kvStorePassword;
    }

    if (!$dara.isNull(request.kvStoreResourceId)) {
      query["KvStoreResourceId"] = request.kvStoreResourceId;
    }

    if (!$dara.isNull(request.kvStoreType)) {
      query["KvStoreType"] = request.kvStoreType;
    }

    if (!$dara.isNull(request.ossPath)) {
      query["OssPath"] = request.ossPath;
    }

    if (!$dara.isNull(request.ossResourceId)) {
      query["OssResourceId"] = request.ossResourceId;
    }

    if (!$dara.isNull(request.payPeriod)) {
      query["PayPeriod"] = request.payPeriod;
    }

    if (!$dara.isNull(request.payPeriodType)) {
      query["PayPeriodType"] = request.payPeriodType;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.replicas)) {
      query["Replicas"] = request.replicas;
    }

    if (!$dara.isNull(request.resourceQuota)) {
      query["ResourceQuota"] = request.resourceQuota;
    }

    if (!$dara.isNull(request.securityGroupId)) {
      query["SecurityGroupId"] = request.securityGroupId;
    }

    if (!$dara.isNull(request.segDiskPerformanceLevel)) {
      query["SegDiskPerformanceLevel"] = request.segDiskPerformanceLevel;
    }

    if (!$dara.isNull(request.segNodeNum)) {
      query["SegNodeNum"] = request.segNodeNum;
    }

    if (!$dara.isNull(request.storageType)) {
      query["StorageType"] = request.storageType;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.vectordbAccount)) {
      query["VectordbAccount"] = request.vectordbAccount;
    }

    if (!$dara.isNull(request.vectordbCategory)) {
      query["VectordbCategory"] = request.vectordbCategory;
    }

    if (!$dara.isNull(request.vectordbEngineVersion)) {
      query["VectordbEngineVersion"] = request.vectordbEngineVersion;
    }

    if (!$dara.isNull(request.vectordbInstanceSpec)) {
      query["VectordbInstanceSpec"] = request.vectordbInstanceSpec;
    }

    if (!$dara.isNull(request.vectordbOption)) {
      query["VectordbOption"] = request.vectordbOption;
    }

    if (!$dara.isNull(request.vectordbPassword)) {
      query["VectordbPassword"] = request.vectordbPassword;
    }

    if (!$dara.isNull(request.vectordbResourceId)) {
      query["VectordbResourceId"] = request.vectordbResourceId;
    }

    if (!$dara.isNull(request.vectordbStorageSize)) {
      query["VectordbStorageSize"] = request.vectordbStorageSize;
    }

    if (!$dara.isNull(request.vectordbStorageType)) {
      query["VectordbStorageType"] = request.vectordbStorageType;
    }

    if (!$dara.isNull(request.vectordbType)) {
      query["VectordbType"] = request.vectordbType;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    if (!$dara.isNull(request.workspaceDescription)) {
      query["WorkspaceDescription"] = request.workspaceDescription;
    }

    if (!$dara.isNull(request.workspaceId)) {
      query["WorkspaceId"] = request.workspaceId;
    }

    if (!$dara.isNull(request.workspaceName)) {
      query["WorkspaceName"] = request.workspaceName;
    }

    if (!$dara.isNull(request.workspaceOption)) {
      query["WorkspaceOption"] = request.workspaceOption;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDifyInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDifyInstanceResponse>(await this.callApi(params, req, runtime), new CreateDifyInstanceResponse({}));
    } else {
      return $dara.cast<CreateDifyInstanceResponse>(await this.execute(params, req, runtime), new CreateDifyInstanceResponse({}));
    }

  }

  /**
   * 用于创建DIFY实例及相关资源，支持自定义配置。
   * 
   * @remarks
   * ## 请求说明
   * - `workspaceOption` 参数指示是否新建工作空间，默认使用已有工作空间。
   * - 如果选择新建工作空间 (`CreateNewInstance`)，则必须提供 `workspaceName` 和 `workspaceDescription`。
   * - `vpcId`, `VSwitchID`, `zoneId`, `regionCode`, `ResourceQuota`, `Replicas`, `storageType`, `dbInstanceClass`, `dbEngineVersion`, `kvstoreEngineVersion` 是必填项。
   * - 当 `storageType` 为 `oss` 时，需要指定 `ossBucketResourceId` 和 `ossPath`。
   * - 如果需要新建数据库实例，则必须提供 `instanceAccount` 和 `instancePassword`。
   * - 预付费模式下，`PayPeriodType` 和 `PayPeriod` 必须填写。
   * - 可以通过设置 `dryRun` 为 `true` 来执行预检查而不实际创建实例。
   * 
   * @param request - CreateDifyInstanceRequest
   * @returns CreateDifyInstanceResponse
   */
  async createDifyInstance(request: CreateDifyInstanceRequest): Promise<CreateDifyInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDifyInstanceWithOptions(request, runtime);
  }

  /**
   * 创建无锁变更工单
   * 
   * @remarks
   * For more information about the lock-free change feature, see [Overview](https://help.aliyun.com/document_detail/207847.html).
   * This operation can be used only for instances that are managed in Stable Change or Security Collaboration mode. For more information, see [Change data without the need to lock tables](https://help.aliyun.com/document_detail/96145.html) and [Change schemas without locking tables](https://help.aliyun.com/document_detail/98373.html).
   * 
   * @param tmpReq - CreateFreeLockCorrectOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateFreeLockCorrectOrderResponse
   */
  async createFreeLockCorrectOrderWithOptions(tmpReq: CreateFreeLockCorrectOrderRequest, runtime: $dara.RuntimeOptions): Promise<CreateFreeLockCorrectOrderResponse> {
    tmpReq.validate();
    let request = new CreateFreeLockCorrectOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.param)) {
      request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, "Param", "json");
    }

    if (!$dara.isNull(tmpReq.relatedUserList)) {
      request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, "RelatedUserList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.attachmentKey)) {
      query["AttachmentKey"] = request.attachmentKey;
    }

    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.paramShrink)) {
      query["Param"] = request.paramShrink;
    }

    if (!$dara.isNull(request.realLoginUserUid)) {
      query["RealLoginUserUid"] = request.realLoginUserUid;
    }

    if (!$dara.isNull(request.relatedUserListShrink)) {
      query["RelatedUserList"] = request.relatedUserListShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateFreeLockCorrectOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateFreeLockCorrectOrderResponse>(await this.callApi(params, req, runtime), new CreateFreeLockCorrectOrderResponse({}));
    } else {
      return $dara.cast<CreateFreeLockCorrectOrderResponse>(await this.execute(params, req, runtime), new CreateFreeLockCorrectOrderResponse({}));
    }

  }

  /**
   * 创建无锁变更工单
   * 
   * @remarks
   * For more information about the lock-free change feature, see [Overview](https://help.aliyun.com/document_detail/207847.html).
   * This operation can be used only for instances that are managed in Stable Change or Security Collaboration mode. For more information, see [Change data without the need to lock tables](https://help.aliyun.com/document_detail/96145.html) and [Change schemas without locking tables](https://help.aliyun.com/document_detail/98373.html).
   * 
   * @param request - CreateFreeLockCorrectOrderRequest
   * @returns CreateFreeLockCorrectOrderResponse
   */
  async createFreeLockCorrectOrder(request: CreateFreeLockCorrectOrderRequest): Promise<CreateFreeLockCorrectOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createFreeLockCorrectOrderWithOptions(request, runtime);
  }

  /**
   * Creates a workspace for data warehouse development in Data Management (DMS).
   * 
   * @remarks
   *   The workspace name must be unique within a tenant. If a workspace with the same name already exists within the tenant, the call may fail.
   * *   You can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to query whether a workspace with a specific name already exists as a DMS administrator or database administrator (DBA).
   * 
   * @param request - CreateLakeHouseSpaceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateLakeHouseSpaceResponse
   */
  async createLakeHouseSpaceWithOptions(request: CreateLakeHouseSpaceRequest, runtime: $dara.RuntimeOptions): Promise<CreateLakeHouseSpaceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.devDbId)) {
      query["DevDbId"] = request.devDbId;
    }

    if (!$dara.isNull(request.dwDbType)) {
      query["DwDbType"] = request.dwDbType;
    }

    if (!$dara.isNull(request.mode)) {
      query["Mode"] = request.mode;
    }

    if (!$dara.isNull(request.prodDbId)) {
      query["ProdDbId"] = request.prodDbId;
    }

    if (!$dara.isNull(request.spaceConfig)) {
      query["SpaceConfig"] = request.spaceConfig;
    }

    if (!$dara.isNull(request.spaceName)) {
      query["SpaceName"] = request.spaceName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateLakeHouseSpace",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateLakeHouseSpaceResponse>(await this.callApi(params, req, runtime), new CreateLakeHouseSpaceResponse({}));
    } else {
      return $dara.cast<CreateLakeHouseSpaceResponse>(await this.execute(params, req, runtime), new CreateLakeHouseSpaceResponse({}));
    }

  }

  /**
   * Creates a workspace for data warehouse development in Data Management (DMS).
   * 
   * @remarks
   *   The workspace name must be unique within a tenant. If a workspace with the same name already exists within the tenant, the call may fail.
   * *   You can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to query whether a workspace with a specific name already exists as a DMS administrator or database administrator (DBA).
   * 
   * @param request - CreateLakeHouseSpaceRequest
   * @returns CreateLakeHouseSpaceResponse
   */
  async createLakeHouseSpace(request: CreateLakeHouseSpaceRequest): Promise<CreateLakeHouseSpaceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createLakeHouseSpaceWithOptions(request, runtime);
  }

  /**
   * Creates a logical database in Database Management (DMS).
   * 
   * @param tmpReq - CreateLogicDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateLogicDatabaseResponse
   */
  async createLogicDatabaseWithOptions(tmpReq: CreateLogicDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<CreateLogicDatabaseResponse> {
    tmpReq.validate();
    let request = new CreateLogicDatabaseShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.databaseIds)) {
      request.databaseIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.databaseIds, "DatabaseIds", "json");
    }

    let query = { };
    if (!$dara.isNull(request.alias)) {
      query["Alias"] = request.alias;
    }

    if (!$dara.isNull(request.databaseIdsShrink)) {
      query["DatabaseIds"] = request.databaseIdsShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateLogicDatabase",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateLogicDatabaseResponse>(await this.callApi(params, req, runtime), new CreateLogicDatabaseResponse({}));
    } else {
      return $dara.cast<CreateLogicDatabaseResponse>(await this.execute(params, req, runtime), new CreateLogicDatabaseResponse({}));
    }

  }

  /**
   * Creates a logical database in Database Management (DMS).
   * 
   * @param request - CreateLogicDatabaseRequest
   * @returns CreateLogicDatabaseResponse
   */
  async createLogicDatabase(request: CreateLogicDatabaseRequest): Promise<CreateLogicDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createLogicDatabaseWithOptions(request, runtime);
  }

  /**
   * Creates a ticket in Data Management (DMS).
   * 
   * @remarks
   * To facilitate ticket creation, you can call the following dedicated operations to create some types of tickets:
   * *   [CreateDataCorrectOrder](https://help.aliyun.com/document_detail/208388.html): creates a regular data change ticket.
   * *   [CreateDataCronClearOrder](https://help.aliyun.com/document_detail/208385.html): creates a ticket to clear historical data.
   * *   [CreateDataImportOrder](https://help.aliyun.com/document_detail/208387.html): creates a data import ticket.
   * *   [CreateFreeLockCorrectOrder](https://help.aliyun.com/document_detail/208386.html): creates a lock-free change ticket.
   * 
   * @param tmpReq - CreateOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateOrderResponse
   */
  async createOrderWithOptions(tmpReq: CreateOrderRequest, runtime: $dara.RuntimeOptions): Promise<CreateOrderResponse> {
    tmpReq.validate();
    let request = new CreateOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.pluginParam)) {
      request.pluginParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pluginParam, "PluginParam", "json");
    }

    let query = { };
    if (!$dara.isNull(request.attachmentKey)) {
      query["AttachmentKey"] = request.attachmentKey;
    }

    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.pluginType)) {
      query["PluginType"] = request.pluginType;
    }

    if (!$dara.isNull(request.relatedUserList)) {
      query["RelatedUserList"] = request.relatedUserList;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.pluginParamShrink)) {
      body["PluginParam"] = request.pluginParamShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateOrderResponse>(await this.callApi(params, req, runtime), new CreateOrderResponse({}));
    } else {
      return $dara.cast<CreateOrderResponse>(await this.execute(params, req, runtime), new CreateOrderResponse({}));
    }

  }

  /**
   * Creates a ticket in Data Management (DMS).
   * 
   * @remarks
   * To facilitate ticket creation, you can call the following dedicated operations to create some types of tickets:
   * *   [CreateDataCorrectOrder](https://help.aliyun.com/document_detail/208388.html): creates a regular data change ticket.
   * *   [CreateDataCronClearOrder](https://help.aliyun.com/document_detail/208385.html): creates a ticket to clear historical data.
   * *   [CreateDataImportOrder](https://help.aliyun.com/document_detail/208387.html): creates a data import ticket.
   * *   [CreateFreeLockCorrectOrder](https://help.aliyun.com/document_detail/208386.html): creates a lock-free change ticket.
   * 
   * @param request - CreateOrderRequest
   * @returns CreateOrderResponse
   */
  async createOrder(request: CreateOrderRequest): Promise<CreateOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createOrderWithOptions(request, runtime);
  }

  /**
   * 创建可编程对象变更工单
   * 
   * @param tmpReq - CreateProcCorrectOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateProcCorrectOrderResponse
   */
  async createProcCorrectOrderWithOptions(tmpReq: CreateProcCorrectOrderRequest, runtime: $dara.RuntimeOptions): Promise<CreateProcCorrectOrderResponse> {
    tmpReq.validate();
    let request = new CreateProcCorrectOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.param)) {
      request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, "Param", "json");
    }

    if (!$dara.isNull(tmpReq.relatedUserList)) {
      request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, "RelatedUserList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.attachmentKey)) {
      query["AttachmentKey"] = request.attachmentKey;
    }

    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.paramShrink)) {
      query["Param"] = request.paramShrink;
    }

    if (!$dara.isNull(request.relatedUserListShrink)) {
      query["RelatedUserList"] = request.relatedUserListShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateProcCorrectOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateProcCorrectOrderResponse>(await this.callApi(params, req, runtime), new CreateProcCorrectOrderResponse({}));
    } else {
      return $dara.cast<CreateProcCorrectOrderResponse>(await this.execute(params, req, runtime), new CreateProcCorrectOrderResponse({}));
    }

  }

  /**
   * 创建可编程对象变更工单
   * 
   * @param request - CreateProcCorrectOrderRequest
   * @returns CreateProcCorrectOrderResponse
   */
  async createProcCorrectOrder(request: CreateProcCorrectOrderRequest): Promise<CreateProcCorrectOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createProcCorrectOrderWithOptions(request, runtime);
  }

  /**
   * Enables the secure access proxy feature for a database instance.
   * 
   * @remarks
   * - The database instance runs the MySQL or MariaDB database engine. For example, the database instance can be an ApsaraDB RDS for MySQL instance, a PolarDB for MySQL cluster, a Distributed Relational Database Service (DRDS) cluster, or an AnalyticDB for MySQL cluster. The database instance can also be a self-managed MySQL or MariaDB database, or a MySQL or MariaDB database in a third-party cloud.
   * - The database instance resides in the China (Hangzhou) or China (Beijing) region.
   * - You are a Data Management (DMS) administrator, a database administrator (DBA), or the owner of the database instance.
   * 
   * @param request - CreateProxyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateProxyResponse
   */
  async createProxyWithOptions(request: CreateProxyRequest, runtime: $dara.RuntimeOptions): Promise<CreateProxyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.password)) {
      query["Password"] = request.password;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.username)) {
      query["Username"] = request.username;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateProxy",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateProxyResponse>(await this.callApi(params, req, runtime), new CreateProxyResponse({}));
    } else {
      return $dara.cast<CreateProxyResponse>(await this.execute(params, req, runtime), new CreateProxyResponse({}));
    }

  }

  /**
   * Enables the secure access proxy feature for a database instance.
   * 
   * @remarks
   * - The database instance runs the MySQL or MariaDB database engine. For example, the database instance can be an ApsaraDB RDS for MySQL instance, a PolarDB for MySQL cluster, a Distributed Relational Database Service (DRDS) cluster, or an AnalyticDB for MySQL cluster. The database instance can also be a self-managed MySQL or MariaDB database, or a MySQL or MariaDB database in a third-party cloud.
   * - The database instance resides in the China (Hangzhou) or China (Beijing) region.
   * - You are a Data Management (DMS) administrator, a database administrator (DBA), or the owner of the database instance.
   * 
   * @param request - CreateProxyRequest
   * @returns CreateProxyResponse
   */
  async createProxy(request: CreateProxyRequest): Promise<CreateProxyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createProxyWithOptions(request, runtime);
  }

  /**
   * You can call the CreateProxyAccess to authorize users to access the DB instance through the Data Security Protection agent.
   * 
   * @remarks
   * - The data security protection feature is enabled for the instance.
   * - Your user role is the administrator role, DBA role, or the owner of data security protection for the current instance.
   * 
   * @param request - CreateProxyAccessRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateProxyAccessResponse
   */
  async createProxyAccessWithOptions(request: CreateProxyAccessRequest, runtime: $dara.RuntimeOptions): Promise<CreateProxyAccessResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.indepAccount)) {
      query["IndepAccount"] = request.indepAccount;
    }

    if (!$dara.isNull(request.indepPassword)) {
      query["IndepPassword"] = request.indepPassword;
    }

    if (!$dara.isNull(request.proxyId)) {
      query["ProxyId"] = request.proxyId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateProxyAccess",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateProxyAccessResponse>(await this.callApi(params, req, runtime), new CreateProxyAccessResponse({}));
    } else {
      return $dara.cast<CreateProxyAccessResponse>(await this.execute(params, req, runtime), new CreateProxyAccessResponse({}));
    }

  }

  /**
   * You can call the CreateProxyAccess to authorize users to access the DB instance through the Data Security Protection agent.
   * 
   * @remarks
   * - The data security protection feature is enabled for the instance.
   * - Your user role is the administrator role, DBA role, or the owner of data security protection for the current instance.
   * 
   * @param request - CreateProxyAccessRequest
   * @returns CreateProxyAccessResponse
   */
  async createProxyAccess(request: CreateProxyAccessRequest): Promise<CreateProxyAccessResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createProxyAccessWithOptions(request, runtime);
  }

  /**
   * Executes a schema design ticket.
   * 
   * @param request - CreatePublishGroupTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreatePublishGroupTaskResponse
   */
  async createPublishGroupTaskWithOptions(request: CreatePublishGroupTaskRequest, runtime: $dara.RuntimeOptions): Promise<CreatePublishGroupTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.logic)) {
      query["Logic"] = request.logic;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.planTime)) {
      query["PlanTime"] = request.planTime;
    }

    if (!$dara.isNull(request.publishStrategy)) {
      query["PublishStrategy"] = request.publishStrategy;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreatePublishGroupTask",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreatePublishGroupTaskResponse>(await this.callApi(params, req, runtime), new CreatePublishGroupTaskResponse({}));
    } else {
      return $dara.cast<CreatePublishGroupTaskResponse>(await this.execute(params, req, runtime), new CreatePublishGroupTaskResponse({}));
    }

  }

  /**
   * Executes a schema design ticket.
   * 
   * @param request - CreatePublishGroupTaskRequest
   * @returns CreatePublishGroupTaskResponse
   */
  async createPublishGroupTask(request: CreatePublishGroupTaskRequest): Promise<CreatePublishGroupTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createPublishGroupTaskWithOptions(request, runtime);
  }

  /**
   * Creates a SQL review ticket.
   * 
   * @remarks
   * You can call this operation only for database instances that are managed in Security Collaboration mode.
   * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
   * 
   * @param tmpReq - CreateSQLReviewOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateSQLReviewOrderResponse
   */
  async createSQLReviewOrderWithOptions(tmpReq: CreateSQLReviewOrderRequest, runtime: $dara.RuntimeOptions): Promise<CreateSQLReviewOrderResponse> {
    tmpReq.validate();
    let request = new CreateSQLReviewOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.param)) {
      request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, "Param", "json");
    }

    if (!$dara.isNull(tmpReq.relatedUserList)) {
      request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, "RelatedUserList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.paramShrink)) {
      query["Param"] = request.paramShrink;
    }

    if (!$dara.isNull(request.relatedUserListShrink)) {
      query["RelatedUserList"] = request.relatedUserListShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateSQLReviewOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateSQLReviewOrderResponse>(await this.callApi(params, req, runtime), new CreateSQLReviewOrderResponse({}));
    } else {
      return $dara.cast<CreateSQLReviewOrderResponse>(await this.execute(params, req, runtime), new CreateSQLReviewOrderResponse({}));
    }

  }

  /**
   * Creates a SQL review ticket.
   * 
   * @remarks
   * You can call this operation only for database instances that are managed in Security Collaboration mode.
   * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
   * 
   * @param request - CreateSQLReviewOrderRequest
   * @returns CreateSQLReviewOrderResponse
   */
  async createSQLReviewOrder(request: CreateSQLReviewOrderRequest): Promise<CreateSQLReviewOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createSQLReviewOrderWithOptions(request, runtime);
  }

  /**
   * Creates a business scenario to group task flows by business scenario.
   * 
   * @param request - CreateScenarioRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateScenarioResponse
   */
  async createScenarioWithOptions(request: CreateScenarioRequest, runtime: $dara.RuntimeOptions): Promise<CreateScenarioResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.scenarioName)) {
      query["ScenarioName"] = request.scenarioName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateScenario",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateScenarioResponse>(await this.callApi(params, req, runtime), new CreateScenarioResponse({}));
    } else {
      return $dara.cast<CreateScenarioResponse>(await this.execute(params, req, runtime), new CreateScenarioResponse({}));
    }

  }

  /**
   * Creates a business scenario to group task flows by business scenario.
   * 
   * @param request - CreateScenarioRequest
   * @returns CreateScenarioResponse
   */
  async createScenario(request: CreateScenarioRequest): Promise<CreateScenarioResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createScenarioWithOptions(request, runtime);
  }

  /**
   * Creates a security rule set.
   * 
   * @param request - CreateStandardGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateStandardGroupResponse
   */
  async createStandardGroupWithOptions(request: CreateStandardGroupRequest, runtime: $dara.RuntimeOptions): Promise<CreateStandardGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbType)) {
      query["DbType"] = request.dbType;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.groupName)) {
      query["GroupName"] = request.groupName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateStandardGroup",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateStandardGroupResponse>(await this.callApi(params, req, runtime), new CreateStandardGroupResponse({}));
    } else {
      return $dara.cast<CreateStandardGroupResponse>(await this.execute(params, req, runtime), new CreateStandardGroupResponse({}));
    }

  }

  /**
   * Creates a security rule set.
   * 
   * @param request - CreateStandardGroupRequest
   * @returns CreateStandardGroupResponse
   */
  async createStandardGroup(request: CreateStandardGroupRequest): Promise<CreateStandardGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createStandardGroupWithOptions(request, runtime);
  }

  /**
   * Creates a schema synchronization ticket.
   * 
   * @param tmpReq - CreateStructSyncOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateStructSyncOrderResponse
   */
  async createStructSyncOrderWithOptions(tmpReq: CreateStructSyncOrderRequest, runtime: $dara.RuntimeOptions): Promise<CreateStructSyncOrderResponse> {
    tmpReq.validate();
    let request = new CreateStructSyncOrderShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.param)) {
      request.paramShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.param, "Param", "json");
    }

    if (!$dara.isNull(tmpReq.relatedUserList)) {
      request.relatedUserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedUserList, "RelatedUserList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.attachmentKey)) {
      query["AttachmentKey"] = request.attachmentKey;
    }

    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.paramShrink)) {
      query["Param"] = request.paramShrink;
    }

    if (!$dara.isNull(request.relatedUserListShrink)) {
      query["RelatedUserList"] = request.relatedUserListShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateStructSyncOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateStructSyncOrderResponse>(await this.callApi(params, req, runtime), new CreateStructSyncOrderResponse({}));
    } else {
      return $dara.cast<CreateStructSyncOrderResponse>(await this.execute(params, req, runtime), new CreateStructSyncOrderResponse({}));
    }

  }

  /**
   * Creates a schema synchronization ticket.
   * 
   * @param request - CreateStructSyncOrderRequest
   * @returns CreateStructSyncOrderResponse
   */
  async createStructSyncOrder(request: CreateStructSyncOrderRequest): Promise<CreateStructSyncOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createStructSyncOrderWithOptions(request, runtime);
  }

  /**
   * Creates a task node for a task flow.
   * 
   * @param request - CreateTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateTaskResponse
   */
  async createTaskWithOptions(request: CreateTaskRequest, runtime: $dara.RuntimeOptions): Promise<CreateTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.graphParam)) {
      query["GraphParam"] = request.graphParam;
    }

    if (!$dara.isNull(request.nodeContent)) {
      query["NodeContent"] = request.nodeContent;
    }

    if (!$dara.isNull(request.nodeName)) {
      query["NodeName"] = request.nodeName;
    }

    if (!$dara.isNull(request.nodeOutput)) {
      query["NodeOutput"] = request.nodeOutput;
    }

    if (!$dara.isNull(request.nodeType)) {
      query["NodeType"] = request.nodeType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.timeVariables)) {
      query["TimeVariables"] = request.timeVariables;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateTask",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateTaskResponse>(await this.callApi(params, req, runtime), new CreateTaskResponse({}));
    } else {
      return $dara.cast<CreateTaskResponse>(await this.execute(params, req, runtime), new CreateTaskResponse({}));
    }

  }

  /**
   * Creates a task node for a task flow.
   * 
   * @param request - CreateTaskRequest
   * @returns CreateTaskResponse
   */
  async createTask(request: CreateTaskRequest): Promise<CreateTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createTaskWithOptions(request, runtime);
  }

  /**
   * Creates a task flow.
   * 
   * @param request - CreateTaskFlowRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateTaskFlowResponse
   */
  async createTaskFlowWithOptions(request: CreateTaskFlowRequest, runtime: $dara.RuntimeOptions): Promise<CreateTaskFlowResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagName)) {
      query["DagName"] = request.dagName;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateTaskFlow",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateTaskFlowResponse>(await this.callApi(params, req, runtime), new CreateTaskFlowResponse({}));
    } else {
      return $dara.cast<CreateTaskFlowResponse>(await this.execute(params, req, runtime), new CreateTaskFlowResponse({}));
    }

  }

  /**
   * Creates a task flow.
   * 
   * @param request - CreateTaskFlowRequest
   * @returns CreateTaskFlowResponse
   */
  async createTaskFlow(request: CreateTaskFlowRequest): Promise<CreateTaskFlowResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createTaskFlowWithOptions(request, runtime);
  }

  /**
   * 创建上传附件任务
   * 
   * @param request - CreateUploadFileJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateUploadFileJobResponse
   */
  async createUploadFileJobWithOptions(request: CreateUploadFileJobRequest, runtime: $dara.RuntimeOptions): Promise<CreateUploadFileJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fileName)) {
      query["FileName"] = request.fileName;
    }

    if (!$dara.isNull(request.fileSource)) {
      query["FileSource"] = request.fileSource;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.uploadURL)) {
      query["UploadURL"] = request.uploadURL;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateUploadFileJob",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateUploadFileJobResponse>(await this.callApi(params, req, runtime), new CreateUploadFileJobResponse({}));
    } else {
      return $dara.cast<CreateUploadFileJobResponse>(await this.execute(params, req, runtime), new CreateUploadFileJobResponse({}));
    }

  }

  /**
   * 创建上传附件任务
   * 
   * @param request - CreateUploadFileJobRequest
   * @returns CreateUploadFileJobResponse
   */
  async createUploadFileJob(request: CreateUploadFileJobRequest): Promise<CreateUploadFileJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createUploadFileJobWithOptions(request, runtime);
  }

  /**
   * Creates a task to upload an Object Storage Service (OSS) file and obtain the key of the task.
   * 
   * @param tmpReq - CreateUploadOSSFileJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateUploadOSSFileJobResponse
   */
  async createUploadOSSFileJobWithOptions(tmpReq: CreateUploadOSSFileJobRequest, runtime: $dara.RuntimeOptions): Promise<CreateUploadOSSFileJobResponse> {
    tmpReq.validate();
    let request = new CreateUploadOSSFileJobShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.uploadTarget)) {
      request.uploadTargetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.uploadTarget, "UploadTarget", "json");
    }

    let query = { };
    if (!$dara.isNull(request.fileName)) {
      query["FileName"] = request.fileName;
    }

    if (!$dara.isNull(request.fileSource)) {
      query["FileSource"] = request.fileSource;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.uploadTargetShrink)) {
      query["UploadTarget"] = request.uploadTargetShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateUploadOSSFileJob",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateUploadOSSFileJobResponse>(await this.callApi(params, req, runtime), new CreateUploadOSSFileJobResponse({}));
    } else {
      return $dara.cast<CreateUploadOSSFileJobResponse>(await this.execute(params, req, runtime), new CreateUploadOSSFileJobResponse({}));
    }

  }

  /**
   * Creates a task to upload an Object Storage Service (OSS) file and obtain the key of the task.
   * 
   * @param request - CreateUploadOSSFileJobRequest
   * @returns CreateUploadOSSFileJobResponse
   */
  async createUploadOSSFileJob(request: CreateUploadOSSFileJobRequest): Promise<CreateUploadOSSFileJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createUploadOSSFileJobWithOptions(request, runtime);
  }

  /**
   * 删除权限策略授权
   * 
   * @param request - DeleteAbacAuthorizationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteAbacAuthorizationResponse
   */
  async deleteAbacAuthorizationWithOptions(request: DeleteAbacAuthorizationRequest, runtime: $dara.RuntimeOptions): Promise<DeleteAbacAuthorizationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.authorizationId)) {
      query["AuthorizationId"] = request.authorizationId;
    }

    if (!$dara.isNull(request.identityType)) {
      query["IdentityType"] = request.identityType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteAbacAuthorization",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteAbacAuthorizationResponse>(await this.callApi(params, req, runtime), new DeleteAbacAuthorizationResponse({}));
    } else {
      return $dara.cast<DeleteAbacAuthorizationResponse>(await this.execute(params, req, runtime), new DeleteAbacAuthorizationResponse({}));
    }

  }

  /**
   * 删除权限策略授权
   * 
   * @param request - DeleteAbacAuthorizationRequest
   * @returns DeleteAbacAuthorizationResponse
   */
  async deleteAbacAuthorization(request: DeleteAbacAuthorizationRequest): Promise<DeleteAbacAuthorizationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteAbacAuthorizationWithOptions(request, runtime);
  }

  /**
   * 删除权限策略
   * 
   * @param request - DeleteAbacPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteAbacPolicyResponse
   */
  async deleteAbacPolicyWithOptions(request: DeleteAbacPolicyRequest, runtime: $dara.RuntimeOptions): Promise<DeleteAbacPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.abacPolicyId)) {
      query["AbacPolicyId"] = request.abacPolicyId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteAbacPolicy",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteAbacPolicyResponse>(await this.callApi(params, req, runtime), new DeleteAbacPolicyResponse({}));
    } else {
      return $dara.cast<DeleteAbacPolicyResponse>(await this.execute(params, req, runtime), new DeleteAbacPolicyResponse({}));
    }

  }

  /**
   * 删除权限策略
   * 
   * @param request - DeleteAbacPolicyRequest
   * @returns DeleteAbacPolicyResponse
   */
  async deleteAbacPolicy(request: DeleteAbacPolicyRequest): Promise<DeleteAbacPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteAbacPolicyWithOptions(request, runtime);
  }

  /**
   * 删除权限模版
   * 
   * @param request - DeleteAuthorityTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteAuthorityTemplateResponse
   */
  async deleteAuthorityTemplateWithOptions(request: DeleteAuthorityTemplateRequest, runtime: $dara.RuntimeOptions): Promise<DeleteAuthorityTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteAuthorityTemplate",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteAuthorityTemplateResponse>(await this.callApi(params, req, runtime), new DeleteAuthorityTemplateResponse({}));
    } else {
      return $dara.cast<DeleteAuthorityTemplateResponse>(await this.execute(params, req, runtime), new DeleteAuthorityTemplateResponse({}));
    }

  }

  /**
   * 删除权限模版
   * 
   * @param request - DeleteAuthorityTemplateRequest
   * @returns DeleteAuthorityTemplateResponse
   */
  async deleteAuthorityTemplate(request: DeleteAuthorityTemplateRequest): Promise<DeleteAuthorityTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteAuthorityTemplateWithOptions(request, runtime);
  }

  /**
   * 删除湖仓数据库
   * 
   * @param request - DeleteDataLakeDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDataLakeDatabaseResponse
   */
  async deleteDataLakeDatabaseWithOptions(request: DeleteDataLakeDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<DeleteDataLakeDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDataLakeDatabase",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteDataLakeDatabaseResponse>(await this.callApi(params, req, runtime), new DeleteDataLakeDatabaseResponse({}));
    } else {
      return $dara.cast<DeleteDataLakeDatabaseResponse>(await this.execute(params, req, runtime), new DeleteDataLakeDatabaseResponse({}));
    }

  }

  /**
   * 删除湖仓数据库
   * 
   * @param request - DeleteDataLakeDatabaseRequest
   * @returns DeleteDataLakeDatabaseResponse
   */
  async deleteDataLakeDatabase(request: DeleteDataLakeDatabaseRequest): Promise<DeleteDataLakeDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDataLakeDatabaseWithOptions(request, runtime);
  }

  /**
   * 删除湖仓表分区
   * 
   * @param tmpReq - DeleteDataLakePartitionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDataLakePartitionResponse
   */
  async deleteDataLakePartitionWithOptions(tmpReq: DeleteDataLakePartitionRequest, runtime: $dara.RuntimeOptions): Promise<DeleteDataLakePartitionResponse> {
    tmpReq.validate();
    let request = new DeleteDataLakePartitionShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.partitionValues)) {
      request.partitionValuesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.partitionValues, "PartitionValues", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.ifExists)) {
      query["IfExists"] = request.ifExists;
    }

    if (!$dara.isNull(request.partitionValuesShrink)) {
      query["PartitionValues"] = request.partitionValuesShrink;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDataLakePartition",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteDataLakePartitionResponse>(await this.callApi(params, req, runtime), new DeleteDataLakePartitionResponse({}));
    } else {
      return $dara.cast<DeleteDataLakePartitionResponse>(await this.execute(params, req, runtime), new DeleteDataLakePartitionResponse({}));
    }

  }

  /**
   * 删除湖仓表分区
   * 
   * @param request - DeleteDataLakePartitionRequest
   * @returns DeleteDataLakePartitionResponse
   */
  async deleteDataLakePartition(request: DeleteDataLakePartitionRequest): Promise<DeleteDataLakePartitionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDataLakePartitionWithOptions(request, runtime);
  }

  /**
   * 删除湖仓表
   * 
   * @param request - DeleteDataLakeTableRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDataLakeTableResponse
   */
  async deleteDataLakeTableWithOptions(request: DeleteDataLakeTableRequest, runtime: $dara.RuntimeOptions): Promise<DeleteDataLakeTableResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDataLakeTable",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteDataLakeTableResponse>(await this.callApi(params, req, runtime), new DeleteDataLakeTableResponse({}));
    } else {
      return $dara.cast<DeleteDataLakeTableResponse>(await this.execute(params, req, runtime), new DeleteDataLakeTableResponse({}));
    }

  }

  /**
   * 删除湖仓表
   * 
   * @param request - DeleteDataLakeTableRequest
   * @returns DeleteDataLakeTableResponse
   */
  async deleteDataLakeTable(request: DeleteDataLakeTableRequest): Promise<DeleteDataLakeTableResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDataLakeTableWithOptions(request, runtime);
  }

  /**
   * Removes a database instance from Data Management (DMS).
   * 
   * @remarks
   * Note: You can call this operation only to remove a database instance from the instance list of DMS. The instance is not deleted or shut down.
   * 
   * @param request - DeleteInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteInstanceResponse
   */
  async deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: $dara.RuntimeOptions): Promise<DeleteInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.host)) {
      query["Host"] = request.host;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.sid)) {
      query["Sid"] = request.sid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteInstanceResponse>(await this.callApi(params, req, runtime), new DeleteInstanceResponse({}));
    } else {
      return $dara.cast<DeleteInstanceResponse>(await this.execute(params, req, runtime), new DeleteInstanceResponse({}));
    }

  }

  /**
   * Removes a database instance from Data Management (DMS).
   * 
   * @remarks
   * Note: You can call this operation only to remove a database instance from the instance list of DMS. The instance is not deleted or shut down.
   * 
   * @param request - DeleteInstanceRequest
   * @returns DeleteInstanceResponse
   */
  async deleteInstance(request: DeleteInstanceRequest): Promise<DeleteInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteInstanceWithOptions(request, runtime);
  }

  /**
   * Deletes a workspace.
   * 
   * @param request - DeleteLakeHouseSpaceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLakeHouseSpaceResponse
   */
  async deleteLakeHouseSpaceWithOptions(request: DeleteLakeHouseSpaceRequest, runtime: $dara.RuntimeOptions): Promise<DeleteLakeHouseSpaceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.spaceId)) {
      query["SpaceId"] = request.spaceId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLakeHouseSpace",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteLakeHouseSpaceResponse>(await this.callApi(params, req, runtime), new DeleteLakeHouseSpaceResponse({}));
    } else {
      return $dara.cast<DeleteLakeHouseSpaceResponse>(await this.execute(params, req, runtime), new DeleteLakeHouseSpaceResponse({}));
    }

  }

  /**
   * Deletes a workspace.
   * 
   * @param request - DeleteLakeHouseSpaceRequest
   * @returns DeleteLakeHouseSpaceResponse
   */
  async deleteLakeHouseSpace(request: DeleteLakeHouseSpaceRequest): Promise<DeleteLakeHouseSpaceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLakeHouseSpaceWithOptions(request, runtime);
  }

  /**
   * 删除数仓空间成员
   * 
   * @remarks
   * You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
   * You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](https://help.aliyun.com/document_detail/424761.html) operation.
   * 
   * @param tmpReq - DeleteLhMembersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLhMembersResponse
   */
  async deleteLhMembersWithOptions(tmpReq: DeleteLhMembersRequest, runtime: $dara.RuntimeOptions): Promise<DeleteLhMembersResponse> {
    tmpReq.validate();
    let request = new DeleteLhMembersShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.memberIds)) {
      request.memberIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.memberIds, "MemberIds", "json");
    }

    let query = { };
    if (!$dara.isNull(request.memberIdsShrink)) {
      query["MemberIds"] = request.memberIdsShrink;
    }

    if (!$dara.isNull(request.objectId)) {
      query["ObjectId"] = request.objectId;
    }

    if (!$dara.isNull(request.objectType)) {
      query["ObjectType"] = request.objectType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLhMembers",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteLhMembersResponse>(await this.callApi(params, req, runtime), new DeleteLhMembersResponse({}));
    } else {
      return $dara.cast<DeleteLhMembersResponse>(await this.execute(params, req, runtime), new DeleteLhMembersResponse({}));
    }

  }

  /**
   * 删除数仓空间成员
   * 
   * @remarks
   * You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
   * You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](https://help.aliyun.com/document_detail/424761.html) operation.
   * 
   * @param request - DeleteLhMembersRequest
   * @returns DeleteLhMembersResponse
   */
  async deleteLhMembers(request: DeleteLhMembersRequest): Promise<DeleteLhMembersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLhMembersWithOptions(request, runtime);
  }

  /**
   * Deletes a logical database in Database Management (DMS). This operation only deletes the specified logical database but does not delete physical databases.
   * 
   * @param request - DeleteLogicDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLogicDatabaseResponse
   */
  async deleteLogicDatabaseWithOptions(request: DeleteLogicDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<DeleteLogicDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.logicDbId)) {
      query["LogicDbId"] = request.logicDbId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLogicDatabase",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteLogicDatabaseResponse>(await this.callApi(params, req, runtime), new DeleteLogicDatabaseResponse({}));
    } else {
      return $dara.cast<DeleteLogicDatabaseResponse>(await this.execute(params, req, runtime), new DeleteLogicDatabaseResponse({}));
    }

  }

  /**
   * Deletes a logical database in Database Management (DMS). This operation only deletes the specified logical database but does not delete physical databases.
   * 
   * @param request - DeleteLogicDatabaseRequest
   * @returns DeleteLogicDatabaseResponse
   */
  async deleteLogicDatabase(request: DeleteLogicDatabaseRequest): Promise<DeleteLogicDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLogicDatabaseWithOptions(request, runtime);
  }

  /**
   * Deletes the routing algorithm of a logical table.
   * 
   * @param request - DeleteLogicTableRouteConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLogicTableRouteConfigResponse
   */
  async deleteLogicTableRouteConfigWithOptions(request: DeleteLogicTableRouteConfigRequest, runtime: $dara.RuntimeOptions): Promise<DeleteLogicTableRouteConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.routeKey)) {
      query["RouteKey"] = request.routeKey;
    }

    if (!$dara.isNull(request.tableId)) {
      query["TableId"] = request.tableId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLogicTableRouteConfig",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteLogicTableRouteConfigResponse>(await this.callApi(params, req, runtime), new DeleteLogicTableRouteConfigResponse({}));
    } else {
      return $dara.cast<DeleteLogicTableRouteConfigResponse>(await this.execute(params, req, runtime), new DeleteLogicTableRouteConfigResponse({}));
    }

  }

  /**
   * Deletes the routing algorithm of a logical table.
   * 
   * @param request - DeleteLogicTableRouteConfigRequest
   * @returns DeleteLogicTableRouteConfigResponse
   */
  async deleteLogicTableRouteConfig(request: DeleteLogicTableRouteConfigRequest): Promise<DeleteLogicTableRouteConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLogicTableRouteConfigWithOptions(request, runtime);
  }

  /**
   * You can call this operation to disable the data security protection proxy of a DB instance.
   * 
   * @remarks
   * After you disable this feature, your DB instance loses the JDBC protocol. All authorization information is recycled.
   * 
   * @param request - DeleteProxyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteProxyResponse
   */
  async deleteProxyWithOptions(request: DeleteProxyRequest, runtime: $dara.RuntimeOptions): Promise<DeleteProxyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.proxyId)) {
      query["ProxyId"] = request.proxyId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteProxy",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteProxyResponse>(await this.callApi(params, req, runtime), new DeleteProxyResponse({}));
    } else {
      return $dara.cast<DeleteProxyResponse>(await this.execute(params, req, runtime), new DeleteProxyResponse({}));
    }

  }

  /**
   * You can call this operation to disable the data security protection proxy of a DB instance.
   * 
   * @remarks
   * After you disable this feature, your DB instance loses the JDBC protocol. All authorization information is recycled.
   * 
   * @param request - DeleteProxyRequest
   * @returns DeleteProxyResponse
   */
  async deleteProxy(request: DeleteProxyRequest): Promise<DeleteProxyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteProxyWithOptions(request, runtime);
  }

  /**
   * You can call this operation to DeleteProxyAccess reclaim the data security protection authorization of the target user.
   * 
   * @param request - DeleteProxyAccessRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteProxyAccessResponse
   */
  async deleteProxyAccessWithOptions(request: DeleteProxyAccessRequest, runtime: $dara.RuntimeOptions): Promise<DeleteProxyAccessResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.proxyAccessId)) {
      query["ProxyAccessId"] = request.proxyAccessId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteProxyAccess",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteProxyAccessResponse>(await this.callApi(params, req, runtime), new DeleteProxyAccessResponse({}));
    } else {
      return $dara.cast<DeleteProxyAccessResponse>(await this.execute(params, req, runtime), new DeleteProxyAccessResponse({}));
    }

  }

  /**
   * You can call this operation to DeleteProxyAccess reclaim the data security protection authorization of the target user.
   * 
   * @param request - DeleteProxyAccessRequest
   * @returns DeleteProxyAccessResponse
   */
  async deleteProxyAccess(request: DeleteProxyAccessRequest): Promise<DeleteProxyAccessResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteProxyAccessWithOptions(request, runtime);
  }

  /**
   * Deletes a business scenario.
   * 
   * @remarks
   * When you call this operation, make sure that no task flow is specified in the business scenario.
   * 
   * @param request - DeleteScenarioRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteScenarioResponse
   */
  async deleteScenarioWithOptions(request: DeleteScenarioRequest, runtime: $dara.RuntimeOptions): Promise<DeleteScenarioResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteScenario",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteScenarioResponse>(await this.callApi(params, req, runtime), new DeleteScenarioResponse({}));
    } else {
      return $dara.cast<DeleteScenarioResponse>(await this.execute(params, req, runtime), new DeleteScenarioResponse({}));
    }

  }

  /**
   * Deletes a business scenario.
   * 
   * @remarks
   * When you call this operation, make sure that no task flow is specified in the business scenario.
   * 
   * @param request - DeleteScenarioRequest
   * @returns DeleteScenarioResponse
   */
  async deleteScenario(request: DeleteScenarioRequest): Promise<DeleteScenarioResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteScenarioWithOptions(request, runtime);
  }

  /**
   * 删除安全规则
   * 
   * @param request - DeleteStandardGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteStandardGroupResponse
   */
  async deleteStandardGroupWithOptions(request: DeleteStandardGroupRequest, runtime: $dara.RuntimeOptions): Promise<DeleteStandardGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteStandardGroup",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteStandardGroupResponse>(await this.callApi(params, req, runtime), new DeleteStandardGroupResponse({}));
    } else {
      return $dara.cast<DeleteStandardGroupResponse>(await this.execute(params, req, runtime), new DeleteStandardGroupResponse({}));
    }

  }

  /**
   * 删除安全规则
   * 
   * @param request - DeleteStandardGroupRequest
   * @returns DeleteStandardGroupResponse
   */
  async deleteStandardGroup(request: DeleteStandardGroupRequest): Promise<DeleteStandardGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteStandardGroupWithOptions(request, runtime);
  }

  /**
   * Deletes a task in a specified task flow.
   * 
   * @param request - DeleteTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteTaskResponse
   */
  async deleteTaskWithOptions(request: DeleteTaskRequest, runtime: $dara.RuntimeOptions): Promise<DeleteTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteTask",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteTaskResponse>(await this.callApi(params, req, runtime), new DeleteTaskResponse({}));
    } else {
      return $dara.cast<DeleteTaskResponse>(await this.execute(params, req, runtime), new DeleteTaskResponse({}));
    }

  }

  /**
   * Deletes a task in a specified task flow.
   * 
   * @param request - DeleteTaskRequest
   * @returns DeleteTaskResponse
   */
  async deleteTask(request: DeleteTaskRequest): Promise<DeleteTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteTaskWithOptions(request, runtime);
  }

  /**
   * Deletes a task flow.
   * 
   * @param request - DeleteTaskFlowRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteTaskFlowResponse
   */
  async deleteTaskFlowWithOptions(request: DeleteTaskFlowRequest, runtime: $dara.RuntimeOptions): Promise<DeleteTaskFlowResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteTaskFlow",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteTaskFlowResponse>(await this.callApi(params, req, runtime), new DeleteTaskFlowResponse({}));
    } else {
      return $dara.cast<DeleteTaskFlowResponse>(await this.execute(params, req, runtime), new DeleteTaskFlowResponse({}));
    }

  }

  /**
   * Deletes a task flow.
   * 
   * @param request - DeleteTaskFlowRequest
   * @returns DeleteTaskFlowResponse
   */
  async deleteTaskFlow(request: DeleteTaskFlowRequest): Promise<DeleteTaskFlowResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteTaskFlowWithOptions(request, runtime);
  }

  /**
   * Deletes task flow edges based on multiple conditions.
   * 
   * @remarks
   * This operation is used for multi-condition query. You can call it to delete the edges of a specified task flow that meet all specified conditions.
   * 
   * @param request - DeleteTaskFlowEdgesByConditionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteTaskFlowEdgesByConditionResponse
   */
  async deleteTaskFlowEdgesByConditionWithOptions(request: DeleteTaskFlowEdgesByConditionRequest, runtime: $dara.RuntimeOptions): Promise<DeleteTaskFlowEdgesByConditionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.nodeEnd)) {
      query["NodeEnd"] = request.nodeEnd;
    }

    if (!$dara.isNull(request.nodeFrom)) {
      query["NodeFrom"] = request.nodeFrom;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteTaskFlowEdgesByCondition",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteTaskFlowEdgesByConditionResponse>(await this.callApi(params, req, runtime), new DeleteTaskFlowEdgesByConditionResponse({}));
    } else {
      return $dara.cast<DeleteTaskFlowEdgesByConditionResponse>(await this.execute(params, req, runtime), new DeleteTaskFlowEdgesByConditionResponse({}));
    }

  }

  /**
   * Deletes task flow edges based on multiple conditions.
   * 
   * @remarks
   * This operation is used for multi-condition query. You can call it to delete the edges of a specified task flow that meet all specified conditions.
   * 
   * @param request - DeleteTaskFlowEdgesByConditionRequest
   * @returns DeleteTaskFlowEdgesByConditionResponse
   */
  async deleteTaskFlowEdgesByCondition(request: DeleteTaskFlowEdgesByConditionRequest): Promise<DeleteTaskFlowEdgesByConditionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteTaskFlowEdgesByConditionWithOptions(request, runtime);
  }

  /**
   * Deletes an Alibaba Cloud account that is no longer used.
   * 
   * @remarks
   * The effect of deleting a user by calling this operation is the same as that of deleting a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to delete a user that is no longer used from DMS Enterprise. After the user is deleted, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
   * >  This operation only removes the association of the Alibaba Cloud account or RAM user with DMS Enterprise of the enterprise, rather than actually deleting the Alibaba Cloud account or RAM user. After the user is deleted, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is added to DMS Enterprise again.
   * 
   * @param request - DeleteUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteUserResponse
   */
  async deleteUserWithOptions(request: DeleteUserRequest, runtime: $dara.RuntimeOptions): Promise<DeleteUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.uid)) {
      query["Uid"] = request.uid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteUser",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteUserResponse>(await this.callApi(params, req, runtime), new DeleteUserResponse({}));
    } else {
      return $dara.cast<DeleteUserResponse>(await this.execute(params, req, runtime), new DeleteUserResponse({}));
    }

  }

  /**
   * Deletes an Alibaba Cloud account that is no longer used.
   * 
   * @remarks
   * The effect of deleting a user by calling this operation is the same as that of deleting a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to delete a user that is no longer used from DMS Enterprise. After the user is deleted, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
   * >  This operation only removes the association of the Alibaba Cloud account or RAM user with DMS Enterprise of the enterprise, rather than actually deleting the Alibaba Cloud account or RAM user. After the user is deleted, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is added to DMS Enterprise again.
   * 
   * @param request - DeleteUserRequest
   * @returns DeleteUserResponse
   */
  async deleteUser(request: DeleteUserRequest): Promise<DeleteUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteUserWithOptions(request, runtime);
  }

  /**
   * 用于创建DIFY实例及相关资源，支持自定义配置。
   * 
   * @remarks
   * ## 请求说明
   * - `workspaceOption` 参数指示是否新建工作空间，默认使用已有工作空间。
   * - 如果选择新建工作空间 (`CreateNewInstance`)，则必须提供 `workspaceName` 和 `workspaceDescription`。
   * - `vpcId`, `VSwitchID`, `zoneId`, `regionCode`, `ResourceQuota`, `Replicas`, `storageType`, `dbInstanceClass`, `dbEngineVersion`, `kvstoreEngineVersion` 是必填项。
   * - 当 `storageType` 为 `oss` 时，需要指定 `ossBucketResourceId` 和 `ossPath`。
   * - 如果需要新建数据库实例，则必须提供 `instanceAccount` 和 `instancePassword`。
   * - 预付费模式下，`PayPeriodType` 和 `PayPeriod` 必须填写。
   * - 可以通过设置 `dryRun` 为 `true` 来执行预检查而不实际创建实例。
   * 
   * @param request - DescribeDifyDefaultVpcRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDifyDefaultVpcResponse
   */
  async describeDifyDefaultVpcWithOptions(request: DescribeDifyDefaultVpcRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDifyDefaultVpcResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.workspaceId)) {
      query["WorkspaceId"] = request.workspaceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDifyDefaultVpc",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeDifyDefaultVpcResponse>(await this.callApi(params, req, runtime), new DescribeDifyDefaultVpcResponse({}));
    } else {
      return $dara.cast<DescribeDifyDefaultVpcResponse>(await this.execute(params, req, runtime), new DescribeDifyDefaultVpcResponse({}));
    }

  }

  /**
   * 用于创建DIFY实例及相关资源，支持自定义配置。
   * 
   * @remarks
   * ## 请求说明
   * - `workspaceOption` 参数指示是否新建工作空间，默认使用已有工作空间。
   * - 如果选择新建工作空间 (`CreateNewInstance`)，则必须提供 `workspaceName` 和 `workspaceDescription`。
   * - `vpcId`, `VSwitchID`, `zoneId`, `regionCode`, `ResourceQuota`, `Replicas`, `storageType`, `dbInstanceClass`, `dbEngineVersion`, `kvstoreEngineVersion` 是必填项。
   * - 当 `storageType` 为 `oss` 时，需要指定 `ossBucketResourceId` 和 `ossPath`。
   * - 如果需要新建数据库实例，则必须提供 `instanceAccount` 和 `instancePassword`。
   * - 预付费模式下，`PayPeriodType` 和 `PayPeriod` 必须填写。
   * - 可以通过设置 `dryRun` 为 `true` 来执行预检查而不实际创建实例。
   * 
   * @param request - DescribeDifyDefaultVpcRequest
   * @returns DescribeDifyDefaultVpcResponse
   */
  async describeDifyDefaultVpc(request: DescribeDifyDefaultVpcRequest): Promise<DescribeDifyDefaultVpcResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDifyDefaultVpcWithOptions(request, runtime);
  }

  /**
   * You can call this operation to disable a user that is temporarily not used in Data Management (DMS) Enterprise.
   * 
   * @remarks
   * The effect of disabling a user by calling this operation is the same as that of disabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to disable a user that is temporarily not used in DMS Enterprise. After the user is disabled, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
   * >  This operation only stops the Alibaba Cloud account or RAM user from logging on to DMS Enterprise of the enterprise, rather than actually disabling the Alibaba Cloud account or RAM user. After the user is disabled, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is enabled again. The disabled user, however, still exists in DMS Enterprise.
   * 
   * @param request - DisableUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DisableUserResponse
   */
  async disableUserWithOptions(request: DisableUserRequest, runtime: $dara.RuntimeOptions): Promise<DisableUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.uid)) {
      query["Uid"] = request.uid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DisableUser",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DisableUserResponse>(await this.callApi(params, req, runtime), new DisableUserResponse({}));
    } else {
      return $dara.cast<DisableUserResponse>(await this.execute(params, req, runtime), new DisableUserResponse({}));
    }

  }

  /**
   * You can call this operation to disable a user that is temporarily not used in Data Management (DMS) Enterprise.
   * 
   * @remarks
   * The effect of disabling a user by calling this operation is the same as that of disabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to disable a user that is temporarily not used in DMS Enterprise. After the user is disabled, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
   * >  This operation only stops the Alibaba Cloud account or RAM user from logging on to DMS Enterprise of the enterprise, rather than actually disabling the Alibaba Cloud account or RAM user. After the user is disabled, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is enabled again. The disabled user, however, still exists in DMS Enterprise.
   * 
   * @param request - DisableUserRequest
   * @returns DisableUserResponse
   */
  async disableUser(request: DisableUserRequest): Promise<DisableUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.disableUserWithOptions(request, runtime);
  }

  /**
   * Downloads the parsing result of a data tracking task.
   * 
   * @param tmpReq - DownloadDataTrackResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DownloadDataTrackResultResponse
   */
  async downloadDataTrackResultWithOptions(tmpReq: DownloadDataTrackResultRequest, runtime: $dara.RuntimeOptions): Promise<DownloadDataTrackResultResponse> {
    tmpReq.validate();
    let request = new DownloadDataTrackResultShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.columnFilter)) {
      request.columnFilterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.columnFilter, "ColumnFilter", "json");
    }

    if (!$dara.isNull(tmpReq.eventIdList)) {
      request.eventIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.eventIdList, "EventIdList", "json");
    }

    if (!$dara.isNull(tmpReq.filterTableList)) {
      request.filterTableListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterTableList, "FilterTableList", "json");
    }

    if (!$dara.isNull(tmpReq.filterTypeList)) {
      request.filterTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterTypeList, "FilterTypeList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.columnFilterShrink)) {
      query["ColumnFilter"] = request.columnFilterShrink;
    }

    if (!$dara.isNull(request.eventIdListShrink)) {
      query["EventIdList"] = request.eventIdListShrink;
    }

    if (!$dara.isNull(request.filterEndTime)) {
      query["FilterEndTime"] = request.filterEndTime;
    }

    if (!$dara.isNull(request.filterStartTime)) {
      query["FilterStartTime"] = request.filterStartTime;
    }

    if (!$dara.isNull(request.filterTableListShrink)) {
      query["FilterTableList"] = request.filterTableListShrink;
    }

    if (!$dara.isNull(request.filterTypeListShrink)) {
      query["FilterTypeList"] = request.filterTypeListShrink;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.rollbackSQLType)) {
      query["RollbackSQLType"] = request.rollbackSQLType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DownloadDataTrackResult",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DownloadDataTrackResultResponse>(await this.callApi(params, req, runtime), new DownloadDataTrackResultResponse({}));
    } else {
      return $dara.cast<DownloadDataTrackResultResponse>(await this.execute(params, req, runtime), new DownloadDataTrackResultResponse({}));
    }

  }

  /**
   * Downloads the parsing result of a data tracking task.
   * 
   * @param request - DownloadDataTrackResultRequest
   * @returns DownloadDataTrackResultResponse
   */
  async downloadDataTrackResult(request: DownloadDataTrackResultRequest): Promise<DownloadDataTrackResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.downloadDataTrackResultWithOptions(request, runtime);
  }

  /**
   * Modifies the information about a logical database.
   * 
   * @param tmpReq - EditLogicDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EditLogicDatabaseResponse
   */
  async editLogicDatabaseWithOptions(tmpReq: EditLogicDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<EditLogicDatabaseResponse> {
    tmpReq.validate();
    let request = new EditLogicDatabaseShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.databaseIds)) {
      request.databaseIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.databaseIds, "DatabaseIds", "json");
    }

    let query = { };
    if (!$dara.isNull(request.alias)) {
      query["Alias"] = request.alias;
    }

    if (!$dara.isNull(request.databaseIdsShrink)) {
      query["DatabaseIds"] = request.databaseIdsShrink;
    }

    if (!$dara.isNull(request.logicDbId)) {
      query["LogicDbId"] = request.logicDbId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "EditLogicDatabase",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<EditLogicDatabaseResponse>(await this.callApi(params, req, runtime), new EditLogicDatabaseResponse({}));
    } else {
      return $dara.cast<EditLogicDatabaseResponse>(await this.execute(params, req, runtime), new EditLogicDatabaseResponse({}));
    }

  }

  /**
   * Modifies the information about a logical database.
   * 
   * @param request - EditLogicDatabaseRequest
   * @returns EditLogicDatabaseResponse
   */
  async editLogicDatabase(request: EditLogicDatabaseRequest): Promise<EditLogicDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.editLogicDatabaseWithOptions(request, runtime);
  }

  /**
   * You can call this operation to enable a user that has been disabled in Data Management (DMS) Enterprise.
   * 
   * @remarks
   * The effect of enabling a user by calling this operation is the same as that of enabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to enable a user that has been disabled in DMS Enterprise. After the user is enabled, the corresponding Alibaba Cloud account or Resource Access Management (RAM) user can continue to log on to DMS Enterprise and perform relevant operations.
   * >  This operation only enables the Alibaba Cloud account or RAM user to log on to DMS Enterprise of the enterprise and perform relevant operations, rather than granting other permissions to the Alibaba Cloud account or RAM user.
   * 
   * @param request - EnableUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EnableUserResponse
   */
  async enableUserWithOptions(request: EnableUserRequest, runtime: $dara.RuntimeOptions): Promise<EnableUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.uid)) {
      query["Uid"] = request.uid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "EnableUser",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<EnableUserResponse>(await this.callApi(params, req, runtime), new EnableUserResponse({}));
    } else {
      return $dara.cast<EnableUserResponse>(await this.execute(params, req, runtime), new EnableUserResponse({}));
    }

  }

  /**
   * You can call this operation to enable a user that has been disabled in Data Management (DMS) Enterprise.
   * 
   * @remarks
   * The effect of enabling a user by calling this operation is the same as that of enabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to enable a user that has been disabled in DMS Enterprise. After the user is enabled, the corresponding Alibaba Cloud account or Resource Access Management (RAM) user can continue to log on to DMS Enterprise and perform relevant operations.
   * >  This operation only enables the Alibaba Cloud account or RAM user to log on to DMS Enterprise of the enterprise and perform relevant operations, rather than granting other permissions to the Alibaba Cloud account or RAM user.
   * 
   * @param request - EnableUserRequest
   * @returns EnableUserResponse
   */
  async enableUser(request: EnableUserRequest): Promise<EnableUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.enableUserWithOptions(request, runtime);
  }

  /**
   * Submits a ticket for data change.
   * 
   * @param tmpReq - ExecuteDataCorrectRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExecuteDataCorrectResponse
   */
  async executeDataCorrectWithOptions(tmpReq: ExecuteDataCorrectRequest, runtime: $dara.RuntimeOptions): Promise<ExecuteDataCorrectResponse> {
    tmpReq.validate();
    let request = new ExecuteDataCorrectShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.actionDetail)) {
      request.actionDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.actionDetail, "ActionDetail", "json");
    }

    let query = { };
    if (!$dara.isNull(request.actionDetailShrink)) {
      query["ActionDetail"] = request.actionDetailShrink;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.realLoginUserUid)) {
      query["RealLoginUserUid"] = request.realLoginUserUid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExecuteDataCorrect",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ExecuteDataCorrectResponse>(await this.callApi(params, req, runtime), new ExecuteDataCorrectResponse({}));
    } else {
      return $dara.cast<ExecuteDataCorrectResponse>(await this.execute(params, req, runtime), new ExecuteDataCorrectResponse({}));
    }

  }

  /**
   * Submits a ticket for data change.
   * 
   * @param request - ExecuteDataCorrectRequest
   * @returns ExecuteDataCorrectResponse
   */
  async executeDataCorrect(request: ExecuteDataCorrectRequest): Promise<ExecuteDataCorrectResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.executeDataCorrectWithOptions(request, runtime);
  }

  /**
   * Executes a data export ticket.
   * 
   * @param tmpReq - ExecuteDataExportRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExecuteDataExportResponse
   */
  async executeDataExportWithOptions(tmpReq: ExecuteDataExportRequest, runtime: $dara.RuntimeOptions): Promise<ExecuteDataExportResponse> {
    tmpReq.validate();
    let request = new ExecuteDataExportShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.actionDetail)) {
      request.actionDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.actionDetail, "ActionDetail", "json");
    }

    let query = { };
    if (!$dara.isNull(request.actionDetailShrink)) {
      query["ActionDetail"] = request.actionDetailShrink;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.realLoginUserUid)) {
      query["RealLoginUserUid"] = request.realLoginUserUid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExecuteDataExport",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ExecuteDataExportResponse>(await this.callApi(params, req, runtime), new ExecuteDataExportResponse({}));
    } else {
      return $dara.cast<ExecuteDataExportResponse>(await this.execute(params, req, runtime), new ExecuteDataExportResponse({}));
    }

  }

  /**
   * Executes a data export ticket.
   * 
   * @param request - ExecuteDataExportRequest
   * @returns ExecuteDataExportResponse
   */
  async executeDataExport(request: ExecuteDataExportRequest): Promise<ExecuteDataExportResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.executeDataExportWithOptions(request, runtime);
  }

  /**
   * Executes SQL statements.
   * 
   * @remarks
   * You can call this operation only for instances that are managed in Security Collaboration mode.
   * 
   * @param request - ExecuteScriptRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExecuteScriptResponse
   */
  async executeScriptWithOptions(request: ExecuteScriptRequest, runtime: $dara.RuntimeOptions): Promise<ExecuteScriptResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.logic)) {
      query["Logic"] = request.logic;
    }

    if (!$dara.isNull(request.script)) {
      query["Script"] = request.script;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExecuteScript",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ExecuteScriptResponse>(await this.callApi(params, req, runtime), new ExecuteScriptResponse({}));
    } else {
      return $dara.cast<ExecuteScriptResponse>(await this.execute(params, req, runtime), new ExecuteScriptResponse({}));
    }

  }

  /**
   * Executes SQL statements.
   * 
   * @remarks
   * You can call this operation only for instances that are managed in Security Collaboration mode.
   * 
   * @param request - ExecuteScriptRequest
   * @returns ExecuteScriptResponse
   */
  async executeScript(request: ExecuteScriptRequest): Promise<ExecuteScriptResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.executeScriptWithOptions(request, runtime);
  }

  /**
   * Executes a schema synchronization task.
   * 
   * @remarks
   * If the security rules of an instance indicate that a ticket must be approved before you perform schema synchronization, you can call the [SubmitStructSyncOrderApproval](https://help.aliyun.com/document_detail/206166.html) operation to submit the ticket for approval.
   * >  You can call the [GetStructSyncJobDetail](https://help.aliyun.com/document_detail/206160.html) operation to query whether you need to submit a ticket for approval.
   * 
   * @param request - ExecuteStructSyncRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExecuteStructSyncResponse
   */
  async executeStructSyncWithOptions(request: ExecuteStructSyncRequest, runtime: $dara.RuntimeOptions): Promise<ExecuteStructSyncResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExecuteStructSync",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ExecuteStructSyncResponse>(await this.callApi(params, req, runtime), new ExecuteStructSyncResponse({}));
    } else {
      return $dara.cast<ExecuteStructSyncResponse>(await this.execute(params, req, runtime), new ExecuteStructSyncResponse({}));
    }

  }

  /**
   * Executes a schema synchronization task.
   * 
   * @remarks
   * If the security rules of an instance indicate that a ticket must be approved before you perform schema synchronization, you can call the [SubmitStructSyncOrderApproval](https://help.aliyun.com/document_detail/206166.html) operation to submit the ticket for approval.
   * >  You can call the [GetStructSyncJobDetail](https://help.aliyun.com/document_detail/206160.html) operation to query whether you need to submit a ticket for approval.
   * 
   * @param request - ExecuteStructSyncRequest
   * @returns ExecuteStructSyncResponse
   */
  async executeStructSync(request: ExecuteStructSyncRequest): Promise<ExecuteStructSyncResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.executeStructSyncWithOptions(request, runtime);
  }

  /**
   * 获取策略详情
   * 
   * @param request - GetAbacPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAbacPolicyResponse
   */
  async getAbacPolicyWithOptions(request: GetAbacPolicyRequest, runtime: $dara.RuntimeOptions): Promise<GetAbacPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.abacPolicyId)) {
      query["AbacPolicyId"] = request.abacPolicyId;
    }

    if (!$dara.isNull(request.abacPolicyName)) {
      query["AbacPolicyName"] = request.abacPolicyName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAbacPolicy",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetAbacPolicyResponse>(await this.callApi(params, req, runtime), new GetAbacPolicyResponse({}));
    } else {
      return $dara.cast<GetAbacPolicyResponse>(await this.execute(params, req, runtime), new GetAbacPolicyResponse({}));
    }

  }

  /**
   * 获取策略详情
   * 
   * @param request - GetAbacPolicyRequest
   * @returns GetAbacPolicyResponse
   */
  async getAbacPolicy(request: GetAbacPolicyRequest): Promise<GetAbacPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAbacPolicyWithOptions(request, runtime);
  }

  /**
   * Queries the approval details of a ticket.
   * 
   * @param request - GetApprovalDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetApprovalDetailResponse
   */
  async getApprovalDetailWithOptions(request: GetApprovalDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetApprovalDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.workflowInstanceId)) {
      query["WorkflowInstanceId"] = request.workflowInstanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetApprovalDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetApprovalDetailResponse>(await this.callApi(params, req, runtime), new GetApprovalDetailResponse({}));
    } else {
      return $dara.cast<GetApprovalDetailResponse>(await this.execute(params, req, runtime), new GetApprovalDetailResponse({}));
    }

  }

  /**
   * Queries the approval details of a ticket.
   * 
   * @param request - GetApprovalDetailRequest
   * @returns GetApprovalDetailResponse
   */
  async getApprovalDetail(request: GetApprovalDetailRequest): Promise<GetApprovalDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getApprovalDetailWithOptions(request, runtime);
  }

  /**
   * Queries the information about a permission template.
   * 
   * @remarks
   * You must be a Data Management (DMS) administrator or a database administrator (DBA). For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
   * 
   * @param request - GetAuthorityTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAuthorityTemplateResponse
   */
  async getAuthorityTemplateWithOptions(request: GetAuthorityTemplateRequest, runtime: $dara.RuntimeOptions): Promise<GetAuthorityTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAuthorityTemplate",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetAuthorityTemplateResponse>(await this.callApi(params, req, runtime), new GetAuthorityTemplateResponse({}));
    } else {
      return $dara.cast<GetAuthorityTemplateResponse>(await this.execute(params, req, runtime), new GetAuthorityTemplateResponse({}));
    }

  }

  /**
   * Queries the information about a permission template.
   * 
   * @remarks
   * You must be a Data Management (DMS) administrator or a database administrator (DBA). For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
   * 
   * @param request - GetAuthorityTemplateRequest
   * @returns GetAuthorityTemplateResponse
   */
  async getAuthorityTemplate(request: GetAuthorityTemplateRequest): Promise<GetAuthorityTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAuthorityTemplateWithOptions(request, runtime);
  }

  /**
   * Queries the resources in a permission template.
   * 
   * @remarks
   * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
   * 
   * @param request - GetAuthorityTemplateItemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAuthorityTemplateItemResponse
   */
  async getAuthorityTemplateItemWithOptions(request: GetAuthorityTemplateItemRequest, runtime: $dara.RuntimeOptions): Promise<GetAuthorityTemplateItemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAuthorityTemplateItem",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetAuthorityTemplateItemResponse>(await this.callApi(params, req, runtime), new GetAuthorityTemplateItemResponse({}));
    } else {
      return $dara.cast<GetAuthorityTemplateItemResponse>(await this.execute(params, req, runtime), new GetAuthorityTemplateItemResponse({}));
    }

  }

  /**
   * Queries the resources in a permission template.
   * 
   * @remarks
   * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
   * 
   * @param request - GetAuthorityTemplateItemRequest
   * @returns GetAuthorityTemplateItemResponse
   */
  async getAuthorityTemplateItem(request: GetAuthorityTemplateItemRequest): Promise<GetAuthorityTemplateItemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAuthorityTemplateItemWithOptions(request, runtime);
  }

  /**
   * 获取实例绑定的分类分级模板
   * 
   * @param request - GetClassificationTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetClassificationTemplateResponse
   */
  async getClassificationTemplateWithOptions(request: GetClassificationTemplateRequest, runtime: $dara.RuntimeOptions): Promise<GetClassificationTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetClassificationTemplate",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetClassificationTemplateResponse>(await this.callApi(params, req, runtime), new GetClassificationTemplateResponse({}));
    } else {
      return $dara.cast<GetClassificationTemplateResponse>(await this.execute(params, req, runtime), new GetClassificationTemplateResponse({}));
    }

  }

  /**
   * 获取实例绑定的分类分级模板
   * 
   * @param request - GetClassificationTemplateRequest
   * @returns GetClassificationTemplateResponse
   */
  async getClassificationTemplate(request: GetClassificationTemplateRequest): Promise<GetClassificationTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getClassificationTemplateWithOptions(request, runtime);
  }

  /**
   * Queries the log that records the scheduling details of an SQL task.
   * 
   * @param request - GetDBTaskSQLJobLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDBTaskSQLJobLogResponse
   */
  async getDBTaskSQLJobLogWithOptions(request: GetDBTaskSQLJobLogRequest, runtime: $dara.RuntimeOptions): Promise<GetDBTaskSQLJobLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDBTaskSQLJobLog",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDBTaskSQLJobLogResponse>(await this.callApi(params, req, runtime), new GetDBTaskSQLJobLogResponse({}));
    } else {
      return $dara.cast<GetDBTaskSQLJobLogResponse>(await this.execute(params, req, runtime), new GetDBTaskSQLJobLogResponse({}));
    }

  }

  /**
   * Queries the log that records the scheduling details of an SQL task.
   * 
   * @param request - GetDBTaskSQLJobLogRequest
   * @returns GetDBTaskSQLJobLogResponse
   */
  async getDBTaskSQLJobLog(request: GetDBTaskSQLJobLogRequest): Promise<GetDBTaskSQLJobLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDBTaskSQLJobLogWithOptions(request, runtime);
  }

  /**
   * Queries the topologies of a logical database and its physical database shards.
   * 
   * @param request - GetDBTopologyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDBTopologyResponse
   */
  async getDBTopologyWithOptions(request: GetDBTopologyRequest, runtime: $dara.RuntimeOptions): Promise<GetDBTopologyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.logicDbId)) {
      query["LogicDbId"] = request.logicDbId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDBTopology",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDBTopologyResponse>(await this.callApi(params, req, runtime), new GetDBTopologyResponse({}));
    } else {
      return $dara.cast<GetDBTopologyResponse>(await this.execute(params, req, runtime), new GetDBTopologyResponse({}));
    }

  }

  /**
   * Queries the topologies of a logical database and its physical database shards.
   * 
   * @param request - GetDBTopologyRequest
   * @returns GetDBTopologyResponse
   */
  async getDBTopology(request: GetDBTopologyRequest): Promise<GetDBTopologyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDBTopologyWithOptions(request, runtime);
  }

  /**
   * Queries the statistics on the number of data archiving tickets, including the number of tickets of successful data archiving, failed data archiving,and in-progress data archiving, and the total number of data archiving tickets.
   * 
   * @param request - GetDataArchiveCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataArchiveCountResponse
   */
  async getDataArchiveCountWithOptions(request: GetDataArchiveCountRequest, runtime: $dara.RuntimeOptions): Promise<GetDataArchiveCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderResultType)) {
      query["OrderResultType"] = request.orderResultType;
    }

    if (!$dara.isNull(request.pluginType)) {
      query["PluginType"] = request.pluginType;
    }

    if (!$dara.isNull(request.searchDateType)) {
      query["SearchDateType"] = request.searchDateType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataArchiveCount",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataArchiveCountResponse>(await this.callApi(params, req, runtime), new GetDataArchiveCountResponse({}));
    } else {
      return $dara.cast<GetDataArchiveCountResponse>(await this.execute(params, req, runtime), new GetDataArchiveCountResponse({}));
    }

  }

  /**
   * Queries the statistics on the number of data archiving tickets, including the number of tickets of successful data archiving, failed data archiving,and in-progress data archiving, and the total number of data archiving tickets.
   * 
   * @param request - GetDataArchiveCountRequest
   * @returns GetDataArchiveCountResponse
   */
  async getDataArchiveCount(request: GetDataArchiveCountRequest): Promise<GetDataArchiveCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataArchiveCountWithOptions(request, runtime);
  }

  /**
   * Queries the details of a data archiving ticket, including the time when the ticket was created, the scheduling information of the data archiving task, the logs of the data archiving task, and the database to which data is archived.
   * 
   * @param request - GetDataArchiveOrderDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataArchiveOrderDetailResponse
   */
  async getDataArchiveOrderDetailWithOptions(request: GetDataArchiveOrderDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetDataArchiveOrderDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataArchiveOrderDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataArchiveOrderDetailResponse>(await this.callApi(params, req, runtime), new GetDataArchiveOrderDetailResponse({}));
    } else {
      return $dara.cast<GetDataArchiveOrderDetailResponse>(await this.execute(params, req, runtime), new GetDataArchiveOrderDetailResponse({}));
    }

  }

  /**
   * Queries the details of a data archiving ticket, including the time when the ticket was created, the scheduling information of the data archiving task, the logs of the data archiving task, and the database to which data is archived.
   * 
   * @param request - GetDataArchiveOrderDetailRequest
   * @returns GetDataArchiveOrderDetailResponse
   */
  async getDataArchiveOrderDetail(request: GetDataArchiveOrderDetailRequest): Promise<GetDataArchiveOrderDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataArchiveOrderDetailWithOptions(request, runtime);
  }

  /**
   * Queries the download URL of the backup file for a data change ticket in Data Management (DMS).
   * 
   * @param tmpReq - GetDataCorrectBackupFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataCorrectBackupFilesResponse
   */
  async getDataCorrectBackupFilesWithOptions(tmpReq: GetDataCorrectBackupFilesRequest, runtime: $dara.RuntimeOptions): Promise<GetDataCorrectBackupFilesResponse> {
    tmpReq.validate();
    let request = new GetDataCorrectBackupFilesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.actionDetail)) {
      request.actionDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.actionDetail, "ActionDetail", "json");
    }

    let query = { };
    if (!$dara.isNull(request.actionDetailShrink)) {
      query["ActionDetail"] = request.actionDetailShrink;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataCorrectBackupFiles",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataCorrectBackupFilesResponse>(await this.callApi(params, req, runtime), new GetDataCorrectBackupFilesResponse({}));
    } else {
      return $dara.cast<GetDataCorrectBackupFilesResponse>(await this.execute(params, req, runtime), new GetDataCorrectBackupFilesResponse({}));
    }

  }

  /**
   * Queries the download URL of the backup file for a data change ticket in Data Management (DMS).
   * 
   * @param request - GetDataCorrectBackupFilesRequest
   * @returns GetDataCorrectBackupFilesResponse
   */
  async getDataCorrectBackupFiles(request: GetDataCorrectBackupFilesRequest): Promise<GetDataCorrectBackupFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataCorrectBackupFilesWithOptions(request, runtime);
  }

  /**
   * Queries the information about a data change ticket in Data Management (DMS).
   * 
   * @param request - GetDataCorrectOrderDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataCorrectOrderDetailResponse
   */
  async getDataCorrectOrderDetailWithOptions(request: GetDataCorrectOrderDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetDataCorrectOrderDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataCorrectOrderDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataCorrectOrderDetailResponse>(await this.callApi(params, req, runtime), new GetDataCorrectOrderDetailResponse({}));
    } else {
      return $dara.cast<GetDataCorrectOrderDetailResponse>(await this.execute(params, req, runtime), new GetDataCorrectOrderDetailResponse({}));
    }

  }

  /**
   * Queries the information about a data change ticket in Data Management (DMS).
   * 
   * @param request - GetDataCorrectOrderDetailRequest
   * @returns GetDataCorrectOrderDetailResponse
   */
  async getDataCorrectOrderDetail(request: GetDataCorrectOrderDetailRequest): Promise<GetDataCorrectOrderDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataCorrectOrderDetailWithOptions(request, runtime);
  }

  /**
   * Queries the download URL of the rollback attachment submitted along with a data change ticket.
   * 
   * @param request - GetDataCorrectRollbackFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataCorrectRollbackFileResponse
   */
  async getDataCorrectRollbackFileWithOptions(request: GetDataCorrectRollbackFileRequest, runtime: $dara.RuntimeOptions): Promise<GetDataCorrectRollbackFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataCorrectRollbackFile",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataCorrectRollbackFileResponse>(await this.callApi(params, req, runtime), new GetDataCorrectRollbackFileResponse({}));
    } else {
      return $dara.cast<GetDataCorrectRollbackFileResponse>(await this.execute(params, req, runtime), new GetDataCorrectRollbackFileResponse({}));
    }

  }

  /**
   * Queries the download URL of the rollback attachment submitted along with a data change ticket.
   * 
   * @param request - GetDataCorrectRollbackFileRequest
   * @returns GetDataCorrectRollbackFileResponse
   */
  async getDataCorrectRollbackFile(request: GetDataCorrectRollbackFileRequest): Promise<GetDataCorrectRollbackFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataCorrectRollbackFileWithOptions(request, runtime);
  }

  /**
   * Queries the download URL of the SQL script for a data change task.
   * 
   * @remarks
   * This operation applies to [regular data change](https://help.aliyun.com/document_detail/58419.html) and [batch data import](https://help.aliyun.com/document_detail/144643.html).
   * 
   * @param request - GetDataCorrectSQLFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataCorrectSQLFileResponse
   */
  async getDataCorrectSQLFileWithOptions(request: GetDataCorrectSQLFileRequest, runtime: $dara.RuntimeOptions): Promise<GetDataCorrectSQLFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataCorrectSQLFile",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataCorrectSQLFileResponse>(await this.callApi(params, req, runtime), new GetDataCorrectSQLFileResponse({}));
    } else {
      return $dara.cast<GetDataCorrectSQLFileResponse>(await this.execute(params, req, runtime), new GetDataCorrectSQLFileResponse({}));
    }

  }

  /**
   * Queries the download URL of the SQL script for a data change task.
   * 
   * @remarks
   * This operation applies to [regular data change](https://help.aliyun.com/document_detail/58419.html) and [batch data import](https://help.aliyun.com/document_detail/144643.html).
   * 
   * @param request - GetDataCorrectSQLFileRequest
   * @returns GetDataCorrectSQLFileResponse
   */
  async getDataCorrectSQLFile(request: GetDataCorrectSQLFileRequest): Promise<GetDataCorrectSQLFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataCorrectSQLFileWithOptions(request, runtime);
  }

  /**
   * Queries the information about a data change, lock-free data change, or data import task.
   * 
   * @param request - GetDataCorrectTaskDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataCorrectTaskDetailResponse
   */
  async getDataCorrectTaskDetailWithOptions(request: GetDataCorrectTaskDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetDataCorrectTaskDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataCorrectTaskDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataCorrectTaskDetailResponse>(await this.callApi(params, req, runtime), new GetDataCorrectTaskDetailResponse({}));
    } else {
      return $dara.cast<GetDataCorrectTaskDetailResponse>(await this.execute(params, req, runtime), new GetDataCorrectTaskDetailResponse({}));
    }

  }

  /**
   * Queries the information about a data change, lock-free data change, or data import task.
   * 
   * @param request - GetDataCorrectTaskDetailRequest
   * @returns GetDataCorrectTaskDetailResponse
   */
  async getDataCorrectTaskDetail(request: GetDataCorrectTaskDetailRequest): Promise<GetDataCorrectTaskDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataCorrectTaskDetailWithOptions(request, runtime);
  }

  /**
   * Queries the scheduling configuration of a ticket for cleaning up historical data.
   * 
   * @param request - GetDataCronClearConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataCronClearConfigResponse
   */
  async getDataCronClearConfigWithOptions(request: GetDataCronClearConfigRequest, runtime: $dara.RuntimeOptions): Promise<GetDataCronClearConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataCronClearConfig",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataCronClearConfigResponse>(await this.callApi(params, req, runtime), new GetDataCronClearConfigResponse({}));
    } else {
      return $dara.cast<GetDataCronClearConfigResponse>(await this.execute(params, req, runtime), new GetDataCronClearConfigResponse({}));
    }

  }

  /**
   * Queries the scheduling configuration of a ticket for cleaning up historical data.
   * 
   * @param request - GetDataCronClearConfigRequest
   * @returns GetDataCronClearConfigResponse
   */
  async getDataCronClearConfig(request: GetDataCronClearConfigRequest): Promise<GetDataCronClearConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataCronClearConfigWithOptions(request, runtime);
  }

  /**
   * Queries the details of a historical data cleansing ticket.
   * 
   * @param request - GetDataCronClearTaskDetailListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataCronClearTaskDetailListResponse
   */
  async getDataCronClearTaskDetailListWithOptions(request: GetDataCronClearTaskDetailListRequest, runtime: $dara.RuntimeOptions): Promise<GetDataCronClearTaskDetailListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataCronClearTaskDetailList",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataCronClearTaskDetailListResponse>(await this.callApi(params, req, runtime), new GetDataCronClearTaskDetailListResponse({}));
    } else {
      return $dara.cast<GetDataCronClearTaskDetailListResponse>(await this.execute(params, req, runtime), new GetDataCronClearTaskDetailListResponse({}));
    }

  }

  /**
   * Queries the details of a historical data cleansing ticket.
   * 
   * @param request - GetDataCronClearTaskDetailListRequest
   * @returns GetDataCronClearTaskDetailListResponse
   */
  async getDataCronClearTaskDetailList(request: GetDataCronClearTaskDetailListRequest): Promise<GetDataCronClearTaskDetailListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataCronClearTaskDetailListWithOptions(request, runtime);
  }

  /**
   * Queries the download URL of the file that records the export results for a data export ticket in Data Management (DMS).
   * 
   * @param request - GetDataExportDownloadURLRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataExportDownloadURLResponse
   */
  async getDataExportDownloadURLWithOptions(request: GetDataExportDownloadURLRequest, runtime: $dara.RuntimeOptions): Promise<GetDataExportDownloadURLResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.realLoginUserUid)) {
      query["RealLoginUserUid"] = request.realLoginUserUid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataExportDownloadURL",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataExportDownloadURLResponse>(await this.callApi(params, req, runtime), new GetDataExportDownloadURLResponse({}));
    } else {
      return $dara.cast<GetDataExportDownloadURLResponse>(await this.execute(params, req, runtime), new GetDataExportDownloadURLResponse({}));
    }

  }

  /**
   * Queries the download URL of the file that records the export results for a data export ticket in Data Management (DMS).
   * 
   * @param request - GetDataExportDownloadURLRequest
   * @returns GetDataExportDownloadURLResponse
   */
  async getDataExportDownloadURL(request: GetDataExportDownloadURLRequest): Promise<GetDataExportDownloadURLResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataExportDownloadURLWithOptions(request, runtime);
  }

  /**
   * Queries the information about a data export ticket.
   * 
   * @param request - GetDataExportOrderDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataExportOrderDetailResponse
   */
  async getDataExportOrderDetailWithOptions(request: GetDataExportOrderDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetDataExportOrderDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.orderId)) {
      body["OrderId"] = request.orderId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataExportOrderDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataExportOrderDetailResponse>(await this.callApi(params, req, runtime), new GetDataExportOrderDetailResponse({}));
    } else {
      return $dara.cast<GetDataExportOrderDetailResponse>(await this.execute(params, req, runtime), new GetDataExportOrderDetailResponse({}));
    }

  }

  /**
   * Queries the information about a data export ticket.
   * 
   * @param request - GetDataExportOrderDetailRequest
   * @returns GetDataExportOrderDetailResponse
   */
  async getDataExportOrderDetail(request: GetDataExportOrderDetailRequest): Promise<GetDataExportOrderDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataExportOrderDetailWithOptions(request, runtime);
  }

  /**
   * Queries the precheck details of an SQL result set export ticket.
   * 
   * @param request - GetDataExportPreCheckDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataExportPreCheckDetailResponse
   */
  async getDataExportPreCheckDetailWithOptions(request: GetDataExportPreCheckDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetDataExportPreCheckDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataExportPreCheckDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataExportPreCheckDetailResponse>(await this.callApi(params, req, runtime), new GetDataExportPreCheckDetailResponse({}));
    } else {
      return $dara.cast<GetDataExportPreCheckDetailResponse>(await this.execute(params, req, runtime), new GetDataExportPreCheckDetailResponse({}));
    }

  }

  /**
   * Queries the precheck details of an SQL result set export ticket.
   * 
   * @param request - GetDataExportPreCheckDetailRequest
   * @returns GetDataExportPreCheckDetailResponse
   */
  async getDataExportPreCheckDetail(request: GetDataExportPreCheckDetailRequest): Promise<GetDataExportPreCheckDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataExportPreCheckDetailWithOptions(request, runtime);
  }

  /**
   * Queries the SQL statements used for data import in a ticket.
   * 
   * @remarks
   * You can call this operation only if the data is imported in security mode in your data import ticket.
   * 
   * @param request - GetDataImportSQLRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataImportSQLResponse
   */
  async getDataImportSQLWithOptions(request: GetDataImportSQLRequest, runtime: $dara.RuntimeOptions): Promise<GetDataImportSQLResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.sqlId)) {
      query["SqlId"] = request.sqlId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataImportSQL",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataImportSQLResponse>(await this.callApi(params, req, runtime), new GetDataImportSQLResponse({}));
    } else {
      return $dara.cast<GetDataImportSQLResponse>(await this.execute(params, req, runtime), new GetDataImportSQLResponse({}));
    }

  }

  /**
   * Queries the SQL statements used for data import in a ticket.
   * 
   * @remarks
   * You can call this operation only if the data is imported in security mode in your data import ticket.
   * 
   * @param request - GetDataImportSQLRequest
   * @returns GetDataImportSQLResponse
   */
  async getDataImportSQL(request: GetDataImportSQLRequest): Promise<GetDataImportSQLResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataImportSQLWithOptions(request, runtime);
  }

  /**
   * 获取uc的数据库目录
   * 
   * @param request - GetDataLakeCatalogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataLakeCatalogResponse
   */
  async getDataLakeCatalogWithOptions(request: GetDataLakeCatalogRequest, runtime: $dara.RuntimeOptions): Promise<GetDataLakeCatalogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataLakeCatalog",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataLakeCatalogResponse>(await this.callApi(params, req, runtime), new GetDataLakeCatalogResponse({}));
    } else {
      return $dara.cast<GetDataLakeCatalogResponse>(await this.execute(params, req, runtime), new GetDataLakeCatalogResponse({}));
    }

  }

  /**
   * 获取uc的数据库目录
   * 
   * @param request - GetDataLakeCatalogRequest
   * @returns GetDataLakeCatalogResponse
   */
  async getDataLakeCatalog(request: GetDataLakeCatalogRequest): Promise<GetDataLakeCatalogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataLakeCatalogWithOptions(request, runtime);
  }

  /**
   * 获取UC的数据库
   * 
   * @param request - GetDataLakeDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataLakeDatabaseResponse
   */
  async getDataLakeDatabaseWithOptions(request: GetDataLakeDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<GetDataLakeDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataLakeDatabase",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataLakeDatabaseResponse>(await this.callApi(params, req, runtime), new GetDataLakeDatabaseResponse({}));
    } else {
      return $dara.cast<GetDataLakeDatabaseResponse>(await this.execute(params, req, runtime), new GetDataLakeDatabaseResponse({}));
    }

  }

  /**
   * 获取UC的数据库
   * 
   * @param request - GetDataLakeDatabaseRequest
   * @returns GetDataLakeDatabaseResponse
   */
  async getDataLakeDatabase(request: GetDataLakeDatabaseRequest): Promise<GetDataLakeDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataLakeDatabaseWithOptions(request, runtime);
  }

  /**
   * 获取湖仓表分区详情
   * 
   * @param tmpReq - GetDataLakePartitionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataLakePartitionResponse
   */
  async getDataLakePartitionWithOptions(tmpReq: GetDataLakePartitionRequest, runtime: $dara.RuntimeOptions): Promise<GetDataLakePartitionResponse> {
    tmpReq.validate();
    let request = new GetDataLakePartitionShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.partitionValues)) {
      request.partitionValuesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.partitionValues, "PartitionValues", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.partitionValuesShrink)) {
      query["PartitionValues"] = request.partitionValuesShrink;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataLakePartition",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataLakePartitionResponse>(await this.callApi(params, req, runtime), new GetDataLakePartitionResponse({}));
    } else {
      return $dara.cast<GetDataLakePartitionResponse>(await this.execute(params, req, runtime), new GetDataLakePartitionResponse({}));
    }

  }

  /**
   * 获取湖仓表分区详情
   * 
   * @param request - GetDataLakePartitionRequest
   * @returns GetDataLakePartitionResponse
   */
  async getDataLakePartition(request: GetDataLakePartitionRequest): Promise<GetDataLakePartitionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataLakePartitionWithOptions(request, runtime);
  }

  /**
   * 获取表信息
   * 
   * @param request - GetDataLakeTableRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataLakeTableResponse
   */
  async getDataLakeTableWithOptions(request: GetDataLakeTableRequest, runtime: $dara.RuntimeOptions): Promise<GetDataLakeTableResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataLakeTable",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataLakeTableResponse>(await this.callApi(params, req, runtime), new GetDataLakeTableResponse({}));
    } else {
      return $dara.cast<GetDataLakeTableResponse>(await this.execute(params, req, runtime), new GetDataLakeTableResponse({}));
    }

  }

  /**
   * 获取表信息
   * 
   * @param request - GetDataLakeTableRequest
   * @returns GetDataLakeTableResponse
   */
  async getDataLakeTable(request: GetDataLakeTableRequest): Promise<GetDataLakeTableResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataLakeTableWithOptions(request, runtime);
  }

  /**
   * Queries the progress of a data tracking task.
   * 
   * @param request - GetDataTrackJobDegreeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataTrackJobDegreeResponse
   */
  async getDataTrackJobDegreeWithOptions(request: GetDataTrackJobDegreeRequest, runtime: $dara.RuntimeOptions): Promise<GetDataTrackJobDegreeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataTrackJobDegree",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataTrackJobDegreeResponse>(await this.callApi(params, req, runtime), new GetDataTrackJobDegreeResponse({}));
    } else {
      return $dara.cast<GetDataTrackJobDegreeResponse>(await this.execute(params, req, runtime), new GetDataTrackJobDegreeResponse({}));
    }

  }

  /**
   * Queries the progress of a data tracking task.
   * 
   * @param request - GetDataTrackJobDegreeRequest
   * @returns GetDataTrackJobDegreeResponse
   */
  async getDataTrackJobDegree(request: GetDataTrackJobDegreeRequest): Promise<GetDataTrackJobDegreeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataTrackJobDegreeWithOptions(request, runtime);
  }

  /**
   * Queries the metadata of tables involved in a data tracking task.
   * 
   * @param request - GetDataTrackJobTableMetaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataTrackJobTableMetaResponse
   */
  async getDataTrackJobTableMetaWithOptions(request: GetDataTrackJobTableMetaRequest, runtime: $dara.RuntimeOptions): Promise<GetDataTrackJobTableMetaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataTrackJobTableMeta",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataTrackJobTableMetaResponse>(await this.callApi(params, req, runtime), new GetDataTrackJobTableMetaResponse({}));
    } else {
      return $dara.cast<GetDataTrackJobTableMetaResponse>(await this.execute(params, req, runtime), new GetDataTrackJobTableMetaResponse({}));
    }

  }

  /**
   * Queries the metadata of tables involved in a data tracking task.
   * 
   * @param request - GetDataTrackJobTableMetaRequest
   * @returns GetDataTrackJobTableMetaResponse
   */
  async getDataTrackJobTableMeta(request: GetDataTrackJobTableMetaRequest): Promise<GetDataTrackJobTableMetaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataTrackJobTableMetaWithOptions(request, runtime);
  }

  /**
   * Queries the details of a data tracking ticket.
   * 
   * @param request - GetDataTrackOrderDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataTrackOrderDetailResponse
   */
  async getDataTrackOrderDetailWithOptions(request: GetDataTrackOrderDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetDataTrackOrderDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataTrackOrderDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDataTrackOrderDetailResponse>(await this.callApi(params, req, runtime), new GetDataTrackOrderDetailResponse({}));
    } else {
      return $dara.cast<GetDataTrackOrderDetailResponse>(await this.execute(params, req, runtime), new GetDataTrackOrderDetailResponse({}));
    }

  }

  /**
   * Queries the details of a data tracking ticket.
   * 
   * @param request - GetDataTrackOrderDetailRequest
   * @returns GetDataTrackOrderDetailResponse
   */
  async getDataTrackOrderDetail(request: GetDataTrackOrderDetailRequest): Promise<GetDataTrackOrderDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataTrackOrderDetailWithOptions(request, runtime);
  }

  /**
   * Queries details of a specific database.
   * 
   * @param request - GetDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDatabaseResponse
   */
  async getDatabaseWithOptions(request: GetDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<GetDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.host)) {
      query["Host"] = request.host;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.schemaName)) {
      query["SchemaName"] = request.schemaName;
    }

    if (!$dara.isNull(request.sid)) {
      query["Sid"] = request.sid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDatabase",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDatabaseResponse>(await this.callApi(params, req, runtime), new GetDatabaseResponse({}));
    } else {
      return $dara.cast<GetDatabaseResponse>(await this.execute(params, req, runtime), new GetDatabaseResponse({}));
    }

  }

  /**
   * Queries details of a specific database.
   * 
   * @param request - GetDatabaseRequest
   * @returns GetDatabaseResponse
   */
  async getDatabase(request: GetDatabaseRequest): Promise<GetDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDatabaseWithOptions(request, runtime);
  }

  /**
   * Queries the details of a database export ticket.
   * 
   * @param request - GetDatabaseExportOrderDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDatabaseExportOrderDetailResponse
   */
  async getDatabaseExportOrderDetailWithOptions(request: GetDatabaseExportOrderDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetDatabaseExportOrderDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.orderId)) {
      body["OrderId"] = request.orderId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDatabaseExportOrderDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDatabaseExportOrderDetailResponse>(await this.callApi(params, req, runtime), new GetDatabaseExportOrderDetailResponse({}));
    } else {
      return $dara.cast<GetDatabaseExportOrderDetailResponse>(await this.execute(params, req, runtime), new GetDatabaseExportOrderDetailResponse({}));
    }

  }

  /**
   * Queries the details of a database export ticket.
   * 
   * @param request - GetDatabaseExportOrderDetailRequest
   * @returns GetDatabaseExportOrderDetailResponse
   */
  async getDatabaseExportOrderDetail(request: GetDatabaseExportOrderDetailRequest): Promise<GetDatabaseExportOrderDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDatabaseExportOrderDetailWithOptions(request, runtime);
  }

  /**
   * 获取数据库导出下载地址
   * 
   * @param request - GetDbExportDownloadURLRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDbExportDownloadURLResponse
   */
  async getDbExportDownloadURLWithOptions(request: GetDbExportDownloadURLRequest, runtime: $dara.RuntimeOptions): Promise<GetDbExportDownloadURLResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDbExportDownloadURL",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDbExportDownloadURLResponse>(await this.callApi(params, req, runtime), new GetDbExportDownloadURLResponse({}));
    } else {
      return $dara.cast<GetDbExportDownloadURLResponse>(await this.execute(params, req, runtime), new GetDbExportDownloadURLResponse({}));
    }

  }

  /**
   * 获取数据库导出下载地址
   * 
   * @param request - GetDbExportDownloadURLRequest
   * @returns GetDbExportDownloadURLResponse
   */
  async getDbExportDownloadURL(request: GetDbExportDownloadURLRequest): Promise<GetDbExportDownloadURLResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDbExportDownloadURLWithOptions(request, runtime);
  }

  /**
   * Queries the details of a database instance.
   * 
   * @param request - GetInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetInstanceResponse
   */
  async getInstanceWithOptions(request: GetInstanceRequest, runtime: $dara.RuntimeOptions): Promise<GetInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.host)) {
      query["Host"] = request.host;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.sid)) {
      query["Sid"] = request.sid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetInstanceResponse>(await this.callApi(params, req, runtime), new GetInstanceResponse({}));
    } else {
      return $dara.cast<GetInstanceResponse>(await this.execute(params, req, runtime), new GetInstanceResponse({}));
    }

  }

  /**
   * Queries the details of a database instance.
   * 
   * @param request - GetInstanceRequest
   * @returns GetInstanceResponse
   */
  async getInstance(request: GetInstanceRequest): Promise<GetInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getInstanceWithOptions(request, runtime);
  }

  /**
   * Queries the minimum scheduling cycle of a task flow when a service level agreement (SLA) timeout rule is configured for the task flow.
   * 
   * @remarks
   * The scheduling cycle of a task flow must be greater than the minimum scheduling cycle configured in the SLA rule for the task flow.
   * 
   * @param request - GetIntervalLimitOfSLARequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetIntervalLimitOfSLAResponse
   */
  async getIntervalLimitOfSLAWithOptions(request: GetIntervalLimitOfSLARequest, runtime: $dara.RuntimeOptions): Promise<GetIntervalLimitOfSLAResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetIntervalLimitOfSLA",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetIntervalLimitOfSLAResponse>(await this.callApi(params, req, runtime), new GetIntervalLimitOfSLAResponse({}));
    } else {
      return $dara.cast<GetIntervalLimitOfSLAResponse>(await this.execute(params, req, runtime), new GetIntervalLimitOfSLAResponse({}));
    }

  }

  /**
   * Queries the minimum scheduling cycle of a task flow when a service level agreement (SLA) timeout rule is configured for the task flow.
   * 
   * @remarks
   * The scheduling cycle of a task flow must be greater than the minimum scheduling cycle configured in the SLA rule for the task flow.
   * 
   * @param request - GetIntervalLimitOfSLARequest
   * @returns GetIntervalLimitOfSLAResponse
   */
  async getIntervalLimitOfSLA(request: GetIntervalLimitOfSLARequest): Promise<GetIntervalLimitOfSLAResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getIntervalLimitOfSLAWithOptions(request, runtime);
  }

  /**
   * Queries the information about a workspace based on the workspace name in Data Management (DMS).
   * 
   * @remarks
   * You are a DMS administrator or a database administrator (DBA).
   * 
   * @param request - GetLhSpaceByNameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetLhSpaceByNameResponse
   */
  async getLhSpaceByNameWithOptions(request: GetLhSpaceByNameRequest, runtime: $dara.RuntimeOptions): Promise<GetLhSpaceByNameResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.spaceName)) {
      query["SpaceName"] = request.spaceName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetLhSpaceByName",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetLhSpaceByNameResponse>(await this.callApi(params, req, runtime), new GetLhSpaceByNameResponse({}));
    } else {
      return $dara.cast<GetLhSpaceByNameResponse>(await this.execute(params, req, runtime), new GetLhSpaceByNameResponse({}));
    }

  }

  /**
   * Queries the information about a workspace based on the workspace name in Data Management (DMS).
   * 
   * @remarks
   * You are a DMS administrator or a database administrator (DBA).
   * 
   * @param request - GetLhSpaceByNameRequest
   * @returns GetLhSpaceByNameResponse
   */
  async getLhSpaceByName(request: GetLhSpaceByNameRequest): Promise<GetLhSpaceByNameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getLhSpaceByNameWithOptions(request, runtime);
  }

  /**
   * Queries the details of a logical database.
   * 
   * @param request - GetLogicDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetLogicDatabaseResponse
   */
  async getLogicDatabaseWithOptions(request: GetLogicDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<GetLogicDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetLogicDatabase",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetLogicDatabaseResponse>(await this.callApi(params, req, runtime), new GetLogicDatabaseResponse({}));
    } else {
      return $dara.cast<GetLogicDatabaseResponse>(await this.execute(params, req, runtime), new GetLogicDatabaseResponse({}));
    }

  }

  /**
   * Queries the details of a logical database.
   * 
   * @param request - GetLogicDatabaseRequest
   * @returns GetLogicDatabaseResponse
   */
  async getLogicDatabase(request: GetLogicDatabaseRequest): Promise<GetLogicDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getLogicDatabaseWithOptions(request, runtime);
  }

  /**
   * Queries the details of columns in a table.
   * 
   * @remarks
   * You can call this operation only for database instances whose control mode is Security Collaboration.
   * 
   * @param request - GetMetaTableColumnRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetMetaTableColumnResponse
   */
  async getMetaTableColumnWithOptions(request: GetMetaTableColumnRequest, runtime: $dara.RuntimeOptions): Promise<GetMetaTableColumnResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tableGuid)) {
      query["TableGuid"] = request.tableGuid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetMetaTableColumn",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetMetaTableColumnResponse>(await this.callApi(params, req, runtime), new GetMetaTableColumnResponse({}));
    } else {
      return $dara.cast<GetMetaTableColumnResponse>(await this.execute(params, req, runtime), new GetMetaTableColumnResponse({}));
    }

  }

  /**
   * Queries the details of columns in a table.
   * 
   * @remarks
   * You can call this operation only for database instances whose control mode is Security Collaboration.
   * 
   * @param request - GetMetaTableColumnRequest
   * @returns GetMetaTableColumnResponse
   */
  async getMetaTableColumn(request: GetMetaTableColumnRequest): Promise<GetMetaTableColumnResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getMetaTableColumnWithOptions(request, runtime);
  }

  /**
   * Queries the details of columns and indexes in a table.
   * 
   * @remarks
   * You can call this operation only for database instances whose control mode is Security Collaboration.
   * 
   * @param request - GetMetaTableDetailInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetMetaTableDetailInfoResponse
   */
  async getMetaTableDetailInfoWithOptions(request: GetMetaTableDetailInfoRequest, runtime: $dara.RuntimeOptions): Promise<GetMetaTableDetailInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tableGuid)) {
      query["TableGuid"] = request.tableGuid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetMetaTableDetailInfo",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetMetaTableDetailInfoResponse>(await this.callApi(params, req, runtime), new GetMetaTableDetailInfoResponse({}));
    } else {
      return $dara.cast<GetMetaTableDetailInfoResponse>(await this.execute(params, req, runtime), new GetMetaTableDetailInfoResponse({}));
    }

  }

  /**
   * Queries the details of columns and indexes in a table.
   * 
   * @remarks
   * You can call this operation only for database instances whose control mode is Security Collaboration.
   * 
   * @param request - GetMetaTableDetailInfoRequest
   * @returns GetMetaTableDetailInfoResponse
   */
  async getMetaTableDetailInfo(request: GetMetaTableDetailInfoRequest): Promise<GetMetaTableDetailInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getMetaTableDetailInfoWithOptions(request, runtime);
  }

  /**
   * Queries the details and progress of an OnlineDDL task.
   * 
   * @param request - GetOnlineDDLProgressRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOnlineDDLProgressResponse
   */
  async getOnlineDDLProgressWithOptions(request: GetOnlineDDLProgressRequest, runtime: $dara.RuntimeOptions): Promise<GetOnlineDDLProgressResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.jobDetailId)) {
      query["JobDetailId"] = request.jobDetailId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOnlineDDLProgress",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetOnlineDDLProgressResponse>(await this.callApi(params, req, runtime), new GetOnlineDDLProgressResponse({}));
    } else {
      return $dara.cast<GetOnlineDDLProgressResponse>(await this.execute(params, req, runtime), new GetOnlineDDLProgressResponse({}));
    }

  }

  /**
   * Queries the details and progress of an OnlineDDL task.
   * 
   * @param request - GetOnlineDDLProgressRequest
   * @returns GetOnlineDDLProgressResponse
   */
  async getOnlineDDLProgress(request: GetOnlineDDLProgressRequest): Promise<GetOnlineDDLProgressResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOnlineDDLProgressWithOptions(request, runtime);
  }

  /**
   * Queries the details of operation logs that are generated in a specified period of time.
   * 
   * @remarks
   * Prerequisites: You are an administrator of Data Management (DMS) or a security administrator. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain your user role from the RoleIdList parameter that is returned.
   * 
   * @param request - GetOpLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOpLogResponse
   */
  async getOpLogWithOptions(request: GetOpLogRequest, runtime: $dara.RuntimeOptions): Promise<GetOpLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.databaseName)) {
      query["DatabaseName"] = request.databaseName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.module)) {
      query["Module"] = request.module;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userNick)) {
      query["UserNick"] = request.userNick;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOpLog",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetOpLogResponse>(await this.callApi(params, req, runtime), new GetOpLogResponse({}));
    } else {
      return $dara.cast<GetOpLogResponse>(await this.execute(params, req, runtime), new GetOpLogResponse({}));
    }

  }

  /**
   * Queries the details of operation logs that are generated in a specified period of time.
   * 
   * @remarks
   * Prerequisites: You are an administrator of Data Management (DMS) or a security administrator. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain your user role from the RoleIdList parameter that is returned.
   * 
   * @param request - GetOpLogRequest
   * @returns GetOpLogResponse
   */
  async getOpLog(request: GetOpLogRequest): Promise<GetOpLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOpLogWithOptions(request, runtime);
  }

  /**
   * Queries the download URL of the attachment of a ticket.
   * 
   * @param request - GetOrderAttachmentFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOrderAttachmentFileResponse
   */
  async getOrderAttachmentFileWithOptions(request: GetOrderAttachmentFileRequest, runtime: $dara.RuntimeOptions): Promise<GetOrderAttachmentFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOrderAttachmentFile",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetOrderAttachmentFileResponse>(await this.callApi(params, req, runtime), new GetOrderAttachmentFileResponse({}));
    } else {
      return $dara.cast<GetOrderAttachmentFileResponse>(await this.execute(params, req, runtime), new GetOrderAttachmentFileResponse({}));
    }

  }

  /**
   * Queries the download URL of the attachment of a ticket.
   * 
   * @param request - GetOrderAttachmentFileRequest
   * @returns GetOrderAttachmentFileResponse
   */
  async getOrderAttachmentFile(request: GetOrderAttachmentFileRequest): Promise<GetOrderAttachmentFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOrderAttachmentFileWithOptions(request, runtime);
  }

  /**
   * Queries the basic information about a ticket.
   * 
   * @param request - GetOrderBaseInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOrderBaseInfoResponse
   */
  async getOrderBaseInfoWithOptions(request: GetOrderBaseInfoRequest, runtime: $dara.RuntimeOptions): Promise<GetOrderBaseInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOrderBaseInfo",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetOrderBaseInfoResponse>(await this.callApi(params, req, runtime), new GetOrderBaseInfoResponse({}));
    } else {
      return $dara.cast<GetOrderBaseInfoResponse>(await this.execute(params, req, runtime), new GetOrderBaseInfoResponse({}));
    }

  }

  /**
   * Queries the basic information about a ticket.
   * 
   * @param request - GetOrderBaseInfoRequest
   * @returns GetOrderBaseInfoResponse
   */
  async getOrderBaseInfo(request: GetOrderBaseInfoRequest): Promise<GetOrderBaseInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOrderBaseInfoWithOptions(request, runtime);
  }

  /**
   * Queries the details of the Database-OWNER, Table-OWNER, and Instance-OWNER tickets.
   * 
   * @param request - GetOwnerApplyOrderDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOwnerApplyOrderDetailResponse
   */
  async getOwnerApplyOrderDetailWithOptions(request: GetOwnerApplyOrderDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetOwnerApplyOrderDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOwnerApplyOrderDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetOwnerApplyOrderDetailResponse>(await this.callApi(params, req, runtime), new GetOwnerApplyOrderDetailResponse({}));
    } else {
      return $dara.cast<GetOwnerApplyOrderDetailResponse>(await this.execute(params, req, runtime), new GetOwnerApplyOrderDetailResponse({}));
    }

  }

  /**
   * Queries the details of the Database-OWNER, Table-OWNER, and Instance-OWNER tickets.
   * 
   * @param request - GetOwnerApplyOrderDetailRequest
   * @returns GetOwnerApplyOrderDetailResponse
   */
  async getOwnerApplyOrderDetail(request: GetOwnerApplyOrderDetailRequest): Promise<GetOwnerApplyOrderDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOwnerApplyOrderDetailWithOptions(request, runtime);
  }

  /**
   * 获取数据归档工单任务实例
   * 
   * @param request - GetPagedInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetPagedInstanceResponse
   */
  async getPagedInstanceWithOptions(request: GetPagedInstanceRequest, runtime: $dara.RuntimeOptions): Promise<GetPagedInstanceResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetPagedInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetPagedInstanceResponse>(await this.callApi(params, req, runtime), new GetPagedInstanceResponse({}));
    } else {
      return $dara.cast<GetPagedInstanceResponse>(await this.execute(params, req, runtime), new GetPagedInstanceResponse({}));
    }

  }

  /**
   * 获取数据归档工单任务实例
   * 
   * @param request - GetPagedInstanceRequest
   * @returns GetPagedInstanceResponse
   */
  async getPagedInstance(request: GetPagedInstanceRequest): Promise<GetPagedInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getPagedInstanceWithOptions(request, runtime);
  }

  /**
   * Queries the details of a ticket that applies for permissions.
   * 
   * @remarks
   * You can call this operation to query the information about tickets that apply for permissions on databases, tables, and sensitive columns.
   * 
   * @param request - GetPermApplyOrderDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetPermApplyOrderDetailResponse
   */
  async getPermApplyOrderDetailWithOptions(request: GetPermApplyOrderDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetPermApplyOrderDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetPermApplyOrderDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetPermApplyOrderDetailResponse>(await this.callApi(params, req, runtime), new GetPermApplyOrderDetailResponse({}));
    } else {
      return $dara.cast<GetPermApplyOrderDetailResponse>(await this.execute(params, req, runtime), new GetPermApplyOrderDetailResponse({}));
    }

  }

  /**
   * Queries the details of a ticket that applies for permissions.
   * 
   * @remarks
   * You can call this operation to query the information about tickets that apply for permissions on databases, tables, and sensitive columns.
   * 
   * @param request - GetPermApplyOrderDetailRequest
   * @returns GetPermApplyOrderDetailResponse
   */
  async getPermApplyOrderDetail(request: GetPermApplyOrderDetailRequest): Promise<GetPermApplyOrderDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getPermApplyOrderDetailWithOptions(request, runtime);
  }

  /**
   * Queries the details of a physical database.
   * 
   * @param request - GetPhysicalDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetPhysicalDatabaseResponse
   */
  async getPhysicalDatabaseWithOptions(request: GetPhysicalDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<GetPhysicalDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetPhysicalDatabase",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetPhysicalDatabaseResponse>(await this.callApi(params, req, runtime), new GetPhysicalDatabaseResponse({}));
    } else {
      return $dara.cast<GetPhysicalDatabaseResponse>(await this.execute(params, req, runtime), new GetPhysicalDatabaseResponse({}));
    }

  }

  /**
   * Queries the details of a physical database.
   * 
   * @param request - GetPhysicalDatabaseRequest
   * @returns GetPhysicalDatabaseResponse
   */
  async getPhysicalDatabase(request: GetPhysicalDatabaseRequest): Promise<GetPhysicalDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getPhysicalDatabaseWithOptions(request, runtime);
  }

  /**
   * Queries the details of a secure access proxy.
   * 
   * @param request - GetProxyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetProxyResponse
   */
  async getProxyWithOptions(request: GetProxyRequest, runtime: $dara.RuntimeOptions): Promise<GetProxyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.proxyId)) {
      query["ProxyId"] = request.proxyId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetProxy",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetProxyResponse>(await this.callApi(params, req, runtime), new GetProxyResponse({}));
    } else {
      return $dara.cast<GetProxyResponse>(await this.execute(params, req, runtime), new GetProxyResponse({}));
    }

  }

  /**
   * Queries the details of a secure access proxy.
   * 
   * @param request - GetProxyRequest
   * @returns GetProxyResponse
   */
  async getProxy(request: GetProxyRequest): Promise<GetProxyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getProxyWithOptions(request, runtime);
  }

  /**
   * Queries the authorization information about the secure access proxy feature.
   * 
   * @param request - GetProxyAccessRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetProxyAccessResponse
   */
  async getProxyAccessWithOptions(request: GetProxyAccessRequest, runtime: $dara.RuntimeOptions): Promise<GetProxyAccessResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.proxyAccessId)) {
      query["ProxyAccessId"] = request.proxyAccessId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetProxyAccess",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetProxyAccessResponse>(await this.callApi(params, req, runtime), new GetProxyAccessResponse({}));
    } else {
      return $dara.cast<GetProxyAccessResponse>(await this.execute(params, req, runtime), new GetProxyAccessResponse({}));
    }

  }

  /**
   * Queries the authorization information about the secure access proxy feature.
   * 
   * @param request - GetProxyAccessRequest
   * @returns GetProxyAccessResponse
   */
  async getProxyAccess(request: GetProxyAccessRequest): Promise<GetProxyAccessResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getProxyAccessWithOptions(request, runtime);
  }

  /**
   * Queries the maximum number of custom service-level agreement (SLA) rules for task orchestration.
   * 
   * @param request - GetRuleNumLimitOfSLARequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetRuleNumLimitOfSLAResponse
   */
  async getRuleNumLimitOfSLAWithOptions(request: GetRuleNumLimitOfSLARequest, runtime: $dara.RuntimeOptions): Promise<GetRuleNumLimitOfSLAResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetRuleNumLimitOfSLA",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetRuleNumLimitOfSLAResponse>(await this.callApi(params, req, runtime), new GetRuleNumLimitOfSLAResponse({}));
    } else {
      return $dara.cast<GetRuleNumLimitOfSLAResponse>(await this.execute(params, req, runtime), new GetRuleNumLimitOfSLAResponse({}));
    }

  }

  /**
   * Queries the maximum number of custom service-level agreement (SLA) rules for task orchestration.
   * 
   * @param request - GetRuleNumLimitOfSLARequest
   * @returns GetRuleNumLimitOfSLAResponse
   */
  async getRuleNumLimitOfSLA(request: GetRuleNumLimitOfSLARequest): Promise<GetRuleNumLimitOfSLAResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getRuleNumLimitOfSLAWithOptions(request, runtime);
  }

  /**
   * Queries the result of an SQL review.
   * 
   * @remarks
   * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
   * 
   * @param request - GetSQLReviewCheckResultStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSQLReviewCheckResultStatusResponse
   */
  async getSQLReviewCheckResultStatusWithOptions(request: GetSQLReviewCheckResultStatusRequest, runtime: $dara.RuntimeOptions): Promise<GetSQLReviewCheckResultStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetSQLReviewCheckResultStatus",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetSQLReviewCheckResultStatusResponse>(await this.callApi(params, req, runtime), new GetSQLReviewCheckResultStatusResponse({}));
    } else {
      return $dara.cast<GetSQLReviewCheckResultStatusResponse>(await this.execute(params, req, runtime), new GetSQLReviewCheckResultStatusResponse({}));
    }

  }

  /**
   * Queries the result of an SQL review.
   * 
   * @remarks
   * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
   * 
   * @param request - GetSQLReviewCheckResultStatusRequest
   * @returns GetSQLReviewCheckResultStatusResponse
   */
  async getSQLReviewCheckResultStatus(request: GetSQLReviewCheckResultStatusRequest): Promise<GetSQLReviewCheckResultStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getSQLReviewCheckResultStatusWithOptions(request, runtime);
  }

  /**
   * Queries the details of optimization suggestions. The operation applies only to the tickets for the data changes and SQL review.
   * 
   * @remarks
   * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
   * 
   * @param request - GetSQLReviewOptimizeDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSQLReviewOptimizeDetailResponse
   */
  async getSQLReviewOptimizeDetailWithOptions(request: GetSQLReviewOptimizeDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetSQLReviewOptimizeDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.SQLReviewQueryKey)) {
      query["SQLReviewQueryKey"] = request.SQLReviewQueryKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetSQLReviewOptimizeDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetSQLReviewOptimizeDetailResponse>(await this.callApi(params, req, runtime), new GetSQLReviewOptimizeDetailResponse({}));
    } else {
      return $dara.cast<GetSQLReviewOptimizeDetailResponse>(await this.execute(params, req, runtime), new GetSQLReviewOptimizeDetailResponse({}));
    }

  }

  /**
   * Queries the details of optimization suggestions. The operation applies only to the tickets for the data changes and SQL review.
   * 
   * @remarks
   * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
   * 
   * @param request - GetSQLReviewOptimizeDetailRequest
   * @returns GetSQLReviewOptimizeDetailResponse
   */
  async getSQLReviewOptimizeDetail(request: GetSQLReviewOptimizeDetailRequest): Promise<GetSQLReviewOptimizeDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getSQLReviewOptimizeDetailWithOptions(request, runtime);
  }

  /**
   * 获取安全规则
   * 
   * @param request - GetStandardGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetStandardGroupResponse
   */
  async getStandardGroupWithOptions(request: GetStandardGroupRequest, runtime: $dara.RuntimeOptions): Promise<GetStandardGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetStandardGroup",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetStandardGroupResponse>(await this.callApi(params, req, runtime), new GetStandardGroupResponse({}));
    } else {
      return $dara.cast<GetStandardGroupResponse>(await this.execute(params, req, runtime), new GetStandardGroupResponse({}));
    }

  }

  /**
   * 获取安全规则
   * 
   * @param request - GetStandardGroupRequest
   * @returns GetStandardGroupResponse
   */
  async getStandardGroup(request: GetStandardGroupRequest): Promise<GetStandardGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getStandardGroupWithOptions(request, runtime);
  }

  /**
   * Queries the SQL statements that are involved in a schema synchronization ticket.
   * 
   * @param request - GetStructSyncExecSqlDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetStructSyncExecSqlDetailResponse
   */
  async getStructSyncExecSqlDetailWithOptions(request: GetStructSyncExecSqlDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetStructSyncExecSqlDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetStructSyncExecSqlDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetStructSyncExecSqlDetailResponse>(await this.callApi(params, req, runtime), new GetStructSyncExecSqlDetailResponse({}));
    } else {
      return $dara.cast<GetStructSyncExecSqlDetailResponse>(await this.execute(params, req, runtime), new GetStructSyncExecSqlDetailResponse({}));
    }

  }

  /**
   * Queries the SQL statements that are involved in a schema synchronization ticket.
   * 
   * @param request - GetStructSyncExecSqlDetailRequest
   * @returns GetStructSyncExecSqlDetailResponse
   */
  async getStructSyncExecSqlDetail(request: GetStructSyncExecSqlDetailRequest): Promise<GetStructSyncExecSqlDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getStructSyncExecSqlDetailWithOptions(request, runtime);
  }

  /**
   * Queries the analysis result of a schema synchronization task.
   * 
   * @param request - GetStructSyncJobAnalyzeResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetStructSyncJobAnalyzeResultResponse
   */
  async getStructSyncJobAnalyzeResultWithOptions(request: GetStructSyncJobAnalyzeResultRequest, runtime: $dara.RuntimeOptions): Promise<GetStructSyncJobAnalyzeResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.compareType)) {
      query["CompareType"] = request.compareType;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetStructSyncJobAnalyzeResult",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetStructSyncJobAnalyzeResultResponse>(await this.callApi(params, req, runtime), new GetStructSyncJobAnalyzeResultResponse({}));
    } else {
      return $dara.cast<GetStructSyncJobAnalyzeResultResponse>(await this.execute(params, req, runtime), new GetStructSyncJobAnalyzeResultResponse({}));
    }

  }

  /**
   * Queries the analysis result of a schema synchronization task.
   * 
   * @param request - GetStructSyncJobAnalyzeResultRequest
   * @returns GetStructSyncJobAnalyzeResultResponse
   */
  async getStructSyncJobAnalyzeResult(request: GetStructSyncJobAnalyzeResultRequest): Promise<GetStructSyncJobAnalyzeResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getStructSyncJobAnalyzeResultWithOptions(request, runtime);
  }

  /**
   * Queries the information of a schema synchronization task.
   * 
   * @param request - GetStructSyncJobDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetStructSyncJobDetailResponse
   */
  async getStructSyncJobDetailWithOptions(request: GetStructSyncJobDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetStructSyncJobDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetStructSyncJobDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetStructSyncJobDetailResponse>(await this.callApi(params, req, runtime), new GetStructSyncJobDetailResponse({}));
    } else {
      return $dara.cast<GetStructSyncJobDetailResponse>(await this.execute(params, req, runtime), new GetStructSyncJobDetailResponse({}));
    }

  }

  /**
   * Queries the information of a schema synchronization task.
   * 
   * @param request - GetStructSyncJobDetailRequest
   * @returns GetStructSyncJobDetailResponse
   */
  async getStructSyncJobDetail(request: GetStructSyncJobDetailRequest): Promise<GetStructSyncJobDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getStructSyncJobDetailWithOptions(request, runtime);
  }

  /**
   * Queries the details of a schema synchronization ticket.
   * 
   * @param request - GetStructSyncOrderDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetStructSyncOrderDetailResponse
   */
  async getStructSyncOrderDetailWithOptions(request: GetStructSyncOrderDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetStructSyncOrderDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetStructSyncOrderDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetStructSyncOrderDetailResponse>(await this.callApi(params, req, runtime), new GetStructSyncOrderDetailResponse({}));
    } else {
      return $dara.cast<GetStructSyncOrderDetailResponse>(await this.execute(params, req, runtime), new GetStructSyncOrderDetailResponse({}));
    }

  }

  /**
   * Queries the details of a schema synchronization ticket.
   * 
   * @param request - GetStructSyncOrderDetailRequest
   * @returns GetStructSyncOrderDetailResponse
   */
  async getStructSyncOrderDetail(request: GetStructSyncOrderDetailRequest): Promise<GetStructSyncOrderDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getStructSyncOrderDetailWithOptions(request, runtime);
  }

  /**
   * Queries the topology of a data table.
   * 
   * @param request - GetTableDBTopologyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetTableDBTopologyResponse
   */
  async getTableDBTopologyWithOptions(request: GetTableDBTopologyRequest, runtime: $dara.RuntimeOptions): Promise<GetTableDBTopologyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tableGuid)) {
      query["TableGuid"] = request.tableGuid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetTableDBTopology",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetTableDBTopologyResponse>(await this.callApi(params, req, runtime), new GetTableDBTopologyResponse({}));
    } else {
      return $dara.cast<GetTableDBTopologyResponse>(await this.execute(params, req, runtime), new GetTableDBTopologyResponse({}));
    }

  }

  /**
   * Queries the topology of a data table.
   * 
   * @param request - GetTableDBTopologyRequest
   * @returns GetTableDBTopologyResponse
   */
  async getTableDBTopology(request: GetTableDBTopologyRequest): Promise<GetTableDBTopologyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getTableDBTopologyWithOptions(request, runtime);
  }

  /**
   * Queries the information about a schema design ticket, such as the current node of the ticket, whether the ticket can be returned to the schema design node, and the publishing strategy.
   * 
   * @param request - GetTableDesignProjectFlowRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetTableDesignProjectFlowResponse
   */
  async getTableDesignProjectFlowWithOptions(request: GetTableDesignProjectFlowRequest, runtime: $dara.RuntimeOptions): Promise<GetTableDesignProjectFlowResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetTableDesignProjectFlow",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetTableDesignProjectFlowResponse>(await this.callApi(params, req, runtime), new GetTableDesignProjectFlowResponse({}));
    } else {
      return $dara.cast<GetTableDesignProjectFlowResponse>(await this.execute(params, req, runtime), new GetTableDesignProjectFlowResponse({}));
    }

  }

  /**
   * Queries the information about a schema design ticket, such as the current node of the ticket, whether the ticket can be returned to the schema design node, and the publishing strategy.
   * 
   * @param request - GetTableDesignProjectFlowRequest
   * @returns GetTableDesignProjectFlowResponse
   */
  async getTableDesignProjectFlow(request: GetTableDesignProjectFlowRequest): Promise<GetTableDesignProjectFlowResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getTableDesignProjectFlowWithOptions(request, runtime);
  }

  /**
   * Queries the information about the project and change base database of a schema design ticket, such as the state of the ticket, the ID of the user who created the ticket, and the name and ID of the change base database.
   * 
   * @param request - GetTableDesignProjectInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetTableDesignProjectInfoResponse
   */
  async getTableDesignProjectInfoWithOptions(request: GetTableDesignProjectInfoRequest, runtime: $dara.RuntimeOptions): Promise<GetTableDesignProjectInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetTableDesignProjectInfo",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetTableDesignProjectInfoResponse>(await this.callApi(params, req, runtime), new GetTableDesignProjectInfoResponse({}));
    } else {
      return $dara.cast<GetTableDesignProjectInfoResponse>(await this.execute(params, req, runtime), new GetTableDesignProjectInfoResponse({}));
    }

  }

  /**
   * Queries the information about the project and change base database of a schema design ticket, such as the state of the ticket, the ID of the user who created the ticket, and the name and ID of the change base database.
   * 
   * @param request - GetTableDesignProjectInfoRequest
   * @returns GetTableDesignProjectInfoResponse
   */
  async getTableDesignProjectInfo(request: GetTableDesignProjectInfoRequest): Promise<GetTableDesignProjectInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getTableDesignProjectInfoWithOptions(request, runtime);
  }

  /**
   * Queries the topology of a table.
   * 
   * @param request - GetTableTopologyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetTableTopologyResponse
   */
  async getTableTopologyWithOptions(request: GetTableTopologyRequest, runtime: $dara.RuntimeOptions): Promise<GetTableTopologyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tableGuid)) {
      query["TableGuid"] = request.tableGuid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetTableTopology",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetTableTopologyResponse>(await this.callApi(params, req, runtime), new GetTableTopologyResponse({}));
    } else {
      return $dara.cast<GetTableTopologyResponse>(await this.execute(params, req, runtime), new GetTableTopologyResponse({}));
    }

  }

  /**
   * Queries the topology of a table.
   * 
   * @param request - GetTableTopologyRequest
   * @returns GetTableTopologyResponse
   */
  async getTableTopology(request: GetTableTopologyRequest): Promise<GetTableTopologyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getTableTopologyWithOptions(request, runtime);
  }

  /**
   * Queries the configurations, including time variables, of a specified task node based on the task node ID.
   * 
   * @param request - GetTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetTaskResponse
   */
  async getTaskWithOptions(request: GetTaskRequest, runtime: $dara.RuntimeOptions): Promise<GetTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetTask",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetTaskResponse>(await this.callApi(params, req, runtime), new GetTaskResponse({}));
    } else {
      return $dara.cast<GetTaskResponse>(await this.execute(params, req, runtime), new GetTaskResponse({}));
    }

  }

  /**
   * Queries the configurations, including time variables, of a specified task node based on the task node ID.
   * 
   * @param request - GetTaskRequest
   * @returns GetTaskResponse
   */
  async getTask(request: GetTaskRequest): Promise<GetTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getTaskWithOptions(request, runtime);
  }

  /**
   * Queries the Directed Acyclic Graph (DAG) of a task flow.
   * 
   * @param request - GetTaskFlowGraphRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetTaskFlowGraphResponse
   */
  async getTaskFlowGraphWithOptions(request: GetTaskFlowGraphRequest, runtime: $dara.RuntimeOptions): Promise<GetTaskFlowGraphResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetTaskFlowGraph",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetTaskFlowGraphResponse>(await this.callApi(params, req, runtime), new GetTaskFlowGraphResponse({}));
    } else {
      return $dara.cast<GetTaskFlowGraphResponse>(await this.execute(params, req, runtime), new GetTaskFlowGraphResponse({}));
    }

  }

  /**
   * Queries the Directed Acyclic Graph (DAG) of a task flow.
   * 
   * @param request - GetTaskFlowGraphRequest
   * @returns GetTaskFlowGraphResponse
   */
  async getTaskFlowGraph(request: GetTaskFlowGraphRequest): Promise<GetTaskFlowGraphResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getTaskFlowGraphWithOptions(request, runtime);
  }

  /**
   * Queries the notification settings for task flows.
   * 
   * @param request - GetTaskFlowNotificationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetTaskFlowNotificationResponse
   */
  async getTaskFlowNotificationWithOptions(request: GetTaskFlowNotificationRequest, runtime: $dara.RuntimeOptions): Promise<GetTaskFlowNotificationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetTaskFlowNotification",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetTaskFlowNotificationResponse>(await this.callApi(params, req, runtime), new GetTaskFlowNotificationResponse({}));
    } else {
      return $dara.cast<GetTaskFlowNotificationResponse>(await this.execute(params, req, runtime), new GetTaskFlowNotificationResponse({}));
    }

  }

  /**
   * Queries the notification settings for task flows.
   * 
   * @param request - GetTaskFlowNotificationRequest
   * @returns GetTaskFlowNotificationResponse
   */
  async getTaskFlowNotification(request: GetTaskFlowNotificationRequest): Promise<GetTaskFlowNotificationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getTaskFlowNotificationWithOptions(request, runtime);
  }

  /**
   * Queries the information about the nodes in an execution record of a task flow.
   * 
   * @param request - GetTaskInstanceRelationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetTaskInstanceRelationResponse
   */
  async getTaskInstanceRelationWithOptions(request: GetTaskInstanceRelationRequest, runtime: $dara.RuntimeOptions): Promise<GetTaskInstanceRelationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.dagInstanceId)) {
      query["DagInstanceId"] = request.dagInstanceId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetTaskInstanceRelation",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetTaskInstanceRelationResponse>(await this.callApi(params, req, runtime), new GetTaskInstanceRelationResponse({}));
    } else {
      return $dara.cast<GetTaskInstanceRelationResponse>(await this.execute(params, req, runtime), new GetTaskInstanceRelationResponse({}));
    }

  }

  /**
   * Queries the information about the nodes in an execution record of a task flow.
   * 
   * @param request - GetTaskInstanceRelationRequest
   * @returns GetTaskInstanceRelationResponse
   */
  async getTaskInstanceRelation(request: GetTaskInstanceRelationRequest): Promise<GetTaskInstanceRelationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getTaskInstanceRelationWithOptions(request, runtime);
  }

  /**
   * Queries the information about a user.
   * 
   * @param request - GetUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetUserResponse
   */
  async getUserWithOptions(request: GetUserRequest, runtime: $dara.RuntimeOptions): Promise<GetUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.uid)) {
      query["Uid"] = request.uid;
    }

    if (!$dara.isNull(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetUser",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetUserResponse>(await this.callApi(params, req, runtime), new GetUserResponse({}));
    } else {
      return $dara.cast<GetUserResponse>(await this.execute(params, req, runtime), new GetUserResponse({}));
    }

  }

  /**
   * Queries the information about a user.
   * 
   * @param request - GetUserRequest
   * @returns GetUserResponse
   */
  async getUser(request: GetUserRequest): Promise<GetUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getUserWithOptions(request, runtime);
  }

  /**
   * Queries details of the active tenant.
   * 
   * @param request - GetUserActiveTenantRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetUserActiveTenantResponse
   */
  async getUserActiveTenantWithOptions(request: GetUserActiveTenantRequest, runtime: $dara.RuntimeOptions): Promise<GetUserActiveTenantResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetUserActiveTenant",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetUserActiveTenantResponse>(await this.callApi(params, req, runtime), new GetUserActiveTenantResponse({}));
    } else {
      return $dara.cast<GetUserActiveTenantResponse>(await this.execute(params, req, runtime), new GetUserActiveTenantResponse({}));
    }

  }

  /**
   * Queries details of the active tenant.
   * 
   * @param request - GetUserActiveTenantRequest
   * @returns GetUserActiveTenantResponse
   */
  async getUserActiveTenant(request: GetUserActiveTenantRequest): Promise<GetUserActiveTenantResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getUserActiveTenantWithOptions(request, runtime);
  }

  /**
   * Obtains the information of a file upload task.
   * 
   * @param request - GetUserUploadFileJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetUserUploadFileJobResponse
   */
  async getUserUploadFileJobWithOptions(request: GetUserUploadFileJobRequest, runtime: $dara.RuntimeOptions): Promise<GetUserUploadFileJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.jobKey)) {
      query["JobKey"] = request.jobKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetUserUploadFileJob",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetUserUploadFileJobResponse>(await this.callApi(params, req, runtime), new GetUserUploadFileJobResponse({}));
    } else {
      return $dara.cast<GetUserUploadFileJobResponse>(await this.execute(params, req, runtime), new GetUserUploadFileJobResponse({}));
    }

  }

  /**
   * Obtains the information of a file upload task.
   * 
   * @param request - GetUserUploadFileJobRequest
   * @returns GetUserUploadFileJobResponse
   */
  async getUserUploadFileJob(request: GetUserUploadFileJobRequest): Promise<GetUserUploadFileJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getUserUploadFileJobWithOptions(request, runtime);
  }

  /**
   * Grants permissions on resources to users by using a permission template.
   * 
   * @remarks
   * You must be a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
   * 
   * @param request - GrantTemplateAuthorityRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GrantTemplateAuthorityResponse
   */
  async grantTemplateAuthorityWithOptions(request: GrantTemplateAuthorityRequest, runtime: $dara.RuntimeOptions): Promise<GrantTemplateAuthorityResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.expireDate)) {
      query["ExpireDate"] = request.expireDate;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userIds)) {
      query["UserIds"] = request.userIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GrantTemplateAuthority",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GrantTemplateAuthorityResponse>(await this.callApi(params, req, runtime), new GrantTemplateAuthorityResponse({}));
    } else {
      return $dara.cast<GrantTemplateAuthorityResponse>(await this.execute(params, req, runtime), new GrantTemplateAuthorityResponse({}));
    }

  }

  /**
   * Grants permissions on resources to users by using a permission template.
   * 
   * @remarks
   * You must be a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
   * 
   * @param request - GrantTemplateAuthorityRequest
   * @returns GrantTemplateAuthorityResponse
   */
  async grantTemplateAuthority(request: GrantTemplateAuthorityRequest): Promise<GrantTemplateAuthorityResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.grantTemplateAuthorityWithOptions(request, runtime);
  }

  /**
   * Grants permissions on an instance, a database, or a table to a user.
   * 
   * @param request - GrantUserPermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GrantUserPermissionResponse
   */
  async grantUserPermissionWithOptions(request: GrantUserPermissionRequest, runtime: $dara.RuntimeOptions): Promise<GrantUserPermissionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.dsType)) {
      query["DsType"] = request.dsType;
    }

    if (!$dara.isNull(request.expireDate)) {
      query["ExpireDate"] = request.expireDate;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.logic)) {
      query["Logic"] = request.logic;
    }

    if (!$dara.isNull(request.permTypes)) {
      query["PermTypes"] = request.permTypes;
    }

    if (!$dara.isNull(request.tableId)) {
      query["TableId"] = request.tableId;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GrantUserPermission",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GrantUserPermissionResponse>(await this.callApi(params, req, runtime), new GrantUserPermissionResponse({}));
    } else {
      return $dara.cast<GrantUserPermissionResponse>(await this.execute(params, req, runtime), new GrantUserPermissionResponse({}));
    }

  }

  /**
   * Grants permissions on an instance, a database, or a table to a user.
   * 
   * @param request - GrantUserPermissionRequest
   * @returns GrantUserPermissionResponse
   */
  async grantUserPermission(request: GrantUserPermissionRequest): Promise<GrantUserPermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.grantUserPermissionWithOptions(request, runtime);
  }

  /**
   * You can call this operation to obtain the authorization password of the security protection agent InspectProxyAccessSecret.
   * 
   * @param request - InspectProxyAccessSecretRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InspectProxyAccessSecretResponse
   */
  async inspectProxyAccessSecretWithOptions(request: InspectProxyAccessSecretRequest, runtime: $dara.RuntimeOptions): Promise<InspectProxyAccessSecretResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.proxyAccessId)) {
      query["ProxyAccessId"] = request.proxyAccessId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "InspectProxyAccessSecret",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<InspectProxyAccessSecretResponse>(await this.callApi(params, req, runtime), new InspectProxyAccessSecretResponse({}));
    } else {
      return $dara.cast<InspectProxyAccessSecretResponse>(await this.execute(params, req, runtime), new InspectProxyAccessSecretResponse({}));
    }

  }

  /**
   * You can call this operation to obtain the authorization password of the security protection agent InspectProxyAccessSecret.
   * 
   * @param request - InspectProxyAccessSecretRequest
   * @returns InspectProxyAccessSecretResponse
   */
  async inspectProxyAccessSecret(request: InspectProxyAccessSecretRequest): Promise<InspectProxyAccessSecretResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.inspectProxyAccessSecretWithOptions(request, runtime);
  }

  /**
   * 获取权限策略授权列表
   * 
   * @param request - ListAbacAuthorizationsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAbacAuthorizationsResponse
   */
  async listAbacAuthorizationsWithOptions(request: ListAbacAuthorizationsRequest, runtime: $dara.RuntimeOptions): Promise<ListAbacAuthorizationsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    if (!$dara.isNull(request.policySource)) {
      query["PolicySource"] = request.policySource;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAbacAuthorizations",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListAbacAuthorizationsResponse>(await this.callApi(params, req, runtime), new ListAbacAuthorizationsResponse({}));
    } else {
      return $dara.cast<ListAbacAuthorizationsResponse>(await this.execute(params, req, runtime), new ListAbacAuthorizationsResponse({}));
    }

  }

  /**
   * 获取权限策略授权列表
   * 
   * @param request - ListAbacAuthorizationsRequest
   * @returns ListAbacAuthorizationsResponse
   */
  async listAbacAuthorizations(request: ListAbacAuthorizationsRequest): Promise<ListAbacAuthorizationsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAbacAuthorizationsWithOptions(request, runtime);
  }

  /**
   * 获取权限策略列表
   * 
   * @param request - ListAbacPoliciesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAbacPoliciesResponse
   */
  async listAbacPoliciesWithOptions(request: ListAbacPoliciesRequest, runtime: $dara.RuntimeOptions): Promise<ListAbacPoliciesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAbacPolicies",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListAbacPoliciesResponse>(await this.callApi(params, req, runtime), new ListAbacPoliciesResponse({}));
    } else {
      return $dara.cast<ListAbacPoliciesResponse>(await this.execute(params, req, runtime), new ListAbacPoliciesResponse({}));
    }

  }

  /**
   * 获取权限策略列表
   * 
   * @param request - ListAbacPoliciesRequest
   * @returns ListAbacPoliciesResponse
   */
  async listAbacPolicies(request: ListAbacPoliciesRequest): Promise<ListAbacPoliciesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAbacPoliciesWithOptions(request, runtime);
  }

  /**
   * 获取权限模版列表
   * 
   * @param request - ListAuthorityTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAuthorityTemplateResponse
   */
  async listAuthorityTemplateWithOptions(request: ListAuthorityTemplateRequest, runtime: $dara.RuntimeOptions): Promise<ListAuthorityTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAuthorityTemplate",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListAuthorityTemplateResponse>(await this.callApi(params, req, runtime), new ListAuthorityTemplateResponse({}));
    } else {
      return $dara.cast<ListAuthorityTemplateResponse>(await this.execute(params, req, runtime), new ListAuthorityTemplateResponse({}));
    }

  }

  /**
   * 获取权限模版列表
   * 
   * @param request - ListAuthorityTemplateRequest
   * @returns ListAuthorityTemplateResponse
   */
  async listAuthorityTemplate(request: ListAuthorityTemplateRequest): Promise<ListAuthorityTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAuthorityTemplateWithOptions(request, runtime);
  }

  /**
   * 获取用户有权限的数据库
   * 
   * @param request - ListAuthorizedDatabasesForUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAuthorizedDatabasesForUserResponse
   */
  async listAuthorizedDatabasesForUserWithOptions(request: ListAuthorizedDatabasesForUserRequest, runtime: $dara.RuntimeOptions): Promise<ListAuthorizedDatabasesForUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbType)) {
      query["DbType"] = request.dbType;
    }

    if (!$dara.isNull(request.envType)) {
      query["EnvType"] = request.envType;
    }

    if (!$dara.isNull(request.logic)) {
      query["Logic"] = request.logic;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAuthorizedDatabasesForUser",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListAuthorizedDatabasesForUserResponse>(await this.callApi(params, req, runtime), new ListAuthorizedDatabasesForUserResponse({}));
    } else {
      return $dara.cast<ListAuthorizedDatabasesForUserResponse>(await this.execute(params, req, runtime), new ListAuthorizedDatabasesForUserResponse({}));
    }

  }

  /**
   * 获取用户有权限的数据库
   * 
   * @param request - ListAuthorizedDatabasesForUserRequest
   * @returns ListAuthorizedDatabasesForUserResponse
   */
  async listAuthorizedDatabasesForUser(request: ListAuthorizedDatabasesForUserRequest): Promise<ListAuthorizedDatabasesForUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAuthorizedDatabasesForUserWithOptions(request, runtime);
  }

  /**
   * 获取用户有权限的实例
   * 
   * @param request - ListAuthorizedInstancesForUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAuthorizedInstancesForUserResponse
   */
  async listAuthorizedInstancesForUserWithOptions(request: ListAuthorizedInstancesForUserRequest, runtime: $dara.RuntimeOptions): Promise<ListAuthorizedInstancesForUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbType)) {
      query["DbType"] = request.dbType;
    }

    if (!$dara.isNull(request.envType)) {
      query["EnvType"] = request.envType;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAuthorizedInstancesForUser",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListAuthorizedInstancesForUserResponse>(await this.callApi(params, req, runtime), new ListAuthorizedInstancesForUserResponse({}));
    } else {
      return $dara.cast<ListAuthorizedInstancesForUserResponse>(await this.execute(params, req, runtime), new ListAuthorizedInstancesForUserResponse({}));
    }

  }

  /**
   * 获取用户有权限的实例
   * 
   * @param request - ListAuthorizedInstancesForUserRequest
   * @returns ListAuthorizedInstancesForUserResponse
   */
  async listAuthorizedInstancesForUser(request: ListAuthorizedInstancesForUserRequest): Promise<ListAuthorizedInstancesForUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAuthorizedInstancesForUserWithOptions(request, runtime);
  }

  /**
   * 查询有数据库权限的用户
   * 
   * @param request - ListAuthorizedUsersForDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAuthorizedUsersForDatabaseResponse
   */
  async listAuthorizedUsersForDatabaseWithOptions(request: ListAuthorizedUsersForDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<ListAuthorizedUsersForDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.logic)) {
      query["Logic"] = request.logic;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAuthorizedUsersForDatabase",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListAuthorizedUsersForDatabaseResponse>(await this.callApi(params, req, runtime), new ListAuthorizedUsersForDatabaseResponse({}));
    } else {
      return $dara.cast<ListAuthorizedUsersForDatabaseResponse>(await this.execute(params, req, runtime), new ListAuthorizedUsersForDatabaseResponse({}));
    }

  }

  /**
   * 查询有数据库权限的用户
   * 
   * @param request - ListAuthorizedUsersForDatabaseRequest
   * @returns ListAuthorizedUsersForDatabaseResponse
   */
  async listAuthorizedUsersForDatabase(request: ListAuthorizedUsersForDatabaseRequest): Promise<ListAuthorizedUsersForDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAuthorizedUsersForDatabaseWithOptions(request, runtime);
  }

  /**
   * 查询有实例权限的用户
   * 
   * @param request - ListAuthorizedUsersForInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAuthorizedUsersForInstanceResponse
   */
  async listAuthorizedUsersForInstanceWithOptions(request: ListAuthorizedUsersForInstanceRequest, runtime: $dara.RuntimeOptions): Promise<ListAuthorizedUsersForInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAuthorizedUsersForInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListAuthorizedUsersForInstanceResponse>(await this.callApi(params, req, runtime), new ListAuthorizedUsersForInstanceResponse({}));
    } else {
      return $dara.cast<ListAuthorizedUsersForInstanceResponse>(await this.execute(params, req, runtime), new ListAuthorizedUsersForInstanceResponse({}));
    }

  }

  /**
   * 查询有实例权限的用户
   * 
   * @param request - ListAuthorizedUsersForInstanceRequest
   * @returns ListAuthorizedUsersForInstanceResponse
   */
  async listAuthorizedUsersForInstance(request: ListAuthorizedUsersForInstanceRequest): Promise<ListAuthorizedUsersForInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAuthorizedUsersForInstanceWithOptions(request, runtime);
  }

  /**
   * Queries the classification templates.
   * 
   * @param request - ListClassificationTemplatesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListClassificationTemplatesResponse
   */
  async listClassificationTemplatesWithOptions(request: ListClassificationTemplatesRequest, runtime: $dara.RuntimeOptions): Promise<ListClassificationTemplatesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListClassificationTemplates",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListClassificationTemplatesResponse>(await this.callApi(params, req, runtime), new ListClassificationTemplatesResponse({}));
    } else {
      return $dara.cast<ListClassificationTemplatesResponse>(await this.execute(params, req, runtime), new ListClassificationTemplatesResponse({}));
    }

  }

  /**
   * Queries the classification templates.
   * 
   * @param request - ListClassificationTemplatesRequest
   * @returns ListClassificationTemplatesResponse
   */
  async listClassificationTemplates(request: ListClassificationTemplatesRequest): Promise<ListClassificationTemplatesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listClassificationTemplatesWithOptions(request, runtime);
  }

  /**
   * Returns the column information of a table.
   * 
   * @remarks
   * You can call this operation only for database instances whose control mode is Security Collaboration.
   * 
   * @param request - ListColumnsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListColumnsResponse
   */
  async listColumnsWithOptions(request: ListColumnsRequest, runtime: $dara.RuntimeOptions): Promise<ListColumnsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.logic)) {
      query["Logic"] = request.logic;
    }

    if (!$dara.isNull(request.tableId)) {
      query["TableId"] = request.tableId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListColumns",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListColumnsResponse>(await this.callApi(params, req, runtime), new ListColumnsResponse({}));
    } else {
      return $dara.cast<ListColumnsResponse>(await this.execute(params, req, runtime), new ListColumnsResponse({}));
    }

  }

  /**
   * Returns the column information of a table.
   * 
   * @remarks
   * You can call this operation only for database instances whose control mode is Security Collaboration.
   * 
   * @param request - ListColumnsRequest
   * @returns ListColumnsResponse
   */
  async listColumns(request: ListColumnsRequest): Promise<ListColumnsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listColumnsWithOptions(request, runtime);
  }

  /**
   * Queries the published versions of a task flow.
   * 
   * @param request - ListDAGVersionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDAGVersionsResponse
   */
  async listDAGVersionsWithOptions(request: ListDAGVersionsRequest, runtime: $dara.RuntimeOptions): Promise<ListDAGVersionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.pageIndex)) {
      query["PageIndex"] = request.pageIndex;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDAGVersions",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDAGVersionsResponse>(await this.callApi(params, req, runtime), new ListDAGVersionsResponse({}));
    } else {
      return $dara.cast<ListDAGVersionsResponse>(await this.execute(params, req, runtime), new ListDAGVersionsResponse({}));
    }

  }

  /**
   * Queries the published versions of a task flow.
   * 
   * @param request - ListDAGVersionsRequest
   * @returns ListDAGVersionsResponse
   */
  async listDAGVersions(request: ListDAGVersionsRequest): Promise<ListDAGVersionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDAGVersionsWithOptions(request, runtime);
  }

  /**
   * Queries a list of SQL tasks.
   * 
   * @param request - ListDBTaskSQLJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDBTaskSQLJobResponse
   */
  async listDBTaskSQLJobWithOptions(request: ListDBTaskSQLJobRequest, runtime: $dara.RuntimeOptions): Promise<ListDBTaskSQLJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBTaskGroupId)) {
      query["DBTaskGroupId"] = request.DBTaskGroupId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDBTaskSQLJob",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDBTaskSQLJobResponse>(await this.callApi(params, req, runtime), new ListDBTaskSQLJobResponse({}));
    } else {
      return $dara.cast<ListDBTaskSQLJobResponse>(await this.execute(params, req, runtime), new ListDBTaskSQLJobResponse({}));
    }

  }

  /**
   * Queries a list of SQL tasks.
   * 
   * @param request - ListDBTaskSQLJobRequest
   * @returns ListDBTaskSQLJobResponse
   */
  async listDBTaskSQLJob(request: ListDBTaskSQLJobRequest): Promise<ListDBTaskSQLJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDBTaskSQLJobWithOptions(request, runtime);
  }

  /**
   * Queries the details of an SQL task.
   * 
   * @param request - ListDBTaskSQLJobDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDBTaskSQLJobDetailResponse
   */
  async listDBTaskSQLJobDetailWithOptions(request: ListDBTaskSQLJobDetailRequest, runtime: $dara.RuntimeOptions): Promise<ListDBTaskSQLJobDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDBTaskSQLJobDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDBTaskSQLJobDetailResponse>(await this.callApi(params, req, runtime), new ListDBTaskSQLJobDetailResponse({}));
    } else {
      return $dara.cast<ListDBTaskSQLJobDetailResponse>(await this.execute(params, req, runtime), new ListDBTaskSQLJobDetailResponse({}));
    }

  }

  /**
   * Queries the details of an SQL task.
   * 
   * @param request - ListDBTaskSQLJobDetailRequest
   * @returns ListDBTaskSQLJobDetailResponse
   */
  async listDBTaskSQLJobDetail(request: ListDBTaskSQLJobDetailRequest): Promise<ListDBTaskSQLJobDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDBTaskSQLJobDetailWithOptions(request, runtime);
  }

  /**
   * Queries the publishing details of a schema design ticket.
   * 
   * @param request - ListDDLPublishRecordsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDDLPublishRecordsResponse
   */
  async listDDLPublishRecordsWithOptions(request: ListDDLPublishRecordsRequest, runtime: $dara.RuntimeOptions): Promise<ListDDLPublishRecordsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDDLPublishRecords",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDDLPublishRecordsResponse>(await this.callApi(params, req, runtime), new ListDDLPublishRecordsResponse({}));
    } else {
      return $dara.cast<ListDDLPublishRecordsResponse>(await this.execute(params, req, runtime), new ListDDLPublishRecordsResponse({}));
    }

  }

  /**
   * Queries the publishing details of a schema design ticket.
   * 
   * @param request - ListDDLPublishRecordsRequest
   * @returns ListDDLPublishRecordsResponse
   */
  async listDDLPublishRecords(request: ListDDLPublishRecordsRequest): Promise<ListDDLPublishRecordsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDDLPublishRecordsWithOptions(request, runtime);
  }

  /**
   * Queries the databases that are involved in the precheck of a data change ticket.
   * 
   * @remarks
   * For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
   * 
   * @param request - ListDataCorrectPreCheckDBRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDataCorrectPreCheckDBResponse
   */
  async listDataCorrectPreCheckDBWithOptions(request: ListDataCorrectPreCheckDBRequest, runtime: $dara.RuntimeOptions): Promise<ListDataCorrectPreCheckDBResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDataCorrectPreCheckDB",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDataCorrectPreCheckDBResponse>(await this.callApi(params, req, runtime), new ListDataCorrectPreCheckDBResponse({}));
    } else {
      return $dara.cast<ListDataCorrectPreCheckDBResponse>(await this.execute(params, req, runtime), new ListDataCorrectPreCheckDBResponse({}));
    }

  }

  /**
   * Queries the databases that are involved in the precheck of a data change ticket.
   * 
   * @remarks
   * For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
   * 
   * @param request - ListDataCorrectPreCheckDBRequest
   * @returns ListDataCorrectPreCheckDBResponse
   */
  async listDataCorrectPreCheckDB(request: ListDataCorrectPreCheckDBRequest): Promise<ListDataCorrectPreCheckDBResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDataCorrectPreCheckDBWithOptions(request, runtime);
  }

  /**
   * Queries the precheck information about an SQL statement that is specified in a data change ticket.
   * 
   * @remarks
   * For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
   * 
   * @param request - ListDataCorrectPreCheckSQLRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDataCorrectPreCheckSQLResponse
   */
  async listDataCorrectPreCheckSQLWithOptions(request: ListDataCorrectPreCheckSQLRequest, runtime: $dara.RuntimeOptions): Promise<ListDataCorrectPreCheckSQLResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDataCorrectPreCheckSQL",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDataCorrectPreCheckSQLResponse>(await this.callApi(params, req, runtime), new ListDataCorrectPreCheckSQLResponse({}));
    } else {
      return $dara.cast<ListDataCorrectPreCheckSQLResponse>(await this.execute(params, req, runtime), new ListDataCorrectPreCheckSQLResponse({}));
    }

  }

  /**
   * Queries the precheck information about an SQL statement that is specified in a data change ticket.
   * 
   * @remarks
   * For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
   * 
   * @param request - ListDataCorrectPreCheckSQLRequest
   * @returns ListDataCorrectPreCheckSQLResponse
   */
  async listDataCorrectPreCheckSQL(request: ListDataCorrectPreCheckSQLRequest): Promise<ListDataCorrectPreCheckSQLResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDataCorrectPreCheckSQLWithOptions(request, runtime);
  }

  /**
   * Queries the precheck information of SQL statements used for data import in a ticket.
   * 
   * @remarks
   * You can call this operation only if the data is imported in security mode in your data import ticket.
   * 
   * @param request - ListDataImportSQLPreCheckDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDataImportSQLPreCheckDetailResponse
   */
  async listDataImportSQLPreCheckDetailWithOptions(request: ListDataImportSQLPreCheckDetailRequest, runtime: $dara.RuntimeOptions): Promise<ListDataImportSQLPreCheckDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.pageNumer)) {
      query["PageNumer"] = request.pageNumer;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.sqlType)) {
      query["SqlType"] = request.sqlType;
    }

    if (!$dara.isNull(request.statusCode)) {
      query["StatusCode"] = request.statusCode;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDataImportSQLPreCheckDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDataImportSQLPreCheckDetailResponse>(await this.callApi(params, req, runtime), new ListDataImportSQLPreCheckDetailResponse({}));
    } else {
      return $dara.cast<ListDataImportSQLPreCheckDetailResponse>(await this.execute(params, req, runtime), new ListDataImportSQLPreCheckDetailResponse({}));
    }

  }

  /**
   * Queries the precheck information of SQL statements used for data import in a ticket.
   * 
   * @remarks
   * You can call this operation only if the data is imported in security mode in your data import ticket.
   * 
   * @param request - ListDataImportSQLPreCheckDetailRequest
   * @returns ListDataImportSQLPreCheckDetailResponse
   */
  async listDataImportSQLPreCheckDetail(request: ListDataImportSQLPreCheckDetailRequest): Promise<ListDataImportSQLPreCheckDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDataImportSQLPreCheckDetailWithOptions(request, runtime);
  }

  /**
   * Queries the types of SQL statements used for data import in a ticket.
   * 
   * @remarks
   * You can call this operation only if the data is imported in security mode in your data import ticket.
   * 
   * @param request - ListDataImportSQLTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDataImportSQLTypeResponse
   */
  async listDataImportSQLTypeWithOptions(request: ListDataImportSQLTypeRequest, runtime: $dara.RuntimeOptions): Promise<ListDataImportSQLTypeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDataImportSQLType",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDataImportSQLTypeResponse>(await this.callApi(params, req, runtime), new ListDataImportSQLTypeResponse({}));
    } else {
      return $dara.cast<ListDataImportSQLTypeResponse>(await this.execute(params, req, runtime), new ListDataImportSQLTypeResponse({}));
    }

  }

  /**
   * Queries the types of SQL statements used for data import in a ticket.
   * 
   * @remarks
   * You can call this operation only if the data is imported in security mode in your data import ticket.
   * 
   * @param request - ListDataImportSQLTypeRequest
   * @returns ListDataImportSQLTypeResponse
   */
  async listDataImportSQLType(request: ListDataImportSQLTypeRequest): Promise<ListDataImportSQLTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDataImportSQLTypeWithOptions(request, runtime);
  }

  /**
   * 获取uc的数据库目录列表
   * 
   * @param request - ListDataLakeCatalogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDataLakeCatalogResponse
   */
  async listDataLakeCatalogWithOptions(request: ListDataLakeCatalogRequest, runtime: $dara.RuntimeOptions): Promise<ListDataLakeCatalogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDataLakeCatalog",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDataLakeCatalogResponse>(await this.callApi(params, req, runtime), new ListDataLakeCatalogResponse({}));
    } else {
      return $dara.cast<ListDataLakeCatalogResponse>(await this.execute(params, req, runtime), new ListDataLakeCatalogResponse({}));
    }

  }

  /**
   * 获取uc的数据库目录列表
   * 
   * @param request - ListDataLakeCatalogRequest
   * @returns ListDataLakeCatalogResponse
   */
  async listDataLakeCatalog(request: ListDataLakeCatalogRequest): Promise<ListDataLakeCatalogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDataLakeCatalogWithOptions(request, runtime);
  }

  /**
   * 获取数据库列表
   * 
   * @param request - ListDataLakeDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDataLakeDatabaseResponse
   */
  async listDataLakeDatabaseWithOptions(request: ListDataLakeDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<ListDataLakeDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDataLakeDatabase",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDataLakeDatabaseResponse>(await this.callApi(params, req, runtime), new ListDataLakeDatabaseResponse({}));
    } else {
      return $dara.cast<ListDataLakeDatabaseResponse>(await this.execute(params, req, runtime), new ListDataLakeDatabaseResponse({}));
    }

  }

  /**
   * 获取数据库列表
   * 
   * @param request - ListDataLakeDatabaseRequest
   * @returns ListDataLakeDatabaseResponse
   */
  async listDataLakeDatabase(request: ListDataLakeDatabaseRequest): Promise<ListDataLakeDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDataLakeDatabaseWithOptions(request, runtime);
  }

  /**
   * 获取数据湖表分区列表
   * 
   * @param tmpReq - ListDataLakePartitionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDataLakePartitionResponse
   */
  async listDataLakePartitionWithOptions(tmpReq: ListDataLakePartitionRequest, runtime: $dara.RuntimeOptions): Promise<ListDataLakePartitionResponse> {
    tmpReq.validate();
    let request = new ListDataLakePartitionShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.partNames)) {
      request.partNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.partNames, "PartNames", "json");
    }

    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.partNamesShrink)) {
      body["PartNames"] = request.partNamesShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDataLakePartition",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDataLakePartitionResponse>(await this.callApi(params, req, runtime), new ListDataLakePartitionResponse({}));
    } else {
      return $dara.cast<ListDataLakePartitionResponse>(await this.execute(params, req, runtime), new ListDataLakePartitionResponse({}));
    }

  }

  /**
   * 获取数据湖表分区列表
   * 
   * @param request - ListDataLakePartitionRequest
   * @returns ListDataLakePartitionResponse
   */
  async listDataLakePartition(request: ListDataLakePartitionRequest): Promise<ListDataLakePartitionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDataLakePartitionWithOptions(request, runtime);
  }

  /**
   * 根据筛选条件获取数据湖表分区列表
   * 
   * @param request - ListDataLakePartitionByFilterRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDataLakePartitionByFilterResponse
   */
  async listDataLakePartitionByFilterWithOptions(request: ListDataLakePartitionByFilterRequest, runtime: $dara.RuntimeOptions): Promise<ListDataLakePartitionByFilterResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.filter)) {
      body["Filter"] = request.filter;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDataLakePartitionByFilter",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDataLakePartitionByFilterResponse>(await this.callApi(params, req, runtime), new ListDataLakePartitionByFilterResponse({}));
    } else {
      return $dara.cast<ListDataLakePartitionByFilterResponse>(await this.execute(params, req, runtime), new ListDataLakePartitionByFilterResponse({}));
    }

  }

  /**
   * 根据筛选条件获取数据湖表分区列表
   * 
   * @param request - ListDataLakePartitionByFilterRequest
   * @returns ListDataLakePartitionByFilterResponse
   */
  async listDataLakePartitionByFilter(request: ListDataLakePartitionByFilterRequest): Promise<ListDataLakePartitionByFilterResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDataLakePartitionByFilterWithOptions(request, runtime);
  }

  /**
   * 获取数据湖表分区名列表
   * 
   * @param request - ListDataLakePartitionNameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDataLakePartitionNameResponse
   */
  async listDataLakePartitionNameWithOptions(request: ListDataLakePartitionNameRequest, runtime: $dara.RuntimeOptions): Promise<ListDataLakePartitionNameResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDataLakePartitionName",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDataLakePartitionNameResponse>(await this.callApi(params, req, runtime), new ListDataLakePartitionNameResponse({}));
    } else {
      return $dara.cast<ListDataLakePartitionNameResponse>(await this.execute(params, req, runtime), new ListDataLakePartitionNameResponse({}));
    }

  }

  /**
   * 获取数据湖表分区名列表
   * 
   * @param request - ListDataLakePartitionNameRequest
   * @returns ListDataLakePartitionNameResponse
   */
  async listDataLakePartitionName(request: ListDataLakePartitionNameRequest): Promise<ListDataLakePartitionNameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDataLakePartitionNameWithOptions(request, runtime);
  }

  /**
   * 获取数据湖表列表
   * 
   * @param request - ListDataLakeTableRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDataLakeTableResponse
   */
  async listDataLakeTableWithOptions(request: ListDataLakeTableRequest, runtime: $dara.RuntimeOptions): Promise<ListDataLakeTableResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.tableNamePattern)) {
      query["TableNamePattern"] = request.tableNamePattern;
    }

    if (!$dara.isNull(request.tableType)) {
      query["TableType"] = request.tableType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDataLakeTable",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDataLakeTableResponse>(await this.callApi(params, req, runtime), new ListDataLakeTableResponse({}));
    } else {
      return $dara.cast<ListDataLakeTableResponse>(await this.execute(params, req, runtime), new ListDataLakeTableResponse({}));
    }

  }

  /**
   * 获取数据湖表列表
   * 
   * @param request - ListDataLakeTableRequest
   * @returns ListDataLakeTableResponse
   */
  async listDataLakeTable(request: ListDataLakeTableRequest): Promise<ListDataLakeTableResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDataLakeTableWithOptions(request, runtime);
  }

  /**
   * 获取数据湖表名列表
   * 
   * @param request - ListDataLakeTableNameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDataLakeTableNameResponse
   */
  async listDataLakeTableNameWithOptions(request: ListDataLakeTableNameRequest, runtime: $dara.RuntimeOptions): Promise<ListDataLakeTableNameResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.tableNamePattern)) {
      query["TableNamePattern"] = request.tableNamePattern;
    }

    if (!$dara.isNull(request.tableType)) {
      query["TableType"] = request.tableType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDataLakeTableName",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDataLakeTableNameResponse>(await this.callApi(params, req, runtime), new ListDataLakeTableNameResponse({}));
    } else {
      return $dara.cast<ListDataLakeTableNameResponse>(await this.execute(params, req, runtime), new ListDataLakeTableNameResponse({}));
    }

  }

  /**
   * 获取数据湖表名列表
   * 
   * @param request - ListDataLakeTableNameRequest
   * @returns ListDataLakeTableNameResponse
   */
  async listDataLakeTableName(request: ListDataLakeTableNameRequest): Promise<ListDataLakeTableNameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDataLakeTableNameWithOptions(request, runtime);
  }

  /**
   * 获取表信息
   * 
   * @param request - ListDataLakeTablebaseInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDataLakeTablebaseInfoResponse
   */
  async listDataLakeTablebaseInfoWithOptions(request: ListDataLakeTablebaseInfoRequest, runtime: $dara.RuntimeOptions): Promise<ListDataLakeTablebaseInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.page)) {
      query["Page"] = request.page;
    }

    if (!$dara.isNull(request.rows)) {
      query["Rows"] = request.rows;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDataLakeTablebaseInfo",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDataLakeTablebaseInfoResponse>(await this.callApi(params, req, runtime), new ListDataLakeTablebaseInfoResponse({}));
    } else {
      return $dara.cast<ListDataLakeTablebaseInfoResponse>(await this.execute(params, req, runtime), new ListDataLakeTablebaseInfoResponse({}));
    }

  }

  /**
   * 获取表信息
   * 
   * @param request - ListDataLakeTablebaseInfoRequest
   * @returns ListDataLakeTablebaseInfoResponse
   */
  async listDataLakeTablebaseInfo(request: ListDataLakeTablebaseInfoRequest): Promise<ListDataLakeTablebaseInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDataLakeTablebaseInfoWithOptions(request, runtime);
  }

  /**
   * Queries the permissions of users on a database.
   * 
   * @param request - ListDatabaseUserPermssionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDatabaseUserPermssionsResponse
   */
  async listDatabaseUserPermssionsWithOptions(request: ListDatabaseUserPermssionsRequest, runtime: $dara.RuntimeOptions): Promise<ListDatabaseUserPermssionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.logic)) {
      query["Logic"] = request.logic;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.permType)) {
      query["PermType"] = request.permType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userName)) {
      query["UserName"] = request.userName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDatabaseUserPermssions",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDatabaseUserPermssionsResponse>(await this.callApi(params, req, runtime), new ListDatabaseUserPermssionsResponse({}));
    } else {
      return $dara.cast<ListDatabaseUserPermssionsResponse>(await this.execute(params, req, runtime), new ListDatabaseUserPermssionsResponse({}));
    }

  }

  /**
   * Queries the permissions of users on a database.
   * 
   * @param request - ListDatabaseUserPermssionsRequest
   * @returns ListDatabaseUserPermssionsResponse
   */
  async listDatabaseUserPermssions(request: ListDatabaseUserPermssionsRequest): Promise<ListDatabaseUserPermssionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDatabaseUserPermssionsWithOptions(request, runtime);
  }

  /**
   * Queries the databases in a database instance.
   * 
   * @param request - ListDatabasesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDatabasesResponse
   */
  async listDatabasesWithOptions(request: ListDatabasesRequest, runtime: $dara.RuntimeOptions): Promise<ListDatabasesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDatabases",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDatabasesResponse>(await this.callApi(params, req, runtime), new ListDatabasesResponse({}));
    } else {
      return $dara.cast<ListDatabasesResponse>(await this.execute(params, req, runtime), new ListDatabasesResponse({}));
    }

  }

  /**
   * Queries the databases in a database instance.
   * 
   * @param request - ListDatabasesRequest
   * @returns ListDatabasesResponse
   */
  async listDatabases(request: ListDatabasesRequest): Promise<ListDatabasesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDatabasesWithOptions(request, runtime);
  }

  /**
   * Queries the default service level agreement (SLA) timeout rules.
   * 
   * @param request - ListDefaultSLARulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDefaultSLARulesResponse
   */
  async listDefaultSLARulesWithOptions(request: ListDefaultSLARulesRequest, runtime: $dara.RuntimeOptions): Promise<ListDefaultSLARulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDefaultSLARules",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDefaultSLARulesResponse>(await this.callApi(params, req, runtime), new ListDefaultSLARulesResponse({}));
    } else {
      return $dara.cast<ListDefaultSLARulesResponse>(await this.execute(params, req, runtime), new ListDefaultSLARulesResponse({}));
    }

  }

  /**
   * Queries the default service level agreement (SLA) timeout rules.
   * 
   * @param request - ListDefaultSLARulesRequest
   * @returns ListDefaultSLARulesResponse
   */
  async listDefaultSLARules(request: ListDefaultSLARulesRequest): Promise<ListDefaultSLARulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDefaultSLARulesWithOptions(request, runtime);
  }

  /**
   * Queries masking rules.
   * 
   * @param request - ListDesensitizationRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDesensitizationRuleResponse
   */
  async listDesensitizationRuleWithOptions(request: ListDesensitizationRuleRequest, runtime: $dara.RuntimeOptions): Promise<ListDesensitizationRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.funcType)) {
      query["FuncType"] = request.funcType;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDesensitizationRule",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDesensitizationRuleResponse>(await this.callApi(params, req, runtime), new ListDesensitizationRuleResponse({}));
    } else {
      return $dara.cast<ListDesensitizationRuleResponse>(await this.execute(params, req, runtime), new ListDesensitizationRuleResponse({}));
    }

  }

  /**
   * Queries masking rules.
   * 
   * @param request - ListDesensitizationRuleRequest
   * @returns ListDesensitizationRuleResponse
   */
  async listDesensitizationRule(request: ListDesensitizationRuleRequest): Promise<ListDesensitizationRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDesensitizationRuleWithOptions(request, runtime);
  }

  /**
   * Queries valid orders.
   * 
   * @param request - ListEffectiveOrdersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListEffectiveOrdersResponse
   */
  async listEffectiveOrdersWithOptions(request: ListEffectiveOrdersRequest, runtime: $dara.RuntimeOptions): Promise<ListEffectiveOrdersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListEffectiveOrders",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListEffectiveOrdersResponse>(await this.callApi(params, req, runtime), new ListEffectiveOrdersResponse({}));
    } else {
      return $dara.cast<ListEffectiveOrdersResponse>(await this.execute(params, req, runtime), new ListEffectiveOrdersResponse({}));
    }

  }

  /**
   * Queries valid orders.
   * 
   * @param request - ListEffectiveOrdersRequest
   * @returns ListEffectiveOrdersResponse
   */
  async listEffectiveOrders(request: ListEffectiveOrdersRequest): Promise<ListEffectiveOrdersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listEffectiveOrdersWithOptions(request, runtime);
  }

  /**
   * Queries the indexes of a table.
   * 
   * @param request - ListIndexesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListIndexesResponse
   */
  async listIndexesWithOptions(request: ListIndexesRequest, runtime: $dara.RuntimeOptions): Promise<ListIndexesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.logic)) {
      query["Logic"] = request.logic;
    }

    if (!$dara.isNull(request.tableId)) {
      query["TableId"] = request.tableId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListIndexes",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListIndexesResponse>(await this.callApi(params, req, runtime), new ListIndexesResponse({}));
    } else {
      return $dara.cast<ListIndexesResponse>(await this.execute(params, req, runtime), new ListIndexesResponse({}));
    }

  }

  /**
   * Queries the indexes of a table.
   * 
   * @param request - ListIndexesRequest
   * @returns ListIndexesResponse
   */
  async listIndexes(request: ListIndexesRequest): Promise<ListIndexesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listIndexesWithOptions(request, runtime);
  }

  /**
   * Queries the logon records of an instance.
   * 
   * @param request - ListInstanceLoginAuditLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListInstanceLoginAuditLogResponse
   */
  async listInstanceLoginAuditLogWithOptions(request: ListInstanceLoginAuditLogRequest, runtime: $dara.RuntimeOptions): Promise<ListInstanceLoginAuditLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.opUserName)) {
      query["OpUserName"] = request.opUserName;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.searchName)) {
      query["SearchName"] = request.searchName;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListInstanceLoginAuditLog",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListInstanceLoginAuditLogResponse>(await this.callApi(params, req, runtime), new ListInstanceLoginAuditLogResponse({}));
    } else {
      return $dara.cast<ListInstanceLoginAuditLogResponse>(await this.execute(params, req, runtime), new ListInstanceLoginAuditLogResponse({}));
    }

  }

  /**
   * Queries the logon records of an instance.
   * 
   * @param request - ListInstanceLoginAuditLogRequest
   * @returns ListInstanceLoginAuditLogResponse
   */
  async listInstanceLoginAuditLog(request: ListInstanceLoginAuditLogRequest): Promise<ListInstanceLoginAuditLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listInstanceLoginAuditLogWithOptions(request, runtime);
  }

  /**
   * Queries the permissions of a user on a specific instance.
   * 
   * @param request - ListInstanceUserPermissionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListInstanceUserPermissionsResponse
   */
  async listInstanceUserPermissionsWithOptions(request: ListInstanceUserPermissionsRequest, runtime: $dara.RuntimeOptions): Promise<ListInstanceUserPermissionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userName)) {
      query["UserName"] = request.userName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListInstanceUserPermissions",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListInstanceUserPermissionsResponse>(await this.callApi(params, req, runtime), new ListInstanceUserPermissionsResponse({}));
    } else {
      return $dara.cast<ListInstanceUserPermissionsResponse>(await this.execute(params, req, runtime), new ListInstanceUserPermissionsResponse({}));
    }

  }

  /**
   * Queries the permissions of a user on a specific instance.
   * 
   * @param request - ListInstanceUserPermissionsRequest
   * @returns ListInstanceUserPermissionsResponse
   */
  async listInstanceUserPermissions(request: ListInstanceUserPermissionsRequest): Promise<ListInstanceUserPermissionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listInstanceUserPermissionsWithOptions(request, runtime);
  }

  /**
   * Queries the information about database instances.
   * 
   * @param request - ListInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListInstancesResponse
   */
  async listInstancesWithOptions(request: ListInstancesRequest, runtime: $dara.RuntimeOptions): Promise<ListInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbType)) {
      query["DbType"] = request.dbType;
    }

    if (!$dara.isNull(request.envType)) {
      query["EnvType"] = request.envType;
    }

    if (!$dara.isNull(request.instanceSource)) {
      query["InstanceSource"] = request.instanceSource;
    }

    if (!$dara.isNull(request.instanceState)) {
      query["InstanceState"] = request.instanceState;
    }

    if (!$dara.isNull(request.netType)) {
      query["NetType"] = request.netType;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListInstances",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListInstancesResponse>(await this.callApi(params, req, runtime), new ListInstancesResponse({}));
    } else {
      return $dara.cast<ListInstancesResponse>(await this.execute(params, req, runtime), new ListInstancesResponse({}));
    }

  }

  /**
   * Queries the information about database instances.
   * 
   * @param request - ListInstancesRequest
   * @returns ListInstancesResponse
   */
  async listInstances(request: ListInstancesRequest): Promise<ListInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listInstancesWithOptions(request, runtime);
  }

  /**
   * Queries the task flows corresponding to a specific business scenario in a workspace in Data Management (DMS).
   * 
   * @remarks
   *   Before you call this operation, make sure that you have the access permissions on the workspace. If you do not have the access permissions on the workspace, you can contact a DMS administrator, database administrator (DBA), or workspace administrator to add you as a member of the workspace. The [AddLhMembers](https://help.aliyun.com/document_detail/424759.html) operation can be called to add a workspace member.
   * *   If you are a DMS administrator or a workspace administrator, you can query the business scenarios and task flows related to a user in a workspace based on the user ID.
   * 
   * @param request - ListLhTaskFlowAndScenarioRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLhTaskFlowAndScenarioResponse
   */
  async listLhTaskFlowAndScenarioWithOptions(request: ListLhTaskFlowAndScenarioRequest, runtime: $dara.RuntimeOptions): Promise<ListLhTaskFlowAndScenarioResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.spaceId)) {
      query["SpaceId"] = request.spaceId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListLhTaskFlowAndScenario",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListLhTaskFlowAndScenarioResponse>(await this.callApi(params, req, runtime), new ListLhTaskFlowAndScenarioResponse({}));
    } else {
      return $dara.cast<ListLhTaskFlowAndScenarioResponse>(await this.execute(params, req, runtime), new ListLhTaskFlowAndScenarioResponse({}));
    }

  }

  /**
   * Queries the task flows corresponding to a specific business scenario in a workspace in Data Management (DMS).
   * 
   * @remarks
   *   Before you call this operation, make sure that you have the access permissions on the workspace. If you do not have the access permissions on the workspace, you can contact a DMS administrator, database administrator (DBA), or workspace administrator to add you as a member of the workspace. The [AddLhMembers](https://help.aliyun.com/document_detail/424759.html) operation can be called to add a workspace member.
   * *   If you are a DMS administrator or a workspace administrator, you can query the business scenarios and task flows related to a user in a workspace based on the user ID.
   * 
   * @param request - ListLhTaskFlowAndScenarioRequest
   * @returns ListLhTaskFlowAndScenarioResponse
   */
  async listLhTaskFlowAndScenario(request: ListLhTaskFlowAndScenarioRequest): Promise<ListLhTaskFlowAndScenarioResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLhTaskFlowAndScenarioWithOptions(request, runtime);
  }

  /**
   * Queries the details of logical databases.
   * 
   * @param request - ListLogicDatabasesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLogicDatabasesResponse
   */
  async listLogicDatabasesWithOptions(request: ListLogicDatabasesRequest, runtime: $dara.RuntimeOptions): Promise<ListLogicDatabasesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListLogicDatabases",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListLogicDatabasesResponse>(await this.callApi(params, req, runtime), new ListLogicDatabasesResponse({}));
    } else {
      return $dara.cast<ListLogicDatabasesResponse>(await this.execute(params, req, runtime), new ListLogicDatabasesResponse({}));
    }

  }

  /**
   * Queries the details of logical databases.
   * 
   * @param request - ListLogicDatabasesRequest
   * @returns ListLogicDatabasesResponse
   */
  async listLogicDatabases(request: ListLogicDatabasesRequest): Promise<ListLogicDatabasesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLogicDatabasesWithOptions(request, runtime);
  }

  /**
   * Queries the routing algorithms of a logical table.
   * 
   * @param request - ListLogicTableRouteConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLogicTableRouteConfigResponse
   */
  async listLogicTableRouteConfigWithOptions(request: ListLogicTableRouteConfigRequest, runtime: $dara.RuntimeOptions): Promise<ListLogicTableRouteConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tableId)) {
      query["TableId"] = request.tableId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListLogicTableRouteConfig",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListLogicTableRouteConfigResponse>(await this.callApi(params, req, runtime), new ListLogicTableRouteConfigResponse({}));
    } else {
      return $dara.cast<ListLogicTableRouteConfigResponse>(await this.execute(params, req, runtime), new ListLogicTableRouteConfigResponse({}));
    }

  }

  /**
   * Queries the routing algorithms of a logical table.
   * 
   * @param request - ListLogicTableRouteConfigRequest
   * @returns ListLogicTableRouteConfigResponse
   */
  async listLogicTableRouteConfig(request: ListLogicTableRouteConfigRequest): Promise<ListLogicTableRouteConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLogicTableRouteConfigWithOptions(request, runtime);
  }

  /**
   * Queries the details of the logical tables in a logical database.
   * 
   * @param request - ListLogicTablesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLogicTablesResponse
   */
  async listLogicTablesWithOptions(request: ListLogicTablesRequest, runtime: $dara.RuntimeOptions): Promise<ListLogicTablesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.databaseId)) {
      query["DatabaseId"] = request.databaseId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.returnGuid)) {
      query["ReturnGuid"] = request.returnGuid;
    }

    if (!$dara.isNull(request.searchName)) {
      query["SearchName"] = request.searchName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListLogicTables",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListLogicTablesResponse>(await this.callApi(params, req, runtime), new ListLogicTablesResponse({}));
    } else {
      return $dara.cast<ListLogicTablesResponse>(await this.execute(params, req, runtime), new ListLogicTablesResponse({}));
    }

  }

  /**
   * Queries the details of the logical tables in a logical database.
   * 
   * @param request - ListLogicTablesRequest
   * @returns ListLogicTablesResponse
   */
  async listLogicTables(request: ListLogicTablesRequest): Promise<ListLogicTablesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLogicTablesWithOptions(request, runtime);
  }

  /**
   * Queries tickets in Data Management (DMS).
   * 
   * @param request - ListOrdersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListOrdersResponse
   */
  async listOrdersWithOptions(request: ListOrdersRequest, runtime: $dara.RuntimeOptions): Promise<ListOrdersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.orderResultType)) {
      query["OrderResultType"] = request.orderResultType;
    }

    if (!$dara.isNull(request.orderStatus)) {
      query["OrderStatus"] = request.orderStatus;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.pluginType)) {
      query["PluginType"] = request.pluginType;
    }

    if (!$dara.isNull(request.searchContent)) {
      query["SearchContent"] = request.searchContent;
    }

    if (!$dara.isNull(request.searchDateType)) {
      query["SearchDateType"] = request.searchDateType;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListOrders",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListOrdersResponse>(await this.callApi(params, req, runtime), new ListOrdersResponse({}));
    } else {
      return $dara.cast<ListOrdersResponse>(await this.execute(params, req, runtime), new ListOrdersResponse({}));
    }

  }

  /**
   * Queries tickets in Data Management (DMS).
   * 
   * @param request - ListOrdersRequest
   * @returns ListOrdersResponse
   */
  async listOrders(request: ListOrdersRequest): Promise<ListOrdersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listOrdersWithOptions(request, runtime);
  }

  /**
   * Queries the proxies that are generated by the secure access proxy feature.
   * 
   * @param request - ListProxiesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListProxiesResponse
   */
  async listProxiesWithOptions(request: ListProxiesRequest, runtime: $dara.RuntimeOptions): Promise<ListProxiesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListProxies",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListProxiesResponse>(await this.callApi(params, req, runtime), new ListProxiesResponse({}));
    } else {
      return $dara.cast<ListProxiesResponse>(await this.execute(params, req, runtime), new ListProxiesResponse({}));
    }

  }

  /**
   * Queries the proxies that are generated by the secure access proxy feature.
   * 
   * @param request - ListProxiesRequest
   * @returns ListProxiesResponse
   */
  async listProxies(request: ListProxiesRequest): Promise<ListProxiesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listProxiesWithOptions(request, runtime);
  }

  /**
   * Queries information about users that are authorized to access a database instance by using the secure access proxy feature.
   * 
   * @param request - ListProxyAccessesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListProxyAccessesResponse
   */
  async listProxyAccessesWithOptions(request: ListProxyAccessesRequest, runtime: $dara.RuntimeOptions): Promise<ListProxyAccessesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.proxyId)) {
      query["ProxyId"] = request.proxyId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListProxyAccesses",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListProxyAccessesResponse>(await this.callApi(params, req, runtime), new ListProxyAccessesResponse({}));
    } else {
      return $dara.cast<ListProxyAccessesResponse>(await this.execute(params, req, runtime), new ListProxyAccessesResponse({}));
    }

  }

  /**
   * Queries information about users that are authorized to access a database instance by using the secure access proxy feature.
   * 
   * @param request - ListProxyAccessesRequest
   * @returns ListProxyAccessesResponse
   */
  async listProxyAccesses(request: ListProxyAccessesRequest): Promise<ListProxyAccessesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listProxyAccessesWithOptions(request, runtime);
  }

  /**
   * 操作审计-数据安全代理SQL执行列表
   * 
   * @param request - ListProxySQLExecAuditLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListProxySQLExecAuditLogResponse
   */
  async listProxySQLExecAuditLogWithOptions(request: ListProxySQLExecAuditLogRequest, runtime: $dara.RuntimeOptions): Promise<ListProxySQLExecAuditLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.execState)) {
      query["ExecState"] = request.execState;
    }

    if (!$dara.isNull(request.opUserName)) {
      query["OpUserName"] = request.opUserName;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.SQLType)) {
      query["SQLType"] = request.SQLType;
    }

    if (!$dara.isNull(request.searchName)) {
      query["SearchName"] = request.searchName;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListProxySQLExecAuditLog",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListProxySQLExecAuditLogResponse>(await this.callApi(params, req, runtime), new ListProxySQLExecAuditLogResponse({}));
    } else {
      return $dara.cast<ListProxySQLExecAuditLogResponse>(await this.execute(params, req, runtime), new ListProxySQLExecAuditLogResponse({}));
    }

  }

  /**
   * 操作审计-数据安全代理SQL执行列表
   * 
   * @param request - ListProxySQLExecAuditLogRequest
   * @returns ListProxySQLExecAuditLogResponse
   */
  async listProxySQLExecAuditLog(request: ListProxySQLExecAuditLogRequest): Promise<ListProxySQLExecAuditLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listProxySQLExecAuditLogWithOptions(request, runtime);
  }

  /**
   * Queries the custom service level agreement (SLA) rules.
   * 
   * @param request - ListSLARulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSLARulesResponse
   */
  async listSLARulesWithOptions(request: ListSLARulesRequest, runtime: $dara.RuntimeOptions): Promise<ListSLARulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSLARules",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListSLARulesResponse>(await this.callApi(params, req, runtime), new ListSLARulesResponse({}));
    } else {
      return $dara.cast<ListSLARulesResponse>(await this.execute(params, req, runtime), new ListSLARulesResponse({}));
    }

  }

  /**
   * Queries the custom service level agreement (SLA) rules.
   * 
   * @param request - ListSLARulesRequest
   * @returns ListSLARulesResponse
   */
  async listSLARules(request: ListSLARulesRequest): Promise<ListSLARulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSLARulesWithOptions(request, runtime);
  }

  /**
   * Queries SQL statements that were written on the SQLConsole tab.
   * 
   * @param request - ListSQLExecAuditLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSQLExecAuditLogResponse
   */
  async listSQLExecAuditLogWithOptions(request: ListSQLExecAuditLogRequest, runtime: $dara.RuntimeOptions): Promise<ListSQLExecAuditLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.execState)) {
      query["ExecState"] = request.execState;
    }

    if (!$dara.isNull(request.opUserName)) {
      query["OpUserName"] = request.opUserName;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.searchName)) {
      query["SearchName"] = request.searchName;
    }

    if (!$dara.isNull(request.sqlType)) {
      query["SqlType"] = request.sqlType;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSQLExecAuditLog",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListSQLExecAuditLogResponse>(await this.callApi(params, req, runtime), new ListSQLExecAuditLogResponse({}));
    } else {
      return $dara.cast<ListSQLExecAuditLogResponse>(await this.execute(params, req, runtime), new ListSQLExecAuditLogResponse({}));
    }

  }

  /**
   * Queries SQL statements that were written on the SQLConsole tab.
   * 
   * @param request - ListSQLExecAuditLogRequest
   * @returns ListSQLExecAuditLogResponse
   */
  async listSQLExecAuditLog(request: ListSQLExecAuditLogRequest): Promise<ListSQLExecAuditLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSQLExecAuditLogWithOptions(request, runtime);
  }

  /**
   * Queries the details of the SQL statements that are involved in an SQL review ticket.
   * 
   * @remarks
   * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
   * 
   * @param tmpReq - ListSQLReviewOriginSQLRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSQLReviewOriginSQLResponse
   */
  async listSQLReviewOriginSQLWithOptions(tmpReq: ListSQLReviewOriginSQLRequest, runtime: $dara.RuntimeOptions): Promise<ListSQLReviewOriginSQLResponse> {
    tmpReq.validate();
    let request = new ListSQLReviewOriginSQLShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.orderActionDetail)) {
      request.orderActionDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.orderActionDetail, "OrderActionDetail", "json");
    }

    let query = { };
    if (!$dara.isNull(request.orderActionDetailShrink)) {
      query["OrderActionDetail"] = request.orderActionDetailShrink;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSQLReviewOriginSQL",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListSQLReviewOriginSQLResponse>(await this.callApi(params, req, runtime), new ListSQLReviewOriginSQLResponse({}));
    } else {
      return $dara.cast<ListSQLReviewOriginSQLResponse>(await this.execute(params, req, runtime), new ListSQLReviewOriginSQLResponse({}));
    }

  }

  /**
   * Queries the details of the SQL statements that are involved in an SQL review ticket.
   * 
   * @remarks
   * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
   * 
   * @param request - ListSQLReviewOriginSQLRequest
   * @returns ListSQLReviewOriginSQLResponse
   */
  async listSQLReviewOriginSQL(request: ListSQLReviewOriginSQLRequest): Promise<ListSQLReviewOriginSQLResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSQLReviewOriginSQLWithOptions(request, runtime);
  }

  /**
   * Queries business scenarios.
   * 
   * @param request - ListScenariosRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListScenariosResponse
   */
  async listScenariosWithOptions(request: ListScenariosRequest, runtime: $dara.RuntimeOptions): Promise<ListScenariosResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListScenarios",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListScenariosResponse>(await this.callApi(params, req, runtime), new ListScenariosResponse({}));
    } else {
      return $dara.cast<ListScenariosResponse>(await this.execute(params, req, runtime), new ListScenariosResponse({}));
    }

  }

  /**
   * Queries business scenarios.
   * 
   * @param request - ListScenariosRequest
   * @returns ListScenariosResponse
   */
  async listScenarios(request: ListScenariosRequest): Promise<ListScenariosResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listScenariosWithOptions(request, runtime);
  }

  /**
   * 获取敏感字段信息
   * 
   * @param request - ListSensitiveColumnInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSensitiveColumnInfoResponse
   */
  async listSensitiveColumnInfoWithOptions(request: ListSensitiveColumnInfoRequest, runtime: $dara.RuntimeOptions): Promise<ListSensitiveColumnInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.columnName)) {
      query["ColumnName"] = request.columnName;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.schemaName)) {
      query["SchemaName"] = request.schemaName;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSensitiveColumnInfo",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListSensitiveColumnInfoResponse>(await this.callApi(params, req, runtime), new ListSensitiveColumnInfoResponse({}));
    } else {
      return $dara.cast<ListSensitiveColumnInfoResponse>(await this.execute(params, req, runtime), new ListSensitiveColumnInfoResponse({}));
    }

  }

  /**
   * 获取敏感字段信息
   * 
   * @param request - ListSensitiveColumnInfoRequest
   * @returns ListSensitiveColumnInfoResponse
   */
  async listSensitiveColumnInfo(request: ListSensitiveColumnInfoRequest): Promise<ListSensitiveColumnInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSensitiveColumnInfoWithOptions(request, runtime);
  }

  /**
   * Queries sensitive fields in a table of a database.
   * 
   * @param request - ListSensitiveColumnsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSensitiveColumnsResponse
   */
  async listSensitiveColumnsWithOptions(request: ListSensitiveColumnsRequest, runtime: $dara.RuntimeOptions): Promise<ListSensitiveColumnsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.columnName)) {
      query["ColumnName"] = request.columnName;
    }

    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.logic)) {
      query["Logic"] = request.logic;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.schemaName)) {
      query["SchemaName"] = request.schemaName;
    }

    if (!$dara.isNull(request.securityLevel)) {
      query["SecurityLevel"] = request.securityLevel;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSensitiveColumns",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListSensitiveColumnsResponse>(await this.callApi(params, req, runtime), new ListSensitiveColumnsResponse({}));
    } else {
      return $dara.cast<ListSensitiveColumnsResponse>(await this.execute(params, req, runtime), new ListSensitiveColumnsResponse({}));
    }

  }

  /**
   * Queries sensitive fields in a table of a database.
   * 
   * @param request - ListSensitiveColumnsRequest
   * @returns ListSensitiveColumnsResponse
   */
  async listSensitiveColumns(request: ListSensitiveColumnsRequest): Promise<ListSensitiveColumnsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSensitiveColumnsWithOptions(request, runtime);
  }

  /**
   * Queries the details of a sensitive field.
   * 
   * @param request - ListSensitiveColumnsDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSensitiveColumnsDetailResponse
   */
  async listSensitiveColumnsDetailWithOptions(request: ListSensitiveColumnsDetailRequest, runtime: $dara.RuntimeOptions): Promise<ListSensitiveColumnsDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.columnName)) {
      query["ColumnName"] = request.columnName;
    }

    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.logic)) {
      query["Logic"] = request.logic;
    }

    if (!$dara.isNull(request.schemaName)) {
      query["SchemaName"] = request.schemaName;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSensitiveColumnsDetail",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListSensitiveColumnsDetailResponse>(await this.callApi(params, req, runtime), new ListSensitiveColumnsDetailResponse({}));
    } else {
      return $dara.cast<ListSensitiveColumnsDetailResponse>(await this.execute(params, req, runtime), new ListSensitiveColumnsDetailResponse({}));
    }

  }

  /**
   * Queries the details of a sensitive field.
   * 
   * @param request - ListSensitiveColumnsDetailRequest
   * @returns ListSensitiveColumnsDetailResponse
   */
  async listSensitiveColumnsDetail(request: ListSensitiveColumnsDetailRequest): Promise<ListSensitiveColumnsDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSensitiveColumnsDetailWithOptions(request, runtime);
  }

  /**
   * Queries the audit logs for sensitive information.
   * 
   * @param request - ListSensitiveDataAuditLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSensitiveDataAuditLogResponse
   */
  async listSensitiveDataAuditLogWithOptions(request: ListSensitiveDataAuditLogRequest, runtime: $dara.RuntimeOptions): Promise<ListSensitiveDataAuditLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.columnName)) {
      query["ColumnName"] = request.columnName;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.moduleName)) {
      query["ModuleName"] = request.moduleName;
    }

    if (!$dara.isNull(request.opUserName)) {
      query["OpUserName"] = request.opUserName;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSensitiveDataAuditLog",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListSensitiveDataAuditLogResponse>(await this.callApi(params, req, runtime), new ListSensitiveDataAuditLogResponse({}));
    } else {
      return $dara.cast<ListSensitiveDataAuditLogResponse>(await this.execute(params, req, runtime), new ListSensitiveDataAuditLogResponse({}));
    }

  }

  /**
   * Queries the audit logs for sensitive information.
   * 
   * @param request - ListSensitiveDataAuditLogRequest
   * @returns ListSensitiveDataAuditLogResponse
   */
  async listSensitiveDataAuditLog(request: ListSensitiveDataAuditLogRequest): Promise<ListSensitiveDataAuditLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSensitiveDataAuditLogWithOptions(request, runtime);
  }

  /**
   * Queries the sensitivity levels of a classification template.
   * 
   * @param request - ListSensitivityLevelRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSensitivityLevelResponse
   */
  async listSensitivityLevelWithOptions(request: ListSensitivityLevelRequest, runtime: $dara.RuntimeOptions): Promise<ListSensitivityLevelResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSensitivityLevel",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListSensitivityLevelResponse>(await this.callApi(params, req, runtime), new ListSensitivityLevelResponse({}));
    } else {
      return $dara.cast<ListSensitivityLevelResponse>(await this.execute(params, req, runtime), new ListSensitivityLevelResponse({}));
    }

  }

  /**
   * Queries the sensitivity levels of a classification template.
   * 
   * @param request - ListSensitivityLevelRequest
   * @returns ListSensitivityLevelResponse
   */
  async listSensitivityLevel(request: ListSensitivityLevelRequest): Promise<ListSensitivityLevelResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSensitivityLevelWithOptions(request, runtime);
  }

  /**
   * Queries security rule sets.
   * 
   * @param request - ListStandardGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListStandardGroupsResponse
   */
  async listStandardGroupsWithOptions(request: ListStandardGroupsRequest, runtime: $dara.RuntimeOptions): Promise<ListStandardGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListStandardGroups",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListStandardGroupsResponse>(await this.callApi(params, req, runtime), new ListStandardGroupsResponse({}));
    } else {
      return $dara.cast<ListStandardGroupsResponse>(await this.execute(params, req, runtime), new ListStandardGroupsResponse({}));
    }

  }

  /**
   * Queries security rule sets.
   * 
   * @param request - ListStandardGroupsRequest
   * @returns ListStandardGroupsResponse
   */
  async listStandardGroups(request: ListStandardGroupsRequest): Promise<ListStandardGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listStandardGroupsWithOptions(request, runtime);
  }

  /**
   * Queries the tables in a database.
   * 
   * @remarks
   * You can call this operation only for database instances whose control mode is Security Collaboration.
   * 
   * @param request - ListTablesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTablesResponse
   */
  async listTablesWithOptions(request: ListTablesRequest, runtime: $dara.RuntimeOptions): Promise<ListTablesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.databaseId)) {
      query["DatabaseId"] = request.databaseId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.returnGuid)) {
      query["ReturnGuid"] = request.returnGuid;
    }

    if (!$dara.isNull(request.searchName)) {
      query["SearchName"] = request.searchName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTables",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListTablesResponse>(await this.callApi(params, req, runtime), new ListTablesResponse({}));
    } else {
      return $dara.cast<ListTablesResponse>(await this.execute(params, req, runtime), new ListTablesResponse({}));
    }

  }

  /**
   * Queries the tables in a database.
   * 
   * @remarks
   * You can call this operation only for database instances whose control mode is Security Collaboration.
   * 
   * @param request - ListTablesRequest
   * @returns ListTablesResponse
   */
  async listTables(request: ListTablesRequest): Promise<ListTablesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTablesWithOptions(request, runtime);
  }

  /**
   * 任务编排获取任务流列表
   * 
   * @param request - ListTaskFlowRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTaskFlowResponse
   */
  async listTaskFlowWithOptions(request: ListTaskFlowRequest, runtime: $dara.RuntimeOptions): Promise<ListTaskFlowResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTaskFlow",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListTaskFlowResponse>(await this.callApi(params, req, runtime), new ListTaskFlowResponse({}));
    } else {
      return $dara.cast<ListTaskFlowResponse>(await this.execute(params, req, runtime), new ListTaskFlowResponse({}));
    }

  }

  /**
   * 任务编排获取任务流列表
   * 
   * @param request - ListTaskFlowRequest
   * @returns ListTaskFlowResponse
   */
  async listTaskFlow(request: ListTaskFlowRequest): Promise<ListTaskFlowResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTaskFlowWithOptions(request, runtime);
  }

  /**
   * Queries the constants for a task flow.
   * 
   * @param request - ListTaskFlowConstantsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTaskFlowConstantsResponse
   */
  async listTaskFlowConstantsWithOptions(request: ListTaskFlowConstantsRequest, runtime: $dara.RuntimeOptions): Promise<ListTaskFlowConstantsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTaskFlowConstants",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListTaskFlowConstantsResponse>(await this.callApi(params, req, runtime), new ListTaskFlowConstantsResponse({}));
    } else {
      return $dara.cast<ListTaskFlowConstantsResponse>(await this.execute(params, req, runtime), new ListTaskFlowConstantsResponse({}));
    }

  }

  /**
   * Queries the constants for a task flow.
   * 
   * @param request - ListTaskFlowConstantsRequest
   * @returns ListTaskFlowConstantsResponse
   */
  async listTaskFlowConstants(request: ListTaskFlowConstantsRequest): Promise<ListTaskFlowConstantsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTaskFlowConstantsWithOptions(request, runtime);
  }

  /**
   * Queries the users that are involved in a specified task flow.
   * 
   * @param request - ListTaskFlowCooperatorsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTaskFlowCooperatorsResponse
   */
  async listTaskFlowCooperatorsWithOptions(request: ListTaskFlowCooperatorsRequest, runtime: $dara.RuntimeOptions): Promise<ListTaskFlowCooperatorsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTaskFlowCooperators",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListTaskFlowCooperatorsResponse>(await this.callApi(params, req, runtime), new ListTaskFlowCooperatorsResponse({}));
    } else {
      return $dara.cast<ListTaskFlowCooperatorsResponse>(await this.execute(params, req, runtime), new ListTaskFlowCooperatorsResponse({}));
    }

  }

  /**
   * Queries the users that are involved in a specified task flow.
   * 
   * @param request - ListTaskFlowCooperatorsRequest
   * @returns ListTaskFlowCooperatorsResponse
   */
  async listTaskFlowCooperators(request: ListTaskFlowCooperatorsRequest): Promise<ListTaskFlowCooperatorsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTaskFlowCooperatorsWithOptions(request, runtime);
  }

  /**
   * Queries the edges of the directed acyclic graph (DAG) for a specified task flow based on multiple conditions.
   * 
   * @remarks
   * This operation is used for multi-condition query. You can call this operation to query the edges of a specified task flow that meet all specified conditions.
   * 
   * @param request - ListTaskFlowEdgesByConditionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTaskFlowEdgesByConditionResponse
   */
  async listTaskFlowEdgesByConditionWithOptions(request: ListTaskFlowEdgesByConditionRequest, runtime: $dara.RuntimeOptions): Promise<ListTaskFlowEdgesByConditionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.nodeEnd)) {
      query["NodeEnd"] = request.nodeEnd;
    }

    if (!$dara.isNull(request.nodeFrom)) {
      query["NodeFrom"] = request.nodeFrom;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTaskFlowEdgesByCondition",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListTaskFlowEdgesByConditionResponse>(await this.callApi(params, req, runtime), new ListTaskFlowEdgesByConditionResponse({}));
    } else {
      return $dara.cast<ListTaskFlowEdgesByConditionResponse>(await this.execute(params, req, runtime), new ListTaskFlowEdgesByConditionResponse({}));
    }

  }

  /**
   * Queries the edges of the directed acyclic graph (DAG) for a specified task flow based on multiple conditions.
   * 
   * @remarks
   * This operation is used for multi-condition query. You can call this operation to query the edges of a specified task flow that meet all specified conditions.
   * 
   * @param request - ListTaskFlowEdgesByConditionRequest
   * @returns ListTaskFlowEdgesByConditionResponse
   */
  async listTaskFlowEdgesByCondition(request: ListTaskFlowEdgesByConditionRequest): Promise<ListTaskFlowEdgesByConditionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTaskFlowEdgesByConditionWithOptions(request, runtime);
  }

  /**
   * Queries the execution records of a task flow.
   * 
   * @param request - ListTaskFlowInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTaskFlowInstanceResponse
   */
  async listTaskFlowInstanceWithOptions(request: ListTaskFlowInstanceRequest, runtime: $dara.RuntimeOptions): Promise<ListTaskFlowInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.pageIndex)) {
      query["PageIndex"] = request.pageIndex;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.startTimeBegin)) {
      query["StartTimeBegin"] = request.startTimeBegin;
    }

    if (!$dara.isNull(request.startTimeEnd)) {
      query["StartTimeEnd"] = request.startTimeEnd;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.triggerType)) {
      query["TriggerType"] = request.triggerType;
    }

    if (!$dara.isNull(request.useBizDate)) {
      query["UseBizDate"] = request.useBizDate;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTaskFlowInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListTaskFlowInstanceResponse>(await this.callApi(params, req, runtime), new ListTaskFlowInstanceResponse({}));
    } else {
      return $dara.cast<ListTaskFlowInstanceResponse>(await this.execute(params, req, runtime), new ListTaskFlowInstanceResponse({}));
    }

  }

  /**
   * Queries the execution records of a task flow.
   * 
   * @param request - ListTaskFlowInstanceRequest
   * @returns ListTaskFlowInstanceResponse
   */
  async listTaskFlowInstance(request: ListTaskFlowInstanceRequest): Promise<ListTaskFlowInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTaskFlowInstanceWithOptions(request, runtime);
  }

  /**
   * Queries the time variables for a task flow.
   * 
   * @param request - ListTaskFlowTimeVariablesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTaskFlowTimeVariablesResponse
   */
  async listTaskFlowTimeVariablesWithOptions(request: ListTaskFlowTimeVariablesRequest, runtime: $dara.RuntimeOptions): Promise<ListTaskFlowTimeVariablesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTaskFlowTimeVariables",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListTaskFlowTimeVariablesResponse>(await this.callApi(params, req, runtime), new ListTaskFlowTimeVariablesResponse({}));
    } else {
      return $dara.cast<ListTaskFlowTimeVariablesResponse>(await this.execute(params, req, runtime), new ListTaskFlowTimeVariablesResponse({}));
    }

  }

  /**
   * Queries the time variables for a task flow.
   * 
   * @param request - ListTaskFlowTimeVariablesRequest
   * @returns ListTaskFlowTimeVariablesResponse
   */
  async listTaskFlowTimeVariables(request: ListTaskFlowTimeVariablesRequest): Promise<ListTaskFlowTimeVariablesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTaskFlowTimeVariablesWithOptions(request, runtime);
  }

  /**
   * Queries task flows by page.
   * 
   * @param tmpReq - ListTaskFlowsByPageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTaskFlowsByPageResponse
   */
  async listTaskFlowsByPageWithOptions(tmpReq: ListTaskFlowsByPageRequest, runtime: $dara.RuntimeOptions): Promise<ListTaskFlowsByPageResponse> {
    tmpReq.validate();
    let request = new ListTaskFlowsByPageShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.dagIdList)) {
      request.dagIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dagIdList, "DagIdList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.dagIdListShrink)) {
      query["DagIdList"] = request.dagIdListShrink;
    }

    if (!$dara.isNull(request.pageIndex)) {
      query["PageIndex"] = request.pageIndex;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTaskFlowsByPage",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListTaskFlowsByPageResponse>(await this.callApi(params, req, runtime), new ListTaskFlowsByPageResponse({}));
    } else {
      return $dara.cast<ListTaskFlowsByPageResponse>(await this.execute(params, req, runtime), new ListTaskFlowsByPageResponse({}));
    }

  }

  /**
   * Queries task flows by page.
   * 
   * @param request - ListTaskFlowsByPageRequest
   * @returns ListTaskFlowsByPageResponse
   */
  async listTaskFlowsByPage(request: ListTaskFlowsByPageRequest): Promise<ListTaskFlowsByPageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTaskFlowsByPageWithOptions(request, runtime);
  }

  /**
   * Queries the tasks in a specified task flow.
   * 
   * @param request - ListTasksInTaskFlowRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTasksInTaskFlowResponse
   */
  async listTasksInTaskFlowWithOptions(request: ListTasksInTaskFlowRequest, runtime: $dara.RuntimeOptions): Promise<ListTasksInTaskFlowResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTasksInTaskFlow",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListTasksInTaskFlowResponse>(await this.callApi(params, req, runtime), new ListTasksInTaskFlowResponse({}));
    } else {
      return $dara.cast<ListTasksInTaskFlowResponse>(await this.execute(params, req, runtime), new ListTasksInTaskFlowResponse({}));
    }

  }

  /**
   * Queries the tasks in a specified task flow.
   * 
   * @param request - ListTasksInTaskFlowRequest
   * @returns ListTasksInTaskFlowResponse
   */
  async listTasksInTaskFlow(request: ListTasksInTaskFlowRequest): Promise<ListTasksInTaskFlowResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTasksInTaskFlowWithOptions(request, runtime);
  }

  /**
   * Queries the permissions of a specific user on a database or a table.
   * 
   * @param request - ListUserPermissionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListUserPermissionsResponse
   */
  async listUserPermissionsWithOptions(request: ListUserPermissionsRequest, runtime: $dara.RuntimeOptions): Promise<ListUserPermissionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.databaseName)) {
      query["DatabaseName"] = request.databaseName;
    }

    if (!$dara.isNull(request.dbType)) {
      query["DbType"] = request.dbType;
    }

    if (!$dara.isNull(request.envType)) {
      query["EnvType"] = request.envType;
    }

    if (!$dara.isNull(request.logic)) {
      query["Logic"] = request.logic;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.permType)) {
      query["PermType"] = request.permType;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListUserPermissions",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListUserPermissionsResponse>(await this.callApi(params, req, runtime), new ListUserPermissionsResponse({}));
    } else {
      return $dara.cast<ListUserPermissionsResponse>(await this.execute(params, req, runtime), new ListUserPermissionsResponse({}));
    }

  }

  /**
   * Queries the permissions of a specific user on a database or a table.
   * 
   * @param request - ListUserPermissionsRequest
   * @returns ListUserPermissionsResponse
   */
  async listUserPermissions(request: ListUserPermissionsRequest): Promise<ListUserPermissionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listUserPermissionsWithOptions(request, runtime);
  }

  /**
   * 获取用户租户列表
   * 
   * @param request - ListUserTenantsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListUserTenantsResponse
   */
  async listUserTenantsWithOptions(request: ListUserTenantsRequest, runtime: $dara.RuntimeOptions): Promise<ListUserTenantsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListUserTenants",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListUserTenantsResponse>(await this.callApi(params, req, runtime), new ListUserTenantsResponse({}));
    } else {
      return $dara.cast<ListUserTenantsResponse>(await this.execute(params, req, runtime), new ListUserTenantsResponse({}));
    }

  }

  /**
   * 获取用户租户列表
   * 
   * @param request - ListUserTenantsRequest
   * @returns ListUserTenantsResponse
   */
  async listUserTenants(request: ListUserTenantsRequest): Promise<ListUserTenantsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listUserTenantsWithOptions(request, runtime);
  }

  /**
   * Queries the details of users.
   * 
   * @param request - ListUsersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListUsersResponse
   */
  async listUsersWithOptions(request: ListUsersRequest, runtime: $dara.RuntimeOptions): Promise<ListUsersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.role)) {
      query["Role"] = request.role;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userState)) {
      query["UserState"] = request.userState;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListUsers",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListUsersResponse>(await this.callApi(params, req, runtime), new ListUsersResponse({}));
    } else {
      return $dara.cast<ListUsersResponse>(await this.execute(params, req, runtime), new ListUsersResponse({}));
    }

  }

  /**
   * Queries the details of users.
   * 
   * @param request - ListUsersRequest
   * @returns ListUsersResponse
   */
  async listUsers(request: ListUsersRequest): Promise<ListUsersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listUsersWithOptions(request, runtime);
  }

  /**
   * Queries approval nodes.
   * 
   * @param request - ListWorkFlowNodesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListWorkFlowNodesResponse
   */
  async listWorkFlowNodesWithOptions(request: ListWorkFlowNodesRequest, runtime: $dara.RuntimeOptions): Promise<ListWorkFlowNodesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.searchName)) {
      query["SearchName"] = request.searchName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListWorkFlowNodes",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListWorkFlowNodesResponse>(await this.callApi(params, req, runtime), new ListWorkFlowNodesResponse({}));
    } else {
      return $dara.cast<ListWorkFlowNodesResponse>(await this.execute(params, req, runtime), new ListWorkFlowNodesResponse({}));
    }

  }

  /**
   * Queries approval nodes.
   * 
   * @param request - ListWorkFlowNodesRequest
   * @returns ListWorkFlowNodesResponse
   */
  async listWorkFlowNodes(request: ListWorkFlowNodesRequest): Promise<ListWorkFlowNodesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listWorkFlowNodesWithOptions(request, runtime);
  }

  /**
   * Queries approval templates.
   * 
   * @param request - ListWorkFlowTemplatesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListWorkFlowTemplatesResponse
   */
  async listWorkFlowTemplatesWithOptions(request: ListWorkFlowTemplatesRequest, runtime: $dara.RuntimeOptions): Promise<ListWorkFlowTemplatesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.searchName)) {
      query["SearchName"] = request.searchName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListWorkFlowTemplates",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListWorkFlowTemplatesResponse>(await this.callApi(params, req, runtime), new ListWorkFlowTemplatesResponse({}));
    } else {
      return $dara.cast<ListWorkFlowTemplatesResponse>(await this.execute(params, req, runtime), new ListWorkFlowTemplatesResponse({}));
    }

  }

  /**
   * Queries approval templates.
   * 
   * @param request - ListWorkFlowTemplatesRequest
   * @returns ListWorkFlowTemplatesResponse
   */
  async listWorkFlowTemplates(request: ListWorkFlowTemplatesRequest): Promise<ListWorkFlowTemplatesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listWorkFlowTemplatesWithOptions(request, runtime);
  }

  /**
   * Sets the status of a task flow to "Successful".
   * 
   * @param request - MakeTaskFlowInstanceSuccessRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MakeTaskFlowInstanceSuccessResponse
   */
  async makeTaskFlowInstanceSuccessWithOptions(request: MakeTaskFlowInstanceSuccessRequest, runtime: $dara.RuntimeOptions): Promise<MakeTaskFlowInstanceSuccessResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.dagInstanceId)) {
      query["DagInstanceId"] = request.dagInstanceId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "MakeTaskFlowInstanceSuccess",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<MakeTaskFlowInstanceSuccessResponse>(await this.callApi(params, req, runtime), new MakeTaskFlowInstanceSuccessResponse({}));
    } else {
      return $dara.cast<MakeTaskFlowInstanceSuccessResponse>(await this.execute(params, req, runtime), new MakeTaskFlowInstanceSuccessResponse({}));
    }

  }

  /**
   * Sets the status of a task flow to "Successful".
   * 
   * @param request - MakeTaskFlowInstanceSuccessRequest
   * @returns MakeTaskFlowInstanceSuccessResponse
   */
  async makeTaskFlowInstanceSuccess(request: MakeTaskFlowInstanceSuccessRequest): Promise<MakeTaskFlowInstanceSuccessResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.makeTaskFlowInstanceSuccessWithOptions(request, runtime);
  }

  /**
   * Modifies the SQL script that is submitted by using a data change ticket.
   * 
   * @param request - ModifyDataCorrectExecSQLRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDataCorrectExecSQLResponse
   */
  async modifyDataCorrectExecSQLWithOptions(request: ModifyDataCorrectExecSQLRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDataCorrectExecSQLResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.execSQL)) {
      query["ExecSQL"] = request.execSQL;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.realLoginUserUid)) {
      query["RealLoginUserUid"] = request.realLoginUserUid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDataCorrectExecSQL",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyDataCorrectExecSQLResponse>(await this.callApi(params, req, runtime), new ModifyDataCorrectExecSQLResponse({}));
    } else {
      return $dara.cast<ModifyDataCorrectExecSQLResponse>(await this.execute(params, req, runtime), new ModifyDataCorrectExecSQLResponse({}));
    }

  }

  /**
   * Modifies the SQL script that is submitted by using a data change ticket.
   * 
   * @param request - ModifyDataCorrectExecSQLRequest
   * @returns ModifyDataCorrectExecSQLResponse
   */
  async modifyDataCorrectExecSQL(request: ModifyDataCorrectExecSQLRequest): Promise<ModifyDataCorrectExecSQLResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDataCorrectExecSQLWithOptions(request, runtime);
  }

  /**
   * Modifies the masking rule bound to a specified field.
   * 
   * @param request - ModifyDesensitizationStrategyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDesensitizationStrategyResponse
   */
  async modifyDesensitizationStrategyWithOptions(request: ModifyDesensitizationStrategyRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDesensitizationStrategyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.columnName)) {
      query["ColumnName"] = request.columnName;
    }

    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.isDefault)) {
      query["IsDefault"] = request.isDefault;
    }

    if (!$dara.isNull(request.isLogic)) {
      query["IsLogic"] = request.isLogic;
    }

    if (!$dara.isNull(request.isReset)) {
      query["IsReset"] = request.isReset;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    if (!$dara.isNull(request.schemaName)) {
      query["SchemaName"] = request.schemaName;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDesensitizationStrategy",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyDesensitizationStrategyResponse>(await this.callApi(params, req, runtime), new ModifyDesensitizationStrategyResponse({}));
    } else {
      return $dara.cast<ModifyDesensitizationStrategyResponse>(await this.execute(params, req, runtime), new ModifyDesensitizationStrategyResponse({}));
    }

  }

  /**
   * Modifies the masking rule bound to a specified field.
   * 
   * @param request - ModifyDesensitizationStrategyRequest
   * @returns ModifyDesensitizationStrategyResponse
   */
  async modifyDesensitizationStrategy(request: ModifyDesensitizationStrategyRequest): Promise<ModifyDesensitizationStrategyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDesensitizationStrategyWithOptions(request, runtime);
  }

  /**
   * 修改实例信息，同时检查该实例连通性
   * 
   * @param request - ModifyInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyInstanceResponse
   */
  async modifyInstanceWithOptions(request: ModifyInstanceRequest, runtime: $dara.RuntimeOptions): Promise<ModifyInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dataLinkName)) {
      query["DataLinkName"] = request.dataLinkName;
    }

    if (!$dara.isNull(request.databasePassword)) {
      query["DatabasePassword"] = request.databasePassword;
    }

    if (!$dara.isNull(request.databaseUser)) {
      query["DatabaseUser"] = request.databaseUser;
    }

    if (!$dara.isNull(request.dbaId)) {
      query["DbaId"] = request.dbaId;
    }

    if (!$dara.isNull(request.ddlOnline)) {
      query["DdlOnline"] = request.ddlOnline;
    }

    if (!$dara.isNull(request.ecsInstanceId)) {
      query["EcsInstanceId"] = request.ecsInstanceId;
    }

    if (!$dara.isNull(request.ecsRegion)) {
      query["EcsRegion"] = request.ecsRegion;
    }

    if (!$dara.isNull(request.enableSellCommon)) {
      query["EnableSellCommon"] = request.enableSellCommon;
    }

    if (!$dara.isNull(request.enableSellSitd)) {
      query["EnableSellSitd"] = request.enableSellSitd;
    }

    if (!$dara.isNull(request.enableSellStable)) {
      query["EnableSellStable"] = request.enableSellStable;
    }

    if (!$dara.isNull(request.enableSellTrust)) {
      query["EnableSellTrust"] = request.enableSellTrust;
    }

    if (!$dara.isNull(request.envType)) {
      query["EnvType"] = request.envType;
    }

    if (!$dara.isNull(request.exportTimeout)) {
      query["ExportTimeout"] = request.exportTimeout;
    }

    if (!$dara.isNull(request.host)) {
      query["Host"] = request.host;
    }

    if (!$dara.isNull(request.instanceAlias)) {
      query["InstanceAlias"] = request.instanceAlias;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceSource)) {
      query["InstanceSource"] = request.instanceSource;
    }

    if (!$dara.isNull(request.instanceType)) {
      query["InstanceType"] = request.instanceType;
    }

    if (!$dara.isNull(request.networkType)) {
      query["NetworkType"] = request.networkType;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.queryTimeout)) {
      query["QueryTimeout"] = request.queryTimeout;
    }

    if (!$dara.isNull(request.safeRule)) {
      query["SafeRule"] = request.safeRule;
    }

    if (!$dara.isNull(request.sid)) {
      query["Sid"] = request.sid;
    }

    if (!$dara.isNull(request.skipTest)) {
      query["SkipTest"] = request.skipTest;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    if (!$dara.isNull(request.templateType)) {
      query["TemplateType"] = request.templateType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.useDsql)) {
      query["UseDsql"] = request.useDsql;
    }

    if (!$dara.isNull(request.useSsl)) {
      query["UseSsl"] = request.useSsl;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyInstanceResponse>(await this.callApi(params, req, runtime), new ModifyInstanceResponse({}));
    } else {
      return $dara.cast<ModifyInstanceResponse>(await this.execute(params, req, runtime), new ModifyInstanceResponse({}));
    }

  }

  /**
   * 修改实例信息，同时检查该实例连通性
   * 
   * @param request - ModifyInstanceRequest
   * @returns ModifyInstanceResponse
   */
  async modifyInstance(request: ModifyInstanceRequest): Promise<ModifyInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyInstanceWithOptions(request, runtime);
  }

  /**
   * Migrates a task flow to a specified business scenario.
   * 
   * @param request - MoveTaskFlowToScenarioRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MoveTaskFlowToScenarioResponse
   */
  async moveTaskFlowToScenarioWithOptions(request: MoveTaskFlowToScenarioRequest, runtime: $dara.RuntimeOptions): Promise<MoveTaskFlowToScenarioResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "MoveTaskFlowToScenario",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<MoveTaskFlowToScenarioResponse>(await this.callApi(params, req, runtime), new MoveTaskFlowToScenarioResponse({}));
    } else {
      return $dara.cast<MoveTaskFlowToScenarioResponse>(await this.execute(params, req, runtime), new MoveTaskFlowToScenarioResponse({}));
    }

  }

  /**
   * Migrates a task flow to a specified business scenario.
   * 
   * @param request - MoveTaskFlowToScenarioRequest
   * @returns MoveTaskFlowToScenarioResponse
   */
  async moveTaskFlowToScenario(request: MoveTaskFlowToScenarioRequest): Promise<MoveTaskFlowToScenarioResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.moveTaskFlowToScenarioWithOptions(request, runtime);
  }

  /**
   * Unpublishes a published task flow.
   * 
   * @param request - OfflineTaskFlowRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OfflineTaskFlowResponse
   */
  async offlineTaskFlowWithOptions(request: OfflineTaskFlowRequest, runtime: $dara.RuntimeOptions): Promise<OfflineTaskFlowResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OfflineTaskFlow",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<OfflineTaskFlowResponse>(await this.callApi(params, req, runtime), new OfflineTaskFlowResponse({}));
    } else {
      return $dara.cast<OfflineTaskFlowResponse>(await this.execute(params, req, runtime), new OfflineTaskFlowResponse({}));
    }

  }

  /**
   * Unpublishes a published task flow.
   * 
   * @param request - OfflineTaskFlowRequest
   * @returns OfflineTaskFlowResponse
   */
  async offlineTaskFlow(request: OfflineTaskFlowRequest): Promise<OfflineTaskFlowResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.offlineTaskFlowWithOptions(request, runtime);
  }

  /**
   * Pauses a SQL task for data change.
   * 
   * @remarks
   * You can call this operation only for database instances that are managed in Security Collaboration mode.
   * 
   * @param request - PauseDataCorrectSQLJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PauseDataCorrectSQLJobResponse
   */
  async pauseDataCorrectSQLJobWithOptions(request: PauseDataCorrectSQLJobRequest, runtime: $dara.RuntimeOptions): Promise<PauseDataCorrectSQLJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PauseDataCorrectSQLJob",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<PauseDataCorrectSQLJobResponse>(await this.callApi(params, req, runtime), new PauseDataCorrectSQLJobResponse({}));
    } else {
      return $dara.cast<PauseDataCorrectSQLJobResponse>(await this.execute(params, req, runtime), new PauseDataCorrectSQLJobResponse({}));
    }

  }

  /**
   * Pauses a SQL task for data change.
   * 
   * @remarks
   * You can call this operation only for database instances that are managed in Security Collaboration mode.
   * 
   * @param request - PauseDataCorrectSQLJobRequest
   * @returns PauseDataCorrectSQLJobResponse
   */
  async pauseDataCorrectSQLJob(request: PauseDataCorrectSQLJobRequest): Promise<PauseDataCorrectSQLJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.pauseDataCorrectSQLJobWithOptions(request, runtime);
  }

  /**
   * 终止数据导出任务
   * 
   * @param request - PauseDataExportJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PauseDataExportJobResponse
   */
  async pauseDataExportJobWithOptions(request: PauseDataExportJobRequest, runtime: $dara.RuntimeOptions): Promise<PauseDataExportJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PauseDataExportJob",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<PauseDataExportJobResponse>(await this.callApi(params, req, runtime), new PauseDataExportJobResponse({}));
    } else {
      return $dara.cast<PauseDataExportJobResponse>(await this.execute(params, req, runtime), new PauseDataExportJobResponse({}));
    }

  }

  /**
   * 终止数据导出任务
   * 
   * @param request - PauseDataExportJobRequest
   * @returns PauseDataExportJobResponse
   */
  async pauseDataExportJob(request: PauseDataExportJobRequest): Promise<PauseDataExportJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.pauseDataExportJobWithOptions(request, runtime);
  }

  /**
   * 创建工单审批流
   * 
   * @param request - PreviewWorkflowRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PreviewWorkflowResponse
   */
  async previewWorkflowWithOptions(request: PreviewWorkflowRequest, runtime: $dara.RuntimeOptions): Promise<PreviewWorkflowResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PreviewWorkflow",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<PreviewWorkflowResponse>(await this.callApi(params, req, runtime), new PreviewWorkflowResponse({}));
    } else {
      return $dara.cast<PreviewWorkflowResponse>(await this.execute(params, req, runtime), new PreviewWorkflowResponse({}));
    }

  }

  /**
   * 创建工单审批流
   * 
   * @param request - PreviewWorkflowRequest
   * @returns PreviewWorkflowResponse
   */
  async previewWorkflow(request: PreviewWorkflowRequest): Promise<PreviewWorkflowResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.previewWorkflowWithOptions(request, runtime);
  }

  /**
   * Publishes and deploys a task flow.
   * 
   * @param request - PublishAndDeployTaskFlowRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PublishAndDeployTaskFlowResponse
   */
  async publishAndDeployTaskFlowWithOptions(request: PublishAndDeployTaskFlowRequest, runtime: $dara.RuntimeOptions): Promise<PublishAndDeployTaskFlowResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.versionComments)) {
      query["VersionComments"] = request.versionComments;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PublishAndDeployTaskFlow",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<PublishAndDeployTaskFlowResponse>(await this.callApi(params, req, runtime), new PublishAndDeployTaskFlowResponse({}));
    } else {
      return $dara.cast<PublishAndDeployTaskFlowResponse>(await this.execute(params, req, runtime), new PublishAndDeployTaskFlowResponse({}));
    }

  }

  /**
   * Publishes and deploys a task flow.
   * 
   * @param request - PublishAndDeployTaskFlowRequest
   * @returns PublishAndDeployTaskFlowResponse
   */
  async publishAndDeployTaskFlow(request: PublishAndDeployTaskFlowRequest): Promise<PublishAndDeployTaskFlowResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.publishAndDeployTaskFlowWithOptions(request, runtime);
  }

  /**
   * Queries the download and parsing progress of data tracking logs.
   * 
   * @param request - QueryDataTrackResultDownloadStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryDataTrackResultDownloadStatusResponse
   */
  async queryDataTrackResultDownloadStatusWithOptions(request: QueryDataTrackResultDownloadStatusRequest, runtime: $dara.RuntimeOptions): Promise<QueryDataTrackResultDownloadStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.downloadKeyId)) {
      query["DownloadKeyId"] = request.downloadKeyId;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryDataTrackResultDownloadStatus",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<QueryDataTrackResultDownloadStatusResponse>(await this.callApi(params, req, runtime), new QueryDataTrackResultDownloadStatusResponse({}));
    } else {
      return $dara.cast<QueryDataTrackResultDownloadStatusResponse>(await this.execute(params, req, runtime), new QueryDataTrackResultDownloadStatusResponse({}));
    }

  }

  /**
   * Queries the download and parsing progress of data tracking logs.
   * 
   * @param request - QueryDataTrackResultDownloadStatusRequest
   * @returns QueryDataTrackResultDownloadStatusResponse
   */
  async queryDataTrackResultDownloadStatus(request: QueryDataTrackResultDownloadStatusRequest): Promise<QueryDataTrackResultDownloadStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryDataTrackResultDownloadStatusWithOptions(request, runtime);
  }

  /**
   * 部署任务流的历史版本
   * 
   * @param request - ReDeployLhDagVersionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ReDeployLhDagVersionResponse
   */
  async reDeployLhDagVersionWithOptions(request: ReDeployLhDagVersionRequest, runtime: $dara.RuntimeOptions): Promise<ReDeployLhDagVersionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.dagVersion)) {
      query["DagVersion"] = request.dagVersion;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ReDeployLhDagVersion",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ReDeployLhDagVersionResponse>(await this.callApi(params, req, runtime), new ReDeployLhDagVersionResponse({}));
    } else {
      return $dara.cast<ReDeployLhDagVersionResponse>(await this.execute(params, req, runtime), new ReDeployLhDagVersionResponse({}));
    }

  }

  /**
   * 部署任务流的历史版本
   * 
   * @param request - ReDeployLhDagVersionRequest
   * @returns ReDeployLhDagVersionResponse
   */
  async reDeployLhDagVersion(request: ReDeployLhDagVersionRequest): Promise<ReDeployLhDagVersionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.reDeployLhDagVersionWithOptions(request, runtime);
  }

  /**
   * Reruns a task flow instance.
   * 
   * @param request - ReRunTaskFlowInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ReRunTaskFlowInstanceResponse
   */
  async reRunTaskFlowInstanceWithOptions(request: ReRunTaskFlowInstanceRequest, runtime: $dara.RuntimeOptions): Promise<ReRunTaskFlowInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.dagInstanceId)) {
      query["DagInstanceId"] = request.dagInstanceId;
    }

    if (!$dara.isNull(request.dagVersion)) {
      query["DagVersion"] = request.dagVersion;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ReRunTaskFlowInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ReRunTaskFlowInstanceResponse>(await this.callApi(params, req, runtime), new ReRunTaskFlowInstanceResponse({}));
    } else {
      return $dara.cast<ReRunTaskFlowInstanceResponse>(await this.execute(params, req, runtime), new ReRunTaskFlowInstanceResponse({}));
    }

  }

  /**
   * Reruns a task flow instance.
   * 
   * @param request - ReRunTaskFlowInstanceRequest
   * @returns ReRunTaskFlowInstanceResponse
   */
  async reRunTaskFlowInstance(request: ReRunTaskFlowInstanceRequest): Promise<ReRunTaskFlowInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.reRunTaskFlowInstanceWithOptions(request, runtime);
  }

  /**
   * Unsubscribes from a pay-as-you-go Data Management (DMS) resource.
   * 
   * @param request - RefundPayAsYouGoOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RefundPayAsYouGoOrderResponse
   */
  async refundPayAsYouGoOrderWithOptions(request: RefundPayAsYouGoOrderRequest, runtime: $dara.RuntimeOptions): Promise<RefundPayAsYouGoOrderResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RefundPayAsYouGoOrder",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RefundPayAsYouGoOrderResponse>(await this.callApi(params, req, runtime), new RefundPayAsYouGoOrderResponse({}));
    } else {
      return $dara.cast<RefundPayAsYouGoOrderResponse>(await this.execute(params, req, runtime), new RefundPayAsYouGoOrderResponse({}));
    }

  }

  /**
   * Unsubscribes from a pay-as-you-go Data Management (DMS) resource.
   * 
   * @param request - RefundPayAsYouGoOrderRequest
   * @returns RefundPayAsYouGoOrderResponse
   */
  async refundPayAsYouGoOrder(request: RefundPayAsYouGoOrderRequest): Promise<RefundPayAsYouGoOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.refundPayAsYouGoOrderWithOptions(request, runtime);
  }

  /**
   * Registers a database instance in Data Management (DMS).
   * 
   * @remarks
   * Prerequisites: You are a DMS administrator or a database administrator (DBA). You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to query your user role from the RoleIdList parameter that is returned.
   * 
   * @param request - RegisterInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RegisterInstanceResponse
   */
  async registerInstanceWithOptions(request: RegisterInstanceRequest, runtime: $dara.RuntimeOptions): Promise<RegisterInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dataLinkName)) {
      query["DataLinkName"] = request.dataLinkName;
    }

    if (!$dara.isNull(request.databasePassword)) {
      query["DatabasePassword"] = request.databasePassword;
    }

    if (!$dara.isNull(request.databaseUser)) {
      query["DatabaseUser"] = request.databaseUser;
    }

    if (!$dara.isNull(request.dbaUid)) {
      query["DbaUid"] = request.dbaUid;
    }

    if (!$dara.isNull(request.dbaUidByString)) {
      query["DbaUidByString"] = request.dbaUidByString;
    }

    if (!$dara.isNull(request.ddlOnline)) {
      query["DdlOnline"] = request.ddlOnline;
    }

    if (!$dara.isNull(request.ecsInstanceId)) {
      query["EcsInstanceId"] = request.ecsInstanceId;
    }

    if (!$dara.isNull(request.ecsRegion)) {
      query["EcsRegion"] = request.ecsRegion;
    }

    if (!$dara.isNull(request.enableSellSitd)) {
      query["EnableSellSitd"] = request.enableSellSitd;
    }

    if (!$dara.isNull(request.envType)) {
      query["EnvType"] = request.envType;
    }

    if (!$dara.isNull(request.exportTimeout)) {
      query["ExportTimeout"] = request.exportTimeout;
    }

    if (!$dara.isNull(request.host)) {
      query["Host"] = request.host;
    }

    if (!$dara.isNull(request.instanceAlias)) {
      query["InstanceAlias"] = request.instanceAlias;
    }

    if (!$dara.isNull(request.instanceSource)) {
      query["InstanceSource"] = request.instanceSource;
    }

    if (!$dara.isNull(request.instanceType)) {
      query["InstanceType"] = request.instanceType;
    }

    if (!$dara.isNull(request.networkType)) {
      query["NetworkType"] = request.networkType;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.queryTimeout)) {
      query["QueryTimeout"] = request.queryTimeout;
    }

    if (!$dara.isNull(request.safeRule)) {
      query["SafeRule"] = request.safeRule;
    }

    if (!$dara.isNull(request.sid)) {
      query["Sid"] = request.sid;
    }

    if (!$dara.isNull(request.skipTest)) {
      query["SkipTest"] = request.skipTest;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    if (!$dara.isNull(request.templateType)) {
      query["TemplateType"] = request.templateType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.useDsql)) {
      query["UseDsql"] = request.useDsql;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RegisterInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RegisterInstanceResponse>(await this.callApi(params, req, runtime), new RegisterInstanceResponse({}));
    } else {
      return $dara.cast<RegisterInstanceResponse>(await this.execute(params, req, runtime), new RegisterInstanceResponse({}));
    }

  }

  /**
   * Registers a database instance in Data Management (DMS).
   * 
   * @remarks
   * Prerequisites: You are a DMS administrator or a database administrator (DBA). You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to query your user role from the RoleIdList parameter that is returned.
   * 
   * @param request - RegisterInstanceRequest
   * @returns RegisterInstanceResponse
   */
  async registerInstance(request: RegisterInstanceRequest): Promise<RegisterInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.registerInstanceWithOptions(request, runtime);
  }

  /**
   * Registers a user for your enterprise.
   * 
   * @remarks
   * If you are an **administrator** in Data Management (DMS), you can call this operation to register a user for your enterprise. To view users that are assigned the administrator role, perform the following steps: Log on to the DMS console. In the top navigation bar, click O&M. In the left-side navigation pane, click User.
   * 
   * @param request - RegisterUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RegisterUserResponse
   */
  async registerUserWithOptions(request: RegisterUserRequest, runtime: $dara.RuntimeOptions): Promise<RegisterUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.mobile)) {
      query["Mobile"] = request.mobile;
    }

    if (!$dara.isNull(request.roleNames)) {
      query["RoleNames"] = request.roleNames;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.uid)) {
      query["Uid"] = request.uid;
    }

    if (!$dara.isNull(request.userNick)) {
      query["UserNick"] = request.userNick;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RegisterUser",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RegisterUserResponse>(await this.callApi(params, req, runtime), new RegisterUserResponse({}));
    } else {
      return $dara.cast<RegisterUserResponse>(await this.execute(params, req, runtime), new RegisterUserResponse({}));
    }

  }

  /**
   * Registers a user for your enterprise.
   * 
   * @remarks
   * If you are an **administrator** in Data Management (DMS), you can call this operation to register a user for your enterprise. To view users that are assigned the administrator role, perform the following steps: Log on to the DMS console. In the top navigation bar, click O&M. In the left-side navigation pane, click User.
   * 
   * @param request - RegisterUserRequest
   * @returns RegisterUserResponse
   */
  async registerUser(request: RegisterUserRequest): Promise<RegisterUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.registerUserWithOptions(request, runtime);
  }

  /**
   * 删除数据导出任务
   * 
   * @param request - RemoveDataExportJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RemoveDataExportJobResponse
   */
  async removeDataExportJobWithOptions(request: RemoveDataExportJobRequest, runtime: $dara.RuntimeOptions): Promise<RemoveDataExportJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RemoveDataExportJob",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RemoveDataExportJobResponse>(await this.callApi(params, req, runtime), new RemoveDataExportJobResponse({}));
    } else {
      return $dara.cast<RemoveDataExportJobResponse>(await this.execute(params, req, runtime), new RemoveDataExportJobResponse({}));
    }

  }

  /**
   * 删除数据导出任务
   * 
   * @param request - RemoveDataExportJobRequest
   * @returns RemoveDataExportJobResponse
   */
  async removeDataExportJob(request: RemoveDataExportJobRequest): Promise<RemoveDataExportJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.removeDataExportJobWithOptions(request, runtime);
  }

  /**
   * Reruns a failed SQL task for data change.
   * 
   * @param request - RestartDataCorrectSQLJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RestartDataCorrectSQLJobResponse
   */
  async restartDataCorrectSQLJobWithOptions(request: RestartDataCorrectSQLJobRequest, runtime: $dara.RuntimeOptions): Promise<RestartDataCorrectSQLJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.realLoginUserUid)) {
      query["RealLoginUserUid"] = request.realLoginUserUid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RestartDataCorrectSQLJob",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RestartDataCorrectSQLJobResponse>(await this.callApi(params, req, runtime), new RestartDataCorrectSQLJobResponse({}));
    } else {
      return $dara.cast<RestartDataCorrectSQLJobResponse>(await this.execute(params, req, runtime), new RestartDataCorrectSQLJobResponse({}));
    }

  }

  /**
   * Reruns a failed SQL task for data change.
   * 
   * @param request - RestartDataCorrectSQLJobRequest
   * @returns RestartDataCorrectSQLJobResponse
   */
  async restartDataCorrectSQLJob(request: RestartDataCorrectSQLJobRequest): Promise<RestartDataCorrectSQLJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.restartDataCorrectSQLJobWithOptions(request, runtime);
  }

  /**
   * 重启数据导出任务
   * 
   * @param request - RestartDataExportJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RestartDataExportJobResponse
   */
  async restartDataExportJobWithOptions(request: RestartDataExportJobRequest, runtime: $dara.RuntimeOptions): Promise<RestartDataExportJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RestartDataExportJob",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RestartDataExportJobResponse>(await this.callApi(params, req, runtime), new RestartDataExportJobResponse({}));
    } else {
      return $dara.cast<RestartDataExportJobResponse>(await this.execute(params, req, runtime), new RestartDataExportJobResponse({}));
    }

  }

  /**
   * 重启数据导出任务
   * 
   * @param request - RestartDataExportJobRequest
   * @returns RestartDataExportJobResponse
   */
  async restartDataExportJob(request: RestartDataExportJobRequest): Promise<RestartDataExportJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.restartDataExportJobWithOptions(request, runtime);
  }

  /**
   * Resumes a suspended task flow.
   * 
   * @remarks
   * You can call this operation only for task flows that are suspended.
   * 
   * @param request - ResumeTaskFlowInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ResumeTaskFlowInstanceResponse
   */
  async resumeTaskFlowInstanceWithOptions(request: ResumeTaskFlowInstanceRequest, runtime: $dara.RuntimeOptions): Promise<ResumeTaskFlowInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.dagInstanceId)) {
      query["DagInstanceId"] = request.dagInstanceId;
    }

    if (!$dara.isNull(request.dagVersion)) {
      query["DagVersion"] = request.dagVersion;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ResumeTaskFlowInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ResumeTaskFlowInstanceResponse>(await this.callApi(params, req, runtime), new ResumeTaskFlowInstanceResponse({}));
    } else {
      return $dara.cast<ResumeTaskFlowInstanceResponse>(await this.execute(params, req, runtime), new ResumeTaskFlowInstanceResponse({}));
    }

  }

  /**
   * Resumes a suspended task flow.
   * 
   * @remarks
   * You can call this operation only for task flows that are suspended.
   * 
   * @param request - ResumeTaskFlowInstanceRequest
   * @returns ResumeTaskFlowInstanceResponse
   */
  async resumeTaskFlowInstance(request: ResumeTaskFlowInstanceRequest): Promise<ResumeTaskFlowInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.resumeTaskFlowInstanceWithOptions(request, runtime);
  }

  /**
   * Reruns the precheck for a data change ticket.
   * 
   * @param request - RetryDataCorrectPreCheckRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RetryDataCorrectPreCheckResponse
   */
  async retryDataCorrectPreCheckWithOptions(request: RetryDataCorrectPreCheckRequest, runtime: $dara.RuntimeOptions): Promise<RetryDataCorrectPreCheckResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.realLoginUserUid)) {
      query["RealLoginUserUid"] = request.realLoginUserUid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RetryDataCorrectPreCheck",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RetryDataCorrectPreCheckResponse>(await this.callApi(params, req, runtime), new RetryDataCorrectPreCheckResponse({}));
    } else {
      return $dara.cast<RetryDataCorrectPreCheckResponse>(await this.execute(params, req, runtime), new RetryDataCorrectPreCheckResponse({}));
    }

  }

  /**
   * Reruns the precheck for a data change ticket.
   * 
   * @param request - RetryDataCorrectPreCheckRequest
   * @returns RetryDataCorrectPreCheckResponse
   */
  async retryDataCorrectPreCheck(request: RetryDataCorrectPreCheckRequest): Promise<RetryDataCorrectPreCheckResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.retryDataCorrectPreCheckWithOptions(request, runtime);
  }

  /**
   * Revokes permissions on resources from Data Management (DMS) users by using a permission template.
   * 
   * @remarks
   * You must be a database administrator (DBA) or a DMS administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
   * 
   * @param request - RevokeTemplateAuthorityRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RevokeTemplateAuthorityResponse
   */
  async revokeTemplateAuthorityWithOptions(request: RevokeTemplateAuthorityRequest, runtime: $dara.RuntimeOptions): Promise<RevokeTemplateAuthorityResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userIds)) {
      query["UserIds"] = request.userIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RevokeTemplateAuthority",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RevokeTemplateAuthorityResponse>(await this.callApi(params, req, runtime), new RevokeTemplateAuthorityResponse({}));
    } else {
      return $dara.cast<RevokeTemplateAuthorityResponse>(await this.execute(params, req, runtime), new RevokeTemplateAuthorityResponse({}));
    }

  }

  /**
   * Revokes permissions on resources from Data Management (DMS) users by using a permission template.
   * 
   * @remarks
   * You must be a database administrator (DBA) or a DMS administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
   * 
   * @param request - RevokeTemplateAuthorityRequest
   * @returns RevokeTemplateAuthorityResponse
   */
  async revokeTemplateAuthority(request: RevokeTemplateAuthorityRequest): Promise<RevokeTemplateAuthorityResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.revokeTemplateAuthorityWithOptions(request, runtime);
  }

  /**
   * Revokes the permissions on instances, databases, and tables from a user.
   * 
   * @param request - RevokeUserPermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RevokeUserPermissionResponse
   */
  async revokeUserPermissionWithOptions(request: RevokeUserPermissionRequest, runtime: $dara.RuntimeOptions): Promise<RevokeUserPermissionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.dsType)) {
      query["DsType"] = request.dsType;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.logic)) {
      query["Logic"] = request.logic;
    }

    if (!$dara.isNull(request.permTypes)) {
      query["PermTypes"] = request.permTypes;
    }

    if (!$dara.isNull(request.tableId)) {
      query["TableId"] = request.tableId;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.userAccessId)) {
      query["UserAccessId"] = request.userAccessId;
    }

    if (!$dara.isNull(request.userId)) {
      query["UserId"] = request.userId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RevokeUserPermission",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RevokeUserPermissionResponse>(await this.callApi(params, req, runtime), new RevokeUserPermissionResponse({}));
    } else {
      return $dara.cast<RevokeUserPermissionResponse>(await this.execute(params, req, runtime), new RevokeUserPermissionResponse({}));
    }

  }

  /**
   * Revokes the permissions on instances, databases, and tables from a user.
   * 
   * @param request - RevokeUserPermissionRequest
   * @returns RevokeUserPermissionResponse
   */
  async revokeUserPermission(request: RevokeUserPermissionRequest): Promise<RevokeUserPermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.revokeUserPermissionWithOptions(request, runtime);
  }

  /**
   * Searches for the parsing result of a data tracking task.
   * 
   * @param tmpReq - SearchDataTrackResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SearchDataTrackResultResponse
   */
  async searchDataTrackResultWithOptions(tmpReq: SearchDataTrackResultRequest, runtime: $dara.RuntimeOptions): Promise<SearchDataTrackResultResponse> {
    tmpReq.validate();
    let request = new SearchDataTrackResultShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.columnFilter)) {
      request.columnFilterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.columnFilter, "ColumnFilter", "json");
    }

    if (!$dara.isNull(tmpReq.filterTableList)) {
      request.filterTableListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterTableList, "FilterTableList", "json");
    }

    if (!$dara.isNull(tmpReq.filterTypeList)) {
      request.filterTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterTypeList, "FilterTypeList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.columnFilterShrink)) {
      query["ColumnFilter"] = request.columnFilterShrink;
    }

    if (!$dara.isNull(request.filterEndTime)) {
      query["FilterEndTime"] = request.filterEndTime;
    }

    if (!$dara.isNull(request.filterStartTime)) {
      query["FilterStartTime"] = request.filterStartTime;
    }

    if (!$dara.isNull(request.filterTableListShrink)) {
      query["FilterTableList"] = request.filterTableListShrink;
    }

    if (!$dara.isNull(request.filterTypeListShrink)) {
      query["FilterTypeList"] = request.filterTypeListShrink;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SearchDataTrackResult",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SearchDataTrackResultResponse>(await this.callApi(params, req, runtime), new SearchDataTrackResultResponse({}));
    } else {
      return $dara.cast<SearchDataTrackResultResponse>(await this.execute(params, req, runtime), new SearchDataTrackResultResponse({}));
    }

  }

  /**
   * Searches for the parsing result of a data tracking task.
   * 
   * @param request - SearchDataTrackResultRequest
   * @returns SearchDataTrackResultResponse
   */
  async searchDataTrackResult(request: SearchDataTrackResultRequest): Promise<SearchDataTrackResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.searchDataTrackResultWithOptions(request, runtime);
  }

  /**
   * Queries the details of the databases.
   * 
   * @param request - SearchDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SearchDatabaseResponse
   */
  async searchDatabaseWithOptions(request: SearchDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<SearchDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbType)) {
      query["DbType"] = request.dbType;
    }

    if (!$dara.isNull(request.envType)) {
      query["EnvType"] = request.envType;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.searchRange)) {
      query["SearchRange"] = request.searchRange;
    }

    if (!$dara.isNull(request.searchTarget)) {
      query["SearchTarget"] = request.searchTarget;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SearchDatabase",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SearchDatabaseResponse>(await this.callApi(params, req, runtime), new SearchDatabaseResponse({}));
    } else {
      return $dara.cast<SearchDatabaseResponse>(await this.execute(params, req, runtime), new SearchDatabaseResponse({}));
    }

  }

  /**
   * Queries the details of the databases.
   * 
   * @param request - SearchDatabaseRequest
   * @returns SearchDatabaseResponse
   */
  async searchDatabase(request: SearchDatabaseRequest): Promise<SearchDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.searchDatabaseWithOptions(request, runtime);
  }

  /**
   * Queries detailed information about tables.
   * 
   * @remarks
   * You can call this operation only for database instances that are managed in Security Collaboration mode.
   * 
   * @param request - SearchTableRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SearchTableResponse
   */
  async searchTableWithOptions(request: SearchTableRequest, runtime: $dara.RuntimeOptions): Promise<SearchTableResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbType)) {
      query["DbType"] = request.dbType;
    }

    if (!$dara.isNull(request.envType)) {
      query["EnvType"] = request.envType;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.returnGuid)) {
      query["ReturnGuid"] = request.returnGuid;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.searchRange)) {
      query["SearchRange"] = request.searchRange;
    }

    if (!$dara.isNull(request.searchTarget)) {
      query["SearchTarget"] = request.searchTarget;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SearchTable",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SearchTableResponse>(await this.callApi(params, req, runtime), new SearchTableResponse({}));
    } else {
      return $dara.cast<SearchTableResponse>(await this.execute(params, req, runtime), new SearchTableResponse({}));
    }

  }

  /**
   * Queries detailed information about tables.
   * 
   * @remarks
   * You can call this operation only for database instances that are managed in Security Collaboration mode.
   * 
   * @param request - SearchTableRequest
   * @returns SearchTableResponse
   */
  async searchTable(request: SearchTableRequest): Promise<SearchTableResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.searchTableWithOptions(request, runtime);
  }

  /**
   * Configures the owner of an instance, a database, or a table.
   * 
   * @param request - SetOwnersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetOwnersResponse
   */
  async setOwnersWithOptions(request: SetOwnersRequest, runtime: $dara.RuntimeOptions): Promise<SetOwnersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerIds)) {
      query["OwnerIds"] = request.ownerIds;
    }

    if (!$dara.isNull(request.ownerType)) {
      query["OwnerType"] = request.ownerType;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetOwners",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SetOwnersResponse>(await this.callApi(params, req, runtime), new SetOwnersResponse({}));
    } else {
      return $dara.cast<SetOwnersResponse>(await this.execute(params, req, runtime), new SetOwnersResponse({}));
    }

  }

  /**
   * Configures the owner of an instance, a database, or a table.
   * 
   * @param request - SetOwnersRequest
   * @returns SetOwnersResponse
   */
  async setOwners(request: SetOwnersRequest): Promise<SetOwnersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setOwnersWithOptions(request, runtime);
  }

  /**
   * 修改审批流额外信息
   * 
   * @param request - SetWorkflowExtraInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetWorkflowExtraInfoResponse
   */
  async setWorkflowExtraInfoWithOptions(request: SetWorkflowExtraInfoRequest, runtime: $dara.RuntimeOptions): Promise<SetWorkflowExtraInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.renderAddApprovalNode)) {
      query["RenderAddApprovalNode"] = request.renderAddApprovalNode;
    }

    if (!$dara.isNull(request.renderAgree)) {
      query["RenderAgree"] = request.renderAgree;
    }

    if (!$dara.isNull(request.renderCancel)) {
      query["RenderCancel"] = request.renderCancel;
    }

    if (!$dara.isNull(request.renderReject)) {
      query["RenderReject"] = request.renderReject;
    }

    if (!$dara.isNull(request.renderTransfer)) {
      query["RenderTransfer"] = request.renderTransfer;
    }

    if (!$dara.isNull(request.thirdpartyWorkflowComment)) {
      query["ThirdpartyWorkflowComment"] = request.thirdpartyWorkflowComment;
    }

    if (!$dara.isNull(request.thirdpartyWorkflowUrl)) {
      query["ThirdpartyWorkflowUrl"] = request.thirdpartyWorkflowUrl;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.workflowInstanceId)) {
      query["WorkflowInstanceId"] = request.workflowInstanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetWorkflowExtraInfo",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SetWorkflowExtraInfoResponse>(await this.callApi(params, req, runtime), new SetWorkflowExtraInfoResponse({}));
    } else {
      return $dara.cast<SetWorkflowExtraInfoResponse>(await this.execute(params, req, runtime), new SetWorkflowExtraInfoResponse({}));
    }

  }

  /**
   * 修改审批流额外信息
   * 
   * @param request - SetWorkflowExtraInfoRequest
   * @returns SetWorkflowExtraInfoResponse
   */
  async setWorkflowExtraInfo(request: SetWorkflowExtraInfoRequest): Promise<SetWorkflowExtraInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setWorkflowExtraInfoWithOptions(request, runtime);
  }

  /**
   * Skips the verification on the number of rows in the precheck for data change.
   * 
   * @param request - SkipDataCorrectRowCheckRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SkipDataCorrectRowCheckResponse
   */
  async skipDataCorrectRowCheckWithOptions(request: SkipDataCorrectRowCheckRequest, runtime: $dara.RuntimeOptions): Promise<SkipDataCorrectRowCheckResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.realLoginUserUid)) {
      query["RealLoginUserUid"] = request.realLoginUserUid;
    }

    if (!$dara.isNull(request.reason)) {
      query["Reason"] = request.reason;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SkipDataCorrectRowCheck",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SkipDataCorrectRowCheckResponse>(await this.callApi(params, req, runtime), new SkipDataCorrectRowCheckResponse({}));
    } else {
      return $dara.cast<SkipDataCorrectRowCheckResponse>(await this.execute(params, req, runtime), new SkipDataCorrectRowCheckResponse({}));
    }

  }

  /**
   * Skips the verification on the number of rows in the precheck for data change.
   * 
   * @param request - SkipDataCorrectRowCheckRequest
   * @returns SkipDataCorrectRowCheckResponse
   */
  async skipDataCorrectRowCheck(request: SkipDataCorrectRowCheckRequest): Promise<SkipDataCorrectRowCheckResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.skipDataCorrectRowCheckWithOptions(request, runtime);
  }

  /**
   * Stops a task flow instance.
   * 
   * @param request - StopTaskFlowInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopTaskFlowInstanceResponse
   */
  async stopTaskFlowInstanceWithOptions(request: StopTaskFlowInstanceRequest, runtime: $dara.RuntimeOptions): Promise<StopTaskFlowInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.dagInstanceId)) {
      query["DagInstanceId"] = request.dagInstanceId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopTaskFlowInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<StopTaskFlowInstanceResponse>(await this.callApi(params, req, runtime), new StopTaskFlowInstanceResponse({}));
    } else {
      return $dara.cast<StopTaskFlowInstanceResponse>(await this.execute(params, req, runtime), new StopTaskFlowInstanceResponse({}));
    }

  }

  /**
   * Stops a task flow instance.
   * 
   * @param request - StopTaskFlowInstanceRequest
   * @returns StopTaskFlowInstanceResponse
   */
  async stopTaskFlowInstance(request: StopTaskFlowInstanceRequest): Promise<StopTaskFlowInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopTaskFlowInstanceWithOptions(request, runtime);
  }

  /**
   * Submits a ticket for approval.
   * 
   * @param request - SubmitOrderApprovalRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SubmitOrderApprovalResponse
   */
  async submitOrderApprovalWithOptions(request: SubmitOrderApprovalRequest, runtime: $dara.RuntimeOptions): Promise<SubmitOrderApprovalResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.realLoginUserUid)) {
      query["RealLoginUserUid"] = request.realLoginUserUid;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SubmitOrderApproval",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SubmitOrderApprovalResponse>(await this.callApi(params, req, runtime), new SubmitOrderApprovalResponse({}));
    } else {
      return $dara.cast<SubmitOrderApprovalResponse>(await this.execute(params, req, runtime), new SubmitOrderApprovalResponse({}));
    }

  }

  /**
   * Submits a ticket for approval.
   * 
   * @param request - SubmitOrderApprovalRequest
   * @returns SubmitOrderApprovalResponse
   */
  async submitOrderApproval(request: SubmitOrderApprovalRequest): Promise<SubmitOrderApprovalResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.submitOrderApprovalWithOptions(request, runtime);
  }

  /**
   * Submits a schema synchronization ticket for approval.
   * 
   * @param request - SubmitStructSyncOrderApprovalRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SubmitStructSyncOrderApprovalResponse
   */
  async submitStructSyncOrderApprovalWithOptions(request: SubmitStructSyncOrderApprovalRequest, runtime: $dara.RuntimeOptions): Promise<SubmitStructSyncOrderApprovalResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SubmitStructSyncOrderApproval",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SubmitStructSyncOrderApprovalResponse>(await this.callApi(params, req, runtime), new SubmitStructSyncOrderApprovalResponse({}));
    } else {
      return $dara.cast<SubmitStructSyncOrderApprovalResponse>(await this.execute(params, req, runtime), new SubmitStructSyncOrderApprovalResponse({}));
    }

  }

  /**
   * Submits a schema synchronization ticket for approval.
   * 
   * @param request - SubmitStructSyncOrderApprovalRequest
   * @returns SubmitStructSyncOrderApprovalResponse
   */
  async submitStructSyncOrderApproval(request: SubmitStructSyncOrderApprovalRequest): Promise<SubmitStructSyncOrderApprovalResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.submitStructSyncOrderApprovalWithOptions(request, runtime);
  }

  /**
   * 中断数据导出任务
   * 
   * @param request - SuspendDataExportJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SuspendDataExportJobResponse
   */
  async suspendDataExportJobWithOptions(request: SuspendDataExportJobRequest, runtime: $dara.RuntimeOptions): Promise<SuspendDataExportJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SuspendDataExportJob",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SuspendDataExportJobResponse>(await this.callApi(params, req, runtime), new SuspendDataExportJobResponse({}));
    } else {
      return $dara.cast<SuspendDataExportJobResponse>(await this.execute(params, req, runtime), new SuspendDataExportJobResponse({}));
    }

  }

  /**
   * 中断数据导出任务
   * 
   * @param request - SuspendDataExportJobRequest
   * @returns SuspendDataExportJobResponse
   */
  async suspendDataExportJob(request: SuspendDataExportJobRequest): Promise<SuspendDataExportJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.suspendDataExportJobWithOptions(request, runtime);
  }

  /**
   * Suspends a task flow instance.
   * 
   * @param request - SuspendTaskFlowInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SuspendTaskFlowInstanceResponse
   */
  async suspendTaskFlowInstanceWithOptions(request: SuspendTaskFlowInstanceRequest, runtime: $dara.RuntimeOptions): Promise<SuspendTaskFlowInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.dagInstanceId)) {
      query["DagInstanceId"] = request.dagInstanceId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SuspendTaskFlowInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SuspendTaskFlowInstanceResponse>(await this.callApi(params, req, runtime), new SuspendTaskFlowInstanceResponse({}));
    } else {
      return $dara.cast<SuspendTaskFlowInstanceResponse>(await this.execute(params, req, runtime), new SuspendTaskFlowInstanceResponse({}));
    }

  }

  /**
   * Suspends a task flow instance.
   * 
   * @param request - SuspendTaskFlowInstanceRequest
   * @returns SuspendTaskFlowInstanceResponse
   */
  async suspendTaskFlowInstance(request: SuspendTaskFlowInstanceRequest): Promise<SuspendTaskFlowInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.suspendTaskFlowInstanceWithOptions(request, runtime);
  }

  /**
   * Synchronizes the metadata of a database.
   * 
   * @param request - SyncDatabaseMetaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SyncDatabaseMetaResponse
   */
  async syncDatabaseMetaWithOptions(request: SyncDatabaseMetaRequest, runtime: $dara.RuntimeOptions): Promise<SyncDatabaseMetaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbId)) {
      query["DbId"] = request.dbId;
    }

    if (!$dara.isNull(request.logic)) {
      query["Logic"] = request.logic;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SyncDatabaseMeta",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SyncDatabaseMetaResponse>(await this.callApi(params, req, runtime), new SyncDatabaseMetaResponse({}));
    } else {
      return $dara.cast<SyncDatabaseMetaResponse>(await this.execute(params, req, runtime), new SyncDatabaseMetaResponse({}));
    }

  }

  /**
   * Synchronizes the metadata of a database.
   * 
   * @param request - SyncDatabaseMetaRequest
   * @returns SyncDatabaseMetaResponse
   */
  async syncDatabaseMeta(request: SyncDatabaseMetaRequest): Promise<SyncDatabaseMetaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.syncDatabaseMetaWithOptions(request, runtime);
  }

  /**
   * Synchronizes the metadata of all databases in a database instance.
   * 
   * @remarks
   * You can call this operation only for database instances whose control mode is Security Collaboration.
   * 
   * @param request - SyncInstanceMetaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SyncInstanceMetaResponse
   */
  async syncInstanceMetaWithOptions(request: SyncInstanceMetaRequest, runtime: $dara.RuntimeOptions): Promise<SyncInstanceMetaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ignoreTable)) {
      query["IgnoreTable"] = request.ignoreTable;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SyncInstanceMeta",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SyncInstanceMetaResponse>(await this.callApi(params, req, runtime), new SyncInstanceMetaResponse({}));
    } else {
      return $dara.cast<SyncInstanceMetaResponse>(await this.execute(params, req, runtime), new SyncInstanceMetaResponse({}));
    }

  }

  /**
   * Synchronizes the metadata of all databases in a database instance.
   * 
   * @remarks
   * You can call this operation only for database instances whose control mode is Security Collaboration.
   * 
   * @param request - SyncInstanceMetaRequest
   * @returns SyncInstanceMetaResponse
   */
  async syncInstanceMeta(request: SyncInstanceMetaRequest): Promise<SyncInstanceMetaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.syncInstanceMetaWithOptions(request, runtime);
  }

  /**
   * 更新权限策略
   * 
   * @param request - UpdateAbacPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateAbacPolicyResponse
   */
  async updateAbacPolicyWithOptions(request: UpdateAbacPolicyRequest, runtime: $dara.RuntimeOptions): Promise<UpdateAbacPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.abacPolicyContent)) {
      query["AbacPolicyContent"] = request.abacPolicyContent;
    }

    if (!$dara.isNull(request.abacPolicyDesc)) {
      query["AbacPolicyDesc"] = request.abacPolicyDesc;
    }

    if (!$dara.isNull(request.abacPolicyId)) {
      query["AbacPolicyId"] = request.abacPolicyId;
    }

    if (!$dara.isNull(request.abacPolicyName)) {
      query["AbacPolicyName"] = request.abacPolicyName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateAbacPolicy",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateAbacPolicyResponse>(await this.callApi(params, req, runtime), new UpdateAbacPolicyResponse({}));
    } else {
      return $dara.cast<UpdateAbacPolicyResponse>(await this.execute(params, req, runtime), new UpdateAbacPolicyResponse({}));
    }

  }

  /**
   * 更新权限策略
   * 
   * @param request - UpdateAbacPolicyRequest
   * @returns UpdateAbacPolicyResponse
   */
  async updateAbacPolicy(request: UpdateAbacPolicyRequest): Promise<UpdateAbacPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateAbacPolicyWithOptions(request, runtime);
  }

  /**
   * Modifies a permission template.
   * 
   * @remarks
   * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
   * 
   * @param request - UpdateAuthorityTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateAuthorityTemplateResponse
   */
  async updateAuthorityTemplateWithOptions(request: UpdateAuthorityTemplateRequest, runtime: $dara.RuntimeOptions): Promise<UpdateAuthorityTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateAuthorityTemplate",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateAuthorityTemplateResponse>(await this.callApi(params, req, runtime), new UpdateAuthorityTemplateResponse({}));
    } else {
      return $dara.cast<UpdateAuthorityTemplateResponse>(await this.execute(params, req, runtime), new UpdateAuthorityTemplateResponse({}));
    }

  }

  /**
   * Modifies a permission template.
   * 
   * @remarks
   * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
   * 
   * @param request - UpdateAuthorityTemplateRequest
   * @returns UpdateAuthorityTemplateResponse
   */
  async updateAuthorityTemplate(request: UpdateAuthorityTemplateRequest): Promise<UpdateAuthorityTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateAuthorityTemplateWithOptions(request, runtime);
  }

  /**
   * 更新湖仓数据库
   * 
   * @param tmpReq - UpdateDataLakeDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateDataLakeDatabaseResponse
   */
  async updateDataLakeDatabaseWithOptions(tmpReq: UpdateDataLakeDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<UpdateDataLakeDatabaseResponse> {
    tmpReq.validate();
    let request = new UpdateDataLakeDatabaseShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.parameters)) {
      request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, "Parameters", "json");
    }

    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.location)) {
      query["Location"] = request.location;
    }

    if (!$dara.isNull(request.parametersShrink)) {
      query["Parameters"] = request.parametersShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateDataLakeDatabase",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateDataLakeDatabaseResponse>(await this.callApi(params, req, runtime), new UpdateDataLakeDatabaseResponse({}));
    } else {
      return $dara.cast<UpdateDataLakeDatabaseResponse>(await this.execute(params, req, runtime), new UpdateDataLakeDatabaseResponse({}));
    }

  }

  /**
   * 更新湖仓数据库
   * 
   * @param request - UpdateDataLakeDatabaseRequest
   * @returns UpdateDataLakeDatabaseResponse
   */
  async updateDataLakeDatabase(request: UpdateDataLakeDatabaseRequest): Promise<UpdateDataLakeDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateDataLakeDatabaseWithOptions(request, runtime);
  }

  /**
   * 更新湖仓表分区
   * 
   * @param tmpReq - UpdateDataLakePartitionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateDataLakePartitionResponse
   */
  async updateDataLakePartitionWithOptions(tmpReq: UpdateDataLakePartitionRequest, runtime: $dara.RuntimeOptions): Promise<UpdateDataLakePartitionResponse> {
    tmpReq.validate();
    let request = new UpdateDataLakePartitionShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.partitionInput)) {
      request.partitionInputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.partitionInput, "PartitionInput", "json");
    }

    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.tableName)) {
      query["TableName"] = request.tableName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.partitionInputShrink)) {
      body["PartitionInput"] = request.partitionInputShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateDataLakePartition",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateDataLakePartitionResponse>(await this.callApi(params, req, runtime), new UpdateDataLakePartitionResponse({}));
    } else {
      return $dara.cast<UpdateDataLakePartitionResponse>(await this.execute(params, req, runtime), new UpdateDataLakePartitionResponse({}));
    }

  }

  /**
   * 更新湖仓表分区
   * 
   * @param request - UpdateDataLakePartitionRequest
   * @returns UpdateDataLakePartitionResponse
   */
  async updateDataLakePartition(request: UpdateDataLakePartitionRequest): Promise<UpdateDataLakePartitionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateDataLakePartitionWithOptions(request, runtime);
  }

  /**
   * 更新湖仓表信息
   * 
   * @param tmpReq - UpdateDataLakeTableRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateDataLakeTableResponse
   */
  async updateDataLakeTableWithOptions(tmpReq: UpdateDataLakeTableRequest, runtime: $dara.RuntimeOptions): Promise<UpdateDataLakeTableResponse> {
    tmpReq.validate();
    let request = new UpdateDataLakeTableShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.tableInput)) {
      request.tableInputShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tableInput, "TableInput", "json");
    }

    let query = { };
    if (!$dara.isNull(request.catalogName)) {
      query["CatalogName"] = request.catalogName;
    }

    if (!$dara.isNull(request.dataRegion)) {
      query["DataRegion"] = request.dataRegion;
    }

    if (!$dara.isNull(request.dbName)) {
      query["DbName"] = request.dbName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.tableInputShrink)) {
      body["TableInput"] = request.tableInputShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateDataLakeTable",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateDataLakeTableResponse>(await this.callApi(params, req, runtime), new UpdateDataLakeTableResponse({}));
    } else {
      return $dara.cast<UpdateDataLakeTableResponse>(await this.execute(params, req, runtime), new UpdateDataLakeTableResponse({}));
    }

  }

  /**
   * 更新湖仓表信息
   * 
   * @param request - UpdateDataLakeTableRequest
   * @returns UpdateDataLakeTableResponse
   */
  async updateDataLakeTable(request: UpdateDataLakeTableRequest): Promise<UpdateDataLakeTableResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateDataLakeTableWithOptions(request, runtime);
  }

  /**
   * Updates the information about a database instance and checks the connectivity of the database instance.
   * 
   * @remarks
   * Before you call the UpdateInstance operation, call the [GetInstance](https://help.aliyun.com/document_detail/141567.html) or [ListInstances](https://help.aliyun.com/document_detail/141936.html) operation to obtain the complete information about the instance.
   * 
   * @param request - UpdateInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateInstanceResponse
   */
  async updateInstanceWithOptions(request: UpdateInstanceRequest, runtime: $dara.RuntimeOptions): Promise<UpdateInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dataLinkName)) {
      query["DataLinkName"] = request.dataLinkName;
    }

    if (!$dara.isNull(request.databasePassword)) {
      query["DatabasePassword"] = request.databasePassword;
    }

    if (!$dara.isNull(request.databaseUser)) {
      query["DatabaseUser"] = request.databaseUser;
    }

    if (!$dara.isNull(request.dbaId)) {
      query["DbaId"] = request.dbaId;
    }

    if (!$dara.isNull(request.ddlOnline)) {
      query["DdlOnline"] = request.ddlOnline;
    }

    if (!$dara.isNull(request.ecsInstanceId)) {
      query["EcsInstanceId"] = request.ecsInstanceId;
    }

    if (!$dara.isNull(request.ecsRegion)) {
      query["EcsRegion"] = request.ecsRegion;
    }

    if (!$dara.isNull(request.enableSellSitd)) {
      query["EnableSellSitd"] = request.enableSellSitd;
    }

    if (!$dara.isNull(request.envType)) {
      query["EnvType"] = request.envType;
    }

    if (!$dara.isNull(request.exportTimeout)) {
      query["ExportTimeout"] = request.exportTimeout;
    }

    if (!$dara.isNull(request.host)) {
      query["Host"] = request.host;
    }

    if (!$dara.isNull(request.instanceAlias)) {
      query["InstanceAlias"] = request.instanceAlias;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceSource)) {
      query["InstanceSource"] = request.instanceSource;
    }

    if (!$dara.isNull(request.instanceType)) {
      query["InstanceType"] = request.instanceType;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.queryTimeout)) {
      query["QueryTimeout"] = request.queryTimeout;
    }

    if (!$dara.isNull(request.safeRuleId)) {
      query["SafeRuleId"] = request.safeRuleId;
    }

    if (!$dara.isNull(request.sid)) {
      query["Sid"] = request.sid;
    }

    if (!$dara.isNull(request.skipTest)) {
      query["SkipTest"] = request.skipTest;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    if (!$dara.isNull(request.templateType)) {
      query["TemplateType"] = request.templateType;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.useDsql)) {
      query["UseDsql"] = request.useDsql;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateInstance",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateInstanceResponse>(await this.callApi(params, req, runtime), new UpdateInstanceResponse({}));
    } else {
      return $dara.cast<UpdateInstanceResponse>(await this.execute(params, req, runtime), new UpdateInstanceResponse({}));
    }

  }

  /**
   * Updates the information about a database instance and checks the connectivity of the database instance.
   * 
   * @remarks
   * Before you call the UpdateInstance operation, call the [GetInstance](https://help.aliyun.com/document_detail/141567.html) or [ListInstances](https://help.aliyun.com/document_detail/141936.html) operation to obtain the complete information about the instance.
   * 
   * @param request - UpdateInstanceRequest
   * @returns UpdateInstanceResponse
   */
  async updateInstance(request: UpdateInstanceRequest): Promise<UpdateInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateInstanceWithOptions(request, runtime);
  }

  /**
   * Updates the service level agreement (SLA) timeout reminder for a task flow.
   * 
   * @remarks
   * SLA rules take effect after task flows are deployed and published.
   * 
   * @param tmpReq - UpdateSLARulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateSLARulesResponse
   */
  async updateSLARulesWithOptions(tmpReq: UpdateSLARulesRequest, runtime: $dara.RuntimeOptions): Promise<UpdateSLARulesResponse> {
    tmpReq.validate();
    let request = new UpdateSLARulesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.slaRuleList)) {
      request.slaRuleListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.slaRuleList, "SlaRuleList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.slaRuleListShrink)) {
      query["SlaRuleList"] = request.slaRuleListShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateSLARules",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateSLARulesResponse>(await this.callApi(params, req, runtime), new UpdateSLARulesResponse({}));
    } else {
      return $dara.cast<UpdateSLARulesResponse>(await this.execute(params, req, runtime), new UpdateSLARulesResponse({}));
    }

  }

  /**
   * Updates the service level agreement (SLA) timeout reminder for a task flow.
   * 
   * @remarks
   * SLA rules take effect after task flows are deployed and published.
   * 
   * @param request - UpdateSLARulesRequest
   * @returns UpdateSLARulesResponse
   */
  async updateSLARules(request: UpdateSLARulesRequest): Promise<UpdateSLARulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateSLARulesWithOptions(request, runtime);
  }

  /**
   * Updates the name and description of the business scenario for a specified task flow.
   * 
   * @param request - UpdateScenarioRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateScenarioResponse
   */
  async updateScenarioWithOptions(request: UpdateScenarioRequest, runtime: $dara.RuntimeOptions): Promise<UpdateScenarioResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    if (!$dara.isNull(request.scenarioName)) {
      query["ScenarioName"] = request.scenarioName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateScenario",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateScenarioResponse>(await this.callApi(params, req, runtime), new UpdateScenarioResponse({}));
    } else {
      return $dara.cast<UpdateScenarioResponse>(await this.execute(params, req, runtime), new UpdateScenarioResponse({}));
    }

  }

  /**
   * Updates the name and description of the business scenario for a specified task flow.
   * 
   * @param request - UpdateScenarioRequest
   * @returns UpdateScenarioResponse
   */
  async updateScenario(request: UpdateScenarioRequest): Promise<UpdateScenarioResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateScenarioWithOptions(request, runtime);
  }

  /**
   * Modifies the name and description of a specific security rule set.
   * 
   * @param request - UpdateStandardGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateStandardGroupResponse
   */
  async updateStandardGroupWithOptions(request: UpdateStandardGroupRequest, runtime: $dara.RuntimeOptions): Promise<UpdateStandardGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.groupName)) {
      query["GroupName"] = request.groupName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateStandardGroup",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateStandardGroupResponse>(await this.callApi(params, req, runtime), new UpdateStandardGroupResponse({}));
    } else {
      return $dara.cast<UpdateStandardGroupResponse>(await this.execute(params, req, runtime), new UpdateStandardGroupResponse({}));
    }

  }

  /**
   * Modifies the name and description of a specific security rule set.
   * 
   * @param request - UpdateStandardGroupRequest
   * @returns UpdateStandardGroupResponse
   */
  async updateStandardGroup(request: UpdateStandardGroupRequest): Promise<UpdateStandardGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateStandardGroupWithOptions(request, runtime);
  }

  /**
   * Updates the advanced configuration of a task node.
   * 
   * @remarks
   * You can call this operation to configure a failed task or rerun a task.
   * 
   * @param request - UpdateTaskConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskConfigResponse
   */
  async updateTaskConfigWithOptions(request: UpdateTaskConfigRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.nodeConfig)) {
      query["NodeConfig"] = request.nodeConfig;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskConfig",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskConfigResponse>(await this.callApi(params, req, runtime), new UpdateTaskConfigResponse({}));
    } else {
      return $dara.cast<UpdateTaskConfigResponse>(await this.execute(params, req, runtime), new UpdateTaskConfigResponse({}));
    }

  }

  /**
   * Updates the advanced configuration of a task node.
   * 
   * @remarks
   * You can call this operation to configure a failed task or rerun a task.
   * 
   * @param request - UpdateTaskConfigRequest
   * @returns UpdateTaskConfigResponse
   */
  async updateTaskConfig(request: UpdateTaskConfigRequest): Promise<UpdateTaskConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskConfigWithOptions(request, runtime);
  }

  /**
   * Updates tasks in a task flow.
   * 
   * @remarks
   * You can call this operation to modify node configurations.
   * 
   * @param request - UpdateTaskContentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskContentResponse
   */
  async updateTaskContentWithOptions(request: UpdateTaskContentRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskContentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.nodeContent)) {
      query["NodeContent"] = request.nodeContent;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskContent",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskContentResponse>(await this.callApi(params, req, runtime), new UpdateTaskContentResponse({}));
    } else {
      return $dara.cast<UpdateTaskContentResponse>(await this.execute(params, req, runtime), new UpdateTaskContentResponse({}));
    }

  }

  /**
   * Updates tasks in a task flow.
   * 
   * @remarks
   * You can call this operation to modify node configurations.
   * 
   * @param request - UpdateTaskContentRequest
   * @returns UpdateTaskContentResponse
   */
  async updateTaskContent(request: UpdateTaskContentRequest): Promise<UpdateTaskContentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskContentWithOptions(request, runtime);
  }

  /**
   * Updates the constants for a specified task flow.
   * 
   * @param tmpReq - UpdateTaskFlowConstantsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskFlowConstantsResponse
   */
  async updateTaskFlowConstantsWithOptions(tmpReq: UpdateTaskFlowConstantsRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskFlowConstantsResponse> {
    tmpReq.validate();
    let request = new UpdateTaskFlowConstantsShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.dagConstants)) {
      request.dagConstantsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dagConstants, "DagConstants", "json");
    }

    let query = { };
    if (!$dara.isNull(request.dagConstantsShrink)) {
      query["DagConstants"] = request.dagConstantsShrink;
    }

    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskFlowConstants",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskFlowConstantsResponse>(await this.callApi(params, req, runtime), new UpdateTaskFlowConstantsResponse({}));
    } else {
      return $dara.cast<UpdateTaskFlowConstantsResponse>(await this.execute(params, req, runtime), new UpdateTaskFlowConstantsResponse({}));
    }

  }

  /**
   * Updates the constants for a specified task flow.
   * 
   * @param request - UpdateTaskFlowConstantsRequest
   * @returns UpdateTaskFlowConstantsResponse
   */
  async updateTaskFlowConstants(request: UpdateTaskFlowConstantsRequest): Promise<UpdateTaskFlowConstantsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskFlowConstantsWithOptions(request, runtime);
  }

  /**
   * Updates the IDs of the users who are involved in the task flow.
   * 
   * @param tmpReq - UpdateTaskFlowCooperatorsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskFlowCooperatorsResponse
   */
  async updateTaskFlowCooperatorsWithOptions(tmpReq: UpdateTaskFlowCooperatorsRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskFlowCooperatorsResponse> {
    tmpReq.validate();
    let request = new UpdateTaskFlowCooperatorsShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.cooperatorIds)) {
      request.cooperatorIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cooperatorIds, "CooperatorIds", "json");
    }

    let query = { };
    if (!$dara.isNull(request.cooperatorIdsShrink)) {
      query["CooperatorIds"] = request.cooperatorIdsShrink;
    }

    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskFlowCooperators",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskFlowCooperatorsResponse>(await this.callApi(params, req, runtime), new UpdateTaskFlowCooperatorsResponse({}));
    } else {
      return $dara.cast<UpdateTaskFlowCooperatorsResponse>(await this.execute(params, req, runtime), new UpdateTaskFlowCooperatorsResponse({}));
    }

  }

  /**
   * Updates the IDs of the users who are involved in the task flow.
   * 
   * @param request - UpdateTaskFlowCooperatorsRequest
   * @returns UpdateTaskFlowCooperatorsResponse
   */
  async updateTaskFlowCooperators(request: UpdateTaskFlowCooperatorsRequest): Promise<UpdateTaskFlowCooperatorsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskFlowCooperatorsWithOptions(request, runtime);
  }

  /**
   * Updates the start node and end node of multiple edges at a time for a task flow.
   * 
   * @remarks
   * ###
   * The edges can be updated only when the following conditions are met:
   * 1.  The specified edge exists in the directed acyclic graph (DAG) of the task flow specified by DagId.
   * 2.  The specified edge nodes exist in the DAG of the task flow specified by DagId.
   * 3.  After the update, rings do not exist in the DAG.
   * 
   * @param tmpReq - UpdateTaskFlowEdgesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskFlowEdgesResponse
   */
  async updateTaskFlowEdgesWithOptions(tmpReq: UpdateTaskFlowEdgesRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskFlowEdgesResponse> {
    tmpReq.validate();
    let request = new UpdateTaskFlowEdgesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.edges)) {
      request.edgesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.edges, "Edges", "json");
    }

    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.edgesShrink)) {
      query["Edges"] = request.edgesShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskFlowEdges",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskFlowEdgesResponse>(await this.callApi(params, req, runtime), new UpdateTaskFlowEdgesResponse({}));
    } else {
      return $dara.cast<UpdateTaskFlowEdgesResponse>(await this.execute(params, req, runtime), new UpdateTaskFlowEdgesResponse({}));
    }

  }

  /**
   * Updates the start node and end node of multiple edges at a time for a task flow.
   * 
   * @remarks
   * ###
   * The edges can be updated only when the following conditions are met:
   * 1.  The specified edge exists in the directed acyclic graph (DAG) of the task flow specified by DagId.
   * 2.  The specified edge nodes exist in the DAG of the task flow specified by DagId.
   * 3.  After the update, rings do not exist in the DAG.
   * 
   * @param request - UpdateTaskFlowEdgesRequest
   * @returns UpdateTaskFlowEdgesResponse
   */
  async updateTaskFlowEdges(request: UpdateTaskFlowEdgesRequest): Promise<UpdateTaskFlowEdgesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskFlowEdgesWithOptions(request, runtime);
  }

  /**
   * Updates the name and description of a task flow.
   * 
   * @param request - UpdateTaskFlowNameAndDescRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskFlowNameAndDescResponse
   */
  async updateTaskFlowNameAndDescWithOptions(request: UpdateTaskFlowNameAndDescRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskFlowNameAndDescResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.dagName)) {
      query["DagName"] = request.dagName;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskFlowNameAndDesc",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskFlowNameAndDescResponse>(await this.callApi(params, req, runtime), new UpdateTaskFlowNameAndDescResponse({}));
    } else {
      return $dara.cast<UpdateTaskFlowNameAndDescResponse>(await this.execute(params, req, runtime), new UpdateTaskFlowNameAndDescResponse({}));
    }

  }

  /**
   * Updates the name and description of a task flow.
   * 
   * @param request - UpdateTaskFlowNameAndDescRequest
   * @returns UpdateTaskFlowNameAndDescResponse
   */
  async updateTaskFlowNameAndDesc(request: UpdateTaskFlowNameAndDescRequest): Promise<UpdateTaskFlowNameAndDescResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskFlowNameAndDescWithOptions(request, runtime);
  }

  /**
   * Updates the notification settings for task flows.
   * 
   * @param request - UpdateTaskFlowNotificationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskFlowNotificationResponse
   */
  async updateTaskFlowNotificationWithOptions(request: UpdateTaskFlowNotificationRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskFlowNotificationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.dagNotificationFail)) {
      query["DagNotificationFail"] = request.dagNotificationFail;
    }

    if (!$dara.isNull(request.dagNotificationSla)) {
      query["DagNotificationSla"] = request.dagNotificationSla;
    }

    if (!$dara.isNull(request.dagNotificationSuccess)) {
      query["DagNotificationSuccess"] = request.dagNotificationSuccess;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskFlowNotification",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskFlowNotificationResponse>(await this.callApi(params, req, runtime), new UpdateTaskFlowNotificationResponse({}));
    } else {
      return $dara.cast<UpdateTaskFlowNotificationResponse>(await this.execute(params, req, runtime), new UpdateTaskFlowNotificationResponse({}));
    }

  }

  /**
   * Updates the notification settings for task flows.
   * 
   * @param request - UpdateTaskFlowNotificationRequest
   * @returns UpdateTaskFlowNotificationResponse
   */
  async updateTaskFlowNotification(request: UpdateTaskFlowNotificationRequest): Promise<UpdateTaskFlowNotificationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskFlowNotificationWithOptions(request, runtime);
  }

  /**
   * Changes the owner of a task flow.
   * 
   * @remarks
   * Note: The new owner of the task flow must belong to the same tenant as the previous owner.
   * 
   * @param request - UpdateTaskFlowOwnerRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskFlowOwnerResponse
   */
  async updateTaskFlowOwnerWithOptions(request: UpdateTaskFlowOwnerRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskFlowOwnerResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.newOwnerId)) {
      query["NewOwnerId"] = request.newOwnerId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskFlowOwner",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskFlowOwnerResponse>(await this.callApi(params, req, runtime), new UpdateTaskFlowOwnerResponse({}));
    } else {
      return $dara.cast<UpdateTaskFlowOwnerResponse>(await this.execute(params, req, runtime), new UpdateTaskFlowOwnerResponse({}));
    }

  }

  /**
   * Changes the owner of a task flow.
   * 
   * @remarks
   * Note: The new owner of the task flow must belong to the same tenant as the previous owner.
   * 
   * @param request - UpdateTaskFlowOwnerRequest
   * @returns UpdateTaskFlowOwnerResponse
   */
  async updateTaskFlowOwner(request: UpdateTaskFlowOwnerRequest): Promise<UpdateTaskFlowOwnerResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskFlowOwnerWithOptions(request, runtime);
  }

  /**
   * Fully updates the edges of a task flow.
   * 
   * @remarks
   * You can call this operation to perform a full update. For incremental updates, see AddTaskFlowEdges, UpdateTaskFlowEdges, and DeleteTaskFlowEdgesByMultiCondition.
   * 
   * @param tmpReq - UpdateTaskFlowRelationsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskFlowRelationsResponse
   */
  async updateTaskFlowRelationsWithOptions(tmpReq: UpdateTaskFlowRelationsRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskFlowRelationsResponse> {
    tmpReq.validate();
    let request = new UpdateTaskFlowRelationsShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.edges)) {
      request.edgesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.edges, "Edges", "json");
    }

    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.edgesShrink)) {
      query["Edges"] = request.edgesShrink;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskFlowRelations",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskFlowRelationsResponse>(await this.callApi(params, req, runtime), new UpdateTaskFlowRelationsResponse({}));
    } else {
      return $dara.cast<UpdateTaskFlowRelationsResponse>(await this.execute(params, req, runtime), new UpdateTaskFlowRelationsResponse({}));
    }

  }

  /**
   * Fully updates the edges of a task flow.
   * 
   * @remarks
   * You can call this operation to perform a full update. For incremental updates, see AddTaskFlowEdges, UpdateTaskFlowEdges, and DeleteTaskFlowEdgesByMultiCondition.
   * 
   * @param request - UpdateTaskFlowRelationsRequest
   * @returns UpdateTaskFlowRelationsResponse
   */
  async updateTaskFlowRelations(request: UpdateTaskFlowRelationsRequest): Promise<UpdateTaskFlowRelationsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskFlowRelationsWithOptions(request, runtime);
  }

  /**
   * Updates the scheduling properties for a task flow.
   * 
   * @remarks
   * You can call this operation to update the scheduling properties for a task flow in the editing state. You can configure a **timed scheduling** task flow or an **event scheduling** task flow. When you configure a **timed scheduling** task flow, you can choose from one-time scheduling or periodic scheduling. When you configure an **event scheduling** task flow, you can subscribe to task flows or task flow nodes.****\\
   * After you update the scheduling properties, you need to publish and deploy the task flow again. The new task flow instance will run based on the updated scheduling properties.
   * 
   * @param request - UpdateTaskFlowScheduleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskFlowScheduleResponse
   */
  async updateTaskFlowScheduleWithOptions(request: UpdateTaskFlowScheduleRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskFlowScheduleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cronBeginDate)) {
      query["CronBeginDate"] = request.cronBeginDate;
    }

    if (!$dara.isNull(request.cronEndDate)) {
      query["CronEndDate"] = request.cronEndDate;
    }

    if (!$dara.isNull(request.cronStr)) {
      query["CronStr"] = request.cronStr;
    }

    if (!$dara.isNull(request.cronType)) {
      query["CronType"] = request.cronType;
    }

    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.scheduleParam)) {
      query["ScheduleParam"] = request.scheduleParam;
    }

    if (!$dara.isNull(request.scheduleSwitch)) {
      query["ScheduleSwitch"] = request.scheduleSwitch;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.timeZoneId)) {
      query["TimeZoneId"] = request.timeZoneId;
    }

    if (!$dara.isNull(request.triggerType)) {
      query["TriggerType"] = request.triggerType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskFlowSchedule",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskFlowScheduleResponse>(await this.callApi(params, req, runtime), new UpdateTaskFlowScheduleResponse({}));
    } else {
      return $dara.cast<UpdateTaskFlowScheduleResponse>(await this.execute(params, req, runtime), new UpdateTaskFlowScheduleResponse({}));
    }

  }

  /**
   * Updates the scheduling properties for a task flow.
   * 
   * @remarks
   * You can call this operation to update the scheduling properties for a task flow in the editing state. You can configure a **timed scheduling** task flow or an **event scheduling** task flow. When you configure a **timed scheduling** task flow, you can choose from one-time scheduling or periodic scheduling. When you configure an **event scheduling** task flow, you can subscribe to task flows or task flow nodes.****\\
   * After you update the scheduling properties, you need to publish and deploy the task flow again. The new task flow instance will run based on the updated scheduling properties.
   * 
   * @param request - UpdateTaskFlowScheduleRequest
   * @returns UpdateTaskFlowScheduleResponse
   */
  async updateTaskFlowSchedule(request: UpdateTaskFlowScheduleRequest): Promise<UpdateTaskFlowScheduleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskFlowScheduleWithOptions(request, runtime);
  }

  /**
   * Updates the time variables for a task flow.
   * 
   * @param request - UpdateTaskFlowTimeVariablesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskFlowTimeVariablesResponse
   */
  async updateTaskFlowTimeVariablesWithOptions(request: UpdateTaskFlowTimeVariablesRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskFlowTimeVariablesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dagId)) {
      query["DagId"] = request.dagId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.timeVariables)) {
      query["TimeVariables"] = request.timeVariables;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskFlowTimeVariables",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskFlowTimeVariablesResponse>(await this.callApi(params, req, runtime), new UpdateTaskFlowTimeVariablesResponse({}));
    } else {
      return $dara.cast<UpdateTaskFlowTimeVariablesResponse>(await this.execute(params, req, runtime), new UpdateTaskFlowTimeVariablesResponse({}));
    }

  }

  /**
   * Updates the time variables for a task flow.
   * 
   * @param request - UpdateTaskFlowTimeVariablesRequest
   * @returns UpdateTaskFlowTimeVariablesResponse
   */
  async updateTaskFlowTimeVariables(request: UpdateTaskFlowTimeVariablesRequest): Promise<UpdateTaskFlowTimeVariablesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskFlowTimeVariablesWithOptions(request, runtime);
  }

  /**
   * Updates the name of a specified task.
   * 
   * @param request - UpdateTaskNameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskNameResponse
   */
  async updateTaskNameWithOptions(request: UpdateTaskNameRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskNameResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.nodeName)) {
      query["NodeName"] = request.nodeName;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskName",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskNameResponse>(await this.callApi(params, req, runtime), new UpdateTaskNameResponse({}));
    } else {
      return $dara.cast<UpdateTaskNameResponse>(await this.execute(params, req, runtime), new UpdateTaskNameResponse({}));
    }

  }

  /**
   * Updates the name of a specified task.
   * 
   * @param request - UpdateTaskNameRequest
   * @returns UpdateTaskNameResponse
   */
  async updateTaskName(request: UpdateTaskNameRequest): Promise<UpdateTaskNameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskNameWithOptions(request, runtime);
  }

  /**
   * Updates the output variables for a specified task node.
   * 
   * @remarks
   * Only nodes of single-instance SQL assignment, script code, and ECS remote command have output variables.
   * 
   * @param request - UpdateTaskOutputRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskOutputResponse
   */
  async updateTaskOutputWithOptions(request: UpdateTaskOutputRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskOutputResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.nodeOutput)) {
      query["NodeOutput"] = request.nodeOutput;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskOutput",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskOutputResponse>(await this.callApi(params, req, runtime), new UpdateTaskOutputResponse({}));
    } else {
      return $dara.cast<UpdateTaskOutputResponse>(await this.execute(params, req, runtime), new UpdateTaskOutputResponse({}));
    }

  }

  /**
   * Updates the output variables for a specified task node.
   * 
   * @remarks
   * Only nodes of single-instance SQL assignment, script code, and ECS remote command have output variables.
   * 
   * @param request - UpdateTaskOutputRequest
   * @returns UpdateTaskOutputResponse
   */
  async updateTaskOutput(request: UpdateTaskOutputRequest): Promise<UpdateTaskOutputResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskOutputWithOptions(request, runtime);
  }

  /**
   * Updates time variables for a task.
   * 
   * @param request - UpdateTaskTimeVariablesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTaskTimeVariablesResponse
   */
  async updateTaskTimeVariablesWithOptions(request: UpdateTaskTimeVariablesRequest, runtime: $dara.RuntimeOptions): Promise<UpdateTaskTimeVariablesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.timeVariables)) {
      query["TimeVariables"] = request.timeVariables;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTaskTimeVariables",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateTaskTimeVariablesResponse>(await this.callApi(params, req, runtime), new UpdateTaskTimeVariablesResponse({}));
    } else {
      return $dara.cast<UpdateTaskTimeVariablesResponse>(await this.execute(params, req, runtime), new UpdateTaskTimeVariablesResponse({}));
    }

  }

  /**
   * Updates time variables for a task.
   * 
   * @param request - UpdateTaskTimeVariablesRequest
   * @returns UpdateTaskTimeVariablesResponse
   */
  async updateTaskTimeVariables(request: UpdateTaskTimeVariablesRequest): Promise<UpdateTaskTimeVariablesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTaskTimeVariablesWithOptions(request, runtime);
  }

  /**
   * Updates user information.
   * 
   * @param request - UpdateUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateUserResponse
   */
  async updateUserWithOptions(request: UpdateUserRequest, runtime: $dara.RuntimeOptions): Promise<UpdateUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.maxExecuteCount)) {
      query["MaxExecuteCount"] = request.maxExecuteCount;
    }

    if (!$dara.isNull(request.maxResultCount)) {
      query["MaxResultCount"] = request.maxResultCount;
    }

    if (!$dara.isNull(request.mobile)) {
      query["Mobile"] = request.mobile;
    }

    if (!$dara.isNull(request.roleNames)) {
      query["RoleNames"] = request.roleNames;
    }

    if (!$dara.isNull(request.tid)) {
      query["Tid"] = request.tid;
    }

    if (!$dara.isNull(request.uid)) {
      query["Uid"] = request.uid;
    }

    if (!$dara.isNull(request.userNick)) {
      query["UserNick"] = request.userNick;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateUser",
      version: "2018-11-01",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateUserResponse>(await this.callApi(params, req, runtime), new UpdateUserResponse({}));
    } else {
      return $dara.cast<UpdateUserResponse>(await this.execute(params, req, runtime), new UpdateUserResponse({}));
    }

  }

  /**
   * Updates user information.
   * 
   * @param request - UpdateUserRequest
   * @returns UpdateUserResponse
   */
  async updateUser(request: UpdateUserRequest): Promise<UpdateUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateUserWithOptions(request, runtime);
  }

}
