// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';
import { UncompressedFileInfo } from "./UncompressedFileInfo";


export class GetAsyncTaskResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the asynchronous task.
   * 
   * @example
   * 000e89fb-cf8f-11e9-8ab4-b6e980803a3b
   */
  asyncTaskId?: string;
  /**
   * @remarks
   * The custom category of the task.
   * 
   * @example
   * album
   */
  category?: string;
  /**
   * @remarks
   * The total amount of work that is done in the asynchronous task, such as the number of files that are packaged for package download on the server.
   * 
   * @example
   * 100
   */
  consumedProcess?: number;
  /**
   * @remarks
   * The time when the task was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. Example: 2019-03-28T13:03:29.298Z.
   * 
   * @example
   * 2019-08-20T06:51:27.292Z
   */
  createdAt?: string;
  /**
   * @remarks
   * <warning>This parameter is no longer used. We recommend that you use error_code instead.</warning>
   * 
   * The error code returned if the asynchronous task failed.
   * 
   * @example
   * InternalError
   */
  errCode?: number;
  /**
   * @remarks
   * The error code returned if the asynchronous task failed.
   * 
   * @example
   * InternalError
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message returned if the asynchronous task failed.
   * 
   * @example
   * The request has been failed due to some unknown error. Please try again later.
   */
  errorMessage?: string;
  failedProcess?: number;
  /**
   * @remarks
   * The time when the task was complete. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. Example: 2019-03-28T13:03:29.298Z.
   * 
   * @example
   * 2019-08-20T06:51:27.292Z
   */
  finishedAt?: string;
  /**
   * @remarks
   * <warning>This parameter is no longer used. We recommend that you use error_message instead.</warning>
   * 
   * The error message returned if the asynchronous task failed.
   * 
   * @example
   * The request has been failed due to some unknown error. Please try again later.
   */
  message?: string;
  skippedProcess?: number;
  /**
   * @remarks
   * The time when the task was started. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. Example: 2019-03-28T13:03:29.298Z.
   * 
   * @example
   * 2019-08-20T06:51:27.292Z
   */
  startedAt?: string;
  /**
   * @remarks
   * The state of the task. Valid values:
   * 
   * *   Failed
   * *   Running
   * *   PartialSucceed
   * *   Succeed
   * 
   * @example
   * Succeed
   */
  state?: string;
  /**
   * @remarks
   * <warning>This parameter is no longer used. We recommend that you use state instead.</warning>
   * 
   * The state of the task. Valid values:
   * 
   * *   Failed
   * *   Running
   * *   PartialSucceed
   * *   Succeed
   * 
   * @example
   * Succeed
   */
  status?: string;
  /**
   * @remarks
   * The total amount of work to be done in the asynchronous task, such as the number of files to be packaged for package download on the server.
   * 
   * @example
   * 1000
   */
  totalProcess?: number;
  /**
   * @remarks
   * The extracted files.
   */
  uncompressFileList?: UncompressedFileInfo[];
  /**
   * @remarks
   * The download URL of the data generated by the asynchronous task, such as the download URL of the packaged files generated by the task of package download on the server.
   * 
   * @example
   * https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx
   */
  url?: string;
  static names(): { [key: string]: string } {
    return {
      asyncTaskId: 'async_task_id',
      category: 'category',
      consumedProcess: 'consumed_process',
      createdAt: 'created_at',
      errCode: 'err_code',
      errorCode: 'error_code',
      errorMessage: 'error_message',
      failedProcess: 'failed_process',
      finishedAt: 'finished_at',
      message: 'message',
      skippedProcess: 'skipped_process',
      startedAt: 'started_at',
      state: 'state',
      status: 'status',
      totalProcess: 'total_process',
      uncompressFileList: 'uncompress_file_list',
      url: 'url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncTaskId: 'string',
      category: 'string',
      consumedProcess: 'number',
      createdAt: 'string',
      errCode: 'number',
      errorCode: 'string',
      errorMessage: 'string',
      failedProcess: 'number',
      finishedAt: 'string',
      message: 'string',
      skippedProcess: 'number',
      startedAt: 'string',
      state: 'string',
      status: 'string',
      totalProcess: 'number',
      uncompressFileList: { 'type': 'array', 'itemType': UncompressedFileInfo },
      url: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.uncompressFileList)) {
      $dara.Model.validateArray(this.uncompressFileList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

