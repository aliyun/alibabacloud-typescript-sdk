// This file is auto-generated, don't edit it
/**
 */
import OpenApi from '@alicloud/openapi-core';
import { OpenApiUtil, $OpenApiUtil } from '@alicloud/openapi-core';
import * as $dara from '@darabonba/typescript';

export class FilePermissionMemberCdsIdentity extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  id?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDesktopOversoldUserGroupRequestTag extends $dara.Model {
  key?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDesktopOversoldUserGroupResponseBodyData extends $dara.Model {
  userGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      userGroupId: 'UserGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddFilePermissionRequestMemberListCdsIdentity extends $dara.Model {
  /**
   * @remarks
   * The ID of the user.
   * 
   * This parameter is required.
   * 
   * @example
   * user01
   */
  id?: string;
  /**
   * @remarks
   * The type of the user.
   * 
   * Valid values:
   * 
   * *   <!-- -->
   * 
   *     IT_Group
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   <!-- -->
   * 
   *     IT_User
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * This parameter is required.
   * 
   * @example
   * IT_User
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddFilePermissionRequestMemberList extends $dara.Model {
  /**
   * @remarks
   * The user of the cloud disk.
   * 
   * This parameter is required.
   */
  cdsIdentity?: AddFilePermissionRequestMemberListCdsIdentity;
  /**
   * @remarks
   * Specifies whether the users of the child group can inherit the folder permissions.
   * 
   * @example
   * false
   */
  disinheritSubGroup?: boolean;
  /**
   * @remarks
   * The time when the authorization expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The value never expires. You can specify a value that is predefined by the system for this parameter. Example: 4775500800000.
   * 
   * @example
   * 4775500800000
   */
  expireTime?: number;
  /**
   * @remarks
   * The ID of the role to which you want to attach the folder permissions. To configure the folder permissions: you can specify a role or create custom operation permissions. You can use RoleId to specify a role. RoleId is mutually exclusive with ActionList. If you specify both of them, the value of RoleId takes precedence.
   * 
   * Valid values:
   * 
   * * SystemFileEditorWithoutShareLink
   * * SystemFileUploaderAndDownloaderWithShareLink
   * * SystemFileDownloader
   * * SystemFileEditorWithoutDelete
   * * SystemFileOwner
   * * SystemFileDownloaderWithShareLink
   * * SystemFileUploaderAndViewer
   * * SystemFileViewer
   * * SystemFileEditor
   * * SystemFileUploaderWithShareLink
   * * SystemFileUploader
   * * SystemFileUploaderAndDownloader
   * * SystemFileMetaViewer
   * 
   * This parameter is required.
   * 
   * @example
   * SystemFileUploaderAndDownloader
   */
  roleId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsIdentity: 'CdsIdentity',
      disinheritSubGroup: 'DisinheritSubGroup',
      expireTime: 'ExpireTime',
      roleId: 'RoleId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsIdentity: AddFilePermissionRequestMemberListCdsIdentity,
      disinheritSubGroup: 'boolean',
      expireTime: 'number',
      roleId: 'string',
    };
  }

  validate() {
    if(this.cdsIdentity && typeof (this.cdsIdentity as any).validate === 'function') {
      (this.cdsIdentity as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyCoordinationForMonitoringRequestResourceCandidates extends $dara.Model {
  /**
   * @remarks
   * The ID of the Alibaba Cloud account to which the current cloud desktop belongs.
   * 
   * This parameter is required.
   * 
   * @example
   * 130247021517****
   */
  ownerAliUid?: number;
  /**
   * @remarks
   * The ID of the current end user.
   * 
   * @example
   * alice
   */
  ownerEndUserId?: string;
  /**
   * @remarks
   * The ID of the cloud desktop.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-08zhejm3h7ilr****
   */
  resourceId?: string;
  /**
   * @remarks
   * The name of the cloud desktop.
   * 
   * This parameter is required.
   * 
   * @example
   * TestDesktop
   */
  resourceName?: string;
  /**
   * @remarks
   * The properties of the cloud desktop.
   * 
   * @example
   * TestProperty
   */
  resourceProperties?: string;
  /**
   * @remarks
   * The region where the resource resides.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  resourceRegionId?: string;
  /**
   * @remarks
   * The resource type.
   * 
   * Set the value to CLOUD_DESKTOP.
   * 
   * *   The value CLOUD_DESKTOP specifies that the resource is a cloud desktop.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * This parameter is required.
   * 
   * @example
   * CLOUD_DESKTOP
   */
  resourceType?: string;
  static names(): { [key: string]: string } {
    return {
      ownerAliUid: 'OwnerAliUid',
      ownerEndUserId: 'OwnerEndUserId',
      resourceId: 'ResourceId',
      resourceName: 'ResourceName',
      resourceProperties: 'ResourceProperties',
      resourceRegionId: 'ResourceRegionId',
      resourceType: 'ResourceType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ownerAliUid: 'number',
      ownerEndUserId: 'string',
      resourceId: 'string',
      resourceName: 'string',
      resourceProperties: 'string',
      resourceRegionId: 'string',
      resourceType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels extends $dara.Model {
  /**
   * @remarks
   * The ID of the stream collaboration.
   * 
   * @example
   * co-0sot77uale3****
   */
  coId?: string;
  /**
   * @remarks
   * The current status of the collaboration task.
   * 
   * Valid values:
   * 
   * *   COORDINATING: The collaboration task is being executed.
   * 
   * *   TERMINATING: The collaboration task is being terminated.
   * 
   * *   TERMINATED: The collaboration task is terminated.
   * 
   * *   PENDING: The collaboration task is pending to be executed.
   * 
   * @example
   * PENDING
   */
  coordinateStatus?: string;
  /**
   * @remarks
   * The ticket that is used to establish the Adaptive Streaming Protocol (ASP)-based connection.
   * 
   * @example
   * 1VDQ0VTUw0KW0Rlc2t0b3BdDQpHV1Rva2VuPTAwTzgwL3liS25zUEVGdkF6eU1Pc1ExeHZWdmk4VEE3NFJvU1V1d0dPYm1BNkNJWklDMHVNQklWcjU2NS80S0ZQekQ4aGFTR0ZHelZqMTFGbkRpWWgvUFF1Zm1xSXNGdFRFNFRWMExJNit3TkU0L2RMb04wNXBBSE5Tc3M4dWFXY3lwWE****
   */
  coordinateTicket?: string;
  /**
   * @remarks
   * The type of the initiator.
   * 
   * Valid values:
   * 
   * *   ADMIN_INITIATE_FORCE: The administrator forcibly initiates the collaboration request.
   * 
   * *   ADMIN_INITIATE: The administrator initiates the collaboration request.
   * 
   * *   COORDINATOR_INITIATE_FORCE: The coordinator forcibly initiates the collaboration request.
   * 
   * @example
   * COORDINATOR_INITIATE_FORCE
   */
  initiatorType?: string;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account of the end user.
   * 
   * @example
   * alice
   */
  ownerUserId?: string;
  /**
   * @remarks
   * The ID of the cloud desktop.
   * 
   * @example
   * ecd-96vi03f9emqnl****
   */
  resourceId?: string;
  /**
   * @remarks
   * The name of the cloud desktop.
   * 
   * @example
   * TestDesktop
   */
  resourceName?: string;
  static names(): { [key: string]: string } {
    return {
      coId: 'CoId',
      coordinateStatus: 'CoordinateStatus',
      coordinateTicket: 'CoordinateTicket',
      initiatorType: 'InitiatorType',
      ownerUserId: 'OwnerUserId',
      resourceId: 'ResourceId',
      resourceName: 'ResourceName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      coId: 'string',
      coordinateStatus: 'string',
      coordinateTicket: 'string',
      initiatorType: 'string',
      ownerUserId: 'string',
      resourceId: 'string',
      resourceName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BindConfigGroupRequestResourceInfos extends $dara.Model {
  /**
   * @example
   * CLOUD_DESKTOP
   */
  productType?: string;
  /**
   * @example
   * ecd-1bo4xotjvwyon****
   */
  resourceId?: string;
  /**
   * @example
   * cn-hangzhou
   */
  resourceRegionId?: string;
  /**
   * @example
   * CLOUD_DESKTOP
   */
  resourceType?: string;
  static names(): { [key: string]: string } {
    return {
      productType: 'ProductType',
      resourceId: 'ResourceId',
      resourceRegionId: 'ResourceRegionId',
      resourceType: 'ResourceType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      productType: 'string',
      resourceId: 'string',
      resourceRegionId: 'string',
      resourceType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CopyCdsFileResponseBodyCopyCdsFileModel extends $dara.Model {
  /**
   * @remarks
   * The ID of the asynchronous task. This parameter is not returned if you copy a file. This parameter is returned if you copy a folder in the backend in an asynchronous manner. You can call the GetAsyncTask operation to obtain the ID and details of an asynchronous task.
   * 
   * @example
   * 4221bf6e6ab43a255edc4463bffa6f5f5d31****
   */
  asyncTaskId?: string;
  /**
   * @remarks
   * The ID of the copied file or folder.
   * 
   * @example
   * 6400727cb878821bcb414615a609b4072463****
   */
  fileId?: string;
  static names(): { [key: string]: string } {
    return {
      asyncTaskId: 'AsyncTaskId',
      fileId: 'FileId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncTaskId: 'string',
      fileId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateADConnectorDirectoryResponseBodyAdConnectors extends $dara.Model {
  /**
   * @remarks
   * The connection address.
   * 
   * @example
   * ``127.0.**.**``
   */
  address?: string;
  static names(): { [key: string]: string } {
    return {
      address: 'Address',
    };
  }

  static types(): { [key: string]: any } {
    return {
      address: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCdsFileResponseBodyFileModel extends $dara.Model {
  fileId?: string;
  uploadId?: string;
  uploadUrl?: string;
  static names(): { [key: string]: string } {
    return {
      fileId: 'FileId',
      uploadId: 'UploadId',
      uploadUrl: 'UploadUrl',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileId: 'string',
      uploadId: 'string',
      uploadUrl: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictCds extends $dara.Model {
  cdsId?: string;
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder extends $dara.Model {
  cdsId?: string;
  orderId?: string;
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      orderId: 'OrderId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      orderId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCloudDriveServiceResponseBodyConflictCdsAndOrder extends $dara.Model {
  conflictCds?: CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictCds[];
  conflictOrder?: CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder[];
  static names(): { [key: string]: string } {
    return {
      conflictCds: 'ConflictCds',
      conflictOrder: 'ConflictOrder',
    };
  }

  static types(): { [key: string]: any } {
    return {
      conflictCds: { 'type': 'array', 'itemType': CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictCds },
      conflictOrder: { 'type': 'array', 'itemType': CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder },
    };
  }

  validate() {
    if(Array.isArray(this.conflictCds)) {
      $dara.Model.validateArray(this.conflictCds);
    }
    if(Array.isArray(this.conflictOrder)) {
      $dara.Model.validateArray(this.conflictOrder);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateConfigGroupRequestConfigTimers extends $dara.Model {
  /**
   * @example
   * true
   */
  allowClientSetting?: boolean;
  /**
   * @example
   * 0 0 16 ? * 1,2,3,4,5,6,7
   */
  cronExpression?: string;
  /**
   * @example
   * true
   */
  enforce?: boolean;
  /**
   * @example
   * 10
   */
  interval?: number;
  /**
   * @example
   * Shutdown
   */
  operationType?: string;
  processWhitelist?: string[];
  /**
   * @example
   * RESET_TYPE_SYSTEM
   */
  resetType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * TIMER_BOOT
   */
  timerType?: string;
  /**
   * @example
   * Standard
   */
  triggerType?: string;
  static names(): { [key: string]: string } {
    return {
      allowClientSetting: 'AllowClientSetting',
      cronExpression: 'CronExpression',
      enforce: 'Enforce',
      interval: 'Interval',
      operationType: 'OperationType',
      processWhitelist: 'ProcessWhitelist',
      resetType: 'ResetType',
      timerType: 'TimerType',
      triggerType: 'TriggerType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allowClientSetting: 'boolean',
      cronExpression: 'string',
      enforce: 'boolean',
      interval: 'number',
      operationType: 'string',
      processWhitelist: { 'type': 'array', 'itemType': 'string' },
      resetType: 'string',
      timerType: 'string',
      triggerType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.processWhitelist)) {
      $dara.Model.validateArray(this.processWhitelist);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopGroupRequestTag extends $dara.Model {
  /**
   * @remarks
   * The key of the tag. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`. You cannot specify an empty string as a tag key.
   * 
   * This parameter is required.
   * 
   * @example
   * TestKey
   */
  key?: string;
  /**
   * @remarks
   * The value of the tag. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with `acs:` and cannot contain `http://` or `https://`.
   * 
   * This parameter is required.
   * 
   * @example
   * TestValue
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopOversoldGroupResponseBodyData extends $dara.Model {
  orderId?: number;
  oversoldGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      oversoldGroupId: 'OversoldGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      oversoldGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsRequestBundleModels extends $dara.Model {
  /**
   * @remarks
   * The number of cloud computers that you want to create. Valid values: 1 to 300. Default value: null.
   * 
   * @example
   * 1
   */
  amount?: number;
  /**
   * @remarks
   * The ID of a cloud computer template.
   * 
   * @example
   * b-je9hani001wfn****
   */
  bundleId?: string;
  /**
   * @remarks
   * The name of the cloud computer. The name must meet the following requirements:
   * 
   * *   The name must be 1 to 64 characters in length.
   * *   The name must start with a letter but cannot start with `http://` or `https://`.
   * *   The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
   * 
   * @example
   * testDesktopName
   */
  desktopName?: string;
  /**
   * @remarks
   * The IDs of the end users to whom the cloud computer are assigned.
   */
  endUserIds?: string[];
  /**
   * @remarks
   * The custom hostnames of the cloud computers. This parameter is valid only if the office network is an AD office network and the operating system type of the cloud computers is Windows.
   * 
   * The hostnames must meet the following requirements:
   * 
   * *   The hostnames must be 2 to 15 characters in length.
   * *   The hostnames can contain only letters, digits, and hyphens (-). The hostnames cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.
   * 
   * When you create multiple cloud computers, you can use the `name_prefix[begin_number,bits]name_suffix` naming format to name the cloud computers. For example, if you set the value of the Hostname parameter to ecd-[1,4]-test, the hostname of the first cloud computer is ecd-0001-test, the hostname of the second cloud computer is ecd-0002-test, and so on.
   * 
   * *   `name_prefix`: the prefix of the hostname.
   * *   `[begin_number,bits]`: the sequential number in the hostname. The `begin_number` value is the starting digit. Valid values of begin_number: 0 to 999999. Default value: 0. The `bits` value is the number of digits. Valid values: 1 to 6. Default value: 6.
   * *   `name_suffix`: the suffix of the hostname.
   * 
   * @example
   * testhost
   */
  hostname?: string;
  /**
   * @remarks
   * Specifies whether to enable disk encryption.
   * 
   * @example
   * false
   */
  volumeEncryptionEnabled?: boolean;
  /**
   * @remarks
   * The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.
   * 
   * @example
   * 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
   */
  volumeEncryptionKey?: string;
  static names(): { [key: string]: string } {
    return {
      amount: 'Amount',
      bundleId: 'BundleId',
      desktopName: 'DesktopName',
      endUserIds: 'EndUserIds',
      hostname: 'Hostname',
      volumeEncryptionEnabled: 'VolumeEncryptionEnabled',
      volumeEncryptionKey: 'VolumeEncryptionKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: 'number',
      bundleId: 'string',
      desktopName: 'string',
      endUserIds: { 'type': 'array', 'itemType': 'string' },
      hostname: 'string',
      volumeEncryptionEnabled: 'boolean',
      volumeEncryptionKey: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.endUserIds)) {
      $dara.Model.validateArray(this.endUserIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsRequestDesktopAttachment extends $dara.Model {
  dataDiskCategory?: string;
  dataDiskPerLevel?: string;
  dataDiskSize?: number;
  defaultLanguage?: string;
  desktopType?: string;
  imageId?: string;
  systemDiskCategory?: string;
  systemDiskPerLevel?: string;
  systemDiskSize?: number;
  static names(): { [key: string]: string } {
    return {
      dataDiskCategory: 'DataDiskCategory',
      dataDiskPerLevel: 'DataDiskPerLevel',
      dataDiskSize: 'DataDiskSize',
      defaultLanguage: 'DefaultLanguage',
      desktopType: 'DesktopType',
      imageId: 'ImageId',
      systemDiskCategory: 'SystemDiskCategory',
      systemDiskPerLevel: 'SystemDiskPerLevel',
      systemDiskSize: 'SystemDiskSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataDiskCategory: 'string',
      dataDiskPerLevel: 'string',
      dataDiskSize: 'number',
      defaultLanguage: 'string',
      desktopType: 'string',
      imageId: 'string',
      systemDiskCategory: 'string',
      systemDiskPerLevel: 'string',
      systemDiskSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsRequestDesktopTimers extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to allow the end user to configure the scheduled task.
   * 
   * @example
   * true
   */
  allowClientSetting?: boolean;
  /**
   * @remarks
   * The cron expression for the scheduled task.
   * 
   * >  The time must be in UTC. For example, for 24:00 (UTC+8), you must set the value to 0 0 16 ? \\* 1,2,3,4,5,6,7
   * 
   * @example
   * 0 40 7 ? * 1,2,3,4,5,6,7
   */
  cronExpression?: string;
  /**
   * @remarks
   * Specifies whether to forcibly execute the scheduled task.
   * 
   * Valid values:
   * 
   * *   true: forcibly executes the scheduled task regardless of the status and connection of the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false: does not forcibly execute the scheduled task.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * True
   */
  enforce?: boolean;
  /**
   * @remarks
   * The interval at which cloud computers are created. Unit: minutes.
   * 
   * @example
   * 10
   */
  interval?: number;
  /**
   * @remarks
   * The operations that scheduled tasks support. This parameter is valid only when TimerType is set to NoConnect.
   * 
   * Valid values:
   * 
   * *   Hibernate: hibernates the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Shutdown: stops the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Shutdown
   */
  operationType?: string;
  /**
   * @remarks
   * The reset type of the cloud computers.
   * 
   * Valid values:
   * 
   * *   RESET_TYPE_SYSTEM: resets the system disks.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   RESET_TYPE_BOTH: resets the system disks and data disks.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * RESET_TYPE_SYSTEM
   */
  resetType?: string;
  /**
   * @remarks
   * The type of the scheduled task.
   * 
   * @example
   * NoOperationReboot
   */
  timerType?: string;
  static names(): { [key: string]: string } {
    return {
      allowClientSetting: 'AllowClientSetting',
      cronExpression: 'CronExpression',
      enforce: 'Enforce',
      interval: 'Interval',
      operationType: 'OperationType',
      resetType: 'ResetType',
      timerType: 'TimerType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allowClientSetting: 'boolean',
      cronExpression: 'string',
      enforce: 'boolean',
      interval: 'number',
      operationType: 'string',
      resetType: 'string',
      timerType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsRequestMonthDesktopSetting extends $dara.Model {
  /**
   * @remarks
   * > This parameter is not publicly available.
   * 
   * @example
   * null
   */
  buyerId?: number;
  /**
   * @remarks
   * > This parameter is not publicly available.
   * 
   * @example
   * null
   */
  desktopId?: string;
  /**
   * @remarks
   * > This parameter is not publicly available.
   * 
   * @example
   * null
   */
  useDuration?: number;
  static names(): { [key: string]: string } {
    return {
      buyerId: 'BuyerId',
      desktopId: 'DesktopId',
      useDuration: 'UseDuration',
    };
  }

  static types(): { [key: string]: any } {
    return {
      buyerId: 'number',
      desktopId: 'string',
      useDuration: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsRequestTag extends $dara.Model {
  /**
   * @remarks
   * The key of the tag. You can specify 1 to 20 keys for a tag.
   * 
   * @example
   * TestKey
   */
  key?: string;
  /**
   * @remarks
   * The value of the tag. You can specify 1 to 20 values for a tag.
   * 
   * @example
   * TestValue
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsRequestUserCommands extends $dara.Model {
  /**
   * @remarks
   * The command content.
   * 
   * @example
   * bmV3LWl0ZW0gZDpcdGVzdF91c2VyX2NvbW1hbmRzLnR4dCAtdHlwZSBm****
   */
  content?: string;
  /**
   * @remarks
   * The encoding mode of the command content.
   * 
   * Valid values:
   * 
   * *   Base64: encodes the command content in Base64.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PlainText: does not encode the command content.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Base64
   */
  contentEncoding?: string;
  /**
   * @remarks
   * The language type of the command.
   * 
   * Valid values:
   * 
   * *   RunPowerShellScript: PowerShell commands (applicable to Windows cloud computers).
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   RunShellScript: shell commands (applicable to Linux cloud computers).
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   RunBatScript: batch commands (applicable to Windows cloud computers).
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * RunPowerShellScript
   */
  contentType?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'Content',
      contentEncoding: 'ContentEncoding',
      contentType: 'ContentType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      contentEncoding: 'string',
      contentType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsShrinkRequestBundleModels extends $dara.Model {
  /**
   * @remarks
   * The number of cloud computers that you want to create. Valid values: 1 to 300. Default value: null.
   * 
   * @example
   * 1
   */
  amount?: number;
  /**
   * @remarks
   * The ID of a cloud computer template.
   * 
   * @example
   * b-je9hani001wfn****
   */
  bundleId?: string;
  /**
   * @remarks
   * The name of the cloud computer. The name must meet the following requirements:
   * 
   * *   The name must be 1 to 64 characters in length.
   * *   The name must start with a letter but cannot start with `http://` or `https://`.
   * *   The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
   * 
   * @example
   * testDesktopName
   */
  desktopName?: string;
  /**
   * @remarks
   * The IDs of the end users to whom the cloud computer are assigned.
   */
  endUserIds?: string[];
  /**
   * @remarks
   * The custom hostnames of the cloud computers. This parameter is valid only if the office network is an AD office network and the operating system type of the cloud computers is Windows.
   * 
   * The hostnames must meet the following requirements:
   * 
   * *   The hostnames must be 2 to 15 characters in length.
   * *   The hostnames can contain only letters, digits, and hyphens (-). The hostnames cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.
   * 
   * When you create multiple cloud computers, you can use the `name_prefix[begin_number,bits]name_suffix` naming format to name the cloud computers. For example, if you set the value of the Hostname parameter to ecd-[1,4]-test, the hostname of the first cloud computer is ecd-0001-test, the hostname of the second cloud computer is ecd-0002-test, and so on.
   * 
   * *   `name_prefix`: the prefix of the hostname.
   * *   `[begin_number,bits]`: the sequential number in the hostname. The `begin_number` value is the starting digit. Valid values of begin_number: 0 to 999999. Default value: 0. The `bits` value is the number of digits. Valid values: 1 to 6. Default value: 6.
   * *   `name_suffix`: the suffix of the hostname.
   * 
   * @example
   * testhost
   */
  hostname?: string;
  /**
   * @remarks
   * Specifies whether to enable disk encryption.
   * 
   * @example
   * false
   */
  volumeEncryptionEnabled?: boolean;
  /**
   * @remarks
   * The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.
   * 
   * @example
   * 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
   */
  volumeEncryptionKey?: string;
  static names(): { [key: string]: string } {
    return {
      amount: 'Amount',
      bundleId: 'BundleId',
      desktopName: 'DesktopName',
      endUserIds: 'EndUserIds',
      hostname: 'Hostname',
      volumeEncryptionEnabled: 'VolumeEncryptionEnabled',
      volumeEncryptionKey: 'VolumeEncryptionKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: 'number',
      bundleId: 'string',
      desktopName: 'string',
      endUserIds: { 'type': 'array', 'itemType': 'string' },
      hostname: 'string',
      volumeEncryptionEnabled: 'boolean',
      volumeEncryptionKey: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.endUserIds)) {
      $dara.Model.validateArray(this.endUserIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsShrinkRequestDesktopTimers extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to allow the end user to configure the scheduled task.
   * 
   * @example
   * true
   */
  allowClientSetting?: boolean;
  /**
   * @remarks
   * The cron expression for the scheduled task.
   * 
   * >  The time must be in UTC. For example, for 24:00 (UTC+8), you must set the value to 0 0 16 ? \\* 1,2,3,4,5,6,7
   * 
   * @example
   * 0 40 7 ? * 1,2,3,4,5,6,7
   */
  cronExpression?: string;
  /**
   * @remarks
   * Specifies whether to forcibly execute the scheduled task.
   * 
   * Valid values:
   * 
   * *   true: forcibly executes the scheduled task regardless of the status and connection of the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false: does not forcibly execute the scheduled task.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * True
   */
  enforce?: boolean;
  /**
   * @remarks
   * The interval at which cloud computers are created. Unit: minutes.
   * 
   * @example
   * 10
   */
  interval?: number;
  /**
   * @remarks
   * The operations that scheduled tasks support. This parameter is valid only when TimerType is set to NoConnect.
   * 
   * Valid values:
   * 
   * *   Hibernate: hibernates the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Shutdown: stops the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Shutdown
   */
  operationType?: string;
  /**
   * @remarks
   * The reset type of the cloud computers.
   * 
   * Valid values:
   * 
   * *   RESET_TYPE_SYSTEM: resets the system disks.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   RESET_TYPE_BOTH: resets the system disks and data disks.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * RESET_TYPE_SYSTEM
   */
  resetType?: string;
  /**
   * @remarks
   * The type of the scheduled task.
   * 
   * @example
   * NoOperationReboot
   */
  timerType?: string;
  static names(): { [key: string]: string } {
    return {
      allowClientSetting: 'AllowClientSetting',
      cronExpression: 'CronExpression',
      enforce: 'Enforce',
      interval: 'Interval',
      operationType: 'OperationType',
      resetType: 'ResetType',
      timerType: 'TimerType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allowClientSetting: 'boolean',
      cronExpression: 'string',
      enforce: 'boolean',
      interval: 'number',
      operationType: 'string',
      resetType: 'string',
      timerType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsShrinkRequestMonthDesktopSetting extends $dara.Model {
  /**
   * @remarks
   * > This parameter is not publicly available.
   * 
   * @example
   * null
   */
  buyerId?: number;
  /**
   * @remarks
   * > This parameter is not publicly available.
   * 
   * @example
   * null
   */
  desktopId?: string;
  /**
   * @remarks
   * > This parameter is not publicly available.
   * 
   * @example
   * null
   */
  useDuration?: number;
  static names(): { [key: string]: string } {
    return {
      buyerId: 'BuyerId',
      desktopId: 'DesktopId',
      useDuration: 'UseDuration',
    };
  }

  static types(): { [key: string]: any } {
    return {
      buyerId: 'number',
      desktopId: 'string',
      useDuration: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsShrinkRequestTag extends $dara.Model {
  /**
   * @remarks
   * The key of the tag. You can specify 1 to 20 keys for a tag.
   * 
   * @example
   * TestKey
   */
  key?: string;
  /**
   * @remarks
   * The value of the tag. You can specify 1 to 20 values for a tag.
   * 
   * @example
   * TestValue
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsShrinkRequestUserCommands extends $dara.Model {
  /**
   * @remarks
   * The command content.
   * 
   * @example
   * bmV3LWl0ZW0gZDpcdGVzdF91c2VyX2NvbW1hbmRzLnR4dCAtdHlwZSBm****
   */
  content?: string;
  /**
   * @remarks
   * The encoding mode of the command content.
   * 
   * Valid values:
   * 
   * *   Base64: encodes the command content in Base64.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PlainText: does not encode the command content.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Base64
   */
  contentEncoding?: string;
  /**
   * @remarks
   * The language type of the command.
   * 
   * Valid values:
   * 
   * *   RunPowerShellScript: PowerShell commands (applicable to Windows cloud computers).
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   RunShellScript: shell commands (applicable to Linux cloud computers).
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   RunBatScript: batch commands (applicable to Windows cloud computers).
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * RunPowerShellScript
   */
  contentType?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'Content',
      contentEncoding: 'ContentEncoding',
      contentType: 'ContentType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      contentEncoding: 'string',
      contentType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePolicyGroupRequestAuthorizeAccessPolicyRule extends $dara.Model {
  /**
   * @remarks
   * The IPv4 CIDR block that you want to access from the client. The value is an IPv4 CIDR block.
   * 
   * @example
   * 47.100.XX.XX/16
   */
  cidrIp?: string;
  /**
   * @remarks
   * The description of the client IP address whitelist.
   * 
   * @example
   * North China Branch
   */
  description?: string;
  static names(): { [key: string]: string } {
    return {
      cidrIp: 'CidrIp',
      description: 'Description',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cidrIp: 'string',
      description: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePolicyGroupRequestAuthorizeSecurityPolicyRule extends $dara.Model {
  /**
   * @remarks
   * The IPv4 CIDR block of the security group rule.
   * 
   * @example
   * 47.100.XX.XX/16
   */
  cidrIp?: string;
  /**
   * @remarks
   * The description of the security group rule.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The protocol type of the security group rule.
   * 
   * Valid values:
   * 
   * *   TCP
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   UDP
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ALL: all protocols
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   GRE
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ICMP: ICMP (IPv4)
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * tcp
   */
  ipProtocol?: string;
  /**
   * @remarks
   * The authorization policy of the security group rule.
   * 
   * Valid values:
   * 
   * *   drop: denies all access requests
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     If no denied messages are returned, the requests timed out or failed.
   * 
   *     <!-- -->
   * 
   * *   accept: accepts all access requests
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     This value is the default value.
   * 
   *     <!-- -->
   * 
   * @example
   * accept
   */
  policy?: string;
  /**
   * @remarks
   * The port range of the security group rule. The value range of this parameter varies based on the value of the IpProtocol parameter.
   * 
   * *   If you set the IpProtocol parameter to TCP or UDP, the value range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
   * *   If you set the IpProtocol parameter to ICMP, the start port number and the end port number are -1/-1.
   * *   If you set the IpProtocol parameter to GRE, the start port number and the end port number are -1/-1.
   * *   If you set the IpProtocol parameter to ALL, the start port number and the end port number are -1/-1.
   * 
   * For more information about the common ports of applications, see [Common ports](https://help.aliyun.com/document_detail/40724.html).
   * 
   * @example
   * 22/22
   */
  portRange?: string;
  /**
   * @remarks
   * The priority of the security group rule. A smaller value specifies a higher priority.\\
   * Valid values: 1 to 60.\\
   * Default value: 1.
   * 
   * @example
   * 1
   */
  priority?: string;
  /**
   * @remarks
   * The direction of the security group rule.
   * 
   * Valid values:
   * 
   * *   outflow: outbound
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   inflow: inbound
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * inflow
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      cidrIp: 'CidrIp',
      description: 'Description',
      ipProtocol: 'IpProtocol',
      policy: 'Policy',
      portRange: 'PortRange',
      priority: 'Priority',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cidrIp: 'string',
      description: 'string',
      ipProtocol: 'string',
      policy: 'string',
      portRange: 'string',
      priority: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePolicyGroupRequestClientType extends $dara.Model {
  /**
   * @remarks
   * The type of the client.
   * 
   * > By default, if you do not specify the ClientType parameter, all types of clients can be used to connect to cloud desktops.
   * 
   * Valid values:
   * 
   * *   html5: web clients
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   android: Android clients
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   linux: Alibaba Cloud Workspace clients
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ios: iOS clients
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   windows: Windows clients
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   macos: macOS clients
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * windows
   */
  clientType?: string;
  /**
   * @remarks
   * Specifies whether a specific client type can be used to connect to the cloud desktop.
   * 
   * > By default, if you do not specify the ClientType parameter, all types of clients can be used to connect to cloud desktops.
   * 
   * Valid values:
   * 
   * *   OFF: Clients of the specified type cannot be used to connect to cloud desktops.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ON: Clients of the specified type can be used to connect to cloud desktops.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * ON
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      clientType: 'ClientType',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientType: 'string',
      status: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePolicyGroupRequestDeviceRedirects extends $dara.Model {
  deviceType?: string;
  redirectType?: string;
  static names(): { [key: string]: string } {
    return {
      deviceType: 'DeviceType',
      redirectType: 'RedirectType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deviceType: 'string',
      redirectType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePolicyGroupRequestDeviceRules extends $dara.Model {
  deviceName?: string;
  devicePid?: string;
  deviceType?: string;
  deviceVid?: string;
  optCommand?: string;
  redirectType?: string;
  static names(): { [key: string]: string } {
    return {
      deviceName: 'DeviceName',
      devicePid: 'DevicePid',
      deviceType: 'DeviceType',
      deviceVid: 'DeviceVid',
      optCommand: 'OptCommand',
      redirectType: 'RedirectType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deviceName: 'string',
      devicePid: 'string',
      deviceType: 'string',
      deviceVid: 'string',
      optCommand: 'string',
      redirectType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePolicyGroupRequestDomainResolveRule extends $dara.Model {
  /**
   * @remarks
   * The description of the policy.
   * 
   * @example
   * system policy
   */
  description?: string;
  /**
   * @remarks
   * The domain name.
   * 
   * @example
   * *.baidu.com
   */
  domain?: string;
  /**
   * @remarks
   * Specifies whether to allow the policy.
   * 
   * Valid values:
   * 
   * *   allow
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   block
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * allow
   */
  policy?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      domain: 'Domain',
      policy: 'Policy',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      domain: 'string',
      policy: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePolicyGroupRequestUsbSupplyRedirectRule extends $dara.Model {
  /**
   * @remarks
   * The description of the rule.
   * 
   * @example
   * Test rule
   */
  description?: string;
  /**
   * @remarks
   * The class of the device. If you set the `usbRuleType` parameter to 1, you must specify this parameter. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).
   * 
   * @example
   * 0Eh
   */
  deviceClass?: string;
  /**
   * @remarks
   * The subclass of the device. If you set the `usbRuleType` parameter to 1, you must specify this parameter. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).
   * 
   * @example
   * xxh
   */
  deviceSubclass?: string;
  /**
   * @remarks
   * The ID of the service.
   * 
   * @example
   * 08**
   */
  productId?: string;
  /**
   * @remarks
   * The type of USB redirection.
   * 
   * Valid values:
   * 
   * *   1: allows USB redirection
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   2: forbids USB redirection
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * 1
   */
  usbRedirectType?: number;
  /**
   * @remarks
   * The type of the USB redirection rule.
   * 
   * Valid values:
   * 
   * *   1: by device class
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   2: by device vendor
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * 1
   */
  usbRuleType?: number;
  /**
   * @remarks
   * The ID of the vendor. For more information, see [Valid USB Vendor IDs (VIDs)](https://www.usb.org/sites/default/files/vendor_ids032322.pdf_1.pdf).
   * 
   * @example
   * 04**
   */
  vendorId?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      deviceClass: 'DeviceClass',
      deviceSubclass: 'DeviceSubclass',
      productId: 'ProductId',
      usbRedirectType: 'UsbRedirectType',
      usbRuleType: 'UsbRuleType',
      vendorId: 'VendorId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      deviceClass: 'string',
      deviceSubclass: 'string',
      productId: 'string',
      usbRedirectType: 'number',
      usbRuleType: 'number',
      vendorId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAclEntriesResponseBodyAclEntries extends $dara.Model {
  /**
   * @remarks
   * The ACL type.
   * 
   * Valid values:
   * 
   * *   allow: whitelist
   * *   disable: blacklist
   * 
   * @example
   * allow
   */
  policy?: string;
  /**
   * @remarks
   * The ID of the instance to which the ACL applies, such as an office network ID or a cloud computer ID.
   * 
   * @example
   * ecd-fsafeweh***
   */
  sourceId?: string;
  /**
   * @remarks
   * The granularity of the ACL.
   * 
   * Valid values:
   * 
   * *   desktop: cloud computer
   * *   vpc: office network
   * 
   * @example
   * desktop
   */
  sourceType?: string;
  static names(): { [key: string]: string } {
    return {
      policy: 'Policy',
      sourceId: 'SourceId',
      sourceType: 'SourceType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      policy: 'string',
      sourceId: 'string',
      sourceType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies extends $dara.Model {
  /**
   * @remarks
   * The time when the automatic snapshot policy was created. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-mm-ddthh:mm:ssz` format. The time is displayed in UTC.
   * 
   * @example
   * 2023-01-11T09:14:00Z
   */
  creationTime?: string;
  /**
   * @remarks
   * The cron expression that specifies when Elastic Desktop Service creates snapshots on the cloud computers.
   * 
   * @example
   * 0 0 5,7 ? * 2/2
   */
  cronExpression?: string;
  /**
   * @remarks
   * The number of cloud computers to which the automatic snapshot policy is applied.
   * 
   * @example
   * 5
   */
  desktopNum?: number;
  /**
   * @remarks
   * The ID of the automatic snapshot policy.
   * 
   * @example
   * sp-3e3bmfcdkjfl1****
   */
  policyId?: string;
  /**
   * @remarks
   * The name of the automatic snapshot policy.
   * 
   * @example
   * snapshot01
   */
  policyName?: string;
  /**
   * @remarks
   * The ID of the region to which the automatic snapshot policy belongs.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The retention period of the automatic snapshots. Unit: days. Valid values: 1 to 180.
   * 
   * @example
   * 3
   */
  retentionDays?: string;
  /**
   * @remarks
   * The status of the automatic snapshot policy.
   * 
   * Valid values:
   * 
   * *   Expire: The automatic snapshot policy cannot be used because you have overdue payments in your account.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Normal: The automatic snapshot policy is normal.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Normal
   */
  status?: string;
  /**
   * @remarks
   * The points in time at which the auto snapshots were created.
   * 
   * The parameter values are a JSON array. Example: `["0", "1", ... "23"]`. A maximum of 24 points in time are returned. The points in time are separated with commas (,).
   * 
   * @example
   * ["17","18"]
   */
  timePoints?: string;
  static names(): { [key: string]: string } {
    return {
      creationTime: 'CreationTime',
      cronExpression: 'CronExpression',
      desktopNum: 'DesktopNum',
      policyId: 'PolicyId',
      policyName: 'PolicyName',
      regionId: 'RegionId',
      retentionDays: 'RetentionDays',
      status: 'Status',
      timePoints: 'TimePoints',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creationTime: 'string',
      cronExpression: 'string',
      desktopNum: 'number',
      policyId: 'string',
      policyName: 'string',
      regionId: 'string',
      retentionDays: 'string',
      status: 'string',
      timePoints: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBundlesResponseBodyBundlesDesktopTypeAttribute extends $dara.Model {
  /**
   * @remarks
   * The number of vCPUs.
   * 
   * @example
   * 10
   */
  cpuCount?: number;
  /**
   * @remarks
   * The number of GPUs.
   * 
   * @example
   * 0.5
   */
  gpuCount?: number;
  /**
   * @remarks
   * The GPU type.
   * 
   * @example
   * NVIDIA T4
   */
  gpuSpec?: string;
  /**
   * @remarks
   * The memory size. Unit: MiB.
   * 
   * @example
   * 47104
   */
  memorySize?: number;
  static names(): { [key: string]: string } {
    return {
      cpuCount: 'CpuCount',
      gpuCount: 'GpuCount',
      gpuSpec: 'GpuSpec',
      memorySize: 'MemorySize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cpuCount: 'number',
      gpuCount: 'number',
      gpuSpec: 'string',
      memorySize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBundlesResponseBodyBundlesDisks extends $dara.Model {
  /**
   * @remarks
   * The PL of the disk.
   * 
   * Valid values:
   * 
   * *   PL1
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PL0
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PL3
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PL2
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * PL0
   */
  diskPerformanceLevel?: string;
  /**
   * @remarks
   * The size of the disk. Unit: GiB.
   * 
   * @example
   * 150
   */
  diskSize?: number;
  /**
   * @remarks
   * The type of the disk.
   * 
   * Valid values:
   * 
   * *   SYSTEM: system disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DATA: data disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * SYSTEM
   */
  diskType?: string;
  static names(): { [key: string]: string } {
    return {
      diskPerformanceLevel: 'DiskPerformanceLevel',
      diskSize: 'DiskSize',
      diskType: 'DiskType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      diskPerformanceLevel: 'string',
      diskSize: 'number',
      diskType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBundlesResponseBodyBundles extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer template.
   * 
   * @example
   * bundle_ecd_graphics.2xlarge_s15d15_win2019
   */
  bundleId?: string;
  /**
   * @remarks
   * The name of the cloud computer template.
   * 
   * @example
   * Advanced graphics with Windows 2019
   */
  bundleName?: string;
  /**
   * @remarks
   * The type of the cloud computer template.
   * 
   * Valid values:
   * 
   * *   SYSTEM: system template
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CUSTOM: custom template
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * SYSTEM
   */
  bundleType?: string;
  /**
   * @remarks
   * The time when the cloud computer template was created.
   * 
   * @example
   * 2021-09-30T06:09Z
   */
  creationTime?: string;
  dataDiskCategory?: string;
  /**
   * @remarks
   * The description of the cloud computer template.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The instance type of the cloud computer.
   * 
   * @example
   * ecd.graphics.2xlarge
   */
  desktopType?: string;
  /**
   * @remarks
   * The details of the cloud computer instance type.
   */
  desktopTypeAttribute?: DescribeBundlesResponseBodyBundlesDesktopTypeAttribute;
  /**
   * @remarks
   * The instance family of the cloud computer.
   * 
   * Valid values:
   * 
   * *   eds.graphics: graphical instance family
   * *   eds.hf: instance family with a high clock speed
   * *   eds.general: general-purpose instance family
   * 
   * @example
   * eds.general
   */
  desktopTypeFamily?: string;
  /**
   * @remarks
   * Details of the disks.
   */
  disks?: DescribeBundlesResponseBodyBundlesDisks[];
  /**
   * @remarks
   * The image ID.
   * 
   * @example
   * desktopimage-windows-server-2019-64-ch-vgpu
   */
  imageId?: string;
  /**
   * @remarks
   * The image name.
   * 
   * @example
   * Windows server 2019 Chinese
   */
  imageName?: string;
  /**
   * @remarks
   * The status of the image.
   * 
   * @example
   * Available
   */
  imageStatus?: string;
  /**
   * @remarks
   * The OS language of the image.
   * 
   * @example
   * en-US
   */
  language?: string;
  /**
   * @remarks
   * The type of the OS.
   * 
   * Valid values:
   * 
   * *   Linux
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Windows
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Windows
   */
  osType?: string;
  /**
   * @remarks
   * The OS.
   * 
   * Valid values:
   * 
   * *   Ubuntu
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Windows Server 2022
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   UOS
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CentOS
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Windows Server 2019
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Windows Server 2016
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Windows Server 2019
   */
  platform?: string;
  /**
   * @remarks
   * The protocol type.
   * 
   * Valid values:
   * 
   * *   HDX: HDX protocol
   * *   ASP: in-house ASP
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  /**
   * @remarks
   * The session type.
   * 
   * Valid values:
   * 
   * *   0: single-session
   * *   1: multi-session
   * 
   * @example
   * 0
   */
  sessionType?: string;
  /**
   * @remarks
   * The inventory status of the cloud computer instance type. This parameter is returned only if you set the `CheckStock` parameter to `true`.
   * 
   * @example
   * Sufficient
   */
  stockState?: string;
  systemDiskCategory?: string;
  /**
   * @remarks
   * Indicates whether disk encryption is enabled.
   * 
   * @example
   * false
   */
  volumeEncryptionEnabled?: boolean;
  /**
   * @remarks
   * The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled.
   * 
   * @example
   * 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
   */
  volumeEncryptionKey?: string;
  static names(): { [key: string]: string } {
    return {
      bundleId: 'BundleId',
      bundleName: 'BundleName',
      bundleType: 'BundleType',
      creationTime: 'CreationTime',
      dataDiskCategory: 'DataDiskCategory',
      description: 'Description',
      desktopType: 'DesktopType',
      desktopTypeAttribute: 'DesktopTypeAttribute',
      desktopTypeFamily: 'DesktopTypeFamily',
      disks: 'Disks',
      imageId: 'ImageId',
      imageName: 'ImageName',
      imageStatus: 'ImageStatus',
      language: 'Language',
      osType: 'OsType',
      platform: 'Platform',
      protocolType: 'ProtocolType',
      sessionType: 'SessionType',
      stockState: 'StockState',
      systemDiskCategory: 'SystemDiskCategory',
      volumeEncryptionEnabled: 'VolumeEncryptionEnabled',
      volumeEncryptionKey: 'VolumeEncryptionKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bundleId: 'string',
      bundleName: 'string',
      bundleType: 'string',
      creationTime: 'string',
      dataDiskCategory: 'string',
      description: 'string',
      desktopType: 'string',
      desktopTypeAttribute: DescribeBundlesResponseBodyBundlesDesktopTypeAttribute,
      desktopTypeFamily: 'string',
      disks: { 'type': 'array', 'itemType': DescribeBundlesResponseBodyBundlesDisks },
      imageId: 'string',
      imageName: 'string',
      imageStatus: 'string',
      language: 'string',
      osType: 'string',
      platform: 'string',
      protocolType: 'string',
      sessionType: 'string',
      stockState: 'string',
      systemDiskCategory: 'string',
      volumeEncryptionEnabled: 'boolean',
      volumeEncryptionKey: 'string',
    };
  }

  validate() {
    if(this.desktopTypeAttribute && typeof (this.desktopTypeAttribute as any).validate === 'function') {
      (this.desktopTypeAttribute as any).validate();
    }
    if(Array.isArray(this.disks)) {
      $dara.Model.validateArray(this.disks);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCensResponseBodyCensPackageIds extends $dara.Model {
  /**
   * @remarks
   * The ID of the bandwidth plan that is bound to the CEN instance.
   * 
   * @example
   * cenbwp-4c2zaavbvh5f42****
   */
  packageId?: string;
  static names(): { [key: string]: string } {
    return {
      packageId: 'PackageId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      packageId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCensResponseBodyCensTags extends $dara.Model {
  /**
   * @remarks
   * The key of the tag.
   * 
   * @example
   * testKey
   */
  key?: string;
  /**
   * @remarks
   * The value of the tag.
   * 
   * @example
   * testValue
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCensResponseBodyCens extends $dara.Model {
  /**
   * @remarks
   * The ID of the CEN instance.
   * 
   * @example
   * cen-3gwy16dojz1m65****
   */
  cenId?: string;
  /**
   * @remarks
   * The time when the CEN instance was created.
   * 
   * @example
   * 2021-06-16T08:46Z
   */
  creationTime?: string;
  /**
   * @remarks
   * The description of the CEN instance.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The IPv6 level.
   * 
   * >  IPv6 is not supported.
   * 
   * Valid value:
   * 
   * *   DISABLED
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * DISABLED
   */
  ipv6Level?: string;
  /**
   * @remarks
   * The name of the CEN instance.
   * 
   * @example
   * testCen
   */
  name?: string;
  /**
   * @remarks
   * The bandwidth plans that are bound to the CEN instance.
   */
  packageIds?: DescribeCensResponseBodyCensPackageIds[];
  /**
   * @remarks
   * The tolerated level of CIDR block conflict.
   * 
   * Valid value:
   * 
   * *   REDUCED: CIDR block conflicts are allowed, but the conflicting CIDR blocks cannot be identical.
   * 
   * @example
   * REDUCED
   */
  protectionLevel?: string;
  /**
   * @remarks
   * The status of the CEN instance.
   * 
   * Valid values:
   * 
   * *   Creating
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Active
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Deleting
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Active
   */
  status?: string;
  /**
   * @remarks
   * The tags of the CEN instance.
   */
  tags?: DescribeCensResponseBodyCensTags[];
  static names(): { [key: string]: string } {
    return {
      cenId: 'CenId',
      creationTime: 'CreationTime',
      description: 'Description',
      ipv6Level: 'Ipv6Level',
      name: 'Name',
      packageIds: 'PackageIds',
      protectionLevel: 'ProtectionLevel',
      status: 'Status',
      tags: 'Tags',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cenId: 'string',
      creationTime: 'string',
      description: 'string',
      ipv6Level: 'string',
      name: 'string',
      packageIds: { 'type': 'array', 'itemType': DescribeCensResponseBodyCensPackageIds },
      protectionLevel: 'string',
      status: 'string',
      tags: { 'type': 'array', 'itemType': DescribeCensResponseBodyCensTags },
    };
  }

  validate() {
    if(Array.isArray(this.packageIds)) {
      $dara.Model.validateArray(this.packageIds);
    }
    if(Array.isArray(this.tags)) {
      $dara.Model.validateArray(this.tags);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeClientEventsResponseBodyEvents extends $dara.Model {
  /**
   * @remarks
   * The ID of the Alibaba Cloud account with which the event is associated.
   * 
   * @example
   * 112259558861****
   */
  aliUid?: string;
  /**
   * @remarks
   * The number of bytes that are received.
   * 
   * @example
   * 8665
   */
  bytesReceived?: string;
  /**
   * @remarks
   * The number of bytes that are sent.
   * 
   * @example
   * 2345
   */
  bytesSend?: string;
  /**
   * @remarks
   * The IP address of the client.
   * 
   * @example
   * 100.68.*.*
   */
  clientIp?: string;
  /**
   * @remarks
   * The OS that the client runs.
   * 
   * @example
   * Darwin 17.7.0 x64
   */
  clientOS?: string;
  /**
   * @remarks
   * The client version.
   * 
   * @example
   * 1.0.4 202012021700
   */
  clientVersion?: string;
  description?: string;
  /**
   * @remarks
   * The desktop group ID.
   * 
   * @example
   * dg-kadkdfaf****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The desktop group name.
   * 
   * @example
   * testName
   */
  desktopGroupName?: string;
  /**
   * @remarks
   * The cloud desktop ID.
   * 
   * @example
   * ecd-8fupvkhg0aayu****
   */
  desktopId?: string;
  /**
   * @remarks
   * The IP address of the cloud desktop.
   * 
   * @example
   * 10.10.*.*
   */
  desktopIp?: string;
  /**
   * @remarks
   * The cloud desktop name.
   * 
   * @example
   * test
   */
  desktopName?: string;
  /**
   * @remarks
   * The ID of the directory to which the cloud desktop belongs.
   * 
   * @example
   * cn-hangzhou+dir-bh77qa8nmjot4****
   */
  directoryId?: string;
  /**
   * @remarks
   * The directory type.
   * 
   * @example
   * RAM
   */
  directoryType?: string;
  /**
   * @remarks
   * The information about the end user that connects to the cloud desktop from the EDS client. The information can be a RAM user ID or an AD username.
   * 
   * @example
   * 28961708130834****
   */
  endUserId?: string;
  /**
   * @remarks
   * The event ID.
   * 
   * @example
   * 5651188b-3070-d1cc-5311-75753d59****
   */
  eventId?: string;
  /**
   * @remarks
   * The time when the event occurred.
   * 
   * @example
   * 2020-11-30T06:32:31Z
   */
  eventTime?: string;
  /**
   * @remarks
   * The event type. Valid values:
   * 
   * @example
   * DESKTOP_DISCONNECT
   */
  eventType?: string;
  /**
   * @remarks
   * The ID of the workspace to which the cloud desktop belongs.
   * 
   * @example
   * cn-hangzhou+dir-bh77qa8nmjot4****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The workspace name.
   * 
   * @example
   * test
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The account type of the workspace.
   * 
   * Valid values:
   * 
   * *   SIMPLE: convenience account
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   AD_CONNECTOR: enterprise AD account
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * SIMPLE
   */
  officeSiteType?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The status of the event. If you set the EventType parameter to `DESKTOP_DISCONNECT` or `GET_CONNECTION_TICKET`, this parameter is returned. Valid values:
   * 
   * *   200\\. The value indicates that the request is successful.
   * *   An error message. The value indicates that the request failed. Example: FailedToGetConnectionTicket.
   * 
   * @example
   * 200
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      aliUid: 'AliUid',
      bytesReceived: 'BytesReceived',
      bytesSend: 'BytesSend',
      clientIp: 'ClientIp',
      clientOS: 'ClientOS',
      clientVersion: 'ClientVersion',
      description: 'Description',
      desktopGroupId: 'DesktopGroupId',
      desktopGroupName: 'DesktopGroupName',
      desktopId: 'DesktopId',
      desktopIp: 'DesktopIp',
      desktopName: 'DesktopName',
      directoryId: 'DirectoryId',
      directoryType: 'DirectoryType',
      endUserId: 'EndUserId',
      eventId: 'EventId',
      eventTime: 'EventTime',
      eventType: 'EventType',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      officeSiteType: 'OfficeSiteType',
      regionId: 'RegionId',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      aliUid: 'string',
      bytesReceived: 'string',
      bytesSend: 'string',
      clientIp: 'string',
      clientOS: 'string',
      clientVersion: 'string',
      description: 'string',
      desktopGroupId: 'string',
      desktopGroupName: 'string',
      desktopId: 'string',
      desktopIp: 'string',
      desktopName: 'string',
      directoryId: 'string',
      directoryType: 'string',
      endUserId: 'string',
      eventId: 'string',
      eventTime: 'string',
      eventType: 'string',
      officeSiteId: 'string',
      officeSiteName: 'string',
      officeSiteType: 'string',
      regionId: 'string',
      status: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos extends $dara.Model {
  email?: string;
  endUserId?: string;
  jobNumber?: string;
  nickName?: string;
  phone?: string;
  realNickName?: string;
  remark?: string;
  static names(): { [key: string]: string } {
    return {
      email: 'Email',
      endUserId: 'EndUserId',
      jobNumber: 'JobNumber',
      nickName: 'NickName',
      phone: 'Phone',
      realNickName: 'RealNickName',
      remark: 'Remark',
    };
  }

  static types(): { [key: string]: any } {
    return {
      email: 'string',
      endUserId: 'string',
      jobNumber: 'string',
      nickName: 'string',
      phone: 'string',
      realNickName: 'string',
      remark: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudDriveGroupsResponseBodyCloudDriveGroups extends $dara.Model {
  adminUserIds?: string;
  adminUserInfos?: DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos[];
  /**
   * @remarks
   * The time when the team space was created.
   * 
   * @example
   * 2022-04-11T07:44:21Z
   */
  createTime?: string;
  /**
   * @remarks
   * The workspace ID.
   * 
   * @example
   * cn-hangzhou+dir-959593****
   */
  directoryId?: string;
  /**
   * @remarks
   * The team space ID.
   * 
   * @example
   * sh1234
   */
  driveId?: string;
  /**
   * @remarks
   * The team ID.
   * 
   * @example
   * cg-e70ga4ixp30ur****
   */
  groupId?: string;
  /**
   * @remarks
   * The name of the team space.
   * 
   * @example
   * Test Team 1
   */
  groupName?: string;
  orgId?: string;
  recycleBinSize?: string;
  /**
   * @remarks
   * The team space status. Valid values:
   * 
   * *   enabled
   * *   disabled
   * 
   * Default value: enabled.
   * 
   * @example
   * enabled
   */
  status?: string;
  /**
   * @remarks
   * The total capacity of the team space.
   * 
   * @example
   * 5368709120
   */
  totalSize?: number;
  /**
   * @remarks
   * The capacity of the used space. Unit: bytes.
   * 
   * @example
   * 1024000000
   */
  usedSize?: string;
  static names(): { [key: string]: string } {
    return {
      adminUserIds: 'AdminUserIds',
      adminUserInfos: 'AdminUserInfos',
      createTime: 'CreateTime',
      directoryId: 'DirectoryId',
      driveId: 'DriveId',
      groupId: 'GroupId',
      groupName: 'GroupName',
      orgId: 'OrgId',
      recycleBinSize: 'RecycleBinSize',
      status: 'Status',
      totalSize: 'TotalSize',
      usedSize: 'UsedSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adminUserIds: 'string',
      adminUserInfos: { 'type': 'array', 'itemType': DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos },
      createTime: 'string',
      directoryId: 'string',
      driveId: 'string',
      groupId: 'string',
      groupName: 'string',
      orgId: 'string',
      recycleBinSize: 'string',
      status: 'string',
      totalSize: 'number',
      usedSize: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.adminUserInfos)) {
      $dara.Model.validateArray(this.adminUserInfos);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudDrivePermissionsResponseBodyCloudDrivePermissionModels extends $dara.Model {
  endUsers?: string[];
  /**
   * @example
   * CDS_DOWNLOAD
   */
  permission?: string;
  static names(): { [key: string]: string } {
    return {
      endUsers: 'EndUsers',
      permission: 'Permission',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endUsers: { 'type': 'array', 'itemType': 'string' },
      permission: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.endUsers)) {
      $dara.Model.validateArray(this.endUsers);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudDriveUsersResponseBodyCloudDriveUsers extends $dara.Model {
  /**
   * @example
   * 8
   */
  driveId?: string;
  endUserId?: string;
  /**
   * @example
   * enabled
   */
  status?: string;
  /**
   * @example
   * 10240000
   */
  totalSize?: number;
  /**
   * @example
   * 20490
   */
  usedSize?: number;
  /**
   * @example
   * abc
   */
  userId?: string;
  /**
   * @example
   * abc
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      driveId: 'DriveId',
      endUserId: 'EndUserId',
      status: 'Status',
      totalSize: 'TotalSize',
      usedSize: 'UsedSize',
      userId: 'UserId',
      userName: 'UserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      driveId: 'string',
      endUserId: 'string',
      status: 'string',
      totalSize: 'number',
      usedSize: 'number',
      userId: 'string',
      userName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeConfigGroupResponseBodyData extends $dara.Model {
  /**
   * @example
   * 4
   */
  bindCount?: number;
  bindCountMap?: { [key: string]: number };
  description?: string;
  /**
   * @example
   * ccg-0cid8v30an12****
   */
  groupId?: string;
  name?: string;
  /**
   * @example
   * CLOUD_DESKTOP
   */
  productType?: string;
  /**
   * @example
   * AVAILABLE
   */
  status?: string;
  /**
   * @example
   * Timer
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      bindCount: 'BindCount',
      bindCountMap: 'BindCountMap',
      description: 'Description',
      groupId: 'GroupId',
      name: 'Name',
      productType: 'ProductType',
      status: 'Status',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bindCount: 'number',
      bindCountMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'number' },
      description: 'string',
      groupId: 'string',
      name: 'string',
      productType: 'string',
      status: 'string',
      type: 'string',
    };
  }

  validate() {
    if(this.bindCountMap) {
      $dara.Model.validateMap(this.bindCountMap);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustomizedListHeadersResponseBodyHeaders extends $dara.Model {
  /**
   * @example
   * display
   */
  displayType?: string;
  /**
   * @example
   * pay_type
   */
  headerKey?: string;
  headerName?: string;
  static names(): { [key: string]: string } {
    return {
      displayType: 'DisplayType',
      headerKey: 'HeaderKey',
      headerName: 'HeaderName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      displayType: 'string',
      headerKey: 'string',
      headerName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopGroupSessionsResponseBodySessions extends $dara.Model {
  /**
   * @remarks
   * The IP address of the client.
   * 
   * @example
   * 172.21.XX.XX
   */
  clientIp?: string;
  /**
   * @remarks
   * The OS that the client runs.
   * 
   * @example
   * windows_\\"Windows10Enterprise\\"10.0(Build22000)
   */
  clientOS?: string;
  /**
   * @remarks
   * The version of the client.
   * 
   * @example
   * 2.0.0-R-20221030.08****
   */
  clientVersion?: string;
  /**
   * @remarks
   * The ID of the desktop group.
   * 
   * @example
   * dg-iaqu3bi2xtie****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The name of the desktop group.
   * 
   * @example
   * Test
   */
  desktopGroupName?: string;
  /**
   * @remarks
   * If the session is being established, the value of this parameter indicates the ID of the current cloud desktop. If the session is disconnected, the value of this parameter indicates the ID of the cloud desktop that was most recently connected.
   * 
   * @example
   * ecd-g6t1ukbaea****
   */
  desktopId?: string;
  /**
   * @remarks
   * The point in time when the end user applies for administrator assistance.
   * 
   * @example
   * 1678794261000
   */
  endUserApplyCoordinateTime?: number;
  /**
   * @remarks
   * The ID of the end user.
   * 
   * @example
   * xianqiu
   */
  endUserId?: string;
  /**
   * @remarks
   * The end time of the most recent connection.
   * 
   * @example
   * 2022-08-31 06:56:45
   */
  lastSessionEndTime?: string;
  /**
   * @remarks
   * The start time of the most recent connection.
   * 
   * @example
   * 2022-08-31 06:56:45
   */
  lastSessionStartTime?: string;
  /**
   * @remarks
   * The duration of the most recent session.
   * 
   * @example
   * 120
   */
  latestConnectionTime?: number;
  /**
   * @remarks
   * The ID of the workspace.
   * 
   * @example
   * cn-hangzhou+dir-8904****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The name of the workspace.
   * 
   * @example
   * Test
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The OS. Valid values:
   * 
   * *   Windows
   * *   Linux
   * 
   * @example
   * Windows
   */
  osType?: string;
  /**
   * @remarks
   * The type of the session.
   * 
   * Valid values:
   * 
   * *   0: single-session
   * *   1: multi-session
   * 
   * @example
   * 0
   */
  ownType?: number;
  /**
   * @remarks
   * The type of the protocol.
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  /**
   * @remarks
   * The duration during which the cloud desktop stays in the Idle state.
   * 
   * @example
   * 120
   */
  sessionIdleTime?: number;
  /**
   * @remarks
   * The state of the session.
   * 
   * Valid values:
   * 
   * *   Connected
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Disconnected
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Connected
   */
  sessionStatus?: string;
  /**
   * @remarks
   * The total duration of the sessions.
   * 
   * @example
   * 120
   */
  totalConnectionDuration?: number;
  static names(): { [key: string]: string } {
    return {
      clientIp: 'ClientIp',
      clientOS: 'ClientOS',
      clientVersion: 'ClientVersion',
      desktopGroupId: 'DesktopGroupId',
      desktopGroupName: 'DesktopGroupName',
      desktopId: 'DesktopId',
      endUserApplyCoordinateTime: 'EndUserApplyCoordinateTime',
      endUserId: 'EndUserId',
      lastSessionEndTime: 'LastSessionEndTime',
      lastSessionStartTime: 'LastSessionStartTime',
      latestConnectionTime: 'LatestConnectionTime',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      osType: 'OsType',
      ownType: 'OwnType',
      protocolType: 'ProtocolType',
      sessionIdleTime: 'SessionIdleTime',
      sessionStatus: 'SessionStatus',
      totalConnectionDuration: 'TotalConnectionDuration',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientIp: 'string',
      clientOS: 'string',
      clientVersion: 'string',
      desktopGroupId: 'string',
      desktopGroupName: 'string',
      desktopId: 'string',
      endUserApplyCoordinateTime: 'number',
      endUserId: 'string',
      lastSessionEndTime: 'string',
      lastSessionStartTime: 'string',
      latestConnectionTime: 'number',
      officeSiteId: 'string',
      officeSiteName: 'string',
      osType: 'string',
      ownType: 'number',
      protocolType: 'string',
      sessionIdleTime: 'number',
      sessionStatus: 'string',
      totalConnectionDuration: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopGroupsRequestTag extends $dara.Model {
  /**
   * @remarks
   * The key of the tag. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`. You cannot specify an empty string as a tag key.
   * 
   * @example
   * TestKey
   */
  key?: string;
  /**
   * @remarks
   * The value of the tag. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with `acs:` and cannot contain `http://` or `https://`.
   * 
   * @example
   * TestValue
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopGroupsResponseBodyDesktopGroupsCountPerStatus extends $dara.Model {
  /**
   * @remarks
   * The total number of cloud computers.
   * 
   * @example
   * 10
   */
  count?: number;
  /**
   * @remarks
   * The status of the cloud computer.
   * 
   * Valid values:
   * 
   * *   Stopped
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Starting
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Rebuilding
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Running
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Stopping
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Expired
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Deleted
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Pending
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Running
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      count: 'Count',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: 'number',
      status: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopGroupsResponseBodyDesktopGroupsTags extends $dara.Model {
  /**
   * @remarks
   * The key of the tag.
   * 
   * @example
   * desktop_group_name
   */
  key?: string;
  /**
   * @remarks
   * The value of the tag.
   * 
   * @example
   * ds-dq2mybjr23yw*****
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopGroupsResponseBodyDesktopGroups extends $dara.Model {
  /**
   * @remarks
   * The number of concurrent sessions that is allowed for each cloud computer pool in a multi-session cloud computer pool.
   * 
   * @example
   * 1
   */
  bindAmount?: number;
  /**
   * @remarks
   * *   This parameter has different meanings based on the billing method of the cloud computer pool. For a subscription pool, this parameter specifies the number of cloud computers to purchase in the pool. Valid values: 0 to 200.
   * *   For a pay-as-you-go pool, this parameter specifies the minimum number of cloud computers to create in the pool. Valid values: 0 to `MaxDesktopsCount`. Default value: 1.
   * 
   * @example
   * 5
   */
  buyDesktopsCount?: number;
  /**
   * @remarks
   * The remarks.
   * 
   * @example
   * test
   */
  comments?: string;
  /**
   * @remarks
   * The maximum period of time during which a session is connected. When the specified maximum period of time is reached, the session is automatically disconnected. Unit: milliseconds.
   * 
   * @example
   * 90000
   */
  connectDuration?: number;
  /**
   * @remarks
   * The number of cloud computers in each state.
   */
  countPerStatus?: DescribeDesktopGroupsResponseBodyDesktopGroupsCountPerStatus[];
  /**
   * @remarks
   * The number of vCPUs.
   * 
   * @example
   * 4
   */
  cpu?: number;
  /**
   * @remarks
   * The time when the cloud computer pool was created.
   * 
   * @example
   * 2022-02-17T14:51:07Z
   */
  createTime?: string;
  /**
   * @remarks
   * The Alibaba Cloud account that creates the cloud computer pool.
   * 
   * @example
   * 1007214305******
   */
  creator?: string;
  /**
   * @remarks
   * The category of the user disk.
   * 
   * Valid values:
   * 
   * *   cloud_efficiency: ultra disk
   * *   cloud_ssd: standard SSD
   * *   cloud_essd: enhanced SSD (ESSD)
   * 
   * @example
   * cloud_ssd
   */
  dataDiskCategory?: string;
  /**
   * @remarks
   * The user disk capacity. Unit: GiB.
   * 
   * @example
   * 50
   */
  dataDiskSize?: string;
  /**
   * @remarks
   * The number of cloud computers that are created.
   * 
   * @example
   * 2
   */
  desktopCount?: number;
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The name of the cloud computer pool.
   * 
   * @example
   * test1
   */
  desktopGroupName?: string;
  /**
   * @remarks
   * The cloud computer type. You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/188882.html) operation to query the IDs of the cloud computer types supported by WUYING Workspace.
   * 
   * @example
   * eds.enterprise_office.4c4g
   */
  desktopType?: string;
  /**
   * @remarks
   * The number of users that are granted permissions to use the cloud computer pool.
   * 
   * @example
   * 1
   */
  endUserCount?: number;
  /**
   * @remarks
   * The time when the subscription cloud computer pool expires.
   * 
   * @example
   * 2022-03-17T16:00:00Z
   */
  expiredTime?: string;
  /**
   * @remarks
   * The number of GPUs.
   * 
   * @example
   * 1
   */
  gpuCount?: number;
  /**
   * @remarks
   * The version of the GPU driver.
   * 
   * @example
   * 12
   */
  gpuDriverVersion?: string;
  /**
   * @remarks
   * The GPU memory.
   * 
   * @example
   * 16 GiB
   */
  gpuSpec?: string;
  /**
   * @remarks
   * The period of time after which a session is closed. After an end user connects to a cloud computer, the session is established. If the system does not detect inputs from the keyboard or mouse within the specified period of time, the session is closed. Unit: milliseconds.
   * 
   * @example
   * 90000
   */
  idleDisconnectDuration?: number;
  /**
   * @remarks
   * The ID of the image.
   * 
   * @example
   * m-gq15cq5ydlvwn****
   */
  imageId?: string;
  /**
   * @remarks
   * The keep-alive duration of a session after the session is disconnected. Valid values: 180000 (3 minutes) to 345600000 (4 days). Unit: milliseconds. If you set this parameter to 0, the session is permanently retained after it is disconnected.
   * 
   * When a session is disconnected, take note of the following situations: If an end user does not resume the session within the specified duration, the session is closed and all unsaved data is cleared. If the end user resumes the session within the specified duration, the end user can continue to access data of the session.
   * 
   * @example
   * 1000
   */
  keepDuration?: number;
  /**
   * @remarks
   * The load balancing policy of the multi-session cloud computer pool.
   * 
   * Valid values:
   * 
   * *   0: depth-first
   * *   1: breadth-first
   * 
   * @example
   * 1
   */
  loadPolicy?: number;
  /**
   * @remarks
   * The maximum number of cloud computers that can be housed in the pay-as-you-go cloud computer pool.
   * 
   * @example
   * 10
   */
  maxDesktopsCount?: number;
  /**
   * @remarks
   * The memory size. Unit: MiB.
   * 
   * @example
   * 16384
   */
  memory?: number;
  /**
   * @remarks
   * The maximum number of cloud computers that can be automatically created in the subscription cloud computer pool.
   * 
   * @example
   * 1
   */
  minDesktopsCount?: number;
  /**
   * @remarks
   * The name of the office network in which the cloud computer pool resides.
   * 
   * @example
   * cn-hangzhou+dir-467671****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The ID of the office network to which the cloud computer pool belongs.
   * 
   * @example
   * testName
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The account type of the office network.
   * 
   * Valid values:
   * 
   * *   PERSONAL: individual office network
   * *   SIMPLE: convenience office network
   * *   AD_CONNECTOR: enterprise Active Directory (AD) office network
   * *   RAM: Resource Access Management (RAM)-based office network
   * 
   * @example
   * SIMPLE
   */
  officeSiteType?: string;
  /**
   * @remarks
   * The OS.
   * 
   * Valid values:
   * 
   * *   Linux
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Windows
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Windows
   */
  osType?: string;
  /**
   * @remarks
   * The ID of the cloud computer template.
   * 
   * @example
   * bundle_eds_general_4c8g_s8d5_win2019
   */
  ownBundleId?: string;
  /**
   * @remarks
   * The name of the cloud computer template.
   * 
   * @example
   * test
   */
  ownBundleName?: string;
  /**
   * @remarks
   * The type of the cloud computer pool.
   * 
   * Valid values:
   * 
   * *   0: individual (single session)
   * *   1: shared (multiple sessions)
   * 
   * @example
   * 0
   */
  ownType?: number;
  /**
   * @remarks
   * The billing method of the cloud computer pool.
   * 
   * Valid values:
   * 
   * *   PostPaid: pay-as-you-go
   * *   PrePaid: subscription
   * 
   * @example
   * PrePaid
   */
  payType?: string;
  /**
   * @remarks
   * The ID of the policy that is associated with the cloud computer pool.
   * 
   * @example
   * pg-53iyi2aar0nd6c8qj
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The name of the policy that is associated with the cloud computer pool.
   * 
   * @example
   * test-policy
   */
  policyGroupName?: string;
  /**
   * @remarks
   * The protocol type.
   * 
   * Valid values:
   * 
   * *   HDX
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ASP
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  /**
   * @remarks
   * The threshold for the ratio of connected sessions. This parameter indicates the condition that triggers auto scaling in a multi-session cloud computer pool. The ratio of connected sessions is calculated by using the following formula:
   * 
   * `Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`.
   * 
   * When the specified threshold is reached, new cloud computers are automatically created. When the specified threshold is not reached, idle cloud computers are released.
   * 
   * @example
   * 0.85
   */
  ratioThreshold?: number;
  /**
   * @remarks
   * The disk reset type of the cloud computer pool.
   * 
   * Valid values:
   * 
   * *   0: does not reset disks
   * *   1: resets only the system disks
   * *   2: resets only the user disks
   * *   3: resets the system disks and user disks
   * 
   * @example
   * 0
   */
  resetType?: number;
  /**
   * @remarks
   * The payment status of the cloud computer pool.
   * 
   * Valid values:
   * 
   * *   0: unpaid
   * *   1: paid
   * *   2: overdue or expired
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * The period of time after which an idle cloud computer is stopped. When the specified period of time is reached, the cloud computer is automatically stopped. If an end user connects to the stopped cloud computer, the cloud computer is automatically started. Unit: milliseconds.
   * 
   * @example
   * 900000
   */
  stopDuration?: number;
  /**
   * @remarks
   * The ID of the subnet.
   * 
   * @example
   * vsw-uf63bb6*****8gfytm
   */
  subnetId?: string;
  /**
   * @remarks
   * The category of the system disk.
   * 
   * Valid values:
   * 
   * *   cloud_efficiency: ultra disk
   * *   cloud_ssd: standard SSD
   * *   cloud_essd: enhanced SSD (ESSD)
   * 
   * @example
   * cloud_ssd
   */
  systemDiskCategory?: string;
  /**
   * @remarks
   * The system disk capacity. Unit: GiB.
   * 
   * @example
   * 80
   */
  systemDiskSize?: number;
  /**
   * @remarks
   * The tags attached to the cloud computer pool.
   */
  tags?: DescribeDesktopGroupsResponseBodyDesktopGroupsTags[];
  /**
   * @remarks
   * The version number of the cloud computer pool.
   * 
   * @example
   * 2
   */
  version?: number;
  /**
   * @remarks
   * Indicates whether disk encryption is enabled.
   * 
   * @example
   * false
   */
  volumeEncryptionEnabled?: boolean;
  /**
   * @remarks
   * The ID of the Key Management Service (KMS) key for disk encryption.
   * 
   * @example
   * e5409ada-xxxx-xxxx-xxxx-89e31e23e993
   */
  volumeEncryptionKey?: string;
  static names(): { [key: string]: string } {
    return {
      bindAmount: 'BindAmount',
      buyDesktopsCount: 'BuyDesktopsCount',
      comments: 'Comments',
      connectDuration: 'ConnectDuration',
      countPerStatus: 'CountPerStatus',
      cpu: 'Cpu',
      createTime: 'CreateTime',
      creator: 'Creator',
      dataDiskCategory: 'DataDiskCategory',
      dataDiskSize: 'DataDiskSize',
      desktopCount: 'DesktopCount',
      desktopGroupId: 'DesktopGroupId',
      desktopGroupName: 'DesktopGroupName',
      desktopType: 'DesktopType',
      endUserCount: 'EndUserCount',
      expiredTime: 'ExpiredTime',
      gpuCount: 'GpuCount',
      gpuDriverVersion: 'GpuDriverVersion',
      gpuSpec: 'GpuSpec',
      idleDisconnectDuration: 'IdleDisconnectDuration',
      imageId: 'ImageId',
      keepDuration: 'KeepDuration',
      loadPolicy: 'LoadPolicy',
      maxDesktopsCount: 'MaxDesktopsCount',
      memory: 'Memory',
      minDesktopsCount: 'MinDesktopsCount',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      officeSiteType: 'OfficeSiteType',
      osType: 'OsType',
      ownBundleId: 'OwnBundleId',
      ownBundleName: 'OwnBundleName',
      ownType: 'OwnType',
      payType: 'PayType',
      policyGroupId: 'PolicyGroupId',
      policyGroupName: 'PolicyGroupName',
      protocolType: 'ProtocolType',
      ratioThreshold: 'RatioThreshold',
      resetType: 'ResetType',
      status: 'Status',
      stopDuration: 'StopDuration',
      subnetId: 'SubnetId',
      systemDiskCategory: 'SystemDiskCategory',
      systemDiskSize: 'SystemDiskSize',
      tags: 'Tags',
      version: 'Version',
      volumeEncryptionEnabled: 'VolumeEncryptionEnabled',
      volumeEncryptionKey: 'VolumeEncryptionKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bindAmount: 'number',
      buyDesktopsCount: 'number',
      comments: 'string',
      connectDuration: 'number',
      countPerStatus: { 'type': 'array', 'itemType': DescribeDesktopGroupsResponseBodyDesktopGroupsCountPerStatus },
      cpu: 'number',
      createTime: 'string',
      creator: 'string',
      dataDiskCategory: 'string',
      dataDiskSize: 'string',
      desktopCount: 'number',
      desktopGroupId: 'string',
      desktopGroupName: 'string',
      desktopType: 'string',
      endUserCount: 'number',
      expiredTime: 'string',
      gpuCount: 'number',
      gpuDriverVersion: 'string',
      gpuSpec: 'string',
      idleDisconnectDuration: 'number',
      imageId: 'string',
      keepDuration: 'number',
      loadPolicy: 'number',
      maxDesktopsCount: 'number',
      memory: 'number',
      minDesktopsCount: 'number',
      officeSiteId: 'string',
      officeSiteName: 'string',
      officeSiteType: 'string',
      osType: 'string',
      ownBundleId: 'string',
      ownBundleName: 'string',
      ownType: 'number',
      payType: 'string',
      policyGroupId: 'string',
      policyGroupName: 'string',
      protocolType: 'string',
      ratioThreshold: 'number',
      resetType: 'number',
      status: 'number',
      stopDuration: 'number',
      subnetId: 'string',
      systemDiskCategory: 'string',
      systemDiskSize: 'number',
      tags: { 'type': 'array', 'itemType': DescribeDesktopGroupsResponseBodyDesktopGroupsTags },
      version: 'number',
      volumeEncryptionEnabled: 'boolean',
      volumeEncryptionKey: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.countPerStatus)) {
      $dara.Model.validateArray(this.countPerStatus);
    }
    if(Array.isArray(this.tags)) {
      $dara.Model.validateArray(this.tags);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopInfoResponseBodyDesktops extends $dara.Model {
  /**
   * @remarks
   * The connection status of the user.
   * 
   * Valid values:
   * 
   * *   Connected
   * *   Disconnected
   * 
   * @example
   * Disconnected
   */
  connectionStatus?: string;
  /**
   * @remarks
   * The version of the cloud computer image.
   * 
   * @example
   * 1.4.0-R-***
   */
  currentAppVersion?: string;
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * @example
   * dg-3uiojcc0j4kh7****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string;
  /**
   * @remarks
   * The status of the cloud computer.
   * 
   * Valid values:
   * 
   * *   Stopped
   * *   Failed
   * *   Starting
   * *   Running
   * *   Stopping
   * *   Expired
   * *   Deleted
   * *   Pending
   * 
   * @example
   * Running
   */
  desktopStatus?: string;
  /**
   * @remarks
   * The information about flags that are used to manage cloud computers.
   */
  managementFlag?: string[];
  /**
   * @remarks
   * The size of the update package. Unit: KB.
   * 
   * @example
   * 568533470
   */
  newAppSize?: number;
  /**
   * @remarks
   * The version number of the image that can be updated on the cloud computer.
   * 
   * @example
   * 1.6.0-R-***
   */
  newAppVersion?: string;
  /**
   * @remarks
   * The description of the image version that can be updated.
   * 
   * @example
   * Test package 03-07
   */
  releaseNote?: string;
  /**
   * @remarks
   * The time when the cloud computer was first started.
   * 
   * @example
   * 2020-11-06T08:31Z
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      connectionStatus: 'ConnectionStatus',
      currentAppVersion: 'CurrentAppVersion',
      desktopGroupId: 'DesktopGroupId',
      desktopId: 'DesktopId',
      desktopStatus: 'DesktopStatus',
      managementFlag: 'ManagementFlag',
      newAppSize: 'NewAppSize',
      newAppVersion: 'NewAppVersion',
      releaseNote: 'ReleaseNote',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      connectionStatus: 'string',
      currentAppVersion: 'string',
      desktopGroupId: 'string',
      desktopId: 'string',
      desktopStatus: 'string',
      managementFlag: { 'type': 'array', 'itemType': 'string' },
      newAppSize: 'number',
      newAppVersion: 'string',
      releaseNote: 'string',
      startTime: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.managementFlag)) {
      $dara.Model.validateArray(this.managementFlag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopOversoldGroupResponseBodyData extends $dara.Model {
  concurrenceCount?: number;
  curConcurrenceCount?: number;
  dataDiskSize?: number;
  description?: string;
  desktopType?: string;
  directoryId?: string;
  expireTime?: string;
  idleDisconnectDuration?: string;
  imageId?: string;
  keepDuration?: string;
  name?: string;
  oversoldGroupId?: string;
  oversoldUserCount?: number;
  oversoldWarn?: number;
  policyGroupId?: string;
  saleStatus?: string;
  status?: string;
  stopDuration?: number;
  systemDiskSize?: number;
  static names(): { [key: string]: string } {
    return {
      concurrenceCount: 'ConcurrenceCount',
      curConcurrenceCount: 'CurConcurrenceCount',
      dataDiskSize: 'DataDiskSize',
      description: 'Description',
      desktopType: 'DesktopType',
      directoryId: 'DirectoryId',
      expireTime: 'ExpireTime',
      idleDisconnectDuration: 'IdleDisconnectDuration',
      imageId: 'ImageId',
      keepDuration: 'KeepDuration',
      name: 'Name',
      oversoldGroupId: 'OversoldGroupId',
      oversoldUserCount: 'OversoldUserCount',
      oversoldWarn: 'OversoldWarn',
      policyGroupId: 'PolicyGroupId',
      saleStatus: 'SaleStatus',
      status: 'Status',
      stopDuration: 'StopDuration',
      systemDiskSize: 'SystemDiskSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      concurrenceCount: 'number',
      curConcurrenceCount: 'number',
      dataDiskSize: 'number',
      description: 'string',
      desktopType: 'string',
      directoryId: 'string',
      expireTime: 'string',
      idleDisconnectDuration: 'string',
      imageId: 'string',
      keepDuration: 'string',
      name: 'string',
      oversoldGroupId: 'string',
      oversoldUserCount: 'number',
      oversoldWarn: 'number',
      policyGroupId: 'string',
      saleStatus: 'string',
      status: 'string',
      stopDuration: 'number',
      systemDiskSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopOversoldUserResponseBodyData extends $dara.Model {
  endUserId?: string;
  oversoldGroupId?: string;
  userDesktopId?: string;
  userGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      endUserId: 'EndUserId',
      oversoldGroupId: 'OversoldGroupId',
      userDesktopId: 'UserDesktopId',
      userGroupId: 'UserGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endUserId: 'string',
      oversoldGroupId: 'string',
      userDesktopId: 'string',
      userGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopOversoldUserGroupResponseBodyData extends $dara.Model {
  imageId?: string;
  name?: string;
  oversoldGroupId?: string;
  policyGroupId?: string;
  userGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      imageId: 'ImageId',
      name: 'Name',
      oversoldGroupId: 'OversoldGroupId',
      policyGroupId: 'PolicyGroupId',
      userGroupId: 'UserGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      imageId: 'string',
      name: 'string',
      oversoldGroupId: 'string',
      policyGroupId: 'string',
      userGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopSessionsResponseBodySessions extends $dara.Model {
  /**
   * @remarks
   * The IP address of the client.
   * 
   * @example
   * 172.21.XX.XX
   */
  clientIp?: string;
  /**
   * @remarks
   * The client OS.
   * 
   * @example
   * windows_\\"Windows10Enterprise\\"10.0(Build22000)
   */
  clientOS?: string;
  /**
   * @remarks
   * The client version.
   * 
   * @example
   * 2.0.0-R-20221030.08****
   */
  clientVersion?: string;
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * @example
   * ecd-g6t1ukbaea****
   */
  desktopId?: string;
  /**
   * @remarks
   * The name of the cloud computer.
   * 
   * @example
   * testDesktop
   */
  desktopName?: string;
  /**
   * @remarks
   * The duration of the remote assistance. Unit: seconds.
   * 
   * @example
   * 120
   */
  endUserApplyCoordinateTime?: number;
  /**
   * @remarks
   * The ID of the end user.
   * 
   * @example
   * testUser
   */
  endUserId?: string;
  /**
   * @remarks
   * The duration of the last connection to the cloud computer. Unit: seconds.
   * 
   * @example
   * 120
   */
  latestConnectionTime?: number;
  /**
   * @remarks
   * The ID of the office network.
   * 
   * @example
   * cn-hangzhou+dir-8904****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The name of the office network.
   * 
   * @example
   * DemoOfficeSite
   */
  officeSiteName?: string;
  osSessionStatus?: string;
  /**
   * @remarks
   * The OS.
   * 
   * Valid values:
   * 
   * *   Linux
   * *   Windows
   * 
   * @example
   * Windows
   */
  osType?: string;
  /**
   * @remarks
   * The protocol type.
   * 
   * Valid values:
   * 
   * *   HDX
   * *   ASP
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  /**
   * @remarks
   * The end time of the session.
   * 
   * @example
   * 2023-01-28T02:31:43Z
   */
  sessionEndTime?: string;
  /**
   * @remarks
   * The idle duration of the session. Unit: seconds.
   * 
   * @example
   * 120
   */
  sessionIdleTime?: number;
  /**
   * @remarks
   * The start time of the session.
   * 
   * @example
   * 2023-01-28T02:31:43Z
   */
  sessionStartTime?: string;
  /**
   * @remarks
   * The state of the session.
   * 
   * Valid values:
   * 
   * *   Connected
   * *   Disconnected
   * 
   * @example
   * Connected
   */
  sessionStatus?: string;
  subPayType?: string;
  /**
   * @remarks
   * The total connection duration. Unit: seconds.
   * 
   * @example
   * 240
   */
  totalConnectionTime?: number;
  static names(): { [key: string]: string } {
    return {
      clientIp: 'ClientIp',
      clientOS: 'ClientOS',
      clientVersion: 'ClientVersion',
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      endUserApplyCoordinateTime: 'EndUserApplyCoordinateTime',
      endUserId: 'EndUserId',
      latestConnectionTime: 'LatestConnectionTime',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      osSessionStatus: 'OsSessionStatus',
      osType: 'OsType',
      protocolType: 'ProtocolType',
      sessionEndTime: 'SessionEndTime',
      sessionIdleTime: 'SessionIdleTime',
      sessionStartTime: 'SessionStartTime',
      sessionStatus: 'SessionStatus',
      subPayType: 'SubPayType',
      totalConnectionTime: 'TotalConnectionTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientIp: 'string',
      clientOS: 'string',
      clientVersion: 'string',
      desktopId: 'string',
      desktopName: 'string',
      endUserApplyCoordinateTime: 'number',
      endUserId: 'string',
      latestConnectionTime: 'number',
      officeSiteId: 'string',
      officeSiteName: 'string',
      osSessionStatus: 'string',
      osType: 'string',
      protocolType: 'string',
      sessionEndTime: 'string',
      sessionIdleTime: 'number',
      sessionStartTime: 'string',
      sessionStatus: 'string',
      subPayType: 'string',
      totalConnectionTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopTypesResponseBodyDesktopTypes extends $dara.Model {
  /**
   * @remarks
   * The number of vCPUs.
   * 
   * @example
   * 2
   */
  cpuCount?: string;
  /**
   * @remarks
   * The size of the data disk. Unit: GiB.
   * 
   * @example
   * 150
   */
  dataDiskSize?: string;
  /**
   * @remarks
   * The ID of the cloud desktop type.
   * 
   * @example
   * ecd.graphics.xlarge
   */
  desktopTypeId?: string;
  /**
   * @remarks
   * The status of the cloud desktop type. If SUFFICIENT is returned, the number of cloud desktops of the type is sufficient.
   * 
   * @example
   * SUFFICIENT
   */
  desktopTypeStatus?: string;
  /**
   * @remarks
   * The number of GPUs.
   * 
   * @example
   * 1
   */
  gpuCount?: number;
  gpuMemory?: number;
  /**
   * @remarks
   * The GPU memory.
   * 
   * @example
   * 16 GiB
   */
  gpuSpec?: string;
  /**
   * @remarks
   * The family of the cloud desktop type.
   * 
   * @example
   * ecd.graphics
   */
  instanceTypeFamily?: string;
  maxSessionCount?: number;
  /**
   * @remarks
   * The memory size. Unit: MiB.
   * 
   * @example
   * 23552
   */
  memorySize?: string;
  scopes?: string[];
  stockState?: string;
  /**
   * @remarks
   * The size of the system disk. Unit: GiB.
   * 
   * @example
   * 150
   */
  systemDiskSize?: string;
  static names(): { [key: string]: string } {
    return {
      cpuCount: 'CpuCount',
      dataDiskSize: 'DataDiskSize',
      desktopTypeId: 'DesktopTypeId',
      desktopTypeStatus: 'DesktopTypeStatus',
      gpuCount: 'GpuCount',
      gpuMemory: 'GpuMemory',
      gpuSpec: 'GpuSpec',
      instanceTypeFamily: 'InstanceTypeFamily',
      maxSessionCount: 'MaxSessionCount',
      memorySize: 'MemorySize',
      scopes: 'Scopes',
      stockState: 'StockState',
      systemDiskSize: 'SystemDiskSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cpuCount: 'string',
      dataDiskSize: 'string',
      desktopTypeId: 'string',
      desktopTypeStatus: 'string',
      gpuCount: 'number',
      gpuMemory: 'number',
      gpuSpec: 'string',
      instanceTypeFamily: 'string',
      maxSessionCount: 'number',
      memorySize: 'string',
      scopes: { 'type': 'array', 'itemType': 'string' },
      stockState: 'string',
      systemDiskSize: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.scopes)) {
      $dara.Model.validateArray(this.scopes);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsRequestTag extends $dara.Model {
  /**
   * @remarks
   * The key of the tag. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`. You cannot specify an empty string as a tag key.
   * 
   * @example
   * TestKey
   */
  key?: string;
  /**
   * @remarks
   * The value of the tag. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.
   * 
   * @example
   * TestValue
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsResponseBodyDesktopsDisks extends $dara.Model {
  diskCategory?: string;
  /**
   * @remarks
   * The disk ID.
   * 
   * @example
   * d-jedbpr4sl9l37****
   */
  diskId?: string;
  /**
   * @remarks
   * The disk size. Unit: GiB.
   * 
   * @example
   * 80
   */
  diskSize?: number;
  /**
   * @remarks
   * The type of the disk.
   * 
   * Valid values:
   * 
   * *   SYSTEM: system disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DATA: data disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * SYSTEM
   */
  diskType?: string;
  /**
   * @remarks
   * The performance level (PL) of the disk when an enhanced SSD (ESSD) is used. Valid values:
   * 
   * *   PL0
   * *   PL1
   * *   PL2
   * *   PL3
   * 
   * For more information about the differences among ESSDs at different PLs, see [Enhanced SSDs](https://help.aliyun.com/document_detail/122389.html).
   * 
   * @example
   * PL0
   */
  performanceLevel?: string;
  static names(): { [key: string]: string } {
    return {
      diskCategory: 'DiskCategory',
      diskId: 'DiskId',
      diskSize: 'DiskSize',
      diskType: 'DiskType',
      performanceLevel: 'PerformanceLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      diskCategory: 'string',
      diskId: 'string',
      diskSize: 'number',
      diskType: 'string',
      performanceLevel: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsResponseBodyDesktopsFotaUpdate extends $dara.Model {
  /**
   * @remarks
   * The current image version of the cloud desktop.
   * 
   * @example
   * 0.0.0-D-20220102.000000
   */
  currentAppVersion?: string;
  /**
   * @remarks
   * The image version to which the cloud desktop can be updated.
   * 
   * @example
   * 0.0.0-R-20220307.190736
   */
  newAppVersion?: string;
  /**
   * @remarks
   * The description of the image version to which the cloud desktop can be updated.
   * 
   * @example
   * Upgrade package for testing 03-07
   */
  releaseNote?: string;
  /**
   * @remarks
   * The English description of the image version to which the cloud desktop can be updated.
   * 
   * @example
   * Release note
   */
  releaseNoteEn?: string;
  /**
   * @remarks
   * The Japanese description of the image version to which the cloud desktop can be updated.
   * 
   * @example
   * リリースノート
   */
  releaseNoteJp?: string;
  /**
   * @remarks
   * The size of the installation package for the image to which the cloud desktop can be updated. Unit: KB.
   * 
   * @example
   * 108815097
   */
  size?: number;
  static names(): { [key: string]: string } {
    return {
      currentAppVersion: 'CurrentAppVersion',
      newAppVersion: 'NewAppVersion',
      releaseNote: 'ReleaseNote',
      releaseNoteEn: 'ReleaseNoteEn',
      releaseNoteJp: 'ReleaseNoteJp',
      size: 'Size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentAppVersion: 'string',
      newAppVersion: 'string',
      releaseNote: 'string',
      releaseNoteEn: 'string',
      releaseNoteJp: 'string',
      size: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsResponseBodyDesktopsResourceGroups extends $dara.Model {
  id?: string;
  name?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      name: 'Name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      name: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsResponseBodyDesktopsSessions extends $dara.Model {
  /**
   * @remarks
   * The ID of the end user who logged on to the cloud desktop.
   * 
   * @example
   * 29615820929547****
   */
  endUserId?: string;
  /**
   * @remarks
   * The time when the desktop session was established.
   * 
   * @example
   * 2021-03-07T08:23Z
   */
  establishmentTime?: string;
  /**
   * @remarks
   * The name of the external user.
   * 
   * @example
   * Testname
   */
  externalUserName?: string;
  static names(): { [key: string]: string } {
    return {
      endUserId: 'EndUserId',
      establishmentTime: 'EstablishmentTime',
      externalUserName: 'ExternalUserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endUserId: 'string',
      establishmentTime: 'string',
      externalUserName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsResponseBodyDesktopsTags extends $dara.Model {
  /**
   * @remarks
   * The tag key.
   * 
   * @example
   * TestKey
   */
  key?: string;
  /**
   * @remarks
   * The tag value.
   * 
   * @example
   * TestValue
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsResponseBodyDesktops extends $dara.Model {
  /**
   * @remarks
   * The number of sessions that are allowed for each cloud desktop in the multi-session desktop group.
   * 
   * @example
   * 10
   */
  bindAmount?: number;
  /**
   * @remarks
   * The ID of the desktop template that is used to create the cloud desktop.
   * 
   * @example
   * b-2g65ljy4291vl****
   */
  bundleId?: string;
  /**
   * @remarks
   * The name of the desktop template that is used to create the cloud desktop.
   * 
   * @example
   * Name
   */
  bundleName?: string;
  /**
   * @remarks
   * The billing method of the cloud desktop.
   * 
   * Default value: PostPaid. Valid values:
   * 
   * *   Postpaid: pay-as-you-go
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PrePaid: subscription
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * PostPaid
   */
  chargeType?: string;
  /**
   * @remarks
   * The connection status of the end user.
   * 
   * Valid values:
   * 
   * *   Unknown
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Connected
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Disconnected
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Disconnected
   */
  connectionStatus?: string;
  /**
   * @remarks
   * The number of vCPUs.
   * 
   * @example
   * 2
   */
  cpu?: number;
  /**
   * @remarks
   * The time when the cloud desktop was created.
   * 
   * @example
   * 2020-11-06T08:28Z
   */
  creationTime?: string;
  /**
   * @remarks
   * >  This parameter is in invitational preview and is not publicly available.
   * 
   * @example
   * null
   */
  dataDiskCategory?: string;
  /**
   * @remarks
   * >  This parameter is in invitational preview and is not publicly available.
   * 
   * @example
   * null
   */
  dataDiskSize?: string;
  /**
   * @remarks
   * The ID of the desktop group to which the cloud desktop belongs. Default value: null.
   * 
   * @example
   * null
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The cloud desktop ID.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string;
  /**
   * @remarks
   * The cloud desktop name.
   * 
   * @example
   * testDesktopName
   */
  desktopName?: string;
  /**
   * @remarks
   * The status of the cloud desktop.
   * 
   * @example
   * Running
   */
  desktopStatus?: string;
  /**
   * @remarks
   * The type of the cloud desktop.
   * 
   * @example
   * ecd.basic.large
   */
  desktopType?: string;
  /**
   * @remarks
   * The directory ID. The value of this parameter is the same as the workspace ID that is indicated by the OfficeSiteId parameter.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  directoryId?: string;
  /**
   * @remarks
   * >  This parameter is in invitational preview and is not publicly available.
   * 
   * @example
   * SIMPLE
   */
  directoryType?: string;
  /**
   * @remarks
   * Details of the disks.
   */
  disks?: DescribeDesktopsResponseBodyDesktopsDisks[];
  /**
   * @remarks
   * The number of times for which the cloud desktop can be downgraded.
   * 
   * @example
   * 3
   */
  downgradeQuota?: number;
  /**
   * @remarks
   * The number of times for which the cloud desktop has been downgraded.
   * 
   * @example
   * 0
   */
  downgradedTimes?: number;
  /**
   * @remarks
   * The IDs of the end users who are authorized to connect to the cloud desktop.
   */
  endUserIds?: string[];
  /**
   * @remarks
   * The time when the subscription cloud desktop expires.
   * 
   * @example
   * 2021-12-31T15:59Z
   */
  expiredTime?: string;
  /**
   * @remarks
   * The information about the image version that the cloud desktop uses.
   */
  fotaUpdate?: DescribeDesktopsResponseBodyDesktopsFotaUpdate;
  /**
   * @remarks
   * Indicates whether the cloud desktop is a GPU-accelerated desktop.
   * 
   * @example
   * 0
   */
  gpuCategory?: number;
  /**
   * @remarks
   * The number of GPU cores.
   * 
   * @example
   * 1
   */
  gpuCount?: number;
  /**
   * @remarks
   * The version number of the GPU driver of the cloud desktop.
   * 
   * @example
   * null
   */
  gpuDriverVersion?: string;
  /**
   * @remarks
   * The GPU Specifications.
   * 
   * @example
   * NVIDIA T4
   */
  gpuSpec?: string;
  /**
   * @remarks
   * >  This parameter is in invitational preview and is not publicly available.
   * 
   * @example
   * true
   */
  hibernationBeta?: boolean;
  /**
   * @remarks
   * >  This parameter is in invitational preview and is not publicly available.
   * 
   * @example
   * true
   */
  hibernationOptionsConfigured?: boolean;
  /**
   * @remarks
   * The hostname of the cloud desktop.
   * 
   * @example
   * testName
   */
  hostName?: string;
  /**
   * @remarks
   * The image ID.
   * 
   * @example
   * m-4zfb6zj728hhr****
   */
  imageId?: string;
  /**
   * @remarks
   * The flag that is used to manage the cloud desktop.
   * 
   * Valid values:
   * 
   * *   Updating: The configurations of the cloud desktop are being updated.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   NoFlag: No flags are available.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * NoFlag
   */
  managementFlag?: string;
  /**
   * @remarks
   * The flags that are used to manage the cloud desktops.
   */
  managementFlags?: string[];
  /**
   * @remarks
   * The memory size. Unit: MiB.
   * 
   * @example
   * 4096
   */
  memory?: number;
  /**
   * @remarks
   * The ID of the secondary network interface controller (NIC) created by the RAM or Active Directory (AD) user in Elastic Desktop Service (EDS). You do not have permissions to modify this parameter.
   * 
   * @example
   * 123456
   */
  networkInterfaceId?: string;
  /**
   * @remarks
   * The IP address of the secondary NIC that is created by the RAM or AD user in EDS.
   * 
   * @example
   * 192.168.74.165
   */
  networkInterfaceIp?: string;
  /**
   * @remarks
   * The workspace ID.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The workspace name.
   * 
   * @example
   * test
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The account type of the workspace.
   * 
   * Valid values:
   * 
   * *   SIMPLE: convenience account
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   AD_CONNECTOR: enterprise AD account
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * SIMPLE
   */
  officeSiteType?: string;
  /**
   * @remarks
   * The virtual private cloud (VPC) type of the workspace.
   * 
   * Valid values:
   * 
   * *   standard
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   customized
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   basic
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * basic
   */
  officeSiteVpcType?: string;
  /**
   * @remarks
   * The OS that is defined in the desktop template.
   * 
   * @example
   * Windows
   */
  osType?: string;
  /**
   * @remarks
   * The information about the OS platform. Valid values:
   * 
   * *   CentOS
   * *   Ubuntu
   * *   Windows Server 2016
   * *   Windows Server 2019
   * *   UOS
   * 
   * @example
   * Ubuntu
   */
  platform?: string;
  /**
   * @remarks
   * The policy ID.
   * 
   * @example
   * system-all-enabled-policy
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The policy IDs.
   */
  policyGroupIdList?: string[];
  /**
   * @remarks
   * The policy name.
   * 
   * @example
   * test
   */
  policyGroupName?: string;
  /**
   * @remarks
   * The policy names.
   */
  policyGroupNameList?: string[];
  /**
   * @remarks
   * The progress when the cloud desktop was created.
   * 
   * @example
   * 100%
   */
  progress?: string;
  /**
   * @remarks
   * The protocol.
   * 
   * Valid values:
   * 
   * *   HDX: High-definition Experience (HDX) protocol
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ASP: Adaptive Streaming Protocol (ASP) developed by Alibaba Cloud
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  resourceGroups?: DescribeDesktopsResponseBodyDesktopsResourceGroups[];
  /**
   * @remarks
   * The type of the session.
   * 
   * Valid values:
   * 
   * *   SINGLE_SESSION
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   MULTIPLE_SESSION
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * SINGLE_SESSION
   */
  sessionType?: string;
  /**
   * @remarks
   * The information about the desktop sessions of end users.
   */
  sessions?: DescribeDesktopsResponseBodyDesktopsSessions[];
  /**
   * @remarks
   * The ID of the snapshot policy.
   * 
   * @example
   * sp-gi007jgyc3kcey2bb
   */
  snapshotPolicyId?: string;
  /**
   * @remarks
   * The name of the snapshot policy.
   * 
   * @example
   * testSnapshotName
   */
  snapshotPolicyName?: string;
  /**
   * @remarks
   * The time when the cloud desktop was first started.
   * 
   * @example
   * 2020-11-06T08:31Z
   */
  startTime?: string;
  /**
   * @remarks
   * Indicates whether the cloud desktop supports hibernation.
   * 
   * @example
   * true
   */
  supportHibernation?: boolean;
  /**
   * @remarks
   * >  This parameter is in invitational preview and is not publicly available.
   * 
   * @example
   * null
   */
  systemDiskCategory?: string;
  /**
   * @remarks
   * >  This parameter is in invitational preview and is not publicly available.
   * 
   * @example
   * 0
   */
  systemDiskSize?: number;
  /**
   * @remarks
   * Details about the tags.
   */
  tags?: DescribeDesktopsResponseBodyDesktopsTags[];
  /**
   * @remarks
   * Indicates whether disk encryption is enabled.
   * 
   * @example
   * false
   */
  volumeEncryptionEnabled?: boolean;
  /**
   * @remarks
   * The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.
   * 
   * @example
   * 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
   */
  volumeEncryptionKey?: string;
  /**
   * @remarks
   * The zone type. Default value: **AvailabilityZone**. This value indicates Alibaba Cloud zones.
   * 
   * @example
   * AvailabilityZone
   */
  zoneType?: string;
  static names(): { [key: string]: string } {
    return {
      bindAmount: 'BindAmount',
      bundleId: 'BundleId',
      bundleName: 'BundleName',
      chargeType: 'ChargeType',
      connectionStatus: 'ConnectionStatus',
      cpu: 'Cpu',
      creationTime: 'CreationTime',
      dataDiskCategory: 'DataDiskCategory',
      dataDiskSize: 'DataDiskSize',
      desktopGroupId: 'DesktopGroupId',
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      desktopStatus: 'DesktopStatus',
      desktopType: 'DesktopType',
      directoryId: 'DirectoryId',
      directoryType: 'DirectoryType',
      disks: 'Disks',
      downgradeQuota: 'DowngradeQuota',
      downgradedTimes: 'DowngradedTimes',
      endUserIds: 'EndUserIds',
      expiredTime: 'ExpiredTime',
      fotaUpdate: 'FotaUpdate',
      gpuCategory: 'GpuCategory',
      gpuCount: 'GpuCount',
      gpuDriverVersion: 'GpuDriverVersion',
      gpuSpec: 'GpuSpec',
      hibernationBeta: 'HibernationBeta',
      hibernationOptionsConfigured: 'HibernationOptionsConfigured',
      hostName: 'HostName',
      imageId: 'ImageId',
      managementFlag: 'ManagementFlag',
      managementFlags: 'ManagementFlags',
      memory: 'Memory',
      networkInterfaceId: 'NetworkInterfaceId',
      networkInterfaceIp: 'NetworkInterfaceIp',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      officeSiteType: 'OfficeSiteType',
      officeSiteVpcType: 'OfficeSiteVpcType',
      osType: 'OsType',
      platform: 'Platform',
      policyGroupId: 'PolicyGroupId',
      policyGroupIdList: 'PolicyGroupIdList',
      policyGroupName: 'PolicyGroupName',
      policyGroupNameList: 'PolicyGroupNameList',
      progress: 'Progress',
      protocolType: 'ProtocolType',
      resourceGroups: 'ResourceGroups',
      sessionType: 'SessionType',
      sessions: 'Sessions',
      snapshotPolicyId: 'SnapshotPolicyId',
      snapshotPolicyName: 'SnapshotPolicyName',
      startTime: 'StartTime',
      supportHibernation: 'SupportHibernation',
      systemDiskCategory: 'SystemDiskCategory',
      systemDiskSize: 'SystemDiskSize',
      tags: 'Tags',
      volumeEncryptionEnabled: 'VolumeEncryptionEnabled',
      volumeEncryptionKey: 'VolumeEncryptionKey',
      zoneType: 'ZoneType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bindAmount: 'number',
      bundleId: 'string',
      bundleName: 'string',
      chargeType: 'string',
      connectionStatus: 'string',
      cpu: 'number',
      creationTime: 'string',
      dataDiskCategory: 'string',
      dataDiskSize: 'string',
      desktopGroupId: 'string',
      desktopId: 'string',
      desktopName: 'string',
      desktopStatus: 'string',
      desktopType: 'string',
      directoryId: 'string',
      directoryType: 'string',
      disks: { 'type': 'array', 'itemType': DescribeDesktopsResponseBodyDesktopsDisks },
      downgradeQuota: 'number',
      downgradedTimes: 'number',
      endUserIds: { 'type': 'array', 'itemType': 'string' },
      expiredTime: 'string',
      fotaUpdate: DescribeDesktopsResponseBodyDesktopsFotaUpdate,
      gpuCategory: 'number',
      gpuCount: 'number',
      gpuDriverVersion: 'string',
      gpuSpec: 'string',
      hibernationBeta: 'boolean',
      hibernationOptionsConfigured: 'boolean',
      hostName: 'string',
      imageId: 'string',
      managementFlag: 'string',
      managementFlags: { 'type': 'array', 'itemType': 'string' },
      memory: 'number',
      networkInterfaceId: 'string',
      networkInterfaceIp: 'string',
      officeSiteId: 'string',
      officeSiteName: 'string',
      officeSiteType: 'string',
      officeSiteVpcType: 'string',
      osType: 'string',
      platform: 'string',
      policyGroupId: 'string',
      policyGroupIdList: { 'type': 'array', 'itemType': 'string' },
      policyGroupName: 'string',
      policyGroupNameList: { 'type': 'array', 'itemType': 'string' },
      progress: 'string',
      protocolType: 'string',
      resourceGroups: { 'type': 'array', 'itemType': DescribeDesktopsResponseBodyDesktopsResourceGroups },
      sessionType: 'string',
      sessions: { 'type': 'array', 'itemType': DescribeDesktopsResponseBodyDesktopsSessions },
      snapshotPolicyId: 'string',
      snapshotPolicyName: 'string',
      startTime: 'string',
      supportHibernation: 'boolean',
      systemDiskCategory: 'string',
      systemDiskSize: 'number',
      tags: { 'type': 'array', 'itemType': DescribeDesktopsResponseBodyDesktopsTags },
      volumeEncryptionEnabled: 'boolean',
      volumeEncryptionKey: 'string',
      zoneType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.disks)) {
      $dara.Model.validateArray(this.disks);
    }
    if(Array.isArray(this.endUserIds)) {
      $dara.Model.validateArray(this.endUserIds);
    }
    if(this.fotaUpdate && typeof (this.fotaUpdate as any).validate === 'function') {
      (this.fotaUpdate as any).validate();
    }
    if(Array.isArray(this.managementFlags)) {
      $dara.Model.validateArray(this.managementFlags);
    }
    if(Array.isArray(this.policyGroupIdList)) {
      $dara.Model.validateArray(this.policyGroupIdList);
    }
    if(Array.isArray(this.policyGroupNameList)) {
      $dara.Model.validateArray(this.policyGroupNameList);
    }
    if(Array.isArray(this.resourceGroups)) {
      $dara.Model.validateArray(this.resourceGroups);
    }
    if(Array.isArray(this.sessions)) {
      $dara.Model.validateArray(this.sessions);
    }
    if(Array.isArray(this.tags)) {
      $dara.Model.validateArray(this.tags);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsInGroupResponseBodyPaidDesktops extends $dara.Model {
  /**
   * @remarks
   * The connection status of the cloud computer.
   * 
   * Valid values:
   * 
   * *   Unknown
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Connected
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Disconnected
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Connected
   */
  connectionStatus?: string;
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * @example
   * ud-7ftf5b6yu77b0****
   */
  desktopId?: string;
  /**
   * @remarks
   * The name of the cloud computer.
   * 
   * @example
   * testName
   */
  desktopName?: string;
  /**
   * @remarks
   * The status of the cloud computer.
   * 
   * Valid values:
   * 
   * *   Stopped
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Starting
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Rebuilding
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Running
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Stopping
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Expired
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Deleted
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Pending
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Running
   */
  desktopStatus?: string;
  /**
   * @remarks
   * The type of the disk.
   * 
   * Valid values:
   * 
   * *   SYSTEM: system disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DATA: data disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * SYSTEM
   */
  diskType?: string;
  /**
   * @remarks
   * The ID of the authorized user of the cloud computer.
   * 
   * @example
   * alice
   */
  endUserId?: string;
  /**
   * @remarks
   * The IDs of the end users who are connected to the cloud computers in the cloud computer pool. If no end users are connected, no values are returned for this parameter.
   */
  endUserIds?: string[];
  /**
   * @remarks
   * The username of the authorized user.
   * 
   * @example
   * alice
   */
  endUserName?: string;
  /**
   * @remarks
   * The usernames of the end users who are connected to the cloud computers in the cloud computer pool. If no end users are connected, no values are returned for this parameter.
   */
  endUserNames?: string[];
  /**
   * @remarks
   * The image version.
   * 
   * @example
   * 0.1.0-R-20220914.17****
   */
  fotaVersion?: string;
  /**
   * @remarks
   * The version of the GPU driver.
   * 
   * @example
   * 1.0
   */
  gpuDriverVersion?: string;
  /**
   * @remarks
   * The image ID.
   * 
   * @example
   * m-hn5v2mmk0****
   */
  imageId?: string;
  /**
   * @remarks
   * The image name.
   * 
   * @example
   * Win10_ZC
   */
  imageName?: string;
  /**
   * @remarks
   * The flag that is used to manage the cloud computer.
   * 
   * Valid values:
   * 
   * *   Updating: The configurations of the cloud computer are being updated.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   NoFlag: No flags are attached to the cloud computer.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * NoFlag
   */
  managementFlag?: string;
  /**
   * @remarks
   * The flags that are used to manage the cloud computers.
   */
  managementFlags?: string[];
  /**
   * @remarks
   * The IP address of the member network interface controller (NIC) of the instance.
   * 
   * @example
   * 192.168.XX.XX
   */
  memberEniIp?: string;
  /**
   * @remarks
   * The OS.
   * 
   * Valid values:
   * 
   * *   Linux
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Windows
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Windows
   */
  osType?: string;
  /**
   * @remarks
   * The IP address of the primary NIC of the instance.
   * 
   * @example
   * 192.168.XX.XX
   */
  primaryEniIp?: string;
  /**
   * @remarks
   * The protocol.
   * 
   * Valid values:
   * 
   * *   HDX: High-definition Experience (HDX) protocol
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ASP: Adaptive Streaming Protocol (ASP) protocol provided by Alibaba Cloud
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  /**
   * @remarks
   * The time when the cloud computer was reset.
   * 
   * @example
   * 2021-03-03 08:48:08
   */
  resetTime?: string;
  /**
   * @remarks
   * The system disk size. Unit: GiB.
   * 
   * @example
   * 80
   */
  systemDiskSize?: number;
  static names(): { [key: string]: string } {
    return {
      connectionStatus: 'ConnectionStatus',
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      desktopStatus: 'DesktopStatus',
      diskType: 'DiskType',
      endUserId: 'EndUserId',
      endUserIds: 'EndUserIds',
      endUserName: 'EndUserName',
      endUserNames: 'EndUserNames',
      fotaVersion: 'FotaVersion',
      gpuDriverVersion: 'GpuDriverVersion',
      imageId: 'ImageId',
      imageName: 'ImageName',
      managementFlag: 'ManagementFlag',
      managementFlags: 'ManagementFlags',
      memberEniIp: 'MemberEniIp',
      osType: 'OsType',
      primaryEniIp: 'PrimaryEniIp',
      protocolType: 'ProtocolType',
      resetTime: 'ResetTime',
      systemDiskSize: 'SystemDiskSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      connectionStatus: 'string',
      desktopId: 'string',
      desktopName: 'string',
      desktopStatus: 'string',
      diskType: 'string',
      endUserId: 'string',
      endUserIds: { 'type': 'array', 'itemType': 'string' },
      endUserName: 'string',
      endUserNames: { 'type': 'array', 'itemType': 'string' },
      fotaVersion: 'string',
      gpuDriverVersion: 'string',
      imageId: 'string',
      imageName: 'string',
      managementFlag: 'string',
      managementFlags: { 'type': 'array', 'itemType': 'string' },
      memberEniIp: 'string',
      osType: 'string',
      primaryEniIp: 'string',
      protocolType: 'string',
      resetTime: 'string',
      systemDiskSize: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.endUserIds)) {
      $dara.Model.validateArray(this.endUserIds);
    }
    if(Array.isArray(this.endUserNames)) {
      $dara.Model.validateArray(this.endUserNames);
    }
    if(Array.isArray(this.managementFlags)) {
      $dara.Model.validateArray(this.managementFlags);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsInGroupResponseBodyPostPaidDesktops extends $dara.Model {
  /**
   * @remarks
   * The connection status of the cloud computer.
   * 
   * Valid values:
   * 
   * *   Unknown
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Connected
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Disconnected
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Connected
   */
  connectionStatus?: string;
  /**
   * @remarks
   * The retention period of the cloud computer.
   * 
   * @example
   * 4153958447
   */
  createDuration?: string;
  /**
   * @remarks
   * The time when the cloud computer was created.
   * 
   * @example
   * 2022-01-21T06:34:57Z
   */
  createTime?: string;
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * @example
   * ud-2i8qxpv6t1a07****
   */
  desktopId?: string;
  /**
   * @remarks
   * The name of the cloud computer.
   * 
   * @example
   * testName
   */
  desktopName?: string;
  /**
   * @remarks
   * The status of the cloud computer.
   * 
   * Valid values:
   * 
   * *   Stopped
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Starting
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Rebuilding
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Running
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Stopping
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Expired
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Deleted
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Pending
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Stopped
   */
  desktopStatus?: string;
  /**
   * @remarks
   * The type of the disk.
   * 
   * Valid values:
   * 
   * *   SYSTEM: system disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DATA: data disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * SYSTEM
   */
  diskType?: string;
  /**
   * @remarks
   * The ID of the authorized user.
   * 
   * @example
   * alice
   */
  endUserId?: string;
  /**
   * @remarks
   * The IDs of the end users who are connected to the cloud computers in the cloud computer pool. If no end users are connected, no values are returned for this parameter.
   */
  endUserIds?: string[];
  /**
   * @remarks
   * The username of the authorized user.
   * 
   * @example
   * alice
   */
  endUserName?: string;
  /**
   * @remarks
   * The usernames of the end users who are connected to the cloud computers in the cloud computer pool. If no end users are connected, no values are returned for this parameter.
   */
  endUserNames?: string[];
  /**
   * @remarks
   * The image version.
   * 
   * @example
   * 0.1.0-R-20220914.17****
   */
  fotaVersion?: string;
  /**
   * @remarks
   * The version of the GPU driver.
   * 
   * @example
   * 1.0
   */
  gpuDriverVersion?: string;
  /**
   * @remarks
   * The image ID.
   * 
   * @example
   * m-hn5v2mmk0****
   */
  imageId?: string;
  /**
   * @remarks
   * The image name.
   * 
   * @example
   * Win10_ZC
   */
  imageName?: string;
  /**
   * @remarks
   * The flag that is used to manage the cloud computer.
   * 
   * Valid values:
   * 
   * *   Updating: The configurations of the cloud computer are being updated.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   NoFlag: No flags are attached to the cloud computer.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * NoFlag
   */
  managementFlag?: string;
  /**
   * @remarks
   * The flags that are used to manage the cloud computers.
   */
  managementFlags?: string[];
  /**
   * @remarks
   * The IP address of the member NIC of the instance.
   * 
   * @example
   * 192.168.XX.XX
   */
  memberEniIp?: string;
  /**
   * @remarks
   * The OS.
   * 
   * Valid values:
   * 
   * *   Linux
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Windows
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Windows
   */
  osType?: string;
  /**
   * @remarks
   * The IP address of the primary NIC of the instance.
   * 
   * @example
   * 192.168.XX.XX
   */
  primaryEniIp?: string;
  /**
   * @remarks
   * The protocol.
   * 
   * Valid values:
   * 
   * *   HDX: HDX protocol
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ASP: ASP protocol provided by Alibaba Cloud
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * HDX
   */
  protocolType?: string;
  /**
   * @remarks
   * The time when the cloud computer was released.
   * 
   * @example
   * 2022-01-21T16:34:57Z
   */
  releaseTime?: string;
  /**
   * @remarks
   * The time when the cloud computer was reset.
   * 
   * @example
   * 2021-03-03 08:48:08
   */
  resetTime?: string;
  /**
   * @remarks
   * The system disk size. Unit: GiB.
   * 
   * @example
   * 80
   */
  systemDiskSize?: number;
  static names(): { [key: string]: string } {
    return {
      connectionStatus: 'ConnectionStatus',
      createDuration: 'CreateDuration',
      createTime: 'CreateTime',
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      desktopStatus: 'DesktopStatus',
      diskType: 'DiskType',
      endUserId: 'EndUserId',
      endUserIds: 'EndUserIds',
      endUserName: 'EndUserName',
      endUserNames: 'EndUserNames',
      fotaVersion: 'FotaVersion',
      gpuDriverVersion: 'GpuDriverVersion',
      imageId: 'ImageId',
      imageName: 'ImageName',
      managementFlag: 'ManagementFlag',
      managementFlags: 'ManagementFlags',
      memberEniIp: 'MemberEniIp',
      osType: 'OsType',
      primaryEniIp: 'PrimaryEniIp',
      protocolType: 'ProtocolType',
      releaseTime: 'ReleaseTime',
      resetTime: 'ResetTime',
      systemDiskSize: 'SystemDiskSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      connectionStatus: 'string',
      createDuration: 'string',
      createTime: 'string',
      desktopId: 'string',
      desktopName: 'string',
      desktopStatus: 'string',
      diskType: 'string',
      endUserId: 'string',
      endUserIds: { 'type': 'array', 'itemType': 'string' },
      endUserName: 'string',
      endUserNames: { 'type': 'array', 'itemType': 'string' },
      fotaVersion: 'string',
      gpuDriverVersion: 'string',
      imageId: 'string',
      imageName: 'string',
      managementFlag: 'string',
      managementFlags: { 'type': 'array', 'itemType': 'string' },
      memberEniIp: 'string',
      osType: 'string',
      primaryEniIp: 'string',
      protocolType: 'string',
      releaseTime: 'string',
      resetTime: 'string',
      systemDiskSize: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.endUserIds)) {
      $dara.Model.validateArray(this.endUserIds);
    }
    if(Array.isArray(this.endUserNames)) {
      $dara.Model.validateArray(this.endUserNames);
    }
    if(Array.isArray(this.managementFlags)) {
      $dara.Model.validateArray(this.managementFlags);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDevicesResponseBodyDevicesEndUserList extends $dara.Model {
  /**
   * @remarks
   * The address of the AD office network.
   * 
   * @example
   * xn--0zw****
   */
  adDomain?: string;
  /**
   * @remarks
   * The ID of the convenient office network.
   * 
   * @example
   * cn-hangzhou+dir-jedbpr4sl9l37****
   */
  directoryId?: string;
  /**
   * @remarks
   * The ID of the user.
   * 
   * @example
   * moli
   */
  endUserId?: string;
  /**
   * @remarks
   * The account type of the user.
   * 
   * Valid values:
   * 
   * *   AD: enterprise AD account.
   * *   SIMPLE: convenience account
   * 
   * @example
   * SIMPLE
   */
  userType?: string;
  static names(): { [key: string]: string } {
    return {
      adDomain: 'AdDomain',
      directoryId: 'DirectoryId',
      endUserId: 'EndUserId',
      userType: 'UserType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adDomain: 'string',
      directoryId: 'string',
      endUserId: 'string',
      userType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDevicesResponseBodyDevices extends $dara.Model {
  /**
   * @remarks
   * The ID of the device. The serial number (SN) of the hardware client or the UUID of the software client.
   * 
   * @example
   * 5F52817BE267A43C608D245070D2****
   */
  deviceId?: string;
  /**
   * @remarks
   * The users who are bound to the device.
   */
  endUserList?: DescribeDevicesResponseBodyDevicesEndUserList[];
  static names(): { [key: string]: string } {
    return {
      deviceId: 'DeviceId',
      endUserList: 'EndUserList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deviceId: 'string',
      endUserList: { 'type': 'array', 'itemType': DescribeDevicesResponseBodyDevicesEndUserList },
    };
  }

  validate() {
    if(Array.isArray(this.endUserList)) {
      $dara.Model.validateArray(this.endUserList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDirectoriesResponseBodyDirectoriesADConnectors extends $dara.Model {
  /**
   * @remarks
   * The connection address.
   * 
   * @example
   * ``172.17.**.**``
   */
  ADConnectorAddress?: string;
  /**
   * @remarks
   * Valid values:
   * 
   * *   CONNECT_ERROR
   * *   RUNNING
   * *   CONNECTING: You must configure domain trust for your AD system.
   * *   EXPIRED
   * *   CREATING
   * 
   * @example
   * RUNNING
   */
  connectorStatus?: string;
  /**
   * @remarks
   * The ID of the NIC to which the AD connector is mounted.
   * 
   * @example
   * eni-bp1i4wx78lgosrj6****
   */
  networkInterfaceId?: string;
  /**
   * @remarks
   * The AD connector type.
   * 
   * Valid values:
   * 
   * *   1: General
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   2: Advanced
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * 1
   */
  specification?: string;
  /**
   * @remarks
   * The trust password of the AD domain controller.
   * 
   * @example
   * yfpoAD****
   */
  trustKey?: string;
  /**
   * @remarks
   * The ID of the vSwitch with which the AD connector is associated.
   * 
   * @example
   * vsw-bp19ocz3erfx15uon****
   */
  vSwitchId?: string;
  static names(): { [key: string]: string } {
    return {
      ADConnectorAddress: 'ADConnectorAddress',
      connectorStatus: 'ConnectorStatus',
      networkInterfaceId: 'NetworkInterfaceId',
      specification: 'Specification',
      trustKey: 'TrustKey',
      vSwitchId: 'VSwitchId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ADConnectorAddress: 'string',
      connectorStatus: 'string',
      networkInterfaceId: 'string',
      specification: 'string',
      trustKey: 'string',
      vSwitchId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDirectoriesResponseBodyDirectoriesLogs extends $dara.Model {
  /**
   * @remarks
   * The level of the log entry.
   * 
   * Valid values:
   * 
   * *   ERROR
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   INFO
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   WARN
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * INFO
   */
  level?: string;
  /**
   * @remarks
   * Details of the log entry.
   * 
   * @example
   * code:success | message:Create Connector complete.
   */
  message?: string;
  /**
   * @remarks
   * The step that corresponds to the log entry.
   * 
   * @example
   * DescribeDirectories
   */
  step?: string;
  /**
   * @remarks
   * The time when the log entry was printed.
   * 
   * @example
   * 2021-01-22T06:45Z
   */
  timeStamp?: string;
  static names(): { [key: string]: string } {
    return {
      level: 'Level',
      message: 'Message',
      step: 'Step',
      timeStamp: 'TimeStamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      level: 'string',
      message: 'string',
      step: 'string',
      timeStamp: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDirectoriesResponseBodyDirectories extends $dara.Model {
  /**
   * @remarks
   * Details of the AD connector.
   */
  ADConnectors?: DescribeDirectoriesResponseBodyDirectoriesADConnectors[];
  /**
   * @example
   * dc001
   */
  adHostname?: string;
  /**
   * @example
   * dc002
   */
  backupDCHostname?: string;
  /**
   * @example
   * 192.168.2.100
   */
  backupDns?: string;
  /**
   * @remarks
   * The time when the directory was created.
   * 
   * @example
   * 2020-11-02T01:44Z
   */
  creationTime?: string;
  /**
   * @remarks
   * The security group ID. This parameter is returned only when the directory type is AD office network.
   * 
   * @example
   * sg-bp1ce64o4g9mdf5u****
   */
  customSecurityGroupId?: string;
  /**
   * @remarks
   * The method in which the cloud computer is connected.
   * 
   * Valid values:
   * 
   * *   VPC
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Internet
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Any
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Internet
   */
  desktopAccessType?: string;
  /**
   * @remarks
   * The endpoint that is used to connect to cloud computers in the directory over a VPC.
   * 
   * @example
   * http://ep-bp1s2vmbj55r5rzc****.epsrv-bp1pcfhpwvlpny01****.cn-hangzhou.privatelink.aliyuncs.com
   */
  desktopVpcEndpoint?: string;
  /**
   * @remarks
   * The directory ID.
   * 
   * @example
   * cn-hangzhou+dir-gx2x1dhsmu52rd****
   */
  directoryId?: string;
  /**
   * @remarks
   * The directory type.
   * 
   * Valid values:
   * 
   * *   AD_CONNECTOR: AD directory
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   RAM: RAM directory
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * RAM
   */
  directoryType?: string;
  /**
   * @remarks
   * The DNS address of the directory.
   */
  dnsAddress?: string[];
  /**
   * @remarks
   * The username of a DNS user.
   * 
   * @example
   * testDnsUserName
   */
  dnsUserName?: string;
  /**
   * @remarks
   * The domain name.
   * 
   * @example
   * example.com
   */
  domainName?: string;
  /**
   * @remarks
   * The password of the domain administrator. This parameter is returned only when the directory type is AD office network.
   * 
   * @example
   * testPassword
   */
  domainPassword?: string;
  /**
   * @remarks
   * The username of the domain administrator.
   * 
   * @example
   * sAMAccountName
   */
  domainUserName?: string;
  /**
   * @remarks
   * Indicates whether the local administrator permissions are granted to users that use cloud computers in the office network.
   * 
   * @example
   * true
   */
  enableAdminAccess?: boolean;
  /**
   * @remarks
   * Indicates whether cloud computers can communicate with each other in the directory.
   * 
   * @example
   * true
   */
  enableCrossDesktopAccess?: boolean;
  /**
   * @remarks
   * Indicates whether access over the Internet is enabled.
   * 
   * >  This parameter is unavailable.
   * 
   * @example
   * false
   */
  enableInternetAccess?: boolean;
  /**
   * @remarks
   * The IDs of File Storage NAS (NAS) file systems.
   */
  fileSystemIds?: string[];
  /**
   * @remarks
   * The registration logs. This parameter is returned only when the directory type is AD office network.
   */
  logs?: DescribeDirectoriesResponseBodyDirectoriesLogs[];
  /**
   * @remarks
   * Indicates whether MFA is enabled.
   * 
   * @example
   * false
   */
  mfaEnabled?: boolean;
  /**
   * @remarks
   * The directory name.
   * 
   * @example
   * testDirectoryName
   */
  name?: string;
  /**
   * @remarks
   * Indicates whether two-step verification for logons is enabled. This parameter is returned only for directories of convenience account type.\\
   * If two-factor verification is enabled, the system checks whether security risks exist within the logon account when a convenience user logs on to an Alibaba Cloud Workspace client. If risks are detected, the system sends a verification code to the email address that is associated with the account. Then, the convenience user can log on to the client only after the user enters the correct verification code.
   * 
   * @example
   * false
   */
  needVerifyLoginRisk?: boolean;
  /**
   * @remarks
   * The organization unit that you selected when you added the cloud computer to the domain.
   * 
   * @example
   * example.com/Domain Controllers
   */
  ouName?: string;
  /**
   * @remarks
   * Indicates whether single sign-on (SSO) is enabled.
   * 
   * @example
   * false
   */
  ssoEnabled?: boolean;
  /**
   * @remarks
   * The status of the AD directory.
   * 
   * Valid values:
   * 
   * *   REGISTERING
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   REGISTERED
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * REGISTERING
   */
  status?: string;
  /**
   * @remarks
   * The DNS address of the enterprise AD subdomain.
   */
  subDnsAddress?: string[];
  /**
   * @remarks
   * The fully qualified domain name (FQDN) of the existing AD subdomain. The value contains both the host name and the domain name.
   * 
   * @example
   * child.example.com
   */
  subDomainName?: string;
  /**
   * @remarks
   * The AD trust password. This parameter is returned only when the directory type is AD office network.
   * 
   * @example
   * 82Tg****
   */
  trustPassword?: string;
  /**
   * @remarks
   * The IDs of the vSwitches specified when the directory was created.
   */
  vSwitchIds?: string[];
  /**
   * @remarks
   * The ID of the VPC to which the vSwitch belongs. This parameter is returned only when the directory type is AD office network.
   * 
   * @example
   * vpc-uf6tz5k67puge5jn8****
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      ADConnectors: 'ADConnectors',
      adHostname: 'AdHostname',
      backupDCHostname: 'BackupDCHostname',
      backupDns: 'BackupDns',
      creationTime: 'CreationTime',
      customSecurityGroupId: 'CustomSecurityGroupId',
      desktopAccessType: 'DesktopAccessType',
      desktopVpcEndpoint: 'DesktopVpcEndpoint',
      directoryId: 'DirectoryId',
      directoryType: 'DirectoryType',
      dnsAddress: 'DnsAddress',
      dnsUserName: 'DnsUserName',
      domainName: 'DomainName',
      domainPassword: 'DomainPassword',
      domainUserName: 'DomainUserName',
      enableAdminAccess: 'EnableAdminAccess',
      enableCrossDesktopAccess: 'EnableCrossDesktopAccess',
      enableInternetAccess: 'EnableInternetAccess',
      fileSystemIds: 'FileSystemIds',
      logs: 'Logs',
      mfaEnabled: 'MfaEnabled',
      name: 'Name',
      needVerifyLoginRisk: 'NeedVerifyLoginRisk',
      ouName: 'OuName',
      ssoEnabled: 'SsoEnabled',
      status: 'Status',
      subDnsAddress: 'SubDnsAddress',
      subDomainName: 'SubDomainName',
      trustPassword: 'TrustPassword',
      vSwitchIds: 'VSwitchIds',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ADConnectors: { 'type': 'array', 'itemType': DescribeDirectoriesResponseBodyDirectoriesADConnectors },
      adHostname: 'string',
      backupDCHostname: 'string',
      backupDns: 'string',
      creationTime: 'string',
      customSecurityGroupId: 'string',
      desktopAccessType: 'string',
      desktopVpcEndpoint: 'string',
      directoryId: 'string',
      directoryType: 'string',
      dnsAddress: { 'type': 'array', 'itemType': 'string' },
      dnsUserName: 'string',
      domainName: 'string',
      domainPassword: 'string',
      domainUserName: 'string',
      enableAdminAccess: 'boolean',
      enableCrossDesktopAccess: 'boolean',
      enableInternetAccess: 'boolean',
      fileSystemIds: { 'type': 'array', 'itemType': 'string' },
      logs: { 'type': 'array', 'itemType': DescribeDirectoriesResponseBodyDirectoriesLogs },
      mfaEnabled: 'boolean',
      name: 'string',
      needVerifyLoginRisk: 'boolean',
      ouName: 'string',
      ssoEnabled: 'boolean',
      status: 'string',
      subDnsAddress: { 'type': 'array', 'itemType': 'string' },
      subDomainName: 'string',
      trustPassword: 'string',
      vSwitchIds: { 'type': 'array', 'itemType': 'string' },
      vpcId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.ADConnectors)) {
      $dara.Model.validateArray(this.ADConnectors);
    }
    if(Array.isArray(this.dnsAddress)) {
      $dara.Model.validateArray(this.dnsAddress);
    }
    if(Array.isArray(this.fileSystemIds)) {
      $dara.Model.validateArray(this.fileSystemIds);
    }
    if(Array.isArray(this.logs)) {
      $dara.Model.validateArray(this.logs);
    }
    if(Array.isArray(this.subDnsAddress)) {
      $dara.Model.validateArray(this.subDnsAddress);
    }
    if(Array.isArray(this.vSwitchIds)) {
      $dara.Model.validateArray(this.vSwitchIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFlowStatisticResponseBodyDesktopFlowStatistic extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * @example
   * ecd-8bslxqq0csytn****
   */
  desktopId?: string;
  /**
   * @remarks
   * The name of the cloud computer.
   * 
   * @example
   * desktop-1
   */
  desktopName?: string;
  /**
   * @remarks
   * The traffic amount. Unit: KB.
   * 
   * @example
   * 1000
   */
  flowIn?: string;
  /**
   * @remarks
   * The traffic ranking.
   * 
   * @example
   * 1
   */
  flowRank?: number;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      flowIn: 'FlowIn',
      flowRank: 'FlowRank',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      desktopName: 'string',
      flowIn: 'string',
      flowRank: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktopsSessions extends $dara.Model {
  /**
   * @remarks
   * The ID of the end user that connects to the cloud computer.
   * 
   * @example
   * end user id
   */
  endUserId?: string;
  static names(): { [key: string]: string } {
    return {
      endUserId: 'EndUserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endUserId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops extends $dara.Model {
  /**
   * @remarks
   * The current version of the image used by the cloud computer.
   * 
   * @example
   * 0.0.1-D-20220513.143129
   */
  currentAppVersion?: string;
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * @example
   * ecd-bvdtu3jn97o1r****
   */
  desktopId?: string;
  /**
   * @remarks
   * The name of the cloud computer.
   * 
   * @example
   * TestDesktop
   */
  desktopName?: string;
  /**
   * @remarks
   * > This parameter is not publicly available.
   * 
   * @example
   * To be hidden
   */
  fotaProject?: string;
  /**
   * @remarks
   * The ID of the office network.
   * 
   * @example
   * cn-hangzhou+dir-815419****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The connected sessions.
   */
  sessions?: DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktopsSessions[];
  /**
   * @remarks
   * The status of the cloud computer.
   * 
   * Valid values:
   * 
   * *   0: The cloud computer is being created.
   * *   1: The cloud computer is being started.
   * *   2: The cloud computer is running.
   * *   3: The cloud computer is being stopped.
   * *   5: The cloud computer is stopped.
   * *   6: The cloud computer expires.
   * *   7: The cloud computer is deleted.
   * *   9: Failed to create the cloud computer.
   * 
   * @example
   * 2
   */
  status?: number;
  static names(): { [key: string]: string } {
    return {
      currentAppVersion: 'CurrentAppVersion',
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      fotaProject: 'FotaProject',
      officeSiteId: 'OfficeSiteId',
      sessions: 'Sessions',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentAppVersion: 'string',
      desktopId: 'string',
      desktopName: 'string',
      fotaProject: 'string',
      officeSiteId: 'string',
      sessions: { 'type': 'array', 'itemType': DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktopsSessions },
      status: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.sessions)) {
      $dara.Model.validateArray(this.sessions);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFotaTasksResponseBodyFotaTasks extends $dara.Model {
  /**
   * @remarks
   * The image version. You can call the [DescribeImages](https://help.aliyun.com/document_detail/188895.html) operation to obtain the value of this parameter.
   * 
   * @example
   * 0.0.1-D-20220513.143129
   */
  appVersion?: string;
  /**
   * @remarks
   * >  This parameter is not publicly available.
   * 
   * @example
   * To be hidden.
   */
  fotaProject?: string;
  /**
   * @remarks
   * The number of custom images that can be updated to this version.
   * 
   * @example
   * 1
   */
  pendingCustomImageCount?: number;
  /**
   * @remarks
   * The number of cloud computers whose images can be updated to this version.
   * 
   * @example
   * 1
   */
  pendingDesktopCount?: number;
  /**
   * @remarks
   * The time when the image version available for update was published.
   * 
   * @example
   * 2022-05-31T04:28:48Z
   */
  publishTime?: string;
  /**
   * @remarks
   * The description of the image version available for update.
   * 
   * @example
   * test
   */
  releaseNote?: string;
  /**
   * @remarks
   * The size of the update package. Unit: KB.
   * 
   * @example
   * 568533470
   */
  size?: number;
  /**
   * @remarks
   * Indicates whether the image update task is automatically pushed.
   * 
   * Valid values:
   * 
   * *   Running: automatically pushes the image update task.
   * *   Pending: does not automatically push the image update task.
   * 
   * @example
   * valid
   */
  status?: string;
  /**
   * @remarks
   * The ID of the image upgrade task.
   * 
   * @example
   * aot-c4khwrp9ocml4****
   */
  taskUid?: string;
  static names(): { [key: string]: string } {
    return {
      appVersion: 'AppVersion',
      fotaProject: 'FotaProject',
      pendingCustomImageCount: 'PendingCustomImageCount',
      pendingDesktopCount: 'PendingDesktopCount',
      publishTime: 'PublishTime',
      releaseNote: 'ReleaseNote',
      size: 'Size',
      status: 'Status',
      taskUid: 'TaskUid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appVersion: 'string',
      fotaProject: 'string',
      pendingCustomImageCount: 'number',
      pendingDesktopCount: 'number',
      publishTime: 'string',
      releaseNote: 'string',
      size: 'number',
      status: 'string',
      taskUid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGuestApplicationsResponseBodyApplicationsProcessData extends $dara.Model {
  /**
   * @remarks
   * The application name.
   * 
   * @example
   * Google Chrome
   */
  applicationName?: string;
  /**
   * @remarks
   * The application version.
   * 
   * @example
   * 115.0.5790.110
   */
  applicationVersion?: string;
  /**
   * @remarks
   * The CPU utilization (%).
   * 
   * @example
   * 89
   */
  cpuPercent?: number;
  /**
   * @remarks
   * The GPU utilization (%).
   * 
   * @example
   * 15
   */
  gpuPercent?: number;
  /**
   * @remarks
   * The I/O read and write performance.
   * 
   * @example
   * 124906.0
   */
  iospeed?: number;
  /**
   * @remarks
   * The memory utilization (%).
   * 
   * @example
   * 34
   */
  memPercent?: number;
  /**
   * @remarks
   * The PID.
   * 
   * @example
   * 1357
   */
  pid?: number;
  /**
   * @remarks
   * The path to the process.
   * 
   * @example
   * C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\ch****.exe
   */
  processPath?: string;
  static names(): { [key: string]: string } {
    return {
      applicationName: 'ApplicationName',
      applicationVersion: 'ApplicationVersion',
      cpuPercent: 'CpuPercent',
      gpuPercent: 'GpuPercent',
      iospeed: 'Iospeed',
      memPercent: 'MemPercent',
      pid: 'Pid',
      processPath: 'ProcessPath',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applicationName: 'string',
      applicationVersion: 'string',
      cpuPercent: 'number',
      gpuPercent: 'number',
      iospeed: 'number',
      memPercent: 'number',
      pid: 'number',
      processPath: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGuestApplicationsResponseBodyApplications extends $dara.Model {
  /**
   * @remarks
   * The application name.
   * 
   * @example
   * Google Chrome
   */
  applicationName?: string;
  /**
   * @remarks
   * The application version.
   * 
   * @example
   * 115.0.5790.110
   */
  applicationVersion?: string;
  /**
   * @remarks
   * The CPU utilization (%).
   * 
   * @example
   * 89
   */
  cpuPercent?: number;
  /**
   * @remarks
   * The GPU utilization (%).
   * 
   * @example
   * 15
   */
  gpuPercent?: number;
  /**
   * @remarks
   * The icon URL of the application.
   * 
   * @example
   * https://app-center-icon-prod-shanghai.oss-cn-shanghai.aliyuncs.com/market/preload/default****.png
   */
  iconUrl?: string;
  /**
   * @remarks
   * The I/O read and write performance.
   * 
   * @example
   * 124906.0
   */
  ioSpeed?: number;
  /**
   * @remarks
   * The memory utilization (%).
   * 
   * @example
   * 34
   */
  memPercent?: number;
  /**
   * @remarks
   * The process ID (PID).
   * 
   * @example
   * 1357
   */
  pid?: number;
  /**
   * @remarks
   * The process information.
   */
  processData?: DescribeGuestApplicationsResponseBodyApplicationsProcessData[];
  /**
   * @remarks
   * The path to the process.
   * 
   * @example
   * C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\ch****.exe
   */
  processPath?: string;
  /**
   * @remarks
   * The application status.
   * 
   * @example
   * Running
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      applicationName: 'ApplicationName',
      applicationVersion: 'ApplicationVersion',
      cpuPercent: 'CpuPercent',
      gpuPercent: 'GpuPercent',
      iconUrl: 'IconUrl',
      ioSpeed: 'IoSpeed',
      memPercent: 'MemPercent',
      pid: 'Pid',
      processData: 'ProcessData',
      processPath: 'ProcessPath',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applicationName: 'string',
      applicationVersion: 'string',
      cpuPercent: 'number',
      gpuPercent: 'number',
      iconUrl: 'string',
      ioSpeed: 'number',
      memPercent: 'number',
      pid: 'number',
      processData: { 'type': 'array', 'itemType': DescribeGuestApplicationsResponseBodyApplicationsProcessData },
      processPath: 'string',
      status: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.processData)) {
      $dara.Model.validateArray(this.processData);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeImageModifiedRecordsResponseBodyImageModifiedRecords extends $dara.Model {
  /**
   * @remarks
   * The ID of the original image.
   * 
   * @example
   * m-8rnz2imrpcfuh****
   */
  imageId?: string;
  /**
   * @remarks
   * The name of the original image.
   * 
   * @example
   * win10-0307
   */
  imageName?: string;
  /**
   * @remarks
   * The ID of the new image after the image was modified.
   * 
   * @example
   * xxxNewImageID
   */
  newImageId?: string;
  /**
   * @remarks
   * The name of the new image after the image was modified.
   * 
   * @example
   * xxxxImageID
   */
  newImageName?: string;
  /**
   * @remarks
   * The status of the image modification.
   * 
   * Valid values:
   * 
   * *   0: The image is being modified.
   * 
   * *   1: The image is successfully modified.
   * 
   * *   2: The image fails to be modified.
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * The time when the image was last modified.
   * 
   * @example
   * 2022-03-03T02:43:44.851Z
   */
  updateTime?: string;
  static names(): { [key: string]: string } {
    return {
      imageId: 'ImageId',
      imageName: 'ImageName',
      newImageId: 'NewImageId',
      newImageName: 'NewImageName',
      status: 'Status',
      updateTime: 'UpdateTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      imageId: 'string',
      imageName: 'string',
      newImageId: 'string',
      newImageName: 'string',
      status: 'number',
      updateTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeImagesResponseBodyImages extends $dara.Model {
  /**
   * @remarks
   * The version of the image.
   * 
   * @example
   * 1.0.0
   */
  appVersion?: string;
  /**
   * @remarks
   * The time when the image was created.
   * 
   * @example
   * 2018-01-10T01:01:10Z
   */
  creationTime?: string;
  /**
   * @remarks
   * The size of the data disk. Unit: GiB.
   * 
   * @example
   * 150
   */
  dataDiskSize?: number;
  /**
   * @remarks
   * The description of the image.
   * 
   * @example
   * This is description.
   */
  description?: string;
  /**
   * @remarks
   * Indicates whether the image is a GPU-accelerated image.
   * 
   * @example
   * false
   */
  gpuCategory?: boolean;
  /**
   * @remarks
   * The version number of the GPU driver.
   * 
   * @example
   * 417.22
   */
  gpuDriverVersion?: string;
  /**
   * @remarks
   * The ID of the image.
   * 
   * @example
   * m-gx2x1dhsmusr2****
   */
  imageId?: string;
  /**
   * @remarks
   * The type of the image.
   * 
   * Valid values:
   * 
   * *   SYSTEM
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CUSTOM
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * SYSTEM
   */
  imageType?: string;
  /**
   * @remarks
   * The name of the image.
   * 
   * @example
   * testImageName
   */
  name?: string;
  /**
   * @remarks
   * The type of the operating system.
   * 
   * @example
   * WINDOWS
   */
  osType?: string;
  /**
   * @remarks
   * The operating system type of the image.
   * 
   * Valid values:
   * 
   * *   Ubuntu
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Windows Server 2022
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   UOS
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CentOS
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Windows Server 2019
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   SQL Server 2016
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Windows 10
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Windows Server 2019
   */
  platform?: string;
  /**
   * @remarks
   * The creation progress of the image. Unit: %.
   * 
   * @example
   * 100%
   */
  progress?: string;
  /**
   * @remarks
   * The protocol type.
   * 
   * Valid values:
   * 
   * *   HDX: High-definition Experience (HDX) protocol
   * *   ASP: in-house Adaptive Streaming Protocol (ASP) (recommended)
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  /**
   * @remarks
   * The type of the image session.
   * 
   * Valid values:
   * 
   * *   SINGLE_SESSION: single-session image.
   * 
   * *   MULTIPLE_SESSION: multi-session image.
   * 
   * @example
   * MULTIPLE_SESSION
   */
  sessionType?: string;
  /**
   * @remarks
   * The number of shared images.
   * 
   * @example
   * 1
   */
  sharedCount?: number;
  /**
   * @remarks
   * The size of the image. Unit: GiB.
   * 
   * @example
   * 40
   */
  size?: number;
  /**
   * @remarks
   * The status of the image.
   * 
   * Valid values:
   * 
   * *   Creating
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Available
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CreateFailed
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Available
   */
  status?: string;
  /**
   * @remarks
   * The languages of the operating system.
   */
  supportedLanguages?: string[];
  /**
   * @remarks
   * The time when the image was last modified.
   * 
   * @example
   * 2021-12-22T02:48:43Z
   */
  updateTime?: string;
  /**
   * @remarks
   * Indicates whether disk encryption is enabled.
   * 
   * @example
   * false
   */
  volumeEncryptionEnabled?: boolean;
  /**
   * @remarks
   * The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.
   * 
   * @example
   * 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
   */
  volumeEncryptionKey?: string;
  static names(): { [key: string]: string } {
    return {
      appVersion: 'AppVersion',
      creationTime: 'CreationTime',
      dataDiskSize: 'DataDiskSize',
      description: 'Description',
      gpuCategory: 'GpuCategory',
      gpuDriverVersion: 'GpuDriverVersion',
      imageId: 'ImageId',
      imageType: 'ImageType',
      name: 'Name',
      osType: 'OsType',
      platform: 'Platform',
      progress: 'Progress',
      protocolType: 'ProtocolType',
      sessionType: 'SessionType',
      sharedCount: 'SharedCount',
      size: 'Size',
      status: 'Status',
      supportedLanguages: 'SupportedLanguages',
      updateTime: 'UpdateTime',
      volumeEncryptionEnabled: 'VolumeEncryptionEnabled',
      volumeEncryptionKey: 'VolumeEncryptionKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appVersion: 'string',
      creationTime: 'string',
      dataDiskSize: 'number',
      description: 'string',
      gpuCategory: 'boolean',
      gpuDriverVersion: 'string',
      imageId: 'string',
      imageType: 'string',
      name: 'string',
      osType: 'string',
      platform: 'string',
      progress: 'string',
      protocolType: 'string',
      sessionType: 'string',
      sharedCount: 'number',
      size: 'number',
      status: 'string',
      supportedLanguages: { 'type': 'array', 'itemType': 'string' },
      updateTime: 'string',
      volumeEncryptionEnabled: 'boolean',
      volumeEncryptionKey: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.supportedLanguages)) {
      $dara.Model.validateArray(this.supportedLanguages);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInvocationsResponseBodyInvocationsInvokeDesktops extends $dara.Model {
  /**
   * @remarks
   * The time when the command execution was performed.
   * 
   * @example
   * 2020-12-20T06:15:54Z
   */
  creationTime?: string;
  /**
   * @remarks
   * The ID of the cloud desktop.
   * 
   * @example
   * ecd-7w78ozhjcwa3u****
   */
  desktopId?: string;
  /**
   * @remarks
   * The name of the cloud desktop.
   * 
   * @example
   * demo1234
   */
  desktopName?: string;
  /**
   * @remarks
   * The size of the text that is truncated and discarded when the Output value exceeds 24 KB in size.
   * 
   * @example
   * 0
   */
  dropped?: number;
  /**
   * @remarks
   * The code that indicates the reason why a command failed to be sent or executed. The valid values include:
   * 
   * *   If this parameter is empty, the execution is normal.
   * *   InstanceNotExists: The specified cloud desktop does not exist or is released.
   * *   InstanceReleased: The cloud desktop is released during the execution.
   * *   InstanceNotRunning: The cloud desktop is not running during the execution.
   * *   CommandNotApplicable: The command cannot be used on the cloud desktop.
   * *   ClientNotRunning: The Cloud Assistant client is not running.
   * *   ClientNotResponse: The Cloud Assistant client does not respond.
   * *   ClientIsUpgrading: The Cloud Assistant client is being upgraded.
   * *   ClientNeedUpgrade: The Cloud Assistant client needs to be upgraded.
   * *   DeliveryTimeout: The time to send the command in the request times out.
   * *   ExecutionTimeout: The execution times out.
   * *   ExecutionException: An exception occurs during the execution.
   * *   ExecutionInterrupted: The execution is interrupted.
   * *   ExitCodeNonzero: The execution finishes, but the exit code is not 0.
   * 
   * @example
   * InstanceNotExists
   */
  errorCode?: string;
  /**
   * @remarks
   * Details about the reason why the command failed to be sent or executed. The valid values include:
   * 
   * *   If this parameter is empty, the execution is normal.
   * *   the specified instance does not exists: The cloud desktop does not exist or is released.
   * *   the instance has released when create task: The cloud desktop is released during execution.
   * *   the instance is not running when create task: The cloud desktop is not running when the execution is being performed.
   * *   the command is not applicable: The command cannot be used on the specified cloud desktop.
   * *   the aliyun service is not running on the instance: The Cloud Assistance client is not running.
   * *   the aliyun service in the instance does not response: The Cloud Assistant client is not responding.
   * *   the aliyun service in the instance is upgrading now: The Cloud Assistant client is being upgraded.
   * *   the aliyun service in the instance need upgrade: The Cloud Assistant client needs to be upgraded.
   * *   the command delivery has been timeout: The command that is sent in the request times out.
   * *   the command execution has been timeout: The execution times out.
   * *   the command execution got an exception: An exception occurs when the command is running.
   * *   the command execution has been interrupted: The execution is interrupted.
   * *   the command execution exit code is not zero: The execution finishes, but the exit code is not 0.
   * 
   * @example
   * The specified instance does not exist.
   */
  errorInfo?: string;
  /**
   * @remarks
   * The exit code of the execution.
   * 
   * @example
   * 0
   */
  exitCode?: number;
  /**
   * @remarks
   * The time when the command execution ended.
   * 
   * @example
   * 2020-12-20T06:15:56Z
   */
  finishTime?: string;
  /**
   * @remarks
   * The execution status on the cloud desktop.
   * 
   * @example
   * Success
   */
  invocationStatus?: string;
  /**
   * @remarks
   * The command output.
   * 
   * *   If the IncludeOutput parameter is set to false, Output is not returned.
   * *   If the ContentEncoding parameter is set to Base64, the value of Output is the output information that is encoded in Base64.
   * 
   * @example
   * OutPutTestmsg
   */
  output?: string;
  /**
   * @remarks
   * The number of times that the command is executed on the cloud desktop.
   * 
   * @example
   * 0
   */
  repeats?: number;
  /**
   * @remarks
   * The start time of the execution on the cloud desktop.
   * 
   * @example
   * 2020-12-20T06:15:55Z
   */
  startTime?: string;
  /**
   * @remarks
   * The time when you called the [StopInvocation](~~196957#doc-api-ecd-StopInvocation~~ "You can call this operation to stop a Cloud Assistant command that is running on one or cloud desktops.") operation to manually stop the command.
   * 
   * @example
   * 2020-12-25T09:15:47Z
   */
  stopTime?: string;
  /**
   * @remarks
   * The time when the execution status was updated.
   * 
   * @example
   * 2020-12-25T06:15:56Z
   */
  updateTime?: string;
  static names(): { [key: string]: string } {
    return {
      creationTime: 'CreationTime',
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      dropped: 'Dropped',
      errorCode: 'ErrorCode',
      errorInfo: 'ErrorInfo',
      exitCode: 'ExitCode',
      finishTime: 'FinishTime',
      invocationStatus: 'InvocationStatus',
      output: 'Output',
      repeats: 'Repeats',
      startTime: 'StartTime',
      stopTime: 'StopTime',
      updateTime: 'UpdateTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creationTime: 'string',
      desktopId: 'string',
      desktopName: 'string',
      dropped: 'number',
      errorCode: 'string',
      errorInfo: 'string',
      exitCode: 'number',
      finishTime: 'string',
      invocationStatus: 'string',
      output: 'string',
      repeats: 'number',
      startTime: 'string',
      stopTime: 'string',
      updateTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInvocationsResponseBodyInvocations extends $dara.Model {
  /**
   * @remarks
   * The Base64-encoded command content.
   * 
   * @example
   * cnBtIC1xYSB8IGdyZXAgdnNm****
   */
  commandContent?: string;
  /**
   * @remarks
   * The type of the command.
   * 
   * @example
   * RunPowerShellScript
   */
  commandType?: string;
  /**
   * @remarks
   * The time when the execution task is created.
   * 
   * @example
   * 2020-12-19T09:15:46Z
   */
  creationTime?: string;
  /**
   * @remarks
   * The ID of the end user.
   * 
   * @example
   * User1
   */
  endUserId?: string;
  /**
   * @remarks
   * The overall execution status of the command. The overall execution status is determined by the execution status on all involved cloud desktops. The valid values include:
   * 
   * *   Pending: The system is verifying or sending the command. If the execution status on at least one cloud desktop is Pending, the overall execution status is Pending.
   * 
   * *   Running: The execution is in progress on cloud desktops. If the execution status on at least one cloud desktop is Running, the overall execution status is Running.
   * 
   * *   Success: If the execution status on all cloud desktops is Success or Stopped, or the execution status on at least one cloud desktop is Success, the overall execution status is Success.
   * 
   * *   Failed: If the execution status on all cloud desktops is Stopped or Failed, the overall execution status is Failed. If one or more execution status of a cloud desktop is one of the following values, Failed is returned:
   * 
   *     *   Invalid: The command is invalid.
   *     *   Aborted: The command fails to be sent.
   *     *   Failed: The command is executed, but the exit code is not 0.
   *     *   Timeout: The command times out.
   *     *   Error: An error occurs in the command.
   * 
   * *   Stopping: The execution is being stopped. If the execution status on at least one cloud desktop is Stopping, the overall execution state is Stopping.
   * 
   * *   Stopped: The execution is stopped. If the execution status on all cloud desktops is Stopped, the overall execution state is Stopped. If the execution status on a cloud desktop is one of the following values, Stopped is returned:
   * 
   *     *   Cancelled: The execution is canceled.
   *     *   Terminated: The execution is terminated.
   * 
   * *   PartialFailed: The execution succeeded on some cloud desktops and failed on others. If the execution status on different cloud desktops is Success, Failed, or Stopped, the overall execution state is PartialFailed.
   * 
   * @example
   * Pending
   */
  invocationStatus?: string;
  invokeDesktopCount?: number;
  invokeDesktopSucceedCount?: number;
  /**
   * @remarks
   * The cloud desktops on which the command is executed.
   */
  invokeDesktops?: DescribeInvocationsResponseBodyInvocationsInvokeDesktops[];
  /**
   * @remarks
   * The ID of the execution.
   * 
   * @example
   * t-hz0jdfwd9f****
   */
  invokeId?: string;
  static names(): { [key: string]: string } {
    return {
      commandContent: 'CommandContent',
      commandType: 'CommandType',
      creationTime: 'CreationTime',
      endUserId: 'EndUserId',
      invocationStatus: 'InvocationStatus',
      invokeDesktopCount: 'InvokeDesktopCount',
      invokeDesktopSucceedCount: 'InvokeDesktopSucceedCount',
      invokeDesktops: 'InvokeDesktops',
      invokeId: 'InvokeId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commandContent: 'string',
      commandType: 'string',
      creationTime: 'string',
      endUserId: 'string',
      invocationStatus: 'string',
      invokeDesktopCount: 'number',
      invokeDesktopSucceedCount: 'number',
      invokeDesktops: { 'type': 'array', 'itemType': DescribeInvocationsResponseBodyInvocationsInvokeDesktops },
      invokeId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.invokeDesktops)) {
      $dara.Model.validateArray(this.invokeDesktops);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeKmsKeysResponseBodyKeys extends $dara.Model {
  /**
   * @remarks
   * The alias of the key.
   * 
   * @example
   * TestAlias
   */
  alias?: string;
  /**
   * @remarks
   * The Alibaba Cloud Resource Name (ARN) of the key in KMS.
   * 
   * @example
   * acs:kms:cn-hangzhou:154035569884****:key/05754286-3ba2-4fa6-8d41-4323aca6****
   */
  arn?: string;
  /**
   * @remarks
   * The ID of the key.
   * 
   * @example
   * 05754286-3ba2-4fa6-8d41-4323aca6****
   */
  keyId?: string;
  /**
   * @remarks
   * The type of the key.
   * 
   * @example
   * ServiceKey
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      arn: 'Arn',
      keyId: 'KeyId',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      arn: 'string',
      keyId: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeModificationPriceResponseBodyPriceInfoPricePromotions extends $dara.Model {
  /**
   * @example
   * test
   */
  optionCode?: string;
  promotionDesc?: string;
  /**
   * @example
   * promo_option
   */
  promotionId?: string;
  promotionName?: string;
  /**
   * @example
   * false
   */
  selected?: boolean;
  static names(): { [key: string]: string } {
    return {
      optionCode: 'OptionCode',
      promotionDesc: 'PromotionDesc',
      promotionId: 'PromotionId',
      promotionName: 'PromotionName',
      selected: 'Selected',
    };
  }

  static types(): { [key: string]: any } {
    return {
      optionCode: 'string',
      promotionDesc: 'string',
      promotionId: 'string',
      promotionName: 'string',
      selected: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeModificationPriceResponseBodyPriceInfoPrice extends $dara.Model {
  /**
   * @example
   * CNY
   */
  currency?: string;
  /**
   * @example
   * 15.8
   */
  discountPrice?: number;
  orderLines?: { [key: string]: string };
  /**
   * @example
   * 79.0
   */
  originalPrice?: number;
  promotions?: DescribeModificationPriceResponseBodyPriceInfoPricePromotions[];
  /**
   * @example
   * 63.2
   */
  tradePrice?: number;
  static names(): { [key: string]: string } {
    return {
      currency: 'Currency',
      discountPrice: 'DiscountPrice',
      orderLines: 'OrderLines',
      originalPrice: 'OriginalPrice',
      promotions: 'Promotions',
      tradePrice: 'TradePrice',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currency: 'string',
      discountPrice: 'number',
      orderLines: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      originalPrice: 'number',
      promotions: { 'type': 'array', 'itemType': DescribeModificationPriceResponseBodyPriceInfoPricePromotions },
      tradePrice: 'number',
    };
  }

  validate() {
    if(this.orderLines) {
      $dara.Model.validateMap(this.orderLines);
    }
    if(Array.isArray(this.promotions)) {
      $dara.Model.validateArray(this.promotions);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeModificationPriceResponseBodyPriceInfoRules extends $dara.Model {
  description?: string;
  /**
   * @example
   * 14806
   */
  ruleId?: number;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      ruleId: 'RuleId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      ruleId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeModificationPriceResponseBodyPriceInfo extends $dara.Model {
  price?: DescribeModificationPriceResponseBodyPriceInfoPrice;
  rules?: DescribeModificationPriceResponseBodyPriceInfoRules[];
  static names(): { [key: string]: string } {
    return {
      price: 'Price',
      rules: 'Rules',
    };
  }

  static types(): { [key: string]: any } {
    return {
      price: DescribeModificationPriceResponseBodyPriceInfoPrice,
      rules: { 'type': 'array', 'itemType': DescribeModificationPriceResponseBodyPriceInfoRules },
    };
  }

  validate() {
    if(this.price && typeof (this.price as any).validate === 'function') {
      (this.price as any).validate();
    }
    if(Array.isArray(this.rules)) {
      $dara.Model.validateArray(this.rules);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNASFileSystemsResponseBodyFileSystemsAppInstanceGroups extends $dara.Model {
  appInstanceGroupId?: string;
  appInstanceGroupName?: string;
  static names(): { [key: string]: string } {
    return {
      appInstanceGroupId: 'AppInstanceGroupId',
      appInstanceGroupName: 'AppInstanceGroupName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appInstanceGroupId: 'string',
      appInstanceGroupName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNASFileSystemsResponseBodyFileSystemsDesktopGroups extends $dara.Model {
  /**
   * @remarks
   * The ID of the desktop group.
   * 
   * @example
   * dg-9eeyf15b25nyl****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The name of the desktop group.
   * 
   * @example
   * test_dg
   */
  desktopGroupName?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      desktopGroupName: 'DesktopGroupName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      desktopGroupName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNASFileSystemsResponseBodyFileSystemsOfficeSites extends $dara.Model {
  officeSiteId?: string;
  officeSiteName?: string;
  static names(): { [key: string]: string } {
    return {
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      officeSiteId: 'string',
      officeSiteName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNASFileSystemsResponseBodyFileSystems extends $dara.Model {
  allowOperateUserDrive?: boolean;
  appInstanceGroups?: DescribeNASFileSystemsResponseBodyFileSystemsAppInstanceGroups[];
  /**
   * @remarks
   * The total capacity of the NAS file system. Unit: GiB.
   * 
   * *   The Capacity type has 10 PiB of storage, which is equal to 10,485,760 GiB.
   * *   The Performance type has 1 PiB of storage, which is equal to 1,048,576 GiB.
   * 
   * @example
   * 10485760
   */
  capacity?: number;
  /**
   * @remarks
   * The time when the NAS file system was created.
   * 
   * @example
   * 2021-05-10T11:39Z
   */
  createTime?: string;
  /**
   * @remarks
   * The description of the NAS file system.
   * 
   * @example
   * testDescription
   */
  description?: string;
  /**
   * @remarks
   * The desktop groups that are associated with the NAS file systems that support the UPM feature.
   */
  desktopGroups?: DescribeNASFileSystemsResponseBodyFileSystemsDesktopGroups[];
  /**
   * @remarks
   * Indicates whether disk encryption is enabled.
   * 
   * @example
   * false
   */
  encryptionEnabled?: boolean;
  /**
   * @remarks
   * The ID of the NAS file system.
   * 
   * @example
   * 04f314****
   */
  fileSystemId?: string;
  /**
   * @remarks
   * The name of the NAS file system.
   * 
   * @example
   * testNAS
   */
  fileSystemName?: string;
  /**
   * @remarks
   * The status of the NAS file system. The possible values include:
   * 
   * *   Pending: The NAS file system is being created.
   * *   Running: The NAS file system is running.
   * *   Stopped: The NAS file system is stopped.
   * *   Deleting: The NAS file system is being deleted.
   * *   Deleted: The NAS file system is deleted.
   * *   Invalid: The NAS file system is invalid.
   * 
   * @example
   * Running
   */
  fileSystemStatus?: string;
  /**
   * @remarks
   * The type of the NAS file system. Valid value: Universal NAS. This value indicates that the NAS file system is a General-purpose one.
   * 
   * @example
   * standard
   */
  fileSystemType?: string;
  /**
   * @remarks
   * The used storage of the NAS file system. Unit: byte.
   * 
   * @example
   * 0
   */
  meteredSize?: number;
  /**
   * @remarks
   * The domain name of the mount target.
   * 
   * @example
   * 04f314****-at***.cn-hangzhou.nas.aliyuncs.com
   */
  mountTargetDomain?: string;
  /**
   * @remarks
   * The status of the mount target. The possible values include:
   * 
   * *   Pending: The mount target is being created.
   * *   Active: The mount target is enabled.
   * *   Inactive: The mount target is disabled.
   * *   Deleting: The mount target is being deleted.
   * *   Invalid: The mount target is invalid.
   * 
   * @example
   * Active
   */
  mountTargetStatus?: string;
  /**
   * @remarks
   * The ID of the workspace.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The name of the workspace.
   * 
   * @example
   * test
   */
  officeSiteName?: string;
  officeSites?: DescribeNASFileSystemsResponseBodyFileSystemsOfficeSites[];
  /**
   * @remarks
   * Indicates whether the User Profile Management (UPM) feature is supported.
   * 
   * @example
   * false
   */
  profileCompatible?: boolean;
  /**
   * @remarks
   * The ID of the region.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  scene?: string;
  /**
   * @remarks
   * The storage type of the NAS file system. Valid values:
   * 
   * *   Capacity
   * *   Performance
   * 
   * @example
   * Capacity
   */
  storageType?: string;
  /**
   * @remarks
   * Indicates whether the Server Message Block (SMB) access control list (ACL) feature was enabled.
   * 
   * @example
   * false
   */
  supportAcl?: boolean;
  /**
   * @remarks
   * The ID of the zone where the NAS file system resides.
   * 
   * @example
   * cn-hangzhou-f
   */
  zoneId?: string;
  static names(): { [key: string]: string } {
    return {
      allowOperateUserDrive: 'AllowOperateUserDrive',
      appInstanceGroups: 'AppInstanceGroups',
      capacity: 'Capacity',
      createTime: 'CreateTime',
      description: 'Description',
      desktopGroups: 'DesktopGroups',
      encryptionEnabled: 'EncryptionEnabled',
      fileSystemId: 'FileSystemId',
      fileSystemName: 'FileSystemName',
      fileSystemStatus: 'FileSystemStatus',
      fileSystemType: 'FileSystemType',
      meteredSize: 'MeteredSize',
      mountTargetDomain: 'MountTargetDomain',
      mountTargetStatus: 'MountTargetStatus',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      officeSites: 'OfficeSites',
      profileCompatible: 'ProfileCompatible',
      regionId: 'RegionId',
      scene: 'Scene',
      storageType: 'StorageType',
      supportAcl: 'SupportAcl',
      zoneId: 'ZoneId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allowOperateUserDrive: 'boolean',
      appInstanceGroups: { 'type': 'array', 'itemType': DescribeNASFileSystemsResponseBodyFileSystemsAppInstanceGroups },
      capacity: 'number',
      createTime: 'string',
      description: 'string',
      desktopGroups: { 'type': 'array', 'itemType': DescribeNASFileSystemsResponseBodyFileSystemsDesktopGroups },
      encryptionEnabled: 'boolean',
      fileSystemId: 'string',
      fileSystemName: 'string',
      fileSystemStatus: 'string',
      fileSystemType: 'string',
      meteredSize: 'number',
      mountTargetDomain: 'string',
      mountTargetStatus: 'string',
      officeSiteId: 'string',
      officeSiteName: 'string',
      officeSites: { 'type': 'array', 'itemType': DescribeNASFileSystemsResponseBodyFileSystemsOfficeSites },
      profileCompatible: 'boolean',
      regionId: 'string',
      scene: 'string',
      storageType: 'string',
      supportAcl: 'boolean',
      zoneId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.appInstanceGroups)) {
      $dara.Model.validateArray(this.appInstanceGroups);
    }
    if(Array.isArray(this.desktopGroups)) {
      $dara.Model.validateArray(this.desktopGroups);
    }
    if(Array.isArray(this.officeSites)) {
      $dara.Model.validateArray(this.officeSites);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNetworkPackagesResponseBodyNetworkPackages extends $dara.Model {
  /**
   * @remarks
   * The bandwidth provided by the premium bandwidth plan. Unit: Mbit/s.
   * 
   * @example
   * 10
   */
  bandwidth?: number;
  /**
   * @remarks
   * The business status.
   * 
   * Valid values:
   * 
   * *   Expired
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Normal
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Normal
   */
  businessStatus?: string;
  /**
   * @remarks
   * The time when the premium bandwidth plan was created.
   * 
   * @example
   * 2021-05-10T02:35:26Z
   */
  createTime?: string;
  /**
   * @remarks
   * The public egress IP address of the premium bandwidth plan.
   */
  eipAddresses?: string[];
  /**
   * @remarks
   * The time when the premium bandwidth plan expires.
   * 
   * *   If the plan is a subscription one, the time when the plan expires is returned.
   * *   If the plan is a pay-as-you-go one, `2099-12-31T15:59:59Z` is returned.
   * 
   * @example
   * 2099-12-31T15:59:59Z
   */
  expiredTime?: string;
  /**
   * @remarks
   * The charge type of the premium bandwidth plan.
   * 
   * *   Valid value when the `PayType` parameter is set to `PrePaid`:
   * 
   *     *   PayByBandwidth: charges by fixed bandwidth.
   * 
   * *   Valid values when the `PayType` parameter is set to `PostPaid`:
   * 
   *     *   PayByTraffic: charges by data transfer.
   *     *   PayByBandwidth: charges by fixed bandwidth.
   * 
   * @example
   * PayByTraffic
   */
  internetChargeType?: string;
  /**
   * @remarks
   * The ID of the premium bandwidth plan.
   * 
   * @example
   * np-amtp8e8q1o9e4****
   */
  networkPackageId?: string;
  /**
   * @remarks
   * The status of the premium bandwidth plan.
   * 
   * Valid values:
   * 
   * *   Creating
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Released
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   InUse
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Releasing
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * InUse
   */
  networkPackageStatus?: string;
  /**
   * @remarks
   * The office network ID.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The office network name.
   * 
   * @example
   * test
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The type of the office network.
   * 
   * Valid values:
   * 
   * *   standard: advanced office network
   * *   customized: custom office network
   * *   basic: basic office network
   * 
   * @example
   * basic
   */
  officeSiteVpcType?: string;
  /**
   * @remarks
   * The billing method of the premium bandwidth plan.
   * 
   * Valid values:
   * 
   * *   PostPaid: pay-as-you-go
   * *   PrePaid: subscription
   * 
   * @example
   * PostPaid
   */
  payType?: string;
  /**
   * @remarks
   * The time when the reserved network bandwidth took effect.
   * 
   * @example
   * 2021-07-10T00:00:00Z
   */
  reservationActiveTime?: string;
  /**
   * @remarks
   * The peak bandwidth that is reserved for the premium bandwidth plan. Unit: Mbit/s.
   * 
   * @example
   * 20
   */
  reservationBandwidth?: number;
  /**
   * @remarks
   * The billing method of the reserved network bandwidth.
   * 
   * Valid values:
   * 
   * *   PayByTraffic: charges by data transfer.
   * 
   * *   PayByBandwidth: charges by fixed bandwidth.
   * 
   * @example
   * PayByBandwidth
   */
  reservationInternetChargeType?: string;
  static names(): { [key: string]: string } {
    return {
      bandwidth: 'Bandwidth',
      businessStatus: 'BusinessStatus',
      createTime: 'CreateTime',
      eipAddresses: 'EipAddresses',
      expiredTime: 'ExpiredTime',
      internetChargeType: 'InternetChargeType',
      networkPackageId: 'NetworkPackageId',
      networkPackageStatus: 'NetworkPackageStatus',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      officeSiteVpcType: 'OfficeSiteVpcType',
      payType: 'PayType',
      reservationActiveTime: 'ReservationActiveTime',
      reservationBandwidth: 'ReservationBandwidth',
      reservationInternetChargeType: 'ReservationInternetChargeType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bandwidth: 'number',
      businessStatus: 'string',
      createTime: 'string',
      eipAddresses: { 'type': 'array', 'itemType': 'string' },
      expiredTime: 'string',
      internetChargeType: 'string',
      networkPackageId: 'string',
      networkPackageStatus: 'string',
      officeSiteId: 'string',
      officeSiteName: 'string',
      officeSiteVpcType: 'string',
      payType: 'string',
      reservationActiveTime: 'string',
      reservationBandwidth: 'number',
      reservationInternetChargeType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.eipAddresses)) {
      $dara.Model.validateArray(this.eipAddresses);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOfficeSitesResponseBodyOfficeSitesADConnectors extends $dara.Model {
  /**
   * @remarks
   * The connection address of the AD connector.
   * 
   * @example
   * 172.24.*.*
   */
  ADConnectorAddress?: string;
  /**
   * @remarks
   * The status of the AD connector.
   * 
   * Valid values:
   * 
   * *   CONNECT_ERROR
   * *   RUNNING
   * *   CONNECTING (You must configure the AD domain in which the AD connector is used.)
   * *   EXPIRED
   * *   CREATING
   * 
   * @example
   * RUNNING
   */
  connectorStatus?: string;
  /**
   * @remarks
   * The ID of an elastic network interface (ENI) to which the AD connector is mounted.
   * 
   * @example
   * eni-bp1i4wx78lgosrj6****
   */
  networkInterfaceId?: string;
  /**
   * @remarks
   * The AD connector type.
   * 
   * Valid values:
   * 
   * *   1: General
   * *   2: Advanced
   * 
   * @example
   * 1
   */
  specification?: string;
  /**
   * @remarks
   * The trust password that is specified when you configure the AD trust relationship.
   * 
   * @example
   * password123***
   */
  trustKey?: string;
  /**
   * @remarks
   * The ID of the vSwitch that resides in the network of the AD connector.
   * 
   * @example
   * vsw-bp19ocz3erfx15uon****
   */
  vSwitchId?: string;
  static names(): { [key: string]: string } {
    return {
      ADConnectorAddress: 'ADConnectorAddress',
      connectorStatus: 'ConnectorStatus',
      networkInterfaceId: 'NetworkInterfaceId',
      specification: 'Specification',
      trustKey: 'TrustKey',
      vSwitchId: 'VSwitchId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ADConnectorAddress: 'string',
      connectorStatus: 'string',
      networkInterfaceId: 'string',
      specification: 'string',
      trustKey: 'string',
      vSwitchId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOfficeSitesResponseBodyOfficeSitesLogs extends $dara.Model {
  /**
   * @remarks
   * The log severity.
   * 
   * Valid values:
   * 
   * *   ERROR
   * *   INFO
   * *   WARN
   * 
   * @example
   * INFO
   */
  level?: string;
  /**
   * @remarks
   * Details of the log entry.
   * 
   * @example
   * code:success | message:Create Connector complete
   */
  message?: string;
  /**
   * @remarks
   * The step in the log entry.
   * 
   * @example
   * CREATE_CONNECTOR
   */
  step?: string;
  /**
   * @remarks
   * The time when the log entry was printed.
   * 
   * @example
   * 2021-05-12T09:42Z
   */
  timeStamp?: string;
  static names(): { [key: string]: string } {
    return {
      level: 'Level',
      message: 'Message',
      step: 'Step',
      timeStamp: 'TimeStamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      level: 'string',
      message: 'string',
      step: 'string',
      timeStamp: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOfficeSitesResponseBodyOfficeSitesResourceAmounts extends $dara.Model {
  amount?: number;
  resourceType?: string;
  static names(): { [key: string]: string } {
    return {
      amount: 'amount',
      resourceType: 'resourceType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: 'number',
      resourceType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOfficeSitesResponseBodyOfficeSites extends $dara.Model {
  /**
   * @remarks
   * Details of AD connectors.
   */
  ADConnectors?: DescribeOfficeSitesResponseBodyOfficeSitesADConnectors[];
  acceleratorId?: string;
  /**
   * @remarks
   * The hostname of the domain controller. The hostname must comply with the hostname naming convention of Windows.
   * 
   * @example
   * beijing-ad01
   */
  adHostname?: string;
  /**
   * @remarks
   * The hostname of the secondary domain controller.
   * 
   * @example
   * beijing-ad02
   */
  backupDCHostname?: string;
  /**
   * @remarks
   * The DNS address of the secondary domain controller.
   * 
   * @example
   * 172.24.XX.XX
   */
  backupDns?: string;
  /**
   * @remarks
   * The maximum public bandwidth value. Valid values: 0 to 1000.\\
   * If you leave this parameter empty or set this parameter to 0, Internet access is not enabled.
   * 
   * @example
   * 10
   */
  bandwidth?: number;
  /**
   * @remarks
   * The CEN instance status.
   * 
   * @example
   * attached
   */
  cenAttachStatus?: string;
  /**
   * @remarks
   * The CEN instance ID.
   * 
   * @example
   * cen-3gwy16dojz1m65****
   */
  cenId?: string;
  /**
   * @remarks
   * The IPv4 CIDR block of the VPC that the office network uses.
   * 
   * @example
   * 172.16.0.0/16
   */
  cidrBlock?: string;
  /**
   * @remarks
   * Indicates whether the CloudBox-based office network is created.
   * 
   * Valid values:
   * 
   * *   true
   * *   false
   * 
   * @example
   * true
   */
  cloudBoxOfficeSite?: boolean;
  /**
   * @remarks
   * The time when the office network was created.
   * 
   * @example
   * 2021-05-06T05:58Z
   */
  creationTime?: string;
  customAccessPoint?: string;
  customDnsAddress?: string[];
  /**
   * @remarks
   * The ID of the security group.
   * 
   * @example
   * sg-bp1ce64o4g9mdf5u****
   */
  customSecurityGroupId?: string;
  /**
   * @remarks
   * The method that is used to connect cloud computers that reside in the office network from Alibaba Cloud Workspace clients.
   * 
   * >  The VPC connection depends on Alibaba Cloud PrivateLink. You can use Alibaba Cloud PrivateLink for free. When you set this parameter to `VPC` or `Any`, PrivateLink is automatically activated.
   * 
   * Valid values:
   * 
   * *   INTERNET (default): Cloud computers are connected from Alibaba Cloud Workspace clients over the Internet.
   * *   VPC: Cloud computers are connected from Alibaba Cloud Workspace clients over the VPC.
   * *   ANY: Cloud computers are connected from Alibaba Cloud Workspace clients over the Internet or the VPC. When end users connect to cloud computers from Alibaba Cloud Workspace clients, you can choose a connection method based on your business requirements.
   * 
   * @example
   * INTERNET
   */
  desktopAccessType?: string;
  /**
   * @remarks
   * The number of cloud computers that are created.
   * 
   * @example
   * 1
   */
  desktopCount?: number;
  /**
   * @remarks
   * The endpoint that is used to connect to cloud computers in the directory over a VPC.
   * 
   * @example
   * http://ep-bp1s2vmbj55r5rzc****.epsrv-bp1pcfhpwvlpny01****.cn-hangzhou.privatelink.aliyuncs.com
   */
  desktopVpcEndpoint?: string;
  /**
   * @remarks
   * The array of DNS addresses in the AD domains.
   */
  dnsAddress?: string[];
  /**
   * @remarks
   * The username of a Domain Name System (DNS) user.
   * 
   * @example
   * testDnsUserName
   */
  dnsUserName?: string;
  /**
   * @remarks
   * The domain name of the enterprise AD.
   * 
   * @example
   * example.com
   */
  domainName?: string;
  /**
   * @remarks
   * The password of the domain administrator.
   * 
   * @example
   * testPassword
   */
  domainPassword?: string;
  /**
   * @remarks
   * The username of the domain administrator.
   * 
   * @example
   * Administrator
   */
  domainUserName?: string;
  /**
   * @remarks
   * Indicates whether the local administrator permissions are granted to users that are authorized to use cloud computers in the office network.
   * 
   * Valid values:
   * 
   * *   true (default)
   * *   false
   * 
   * @example
   * true
   */
  enableAdminAccess?: boolean;
  /**
   * @remarks
   * Indicates whether the connection between cloud computers in the office network is enabled. After you enable the connection between cloud computers in the office network, cloud computers in the office network can access each other.
   * 
   * @example
   * false
   */
  enableCrossDesktopAccess?: boolean;
  /**
   * @remarks
   * Indicates whether Internet access is enabled.
   * 
   * @example
   * false
   */
  enableInternetAccess?: boolean;
  /**
   * @remarks
   * Indicates whether route access control is enabled for cloud services.
   * 
   * @example
   * false
   */
  enableServiceRoute?: boolean;
  /**
   * @remarks
   * An array of File Storage NAS (NAS) file system IDs.
   */
  fileSystemIds?: string[];
  /**
   * @remarks
   * Details about registration logs.
   */
  logs?: DescribeOfficeSitesResponseBodyOfficeSitesLogs[];
  /**
   * @remarks
   * Indicates whether multi-factor authentication (MFA) is enabled.
   * 
   * @example
   * false
   */
  mfaEnabled?: boolean;
  /**
   * @remarks
   * The name of the office network. The name is unique in a region.
   * 
   * @example
   * test
   */
  name?: string;
  /**
   * @remarks
   * Indicates whether two-factor verification is enabled when an end user logs on to an Alibaba Cloud Workspace client. This parameter is required only for convenience office networks. If two-factor verification is enabled, the system checks whether security risks exist within the logon account when a convenience user logs on to the client. If risks are detected, the system sends a verification code to the email address that is associated with the account. Then, the convenience user can log on to the client only after the user enters the correct verification code.
   * 
   * @example
   * false
   */
  needVerifyLoginRisk?: boolean;
  /**
   * @remarks
   * Indicates whether the trusted device verification is enabled.
   * 
   * Valid values:
   * 
   * *   true
   * *   false
   * 
   * @example
   * true
   */
  needVerifyZeroDevice?: boolean;
  /**
   * @remarks
   * The premium bandwidth plan ID.
   * 
   * @example
   * np-amtp8e8q1o9e4****
   */
  networkPackageId?: string;
  nmVersion?: string;
  /**
   * @remarks
   * The IDs of the office networks.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The account type of the office network.
   * 
   * Valid values:
   * 
   * *   SIMPLE: the convenience account
   * *   AD_CONNECTOR: the enterprise AD account
   * 
   * @example
   * AD_CONNECTOR
   */
  officeSiteType?: string;
  /**
   * @remarks
   * The organizational unit (OU) in the AD domain to which the office network is connected.
   * 
   * @example
   * example.com/Domain Controllers
   */
  ouName?: string;
  /**
   * @remarks
   * The protocol type.
   * 
   * Valid values:
   * 
   * *   HDX
   * *   ASP
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  /**
   * @remarks
   * The IP address of the RDS license.
   * 
   * @example
   * 47.100.XX.XX
   */
  rdsLicenseAddress?: string;
  /**
   * @remarks
   * The domain name of the RDS license.
   * 
   * @example
   * test.com
   */
  rdsLicenseDomainName?: string;
  /**
   * @remarks
   * The remote desktop service (RDS) license status.
   * 
   * @example
   * 2
   */
  rdsLicenseStatus?: string;
  resourceAmounts?: DescribeOfficeSitesResponseBodyOfficeSitesResourceAmounts[];
  /**
   * @remarks
   * The security protection setting of the office network.
   * 
   * Valid values:
   * 
   * *   SASE: SASE is configured.
   * *   OFF: No security protection setting is configured.
   * 
   * @example
   * SASE
   */
  securityProtection?: string;
  /**
   * @remarks
   * Indicates whether single sign-on (SSO) is enabled.
   * 
   * @example
   * false
   */
  ssoEnabled?: boolean;
  /**
   * @remarks
   * The SSO type.
   * 
   * Valid values:
   * 
   * *   SAML.
   * 
   * @example
   * null
   */
  ssoType?: string;
  /**
   * @remarks
   * The office network status.
   * 
   * Valid values:
   * 
   * *   REGISTERING: The office network is being registered.
   * *   DEREGISTERING: The office network is being deregistered.
   * *   REGISTERED: The office network is registered.
   * *   NEEDCONFIGTRUST: A trust relationship is required for the office network.
   * *   CONFIGTRUSTFAILED: A trust relationship fails to be configured for the office network.
   * *   DEREGISTERED: The office network is deregistered.
   * *   ERROR: One or more configurations of the office network are invalid.
   * *   CONFIGTRUSTING: A trust relationship is being configured for the office network.
   * *   NEEDCONFIGUSER: Users are required for the office network.
   * 
   * @example
   * REGISTERED
   */
  status?: string;
  /**
   * @remarks
   * An array of DNS addresses for AD subdomains.
   */
  subDnsAddress?: string[];
  /**
   * @remarks
   * The username of enterprise AD subdomain.
   * 
   * @example
   * testSubDnsUserName
   */
  subDomainName?: string;
  /**
   * @remarks
   * The subnet mode of the office network.
   * 
   * Valid values:
   * 
   * *   0: disabled.
   * *   1: enabled.
   * 
   * @example
   * 0
   */
  subnetMode?: string;
  /**
   * @remarks
   * The total number of cloud computers.
   * 
   * @example
   * 0
   */
  totalEdsCount?: number;
  /**
   * @remarks
   * The number of pooled cloud computers in the cloud computer pool.
   * 
   * @example
   * 0
   */
  totalEdsCountForGroup?: number;
  totalResourceAmount?: number;
  /**
   * @remarks
   * >  This parameter is unavailable.
   * 
   * @example
   * null
   */
  trustPassword?: string;
  /**
   * @remarks
   * An array of VSwitch IDs.
   */
  vSwitchIds?: string[];
  /**
   * @remarks
   * The VPC ID.
   * 
   * @example
   * vpc-uf6tz5k67puge5jn8****
   */
  vpcId?: string;
  /**
   * @remarks
   * The VPC type.
   * 
   * Valid values:
   * 
   * *   Basic
   * *   Customized
   * *   Standard
   * 
   * @example
   * Basic
   */
  vpcType?: string;
  static names(): { [key: string]: string } {
    return {
      ADConnectors: 'ADConnectors',
      acceleratorId: 'AcceleratorId',
      adHostname: 'AdHostname',
      backupDCHostname: 'BackupDCHostname',
      backupDns: 'BackupDns',
      bandwidth: 'Bandwidth',
      cenAttachStatus: 'CenAttachStatus',
      cenId: 'CenId',
      cidrBlock: 'CidrBlock',
      cloudBoxOfficeSite: 'CloudBoxOfficeSite',
      creationTime: 'CreationTime',
      customAccessPoint: 'CustomAccessPoint',
      customDnsAddress: 'CustomDnsAddress',
      customSecurityGroupId: 'CustomSecurityGroupId',
      desktopAccessType: 'DesktopAccessType',
      desktopCount: 'DesktopCount',
      desktopVpcEndpoint: 'DesktopVpcEndpoint',
      dnsAddress: 'DnsAddress',
      dnsUserName: 'DnsUserName',
      domainName: 'DomainName',
      domainPassword: 'DomainPassword',
      domainUserName: 'DomainUserName',
      enableAdminAccess: 'EnableAdminAccess',
      enableCrossDesktopAccess: 'EnableCrossDesktopAccess',
      enableInternetAccess: 'EnableInternetAccess',
      enableServiceRoute: 'EnableServiceRoute',
      fileSystemIds: 'FileSystemIds',
      logs: 'Logs',
      mfaEnabled: 'MfaEnabled',
      name: 'Name',
      needVerifyLoginRisk: 'NeedVerifyLoginRisk',
      needVerifyZeroDevice: 'NeedVerifyZeroDevice',
      networkPackageId: 'NetworkPackageId',
      nmVersion: 'NmVersion',
      officeSiteId: 'OfficeSiteId',
      officeSiteType: 'OfficeSiteType',
      ouName: 'OuName',
      protocolType: 'ProtocolType',
      rdsLicenseAddress: 'RdsLicenseAddress',
      rdsLicenseDomainName: 'RdsLicenseDomainName',
      rdsLicenseStatus: 'RdsLicenseStatus',
      resourceAmounts: 'ResourceAmounts',
      securityProtection: 'SecurityProtection',
      ssoEnabled: 'SsoEnabled',
      ssoType: 'SsoType',
      status: 'Status',
      subDnsAddress: 'SubDnsAddress',
      subDomainName: 'SubDomainName',
      subnetMode: 'SubnetMode',
      totalEdsCount: 'TotalEdsCount',
      totalEdsCountForGroup: 'TotalEdsCountForGroup',
      totalResourceAmount: 'TotalResourceAmount',
      trustPassword: 'TrustPassword',
      vSwitchIds: 'VSwitchIds',
      vpcId: 'VpcId',
      vpcType: 'VpcType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ADConnectors: { 'type': 'array', 'itemType': DescribeOfficeSitesResponseBodyOfficeSitesADConnectors },
      acceleratorId: 'string',
      adHostname: 'string',
      backupDCHostname: 'string',
      backupDns: 'string',
      bandwidth: 'number',
      cenAttachStatus: 'string',
      cenId: 'string',
      cidrBlock: 'string',
      cloudBoxOfficeSite: 'boolean',
      creationTime: 'string',
      customAccessPoint: 'string',
      customDnsAddress: { 'type': 'array', 'itemType': 'string' },
      customSecurityGroupId: 'string',
      desktopAccessType: 'string',
      desktopCount: 'number',
      desktopVpcEndpoint: 'string',
      dnsAddress: { 'type': 'array', 'itemType': 'string' },
      dnsUserName: 'string',
      domainName: 'string',
      domainPassword: 'string',
      domainUserName: 'string',
      enableAdminAccess: 'boolean',
      enableCrossDesktopAccess: 'boolean',
      enableInternetAccess: 'boolean',
      enableServiceRoute: 'boolean',
      fileSystemIds: { 'type': 'array', 'itemType': 'string' },
      logs: { 'type': 'array', 'itemType': DescribeOfficeSitesResponseBodyOfficeSitesLogs },
      mfaEnabled: 'boolean',
      name: 'string',
      needVerifyLoginRisk: 'boolean',
      needVerifyZeroDevice: 'boolean',
      networkPackageId: 'string',
      nmVersion: 'string',
      officeSiteId: 'string',
      officeSiteType: 'string',
      ouName: 'string',
      protocolType: 'string',
      rdsLicenseAddress: 'string',
      rdsLicenseDomainName: 'string',
      rdsLicenseStatus: 'string',
      resourceAmounts: { 'type': 'array', 'itemType': DescribeOfficeSitesResponseBodyOfficeSitesResourceAmounts },
      securityProtection: 'string',
      ssoEnabled: 'boolean',
      ssoType: 'string',
      status: 'string',
      subDnsAddress: { 'type': 'array', 'itemType': 'string' },
      subDomainName: 'string',
      subnetMode: 'string',
      totalEdsCount: 'number',
      totalEdsCountForGroup: 'number',
      totalResourceAmount: 'number',
      trustPassword: 'string',
      vSwitchIds: { 'type': 'array', 'itemType': 'string' },
      vpcId: 'string',
      vpcType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.ADConnectors)) {
      $dara.Model.validateArray(this.ADConnectors);
    }
    if(Array.isArray(this.customDnsAddress)) {
      $dara.Model.validateArray(this.customDnsAddress);
    }
    if(Array.isArray(this.dnsAddress)) {
      $dara.Model.validateArray(this.dnsAddress);
    }
    if(Array.isArray(this.fileSystemIds)) {
      $dara.Model.validateArray(this.fileSystemIds);
    }
    if(Array.isArray(this.logs)) {
      $dara.Model.validateArray(this.logs);
    }
    if(Array.isArray(this.resourceAmounts)) {
      $dara.Model.validateArray(this.resourceAmounts);
    }
    if(Array.isArray(this.subDnsAddress)) {
      $dara.Model.validateArray(this.subDnsAddress);
    }
    if(Array.isArray(this.vSwitchIds)) {
      $dara.Model.validateArray(this.vSwitchIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeAccessPolicyRules extends $dara.Model {
  /**
   * @remarks
   * The CIDR block that is allowed to access the client. The value is an IPv4 CIDR block.
   * 
   * @example
   * 47.100.XX.XX/16
   */
  cidrIp?: string;
  /**
   * @remarks
   * The remarks on the CIDR block that is allowed to access the client.
   * 
   * @example
   * test
   */
  description?: string;
  static names(): { [key: string]: string } {
    return {
      cidrIp: 'CidrIp',
      description: 'Description',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cidrIp: 'string',
      description: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules extends $dara.Model {
  /**
   * @remarks
   * The object to which the security group rule applies. The value is an IPv4 CIDR block.
   * 
   * @example
   * 47.100.XX.XX/16
   */
  cidrIp?: string;
  /**
   * @remarks
   * The description of the security group rule.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The protocol type of the security group rule.
   * 
   * Valid values:
   * 
   * *   tcp: Transmission Control Protocol (TCP)
   * *   udp: User Datagram Protocol (UDP)
   * *   all: all protocols
   * *   gre: Generic Routing Encapsulation (GRE)
   * *   icmp: Internet Control Message Protocol (ICMP) for IPv4
   * 
   * @example
   * tcp
   */
  ipProtocol?: string;
  /**
   * @remarks
   * The authorization of the security group rule.
   * 
   * Valid values:
   * 
   * *   drop: denies all access requests.
   * *   accept: accepts all access requests.
   * 
   * @example
   * accept
   */
  policy?: string;
  /**
   * @remarks
   * The port range of the security group rule.
   * 
   * @example
   * 22/22
   */
  portRange?: string;
  /**
   * @remarks
   * The priority of the security group rule. A smaller value indicates a higher priority.
   * 
   * @example
   * 1
   */
  priority?: string;
  /**
   * @remarks
   * The direction of the security group rule.
   * 
   * Valid values:
   * 
   * *   outflow: outbound
   * *   inflow: inbound
   * 
   * @example
   * inflow
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      cidrIp: 'CidrIp',
      description: 'Description',
      ipProtocol: 'IpProtocol',
      policy: 'Policy',
      portRange: 'PortRange',
      priority: 'Priority',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cidrIp: 'string',
      description: 'string',
      ipProtocol: 'string',
      policy: 'string',
      portRange: 'string',
      priority: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGroupsResponseBodyDescribePolicyGroupsClientTypes extends $dara.Model {
  /**
   * @remarks
   * The client type.
   * 
   * Valid values:
   * 
   * *   html5: web client
   * *   linux: Alibaba Cloud Workspace hardware terminal
   * *   android: Android client
   * *   windows: Windows client
   * *   ios: iOS client
   * *   macos: macOS client
   * 
   * @example
   * windows
   */
  clientType?: string;
  /**
   * @remarks
   * Indicates whether a specific type of client is allowed to connect to the cloud desktop.
   * 
   * Valid values:
   * 
   * *   OFF
   * *   ON
   * 
   * @example
   * ON
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      clientType: 'ClientType',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientType: 'string',
      status: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRedirects extends $dara.Model {
  deviceType?: string;
  redirectType?: string;
  static names(): { [key: string]: string } {
    return {
      deviceType: 'DeviceType',
      redirectType: 'RedirectType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deviceType: 'string',
      redirectType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules extends $dara.Model {
  deviceName?: string;
  devicePid?: string;
  deviceType?: string;
  deviceVid?: string;
  optCommand?: string;
  redirectType?: string;
  static names(): { [key: string]: string } {
    return {
      deviceName: 'DeviceName',
      devicePid: 'DevicePid',
      deviceType: 'DeviceType',
      deviceVid: 'DeviceVid',
      optCommand: 'OptCommand',
      redirectType: 'RedirectType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deviceName: 'string',
      devicePid: 'string',
      deviceType: 'string',
      deviceVid: 'string',
      optCommand: 'string',
      redirectType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule extends $dara.Model {
  /**
   * @remarks
   * The rule description.
   * 
   * @example
   * Test
   */
  description?: string;
  /**
   * @remarks
   * The domain name.
   * 
   * @example
   * *.com
   */
  domain?: string;
  /**
   * @remarks
   * Indicates whether the domain name resolution is allowed. Valid values:
   * 
   * *   allow
   * *   block
   * 
   * @example
   * allow
   */
  policy?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      domain: 'Domain',
      policy: 'Policy',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      domain: 'string',
      policy: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule extends $dara.Model {
  /**
   * @remarks
   * The rule content.
   * 
   * @example
   * *.com
   */
  domain?: string;
  /**
   * @remarks
   * Indicates whether the rule is allowed.
   * 
   * Valid values:
   * 
   * *   allow
   * *   block
   * 
   * @example
   * allow
   */
  policy?: string;
  /**
   * @remarks
   * The rule type.
   * 
   * Valid values:
   * 
   * *   prc: process
   * *   domain: domain name
   * 
   * @example
   * domain
   */
  ruleType?: string;
  static names(): { [key: string]: string } {
    return {
      domain: 'Domain',
      policy: 'Policy',
      ruleType: 'RuleType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      domain: 'string',
      policy: 'string',
      ruleType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule extends $dara.Model {
  /**
   * @remarks
   * The rule description.
   * 
   * @example
   * Test
   */
  description?: string;
  /**
   * @remarks
   * The device class. This parameter is required when `usbRuleType` is set to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).
   * 
   * @example
   * 0Eh
   */
  deviceClass?: string;
  /**
   * @remarks
   * The subclass of the device. This parameter is required when `usbRuleType` is set to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).
   * 
   * @example
   * xxh
   */
  deviceSubclass?: string;
  /**
   * @remarks
   * The product ID.
   * 
   * @example
   * 08**
   */
  productId?: string;
  /**
   * @remarks
   * Indicates whether USB redirection is allowed.
   * 
   * Valid values:
   * 
   * *   1: allowed
   * *   2: not allowed
   * 
   * @example
   * 1
   */
  usbRedirectType?: number;
  /**
   * @remarks
   * The type of the USB redirection rule.
   * 
   * Valid values:
   * 
   * *   1: by device class
   * *   2: by device vendor
   * 
   * @example
   * 1
   */
  usbRuleType?: number;
  /**
   * @remarks
   * The vendor ID (VID). For more information, see [Valid USB VIDs](https://www.usb.org/sites/default/files/vendor_ids032322.pdf_1.pdf).
   * 
   * @example
   * 04**
   */
  vendorId?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      deviceClass: 'DeviceClass',
      deviceSubclass: 'DeviceSubclass',
      productId: 'ProductId',
      usbRedirectType: 'UsbRedirectType',
      usbRuleType: 'UsbRuleType',
      vendorId: 'VendorId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      deviceClass: 'string',
      deviceSubclass: 'string',
      productId: 'string',
      usbRedirectType: 'number',
      usbRuleType: 'number',
      vendorId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGroupsResponseBodyDescribePolicyGroups extends $dara.Model {
  /**
   * @remarks
   * Indicates whether users have the administrator permissions after they connect to cloud desktops.
   * 
   * >  This parameter is in invitational preview and not available to the public.
   * 
   * @example
   * deny
   */
  adminAccess?: string;
  /**
   * @remarks
   * Indicates whether the anti-screenshot feature is enabled. Valid values:
   * 
   * *   on
   * *   off
   * 
   * Default value: off.
   * 
   * @example
   * off
   */
  appContentProtection?: string;
  /**
   * @remarks
   * The client CIDR blocks in a whitelist.
   */
  authorizeAccessPolicyRules?: DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeAccessPolicyRules[];
  /**
   * @remarks
   * The security group rules.
   */
  authorizeSecurityPolicyRules?: DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules[];
  /**
   * @remarks
   * Indicates whether the webcam redirection feature is enabled.
   * 
   * Valid values:
   * 
   * *   off
   * *   on (default)
   * 
   * @example
   * on
   */
  cameraRedirect?: string;
  /**
   * @remarks
   * The logon methods.
   */
  clientTypes?: DescribePolicyGroupsResponseBodyDescribePolicyGroupsClientTypes[];
  /**
   * @remarks
   * The permissions on the clipboard.
   * 
   * Valid values:
   * 
   * *   read: One-way transfer is allowed.
   * *   readwrite: Two-way transfer is allowed.
   * *   off: Two-way transfer is not allowed.
   * 
   * @example
   * readwrite
   */
  clipboard?: string;
  colorEnhancement?: string;
  /**
   * @remarks
   * The CPU underclocking duration. Valid values: 30 to 120.
   * 
   * @example
   * 30
   */
  cpuDownGradeDuration?: number;
  /**
   * @remarks
   * The process whitelist that is not restricted by the CPU usage limit.
   */
  cpuProcessors?: string[];
  /**
   * @remarks
   * Indicates whether the switch for CPU protection mode is turned on. Valid values: on and off.
   * 
   * @example
   * on
   */
  cpuProtectedMode?: string;
  /**
   * @remarks
   * The overall CPU utilization. Valid values: 70 to 90.
   * 
   * @example
   * 70
   */
  cpuRateLimit?: number;
  /**
   * @remarks
   * The overall CPU sampling duration. Valid values: 10 to 60.
   * 
   * @example
   * 10
   */
  cpuSampleDuration?: number;
  /**
   * @remarks
   * The usage of a single CPU. Valid values: 70 to 100.
   * 
   * @example
   * 70
   */
  cpuSingleRateLimit?: number;
  desktopCount?: number;
  desktopGroupCount?: number;
  deviceRedirects?: DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRedirects[];
  deviceRules?: DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules[];
  displayMode?: string;
  /**
   * @remarks
   * Indicates whether the access control for domain names is enabled. The domain names can contain wildcard characters (\\*). Multiple domain names are separated by commas (,). Valid values:
   * 
   * *   off
   * *   on
   * 
   * @example
   * off
   */
  domainList?: string;
  /**
   * @remarks
   * The rule of domain name resolution.
   */
  domainResolveRule?: DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule[];
  /**
   * @remarks
   * Indicates whether the switch for domain name resolution is turned on.
   * 
   * Valid values:
   * 
   * *   off
   * *   on
   * 
   * @example
   * on
   */
  domainResolveRuleType?: string;
  /**
   * @remarks
   * The number of cloud desktops that are associated with the policy.\\
   * This parameter is returned only for custom policies.
   * 
   * @example
   * 1
   */
  edsCount?: number;
  /**
   * @remarks
   * Indicates whether the switch for end users to ask for assistance from the administrator is turned on. Valid values: on and off.
   * 
   * @example
   * on
   */
  endUserApplyAdminCoordinate?: string;
  /**
   * @remarks
   * Indicates whether the switch for stream collaboration between end users is turned on. Valid values: on and off.
   * 
   * @example
   * on
   */
  endUserGroupCoordinate?: string;
  fileTransfer?: string;
  /**
   * @remarks
   * Indicates whether the image quality feature is enabled for Graphics cloud desktops. If you have high requirements for desktop performance and user experience, we recommend that you enable this feature. For example, you can enable this feature in professional graphic design scenarios.
   * 
   * Valid values:
   * 
   * *   off
   * *   on
   * 
   * @example
   * off
   */
  gpuAcceleration?: string;
  /**
   * @remarks
   * Indicates whether the access policy on HTML5 clients is allowed.
   * 
   * Valid values:
   * 
   * *   off (default)
   * *   on
   * 
   * @example
   * off
   */
  html5Access?: string;
  /**
   * @remarks
   * The file transfer policy for HTML5 clients.
   * 
   * Valid values:
   * 
   * *   all: Files can be uploaded and downloaded between your local computer and HTML5 clients.
   * *   download: Files on HTML5 clients can be downloaded to your local computer.
   * *   upload: Files on your local computer can be uploaded to HTML5 clients.
   * *   off (default): File transfer between HTML5 clients and your computer is disabled.
   * 
   * @example
   * off
   */
  html5FileTransfer?: string;
  /**
   * @remarks
   * The protocol that is used for network communication. Valid values:
   * 
   * *   TCP: Only TCP can be used.
   * *   BOTH: TCP or UDP can be used. The system switches between TCP and UDP based on the actual network condition.
   * 
   * Default value: TCP.
   * 
   * @example
   * BOTH
   */
  internetCommunicationProtocol?: string;
  /**
   * @remarks
   * The permissions on local disk mapping.
   * 
   * Valid values:
   * 
   * *   read: read-only
   * *   readwrite: read and write
   * *   off: no permissions
   * 
   * @example
   * readwrite
   */
  localDrive?: string;
  maxReconnectTime?: number;
  /**
   * @remarks
   * The duration required for underclocking memory by a single process. Valid values: 30 to 120.
   * 
   * @example
   * 30
   */
  memoryDownGradeDuration?: number;
  /**
   * @remarks
   * The whitelist of processes that are not restricted by the memory usage limit.
   */
  memoryProcessors?: string[];
  /**
   * @remarks
   * Indicates whether the switch for memory protection mode is turned on. Valid values: on and off.
   * 
   * @example
   * on
   */
  memoryProtectedMode?: string;
  /**
   * @remarks
   * The overall memory usage. Valid values: 70 to 90.
   * 
   * @example
   * 70
   */
  memoryRateLimit?: number;
  /**
   * @remarks
   * The overall sampling duration of memory statistics. Valid values: 30 to 60.
   * 
   * @example
   * 30
   */
  memorySampleDuration?: number;
  /**
   * @remarks
   * The memory usage of a single process. Valid values: 30 to 60.
   * 
   * @example
   * 30
   */
  memorySingleRateLimit?: number;
  mobileRestart?: string;
  mobileShutdown?: string;
  /**
   * @remarks
   * The policy name.
   * 
   * @example
   * testPolicyGroupName
   */
  name?: string;
  /**
   * @remarks
   * Indicates whether the network redirection feature is enabled. Valid values:
   * 
   * *   on
   * *   off
   * 
   * Default value: off.
   * 
   * >  This parameter is in invitational preview and not available to the public.
   * 
   * @example
   * off
   */
  netRedirect?: string;
  /**
   * @remarks
   * The network redirection rule.
   * 
   * >  This parameter is in invitational preview and not available to the public.
   */
  netRedirectRule?: DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule[];
  /**
   * @remarks
   * The policy ID.
   * 
   * @example
   * pg-gx2x1dhsmthe9****
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The policy type.
   * 
   * Valid values:
   * 
   * *   SYSTEM
   * *   CUSTOM
   * 
   * @example
   * SYSTEM
   */
  policyGroupType?: string;
  /**
   * @remarks
   * The policy status.
   * 
   * Valid values:
   * 
   * *   AVAILABLE
   * *   CREATING
   * 
   * @example
   * AVAILABLE
   */
  policyStatus?: string;
  /**
   * @remarks
   * Indicates whether user preemption is allowed. The value is fixed to `off`, which indicates that user preemption is not allowed.
   * 
   * @example
   * off
   */
  preemptLogin?: string;
  /**
   * @remarks
   * The names of the users that are allowed to connect to the cloud desktop to which another user is logged on.
   */
  preemptLoginUsers?: string[];
  /**
   * @remarks
   * Indicates whether the printer redirection feature is enabled.
   * 
   * Valid values:
   * 
   * *   off
   * *   on
   * 
   * @example
   * on
   */
  printerRedirection?: string;
  qualityEnhancement?: string;
  /**
   * @remarks
   * Indicates whether the custom screen recording feature is enabled. Valid values:
   * 
   * *   on
   * *   off
   * 
   * Default value: off.
   * 
   * @example
   * off
   */
  recordContent?: string;
  /**
   * @remarks
   * The period when the custom screen recording can be retained before expiration. Default value: 30 days.
   * 
   * @example
   * 30
   */
  recordContentExpires?: number;
  recordEventDuration?: number;
  recordEventFilePaths?: string[];
  recordEventRegisters?: string[];
  /**
   * @remarks
   * Indicates whether the screen recording feature is enabled.
   * 
   * Valid values:
   * 
   * *   ALLTIME: All operations that are performed by end users on cloud desktops are recorded. The recording starts immediately when end users connect to cloud desktops and ends after the end users disconnect from the cloud desktops.
   * *   PERIOD: The operations that are performed by end users on cloud desktops during a specified period of time are recorded. You must specify the start time and the end time of the recording.
   * *   OFF: The screen recording feature is disabled.
   * 
   * @example
   * OFF
   */
  recording?: string;
  /**
   * @remarks
   * Indicates whether to record audio or video data that is generated on the cloud desktop during screen recording. Valid values:
   * 
   * *   on: records audio and video data.
   * *   off: records only video data.
   * 
   * @example
   * on
   */
  recordingAudio?: string;
  /**
   * @remarks
   * This parameter is used with the Recording parameter to generate a screen recording file after you specify the duration of screen recording.
   * 
   * @example
   * 10
   */
  recordingDuration?: number;
  /**
   * @remarks
   * The time when the screen recording ended. The value is in the HH:MM:SS format. The value takes effect only when Recording is set to PERIOD.
   * 
   * @example
   * 08:59:00
   */
  recordingEndTime?: string;
  /**
   * @remarks
   * The period in which the screen recording audit is valid. Valid values: 15 to 180. Unit: day.
   * 
   * @example
   * 15
   */
  recordingExpires?: number;
  /**
   * @remarks
   * The frame rate of screen recording. Unit: fps. Valid values:
   * 
   * *   2
   * *   5
   * *   10
   * *   15
   * 
   * @example
   * 5
   */
  recordingFps?: number;
  /**
   * @remarks
   * The time when the screen recording was started. The value is in the HH:MM:SS format. The value takes effect only when Recording is set to PERIOD.
   * 
   * @example
   * 08:00:00
   */
  recordingStartTime?: string;
  /**
   * @remarks
   * Indicates whether the client notification of screen recording is enabled. Valid values: on and off.
   * 
   * @example
   * off
   */
  recordingUserNotify?: string;
  /**
   * @remarks
   * The notification content of screen recording. By default, this parameter is left empty.
   * 
   * @example
   * Your desktop is being recorded
   */
  recordingUserNotifyMessage?: string;
  /**
   * @remarks
   * The permissions on the keyboard and mouse to control the cloud desktop during remote assistance. Valid values:
   * 
   * *   fullControl: The keyboard and mouse are fully controlled.
   * *   optionalControl: By default, you do not have the permissions on the keyboard or mouse to control the cloud desktop during remote assistance. You can apply for the permissions.
   * *   disableControl: The keyboard and mouse are not controlled.
   * 
   * @example
   * fullControl
   */
  remoteCoordinate?: string;
  resetDesktop?: string;
  resourceGroupCount?: number;
  resourceRegionId?: string;
  /**
   * @remarks
   * The effective scope of the policy. Valid values:
   * 
   * *   GLOBAL: The policy takes effect globally.
   * *   IP: The policy takes effect based on IP addresses.
   * 
   * @example
   * GLOBAL
   */
  scope?: string;
  /**
   * @remarks
   * This parameter is required when Scope is set to IP. This parameter takes effect when Scope is set to IP.
   */
  scopeValue?: string[];
  smoothEnhancement?: string;
  statusMonitor?: string;
  streamingMode?: string;
  targetFps?: number;
  /**
   * @remarks
   * Indicates whether the USB redirection feature is enabled.
   * 
   * Valid values:
   * 
   * *   off
   * *   on
   * 
   * @example
   * on
   */
  usbRedirect?: string;
  /**
   * @remarks
   * The USB redirection rule.
   */
  usbSupplyRedirectRule?: DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule[];
  videoEncAvgKbps?: number;
  videoEncMaxQP?: number;
  videoEncMinQP?: number;
  videoEncPeakKbps?: number;
  videoEncPolicy?: string;
  /**
   * @remarks
   * Indicates whether the multimedia redirection feature is enabled. Valid values: on and off.
   * 
   * @example
   * off
   */
  videoRedirect?: string;
  /**
   * @remarks
   * The image display quality.
   * 
   * Valid values:
   * 
   * *   high: high-definition (HD)
   * *   low: fluent
   * *   medium (default): adaptive
   * *   lossless: no quality loss
   * 
   * @example
   * medium
   */
  visualQuality?: string;
  /**
   * @remarks
   * Indicates whether the watermarking feature is enabled.
   * 
   * Valid values:
   * 
   * *   off
   * *   on
   * 
   * @example
   * on
   */
  watermark?: string;
  /**
   * @remarks
   * Indicates whether the anti-screen photo feature is enabled for invisible watermarks. Valid values: on and off.
   * 
   * @example
   * off
   */
  watermarkAntiCam?: string;
  /**
   * @remarks
   * The font color in red, green, and blue (RGB) of the watermark. Valid values: 0 to 16777215.
   * 
   * @example
   * 0
   */
  watermarkColor?: number;
  /**
   * @remarks
   * This parameter is unavailable for public use.
   * 
   * @example
   * test
   */
  watermarkCustomText?: string;
  /**
   * @remarks
   * The slope of the watermark. Valid values: -10 to -30.
   * 
   * @example
   * -10
   */
  watermarkDegree?: number;
  /**
   * @remarks
   * The font size of the watermark. Valid values: 10 to 20.
   * 
   * @example
   * 10
   */
  watermarkFontSize?: number;
  /**
   * @remarks
   * The font style of the watermark. Valid values:
   * 
   * *   plain
   * *   bold
   * 
   * @example
   * plain
   */
  watermarkFontStyle?: string;
  /**
   * @remarks
   * The invisible watermark enhancement feature. Valid values: low, medium, and high.
   * 
   * @example
   * medium
   */
  watermarkPower?: string;
  /**
   * @remarks
   * The number of watermark rows. This parameter is now invalid.
   * 
   * @example
   * 5
   */
  watermarkRowAmount?: number;
  /**
   * @remarks
   * Indicates whether the security priority for invisible watermarks is enabled. Valid values: on and off.
   * 
   * @example
   * on
   */
  watermarkSecurity?: string;
  /**
   * @remarks
   * The watermark transparency.
   * 
   * Valid values:
   * 
   * *   LIGHT
   * *   DARK
   * *   MIDDLE
   * 
   * @example
   * LIGHT
   */
  watermarkTransparency?: string;
  /**
   * @remarks
   * The watermark transparency. A greater value indicates that the watermark is less transparent. Valid values: 10 to 100.
   * 
   * @example
   * 10
   */
  watermarkTransparencyValue?: number;
  /**
   * @remarks
   * The watermark type.
   * 
   * Valid values:
   * 
   * *   HostName,EndUserId: The watermark is displayed in the following format: Rightmost 15 characters of the cloud desktop ID,Username.
   * *   EndUserId: The username is displayed.
   * *   EndUserId,HostName: The watermark is displayed in the following format: Username,Rightmost 15 characters of the cloud desktop ID.
   * *   HostName: The rightmost 15 characters of the cloud desktop ID are displayed.
   * 
   * @example
   * EndUserId
   */
  watermarkType?: string;
  wyAssistant?: string;
  static names(): { [key: string]: string } {
    return {
      adminAccess: 'AdminAccess',
      appContentProtection: 'AppContentProtection',
      authorizeAccessPolicyRules: 'AuthorizeAccessPolicyRules',
      authorizeSecurityPolicyRules: 'AuthorizeSecurityPolicyRules',
      cameraRedirect: 'CameraRedirect',
      clientTypes: 'ClientTypes',
      clipboard: 'Clipboard',
      colorEnhancement: 'ColorEnhancement',
      cpuDownGradeDuration: 'CpuDownGradeDuration',
      cpuProcessors: 'CpuProcessors',
      cpuProtectedMode: 'CpuProtectedMode',
      cpuRateLimit: 'CpuRateLimit',
      cpuSampleDuration: 'CpuSampleDuration',
      cpuSingleRateLimit: 'CpuSingleRateLimit',
      desktopCount: 'DesktopCount',
      desktopGroupCount: 'DesktopGroupCount',
      deviceRedirects: 'DeviceRedirects',
      deviceRules: 'DeviceRules',
      displayMode: 'DisplayMode',
      domainList: 'DomainList',
      domainResolveRule: 'DomainResolveRule',
      domainResolveRuleType: 'DomainResolveRuleType',
      edsCount: 'EdsCount',
      endUserApplyAdminCoordinate: 'EndUserApplyAdminCoordinate',
      endUserGroupCoordinate: 'EndUserGroupCoordinate',
      fileTransfer: 'FileTransfer',
      gpuAcceleration: 'GpuAcceleration',
      html5Access: 'Html5Access',
      html5FileTransfer: 'Html5FileTransfer',
      internetCommunicationProtocol: 'InternetCommunicationProtocol',
      localDrive: 'LocalDrive',
      maxReconnectTime: 'MaxReconnectTime',
      memoryDownGradeDuration: 'MemoryDownGradeDuration',
      memoryProcessors: 'MemoryProcessors',
      memoryProtectedMode: 'MemoryProtectedMode',
      memoryRateLimit: 'MemoryRateLimit',
      memorySampleDuration: 'MemorySampleDuration',
      memorySingleRateLimit: 'MemorySingleRateLimit',
      mobileRestart: 'MobileRestart',
      mobileShutdown: 'MobileShutdown',
      name: 'Name',
      netRedirect: 'NetRedirect',
      netRedirectRule: 'NetRedirectRule',
      policyGroupId: 'PolicyGroupId',
      policyGroupType: 'PolicyGroupType',
      policyStatus: 'PolicyStatus',
      preemptLogin: 'PreemptLogin',
      preemptLoginUsers: 'PreemptLoginUsers',
      printerRedirection: 'PrinterRedirection',
      qualityEnhancement: 'QualityEnhancement',
      recordContent: 'RecordContent',
      recordContentExpires: 'RecordContentExpires',
      recordEventDuration: 'RecordEventDuration',
      recordEventFilePaths: 'RecordEventFilePaths',
      recordEventRegisters: 'RecordEventRegisters',
      recording: 'Recording',
      recordingAudio: 'RecordingAudio',
      recordingDuration: 'RecordingDuration',
      recordingEndTime: 'RecordingEndTime',
      recordingExpires: 'RecordingExpires',
      recordingFps: 'RecordingFps',
      recordingStartTime: 'RecordingStartTime',
      recordingUserNotify: 'RecordingUserNotify',
      recordingUserNotifyMessage: 'RecordingUserNotifyMessage',
      remoteCoordinate: 'RemoteCoordinate',
      resetDesktop: 'ResetDesktop',
      resourceGroupCount: 'ResourceGroupCount',
      resourceRegionId: 'ResourceRegionId',
      scope: 'Scope',
      scopeValue: 'ScopeValue',
      smoothEnhancement: 'SmoothEnhancement',
      statusMonitor: 'StatusMonitor',
      streamingMode: 'StreamingMode',
      targetFps: 'TargetFps',
      usbRedirect: 'UsbRedirect',
      usbSupplyRedirectRule: 'UsbSupplyRedirectRule',
      videoEncAvgKbps: 'VideoEncAvgKbps',
      videoEncMaxQP: 'VideoEncMaxQP',
      videoEncMinQP: 'VideoEncMinQP',
      videoEncPeakKbps: 'VideoEncPeakKbps',
      videoEncPolicy: 'VideoEncPolicy',
      videoRedirect: 'VideoRedirect',
      visualQuality: 'VisualQuality',
      watermark: 'Watermark',
      watermarkAntiCam: 'WatermarkAntiCam',
      watermarkColor: 'WatermarkColor',
      watermarkCustomText: 'WatermarkCustomText',
      watermarkDegree: 'WatermarkDegree',
      watermarkFontSize: 'WatermarkFontSize',
      watermarkFontStyle: 'WatermarkFontStyle',
      watermarkPower: 'WatermarkPower',
      watermarkRowAmount: 'WatermarkRowAmount',
      watermarkSecurity: 'WatermarkSecurity',
      watermarkTransparency: 'WatermarkTransparency',
      watermarkTransparencyValue: 'WatermarkTransparencyValue',
      watermarkType: 'WatermarkType',
      wyAssistant: 'WyAssistant',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adminAccess: 'string',
      appContentProtection: 'string',
      authorizeAccessPolicyRules: { 'type': 'array', 'itemType': DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeAccessPolicyRules },
      authorizeSecurityPolicyRules: { 'type': 'array', 'itemType': DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules },
      cameraRedirect: 'string',
      clientTypes: { 'type': 'array', 'itemType': DescribePolicyGroupsResponseBodyDescribePolicyGroupsClientTypes },
      clipboard: 'string',
      colorEnhancement: 'string',
      cpuDownGradeDuration: 'number',
      cpuProcessors: { 'type': 'array', 'itemType': 'string' },
      cpuProtectedMode: 'string',
      cpuRateLimit: 'number',
      cpuSampleDuration: 'number',
      cpuSingleRateLimit: 'number',
      desktopCount: 'number',
      desktopGroupCount: 'number',
      deviceRedirects: { 'type': 'array', 'itemType': DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRedirects },
      deviceRules: { 'type': 'array', 'itemType': DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules },
      displayMode: 'string',
      domainList: 'string',
      domainResolveRule: { 'type': 'array', 'itemType': DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule },
      domainResolveRuleType: 'string',
      edsCount: 'number',
      endUserApplyAdminCoordinate: 'string',
      endUserGroupCoordinate: 'string',
      fileTransfer: 'string',
      gpuAcceleration: 'string',
      html5Access: 'string',
      html5FileTransfer: 'string',
      internetCommunicationProtocol: 'string',
      localDrive: 'string',
      maxReconnectTime: 'number',
      memoryDownGradeDuration: 'number',
      memoryProcessors: { 'type': 'array', 'itemType': 'string' },
      memoryProtectedMode: 'string',
      memoryRateLimit: 'number',
      memorySampleDuration: 'number',
      memorySingleRateLimit: 'number',
      mobileRestart: 'string',
      mobileShutdown: 'string',
      name: 'string',
      netRedirect: 'string',
      netRedirectRule: { 'type': 'array', 'itemType': DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule },
      policyGroupId: 'string',
      policyGroupType: 'string',
      policyStatus: 'string',
      preemptLogin: 'string',
      preemptLoginUsers: { 'type': 'array', 'itemType': 'string' },
      printerRedirection: 'string',
      qualityEnhancement: 'string',
      recordContent: 'string',
      recordContentExpires: 'number',
      recordEventDuration: 'number',
      recordEventFilePaths: { 'type': 'array', 'itemType': 'string' },
      recordEventRegisters: { 'type': 'array', 'itemType': 'string' },
      recording: 'string',
      recordingAudio: 'string',
      recordingDuration: 'number',
      recordingEndTime: 'string',
      recordingExpires: 'number',
      recordingFps: 'number',
      recordingStartTime: 'string',
      recordingUserNotify: 'string',
      recordingUserNotifyMessage: 'string',
      remoteCoordinate: 'string',
      resetDesktop: 'string',
      resourceGroupCount: 'number',
      resourceRegionId: 'string',
      scope: 'string',
      scopeValue: { 'type': 'array', 'itemType': 'string' },
      smoothEnhancement: 'string',
      statusMonitor: 'string',
      streamingMode: 'string',
      targetFps: 'number',
      usbRedirect: 'string',
      usbSupplyRedirectRule: { 'type': 'array', 'itemType': DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule },
      videoEncAvgKbps: 'number',
      videoEncMaxQP: 'number',
      videoEncMinQP: 'number',
      videoEncPeakKbps: 'number',
      videoEncPolicy: 'string',
      videoRedirect: 'string',
      visualQuality: 'string',
      watermark: 'string',
      watermarkAntiCam: 'string',
      watermarkColor: 'number',
      watermarkCustomText: 'string',
      watermarkDegree: 'number',
      watermarkFontSize: 'number',
      watermarkFontStyle: 'string',
      watermarkPower: 'string',
      watermarkRowAmount: 'number',
      watermarkSecurity: 'string',
      watermarkTransparency: 'string',
      watermarkTransparencyValue: 'number',
      watermarkType: 'string',
      wyAssistant: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.authorizeAccessPolicyRules)) {
      $dara.Model.validateArray(this.authorizeAccessPolicyRules);
    }
    if(Array.isArray(this.authorizeSecurityPolicyRules)) {
      $dara.Model.validateArray(this.authorizeSecurityPolicyRules);
    }
    if(Array.isArray(this.clientTypes)) {
      $dara.Model.validateArray(this.clientTypes);
    }
    if(Array.isArray(this.cpuProcessors)) {
      $dara.Model.validateArray(this.cpuProcessors);
    }
    if(Array.isArray(this.deviceRedirects)) {
      $dara.Model.validateArray(this.deviceRedirects);
    }
    if(Array.isArray(this.deviceRules)) {
      $dara.Model.validateArray(this.deviceRules);
    }
    if(Array.isArray(this.domainResolveRule)) {
      $dara.Model.validateArray(this.domainResolveRule);
    }
    if(Array.isArray(this.memoryProcessors)) {
      $dara.Model.validateArray(this.memoryProcessors);
    }
    if(Array.isArray(this.netRedirectRule)) {
      $dara.Model.validateArray(this.netRedirectRule);
    }
    if(Array.isArray(this.preemptLoginUsers)) {
      $dara.Model.validateArray(this.preemptLoginUsers);
    }
    if(Array.isArray(this.recordEventFilePaths)) {
      $dara.Model.validateArray(this.recordEventFilePaths);
    }
    if(Array.isArray(this.recordEventRegisters)) {
      $dara.Model.validateArray(this.recordEventRegisters);
    }
    if(Array.isArray(this.scopeValue)) {
      $dara.Model.validateArray(this.scopeValue);
    }
    if(Array.isArray(this.usbSupplyRedirectRule)) {
      $dara.Model.validateArray(this.usbSupplyRedirectRule);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceResponseBodyPriceInfoPricePromotions extends $dara.Model {
  /**
   * @remarks
   * The description of the promotion rule.
   * 
   * @example
   * test
   */
  optionCode?: string;
  /**
   * @remarks
   * The description of the promotion.
   * 
   * @example
   * Get started with new services with a discount.
   */
  promotionDesc?: string;
  /**
   * @remarks
   * The promotion ID.
   * 
   * @example
   * 123456
   */
  promotionId?: string;
  /**
   * @remarks
   * The promotion name.
   * 
   * @example
   * Special Offer
   */
  promotionName?: string;
  /**
   * @remarks
   * Indicates whether an item is selected.
   * 
   * @example
   * false
   */
  selected?: boolean;
  static names(): { [key: string]: string } {
    return {
      optionCode: 'OptionCode',
      promotionDesc: 'PromotionDesc',
      promotionId: 'PromotionId',
      promotionName: 'PromotionName',
      selected: 'Selected',
    };
  }

  static types(): { [key: string]: any } {
    return {
      optionCode: 'string',
      promotionDesc: 'string',
      promotionId: 'string',
      promotionName: 'string',
      selected: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceResponseBodyPriceInfoPrice extends $dara.Model {
  /**
   * @remarks
   * The unit of the currency.
   * 
   * @example
   * CNY
   */
  currency?: string;
  /**
   * @remarks
   * The discounted price.
   * 
   * @example
   * 0
   */
  discountPrice?: number;
  orderLines?: { [key: string]: string };
  /**
   * @remarks
   * The original price.
   * 
   * @example
   * 2.796
   */
  originalPrice?: number;
  /**
   * @remarks
   * The details of the promotion.
   */
  promotions?: DescribePriceResponseBodyPriceInfoPricePromotions[];
  spPrice?: number;
  /**
   * @remarks
   * The actual price that is paid. The original price minus the discounted part equals the actual price.
   * 
   * @example
   * 2.796
   */
  tradePrice?: number;
  static names(): { [key: string]: string } {
    return {
      currency: 'Currency',
      discountPrice: 'DiscountPrice',
      orderLines: 'OrderLines',
      originalPrice: 'OriginalPrice',
      promotions: 'Promotions',
      spPrice: 'SpPrice',
      tradePrice: 'TradePrice',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currency: 'string',
      discountPrice: 'number',
      orderLines: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      originalPrice: 'number',
      promotions: { 'type': 'array', 'itemType': DescribePriceResponseBodyPriceInfoPricePromotions },
      spPrice: 'number',
      tradePrice: 'number',
    };
  }

  validate() {
    if(this.orderLines) {
      $dara.Model.validateMap(this.orderLines);
    }
    if(Array.isArray(this.promotions)) {
      $dara.Model.validateArray(this.promotions);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceResponseBodyPriceInfoRules extends $dara.Model {
  /**
   * @remarks
   * The description of the rule.
   * 
   * @example
   * Receive a 15% discount on a one-year subscription.
   */
  description?: string;
  /**
   * @remarks
   * The rule ID.
   * 
   * @example
   * 587
   */
  ruleId?: number;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      ruleId: 'RuleId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      ruleId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceResponseBodyPriceInfo extends $dara.Model {
  freeCdsQuota?: boolean;
  freeCdsSize?: number;
  /**
   * @remarks
   * The information about the price.
   */
  price?: DescribePriceResponseBodyPriceInfoPrice;
  /**
   * @remarks
   * The details of the promotion rules.
   */
  rules?: DescribePriceResponseBodyPriceInfoRules[];
  static names(): { [key: string]: string } {
    return {
      freeCdsQuota: 'FreeCdsQuota',
      freeCdsSize: 'FreeCdsSize',
      price: 'Price',
      rules: 'Rules',
    };
  }

  static types(): { [key: string]: any } {
    return {
      freeCdsQuota: 'boolean',
      freeCdsSize: 'number',
      price: DescribePriceResponseBodyPriceInfoPrice,
      rules: { 'type': 'array', 'itemType': DescribePriceResponseBodyPriceInfoRules },
    };
  }

  validate() {
    if(this.price && typeof (this.price as any).validate === 'function') {
      (this.price as any).validate();
    }
    if(Array.isArray(this.rules)) {
      $dara.Model.validateArray(this.rules);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceForCreateDesktopOversoldGroupResponseBodyData extends $dara.Model {
  price?: string;
  static names(): { [key: string]: string } {
    return {
      price: 'Price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      price: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceForModifyDesktopOversoldGroupSaleResponseBodyData extends $dara.Model {
  price?: string;
  static names(): { [key: string]: string } {
    return {
      price: 'Price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      price: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceForRenewDesktopOversoldGroupResponseBodyData extends $dara.Model {
  price?: string;
  static names(): { [key: string]: string } {
    return {
      price: 'Price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      price: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecordingsResponseBodyRecordings extends $dara.Model {
  /**
   * @example
   * ecd-10v0vuvm616sk****
   */
  desktopId?: string;
  /**
   * @example
   * DemoComputer
   */
  desktopName?: string;
  /**
   * @example
   * 2023-04-10T07:26:06Z
   */
  endTime?: string;
  endUserIds?: string[];
  /**
   * @example
   * pg-4w5nk44zo5yl129dd/1mk78dugw344.mp4
   */
  filePath?: string;
  /**
   * @example
   * pg-6dn811rzrwh9ws4z6
   */
  policyGroupId?: string;
  /**
   * @example
   * 1742845
   */
  recordingSize?: number;
  /**
   * @example
   * alltime
   */
  recordingType?: string;
  signedUrl?: string;
  /**
   * @example
   * 2023-04-10T07:26:06Z
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      endTime: 'EndTime',
      endUserIds: 'EndUserIds',
      filePath: 'FilePath',
      policyGroupId: 'PolicyGroupId',
      recordingSize: 'RecordingSize',
      recordingType: 'RecordingType',
      signedUrl: 'SignedUrl',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      desktopName: 'string',
      endTime: 'string',
      endUserIds: { 'type': 'array', 'itemType': 'string' },
      filePath: 'string',
      policyGroupId: 'string',
      recordingSize: 'number',
      recordingType: 'string',
      signedUrl: 'string',
      startTime: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.endUserIds)) {
      $dara.Model.validateArray(this.endUserIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRefundPriceResponseBodyPriceInfo extends $dara.Model {
  /**
   * @example
   * CNY
   */
  currency?: string;
  /**
   * @example
   * 3990.75
   */
  refundFee?: number;
  static names(): { [key: string]: string } {
    return {
      currency: 'Currency',
      refundFee: 'RefundFee',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currency: 'string',
      refundFee: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRegionsResponseBodyRegions extends $dara.Model {
  /**
   * @remarks
   * The display name of the region, which varies based on the current language.
   * 
   * @example
   * China (Hangzhou)
   */
  localName?: string;
  /**
   * @remarks
   * The endpoint of the region.
   * 
   * @example
   * ecd.cn-hangzhou.aliyuncs.com
   */
  regionEndpoint?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      localName: 'LocalName',
      regionEndpoint: 'RegionEndpoint',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      localName: 'string',
      regionEndpoint: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRenewalPriceResponseBodyPriceInfoPricePromotions extends $dara.Model {
  /**
   * @example
   * test
   */
  optionCode?: string;
  promotionDesc?: string;
  /**
   * @example
   * promo_option
   */
  promotionId?: string;
  promotionName?: string;
  /**
   * @example
   * false
   */
  selected?: boolean;
  static names(): { [key: string]: string } {
    return {
      optionCode: 'OptionCode',
      promotionDesc: 'PromotionDesc',
      promotionId: 'PromotionId',
      promotionName: 'PromotionName',
      selected: 'Selected',
    };
  }

  static types(): { [key: string]: any } {
    return {
      optionCode: 'string',
      promotionDesc: 'string',
      promotionId: 'string',
      promotionName: 'string',
      selected: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRenewalPriceResponseBodyPriceInfoPrice extends $dara.Model {
  /**
   * @example
   * CNY
   */
  currency?: string;
  /**
   * @example
   * 15.8
   */
  discountPrice?: number;
  orderLines?: { [key: string]: string };
  /**
   * @example
   * 79.0
   */
  originalPrice?: number;
  promotions?: DescribeRenewalPriceResponseBodyPriceInfoPricePromotions[];
  /**
   * @example
   * 63.2
   */
  tradePrice?: number;
  static names(): { [key: string]: string } {
    return {
      currency: 'Currency',
      discountPrice: 'DiscountPrice',
      orderLines: 'OrderLines',
      originalPrice: 'OriginalPrice',
      promotions: 'Promotions',
      tradePrice: 'TradePrice',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currency: 'string',
      discountPrice: 'number',
      orderLines: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      originalPrice: 'number',
      promotions: { 'type': 'array', 'itemType': DescribeRenewalPriceResponseBodyPriceInfoPricePromotions },
      tradePrice: 'number',
    };
  }

  validate() {
    if(this.orderLines) {
      $dara.Model.validateMap(this.orderLines);
    }
    if(Array.isArray(this.promotions)) {
      $dara.Model.validateArray(this.promotions);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRenewalPriceResponseBodyPriceInfoRules extends $dara.Model {
  description?: string;
  /**
   * @example
   * 29644
   */
  ruleId?: number;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      ruleId: 'RuleId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      ruleId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRenewalPriceResponseBodyPriceInfo extends $dara.Model {
  price?: DescribeRenewalPriceResponseBodyPriceInfoPrice;
  rules?: DescribeRenewalPriceResponseBodyPriceInfoRules[];
  static names(): { [key: string]: string } {
    return {
      price: 'Price',
      rules: 'Rules',
    };
  }

  static types(): { [key: string]: any } {
    return {
      price: DescribeRenewalPriceResponseBodyPriceInfoPrice,
      rules: { 'type': 'array', 'itemType': DescribeRenewalPriceResponseBodyPriceInfoRules },
    };
  }

  validate() {
    if(this.price && typeof (this.price as any).validate === 'function') {
      (this.price as any).validate();
    }
    if(Array.isArray(this.rules)) {
      $dara.Model.validateArray(this.rules);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSessionStatisticResponseBodyStatistic extends $dara.Model {
  /**
   * @remarks
   * The total number of sessions in the time range.
   * 
   * @example
   * 4
   */
  count?: number;
  /**
   * @remarks
   * The point in time.
   * 
   * @example
   * 1690164443508
   */
  timePoint?: number;
  static names(): { [key: string]: string } {
    return {
      count: 'Count',
      timePoint: 'TimePoint',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: 'number',
      timePoint: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSnapshotsResponseBodySnapshots extends $dara.Model {
  /**
   * @remarks
   * The point in time at which the snapshot was created. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-mm-ddthh:mm:ssz` format. The time is displayed in UTC.
   * 
   * @example
   * 2020-12-20T14:52:28Z
   */
  creationTime?: string;
  /**
   * @remarks
   * The user who creates the snapshot.
   * 
   * @example
   * Administrator
   */
  creator?: string;
  /**
   * @remarks
   * The time when the snapshot was deleted. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-mm-ddthh:mm:ssz` format. The time is displayed in UTC.
   * 
   * @example
   * 2020-12-20T14:52:28Z
   */
  deletionTime?: string;
  /**
   * @remarks
   * The description of the snapshot.
   * 
   * @example
   * testDescription
   */
  description?: string;
  /**
   * @remarks
   * The ID of the cloud computer to which the snapshot belongs.
   * 
   * @example
   * ecd-g03l3tlm8djoj****
   */
  desktopId?: string;
  /**
   * @remarks
   * The name of the cloud computer.
   * 
   * @example
   * test
   */
  desktopName?: string;
  /**
   * @remarks
   * The status of the cloud computer.
   * 
   * Valid values:
   * 
   * *   Stopped
   * *   Starting
   * *   Rebuilding
   * *   Running
   * *   Stopping
   * *   Expired
   * *   Deleted
   * *   Pending
   * 
   * @example
   * Running
   */
  desktopStatus?: string;
  /**
   * @remarks
   * The progress of creating the snapshot. Unit: %.
   * 
   * @example
   * 100%
   */
  progress?: string;
  /**
   * @remarks
   * The protocol type.
   * 
   * Valid values:
   * 
   * *   HDX: High-definition Experience (HDX) protocol
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ASP: in-house Adaptive Streaming Protocol (ASP)
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  /**
   * @remarks
   * The remaining time that is required to complete the snapshot creation. Unit: seconds.
   * 
   * >  When the `Status` value is `PROGRESSING`, the `RemainTime` value is `-1`. A value of -1 indicates that the system is calculating the remaining time.
   * 
   * @example
   * 30
   */
  remainTime?: number;
  restorePointId?: string;
  restorePointName?: string;
  /**
   * @remarks
   * The snapshot ID.
   * 
   * @example
   * s-2zeipxmnhej803x7****
   */
  snapshotId?: string;
  /**
   * @remarks
   * The name of the snapshot.
   * 
   * @example
   * testSnapshotName
   */
  snapshotName?: string;
  /**
   * @remarks
   * The type of the snapshot.
   * 
   * Valid values:
   * 
   * *   AUTO: automatic snapshot
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   USER: manual snapshot
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * USER
   */
  snapshotType?: string;
  /**
   * @remarks
   * The capacity of the source disk. Unit: GiB.
   * 
   * @example
   * 150
   */
  sourceDiskSize?: string;
  /**
   * @remarks
   * The type of the source disk.
   * 
   * Valid values:
   * 
   * *   SYSTEM: system disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DATA: data disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * SYSTEM
   */
  sourceDiskType?: string;
  /**
   * @remarks
   * The status of the snapshot.
   * 
   * Valid values:
   * 
   * *   PROGRESSING: The snapshot is being created.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   FAILED: The snapshot fails to be created.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ACCOMPLISHED: The snapshot is created.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * ACCOMPLISHED
   */
  status?: string;
  /**
   * @remarks
   * Indicates whether disk encryption is enabled.
   * 
   * @example
   * false
   */
  volumeEncryptionEnabled?: boolean;
  /**
   * @remarks
   * The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.
   * 
   * @example
   * 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
   */
  volumeEncryptionKey?: string;
  static names(): { [key: string]: string } {
    return {
      creationTime: 'CreationTime',
      creator: 'Creator',
      deletionTime: 'DeletionTime',
      description: 'Description',
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      desktopStatus: 'DesktopStatus',
      progress: 'Progress',
      protocolType: 'ProtocolType',
      remainTime: 'RemainTime',
      restorePointId: 'RestorePointId',
      restorePointName: 'RestorePointName',
      snapshotId: 'SnapshotId',
      snapshotName: 'SnapshotName',
      snapshotType: 'SnapshotType',
      sourceDiskSize: 'SourceDiskSize',
      sourceDiskType: 'SourceDiskType',
      status: 'Status',
      volumeEncryptionEnabled: 'VolumeEncryptionEnabled',
      volumeEncryptionKey: 'VolumeEncryptionKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creationTime: 'string',
      creator: 'string',
      deletionTime: 'string',
      description: 'string',
      desktopId: 'string',
      desktopName: 'string',
      desktopStatus: 'string',
      progress: 'string',
      protocolType: 'string',
      remainTime: 'number',
      restorePointId: 'string',
      restorePointName: 'string',
      snapshotId: 'string',
      snapshotName: 'string',
      snapshotType: 'string',
      sourceDiskSize: 'string',
      sourceDiskType: 'string',
      status: 'string',
      volumeEncryptionEnabled: 'boolean',
      volumeEncryptionKey: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTimerGroupResponseBodyDataConfigTimers extends $dara.Model {
  /**
   * @example
   * true
   */
  allowClientSetting?: boolean;
  /**
   * @example
   * 0 0 16 ? * 1,2,3,4,5,6,7
   */
  cronExpression?: string;
  /**
   * @example
   * false
   */
  enforce?: boolean;
  /**
   * @example
   * 10
   */
  interval?: number;
  /**
   * @example
   * Shutdown
   */
  operationType?: string;
  processWhitelist?: string[];
  /**
   * @example
   * RESET_TYPE_SYSTEM
   */
  resetType?: string;
  /**
   * @example
   * TimerBoot
   */
  timerType?: string;
  /**
   * @example
   * Standard
   */
  triggerType?: string;
  static names(): { [key: string]: string } {
    return {
      allowClientSetting: 'AllowClientSetting',
      cronExpression: 'CronExpression',
      enforce: 'Enforce',
      interval: 'Interval',
      operationType: 'OperationType',
      processWhitelist: 'ProcessWhitelist',
      resetType: 'ResetType',
      timerType: 'TimerType',
      triggerType: 'TriggerType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allowClientSetting: 'boolean',
      cronExpression: 'string',
      enforce: 'boolean',
      interval: 'number',
      operationType: 'string',
      processWhitelist: { 'type': 'array', 'itemType': 'string' },
      resetType: 'string',
      timerType: 'string',
      triggerType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.processWhitelist)) {
      $dara.Model.validateArray(this.processWhitelist);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTimerGroupResponseBodyData extends $dara.Model {
  /**
   * @example
   * 50
   */
  bindCount?: number;
  bindCountMap?: { [key: string]: number };
  configTimers?: DescribeTimerGroupResponseBodyDataConfigTimers[];
  description?: string;
  /**
   * @example
   * cg-75aazkg2tnqb2*****
   */
  groupId?: string;
  name?: string;
  /**
   * @example
   * CLOUD_DESKTOP
   */
  productType?: string;
  /**
   * @example
   * AVAILABLE
   */
  status?: string;
  /**
   * @example
   * Timer
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      bindCount: 'BindCount',
      bindCountMap: 'BindCountMap',
      configTimers: 'ConfigTimers',
      description: 'Description',
      groupId: 'GroupId',
      name: 'Name',
      productType: 'ProductType',
      status: 'Status',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bindCount: 'number',
      bindCountMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'number' },
      configTimers: { 'type': 'array', 'itemType': DescribeTimerGroupResponseBodyDataConfigTimers },
      description: 'string',
      groupId: 'string',
      name: 'string',
      productType: 'string',
      status: 'string',
      type: 'string',
    };
  }

  validate() {
    if(this.bindCountMap) {
      $dara.Model.validateMap(this.bindCountMap);
    }
    if(Array.isArray(this.configTimers)) {
      $dara.Model.validateArray(this.configTimers);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserConnectTimeResponseBodyData extends $dara.Model {
  endConnectTime?: string;
  endUserId?: string;
  oversoldGroupId?: string;
  startConnectTime?: string;
  userDesktopId?: string;
  userGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      endConnectTime: 'EndConnectTime',
      endUserId: 'EndUserId',
      oversoldGroupId: 'OversoldGroupId',
      startConnectTime: 'StartConnectTime',
      userDesktopId: 'UserDesktopId',
      userGroupId: 'UserGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endConnectTime: 'string',
      endUserId: 'string',
      oversoldGroupId: 'string',
      startConnectTime: 'string',
      userDesktopId: 'string',
      userGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserConnectionRecordsResponseBodyConnectionRecords extends $dara.Model {
  /**
   * @remarks
   * The duration for which the end user is connected to the cloud computer. Unit: seconds.
   * 
   * @example
   * 3405035000
   */
  connectDuration?: string;
  /**
   * @remarks
   * The time when the end user disconnected from the cloud computer.
   * 
   * @example
   * 2022-02-27T20:03:13Z
   */
  connectEndTime?: string;
  /**
   * @remarks
   * The time when the end user connected to the cloud computer.
   * 
   * @example
   * 2022-01-19T10:12:38Z
   */
  connectStartTime?: string;
  /**
   * @remarks
   * The ID of the connection record.
   * 
   * @example
   * 528
   */
  connectionRecordId?: string;
  /**
   * @remarks
   * The ID of the cloud computer to which the end user connected.
   * 
   * @example
   * ud-2hawufy3uedi1****
   */
  desktopId?: string;
  /**
   * @remarks
   * The name of the cloud computer to which the end user connected.
   * 
   * @example
   * testName
   */
  desktopName?: string;
  static names(): { [key: string]: string } {
    return {
      connectDuration: 'ConnectDuration',
      connectEndTime: 'ConnectEndTime',
      connectStartTime: 'ConnectStartTime',
      connectionRecordId: 'ConnectionRecordId',
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      connectDuration: 'string',
      connectEndTime: 'string',
      connectStartTime: 'string',
      connectionRecordId: 'string',
      desktopId: 'string',
      desktopName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesBlackPath extends $dara.Model {
  /**
   * @remarks
   * The path.
   * 
   * @example
   * AppLocal/Data
   */
  path?: string;
  /**
   * @remarks
   * The path type.
   * 
   * Valid values:
   * 
   * *   file
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   folder
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * file
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      path: 'Path',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      path: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesWhitePaths extends $dara.Model {
  /**
   * @remarks
   * The path.
   * 
   * @example
   * games
   */
  path?: string;
  /**
   * @remarks
   * The path type.
   * 
   * Valid values:
   * 
   * *   file
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   folder
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * folder
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      path: 'Path',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      path: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRules extends $dara.Model {
  /**
   * @remarks
   * The blacklist that is configured.
   */
  blackPath?: DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesBlackPath;
  /**
   * @remarks
   * The directories in the whitelist.
   */
  whitePaths?: DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesWhitePaths[];
  static names(): { [key: string]: string } {
    return {
      blackPath: 'BlackPath',
      whitePaths: 'WhitePaths',
    };
  }

  static types(): { [key: string]: any } {
    return {
      blackPath: DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesBlackPath,
      whitePaths: { 'type': 'array', 'itemType': DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesWhitePaths },
    };
  }

  validate() {
    if(this.blackPath && typeof (this.blackPath as any).validate === 'function') {
      (this.blackPath as any).validate();
    }
    if(Array.isArray(this.whitePaths)) {
      $dara.Model.validateArray(this.whitePaths);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserProfilePathRulesResponseBodyUserProfilePathRule extends $dara.Model {
  /**
   * @remarks
   * The desktop group ID.
   * 
   * @example
   * dg-4i8fvpv6tfs03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The directory rules.
   */
  rules?: DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRules[];
  /**
   * @remarks
   * The directory type that is configured for the directory.
   * 
   * Valid values:
   * 
   * *   DesktopGroup
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Default
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Default
   */
  userProfileRuleType?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      rules: 'Rules',
      userProfileRuleType: 'UserProfileRuleType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      rules: { 'type': 'array', 'itemType': DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRules },
      userProfileRuleType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.rules)) {
      $dara.Model.validateArray(this.rules);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsersInGroupResponseBodyEndUsersExternalInfo extends $dara.Model {
  /**
   * @remarks
   * The external name.
   * 
   * @example
   * nameDemo
   */
  externalName?: string;
  /**
   * @remarks
   * The employee ID.
   * 
   * @example
   * 123
   */
  jobNumber?: string;
  static names(): { [key: string]: string } {
    return {
      externalName: 'ExternalName',
      jobNumber: 'JobNumber',
    };
  }

  static types(): { [key: string]: any } {
    return {
      externalName: 'string',
      jobNumber: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModelsPropertyValues extends $dara.Model {
  /**
   * @remarks
   * The property value.
   * 
   * @example
   * value
   */
  propertyValue?: string;
  /**
   * @remarks
   * The ID of the property value.
   * 
   * @example
   * 123
   */
  propertyValueId?: number;
  static names(): { [key: string]: string } {
    return {
      propertyValue: 'PropertyValue',
      propertyValueId: 'PropertyValueId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      propertyValue: 'string',
      propertyValueId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels extends $dara.Model {
  /**
   * @remarks
   * The property ID.
   * 
   * @example
   * 123
   */
  propertyId?: number;
  /**
   * @remarks
   * The property name.
   * 
   * @example
   * key
   */
  propertyKey?: string;
  /**
   * @remarks
   * The property type.
   * 
   * Valid values:
   * 
   * *   1: system property
   * *   2: custom property
   * 
   * @example
   * 1
   */
  propertyType?: number;
  /**
   * @remarks
   * Details about property values.
   */
  propertyValues?: DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModelsPropertyValues[];
  /**
   * @remarks
   * The user ID.
   * 
   * @example
   * 123
   */
  userId?: number;
  /**
   * @remarks
   * The username.
   * 
   * @example
   * nameDemo
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      propertyId: 'PropertyId',
      propertyKey: 'PropertyKey',
      propertyType: 'PropertyType',
      propertyValues: 'PropertyValues',
      userId: 'UserId',
      userName: 'UserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      propertyId: 'number',
      propertyKey: 'string',
      propertyType: 'number',
      propertyValues: { 'type': 'array', 'itemType': DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModelsPropertyValues },
      userId: 'number',
      userName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.propertyValues)) {
      $dara.Model.validateArray(this.propertyValues);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsersInGroupResponseBodyEndUsers extends $dara.Model {
  /**
   * @remarks
   * The connection status.
   * 
   * Valid values:
   * 
   * *   0: disconnected
   * *   1: connecting
   * 
   * @example
   * 1
   */
  connectionStatus?: string;
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string;
  /**
   * @remarks
   * The name of the cloud computer.
   * 
   * @example
   * testName
   */
  desktopName?: string;
  /**
   * @remarks
   * The display name of the enterprise AD account.
   * 
   * @example
   * alice
   */
  displayName?: string;
  /**
   * @remarks
   * The email address of the authorized user.
   * 
   * @example
   * alice@example.com
   */
  endUserEmail?: string;
  /**
   * @remarks
   * The ID of the authorized user.
   * 
   * @example
   * alice
   */
  endUserId?: string;
  /**
   * @remarks
   * The username of the authorized user.
   * 
   * @example
   * alice
   */
  endUserName?: string;
  /**
   * @remarks
   * The mobile number of the authorized user.
   * 
   * @example
   * 1381111****
   */
  endUserPhone?: string;
  /**
   * @remarks
   * The remarks.
   * 
   * @example
   * Note
   */
  endUserRemark?: string;
  /**
   * @remarks
   * The user account type.
   * 
   * Valid values:
   * 
   * *   SIMPLE: convenience account
   * *   AD_CONNECTOR: enterprise Active Directory (AD) account
   * 
   * @example
   * SIMPLE
   */
  endUserType?: string;
  /**
   * @remarks
   * The appended information.
   */
  externalInfo?: DescribeUsersInGroupResponseBodyEndUsersExternalInfo;
  /**
   * @remarks
   * The ID of the cloud computer that is used by the user.
   * 
   * @example
   * ud-i896ze8hazpvl****
   */
  userDesktopId?: string;
  /**
   * @remarks
   * Details about the seats of users.
   */
  userSetPropertiesModels?: DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels[];
  static names(): { [key: string]: string } {
    return {
      connectionStatus: 'ConnectionStatus',
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      displayName: 'DisplayName',
      endUserEmail: 'EndUserEmail',
      endUserId: 'EndUserId',
      endUserName: 'EndUserName',
      endUserPhone: 'EndUserPhone',
      endUserRemark: 'EndUserRemark',
      endUserType: 'EndUserType',
      externalInfo: 'ExternalInfo',
      userDesktopId: 'UserDesktopId',
      userSetPropertiesModels: 'UserSetPropertiesModels',
    };
  }

  static types(): { [key: string]: any } {
    return {
      connectionStatus: 'string',
      desktopId: 'string',
      desktopName: 'string',
      displayName: 'string',
      endUserEmail: 'string',
      endUserId: 'string',
      endUserName: 'string',
      endUserPhone: 'string',
      endUserRemark: 'string',
      endUserType: 'string',
      externalInfo: DescribeUsersInGroupResponseBodyEndUsersExternalInfo,
      userDesktopId: 'string',
      userSetPropertiesModels: { 'type': 'array', 'itemType': DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels },
    };
  }

  validate() {
    if(this.externalInfo && typeof (this.externalInfo as any).validate === 'function') {
      (this.externalInfo as any).validate();
    }
    if(Array.isArray(this.userSetPropertiesModels)) {
      $dara.Model.validateArray(this.userSetPropertiesModels);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsersPasswordResponseBodyDesktopUsers extends $dara.Model {
  /**
   * @remarks
   * The display name of the end user.
   * 
   * @example
   * alice_1365*****
   */
  displayName?: string;
  /**
   * @remarks
   * The ID of the end user.
   * 
   * @example
   * alice
   */
  endUserId?: string;
  /**
   * @remarks
   * The password of the end user.
   * 
   * @example
   * tes123
   */
  password?: string;
  static names(): { [key: string]: string } {
    return {
      displayName: 'DisplayName',
      endUserId: 'EndUserId',
      password: 'Password',
    };
  }

  static types(): { [key: string]: any } {
    return {
      displayName: 'string',
      endUserId: 'string',
      password: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVirtualMFADevicesResponseBodyVirtualMFADevices extends $dara.Model {
  /**
   * @remarks
   * The number of consecutive failures to bind the virtual MFA device, or the number of failures on the verification of the virtual MFA device.
   * 
   * @example
   * 1
   */
  consecutiveFails?: number;
  /**
   * @remarks
   * > This parameter is in invitational preview and is not publicly available.
   * 
   * @example
   * cn-hangzhou+dir-gx2x1dhsmu52rd****
   */
  directoryId?: string;
  /**
   * @remarks
   * The name of the AD user who uses the virtual MFA device.
   * 
   * @example
   * usertest
   */
  endUserId?: string;
  /**
   * @remarks
   * The time when the virtual MFA device was started. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.
   * 
   * @example
   * 2020-12-20T14:52:28Z
   */
  gmtEnabled?: string;
  /**
   * @remarks
   * The time when a locked virtual MFA device was automatically unlocked. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.
   * 
   * @example
   * 2020-12-21T15:21:28Z
   */
  gmtUnlock?: string;
  /**
   * @remarks
   * The ID of the workspace.
   * 
   * @example
   * cn-hangzhou+dir-269345****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The serial number of the virtual MFA device, which is a unique identifier.
   * 
   * @example
   * a25f297f-f2e1-4a44-bbf1-5f48a6e5****
   */
  serialNumber?: string;
  /**
   * @remarks
   * The status of the virtual MFA device.
   * 
   * Valid values:
   * 
   * *   LOCKED
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   UNBOUND
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   NORMAL
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * NORMAL
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      consecutiveFails: 'ConsecutiveFails',
      directoryId: 'DirectoryId',
      endUserId: 'EndUserId',
      gmtEnabled: 'GmtEnabled',
      gmtUnlock: 'GmtUnlock',
      officeSiteId: 'OfficeSiteId',
      serialNumber: 'SerialNumber',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consecutiveFails: 'number',
      directoryId: 'string',
      endUserId: 'string',
      gmtEnabled: 'string',
      gmtUnlock: 'string',
      officeSiteId: 'string',
      serialNumber: 'string',
      status: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeZonesResponseBodyZones extends $dara.Model {
  /**
   * @remarks
   * The zone ID.
   * 
   * @example
   * cn-hangzhou-h
   */
  zoneId?: string;
  static names(): { [key: string]: string } {
    return {
      zoneId: 'ZoneId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      zoneId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisconnectDesktopSessionsRequestSessions extends $dara.Model {
  /**
   * @remarks
   * The cloud desktop ID.
   * 
   * @example
   * ecd-90g15fkhsxxxn0unj
   */
  desktopId?: string;
  /**
   * @remarks
   * The end user ID.
   * 
   * @example
   * wy01
   */
  endUserId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      endUserId: 'EndUserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      endUserId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisconnectDesktopSessionsResponseBodyInvalidSessions extends $dara.Model {
  /**
   * @remarks
   * The cloud desktop ID.
   * 
   * @example
   * ecd-2jv6wugbkp65pxxxx
   */
  desktopId?: string;
  /**
   * @remarks
   * The end user ID.
   * 
   * @example
   * wy01
   */
  endUserId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      endUserId: 'EndUserId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      endUserId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadCdsFileResponseBodyDownloadFileModel extends $dara.Model {
  downloadType?: string;
  /**
   * @example
   * https://pds-XXXX-bj-1693807057.oss-cn-beijing.aliyuncs.com/A0SKfLOp%2F2%2F6662612e0570fb2bdd5549759716d433439f0572%2F6662612ee3804e4901794928b14f9a7477640ee7?di=XXXX&dr=1030&f=667d5a322ebf7409e91c485d808fb3bd8a73efbb&response-content-disposition=attachment%3B%20
   */
  downloadUrl?: string;
  expirationSecond?: string;
  /**
   * @example
   * 2024-07-18T02:55:49.795Z
   */
  expirationTime?: string;
  /**
   * @example
   * 667d5a322ebf7409e91c485d808fb3bd8a73efbb
   */
  fileId?: string;
  /**
   * @example
   * 1594642
   */
  size?: number;
  streamUrl?: string;
  static names(): { [key: string]: string } {
    return {
      downloadType: 'DownloadType',
      downloadUrl: 'DownloadUrl',
      expirationSecond: 'ExpirationSecond',
      expirationTime: 'ExpirationTime',
      fileId: 'FileId',
      size: 'Size',
      streamUrl: 'StreamUrl',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downloadType: 'string',
      downloadUrl: 'string',
      expirationSecond: 'string',
      expirationTime: 'string',
      fileId: 'string',
      size: 'number',
      streamUrl: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportDesktopGroupInfoRequestTag extends $dara.Model {
  /**
   * @remarks
   * The key of the tag. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`. You cannot specify an empty string as a tag key.
   * 
   * @example
   * TestKey
   */
  key?: string;
  /**
   * @remarks
   * The value of the tag. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with `acs:` and cannot contain `http://` or `https://`.
   * 
   * @example
   * TestValue
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportDesktopListInfoRequestTag extends $dara.Model {
  /**
   * @remarks
   * The tag key. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun` and cannot contain only spaces.
   * 
   * @example
   * TestKey
   */
  key?: string;
  /**
   * @remarks
   * The tag value. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `acs:` or `aliyun`.
   * 
   * @example
   * TestValue
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncTaskResponseBodyData extends $dara.Model {
  /**
   * @remarks
   * The asynchronous task ID.
   * 
   * @example
   * 000e89fb-cf8f-11e9-8ab4-b6e98080****
   */
  asyncTaskId?: string;
  /**
   * @remarks
   * The total number of asynchronous tasks that are processed. Example: the number of files that are packaged and downloaded on the server.
   * 
   * @example
   * 100
   */
  consumedProcess?: string;
  /**
   * @remarks
   * The error code of the asynchronous task.
   * 
   * @example
   * InternalError
   */
  errCode?: number;
  /**
   * @remarks
   * The error message of the asynchronous task.
   * 
   * @example
   * The request has been failed due to some unknown error. Please try again later.
   */
  message?: string;
  /**
   * @remarks
   * The task status.
   * 
   * Valid values:
   * 
   * *   Failed: The task failed.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Running: The task was running.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PartialSucceed: The task did not completely succeed.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Succeed: The task succeeded.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Failed
   */
  status?: string;
  /**
   * @remarks
   * The total number of asynchronous tasks to be processed, such as the amount of files to be downloaded and packaged on the server.
   * 
   * @example
   * 1000
   */
  totalProcess?: number;
  /**
   * @remarks
   * The URL to download data generated by the asynchronous task. Example: the URL to package and download tasks on the server.
   * 
   * @example
   * https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx
   */
  url?: string;
  static names(): { [key: string]: string } {
    return {
      asyncTaskId: 'AsyncTaskId',
      consumedProcess: 'ConsumedProcess',
      errCode: 'ErrCode',
      message: 'Message',
      status: 'Status',
      totalProcess: 'TotalProcess',
      url: 'Url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncTaskId: 'string',
      consumedProcess: 'string',
      errCode: 'number',
      message: 'string',
      status: 'string',
      totalProcess: 'number',
      url: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos extends $dara.Model {
  /**
   * @remarks
   * The number of cloud computers that you purchase in the cloud computer pool. This parameter is one of the auto scaling parameters. Valid values: 0 to 200.
   * 
   * @example
   * 5
   */
  buyResAmount?: number;
  /**
   * @remarks
   * The cron expression for the scheduled task.
   * 
   * @example
   * 0 0 0 * * ?
   */
  cron?: string;
  /**
   * @remarks
   * The duration that is retained after the session is disconnected. Unit: milliseconds. Valid values: 180000 to 345600000. That is, the session can be retained for 3 to 5760 minutes (4 days). If you specify the value to 0, the session is permanently retained.
   * 
   * When a session is disconnected, take note of the following situations: If an end user does not resume the session within the specified duration, the session is closed and all unsaved data is cleared. If the end user resumes the session within the specified duration, the end user can still access data of the session.
   * 
   * @example
   * 600000
   */
  keepDuration?: number;
  /**
   * @remarks
   * The load balancing policy of the multi-session cloud computer pool.
   * 
   * Valid values:
   * 
   * *   0: depth-first
   * *   1: breadth-first
   * 
   * @example
   * 1
   */
  loadPolicy?: number;
  /**
   * @remarks
   * The maximum number of cloud computers in the cloud computer pool. This parameter is one of the auto scaling parameters. Valid values: 0 to 200.
   * 
   * @example
   * 100
   */
  maxResAmount?: number;
  /**
   * @remarks
   * The minimum number of cloud computers in the cloud computer pool. This parameter is one of the auto scaling parameters. Valid values: 0 to 200.
   * 
   * @example
   * 1
   */
  minResAmount?: number;
  /**
   * @remarks
   * The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session cloud computer pool. To calculate the ratio of connected sessions, use the following formula:
   * 
   * `Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`
   * 
   * If the ratio of connected sessions is greater than the specified value, new cloud computers are created. If the ratio of connected sessions is smaller than the specified value, idle cloud computers are deleted.
   * 
   * @example
   * 0.5
   */
  ratioThreshold?: number;
  /**
   * @remarks
   * The type of the scheduled task.
   * 
   * Valid values:
   * 
   * *   drop: decline policy
   * *   normal: normal policy
   * *   peak: peak hour policy
   * *   rise: rise policy
   * 
   * @example
   * rise
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      buyResAmount: 'BuyResAmount',
      cron: 'Cron',
      keepDuration: 'KeepDuration',
      loadPolicy: 'LoadPolicy',
      maxResAmount: 'MaxResAmount',
      minResAmount: 'MinResAmount',
      ratioThreshold: 'RatioThreshold',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      buyResAmount: 'number',
      cron: 'string',
      keepDuration: 'number',
      loadPolicy: 'number',
      maxResAmount: 'number',
      minResAmount: 'number',
      ratioThreshold: 'number',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDesktopGroupDetailResponseBodyDesktopsTimerInfos extends $dara.Model {
  /**
   * @remarks
   * The cron expression.
   * 
   * @example
   * 0 58 11 ? * 2
   */
  cronExpression?: string;
  /**
   * @remarks
   * Indicates whether the scheduled task is forcibly executed.
   * 
   * @example
   * false
   */
  forced?: boolean;
  /**
   * @remarks
   * The status of the cloud computer pool.
   * 
   * Valid values:
   * 
   * *   1: enabled
   * *   2: disabled
   * *   3: deleted
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * The type of the scheduled task.
   * 
   * Valid values:
   * 
   * *   1: scheduled reset
   * *   2: scheduled startup
   * *   3: scheduled stop
   * *   4: scheduled restart
   * 
   * @example
   * 1
   */
  timerType?: number;
  static names(): { [key: string]: string } {
    return {
      cronExpression: 'CronExpression',
      forced: 'Forced',
      status: 'Status',
      timerType: 'TimerType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cronExpression: 'string',
      forced: 'boolean',
      status: 'number',
      timerType: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDesktopGroupDetailResponseBodyDesktops extends $dara.Model {
  /**
   * @remarks
   * Indicates whether cloud computers can be automatically created in the subscription cloud computer pool.
   * 
   * Valid values:
   * 
   * *   0: false
   * *   1: true
   * 
   * @example
   * 1
   */
  allowAutoSetup?: number;
  /**
   * @remarks
   * The number of cloud computers that is allowed to be reserved in the pay-as-you-go cloud computer pool. Valid values:
   * 
   * *   0: does not allow the system to reserve cloud computers.
   * *   N: allows the system to reserve N cloud computers. (1≤ N ≤ 100)
   * 
   * @example
   * 1
   */
  allowBufferCount?: number;
  /**
   * @remarks
   * The number of concurrent sessions that is allowed for each cloud computer in a multi-session cloud computer pool.
   * 
   * @example
   * 1
   */
  bindAmount?: number;
  /**
   * @remarks
   * *   This parameter has different meanings based on the billing method of the cloud computer pool. For a subscription pool, this parameter indicates the number of cloud computers that you purchase in the pool. Valid values: 0 to 200.
   * *   For a pay-as-you-go pool, this parameter indicates the minimum number of cloud computers that you can create in the pool. Default value: 1. Valid values: 0 to `MaxDesktopsCount`.
   * 
   * @example
   * 5
   */
  buyDesktopsCount?: number;
  /**
   * @remarks
   * The remarks.
   * 
   * @example
   * for students
   */
  comments?: string;
  /**
   * @remarks
   * The maximum period of time during which the session is connected. When the specified maximum period of time is reached, the session is automatically disconnected. Unit: milliseconds.
   * 
   * @example
   * 60000
   */
  connectDuration?: number;
  /**
   * @remarks
   * The number of vCPUs.
   * 
   * @example
   * 4
   */
  cpu?: number;
  /**
   * @remarks
   * The time when the desktop group was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.
   * 
   * @example
   * 2020-11-06T08:28Z
   */
  creationTime?: string;
  /**
   * @remarks
   * The Alibaba Cloud account that creates the cloud computer pool.
   * 
   * @example
   * 155177335370****
   */
  creator?: string;
  /**
   * @remarks
   * The category of the user disk.
   * 
   * @example
   * cloud_essd
   */
  dataDiskCategory?: string;
  /**
   * @remarks
   * The user disk capacity. Unit: GiB.
   * 
   * @example
   * 80
   */
  dataDiskSize?: string;
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * @example
   * dg-3uiojcc0j4kh7****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The name of the cloud computer pool that is queried.
   * 
   * @example
   * DesktopGroupDemo
   */
  desktopGroupName?: string;
  /**
   * @remarks
   * The ID of the directory or office network.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  directoryId?: string;
  /**
   * @remarks
   * The type of the directory.
   * 
   * @example
   * SIMPLE
   */
  directoryType?: string;
  /**
   * @remarks
   * The time when the subscription cloud computer pool expires.
   * 
   * @example
   * 2021-12-31T15:59Z
   */
  expiredTime?: string;
  /**
   * @remarks
   * The number of vGPUs.
   * 
   * @example
   * 4
   */
  gpuCount?: number;
  /**
   * @remarks
   * The GPU specifications.
   * 
   * @example
   * NVIDIA T4
   */
  gpuSpec?: string;
  /**
   * @remarks
   * After an end user connects to a cloud computer, the session is established. If the system does not detect any inputs from the keyboard or mouse within the specified period of time, the session is closed. Unit: milliseconds.
   * 
   * @example
   * 900000
   */
  idleDisconnectDuration?: number;
  /**
   * @remarks
   * The ID of the image.
   * 
   * @example
   * m-4zfb6zj728hhr****
   */
  imageId?: string;
  /**
   * @remarks
   * The amount of time to retain a session after it is disconnected. Unit: milliseconds. Valid values: 180000 to 345600000. That is, the session can be retained for 3 to 5760 minutes (4 days). If you specify the value to 0, the session is permanently retained.
   * 
   * When a session is disconnected, take note of the following situations: If an end user does not resume the session within the specified duration, the session is closed and all unsaved data is cleared. If the end user resumes the session within the specified duration, the end user can still access data of the session.
   * 
   * @example
   * 180000
   */
  keepDuration?: number;
  /**
   * @remarks
   * The load balancing policy of the multi-session cloud computer pool.
   * 
   * Valid values:
   * 
   * *   0: depth-first
   * *   1: breadth-first
   * 
   * @example
   * 0
   */
  loadPolicy?: number;
  /**
   * @remarks
   * The maximum number of cloud computers that can be housed in the pay-as-you-go cloud computer pool.
   * 
   * @example
   * 10
   */
  maxDesktopsCount?: number;
  /**
   * @remarks
   * The memory size. Unit: MiB.
   * 
   * @example
   * 4096
   */
  memory?: number;
  /**
   * @remarks
   * The maximum number of cloud computers that can be automatically created in the subscription cloud computer pool.
   * 
   * @example
   * 1
   */
  minDesktopsCount?: number;
  /**
   * @remarks
   * The ID of the File Storage NAS (NAS) file system for the user data roaming feature.
   * 
   * @example
   * 0783b4****
   */
  nasFileSystemID?: string;
  /**
   * @remarks
   * The name of the NAS file system for the user data roaming feature.
   * 
   * @example
   * abcd
   */
  nasFileSystemName?: string;
  /**
   * @remarks
   * The ID of the office network.
   * 
   * @example
   * cn-hangzhou+dir-990541****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The name of the office network in which the cloud computer pool resides.
   * 
   * @example
   * test
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The office network type.
   * 
   * Valid values:
   * 
   * *   PERSONAL: individual office network
   * *   SIMPLE: convenience office network
   * *   AD_CONNECTOR: enterprise Active Directory (AD) office network
   * *   RAM: Resource Access Management (RAM)-based office network
   * 
   * @example
   * SIMPLE
   */
  officeSiteType?: string;
  /**
   * @remarks
   * The ID of the cloud computer template.
   * 
   * @example
   * b-1se9fb37r5tfq****
   */
  ownBundleId?: string;
  /**
   * @remarks
   * The name of the cloud computer template.
   * 
   * @example
   * BundleDemo
   */
  ownBundleName?: string;
  /**
   * @remarks
   * The type of the cloud computer pool.
   * 
   * Valid values:
   * 
   * *   0: individual (single session)
   * *   1: shared (multiple sessions)
   * 
   * @example
   * 0
   */
  ownType?: number;
  /**
   * @remarks
   * The billing method.
   * 
   * Valid values:
   * 
   * *   PostPaid: pay-as-you-go.
   * 
   * *   PrePaid: subscription.
   * 
   * @example
   * PrePaid
   */
  payType?: string;
  /**
   * @remarks
   * The ID of the policy that is associated with the cloud computer pool.
   * 
   * @example
   * pg-9cktlowtxfl6****
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The IDs of policies that are associated with the cloud computer pool.
   */
  policyGroupIds?: string[];
  /**
   * @remarks
   * The name of the policy that is associated with the cloud computer pool.
   * 
   * @example
   * test
   */
  policyGroupName?: string;
  /**
   * @remarks
   * The names of policies that are associated with the cloud computer pool.
   */
  policyGroupNames?: string[];
  /**
   * @remarks
   * Indicates whether user data roaming is enabled.
   * 
   * @example
   * true
   */
  profileFollowSwitch?: boolean;
  /**
   * @remarks
   * The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session cloud computer pool. To calculate the ratio of connected sessions, use the following formula:
   * 
   * `Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`
   * 
   * If the ratio of connected sessions is greater than the specified value, new cloud computers are created. If the ratio of connected sessions is smaller than the specified value, idle cloud computers are deleted.
   * 
   * @example
   * 0.6
   */
  ratioThreshold?: number;
  /**
   * @remarks
   * The type of the resource. Only Elastic Compute Service (ECS) instances are supported.
   * 
   * Valid value:
   * 
   * *   0: ECS
   * 
   * @example
   * 0
   */
  resType?: number;
  /**
   * @remarks
   * The disk reset type of the cloud computer.
   * 
   * Valid values:
   * 
   * *   0: does not reset disks.
   * *   1: resets only the system disk.
   * *   2: resets only the user disk.
   * *   3: resets the system disk and the user disk.
   * 
   * @example
   * 0
   */
  resetType?: number;
  /**
   * @remarks
   * Details of the scheduled tasks.
   */
  scaleTimerInfos?: GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos[];
  /**
   * @remarks
   * The payment status of the cloud computer pool.
   * 
   * Valid values:
   * 
   * *   0: unpaid
   * *   1: paid
   * *   2: overdue or expired
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * The period of time before the idle cloud computer enters the Stopped state. If the specified value is reached, the cloud computer is automatically stopped. If an end user connects to the stopped cloud computer, the cloud computer automatically starts. Unit: milliseconds.
   * 
   * @example
   * 180000
   */
  stopDuration?: number;
  /**
   * @remarks
   * The category of the system disk.
   * 
   * @example
   * cloud_essd
   */
  systemDiskCategory?: string;
  /**
   * @remarks
   * The system disk capacity. Unit: GiB.
   * 
   * @example
   * 80
   */
  systemDiskSize?: number;
  /**
   * @remarks
   * The list of scheduled points in time for desktop group tasks.
   */
  timerInfos?: GetDesktopGroupDetailResponseBodyDesktopsTimerInfos[];
  /**
   * @remarks
   * The information about the scheduling policy.
   * 
   * @example
   * abcd
   */
  timingStrategyInfo?: string;
  /**
   * @remarks
   * The version number of the cloud computer pool.
   * 
   * @example
   * 1
   */
  version?: number;
  static names(): { [key: string]: string } {
    return {
      allowAutoSetup: 'AllowAutoSetup',
      allowBufferCount: 'AllowBufferCount',
      bindAmount: 'BindAmount',
      buyDesktopsCount: 'BuyDesktopsCount',
      comments: 'Comments',
      connectDuration: 'ConnectDuration',
      cpu: 'Cpu',
      creationTime: 'CreationTime',
      creator: 'Creator',
      dataDiskCategory: 'DataDiskCategory',
      dataDiskSize: 'DataDiskSize',
      desktopGroupId: 'DesktopGroupId',
      desktopGroupName: 'DesktopGroupName',
      directoryId: 'DirectoryId',
      directoryType: 'DirectoryType',
      expiredTime: 'ExpiredTime',
      gpuCount: 'GpuCount',
      gpuSpec: 'GpuSpec',
      idleDisconnectDuration: 'IdleDisconnectDuration',
      imageId: 'ImageId',
      keepDuration: 'KeepDuration',
      loadPolicy: 'LoadPolicy',
      maxDesktopsCount: 'MaxDesktopsCount',
      memory: 'Memory',
      minDesktopsCount: 'MinDesktopsCount',
      nasFileSystemID: 'NasFileSystemID',
      nasFileSystemName: 'NasFileSystemName',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      officeSiteType: 'OfficeSiteType',
      ownBundleId: 'OwnBundleId',
      ownBundleName: 'OwnBundleName',
      ownType: 'OwnType',
      payType: 'PayType',
      policyGroupId: 'PolicyGroupId',
      policyGroupIds: 'PolicyGroupIds',
      policyGroupName: 'PolicyGroupName',
      policyGroupNames: 'PolicyGroupNames',
      profileFollowSwitch: 'ProfileFollowSwitch',
      ratioThreshold: 'RatioThreshold',
      resType: 'ResType',
      resetType: 'ResetType',
      scaleTimerInfos: 'ScaleTimerInfos',
      status: 'Status',
      stopDuration: 'StopDuration',
      systemDiskCategory: 'SystemDiskCategory',
      systemDiskSize: 'SystemDiskSize',
      timerInfos: 'TimerInfos',
      timingStrategyInfo: 'TimingStrategyInfo',
      version: 'Version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allowAutoSetup: 'number',
      allowBufferCount: 'number',
      bindAmount: 'number',
      buyDesktopsCount: 'number',
      comments: 'string',
      connectDuration: 'number',
      cpu: 'number',
      creationTime: 'string',
      creator: 'string',
      dataDiskCategory: 'string',
      dataDiskSize: 'string',
      desktopGroupId: 'string',
      desktopGroupName: 'string',
      directoryId: 'string',
      directoryType: 'string',
      expiredTime: 'string',
      gpuCount: 'number',
      gpuSpec: 'string',
      idleDisconnectDuration: 'number',
      imageId: 'string',
      keepDuration: 'number',
      loadPolicy: 'number',
      maxDesktopsCount: 'number',
      memory: 'number',
      minDesktopsCount: 'number',
      nasFileSystemID: 'string',
      nasFileSystemName: 'string',
      officeSiteId: 'string',
      officeSiteName: 'string',
      officeSiteType: 'string',
      ownBundleId: 'string',
      ownBundleName: 'string',
      ownType: 'number',
      payType: 'string',
      policyGroupId: 'string',
      policyGroupIds: { 'type': 'array', 'itemType': 'string' },
      policyGroupName: 'string',
      policyGroupNames: { 'type': 'array', 'itemType': 'string' },
      profileFollowSwitch: 'boolean',
      ratioThreshold: 'number',
      resType: 'number',
      resetType: 'number',
      scaleTimerInfos: { 'type': 'array', 'itemType': GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos },
      status: 'number',
      stopDuration: 'number',
      systemDiskCategory: 'string',
      systemDiskSize: 'number',
      timerInfos: { 'type': 'array', 'itemType': GetDesktopGroupDetailResponseBodyDesktopsTimerInfos },
      timingStrategyInfo: 'string',
      version: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.policyGroupIds)) {
      $dara.Model.validateArray(this.policyGroupIds);
    }
    if(Array.isArray(this.policyGroupNames)) {
      $dara.Model.validateArray(this.policyGroupNames);
    }
    if(Array.isArray(this.scaleTimerInfos)) {
      $dara.Model.validateArray(this.scaleTimerInfos);
    }
    if(Array.isArray(this.timerInfos)) {
      $dara.Model.validateArray(this.timerInfos);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListCdsFilesResponseBodyFileModels extends $dara.Model {
  /**
   * @remarks
   * The file category. PDS categorizes files based on their suffixes and MIME types. The following major categories are included: doc, image, audio, and video.
   * 
   * @example
   * image
   */
  category?: string;
  /**
   * @remarks
   * The content type of the file.
   * 
   * @example
   * application/json
   */
  contentType?: string;
  /**
   * @remarks
   * The time when the file was created.
   * 
   * @example
   * 2022-09-06T07:27:08Z
   */
  createTime?: string;
  /**
   * @remarks
   * The file creator.
   * 
   * @example
   * user01
   */
  creator?: string;
  /**
   * @remarks
   * The file description.
   * 
   * @example
   * test1
   */
  description?: string;
  /**
   * @remarks
   * The URL that is used to download the file. The download URL is valid for only 15 minutes. If the URL is expired, you can call the GetFile operation to obtain the file.
   * 
   * @example
   * https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899ef****?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx
   */
  downloadUrl?: string;
  /**
   * @remarks
   * The filename extension.
   * 
   * @example
   * pdf
   */
  fileExtension?: string;
  /**
   * @remarks
   * The file ID.
   * 
   * @example
   * 637725ff2f63db8470984e6c92c692b87d52****
   */
  fileId?: string;
  /**
   * @remarks
   * The file path.
   * 
   * @example
   * isv/1019236948660053/temp/
   */
  filePath?: string;
  /**
   * @remarks
   * The file type.
   * 
   * @example
   * file
   */
  fileType?: string;
  /**
   * @remarks
   * The MD5 value of the file.
   * 
   * @example
   * 63c83ececb4e6926c51448fc5ecb****
   */
  md5?: string;
  /**
   * @remarks
   * The time when the file was last modified.
   * 
   * @example
   * 2022-09-06T07:27:08Z
   */
  modifiedTime?: string;
  /**
   * @remarks
   * The user who modified the file.
   * 
   * @example
   * user02
   */
  modifier?: string;
  /**
   * @remarks
   * The file name.
   * 
   * @example
   * fvt-appcenterp4qwa
   */
  name?: string;
  /**
   * @remarks
   * The time when the file was last opened.
   * 
   * @example
   * 2022-09-06T07:27:08Z
   */
  openTime?: string;
  /**
   * @remarks
   * The timestamp that indicates the time when the file was last opened.
   * 
   * @example
   * 168951245231
   */
  openTimeStamp?: number;
  /**
   * @remarks
   * The ID of the parent folder.
   * 
   * @example
   * 3343213ff2f63db8470984e6c92c3213dfdw****
   */
  parentId?: string;
  /**
   * @remarks
   * The region ID You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * @example
   * cn-beijing
   */
  regionId?: string;
  /**
   * @remarks
   * The SHA 1 file.
   * 
   * @example
   * EA4942AA8761213890A5C386F88E6464D2C3****
   */
  sha1?: string;
  /**
   * @remarks
   * The file size. Unit: bits.
   * 
   * @example
   * 102400
   */
  size?: number;
  /**
   * @remarks
   * The URL of the thumbnail.
   * 
   * @example
   * https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899ef****?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx
   */
  thumbnail?: string;
  static names(): { [key: string]: string } {
    return {
      category: 'Category',
      contentType: 'ContentType',
      createTime: 'CreateTime',
      creator: 'Creator',
      description: 'Description',
      downloadUrl: 'DownloadUrl',
      fileExtension: 'FileExtension',
      fileId: 'FileId',
      filePath: 'FilePath',
      fileType: 'FileType',
      md5: 'Md5',
      modifiedTime: 'ModifiedTime',
      modifier: 'Modifier',
      name: 'Name',
      openTime: 'OpenTime',
      openTimeStamp: 'OpenTimeStamp',
      parentId: 'ParentId',
      regionId: 'RegionId',
      sha1: 'Sha1',
      size: 'Size',
      thumbnail: 'Thumbnail',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'string',
      contentType: 'string',
      createTime: 'string',
      creator: 'string',
      description: 'string',
      downloadUrl: 'string',
      fileExtension: 'string',
      fileId: 'string',
      filePath: 'string',
      fileType: 'string',
      md5: 'string',
      modifiedTime: 'string',
      modifier: 'string',
      name: 'string',
      openTime: 'string',
      openTimeStamp: 'number',
      parentId: 'string',
      regionId: 'string',
      sha1: 'string',
      size: 'number',
      thumbnail: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDirectoryUsersResponseBodyUsers extends $dara.Model {
  assignedDesktopNumber?: number;
  /**
   * @remarks
   * The display name of the user.
   * 
   * @example
   * Alice
   */
  displayName?: string;
  email?: string;
  /**
   * @remarks
   * The name of the user.
   * 
   * @example
   * Alice
   */
  endUser?: string;
  phone?: string;
  static names(): { [key: string]: string } {
    return {
      assignedDesktopNumber: 'AssignedDesktopNumber',
      displayName: 'DisplayName',
      email: 'Email',
      endUser: 'EndUser',
      phone: 'Phone',
    };
  }

  static types(): { [key: string]: any } {
    return {
      assignedDesktopNumber: 'number',
      displayName: 'string',
      email: 'string',
      endUser: 'string',
      phone: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults extends $dara.Model {
  /**
   * @remarks
   * The number of expired cloud computers in the office network.
   * 
   * @example
   * 0
   */
  hasExpiredEdsCount?: number;
  /**
   * @remarks
   * The number of expired cloud computers in the cloud computer pool.
   * 
   * @example
   * 0
   */
  hasExpiredEdsCountForGroup?: number;
  /**
   * @remarks
   * The office network ID.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The office network name.
   * 
   * @example
   * test
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The office network status.
   * 
   * Default values:
   * 
   * *   CONFIGUSERFAILED
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   REGISTERING
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   REGISTERED
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   NEEDCONFIGTRUST
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CONFIGUSERING
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CONFIGTRUSTFAILED
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ERROR
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CONFIGTRUSTING
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   NEEDCONFIGUSER
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * REGISTERED
   */
  officeSiteStatus?: string;
  /**
   * @remarks
   * The ID of the region where the office network resides.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The number of cloud computers that are running in the office network.
   * 
   * @example
   * 1
   */
  runningEdsCount?: number;
  /**
   * @remarks
   * The number of running cloud computers in the cloud computer pool.
   * 
   * @example
   * 1
   */
  runningEdsCountForGroup?: number;
  /**
   * @remarks
   * The total number of cloud computers in the office network.
   * 
   * @example
   * 1
   */
  totalEdsCount?: number;
  /**
   * @remarks
   * The total number of cloud computers in the cloud computer pool.
   * 
   * @example
   * 1
   */
  totalEdsCountForGroup?: number;
  /**
   * @remarks
   * The office network type and its suitable VPC type.
   * 
   * Valid values:
   * 
   * *   standard (default): standard, exclusive VPC
   * *   customized: custom, user VPC
   * *   basic: basic, shared VPC
   * 
   * @example
   * standard
   */
  vpcType?: string;
  /**
   * @remarks
   * The number of cloud computers that are about to expire in the office network.
   * 
   * @example
   * 0
   */
  willExpiredEdsCount?: number;
  /**
   * @remarks
   * The number of cloud computers that are about to expire in the cloud computer pool.
   * 
   * @example
   * 0
   */
  willExpiredEdsCountForGroup?: number;
  static names(): { [key: string]: string } {
    return {
      hasExpiredEdsCount: 'HasExpiredEdsCount',
      hasExpiredEdsCountForGroup: 'HasExpiredEdsCountForGroup',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      officeSiteStatus: 'OfficeSiteStatus',
      regionId: 'RegionId',
      runningEdsCount: 'RunningEdsCount',
      runningEdsCountForGroup: 'RunningEdsCountForGroup',
      totalEdsCount: 'TotalEdsCount',
      totalEdsCountForGroup: 'TotalEdsCountForGroup',
      vpcType: 'VpcType',
      willExpiredEdsCount: 'WillExpiredEdsCount',
      willExpiredEdsCountForGroup: 'WillExpiredEdsCountForGroup',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hasExpiredEdsCount: 'number',
      hasExpiredEdsCountForGroup: 'number',
      officeSiteId: 'string',
      officeSiteName: 'string',
      officeSiteStatus: 'string',
      regionId: 'string',
      runningEdsCount: 'number',
      runningEdsCountForGroup: 'number',
      totalEdsCount: 'number',
      totalEdsCountForGroup: 'number',
      vpcType: 'string',
      willExpiredEdsCount: 'number',
      willExpiredEdsCountForGroup: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOfficeSiteUsersResponseBodyUsers extends $dara.Model {
  assignedDesktopNumber?: number;
  /**
   * @remarks
   * The display name of the user.
   * 
   * @example
   * Alice
   */
  displayName?: string;
  email?: string;
  /**
   * @remarks
   * The name of the AD user.
   * 
   * @example
   * Alice
   */
  endUser?: string;
  phone?: string;
  static names(): { [key: string]: string } {
    return {
      assignedDesktopNumber: 'AssignedDesktopNumber',
      displayName: 'DisplayName',
      email: 'Email',
      endUser: 'EndUser',
      phone: 'Phone',
    };
  }

  static types(): { [key: string]: any } {
    return {
      assignedDesktopNumber: 'number',
      displayName: 'string',
      email: 'string',
      endUser: 'string',
      phone: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagResourcesRequestTag extends $dara.Model {
  /**
   * @remarks
   * The tag keys. You can specify 1 to 20 tag keys.
   * 
   * @example
   * TestKey
   */
  key?: string;
  /**
   * @remarks
   * The tag values. You can specify 1 to 20 tag values.
   * 
   * @example
   * TestValue
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagResourcesResponseBodyTagResources extends $dara.Model {
  /**
   * @remarks
   * The resource ID, which is the cloud computer ID.
   * 
   * @example
   * ecd-ia2zw38bi6cm7****
   */
  resourceId?: string;
  /**
   * @remarks
   * The type of the resource.
   * 
   * Valid values:
   * 
   * * ALIYUN::GWS::INSTANCE: cloud computer.
   * 
   * @example
   * ALIYUN::GWS::INSTANCE
   */
  resourceType?: string;
  /**
   * @remarks
   * The tag keys.
   * 
   * @example
   * TestKey
   */
  tagKey?: string;
  /**
   * @remarks
   * The tag values.
   * 
   * @example
   * TestValue
   */
  tagValue?: string;
  static names(): { [key: string]: string } {
    return {
      resourceId: 'ResourceId',
      resourceType: 'ResourceType',
      tagKey: 'TagKey',
      tagValue: 'TagValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      resourceId: 'string',
      resourceType: 'string',
      tagKey: 'string',
      tagValue: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserAdOrganizationUnitsResponseBodyOUNames extends $dara.Model {
  /**
   * @remarks
   * The name of the OU.
   * 
   * @example
   * wuying_computers
   */
  displayOUName?: string;
  /**
   * @remarks
   * The canonical name (CNAME) of the OU in the AD domain controller.
   * 
   * @example
   * example.com/wuying_computers
   */
  OUName?: string;
  /**
   * @remarks
   * The enterprise AD office network ID.
   * 
   * @example
   * cn-hangzhou+dir-485361****
   */
  officeSiteId?: string;
  static names(): { [key: string]: string } {
    return {
      displayOUName: 'DisplayOUName',
      OUName: 'OUName',
      officeSiteId: 'OfficeSiteId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      displayOUName: 'string',
      OUName: 'string',
      officeSiteId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCustomizedListHeadersRequestHeaders extends $dara.Model {
  /**
   * @remarks
   * The display type of the header.
   * 
   * > For the desktop_id_name and office_site_id_name head keys, set the value of this parameter to required. For other header keys, set the value of this parameter to display or hide based on your requirements.
   * 
   * @example
   * display
   */
  displayType?: string;
  /**
   * @remarks
   * The key of the header.
   * 
   * > All header keys of the list must be specified.
   * 
   * Valid values:
   * 
   * *   desktop_id_name: the IDs and names of the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   system_data_disk: the system disks and data disks of the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   office_site_type: the office network types of the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   create_time: the time when the cloud computers are created.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ip: the IP addresses of the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   spec_system_protocol: the instance types, OSs, and protocol types of the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   monitor: the monitoring information of the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   assigned_users: the number of end users that are assigned to the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   encryption: indicates whether the cloud computers are encrypted.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   office_site_id_name: the IDs and names of the office networks.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   pay_type: the billing methods of the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   tag: the tags that are attached to the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   hostname: the hostnames of the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   status: the statuses of the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   current_user: the current end users of the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * pay_type
   */
  headerKey?: string;
  static names(): { [key: string]: string } {
    return {
      displayType: 'DisplayType',
      headerKey: 'HeaderKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      displayType: 'string',
      headerKey: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopOversoldGroupResponseBodyData extends $dara.Model {
  oversoldGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      oversoldGroupId: 'OversoldGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      oversoldGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopOversoldGroupSaleResponseBodyData extends $dara.Model {
  orderId?: number;
  oversoldGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      oversoldGroupId: 'OversoldGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      oversoldGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopOversoldUserGroupResponseBodyData extends $dara.Model {
  userGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      userGroupId: 'UserGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopSpecRequestResourceSpecs extends $dara.Model {
  desktopId?: string;
  rootDiskSizeGib?: number;
  userDiskSizeGib?: number;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      rootDiskSizeGib: 'RootDiskSizeGib',
      userDiskSizeGib: 'UserDiskSizeGib',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      rootDiskSizeGib: 'number',
      userDiskSizeGib: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopTimerRequestDesktopTimers extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to allow end users to configure the scheduled task.
   * 
   * @example
   * true
   */
  allowClientSetting?: boolean;
  /**
   * @remarks
   * The cron expression of the schedule.
   * 
   * > The time must be in UTC. For example, for 24:00 (UTC+8), you must set the value to 0 0 16 ? \\* 1,2,3,4,5,6,7
   * 
   * @example
   * 0 0 16 ? * 1,2,3,4,5,6,7
   */
  cronExpression?: string;
  /**
   * @remarks
   * Specifies whether to forcibly execute the scheduled task.
   * 
   * Valid values:
   * 
   * *   true: forcibly executes the scheduled task regardless of the status and connection of the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false: does not forcibly execute the scheduled task.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  enforce?: boolean;
  /**
   * @remarks
   * The interval at which the scheduled task is executed. Unit: minutes.
   * 
   * @example
   * 10
   */
  interval?: number;
  /**
   * @remarks
   * The operations that scheduled tasks support. This parameter is valid only when TimerType is set to NoConnect.
   * 
   * Valid values:
   * 
   * *   Hibernate: hibernates the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Shutdown: stops the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Shutdown
   */
  operationType?: string;
  /**
   * @remarks
   * The reset type of the cloud computers.
   * 
   * Valid values:
   * 
   * *   RESET_TYPE_SYSTE: resets the system disk.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   RESET_TYPE_BOTH: resets data and user disks.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * RESET_TYPE_SYSTEM
   */
  resetType?: string;
  /**
   * @remarks
   * The type of the scheduled task.
   * 
   * Valid values:
   * 
   * *   NoOperationDisconnect: Disconnects the cloud computers without performing operations on the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   LogoutShutdown: Stops the cloud computers when end users log out Alibaba Cloud Workspace clients.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   NoConnect: Disconnects the cloud computers when end users perform one of the actions that is specified by the OperationType parameter.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   TimerBoot: Starts the cloud computers on schedule.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   TimerReset: Resets the cloud computers on schedule.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   LoginAutoConnect: automatically connects to the cloud computers when end users log on to Alibaba Cloud Workspace clients.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   NoOperationShutdown: Stops the cloud computers without performing operations on the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   TimerShutdown: Stops the cloud computers on schedule.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   NoOperationReboot: Restarts the cloud computers without performing operations on the cloud computers.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   TimerReboot: Restarts the cloud computers on schedule.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * TimerBoot
   */
  timerType?: string;
  static names(): { [key: string]: string } {
    return {
      allowClientSetting: 'AllowClientSetting',
      cronExpression: 'CronExpression',
      enforce: 'Enforce',
      interval: 'Interval',
      operationType: 'OperationType',
      resetType: 'ResetType',
      timerType: 'TimerType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allowClientSetting: 'boolean',
      cronExpression: 'string',
      enforce: 'boolean',
      interval: 'number',
      operationType: 'string',
      resetType: 'string',
      timerType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopsPolicyGroupResponseBodyModifyResults extends $dara.Model {
  /**
   * @remarks
   * The result of the modification. A value of success indicates that the policy is modified. If the policy failed to be modified, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * The ID of the cloud desktop.
   * 
   * @example
   * ecd-7w78ozhjcwa3u****
   */
  desktopId?: string;
  /**
   * @remarks
   * The error message returned if the request failed. This parameter is not returned if the value of Code is success.``
   * 
   * @example
   * The specified param DesktopId ecd-ia2zw38bi6cm7**** is not found.
   */
  message?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      desktopId: 'DesktopId',
      message: 'Message',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      desktopId: 'string',
      message: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPolicyGroupRequestAuthorizeAccessPolicyRule extends $dara.Model {
  /**
   * @remarks
   * The CIDR block that the client can access.
   * 
   * This parameter is required.
   * 
   * @example
   * 47.100.XX.XX/16
   */
  cidrIp?: string;
  /**
   * @remarks
   * The description of the client IP address whitelist.
   * 
   * @example
   * test
   */
  description?: string;
  static names(): { [key: string]: string } {
    return {
      cidrIp: 'CidrIp',
      description: 'Description',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cidrIp: 'string',
      description: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule extends $dara.Model {
  /**
   * @remarks
   * The object to which the security group rule applies. The value is an IPv4 CIDR block.
   * 
   * @example
   * 10.0.XX.XX/8
   */
  cidrIp?: string;
  /**
   * @remarks
   * The description of security group rule N.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The protocol type of security group rule N. Valid values:
   * 
   * *   tcp: TCP
   * *   udp: UDP
   * *   icmp: ICMP (IPv4)
   * *   gre: GRE
   * *   all: all protocols
   * 
   * @example
   * tcp
   */
  ipProtocol?: string;
  /**
   * @remarks
   * The authorization policy of security group rule N. Valid values:
   * 
   * *   accept: specifies the Allow policy that allows all access requests.
   * *   drop: specifies the Deny policy that denies all access requests. If no messages of access denied are returned, the requests time out or failed.
   * 
   * @example
   * accept
   */
  policy?: string;
  /**
   * @remarks
   * The port range of security group rule N. The value of the port range is determined by the protocol type specified by the AuthorizeSecurityPolicyRule.N.IpProtocol parameter.
   * 
   * *   When the AuthorizeSecurityPolicyRule.N.IpProtocol parameter is set to tcp or udp, the port range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
   * *   When AuthorizeSecurityPolicyRule.N.IpProtocol is set to icmp, set the value to -1/-1.
   * *   When AuthorizeSecurityPolicyRule.N.IpProtocol is set to gre, set the value to -1/-1.
   * *   When AuthorizeSecurityPolicyRule.N.IpProtocol is set to all, set the value to -1/-1.
   * 
   * For more information about the common ports of typical applications, see [Common ports](https://help.aliyun.com/document_detail/40724.html).
   * 
   * @example
   * 22/22
   */
  portRange?: string;
  /**
   * @remarks
   * The priority of security group rule N. A smaller value indicates a higher priority.
   * 
   * Valid values: 1 to 60.
   * 
   * Default value: 1.
   * 
   * @example
   * 1
   */
  priority?: string;
  /**
   * @remarks
   * The direction of security group rule N. Valid values:
   * 
   * *   inflow: inbound
   * *   outflow: outbound
   * 
   * @example
   * inflow
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      cidrIp: 'CidrIp',
      description: 'Description',
      ipProtocol: 'IpProtocol',
      policy: 'Policy',
      portRange: 'PortRange',
      priority: 'Priority',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cidrIp: 'string',
      description: 'string',
      ipProtocol: 'string',
      policy: 'string',
      portRange: 'string',
      priority: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPolicyGroupRequestClientType extends $dara.Model {
  /**
   * @remarks
   * The type of client that you want to use to connect to the cloud desktop. Valid values:
   * 
   * * windows: the Windows client
   * * linux: C-Key Series Cloud Computer TC and A Series Cloud Computer TC
   * * macos: the macOS client
   * * ios: the iOS client
   * * android: the Android client
   * * html5: the web client
   * 
   * > By default, if you do not configure the ClientType-related parameters, all types of clients are allowed to connect to the cloud desktop.
   * 
   * @example
   * windows
   */
  clientType?: string;
  /**
   * @remarks
   * The logon method. This parameter specifies whether a specific type of the client is allowed to connect to the cloud desktop. Valid values:
   * 
   * * on: allowed.
   * * off: disallowed.
   * 
   * > By default, if you do not configure the ClientType-related parameters, all types of clients are allowed to log on to cloud desktops.
   * 
   * @example
   * ON
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      clientType: 'ClientType',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientType: 'string',
      status: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPolicyGroupRequestDeviceRedirects extends $dara.Model {
  deviceType?: string;
  redirectType?: string;
  static names(): { [key: string]: string } {
    return {
      deviceType: 'DeviceType',
      redirectType: 'RedirectType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deviceType: 'string',
      redirectType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPolicyGroupRequestDeviceRules extends $dara.Model {
  deviceName?: string;
  devicePid?: string;
  deviceType?: string;
  deviceVid?: string;
  optCommand?: string;
  redirectType?: string;
  static names(): { [key: string]: string } {
    return {
      deviceName: 'DeviceName',
      devicePid: 'DevicePid',
      deviceType: 'DeviceType',
      deviceVid: 'DeviceVid',
      optCommand: 'OptCommand',
      redirectType: 'RedirectType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deviceName: 'string',
      devicePid: 'string',
      deviceType: 'string',
      deviceVid: 'string',
      optCommand: 'string',
      redirectType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPolicyGroupRequestDomainResolveRule extends $dara.Model {
  /**
   * @remarks
   * The description of the DNS rule.
   * 
   * @example
   * description policy
   */
  description?: string;
  /**
   * @remarks
   * The domain name.
   * 
   * @example
   * *.igetget.com
   */
  domain?: string;
  /**
   * @remarks
   * Specifies whether to allow the DNS rule.
   * 
   * Valid values:
   * 
   * *   allow
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   block
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * block
   */
  policy?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      domain: 'Domain',
      policy: 'Policy',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      domain: 'string',
      policy: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPolicyGroupRequestRevokeAccessPolicyRule extends $dara.Model {
  /**
   * @remarks
   * The IPv4 CIDR block that can be accessed from the client.
   * 
   * @example
   * 47.100.XX.XX/16
   */
  cidrIp?: string;
  /**
   * @remarks
   * The description of the client IP address whitelist that you want to delete.
   * 
   * @example
   * test
   */
  description?: string;
  static names(): { [key: string]: string } {
    return {
      cidrIp: 'CidrIp',
      description: 'Description',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cidrIp: 'string',
      description: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPolicyGroupRequestRevokeSecurityPolicyRule extends $dara.Model {
  /**
   * @remarks
   * The IPv4 CIDR block of the security group rule.
   * 
   * @example
   * 47.100.XX.XX/16
   */
  cidrIp?: string;
  /**
   * @remarks
   * The description of the security group rule.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The protocol type of the security group rule. Valid values:
   * 
   * * TCP
   * * UDP
   * * ICMP: ICMP (IPv4)
   * * GRE
   * * ALL
   * 
   * @example
   * tcp
   */
  ipProtocol?: string;
  /**
   * @remarks
   * The authorization policy of the security group rule that you want to delete. Valid values:
   * 
   * * accept: allows all access requests.
   * * drop: disallows all access requests. If no denied messages are returned, the requests timed out or failed.
   * 
   * Default value: accept.
   * 
   * @example
   * accept
   */
  policy?: string;
  /**
   * @remarks
   * The port range of the security group rule that you want to delete. The value of the port range is determined by the protocol type specified by the IpProtocol parameter.
   * 
   * * If the IpProtocol parameter is set to TCP or UDP, the port range is 1 to 65535. The start port number and the end port number are separated by a forward slash (/). Example: 1/200.
   * * If the IpProtocol parameter is set to ICMP, the port range is -1/-1.
   * * If the IpProtocol parameter is set to GRE, the port range is -1/-1.
   * * If the IpProtocol parameter is set to ALL, the port range is -1/-1.
   * 
   * For more information about the common ports of typical applications, see [Common ports](https://www.alibabacloud.com/help/en/ecs/user-guide/common-ports?spm=a2c63.p38356.0.0.56b87f2c2SJTAw).
   * 
   * @example
   * 22/22
   */
  portRange?: string;
  /**
   * @remarks
   * The priority of the security group rule. A smaller value indicates a higher priority.
   * 
   * Valid values: 1 to 60.
   * 
   * Default value: 1.
   * 
   * @example
   * 1
   */
  priority?: string;
  /**
   * @remarks
   * The direction of the security group rule that you want to delete. Valid values:
   * 
   * * inflow: inbound
   * * outflow: outbound
   * 
   * @example
   * outflow
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      cidrIp: 'CidrIp',
      description: 'Description',
      ipProtocol: 'IpProtocol',
      policy: 'Policy',
      portRange: 'PortRange',
      priority: 'Priority',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cidrIp: 'string',
      description: 'string',
      ipProtocol: 'string',
      policy: 'string',
      portRange: 'string',
      priority: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPolicyGroupRequestUsbSupplyRedirectRule extends $dara.Model {
  /**
   * @remarks
   * The description of the rule.
   * 
   * @example
   * Test rule
   */
  description?: string;
  /**
   * @remarks
   * The class of the device. This parameter is required when you set the usbRuleType parameter to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes?spm=a2c63.p38356.0.0.56b84b03GUn4kJ).
   * 
   * @example
   * 0Eh
   */
  deviceClass?: string;
  /**
   * @remarks
   * The subclass of the device. This parameter is required when you set the usbRuleType parameter to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes?spm=a2c63.p38356.0.0.56b84b03GUn4kJ).
   * 
   * @example
   * xxh
   */
  deviceSubclass?: string;
  /**
   * @remarks
   * The ID of the service.
   * 
   * @example
   * 08**
   */
  productId?: string;
  /**
   * @remarks
   * Specifies whether to allow USB redirection. Valid values:
   * 
   * * 1: allowed.
   * * 2: disallowed.
   * 
   * @example
   * 1
   */
  usbRedirectType?: number;
  /**
   * @remarks
   * The type of the USB redirection rule. Valid values:
   * 
   * * 1: device class.
   * * 2: device vendor.
   * 
   * @example
   * 1
   */
  usbRuleType?: number;
  /**
   * @remarks
   * The ID of the vendor. For more information, see[ Valid USB Vendor IDs (VIDs)](https://www.usb.org/sites/default/files/vendor_ids032322.pdf_1.pdf?spm=a2c63.p38356.0.0.56b84b03GUn4kJ&file=vendor_ids032322.pdf_1.pdf).
   * 
   * @example
   * 04**
   */
  vendorId?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      deviceClass: 'DeviceClass',
      deviceSubclass: 'DeviceSubclass',
      productId: 'ProductId',
      usbRedirectType: 'UsbRedirectType',
      usbRuleType: 'UsbRuleType',
      vendorId: 'VendorId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      deviceClass: 'string',
      deviceSubclass: 'string',
      productId: 'string',
      usbRedirectType: 'number',
      usbRuleType: 'number',
      vendorId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTimerGroupRequestConfigTimers extends $dara.Model {
  /**
   * @example
   * true
   */
  allowClientSetting?: boolean;
  /**
   * @example
   * 0 0 16 ? * 1,2,3,4,5,6,7
   */
  cronExpression?: string;
  /**
   * @example
   * false
   */
  enforce?: boolean;
  /**
   * @example
   * 10
   */
  interval?: number;
  /**
   * @example
   * Shutdown
   */
  operationType?: string;
  processWhitelist?: string[];
  /**
   * @example
   * RESET_TYPE_SYSTEM
   */
  resetType?: string;
  /**
   * @example
   * TIMER_BOOT
   */
  timerType?: string;
  /**
   * @example
   * Standard
   */
  triggerType?: string;
  static names(): { [key: string]: string } {
    return {
      allowClientSetting: 'AllowClientSetting',
      cronExpression: 'CronExpression',
      enforce: 'Enforce',
      interval: 'Interval',
      operationType: 'OperationType',
      processWhitelist: 'ProcessWhitelist',
      resetType: 'ResetType',
      timerType: 'TimerType',
      triggerType: 'TriggerType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allowClientSetting: 'boolean',
      cronExpression: 'string',
      enforce: 'boolean',
      interval: 'number',
      operationType: 'string',
      processWhitelist: { 'type': 'array', 'itemType': 'string' },
      resetType: 'string',
      timerType: 'string',
      triggerType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.processWhitelist)) {
      $dara.Model.validateArray(this.processWhitelist);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MoveCdsFileResponseBodyMoveCdsFileModel extends $dara.Model {
  /**
   * @remarks
   * The ID of the asynchronous task. This parameter is not returned if you copy files. This parameter is returned if you copy folders in the backend in an asynchronous manner. You can call the GetAsyncTask operation to obtain the ID and details of an asynchronous task.
   * 
   * @example
   * fe307518-825a-4c8b-a69c-958f0e8a****
   */
  asyncTaskId?: string;
  /**
   * @remarks
   * Indicates whether the file exists.
   * 
   * Valid values:
   * 
   * *   <!-- -->
   * 
   *     true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   <!-- -->
   * 
   *     false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  exist?: boolean;
  /**
   * @remarks
   * The ID of the file.
   * 
   * @example
   * 63636837e47e5a24a8a940218bef395c210e****
   */
  fileId?: string;
  static names(): { [key: string]: string } {
    return {
      asyncTaskId: 'AsyncTaskId',
      exist: 'Exist',
      fileId: 'FileId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncTaskId: 'string',
      exist: 'boolean',
      fileId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RebuildDesktopsResponseBodyRebuildResults extends $dara.Model {
  /**
   * @remarks
   * The recreation result code. If the request was successful, `success` is returned. If the request failed, an error message is returned.
   * 
   * @example
   * IncorrectDesktopStatus
   */
  code?: string;
  /**
   * @remarks
   * The IDs of the cloud computers.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string;
  /**
   * @remarks
   * The error message. This parameter is invalid if the value of `Code` is `success`.
   * 
   * @example
   * The current status of the desktop does not support this operation.
   */
  message?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      desktopId: 'DesktopId',
      message: 'Message',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      desktopId: 'string',
      message: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveFilePermissionRequestMemberListCdsIdentity extends $dara.Model {
  /**
   * @remarks
   * The user ID or group ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 249dsfseee643h33g3dv****
   */
  id?: string;
  /**
   * @remarks
   * The object type.
   * 
   * Valid values:
   * 
   * *   IT_Group
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     group
   * 
   *     <!-- -->
   * 
   * *   IT_User
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     user
   * 
   *     <!-- -->
   * 
   * This parameter is required.
   * 
   * @example
   * IT_User
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveFilePermissionRequestMemberList extends $dara.Model {
  /**
   * @remarks
   * The permission information.
   * 
   * This parameter is required.
   */
  cdsIdentity?: RemoveFilePermissionRequestMemberListCdsIdentity;
  /**
   * @remarks
   * The role ID. You can configure permissions on roles or actions. This parameter is used to specify the permissions on roles, which conflicts with the ActionList parameter. When you configure both the parameters, this parameter shall prevail.
   * 
   * Valid values:
   * 
   * *   SystemFileEditorWithoutShareLink
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     the role that has the permissions to edit files but cannot share files
   * 
   *     <!-- -->
   * 
   * *   SystemFileUploaderAndDownloaderWithShareLink
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     the role that has the permissions to upload, download, and share files
   * 
   *     <!-- -->
   * 
   * *   SystemFileDownloader
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     the role that has the permissions to download files
   * 
   *     <!-- -->
   * 
   * *   SystemFileEditorWithoutDelete
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     the role that has the permissions to edit files but cannot delete files
   * 
   *     <!-- -->
   * 
   * *   SystemFileOwner
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     the role that has the permissions to collaborate with others
   * 
   *     <!-- -->
   * 
   * *   SystemFileDownloaderWithShareLink
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     the role that has the permissions to download and share files
   * 
   *     <!-- -->
   * 
   * *   SystemFileUploaderAndViewer
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     the role that has the permissions to preview or upload files
   * 
   *     <!-- -->
   * 
   * *   SystemFileViewer
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     the role that has the permissions to preview files
   * 
   *     <!-- -->
   * 
   * *   SystemFileEditor
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     the role that has the permissions to edit files
   * 
   *     <!-- -->
   * 
   * *   SystemFileUploaderWithShareLink
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     the role that has the permissions to upload or share files
   * 
   *     <!-- -->
   * 
   * *   SystemFileUploader
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     the role that has the permission to upload files
   * 
   *     <!-- -->
   * 
   * *   SystemFileUploaderAndDownloader
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     the role that has the permissions to upload or download files
   * 
   *     <!-- -->
   * 
   * *   SystemFileMetaViewer
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     the role that has the permissions to view files
   * 
   *     <!-- -->
   * 
   * This parameter is required.
   * 
   * @example
   * SystemFileUploaderAndDownloader
   */
  roleId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsIdentity: 'CdsIdentity',
      roleId: 'RoleId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsIdentity: RemoveFilePermissionRequestMemberListCdsIdentity,
      roleId: 'string',
    };
  }

  validate() {
    if(this.cdsIdentity && typeof (this.cdsIdentity as any).validate === 'function') {
      (this.cdsIdentity as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RenewDesktopOversoldGroupResponseBodyData extends $dara.Model {
  orderId?: number;
  oversoldGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      oversoldGroupId: 'OversoldGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'number',
      oversoldGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDesktopGroupScaleTimerRequestScaleTimerInfos extends $dara.Model {
  /**
   * @remarks
   * One option for the auto scaling policy. This option specifies the number of cloud computers that you want to create in the cloud computer pool. Valid values: 0 to 200.
   * 
   * @example
   * 5
   */
  buyResAmount?: number;
  /**
   * @remarks
   * The cron expression of the trigger time.
   * 
   * @example
   * 0 0 12 ? * 1
   */
  cron?: string;
  /**
   * @remarks
   * The keep-alive duration of a session after the session is disconnected. Unit: milliseconds. Valid values: 180000 (3 minutes) to 345600000 (4 days). A value of 0 indicates that the session always keeps alive.
   * 
   * If a session is disconnected by the end user or accidentally due to a factor and the end user does not re-establish a connection with the session within the keep-alive duration, the session expires and unsaved data is deleted. If the end user successfully re-establishes a connection with the session within the keep-alive duration, the end user returns to the session and can still access the original data.
   * 
   * @example
   * 1000
   */
  keepDuration?: number;
  /**
   * @remarks
   * The load balancing policy for the multi-session cloud computer pool.
   * 
   * Valid values:
   * 
   * *   0: depth-first
   * *   1: breadth first.
   * 
   * @example
   * 0
   */
  loadPolicy?: number;
  /**
   * @remarks
   * One option for the auto scaling policy. This option specifies the maximum number of cloud computers that you can create in the cloud computer pool. Valid values: 0 to 200.
   * 
   * @example
   * 100
   */
  maxResAmount?: number;
  /**
   * @remarks
   * One option for the auto scaling policy. This option specifies the minimum number of cloud computers that you must create in the cloud computer pool. Valid values: 0 to 200.
   * 
   * @example
   * 5
   */
  minResAmount?: number;
  /**
   * @remarks
   * The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session cloud computer pool. Formula:
   * 
   * `Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`.
   * 
   * When the specified threshold is reached, new cloud computers are automatically created. When the specified threshold is not reached, idle cloud computers are released.
   * 
   * @example
   * 0.9
   */
  ratioThreshold?: number;
  /**
   * @remarks
   * The type of the auto scaling policy.
   * 
   * Valid values:
   * 
   * *   drop
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   normal
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   peak
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   rise
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * rise
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      buyResAmount: 'BuyResAmount',
      cron: 'Cron',
      keepDuration: 'KeepDuration',
      loadPolicy: 'LoadPolicy',
      maxResAmount: 'MaxResAmount',
      minResAmount: 'MinResAmount',
      ratioThreshold: 'RatioThreshold',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      buyResAmount: 'number',
      cron: 'string',
      keepDuration: 'number',
      loadPolicy: 'number',
      maxResAmount: 'number',
      minResAmount: 'number',
      ratioThreshold: 'number',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetUserProfilePathRulesRequestUserProfilePathRuleBlackPath extends $dara.Model {
  /**
   * @remarks
   * The blacklist path.
   * 
   * @example
   * AppLocal/Data
   */
  path?: string;
  /**
   * @remarks
   * The path type.
   * 
   * Valid values:
   * 
   * *   file
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   folder
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * folder
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      path: 'Path',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      path: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetUserProfilePathRulesRequestUserProfilePathRuleWhitePaths extends $dara.Model {
  /**
   * @remarks
   * The whitelist path.
   * 
   * @example
   * whitePath
   */
  path?: string;
  /**
   * @remarks
   * The path type.
   * 
   * Valid values:
   * 
   * *   file
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   folder
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * file
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      path: 'Path',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      path: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetUserProfilePathRulesRequestUserProfilePathRule extends $dara.Model {
  /**
   * @remarks
   * The directory in the blacklist.
   */
  blackPath?: SetUserProfilePathRulesRequestUserProfilePathRuleBlackPath;
  /**
   * @remarks
   * The directories that you want to configure in the whitelist.
   */
  whitePaths?: SetUserProfilePathRulesRequestUserProfilePathRuleWhitePaths[];
  static names(): { [key: string]: string } {
    return {
      blackPath: 'BlackPath',
      whitePaths: 'WhitePaths',
    };
  }

  static types(): { [key: string]: any } {
    return {
      blackPath: SetUserProfilePathRulesRequestUserProfilePathRuleBlackPath,
      whitePaths: { 'type': 'array', 'itemType': SetUserProfilePathRulesRequestUserProfilePathRuleWhitePaths },
    };
  }

  validate() {
    if(this.blackPath && typeof (this.blackPath as any).validate === 'function') {
      (this.blackPath as any).validate();
    }
    if(Array.isArray(this.whitePaths)) {
      $dara.Model.validateArray(this.whitePaths);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TagResourcesRequestTag extends $dara.Model {
  /**
   * @remarks
   * The tag keys. The tag key cannot be an empty string. The tag key can be up to 128 characters in length. It cannot start with `acs:` or `aliyun` and cannot contain `http://` or `https://`.
   * 
   * @example
   * TestKey
   */
  key?: string;
  /**
   * @remarks
   * The tag values. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with `acs:` and cannot contain `http://` or `https://`.
   * 
   * @example
   * TestValue
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnbindConfigGroupRequestResourceInfos extends $dara.Model {
  /**
   * @example
   * CLOUD_DESKTOP
   */
  productType?: string;
  /**
   * @example
   * ecd-ctwj0bk3l5nz****
   */
  resourceId?: string;
  /**
   * @example
   * cn-chengdu
   */
  resourceRegionId?: string;
  /**
   * @example
   * CLOUD_DESKTOP
   */
  resourceType?: string;
  static names(): { [key: string]: string } {
    return {
      productType: 'ProductType',
      resourceId: 'ResourceId',
      resourceRegionId: 'ResourceRegionId',
      resourceType: 'ResourceType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      productType: 'string',
      resourceId: 'string',
      resourceRegionId: 'string',
      resourceType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VerifyCenResponseBodyRouteEntries extends $dara.Model {
  /**
   * @remarks
   * The CIDR block of the route.
   * 
   * @example
   * 172.16.111.3****
   */
  destinationCidrBlock?: string;
  /**
   * @remarks
   * The ID of the instance corresponding to the route.
   * 
   * @example
   * vpc-uf62bu0xs5j8md54p****
   */
  nextHopInstanceId?: string;
  /**
   * @remarks
   * The region ID of the route.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The verification result of the route.
   * 
   * Valid values:
   * 
   * *   Conflict: A CIDR block conflict exists.
   * *   Access: The verification is passed.
   * 
   * @example
   * Access
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      destinationCidrBlock: 'DestinationCidrBlock',
      nextHopInstanceId: 'NextHopInstanceId',
      regionId: 'RegionId',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      destinationCidrBlock: 'string',
      nextHopInstanceId: 'string',
      regionId: 'string',
      status: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CdsFileShareLinkModel extends $dara.Model {
  accessCount?: number;
  createTime?: string;
  creator?: string;
  description?: string;
  disableDownload?: boolean;
  disablePreview?: boolean;
  disableSave?: boolean;
  downloadCount?: number;
  downloadLimit?: number;
  driveId?: string;
  expiration?: string;
  expired?: boolean;
  fileIds?: string;
  modifiyTime?: string;
  previewCount?: number;
  previewLimit?: number;
  reportCount?: number;
  saveCount?: number;
  saveLimit?: number;
  shareId?: string;
  shareLink?: string;
  shareName?: string;
  sharePwd?: string;
  status?: string;
  videoPreviewCount?: number;
  static names(): { [key: string]: string } {
    return {
      accessCount: 'AccessCount',
      createTime: 'CreateTime',
      creator: 'Creator',
      description: 'Description',
      disableDownload: 'DisableDownload',
      disablePreview: 'DisablePreview',
      disableSave: 'DisableSave',
      downloadCount: 'DownloadCount',
      downloadLimit: 'DownloadLimit',
      driveId: 'DriveId',
      expiration: 'Expiration',
      expired: 'Expired',
      fileIds: 'FileIds',
      modifiyTime: 'ModifiyTime',
      previewCount: 'PreviewCount',
      previewLimit: 'PreviewLimit',
      reportCount: 'ReportCount',
      saveCount: 'SaveCount',
      saveLimit: 'SaveLimit',
      shareId: 'ShareId',
      shareLink: 'ShareLink',
      shareName: 'ShareName',
      sharePwd: 'SharePwd',
      status: 'Status',
      videoPreviewCount: 'VideoPreviewCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessCount: 'number',
      createTime: 'string',
      creator: 'string',
      description: 'string',
      disableDownload: 'boolean',
      disablePreview: 'boolean',
      disableSave: 'boolean',
      downloadCount: 'number',
      downloadLimit: 'number',
      driveId: 'string',
      expiration: 'string',
      expired: 'boolean',
      fileIds: 'string',
      modifiyTime: 'string',
      previewCount: 'number',
      previewLimit: 'number',
      reportCount: 'number',
      saveCount: 'number',
      saveLimit: 'number',
      shareId: 'string',
      shareLink: 'string',
      shareName: 'string',
      sharePwd: 'string',
      status: 'string',
      videoPreviewCount: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FilePermissionMember extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  cdsIdentity?: FilePermissionMemberCdsIdentity;
  disinheritSubGroup?: boolean;
  expireTime?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  roleId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsIdentity: 'CdsIdentity',
      disinheritSubGroup: 'DisinheritSubGroup',
      expireTime: 'ExpireTime',
      roleId: 'RoleId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsIdentity: FilePermissionMemberCdsIdentity,
      disinheritSubGroup: 'boolean',
      expireTime: 'number',
      roleId: 'string',
    };
  }

  validate() {
    if(this.cdsIdentity && typeof (this.cdsIdentity as any).validate === 'function') {
      (this.cdsIdentity as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class Permission extends $dara.Model {
  createTime?: string;
  description?: string;
  destCidrIp?: string;
  ipProtocol?: string;
  nicType?: string;
  policy?: string;
  portRange?: string;
  priority?: string;
  sourceCidrIp?: string;
  sourcePortRange?: string;
  static names(): { [key: string]: string } {
    return {
      createTime: 'CreateTime',
      description: 'Description',
      destCidrIp: 'DestCidrIp',
      ipProtocol: 'IpProtocol',
      nicType: 'NicType',
      policy: 'Policy',
      portRange: 'PortRange',
      priority: 'Priority',
      sourceCidrIp: 'SourceCidrIp',
      sourcePortRange: 'SourcePortRange',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'string',
      description: 'string',
      destCidrIp: 'string',
      ipProtocol: 'string',
      nicType: 'string',
      policy: 'string',
      portRange: 'string',
      priority: 'string',
      sourceCidrIp: 'string',
      sourcePortRange: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ActivateOfficeSiteRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the convenience office network that is locked.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-803704****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      officeSiteId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ActivateOfficeSiteResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 269BDB16-2CD8-4865-84BD-11C40BC21DB0
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ActivateOfficeSiteResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ActivateOfficeSiteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ActivateOfficeSiteResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDesktopOversoldUserGroupRequest extends $dara.Model {
  imageId?: string;
  name?: string;
  oversoldGroupId?: string;
  policyGroupId?: string;
  tag?: AddDesktopOversoldUserGroupRequestTag[];
  static names(): { [key: string]: string } {
    return {
      imageId: 'ImageId',
      name: 'Name',
      oversoldGroupId: 'OversoldGroupId',
      policyGroupId: 'PolicyGroupId',
      tag: 'Tag',
    };
  }

  static types(): { [key: string]: any } {
    return {
      imageId: 'string',
      name: 'string',
      oversoldGroupId: 'string',
      policyGroupId: 'string',
      tag: { 'type': 'array', 'itemType': AddDesktopOversoldUserGroupRequestTag },
    };
  }

  validate() {
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDesktopOversoldUserGroupResponseBody extends $dara.Model {
  data?: AddDesktopOversoldUserGroupResponseBodyData;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: AddDesktopOversoldUserGroupResponseBodyData,
      requestId: 'string',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDesktopOversoldUserGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddDesktopOversoldUserGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddDesktopOversoldUserGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDevicesRequest extends $dara.Model {
  /**
   * @remarks
   * The type of the client.
   * 
   * Valid values:
   * 
   * *   1: hardware client.
   * *   2: software client.
   * 
   * This parameter is required.
   * 
   * @example
   * 2
   */
  clientType?: number;
  /**
   * @remarks
   * The IDs of the devices. You can specify up to 200 IDs.
   * 
   * This parameter is required.
   */
  deviceIds?: string[];
  /**
   * @remarks
   * The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      clientType: 'ClientType',
      deviceIds: 'DeviceIds',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientType: 'number',
      deviceIds: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.deviceIds)) {
      $dara.Model.validateArray(this.deviceIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDevicesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The execution result. If the request was successful, `success` is returned. If the request failed, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * The returned error message. This parameter is not returned if the value of Code is `success`.
   * 
   * @example
   * The parameter is not specified.
   */
  message?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * A87DBB05-653A-5E4B-B72B-5F4A1E07****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      message: 'Message',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDevicesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddDevicesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddDevicesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddFilePermissionRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk whose folder you want to share.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-352282****
   */
  cdsId?: string;
  /**
   * @remarks
   * The ID of the end user who uses the cloud disk.
   * 
   * @example
   * user01
   */
  endUserId?: string;
  /**
   * @remarks
   * The ID of the file.
   * 
   * This parameter is required.
   * 
   * @example
   * 6333e553a133ce21e6f747cf948bb9ef95d7****
   */
  fileId?: string;
  /**
   * @remarks
   * The ID of the team that uses cloud disks in Cloud Drive Service.
   * 
   * @example
   * cg-i1ruuudp92qpj****
   */
  groupId?: string;
  /**
   * @remarks
   * The members who are granted the folder permissions.
   * 
   * This parameter is required.
   */
  memberList?: AddFilePermissionRequestMemberList[];
  /**
   * @remarks
   * The region ID of the folder. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      fileId: 'FileId',
      groupId: 'GroupId',
      memberList: 'MemberList',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: 'string',
      fileId: 'string',
      groupId: 'string',
      memberList: { 'type': 'array', 'itemType': AddFilePermissionRequestMemberList },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.memberList)) {
      $dara.Model.validateArray(this.memberList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddFilePermissionShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk whose folder you want to share.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-352282****
   */
  cdsId?: string;
  /**
   * @remarks
   * The ID of the end user who uses the cloud disk.
   * 
   * @example
   * user01
   */
  endUserId?: string;
  /**
   * @remarks
   * The ID of the file.
   * 
   * This parameter is required.
   * 
   * @example
   * 6333e553a133ce21e6f747cf948bb9ef95d7****
   */
  fileId?: string;
  /**
   * @remarks
   * The ID of the team that uses cloud disks in Cloud Drive Service.
   * 
   * @example
   * cg-i1ruuudp92qpj****
   */
  groupId?: string;
  /**
   * @remarks
   * The members who are granted the folder permissions.
   * 
   * This parameter is required.
   */
  memberListShrink?: string;
  /**
   * @remarks
   * The region ID of the folder. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      fileId: 'FileId',
      groupId: 'GroupId',
      memberListShrink: 'MemberList',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: 'string',
      fileId: 'string',
      groupId: 'string',
      memberListShrink: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddFilePermissionResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddFilePermissionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddFilePermissionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddFilePermissionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddUserToDesktopGroupRequest extends $dara.Model {
  /**
   * @remarks
   * The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure the idempotence of a request](https://help.aliyun.com/document_detail/25693.html).
   * 
   * @example
   * 123e4567-e89b-12d3-a456-426655440000
   */
  clientToken?: string;
  /**
   * @remarks
   * The ID of the desktop group that you want to assign to more regular users.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The IDs of the desktop groups.
   */
  desktopGroupIds?: string[];
  /**
   * @remarks
   * The regular users to whom you want to assign the desktop group.
   * 
   * This parameter is required.
   */
  endUserIds?: string[];
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      clientToken: 'ClientToken',
      desktopGroupId: 'DesktopGroupId',
      desktopGroupIds: 'DesktopGroupIds',
      endUserIds: 'EndUserIds',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientToken: 'string',
      desktopGroupId: 'string',
      desktopGroupIds: { 'type': 'array', 'itemType': 'string' },
      endUserIds: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopGroupIds)) {
      $dara.Model.validateArray(this.desktopGroupIds);
    }
    if(Array.isArray(this.endUserIds)) {
      $dara.Model.validateArray(this.endUserIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddUserToDesktopGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddUserToDesktopGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddUserToDesktopGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddUserToDesktopGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddUserToDesktopOversoldUserGroupRequest extends $dara.Model {
  addUserAmount?: number;
  endUserId?: string;
  oversoldGroupId?: string;
  userGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      addUserAmount: 'AddUserAmount',
      endUserId: 'EndUserId',
      oversoldGroupId: 'OversoldGroupId',
      userGroupId: 'UserGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      addUserAmount: 'number',
      endUserId: 'string',
      oversoldGroupId: 'string',
      userGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddUserToDesktopOversoldUserGroupResponseBody extends $dara.Model {
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddUserToDesktopOversoldUserGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AddUserToDesktopOversoldUserGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AddUserToDesktopOversoldUserGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAutoSnapshotPolicyRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computers. You can specify 1 to 20 IDs.
   * 
   * This parameter is required.
   */
  desktopId?: string[];
  /**
   * @remarks
   * The ID of the automatic snapshot policy.
   * 
   * This parameter is required.
   * 
   * @example
   * sp-ejtum8j5tfcw7****
   */
  policyId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      policyId: 'PolicyId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      policyId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAutoSnapshotPolicyResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 63740E03-1B4B-5A18-AC27-2745A4F2****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAutoSnapshotPolicyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApplyAutoSnapshotPolicyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApplyAutoSnapshotPolicyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyCoordinatePrivilegeRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the application for the coordinate permissions.
   * 
   * This parameter is required.
   * 
   * @example
   * co-fqsm6e8ee75w61fp9
   */
  coId?: string;
  /**
   * @remarks
   * The ID of the end user.
   * 
   * @example
   * zhangsan
   */
  endUserId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The type of user who requires the coordinate permissions.
   * 
   * Valid value: TENANT_ADMIN.
   * 
   * This parameter is required.
   * 
   * @example
   * TENANT_ADMIN
   */
  userType?: string;
  /**
   * @remarks
   * The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About** on the client logon page to view the identifier of the client.
   * 
   * @example
   * 8b241d415da244a6936d6d6fa4f20f4d
   */
  uuid?: string;
  static names(): { [key: string]: string } {
    return {
      coId: 'CoId',
      endUserId: 'EndUserId',
      regionId: 'RegionId',
      userType: 'UserType',
      uuid: 'Uuid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      coId: 'string',
      endUserId: 'string',
      regionId: 'string',
      userType: 'string',
      uuid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyCoordinatePrivilegeResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * C43EEAC3-84F8-5C1E-A067-4751C3D1422E
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyCoordinatePrivilegeResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApplyCoordinatePrivilegeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApplyCoordinatePrivilegeResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyCoordinationForMonitoringRequest extends $dara.Model {
  /**
   * @remarks
   * The coordination policy.
   * 
   * Set the value to FULL_CONTROL.
   * 
   * *   The value FULL_CONTROL specifies that the cloud desktop is shared and remote access to the cloud desktop is allowed.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * This parameter is required.
   * 
   * @example
   * FULL_CONTROL
   */
  coordinatePolicyType?: string;
  /**
   * @remarks
   * The ID of the end user who initiates the stream collaboration. If the initiator is the administrator, do not specify this parameter.
   * 
   * @example
   * alice
   */
  endUserId?: string;
  /**
   * @remarks
   * The type of the initiator.
   * 
   * Set the value to ADMIN_INITIATE.
   * 
   * *   The value ADMIN_INITIATE specifies that the administrator initiates the coordination request.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * ADMIN_INITIATE
   */
  initiatorType?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://next.api.aliyun.com/document/ecd/2020-09-30/DescribeRegions) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The list of cloud desktops that run the collaboration task at the same time.
   * 
   * This parameter is required.
   */
  resourceCandidates?: ApplyCoordinationForMonitoringRequestResourceCandidates[];
  /**
   * @remarks
   * The universally unique identifier (UUID) of the device.
   * 
   * This parameter is required.
   * 
   * @example
   * 62f2f1f252f04e0e9d8bc****
   */
  uuid?: string;
  static names(): { [key: string]: string } {
    return {
      coordinatePolicyType: 'CoordinatePolicyType',
      endUserId: 'EndUserId',
      initiatorType: 'InitiatorType',
      regionId: 'RegionId',
      resourceCandidates: 'ResourceCandidates',
      uuid: 'Uuid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      coordinatePolicyType: 'string',
      endUserId: 'string',
      initiatorType: 'string',
      regionId: 'string',
      resourceCandidates: { 'type': 'array', 'itemType': ApplyCoordinationForMonitoringRequestResourceCandidates },
      uuid: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.resourceCandidates)) {
      $dara.Model.validateArray(this.resourceCandidates);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyCoordinationForMonitoringResponseBody extends $dara.Model {
  /**
   * @remarks
   * The list of stream collaboration models.
   */
  coordinateFlowModels?: ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels[];
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      coordinateFlowModels: 'CoordinateFlowModels',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      coordinateFlowModels: { 'type': 'array', 'itemType': ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.coordinateFlowModels)) {
      $dara.Model.validateArray(this.coordinateFlowModels);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyCoordinationForMonitoringResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApplyCoordinationForMonitoringResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApplyCoordinationForMonitoringResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApproveFotaUpdateRequest extends $dara.Model {
  /**
   * @remarks
   * Mirror version.
   * 
   * This parameter is required.
   * 
   * @example
   * 0.0.1-D-20220513.143129
   */
  appVersion?: string;
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-138dsptkrt00u****
   */
  desktopId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      appVersion: 'AppVersion',
      desktopId: 'DesktopId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appVersion: 'string',
      desktopId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApproveFotaUpdateResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApproveFotaUpdateResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApproveFotaUpdateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApproveFotaUpdateResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AssociateNetworkPackageRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the premium bandwidth plan.
   * 
   * This parameter is required.
   * 
   * @example
   * np-e0iodl3yzb62q****
   */
  networkPackageId?: string;
  /**
   * @remarks
   * The ID of the office network. You can call the [DescribeNetworkPackages](https://help.aliyun.com/document_detail/216079.html) to obtain the ID of the office network to which a premium bandwidth plan is bound.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-*********
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      networkPackageId: 'NetworkPackageId',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      networkPackageId: 'string',
      officeSiteId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AssociateNetworkPackageResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AssociateNetworkPackageResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AssociateNetworkPackageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AssociateNetworkPackageResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AttachCenRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the CEN instance.
   * 
   * This parameter is required.
   * 
   * @example
   * cen-3gwy16dojz1m65****
   */
  cenId?: string;
  /**
   * @remarks
   * The Alibaba Cloud account to which the CEN instance belongs.
   * 
   * *   If you own the CEN instance, you can skip this parameter.
   * *   If you do not own the CEN instance, you must specify the ID of the account that owns the CEN instance.
   * 
   * @example
   * 102681951715****
   */
  cenOwnerId?: number;
  /**
   * @remarks
   * The office network ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The verification code. If you do not own the CEN instance, you must call the [SendVerifyCode](https://help.aliyun.com/document_detail/436847.html) operation to obtain a verification code.
   * 
   * @example
   * 12****
   */
  verifyCode?: string;
  static names(): { [key: string]: string } {
    return {
      cenId: 'CenId',
      cenOwnerId: 'CenOwnerId',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
      verifyCode: 'VerifyCode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cenId: 'string',
      cenOwnerId: 'number',
      officeSiteId: 'string',
      regionId: 'string',
      verifyCode: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AttachCenResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AttachCenResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AttachCenResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AttachCenResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AttachEndUserRequest extends $dara.Model {
  /**
   * @remarks
   * The address of the Active Directory (AD) office network.
   * 
   * @example
   * xn--0zw****
   */
  adDomain?: string;
  /**
   * @remarks
   * The type of the client.
   * 
   * Valid values:
   * 
   * *   1: hardware client.
   * 
   * This parameter is required.
   * 
   * @example
   * 2
   */
  clientType?: number;
  /**
   * @remarks
   * The serial number (SN) of the hardware client.
   * 
   * This parameter is required.
   * 
   * @example
   * 111810122200F0C24CF7F1BF-*05AY****
   */
  deviceId?: string;
  /**
   * @remarks
   * The ID of the convenient office network.
   * 
   * @example
   * cn-hangzhou+dir-jedbpr4sl9l37****
   */
  directoryId?: string;
  /**
   * @remarks
   * The ID of the user that you want to bind to the hardware client.
   * 
   * This parameter is required.
   * 
   * @example
   * moli
   */
  endUserId?: string;
  /**
   * @remarks
   * The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The account type of the user.
   * 
   * Valid values:
   * 
   * *   AD: enterprise AD account.
   * *   SIMPLE: convenience account
   * 
   * @example
   * SIMPLE
   */
  userType?: string;
  static names(): { [key: string]: string } {
    return {
      adDomain: 'AdDomain',
      clientType: 'ClientType',
      deviceId: 'DeviceId',
      directoryId: 'DirectoryId',
      endUserId: 'EndUserId',
      regionId: 'RegionId',
      userType: 'UserType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adDomain: 'string',
      clientType: 'number',
      deviceId: 'string',
      directoryId: 'string',
      endUserId: 'string',
      regionId: 'string',
      userType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AttachEndUserResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AttachEndUserResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AttachEndUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AttachEndUserResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BindConfigGroupRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ccg-0chlk9b65lj8z****
   */
  groupId?: string;
  /**
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  resourceInfos?: BindConfigGroupRequestResourceInfos[];
  static names(): { [key: string]: string } {
    return {
      groupId: 'GroupId',
      regionId: 'RegionId',
      resourceInfos: 'ResourceInfos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupId: 'string',
      regionId: 'string',
      resourceInfos: { 'type': 'array', 'itemType': BindConfigGroupRequestResourceInfos },
    };
  }

  validate() {
    if(Array.isArray(this.resourceInfos)) {
      $dara.Model.validateArray(this.resourceInfos);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BindConfigGroupResponseBody extends $dara.Model {
  /**
   * @example
   * ccg-0chlk9b65lj****
   */
  groupId?: string;
  /**
   * @example
   * E54EB497-D7B7-5F04-B744-D8DFA7B******
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      groupId: 'GroupId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BindConfigGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: BindConfigGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: BindConfigGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelAutoSnapshotPolicyRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computers. You can specify 1 to 50 IDs. The IDs cannot be an empty string. The IDs can be up to 64 characters in length and cannot contain `http://` or `https://`. The IDs cannot start with `acs:` or `aliyun`.
   * 
   * This parameter is required.
   */
  desktopId?: string[];
  /**
   * @remarks
   * The ID of the automatic snapshot policy.
   * 
   * @example
   * sp-78lhzpe7kjfnd****
   */
  policyId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      policyId: 'PolicyId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      policyId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelAutoSnapshotPolicyResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 51592A88-0F2C-55E6-AD2C-2AD9C10D****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelAutoSnapshotPolicyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CancelAutoSnapshotPolicyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CancelAutoSnapshotPolicyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelCdsFileShareLinkRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-352282****
   */
  cdsId?: string;
  /**
   * @remarks
   * The ID of the file sharing task.
   * 
   * This parameter is required.
   * 
   * @example
   * 7JQX1Fsw****
   */
  shareId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      shareId: 'ShareId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      shareId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelCdsFileShareLinkResponseBody extends $dara.Model {
  /**
   * @remarks
   * The operation result. The value success indicates that the operation is successful. If the operation failed, an error message is returned.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The data information.
   * 
   * @example
   * true
   */
  data?: boolean;
  /**
   * @remarks
   * The error message that is returned if the request failed. This parameter is not returned if the value of Code is `success`.
   * 
   * @example
   * success
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the call was successful.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'boolean',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelCdsFileShareLinkResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CancelCdsFileShareLinkResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CancelCdsFileShareLinkResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelCoordinationForMonitoringRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of stream collaboration tasks.
   * 
   * This parameter is required.
   */
  coIds?: string[];
  /**
   * @remarks
   * The ID of the end user that initiates stream collaboration. If the initiator is the administrator, skip this parameter.
   * 
   * @example
   * alice
   */
  endUserId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/436773.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The type of the user.
   * 
   * Valid value:
   * 
   * * TENANT_ADMIN: administrator.
   * 
   * @example
   * TENANT_ADMIN
   */
  userType?: string;
  static names(): { [key: string]: string } {
    return {
      coIds: 'CoIds',
      endUserId: 'EndUserId',
      regionId: 'RegionId',
      userType: 'UserType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      coIds: { 'type': 'array', 'itemType': 'string' },
      endUserId: 'string',
      regionId: 'string',
      userType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.coIds)) {
      $dara.Model.validateArray(this.coIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelCoordinationForMonitoringResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelCoordinationForMonitoringResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CancelCoordinationForMonitoringResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CancelCoordinationForMonitoringResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelCopyImageRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the new image in the destination region.
   * 
   * This parameter is required.
   * 
   * @example
   * m-gx2x1dhsmusr2****
   */
  imageId?: string;
  /**
   * @remarks
   * The ID of the region to which the image is copied.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      imageId: 'ImageId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      imageId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelCopyImageResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 5BEFE642-A383-4A18-8939-FB7DE452****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelCopyImageResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CancelCopyImageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CancelCopyImageResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ClonePolicyGroupRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the policy.
   * 
   * This parameter is required.
   * 
   * @example
   * testPolicyGroupName
   */
  name?: string;
  /**
   * @remarks
   * The ID of the policy that you want to clone.
   * 
   * This parameter is required.
   * 
   * @example
   * pg-gx2x1dhsmthe9****
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'Name',
      policyGroupId: 'PolicyGroupId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      policyGroupId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ClonePolicyGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the new policy.
   * 
   * @example
   * pg-7jcaznnx6go6n****
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      policyGroupId: 'PolicyGroupId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      policyGroupId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ClonePolicyGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ClonePolicyGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ClonePolicyGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CompleteCdsFileRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-shanghai+cds-465878****
   */
  cdsId?: string;
  /**
   * @remarks
   * The name of the end user.
   * 
   * @example
   * test0
   */
  endUserId?: string;
  /**
   * @remarks
   * The file ID. An ID is the unique identifier of a file.
   * 
   * This parameter is required.
   * 
   * @example
   * 635a316c94f40f35f5354da29b2aee88c9d1****
   */
  fileId?: string;
  groupId?: string;
  /**
   * @remarks
   * The region ID. You can call the DescribeRegions operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The ID of the file uploading task.
   * 
   * This parameter is required.
   * 
   * @example
   * 6C48B55A1FAC4E1A9E0579059514****
   */
  uploadId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      fileId: 'FileId',
      groupId: 'GroupId',
      regionId: 'RegionId',
      uploadId: 'UploadId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: 'string',
      fileId: 'string',
      groupId: 'string',
      regionId: 'string',
      uploadId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CompleteCdsFileResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 05C2791F-41A7-5E7C-B5E4-1401FD0E****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CompleteCdsFileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CompleteCdsFileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CompleteCdsFileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConfigADConnectorTrustRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the enterprise AD office network.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-778418****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * Specifies whether to configure a trust password for the Remote Desktop Services (RDS) License Domain of the enterprise AD office network.
   * 
   * Valid values:
   * 
   * *   true: configures a trust password for the RDS License Domain of the AD office network.
   * 
   * *   false: configures a trust password for a regular enterprise AD office network.
   * 
   * @example
   * true
   */
  rdsLicenseDomain?: boolean;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The trust password. You can specify the password when you configure a trust relationship between the AD domain and the ecd.acs domain.
   * 
   * This parameter is required.
   * 
   * @example
   * password123***
   */
  trustKey?: string;
  static names(): { [key: string]: string } {
    return {
      officeSiteId: 'OfficeSiteId',
      rdsLicenseDomain: 'RdsLicenseDomain',
      regionId: 'RegionId',
      trustKey: 'TrustKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      officeSiteId: 'string',
      rdsLicenseDomain: 'boolean',
      regionId: 'string',
      trustKey: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConfigADConnectorTrustResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConfigADConnectorTrustResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ConfigADConnectorTrustResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ConfigADConnectorTrustResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConfigADConnectorUserRequest extends $dara.Model {
  /**
   * @remarks
   * The password of the AD user that has the permissions to join computers to domains.
   * 
   * This parameter is required.
   * 
   * @example
   * testPassword
   */
  domainPassword?: string;
  /**
   * @remarks
   * The username of the AD user that has the permissions to join computers to domains.
   * 
   * After the username is configured, the cloud desktops in the same AD workspace are joined to the specified OU.
   * 
   * This parameter is required.
   * 
   * @example
   * Administrator
   */
  domainUserName?: string;
  /**
   * @remarks
   * The name of the OU in the AD domain. You can call the [ListUserAdOrganizationUnits](https://help.aliyun.com/document_detail/311259.html) to obtain the OU name.
   * 
   * @example
   * example.com/Domain Controllers
   */
  OUName?: string;
  /**
   * @remarks
   * The ID of the AD workspace.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-778418****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      domainPassword: 'DomainPassword',
      domainUserName: 'DomainUserName',
      OUName: 'OUName',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      domainPassword: 'string',
      domainUserName: 'string',
      OUName: 'string',
      officeSiteId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConfigADConnectorUserResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConfigADConnectorUserResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ConfigADConnectorUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ConfigADConnectorUserResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CopyCdsFileRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to automatically rename the file if a file that has the same name exists in the folder to which you want to copy the file. Default value: false.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  autoRename?: boolean;
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-352282****
   */
  cdsId?: string;
  /**
   * @remarks
   * The user ID that you want to use to access the cloud disk.
   * 
   * @example
   * user01
   */
  endUserId?: string;
  /**
   * @remarks
   * The file ID. You can call the CreateCdsFile operation to query the file ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 640985a0ca2f71f489d2497682ca0bf468de****
   */
  fileId?: string;
  /**
   * @remarks
   * 目标复制文件所在的个人空间ID（即UserId，您可以在DescribeCloudDriveUsers接口返回的报文中获取。）或者目标复制文件所在的团队空间ID（即GroupId，您可以在DescribeCloudDriveGroups接口返回的报文中获取。）
   * > FileReceiverId和FileReceiverType都为空时，默认复制到文件所在的个人空间。
   * >
   * 
   * @example
   * user02
   */
  fileReceiverId?: string;
  /**
   * @remarks
   * 文件所属的空间类型。
   * 
   * @example
   * user
   */
  fileReceiverType?: string;
  groupId?: string;
  /**
   * @remarks
   * The ID of the parent folder of the folder to which you want to copy the file. If you want to copy the file to the root directory, set this parameter to root.
   * 
   * This parameter is required.
   * 
   * @example
   * root
   */
  parentFolderId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      autoRename: 'AutoRename',
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      fileId: 'FileId',
      fileReceiverId: 'FileReceiverId',
      fileReceiverType: 'FileReceiverType',
      groupId: 'GroupId',
      parentFolderId: 'ParentFolderId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoRename: 'boolean',
      cdsId: 'string',
      endUserId: 'string',
      fileId: 'string',
      fileReceiverId: 'string',
      fileReceiverType: 'string',
      groupId: 'string',
      parentFolderId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CopyCdsFileResponseBody extends $dara.Model {
  /**
   * @remarks
   * The operation result. The value success indicates that the operation is successful. If the operation failed, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * The details about the file copying.
   */
  copyCdsFileModel?: CopyCdsFileResponseBodyCopyCdsFileModel;
  /**
   * @remarks
   * The error message that is returned. This parameter is not returned if the value of Code is success.
   * 
   * @example
   * success
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 93AD30C1-16B8-5C54-AD23-A51FF53F****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      copyCdsFileModel: 'CopyCdsFileModel',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      copyCdsFileModel: CopyCdsFileResponseBodyCopyCdsFileModel,
      message: 'string',
      requestId: 'string',
      success: 'string',
    };
  }

  validate() {
    if(this.copyCdsFileModel && typeof (this.copyCdsFileModel as any).validate === 'function') {
      (this.copyCdsFileModel as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CopyCdsFileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CopyCdsFileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CopyCdsFileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CopyImageRequest extends $dara.Model {
  /**
   * @remarks
   * The description of the new image in the destination region. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
   * 
   * @example
   * This is a test.
   */
  destinationDescription?: string;
  /**
   * @remarks
   * The name of the new image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
   * 
   * This parameter is required.
   * 
   * @example
   * Office_Shanghai
   */
  destinationImageName?: string;
  /**
   * @remarks
   * The ID of the destination region. The ID must be different from the current region ID of the image. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-shenzhen
   */
  destinationRegionId?: string;
  /**
   * @remarks
   * The ID of the image that is copied to the destination region.
   * 
   * This parameter is required.
   * 
   * @example
   * m-gx2x1dhsmusr2****
   */
  imageId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      destinationDescription: 'DestinationDescription',
      destinationImageName: 'DestinationImageName',
      destinationRegionId: 'DestinationRegionId',
      imageId: 'ImageId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      destinationDescription: 'string',
      destinationImageName: 'string',
      destinationRegionId: 'string',
      imageId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CopyImageResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the image that is being copied.
   * 
   * @example
   * m-2g65ljy3ynrdq****
   */
  imageId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 28A40F12-F340-442B-A35F-46EF6A03****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      imageId: 'ImageId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      imageId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CopyImageResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CopyImageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CopyImageResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateADConnectorDirectoryRequest extends $dara.Model {
  /**
   * @remarks
   * The method in which the cloud computer is connected.
   * 
   * Valid values:
   * 
   * *   VPC
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Internet (default)
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Any
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Internet
   */
  desktopAccessType?: string;
  /**
   * @remarks
   * The directory name. The name must be 2 to 255 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
   * 
   * This parameter is required.
   * 
   * @example
   * testDirectoryName
   */
  directoryName?: string;
  /**
   * @remarks
   * The IP address of the DNS server corresponding to the enterprise AD. You can specify only one IP address. Make sure that the specified IP address is accessible in the network of the selected vSwitch.
   * 
   * This parameter is required.
   * 
   * @example
   * ``127.0.**.**``
   */
  dnsAddress?: string[];
  /**
   * @remarks
   * The fully qualified domain name (FQDN) of the enterprise AD system. The value must contain the hostname and the domain name. You can register each FQDN only once.
   * 
   * This parameter is required.
   * 
   * @example
   * corp.example.com
   */
  domainName?: string;
  /**
   * @remarks
   * The password of the domain administrator. The password can be up to 64 characters in length.
   * 
   * This parameter is required.
   * 
   * @example
   * testPassword
   */
  domainPassword?: string;
  /**
   * @remarks
   * The username of the domain administrator. The username can be up to 64 characters in length.
   * 
   * This parameter is required.
   * 
   * @example
   * sAMAccountName
   */
  domainUserName?: string;
  /**
   * @remarks
   * Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.
   * 
   * Valid values:
   * 
   * *   <!-- -->
   * 
   *     true
   * 
   *     <!-- -->
   * 
   *     (default)
   * 
   *     <!-- -->
   * 
   * *   <!-- -->
   * 
   *     false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  enableAdminAccess?: boolean;
  /**
   * @remarks
   * Specifies whether to enable Multi-Factor Authentication (MFA). After you enable MFA, all AD users in the directory must enter a dynamic verification code generated by the virtual MFA device in addition to a correct password when they log on to a cloud computer.
   * 
   * >  When end users log on to a cloud computer for the first time, they must bind an MFA device.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   <!-- -->
   * 
   *     false (default)
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  mfaEnabled?: boolean;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The type of the AD connector.
   * 
   * Valid values:
   * - 1 (General)
   * - 2 (Advanced)
   * 
   * @example
   * 1
   */
  specification?: number;
  /**
   * @remarks
   * The DNS address of the existing AD subdomain.\\
   * If you specify the `SubDomainName` parameter but you do not specify this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.
   * 
   * @example
   * ``127.0.**.**``
   */
  subDomainDnsAddress?: string[];
  /**
   * @remarks
   * The FQDN of the enterprise AD subdomain. The value must contain the hostname and the subdomain name.
   * 
   * @example
   * child.example.com
   */
  subDomainName?: string;
  /**
   * @remarks
   * Details of the vSwitch IDs. You can specify only one vSwitch ID.
   * 
   * This parameter is required.
   * 
   * @example
   * vsw-bp19ocz3erfx15uon****
   */
  vSwitchId?: string[];
  static names(): { [key: string]: string } {
    return {
      desktopAccessType: 'DesktopAccessType',
      directoryName: 'DirectoryName',
      dnsAddress: 'DnsAddress',
      domainName: 'DomainName',
      domainPassword: 'DomainPassword',
      domainUserName: 'DomainUserName',
      enableAdminAccess: 'EnableAdminAccess',
      mfaEnabled: 'MfaEnabled',
      regionId: 'RegionId',
      specification: 'Specification',
      subDomainDnsAddress: 'SubDomainDnsAddress',
      subDomainName: 'SubDomainName',
      vSwitchId: 'VSwitchId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopAccessType: 'string',
      directoryName: 'string',
      dnsAddress: { 'type': 'array', 'itemType': 'string' },
      domainName: 'string',
      domainPassword: 'string',
      domainUserName: 'string',
      enableAdminAccess: 'boolean',
      mfaEnabled: 'boolean',
      regionId: 'string',
      specification: 'number',
      subDomainDnsAddress: { 'type': 'array', 'itemType': 'string' },
      subDomainName: 'string',
      vSwitchId: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.dnsAddress)) {
      $dara.Model.validateArray(this.dnsAddress);
    }
    if(Array.isArray(this.subDomainDnsAddress)) {
      $dara.Model.validateArray(this.subDomainDnsAddress);
    }
    if(Array.isArray(this.vSwitchId)) {
      $dara.Model.validateArray(this.vSwitchId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateADConnectorDirectoryResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of AD connectors.
   */
  adConnectors?: CreateADConnectorDirectoryResponseBodyAdConnectors[];
  /**
   * @remarks
   * The ID of the AD directory.
   * 
   * @example
   * cn-hangzhou+dir-gx2x1dhsmu52rd****
   */
  directoryId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 3FE99D5E-93A1-493F-B1CB-0ABD4D05BEFF
   */
  requestId?: string;
  /**
   * @remarks
   * The AD trust password.
   * 
   * @example
   * 82Tg****
   */
  trustPassword?: string;
  static names(): { [key: string]: string } {
    return {
      adConnectors: 'AdConnectors',
      directoryId: 'DirectoryId',
      requestId: 'RequestId',
      trustPassword: 'TrustPassword',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adConnectors: { 'type': 'array', 'itemType': CreateADConnectorDirectoryResponseBodyAdConnectors },
      directoryId: 'string',
      requestId: 'string',
      trustPassword: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.adConnectors)) {
      $dara.Model.validateArray(this.adConnectors);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateADConnectorDirectoryResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateADConnectorDirectoryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateADConnectorDirectoryResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateADConnectorOfficeSiteRequest extends $dara.Model {
  /**
   * @remarks
   * The hostname of the domain controller. The hostname must comply with the naming conventions for Windows hosts.
   * 
   * @example
   * beijing-ad01
   */
  adHostname?: string;
  backupDCHostname?: string;
  backupDns?: string;
  /**
   * @remarks
   * The maximum public bandwidth of the Internet access package. Valid values: 0 to 200.\\
   * If you do not specify this parameter or you set this parameter to 0, Internet access is disabled.
   * 
   * @example
   * 1
   */
  bandwidth?: number;
  /**
   * @remarks
   * The ID of the CEN instance.
   * 
   * @example
   * cen-3gwy16dojz1m65****
   */
  cenId?: string;
  /**
   * @remarks
   * The Alibaba Cloud account that creates the Cloud Enterprise Network (CEN) instance.
   * 
   * *   If you do not specify the CenId parameter, or the CEN instance that is specified by the CenId parameter belongs to the current Alibaba Cloud account, skip this parameter.
   * *   If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, enter the ID of the Alibaba Cloud account.
   * 
   * @example
   * 102681951715****
   */
  cenOwnerId?: number;
  /**
   * @remarks
   * The IPv4 CIDR block of the virtual private cloud (VPC) that your office network uses. The system creates a VPC for your office network based on the IPv4 CIDR block. We recommend that you set this parameter to one of the following CIDR blocks and their subnets:
   * 
   * *   `10.0.0.0/12` (subnet mask range: 12 to 24 bits)
   * *   `172.16.0.0/12` (subnet mask range: 12 to 24 bits)
   * *   `192.168.0.0/16` (subnet mask range: 16 to 24 bits)
   * 
   * @example
   * 47.100.XX.XX
   */
  cidrBlock?: string;
  /**
   * @remarks
   * The method to connect to cloud computers from Alibaba Cloud Workspace clients.
   * 
   * >  The VPC connection depends on Alibaba Cloud PrivateLink. You can use PrivateLink for free. When you set this parameter to `VPC` or `Any`, PrivateLink is automatically activated.
   * 
   * Valid values:
   * 
   * - Internet: connects clients to cloud desktops only over the Internet. [Default]
   * - VPC: connects clients to cloud desktops only over a VPC.
   * - Any: connects clients to cloud desktops over the Internet or a VPC. You can select a connection method based on your business requirements when you connect to your cloud desktop from a client.
   * 
   * @example
   * Internet
   */
  desktopAccessType?: string;
  /**
   * @remarks
   * The IP address of the DNS server of the enterprise AD system. You can specify only one IP address.
   * 
   * This parameter is required.
   * 
   * @example
   * 192.168.XX.XX
   */
  dnsAddress?: string[];
  /**
   * @remarks
   * The domain name of the enterprise AD system. You can register each domain name only once.
   * 
   * This parameter is required.
   * 
   * @example
   * example.com
   */
  domainName?: string;
  /**
   * @remarks
   * The password of the domain administrator. The password can be up to 64 characters in length.
   * 
   * @example
   * testPassword
   */
  domainPassword?: string;
  /**
   * @remarks
   * The username of the domain administrator. The username can be up to 64 characters in length.
   * 
   * > Specify the username by using sAMAccountName instead of userPrincipalName.
   * 
   * @example
   * Administrator
   */
  domainUserName?: string;
  /**
   * @remarks
   * Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.
   * 
   * Valid values:
   * 
   * *   <!-- -->
   * 
   *     true
   * 
   *     <!-- -->
   * 
   *     (default)
   * 
   *     <!-- -->
   * 
   * *   <!-- -->
   * 
   *     false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  enableAdminAccess?: boolean;
  /**
   * @remarks
   * Specifies whether to enable Internet access.
   * 
   * @example
   * true
   */
  enableInternetAccess?: boolean;
  /**
   * @remarks
   * Specifies whether to enable multi-factor authentication (MFA).
   * 
   * @example
   * false
   */
  mfaEnabled?: boolean;
  /**
   * @remarks
   * The office network name. The name must be 2 to 255 characters in length. It can contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.\\
   * This parameter is empty by default.
   * 
   * @example
   * test
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The protocol type.
   * 
   * Valid value:
   * 
   * *   Adaptive Streaming Protocol (ASP)
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The AD connector type.
   * 
   * Valid values:
   * 
   * *   1: General
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   2: Advanced
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * 1
   */
  specification?: number;
  /**
   * @remarks
   * The DNS address of the enterprise AD subdomain. If you specify `SubDomainName` but do not specify this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.
   * 
   * @example
   * 192.168.XX.XX
   */
  subDomainDnsAddress?: string[];
  /**
   * @remarks
   * The domain name of the enterprise AD subdomain.
   * 
   * @example
   * child.example.com
   */
  subDomainName?: string;
  vSwitchId?: string[];
  /**
   * @remarks
   * The verification code. If the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, you must call the [SendVerifyCode](https://help.aliyun.com/document_detail/436847.html) operation to obtain the verification code.
   * 
   * @example
   * 12****
   */
  verifyCode?: string;
  static names(): { [key: string]: string } {
    return {
      adHostname: 'AdHostname',
      backupDCHostname: 'BackupDCHostname',
      backupDns: 'BackupDns',
      bandwidth: 'Bandwidth',
      cenId: 'CenId',
      cenOwnerId: 'CenOwnerId',
      cidrBlock: 'CidrBlock',
      desktopAccessType: 'DesktopAccessType',
      dnsAddress: 'DnsAddress',
      domainName: 'DomainName',
      domainPassword: 'DomainPassword',
      domainUserName: 'DomainUserName',
      enableAdminAccess: 'EnableAdminAccess',
      enableInternetAccess: 'EnableInternetAccess',
      mfaEnabled: 'MfaEnabled',
      officeSiteName: 'OfficeSiteName',
      protocolType: 'ProtocolType',
      regionId: 'RegionId',
      specification: 'Specification',
      subDomainDnsAddress: 'SubDomainDnsAddress',
      subDomainName: 'SubDomainName',
      vSwitchId: 'VSwitchId',
      verifyCode: 'VerifyCode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adHostname: 'string',
      backupDCHostname: 'string',
      backupDns: 'string',
      bandwidth: 'number',
      cenId: 'string',
      cenOwnerId: 'number',
      cidrBlock: 'string',
      desktopAccessType: 'string',
      dnsAddress: { 'type': 'array', 'itemType': 'string' },
      domainName: 'string',
      domainPassword: 'string',
      domainUserName: 'string',
      enableAdminAccess: 'boolean',
      enableInternetAccess: 'boolean',
      mfaEnabled: 'boolean',
      officeSiteName: 'string',
      protocolType: 'string',
      regionId: 'string',
      specification: 'number',
      subDomainDnsAddress: { 'type': 'array', 'itemType': 'string' },
      subDomainName: 'string',
      vSwitchId: { 'type': 'array', 'itemType': 'string' },
      verifyCode: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.dnsAddress)) {
      $dara.Model.validateArray(this.dnsAddress);
    }
    if(Array.isArray(this.subDomainDnsAddress)) {
      $dara.Model.validateArray(this.subDomainDnsAddress);
    }
    if(Array.isArray(this.vSwitchId)) {
      $dara.Model.validateArray(this.vSwitchId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateADConnectorOfficeSiteResponseBody extends $dara.Model {
  /**
   * @remarks
   * The office network ID.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      officeSiteId: 'OfficeSiteId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      officeSiteId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateADConnectorOfficeSiteResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateADConnectorOfficeSiteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateADConnectorOfficeSiteResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAndBindNasFileSystemRequest extends $dara.Model {
  /**
   * @remarks
   * The description of the NAS file system.
   * 
   * @example
   * newDescription
   */
  description?: string;
  /**
   * @remarks
   * The ID of the desktop group.
   * 
   * This parameter is required.
   * 
   * @example
   * dg-fh0vdzyh6rdc*****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * Specifies whether to encrypt data in the NAS file system. You can use keys that are hosted by Key Management Service (KMS) to encrypt data in a file system. When you read and write the encrypted data, the data is automatically decrypted. Valid values:
   * 
   * *   0: does not encrypt data in the NAS file system.
   * *   1: encrypts data in the NAS file system by using a NAS-managed key. ` If you set  `FileSystemType`  to  `standard`  or  `extreme`, you can use a NAS-managed key to encrypt data in a NAS file system.`
   * *   2: encrypts data in the NAS file system by using a KMS-managed key. `If` you set FileSystemType`  to  `extreme`, you can use a KMS-managed key to encrypt data in a NAS file system.`
   * 
   * Default value: 0.
   * 
   * @example
   * 0
   */
  encryptType?: number;
  /**
   * @remarks
   * The list of users.
   */
  endUserIds?: string[];
  /**
   * @remarks
   * The name of the NAS file system.
   * 
   * This parameter is required.
   * 
   * @example
   * szy-asp-upm-test
   */
  fileSystemName?: string;
  /**
   * @remarks
   * The ID of the workspace.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-beijing+dir-15657*****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The storage type of the NAS file system. Valid values:
   * 
   * *   Capacity
   * *   Performance
   * 
   * Default value: Capacity.
   * 
   * This parameter is required.
   * 
   * @example
   * Capacity
   */
  storageType?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      desktopGroupId: 'DesktopGroupId',
      encryptType: 'EncryptType',
      endUserIds: 'EndUserIds',
      fileSystemName: 'FileSystemName',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
      storageType: 'StorageType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      desktopGroupId: 'string',
      encryptType: 'number',
      endUserIds: { 'type': 'array', 'itemType': 'string' },
      fileSystemName: 'string',
      officeSiteId: 'string',
      regionId: 'string',
      storageType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.endUserIds)) {
      $dara.Model.validateArray(this.endUserIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAndBindNasFileSystemResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * F7E4322D-D679-5ACB-A909-490D2F0E****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAndBindNasFileSystemResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateAndBindNasFileSystemResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateAndBindNasFileSystemResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAutoSnapshotPolicyRequest extends $dara.Model {
  /**
   * @remarks
   * The CRON expression for periodic scheduling.
   * 
   * This parameter is required.
   * 
   * @example
   * 0 0 2 ? * 1-7
   */
  cronExpression?: string;
  /**
   * @remarks
   * The name of the automatic snapshot policy. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-). This parameter is empty by default.
   * 
   * This parameter is required.
   * 
   * @example
   * test_auto_policy
   */
  policyName?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The retention period of the automatic snapshots. Unit: days. Valid values: 1 to 180.
   * 
   * This parameter is required.
   * 
   * @example
   * 30
   */
  retentionDays?: number;
  static names(): { [key: string]: string } {
    return {
      cronExpression: 'CronExpression',
      policyName: 'PolicyName',
      regionId: 'RegionId',
      retentionDays: 'RetentionDays',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cronExpression: 'string',
      policyName: 'string',
      regionId: 'string',
      retentionDays: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAutoSnapshotPolicyResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the automatic snapshot policy.
   * 
   * @example
   * sp-3hpa78d0qyt99****
   */
  policyId?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 51592A88-0F2C-55E6-AD2C-2AD9C10D****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      policyId: 'PolicyId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      policyId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAutoSnapshotPolicyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateAutoSnapshotPolicyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateAutoSnapshotPolicyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBundleRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the cloud computer template.
   * 
   * @example
   * testBundleName
   */
  bundleName?: string;
  /**
   * @remarks
   * The description of the cloud computer template.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The instance type of the cloud computers. You can call the [DescribeBundles](https://help.aliyun.com/document_detail/436974.html) operation to query cloud computer templates and obtain the instance types supported by the cloud computers from the `DesktopType` response parameter.
   * 
   * >  If you want the template to use a non-GPU-accelerated image, you can only select a non-GPU-accelerated instance type. If you want the template to use a GPU-accelerated image, you can only select a GPU-accelerated instance type.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd.basic.large
   */
  desktopType?: string;
  /**
   * @remarks
   * The ID of the image.
   * 
   * This parameter is required.
   * 
   * @example
   * m-4zfb6zj728hhr****
   */
  imageId?: string;
  /**
   * @remarks
   * The OS language. This parameter is available only for system images. Valid values:
   * 
   * *   zh-CN: Simplified Chinese
   * *   zh-HK: Traditional Chinese (Hong Kong)
   * *   en-US: American English
   * *   ja-JP: Japanese
   * 
   * @example
   * zh-CN
   */
  language?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The performance level (PL) of the system disk. When the cloud computer instance type that is specified by the DesktopType parameter is set to a graphical instance type or instance type with a high clock speed, you can set the performance level of the disks. For more information about the differences among disks at different PLs, see [Enhanced SSDs](https://help.aliyun.com/document_detail/122389.html).
   * 
   * Valid values:
   * 
   * *   PL1
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PL0
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PL3
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PL2
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * PL1
   */
  rootDiskPerformanceLevel?: string;
  /**
   * @remarks
   * The size of the system disk. Unit: GiB. The value of this parameter must be consistent with the system disk size supported by the cloud computer instance type. For more information, see [Overview](https://help.aliyun.com/document_detail/188609.html).
   * 
   * This parameter is required.
   * 
   * @example
   * 80
   */
  rootDiskSizeGib?: number;
  /**
   * @remarks
   * The PL of the data disk. When the cloud computer instance type that is specified by the DesktopType parameter is set to a graphical instance type or instance type with a high clock speed, you can set the performance level of the disks. For more information about the differences among disks at different PLs, see [Enhanced SSDs](https://help.aliyun.com/document_detail/122389.html).
   * 
   * Valid values:
   * 
   * *   PL1
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PL0
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PL3
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PL2
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * PL1
   */
  userDiskPerformanceLevel?: string;
  /**
   * @remarks
   * The data disk sizes. You can configure only one data disk.
   * 
   * This parameter is required.
   * 
   * @example
   * 70
   */
  userDiskSizeGib?: number[];
  static names(): { [key: string]: string } {
    return {
      bundleName: 'BundleName',
      description: 'Description',
      desktopType: 'DesktopType',
      imageId: 'ImageId',
      language: 'Language',
      regionId: 'RegionId',
      rootDiskPerformanceLevel: 'RootDiskPerformanceLevel',
      rootDiskSizeGib: 'RootDiskSizeGib',
      userDiskPerformanceLevel: 'UserDiskPerformanceLevel',
      userDiskSizeGib: 'UserDiskSizeGib',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bundleName: 'string',
      description: 'string',
      desktopType: 'string',
      imageId: 'string',
      language: 'string',
      regionId: 'string',
      rootDiskPerformanceLevel: 'string',
      rootDiskSizeGib: 'number',
      userDiskPerformanceLevel: 'string',
      userDiskSizeGib: { 'type': 'array', 'itemType': 'number' },
    };
  }

  validate() {
    if(Array.isArray(this.userDiskSizeGib)) {
      $dara.Model.validateArray(this.userDiskSizeGib);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBundleResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer template.
   * 
   * @example
   * b-cezrnfgecbich****
   */
  bundleId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      bundleId: 'BundleId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bundleId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBundleResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateBundleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateBundleResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCdsFileRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-82414*****
   */
  cdsId?: string;
  /**
   * @remarks
   * The policy that is used when the file that you want to upload has the same name as an existing file in the cloud disk.
   * 
   * Valid values:
   * 
   * *   refuse
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     denies creating the file
   * 
   *     <!-- -->
   * 
   *     .
   * 
   * *   auto_rename
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     automatically renames the file
   * 
   *     <!-- -->
   * 
   *     .
   * 
   * *   ignore
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     allows the file to use the same name as the existing file in the cloud disk
   * 
   *     <!-- -->
   * 
   *     .
   * 
   * *   over_write
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     overwrites the existing file in the cloud disk
   * 
   *     <!-- -->
   * 
   *     .
   * 
   * @example
   * ignore
   */
  conflictPolicy?: string;
  /**
   * @remarks
   * The user ID.
   * 
   * @example
   * test1
   */
  endUserId?: string;
  /**
   * @remarks
   * The hash value of the SHA1 algorithm that is used by the file.
   * 
   * @example
   * 7C4A8D09CA3762AF61E59520943DC26494F8****
   */
  fileHash?: string;
  /**
   * @remarks
   * The file size. Unit: bytes.
   * 
   * This parameter is required.
   * 
   * @example
   * 2048
   */
  fileLength?: number;
  /**
   * @remarks
   * The file name.
   * 
   * This parameter is required.
   * 
   * @example
   * testFile.txt
   */
  fileName?: string;
  /**
   * @remarks
   * The file type.
   * 
   * Valid values:
   * 
   * *   file
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   folder
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * This parameter is required.
   * 
   * @example
   * file
   */
  fileType?: string;
  groupId?: string;
  /**
   * @remarks
   * The ID of the parent folder.
   * 
   * This parameter is required.
   * 
   * @example
   * 637c9163b453b1a384874264ba79f3f9eab9****
   */
  parentFileId?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      conflictPolicy: 'ConflictPolicy',
      endUserId: 'EndUserId',
      fileHash: 'FileHash',
      fileLength: 'FileLength',
      fileName: 'FileName',
      fileType: 'FileType',
      groupId: 'GroupId',
      parentFileId: 'ParentFileId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      conflictPolicy: 'string',
      endUserId: 'string',
      fileHash: 'string',
      fileLength: 'number',
      fileName: 'string',
      fileType: 'string',
      groupId: 'string',
      parentFileId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCdsFileResponseBody extends $dara.Model {
  fileModel?: CreateCdsFileResponseBodyFileModel;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 2BAFE05D-FFB9-5938-96D0-08017DB9****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      fileModel: 'FileModel',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileModel: CreateCdsFileResponseBodyFileModel,
      requestId: 'string',
    };
  }

  validate() {
    if(this.fileModel && typeof (this.fileModel as any).validate === 'function') {
      (this.fileModel as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCdsFileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateCdsFileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateCdsFileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCdsFileShareLinkRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-shanghai+cds-135515****
   */
  cdsId?: string;
  /**
   * @remarks
   * The description of the file sharing task. The description must be 0 to 1,024 characters in length.
   */
  description?: string;
  /**
   * @remarks
   * Specifies whether to prohibit the download of the files that are being shared.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     prohibits file download
   * 
   *     <!-- -->
   * 
   *     .
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     allows file download
   * 
   *     <!-- -->
   * 
   *     .
   * 
   * @example
   * false
   */
  disableDownload?: boolean;
  /**
   * @remarks
   * Specifies whether to prohibit the preview of the files that are being shared.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     prohibits file preview
   * 
   *     <!-- -->
   * 
   *     .
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     allows file preview
   * 
   *     <!-- -->
   * 
   *     .
   * 
   * @example
   * false
   */
  disablePreview?: boolean;
  /**
   * @remarks
   * Specifies whether to prohibit the dump of the files that are being shared.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     prohibits file dump
   * 
   *     <!-- -->
   * 
   *     .
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     allows file dump
   * 
   *     <!-- -->
   * 
   *     .
   * 
   * @example
   * false
   */
  disableSave?: boolean;
  /**
   * @remarks
   * The limit on the number of times that the shared files can be downloaded. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.
   * 
   * @example
   * 100
   */
  downloadLimit?: number;
  /**
   * @remarks
   * The ID of the end user.
   * 
   * @example
   * user01
   */
  endUserId?: string;
  /**
   * @remarks
   * The time when the file sharing link expires. The value of this parameter follows the RFC 3339 standard. Example: "2020-06-28T11:33:00.000+08:00". If this parameter is set to "", the file sharing link never expires.
   * 
   * @example
   * 2020-06-28T11:33:00.000+08:00
   */
  expiration?: string;
  /**
   * @remarks
   * The file IDs.
   */
  fileIds?: string[];
  groupId?: string;
  /**
   * @remarks
   * The limit on the number of times that the shared files can be previewed. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be previewed.
   * 
   * @example
   * 100
   */
  previewLimit?: number;
  /**
   * @remarks
   * The limit on the number of times that the shared files can be dumped. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be dumped.
   * 
   * @example
   * 100
   */
  saveLimit?: number;
  /**
   * @remarks
   * The name of the file sharing task. If you leave this parameter empty, the file name that corresponds to the first ID in the file ID list is used. The name must be 0 to 128 characters in length.
   * 
   * @example
   * view.txt
   */
  shareName?: string;
  /**
   * @remarks
   * The length of the access code. Valid values: 6 to 8. Unit: bytes. If you leave this parameter empty or set it to null, no access code is required. If you use a token to share files, you do not need to configure this parameter. The access code can contain only visible ASCII characters.
   * 
   * @example
   * 12345678
   */
  sharePwd?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      description: 'Description',
      disableDownload: 'DisableDownload',
      disablePreview: 'DisablePreview',
      disableSave: 'DisableSave',
      downloadLimit: 'DownloadLimit',
      endUserId: 'EndUserId',
      expiration: 'Expiration',
      fileIds: 'FileIds',
      groupId: 'GroupId',
      previewLimit: 'PreviewLimit',
      saveLimit: 'SaveLimit',
      shareName: 'ShareName',
      sharePwd: 'SharePwd',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      description: 'string',
      disableDownload: 'boolean',
      disablePreview: 'boolean',
      disableSave: 'boolean',
      downloadLimit: 'number',
      endUserId: 'string',
      expiration: 'string',
      fileIds: { 'type': 'array', 'itemType': 'string' },
      groupId: 'string',
      previewLimit: 'number',
      saveLimit: 'number',
      shareName: 'string',
      sharePwd: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.fileIds)) {
      $dara.Model.validateArray(this.fileIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCdsFileShareLinkResponseBody extends $dara.Model {
  /**
   * @remarks
   * The operation result. The value success indicates that the operation is successful. If the operation failed, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * The data information.
   */
  data?: CdsFileShareLinkModel;
  /**
   * @remarks
   * The error message that is returned. This parameter is not returned if the value of Code is success.
   * 
   * @example
   * success
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 51592A88-0F2C-55E6-AD2C-2AD9C10D****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: CdsFileShareLinkModel,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCdsFileShareLinkResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateCdsFileShareLinkResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateCdsFileShareLinkResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCloudDriveServiceRequest extends $dara.Model {
  autoPay?: boolean;
  autoRenew?: boolean;
  /**
   * @remarks
   * The business type.
   * 
   * @example
   * 3
   */
  bizType?: number;
  cdsChargeType?: string;
  /**
   * @example
   * cen-g4ba1mkji8nj6****
   */
  cenId?: string;
  /**
   * @example
   * test.local
   */
  domainName?: string;
  endUserId?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 536870912000
   */
  maxSize?: number;
  /**
   * @remarks
   * The name of the cloud disk that you want to create in Cloud Drive Service.
   * 
   * @example
   * wuying-pds
   */
  name?: string;
  /**
   * @example
   * cn-hangzhou+dir-400695****
   */
  officeSiteId?: string;
  /**
   * @example
   * SIMPLE
   */
  officeSiteType?: string;
  period?: number;
  periodUnit?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The solution ID.
   * 
   * @example
   * co-0esnf8kb8zpfbqmvt
   */
  solutionId?: string;
  userCount?: number;
  /**
   * @example
   * 1024000
   */
  userMaxSize?: number;
  static names(): { [key: string]: string } {
    return {
      autoPay: 'AutoPay',
      autoRenew: 'AutoRenew',
      bizType: 'BizType',
      cdsChargeType: 'CdsChargeType',
      cenId: 'CenId',
      domainName: 'DomainName',
      endUserId: 'EndUserId',
      maxSize: 'MaxSize',
      name: 'Name',
      officeSiteId: 'OfficeSiteId',
      officeSiteType: 'OfficeSiteType',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      regionId: 'RegionId',
      solutionId: 'SolutionId',
      userCount: 'UserCount',
      userMaxSize: 'UserMaxSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoPay: 'boolean',
      autoRenew: 'boolean',
      bizType: 'number',
      cdsChargeType: 'string',
      cenId: 'string',
      domainName: 'string',
      endUserId: { 'type': 'array', 'itemType': 'string' },
      maxSize: 'number',
      name: 'string',
      officeSiteId: 'string',
      officeSiteType: 'string',
      period: 'number',
      periodUnit: 'string',
      regionId: 'string',
      solutionId: 'string',
      userCount: 'number',
      userMaxSize: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.endUserId)) {
      $dara.Model.validateArray(this.endUserId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCloudDriveServiceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the attached cloud disk.
   * 
   * @example
   * cn-hangzhou+cds-7782057786
   */
  cdsId?: string;
  /**
   * @remarks
   * The name of the cloud disk that is created in Cloud Drive Service.
   * 
   * @example
   * CDS_Windows_1126
   */
  cdsName?: string;
  /**
   * @example
   * cen-638u3wxds9snyc****
   */
  cenId?: string;
  conflictCdsAndOrder?: CreateCloudDriveServiceResponseBodyConflictCdsAndOrder;
  /**
   * @example
   * test1.local
   */
  domainName?: string;
  errorCode?: string;
  /**
   * @remarks
   * The maximum capacity of each instance in Cloud Drive Service. Unit: GiB
   * 
   * @example
   * 213674622976
   */
  maxSize?: string;
  /**
   * @example
   * AD_CONNECTOR
   */
  officeSiteType?: string;
  orderId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 062B1439-709A-580E-85DF-CE97A1560565
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      cdsName: 'CdsName',
      cenId: 'CenId',
      conflictCdsAndOrder: 'ConflictCdsAndOrder',
      domainName: 'DomainName',
      errorCode: 'ErrorCode',
      maxSize: 'MaxSize',
      officeSiteType: 'OfficeSiteType',
      orderId: 'OrderId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      cdsName: 'string',
      cenId: 'string',
      conflictCdsAndOrder: CreateCloudDriveServiceResponseBodyConflictCdsAndOrder,
      domainName: 'string',
      errorCode: 'string',
      maxSize: 'string',
      officeSiteType: 'string',
      orderId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(this.conflictCdsAndOrder && typeof (this.conflictCdsAndOrder as any).validate === 'function') {
      (this.conflictCdsAndOrder as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCloudDriveServiceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateCloudDriveServiceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateCloudDriveServiceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCloudDriveUsersRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-352282****
   */
  cdsId?: string;
  /**
   * @remarks
   * The IDs of the end users.
   * 
   * This parameter is required.
   */
  endUserId?: string[];
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The maximum storage space of an end user. Unit: bytes.
   * 
   * This parameter is required.
   * 
   * @example
   * 1024
   */
  userMaxSize?: number;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      regionId: 'RegionId',
      userMaxSize: 'UserMaxSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
      userMaxSize: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.endUserId)) {
      $dara.Model.validateArray(this.endUserId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCloudDriveUsersResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 05F0A7AE-17F1-53DF-BD99-ABF936FA****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCloudDriveUsersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateCloudDriveUsersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateCloudDriveUsersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateConfigGroupRequest extends $dara.Model {
  configTimers?: CreateConfigGroupRequestConfigTimers[];
  description?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  name?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * CLOUD_DESKTOP
   */
  productType?: string;
  /**
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * Timer
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      configTimers: 'ConfigTimers',
      description: 'Description',
      name: 'Name',
      productType: 'ProductType',
      regionId: 'RegionId',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configTimers: { 'type': 'array', 'itemType': CreateConfigGroupRequestConfigTimers },
      description: 'string',
      name: 'string',
      productType: 'string',
      regionId: 'string',
      type: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.configTimers)) {
      $dara.Model.validateArray(this.configTimers);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateConfigGroupResponseBody extends $dara.Model {
  /**
   * @example
   * ccg-0ctwi5zbswtql****
   */
  groupId?: string;
  message?: string;
  /**
   * @example
   * EE9472BC-0B5D-5458-85CD-C52BDD******
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      groupId: 'GroupId',
      message: 'Message',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupId: 'string',
      message: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateConfigGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateConfigGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateConfigGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopGroupRequest extends $dara.Model {
  /**
   * @remarks
   * The end users whom you want to add to all types of desktop groups.
   * 
   * @example
   * Alice
   */
  allClassifyUsers?: boolean;
  /**
   * @remarks
   * Specifies whether to automatically create cloud desktops in the desktop group if you set the billing method to subscription. If you set the ChargeType parameter to PrePaid, this parameter is required.
   * 
   * @example
   * 1
   */
  allowAutoSetup?: number;
  /**
   * @remarks
   * Specifies whether to reserve cloud desktops if you set the billing method to pay-as-you-go. If you set the ChargeType parameter to PostPaid, this parameter is required. Valid values: 0: does not allow the system to reserve cloud desktops. N: allows the system to reserve N cloud desktops. The variable N must be an integer that ranges from 1 to 100.
   * 
   * @example
   * 1
   */
  allowBufferCount?: number;
  /**
   * @remarks
   * Specifies whether to enable automatic payment.
   * 
   * @example
   * true
   */
  autoPay?: boolean;
  /**
   * @remarks
   * Specifies whether to enable auto-renewal.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  autoRenew?: boolean;
  /**
   * @remarks
   * The number of sessions that are allowed per cloud desktop in a multi-session desktop group.
   * 
   * @example
   * 1
   */
  bindAmount?: number;
  /**
   * @remarks
   * The ID of the desktop template.
   * 
   * @example
   * b-je9hani001wfn****
   */
  bundleId?: string;
  /**
   * @remarks
   * The number of cloud desktops that you want to purchase. Valid values: 0 to 200.
   * 
   * @example
   * 3
   */
  buyDesktopsCount?: number;
  /**
   * @remarks
   * The billing method of the cloud desktops in the desktop group.
   * 
   * This parameter is required.
   * 
   * @example
   * PrePaid
   */
  chargeType?: string;
  /**
   * @remarks
   * The type of the desktop group.
   * 
   * @example
   * teacher
   */
  classify?: string;
  /**
   * @remarks
   * The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
   * 
   * @example
   * 123e4567-e89b-12d3-a456-426655440000
   */
  clientToken?: string;
  /**
   * @remarks
   * The remarks on the desktop group.
   * 
   * @example
   * test
   */
  comments?: string;
  /**
   * @remarks
   * The maximum period of time during which the session is connected. When the specified maximum period of time is reached, the session automatically disconnects. Unit: milliseconds. This parameter is required only for cloud desktops in the same desktop group.
   * 
   * @example
   * 300000
   */
  connectDuration?: number;
  dataDiskCategory?: string;
  dataDiskPerLevel?: string;
  dataDiskSize?: number;
  /**
   * @remarks
   * The default number of cloud desktops to create when you create the desktop group. Default value: 1.
   * 
   * @example
   * 1
   */
  defaultInitDesktopCount?: number;
  defaultLanguage?: string;
  /**
   * @remarks
   * The name of the desktop group.
   * 
   * @example
   * desktopGroupName1
   */
  desktopGroupName?: string;
  desktopType?: string;
  /**
   * @remarks
   * The ID of the directory.
   * 
   * @example
   * hide
   */
  directoryId?: string;
  /**
   * @remarks
   * The end users that can use the desktop group.
   */
  endUserIds?: string[];
  exclusiveType?: string;
  /**
   * @remarks
   * The File Storage NAS (NAS) file system that is used after data roaming is enabled.
   * 
   * @example
   * 04f314****
   */
  fileSystemId?: string;
  groupAmount?: number;
  /**
   * @remarks
   * The desktop group version.
   * 
   * @example
   * 2
   */
  groupVersion?: number;
  hostname?: string;
  /**
   * @remarks
   * The maximum period of time for which a session remains idle. If an end user performs no operations on a cloud desktop by using keyboards or mouses during a session, the session becomes idle. When the specified maximum period of time is reached, the session automatically disconnects. Unit: milliseconds. This parameter is required only for cloud desktops in the same desktop group.
   * 
   * @example
   * 300000
   */
  idleDisconnectDuration?: number;
  imageId?: string;
  /**
   * @remarks
   * The retention period of the cloud desktop after the end user disconnects from the cloud desktop. Unit: milliseconds.
   * 
   * @example
   * 6000
   */
  keepDuration?: number;
  /**
   * @remarks
   * The load balancing policy of the multi-session desktop group.
   * 
   * @example
   * 0
   */
  loadPolicy?: number;
  /**
   * @remarks
   * The maximum number of cloud desktops that the desktop group can contain. Valid values: 0 to 200.
   * 
   * @example
   * 50
   */
  maxDesktopsCount?: number;
  /**
   * @remarks
   * The minimum number of cloud desktops that must be contained in the desktop group if you set the billing method to subscription. If you set the ChargeType parameter to PrePaid, this parameter is required. Valid values: 0 to the value of MaxDesktopsCount. Default value: 1.
   * 
   * @example
   * 1
   */
  minDesktopsCount?: number;
  multiResource?: boolean;
  /**
   * @remarks
   * The ID of the workspace.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+os-c5cy7q578s8jc****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The type of the desktop group.
   * 
   * @example
   * 0
   */
  ownType?: number;
  /**
   * @remarks
   * The subscription period of the cloud desktops in the desktop group. The unit is specified by the PeriodUnit parameter. The Period parameter takes effect only if you set the ChargeType parameter to PrePaid.
   * 
   * *   Valid values if you set the PeriodUnit parameter to Month:
   * 
   *     *   1
   *     *   2
   *     *   3
   *     *   6
   * 
   * *   Valid values if you set the PeriodUnit parameter to Year:
   * 
   *     *   1
   *     *   2
   *     *   3
   *     *   4
   *     *   5
   * 
   * @example
   * 1
   */
  period?: number;
  /**
   * @remarks
   * The unit of the subscription duration.
   * 
   * @example
   * Month
   */
  periodUnit?: string;
  /**
   * @remarks
   * The ID of the policy.
   * 
   * This parameter is required.
   * 
   * @example
   * pg-9c2d6t2dwflqr****
   */
  policyGroupId?: string;
  /**
   * @remarks
   * Specifies whether to enable data roaming.
   * 
   * @example
   * false
   */
  profileFollowSwitch?: boolean;
  promotionId?: string;
  /**
   * @remarks
   * The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session desktop group. `Ratio of connected sessions = Number of connected sessions/(Total number of cloud desktops × Maximum number of sessions allowed for each cloud desktop) × 100%`. When the specified threshold is reached, new cloud desktops are automatically created. When the specified threshold is not reached, idle cloud desktops are released.
   * 
   * @example
   * 0.5
   */
  ratioThreshold?: number;
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * Specifies which type of the disk to reset for cloud desktops in the desktop group.
   * 
   * @example
   * 0
   */
  resetType?: number;
  /**
   * @remarks
   * The ID of the scaling policy.
   * 
   * > This parameter is unavailable.
   * 
   * @example
   * hide
   */
  scaleStrategyId?: string;
  sessionType?: string;
  snapshotPolicyId?: string;
  /**
   * @remarks
   * The period of time before the idle cloud desktop is stopped. When the specified period of time is reached, the idle cloud desktop automatically stops. If an end user connects to a stopped cloud desktop, the cloud desktop automatically starts. Unit: milliseconds.
   * 
   * @example
   * 300000
   */
  stopDuration?: number;
  systemDiskCategory?: string;
  systemDiskPerLevel?: string;
  systemDiskSize?: number;
  /**
   * @remarks
   * The tags that you want to attach to the cloud computer pool. You can specify 1 to 20 tags.
   */
  tag?: CreateDesktopGroupRequestTag[];
  timerGroupId?: string;
  /**
   * @remarks
   * Specifies whether to enable disk encryption.
   * 
   * @example
   * false
   */
  volumeEncryptionEnabled?: boolean;
  /**
   * @remarks
   * The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to obtain a list of KMS keys.
   * 
   * @example
   * 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
   */
  volumeEncryptionKey?: string;
  /**
   * @remarks
   * The ID of the virtual private cloud (VPC) in which you want to create the desktop group.
   * 
   * @example
   * hide
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      allClassifyUsers: 'AllClassifyUsers',
      allowAutoSetup: 'AllowAutoSetup',
      allowBufferCount: 'AllowBufferCount',
      autoPay: 'AutoPay',
      autoRenew: 'AutoRenew',
      bindAmount: 'BindAmount',
      bundleId: 'BundleId',
      buyDesktopsCount: 'BuyDesktopsCount',
      chargeType: 'ChargeType',
      classify: 'Classify',
      clientToken: 'ClientToken',
      comments: 'Comments',
      connectDuration: 'ConnectDuration',
      dataDiskCategory: 'DataDiskCategory',
      dataDiskPerLevel: 'DataDiskPerLevel',
      dataDiskSize: 'DataDiskSize',
      defaultInitDesktopCount: 'DefaultInitDesktopCount',
      defaultLanguage: 'DefaultLanguage',
      desktopGroupName: 'DesktopGroupName',
      desktopType: 'DesktopType',
      directoryId: 'DirectoryId',
      endUserIds: 'EndUserIds',
      exclusiveType: 'ExclusiveType',
      fileSystemId: 'FileSystemId',
      groupAmount: 'GroupAmount',
      groupVersion: 'GroupVersion',
      hostname: 'Hostname',
      idleDisconnectDuration: 'IdleDisconnectDuration',
      imageId: 'ImageId',
      keepDuration: 'KeepDuration',
      loadPolicy: 'LoadPolicy',
      maxDesktopsCount: 'MaxDesktopsCount',
      minDesktopsCount: 'MinDesktopsCount',
      multiResource: 'MultiResource',
      officeSiteId: 'OfficeSiteId',
      ownType: 'OwnType',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      policyGroupId: 'PolicyGroupId',
      profileFollowSwitch: 'ProfileFollowSwitch',
      promotionId: 'PromotionId',
      ratioThreshold: 'RatioThreshold',
      regionId: 'RegionId',
      resetType: 'ResetType',
      scaleStrategyId: 'ScaleStrategyId',
      sessionType: 'SessionType',
      snapshotPolicyId: 'SnapshotPolicyId',
      stopDuration: 'StopDuration',
      systemDiskCategory: 'SystemDiskCategory',
      systemDiskPerLevel: 'SystemDiskPerLevel',
      systemDiskSize: 'SystemDiskSize',
      tag: 'Tag',
      timerGroupId: 'TimerGroupId',
      volumeEncryptionEnabled: 'VolumeEncryptionEnabled',
      volumeEncryptionKey: 'VolumeEncryptionKey',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allClassifyUsers: 'boolean',
      allowAutoSetup: 'number',
      allowBufferCount: 'number',
      autoPay: 'boolean',
      autoRenew: 'boolean',
      bindAmount: 'number',
      bundleId: 'string',
      buyDesktopsCount: 'number',
      chargeType: 'string',
      classify: 'string',
      clientToken: 'string',
      comments: 'string',
      connectDuration: 'number',
      dataDiskCategory: 'string',
      dataDiskPerLevel: 'string',
      dataDiskSize: 'number',
      defaultInitDesktopCount: 'number',
      defaultLanguage: 'string',
      desktopGroupName: 'string',
      desktopType: 'string',
      directoryId: 'string',
      endUserIds: { 'type': 'array', 'itemType': 'string' },
      exclusiveType: 'string',
      fileSystemId: 'string',
      groupAmount: 'number',
      groupVersion: 'number',
      hostname: 'string',
      idleDisconnectDuration: 'number',
      imageId: 'string',
      keepDuration: 'number',
      loadPolicy: 'number',
      maxDesktopsCount: 'number',
      minDesktopsCount: 'number',
      multiResource: 'boolean',
      officeSiteId: 'string',
      ownType: 'number',
      period: 'number',
      periodUnit: 'string',
      policyGroupId: 'string',
      profileFollowSwitch: 'boolean',
      promotionId: 'string',
      ratioThreshold: 'number',
      regionId: 'string',
      resetType: 'number',
      scaleStrategyId: 'string',
      sessionType: 'string',
      snapshotPolicyId: 'string',
      stopDuration: 'number',
      systemDiskCategory: 'string',
      systemDiskPerLevel: 'string',
      systemDiskSize: 'number',
      tag: { 'type': 'array', 'itemType': CreateDesktopGroupRequestTag },
      timerGroupId: 'string',
      volumeEncryptionEnabled: 'boolean',
      volumeEncryptionKey: 'string',
      vpcId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.endUserIds)) {
      $dara.Model.validateArray(this.endUserIds);
    }
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the desktop group.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  desktopGroupIds?: string[];
  /**
   * @remarks
   * The IDs of the orders.
   */
  orderIds?: string[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 3EB7FCEE-D731-4948-85A3-4B2C341CA983
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      desktopGroupIds: 'DesktopGroupIds',
      orderIds: 'OrderIds',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      desktopGroupIds: { 'type': 'array', 'itemType': 'string' },
      orderIds: { 'type': 'array', 'itemType': 'string' },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopGroupIds)) {
      $dara.Model.validateArray(this.desktopGroupIds);
    }
    if(Array.isArray(this.orderIds)) {
      $dara.Model.validateArray(this.orderIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDesktopGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDesktopGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopOversoldGroupRequest extends $dara.Model {
  concurrenceCount?: number;
  dataDiskSize?: number;
  description?: string;
  desktopType?: string;
  directoryId?: string;
  idleDisconnectDuration?: number;
  imageId?: string;
  keepDuration?: number;
  name?: string;
  oversoldUserCount?: number;
  oversoldWarn?: number;
  period?: number;
  periodUnit?: string;
  policyGroupId?: string;
  stopDuration?: number;
  systemDiskSize?: number;
  static names(): { [key: string]: string } {
    return {
      concurrenceCount: 'ConcurrenceCount',
      dataDiskSize: 'DataDiskSize',
      description: 'Description',
      desktopType: 'DesktopType',
      directoryId: 'DirectoryId',
      idleDisconnectDuration: 'IdleDisconnectDuration',
      imageId: 'ImageId',
      keepDuration: 'KeepDuration',
      name: 'Name',
      oversoldUserCount: 'OversoldUserCount',
      oversoldWarn: 'OversoldWarn',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      policyGroupId: 'PolicyGroupId',
      stopDuration: 'StopDuration',
      systemDiskSize: 'SystemDiskSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      concurrenceCount: 'number',
      dataDiskSize: 'number',
      description: 'string',
      desktopType: 'string',
      directoryId: 'string',
      idleDisconnectDuration: 'number',
      imageId: 'string',
      keepDuration: 'number',
      name: 'string',
      oversoldUserCount: 'number',
      oversoldWarn: 'number',
      period: 'number',
      periodUnit: 'string',
      policyGroupId: 'string',
      stopDuration: 'number',
      systemDiskSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopOversoldGroupResponseBody extends $dara.Model {
  data?: CreateDesktopOversoldGroupResponseBodyData;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: CreateDesktopOversoldGroupResponseBodyData,
      requestId: 'string',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopOversoldGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDesktopOversoldGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDesktopOversoldGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsRequest extends $dara.Model {
  /**
   * @remarks
   * The number of cloud computers that you want to create. Valid values: 1 to 300. Default value: 1.
   * 
   * @example
   * 1
   */
  amount?: number;
  /**
   * @remarks
   * Specifies whether to enable automatic payment.
   * 
   * @example
   * false
   */
  autoPay?: boolean;
  /**
   * @remarks
   * Specifies whether to enable auto-renewal. This parameter takes effect only when the ChargeType parameter is set to PrePaid.
   * 
   * @example
   * false
   */
  autoRenew?: boolean;
  /**
   * @remarks
   * The ID of the cloud computer template.
   * 
   * @example
   * b-je9hani001wfn****
   */
  bundleId?: string;
  /**
   * @remarks
   * The cloud computer templates.
   * 
   * **if can be null:**
   * true
   */
  bundleModels?: CreateDesktopsRequestBundleModels[];
  /**
   * @remarks
   * The billing method of the cloud computers.
   * 
   * Default value: PostPaid. Valid values:
   * 
   * *   Postpaid: pay-as-you-go
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PrePaid: subscription
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * PrePaid
   */
  chargeType?: string;
  desktopAttachment?: CreateDesktopsRequestDesktopAttachment;
  /**
   * @remarks
   * The private IP address of the cloud computer.
   * 
   * @example
   * 10.0.0.1
   */
  desktopMemberIp?: string;
  /**
   * @remarks
   * The name of the cloud computer. The name must meet the following requirements:
   * 
   * *   The name must be 1 to 64 characters in length.
   * *   The name must start with a letter but cannot start with `http://` or `https://`.
   * *   The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
   * 
   * @example
   * testDesktopName
   */
  desktopName?: string;
  /**
   * @remarks
   * Specifies whether to automatically add suffixes to the names of cloud computers when you create multiple cloud computers at the same time.
   * 
   * Default value: true. Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   False
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  desktopNameSuffix?: boolean;
  /**
   * @remarks
   * The details of the scheduled task on cloud computers.
   * 
   * **if can be null:**
   * true
   */
  desktopTimers?: CreateDesktopsRequestDesktopTimers[];
  /**
   * @remarks
   * >  This parameter is not publicly available.
   * 
   * @example
   * To be hidden.
   */
  directoryId?: string;
  /**
   * @remarks
   * The IDs of the end users to which you want to assign the cloud computers. You can specify 1 to 100 IDs.
   * 
   * @example
   * 123456789
   */
  endUserId?: string[];
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * @example
   * dg-boyczi8enfyc5****
   */
  groupId?: string;
  /**
   * @remarks
   * The custom hostnames of the cloud computers. This parameter is valid only if the office network is an AD office network and the operating system type of the cloud computers is Windows.
   * 
   * The hostnames must meet the following requirements:
   * 
   * *   The hostnames must be 2 to 15 characters in length.
   * *   The hostnames can contain only letters, digits, and hyphens (-). The hostnames cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.
   * 
   * When you create multiple cloud computers, you can use the `name_prefix[begin_number,bits]name_suffix` naming format to name the cloud computers. For example, if you set the value of the Hostname parameter to ecd-[1,4]-test, the hostname of the first cloud computer is ecd-0001-test, the hostname of the second cloud computer is ecd-0002-test, and so on.
   * 
   * *   `name_prefix`: the prefix of the hostname.
   * *   `[begin_number,bits]`: the sequential number in the hostname. The `begin_number` value is the starting digit. Valid values of begin_number: 0 to 999999. Default value: 0. The `bits` value is the number of digits. Valid values: 1 to 6. Default value: 6.
   * *   `name_suffix`: the suffix of the hostname.
   * 
   * @example
   * testhost
   */
  hostname?: string;
  /**
   * @remarks
   * > This parameter is not publicly available.
   */
  monthDesktopSetting?: CreateDesktopsRequestMonthDesktopSetting;
  /**
   * @remarks
   * The office network ID.
   * 
   * @example
   * cn-hangzhou+os-c5cy7q578s8jc****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The subscription duration of the cloud desktop that you want to create. The unit is specified by the `PeriodUnit` parameter. This parameter takes effect and is required only when the `ChargeType` parameter is set to `PrePaid`.
   * 
   * *   Valid values if the `PeriodUnit` parameter is set to `Month`:
   * 
   *     *   1
   *     *   2
   *     *   3
   *     *   6
   * 
   * *   Valid values if the `PeriodUnit` parameter is set to `Year`:
   * 
   *     *   1
   *     *   2
   *     *   3
   *     *   4
   *     *   5
   * 
   * @example
   * 1
   */
  period?: number;
  /**
   * @remarks
   * The unit of the subscription duration.
   * 
   * @example
   * Month
   */
  periodUnit?: string;
  /**
   * @remarks
   * The ID of the policy.
   * 
   * This parameter is required.
   * 
   * @example
   * system-all-enabled-policy
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The ID of the sales promotion.
   * 
   * @example
   * 23141
   */
  promotionId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  resourceGroupId?: string;
  snapshotPolicyId?: string;
  /**
   * @remarks
   * The tags that you want to add to the cloud desktop.
   */
  tag?: CreateDesktopsRequestTag[];
  timerGroupId?: string;
  /**
   * @remarks
   * How the cloud computers are assigned.
   * 
   * >  If you do not specify the `EndUserId` parameter, the cloud computers are not assigned to end users after the cloud computers are created.
   * 
   * Default value: ALL. Valid values:
   * 
   * *   ALL: If you specify the EndUserId parameter, the cloud computers are assigned to all specified end users after the cloud computers are created.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PER_USER: If you specify the EndUserId parameter, the cloud computers are evenly assigned to the specified end users after the cloud computers are created.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     In this case, you must make sure that the value of the Amount parameter can be divided by the N value of the EndUserId.N parameter that you specify.
   * 
   *     <!-- -->
   * 
   * @example
   * ALL
   */
  userAssignMode?: string;
  /**
   * @remarks
   * Details about the custom command scripts.
   */
  userCommands?: CreateDesktopsRequestUserCommands[];
  /**
   * @remarks
   * >  This parameter is not publicly available.
   * 
   * @example
   * To be hidden.
   */
  userName?: string;
  /**
   * @remarks
   * Specifies whether to enable disk encryption.
   * 
   * @example
   * false
   */
  volumeEncryptionEnabled?: boolean;
  /**
   * @remarks
   * The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to obtain a list of KMS keys.
   * 
   * @example
   * 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
   */
  volumeEncryptionKey?: string;
  /**
   * @remarks
   * >  This parameter is not publicly available.
   * 
   * @example
   * To be hidden.
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      amount: 'Amount',
      autoPay: 'AutoPay',
      autoRenew: 'AutoRenew',
      bundleId: 'BundleId',
      bundleModels: 'BundleModels',
      chargeType: 'ChargeType',
      desktopAttachment: 'DesktopAttachment',
      desktopMemberIp: 'DesktopMemberIp',
      desktopName: 'DesktopName',
      desktopNameSuffix: 'DesktopNameSuffix',
      desktopTimers: 'DesktopTimers',
      directoryId: 'DirectoryId',
      endUserId: 'EndUserId',
      groupId: 'GroupId',
      hostname: 'Hostname',
      monthDesktopSetting: 'MonthDesktopSetting',
      officeSiteId: 'OfficeSiteId',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      policyGroupId: 'PolicyGroupId',
      promotionId: 'PromotionId',
      regionId: 'RegionId',
      resourceGroupId: 'ResourceGroupId',
      snapshotPolicyId: 'SnapshotPolicyId',
      tag: 'Tag',
      timerGroupId: 'TimerGroupId',
      userAssignMode: 'UserAssignMode',
      userCommands: 'UserCommands',
      userName: 'UserName',
      volumeEncryptionEnabled: 'VolumeEncryptionEnabled',
      volumeEncryptionKey: 'VolumeEncryptionKey',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: 'number',
      autoPay: 'boolean',
      autoRenew: 'boolean',
      bundleId: 'string',
      bundleModels: { 'type': 'array', 'itemType': CreateDesktopsRequestBundleModels },
      chargeType: 'string',
      desktopAttachment: CreateDesktopsRequestDesktopAttachment,
      desktopMemberIp: 'string',
      desktopName: 'string',
      desktopNameSuffix: 'boolean',
      desktopTimers: { 'type': 'array', 'itemType': CreateDesktopsRequestDesktopTimers },
      directoryId: 'string',
      endUserId: { 'type': 'array', 'itemType': 'string' },
      groupId: 'string',
      hostname: 'string',
      monthDesktopSetting: CreateDesktopsRequestMonthDesktopSetting,
      officeSiteId: 'string',
      period: 'number',
      periodUnit: 'string',
      policyGroupId: 'string',
      promotionId: 'string',
      regionId: 'string',
      resourceGroupId: 'string',
      snapshotPolicyId: 'string',
      tag: { 'type': 'array', 'itemType': CreateDesktopsRequestTag },
      timerGroupId: 'string',
      userAssignMode: 'string',
      userCommands: { 'type': 'array', 'itemType': CreateDesktopsRequestUserCommands },
      userName: 'string',
      volumeEncryptionEnabled: 'boolean',
      volumeEncryptionKey: 'string',
      vpcId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.bundleModels)) {
      $dara.Model.validateArray(this.bundleModels);
    }
    if(this.desktopAttachment && typeof (this.desktopAttachment as any).validate === 'function') {
      (this.desktopAttachment as any).validate();
    }
    if(Array.isArray(this.desktopTimers)) {
      $dara.Model.validateArray(this.desktopTimers);
    }
    if(Array.isArray(this.endUserId)) {
      $dara.Model.validateArray(this.endUserId);
    }
    if(this.monthDesktopSetting && typeof (this.monthDesktopSetting as any).validate === 'function') {
      (this.monthDesktopSetting as any).validate();
    }
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    if(Array.isArray(this.userCommands)) {
      $dara.Model.validateArray(this.userCommands);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The number of cloud computers that you want to create. Valid values: 1 to 300. Default value: 1.
   * 
   * @example
   * 1
   */
  amount?: number;
  /**
   * @remarks
   * Specifies whether to enable automatic payment.
   * 
   * @example
   * false
   */
  autoPay?: boolean;
  /**
   * @remarks
   * Specifies whether to enable auto-renewal. This parameter takes effect only when the ChargeType parameter is set to PrePaid.
   * 
   * @example
   * false
   */
  autoRenew?: boolean;
  /**
   * @remarks
   * The ID of the cloud computer template.
   * 
   * @example
   * b-je9hani001wfn****
   */
  bundleId?: string;
  /**
   * @remarks
   * The cloud computer templates.
   * 
   * **if can be null:**
   * true
   */
  bundleModels?: CreateDesktopsShrinkRequestBundleModels[];
  /**
   * @remarks
   * The billing method of the cloud computers.
   * 
   * Default value: PostPaid. Valid values:
   * 
   * *   Postpaid: pay-as-you-go
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PrePaid: subscription
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * PrePaid
   */
  chargeType?: string;
  desktopAttachmentShrink?: string;
  /**
   * @remarks
   * The private IP address of the cloud computer.
   * 
   * @example
   * 10.0.0.1
   */
  desktopMemberIp?: string;
  /**
   * @remarks
   * The name of the cloud computer. The name must meet the following requirements:
   * 
   * *   The name must be 1 to 64 characters in length.
   * *   The name must start with a letter but cannot start with `http://` or `https://`.
   * *   The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
   * 
   * @example
   * testDesktopName
   */
  desktopName?: string;
  /**
   * @remarks
   * Specifies whether to automatically add suffixes to the names of cloud computers when you create multiple cloud computers at the same time.
   * 
   * Default value: true. Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   False
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  desktopNameSuffix?: boolean;
  /**
   * @remarks
   * The details of the scheduled task on cloud computers.
   * 
   * **if can be null:**
   * true
   */
  desktopTimers?: CreateDesktopsShrinkRequestDesktopTimers[];
  /**
   * @remarks
   * >  This parameter is not publicly available.
   * 
   * @example
   * To be hidden.
   */
  directoryId?: string;
  /**
   * @remarks
   * The IDs of the end users to which you want to assign the cloud computers. You can specify 1 to 100 IDs.
   * 
   * @example
   * 123456789
   */
  endUserId?: string[];
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * @example
   * dg-boyczi8enfyc5****
   */
  groupId?: string;
  /**
   * @remarks
   * The custom hostnames of the cloud computers. This parameter is valid only if the office network is an AD office network and the operating system type of the cloud computers is Windows.
   * 
   * The hostnames must meet the following requirements:
   * 
   * *   The hostnames must be 2 to 15 characters in length.
   * *   The hostnames can contain only letters, digits, and hyphens (-). The hostnames cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.
   * 
   * When you create multiple cloud computers, you can use the `name_prefix[begin_number,bits]name_suffix` naming format to name the cloud computers. For example, if you set the value of the Hostname parameter to ecd-[1,4]-test, the hostname of the first cloud computer is ecd-0001-test, the hostname of the second cloud computer is ecd-0002-test, and so on.
   * 
   * *   `name_prefix`: the prefix of the hostname.
   * *   `[begin_number,bits]`: the sequential number in the hostname. The `begin_number` value is the starting digit. Valid values of begin_number: 0 to 999999. Default value: 0. The `bits` value is the number of digits. Valid values: 1 to 6. Default value: 6.
   * *   `name_suffix`: the suffix of the hostname.
   * 
   * @example
   * testhost
   */
  hostname?: string;
  /**
   * @remarks
   * > This parameter is not publicly available.
   */
  monthDesktopSetting?: CreateDesktopsShrinkRequestMonthDesktopSetting;
  /**
   * @remarks
   * The office network ID.
   * 
   * @example
   * cn-hangzhou+os-c5cy7q578s8jc****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The subscription duration of the cloud desktop that you want to create. The unit is specified by the `PeriodUnit` parameter. This parameter takes effect and is required only when the `ChargeType` parameter is set to `PrePaid`.
   * 
   * *   Valid values if the `PeriodUnit` parameter is set to `Month`:
   * 
   *     *   1
   *     *   2
   *     *   3
   *     *   6
   * 
   * *   Valid values if the `PeriodUnit` parameter is set to `Year`:
   * 
   *     *   1
   *     *   2
   *     *   3
   *     *   4
   *     *   5
   * 
   * @example
   * 1
   */
  period?: number;
  /**
   * @remarks
   * The unit of the subscription duration.
   * 
   * @example
   * Month
   */
  periodUnit?: string;
  /**
   * @remarks
   * The ID of the policy.
   * 
   * This parameter is required.
   * 
   * @example
   * system-all-enabled-policy
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The ID of the sales promotion.
   * 
   * @example
   * 23141
   */
  promotionId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  resourceGroupId?: string;
  snapshotPolicyId?: string;
  /**
   * @remarks
   * The tags that you want to add to the cloud desktop.
   */
  tag?: CreateDesktopsShrinkRequestTag[];
  timerGroupId?: string;
  /**
   * @remarks
   * How the cloud computers are assigned.
   * 
   * >  If you do not specify the `EndUserId` parameter, the cloud computers are not assigned to end users after the cloud computers are created.
   * 
   * Default value: ALL. Valid values:
   * 
   * *   ALL: If you specify the EndUserId parameter, the cloud computers are assigned to all specified end users after the cloud computers are created.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PER_USER: If you specify the EndUserId parameter, the cloud computers are evenly assigned to the specified end users after the cloud computers are created.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     In this case, you must make sure that the value of the Amount parameter can be divided by the N value of the EndUserId.N parameter that you specify.
   * 
   *     <!-- -->
   * 
   * @example
   * ALL
   */
  userAssignMode?: string;
  /**
   * @remarks
   * Details about the custom command scripts.
   */
  userCommands?: CreateDesktopsShrinkRequestUserCommands[];
  /**
   * @remarks
   * >  This parameter is not publicly available.
   * 
   * @example
   * To be hidden.
   */
  userName?: string;
  /**
   * @remarks
   * Specifies whether to enable disk encryption.
   * 
   * @example
   * false
   */
  volumeEncryptionEnabled?: boolean;
  /**
   * @remarks
   * The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to obtain a list of KMS keys.
   * 
   * @example
   * 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
   */
  volumeEncryptionKey?: string;
  /**
   * @remarks
   * >  This parameter is not publicly available.
   * 
   * @example
   * To be hidden.
   */
  vpcId?: string;
  static names(): { [key: string]: string } {
    return {
      amount: 'Amount',
      autoPay: 'AutoPay',
      autoRenew: 'AutoRenew',
      bundleId: 'BundleId',
      bundleModels: 'BundleModels',
      chargeType: 'ChargeType',
      desktopAttachmentShrink: 'DesktopAttachment',
      desktopMemberIp: 'DesktopMemberIp',
      desktopName: 'DesktopName',
      desktopNameSuffix: 'DesktopNameSuffix',
      desktopTimers: 'DesktopTimers',
      directoryId: 'DirectoryId',
      endUserId: 'EndUserId',
      groupId: 'GroupId',
      hostname: 'Hostname',
      monthDesktopSetting: 'MonthDesktopSetting',
      officeSiteId: 'OfficeSiteId',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      policyGroupId: 'PolicyGroupId',
      promotionId: 'PromotionId',
      regionId: 'RegionId',
      resourceGroupId: 'ResourceGroupId',
      snapshotPolicyId: 'SnapshotPolicyId',
      tag: 'Tag',
      timerGroupId: 'TimerGroupId',
      userAssignMode: 'UserAssignMode',
      userCommands: 'UserCommands',
      userName: 'UserName',
      volumeEncryptionEnabled: 'VolumeEncryptionEnabled',
      volumeEncryptionKey: 'VolumeEncryptionKey',
      vpcId: 'VpcId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: 'number',
      autoPay: 'boolean',
      autoRenew: 'boolean',
      bundleId: 'string',
      bundleModels: { 'type': 'array', 'itemType': CreateDesktopsShrinkRequestBundleModels },
      chargeType: 'string',
      desktopAttachmentShrink: 'string',
      desktopMemberIp: 'string',
      desktopName: 'string',
      desktopNameSuffix: 'boolean',
      desktopTimers: { 'type': 'array', 'itemType': CreateDesktopsShrinkRequestDesktopTimers },
      directoryId: 'string',
      endUserId: { 'type': 'array', 'itemType': 'string' },
      groupId: 'string',
      hostname: 'string',
      monthDesktopSetting: CreateDesktopsShrinkRequestMonthDesktopSetting,
      officeSiteId: 'string',
      period: 'number',
      periodUnit: 'string',
      policyGroupId: 'string',
      promotionId: 'string',
      regionId: 'string',
      resourceGroupId: 'string',
      snapshotPolicyId: 'string',
      tag: { 'type': 'array', 'itemType': CreateDesktopsShrinkRequestTag },
      timerGroupId: 'string',
      userAssignMode: 'string',
      userCommands: { 'type': 'array', 'itemType': CreateDesktopsShrinkRequestUserCommands },
      userName: 'string',
      volumeEncryptionEnabled: 'boolean',
      volumeEncryptionKey: 'string',
      vpcId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.bundleModels)) {
      $dara.Model.validateArray(this.bundleModels);
    }
    if(Array.isArray(this.desktopTimers)) {
      $dara.Model.validateArray(this.desktopTimers);
    }
    if(Array.isArray(this.endUserId)) {
      $dara.Model.validateArray(this.endUserId);
    }
    if(this.monthDesktopSetting && typeof (this.monthDesktopSetting as any).validate === 'function') {
      (this.monthDesktopSetting as any).validate();
    }
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    if(Array.isArray(this.userCommands)) {
      $dara.Model.validateArray(this.userCommands);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computers that are created. If multiple cloud computers are created, multiple IDs are returned.
   */
  desktopId?: string[];
  /**
   * @remarks
   * The ID of the order.
   * 
   * > This parameter is returned only when you set the ChargeType parameter to PrePaid.
   * 
   * @example
   * 123456789
   */
  orderId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      orderId: 'OrderId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      orderId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDesktopsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDesktopsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDesktopsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDiskEncryptionServiceRequest extends $dara.Model {
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDiskEncryptionServiceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The order ID.
   * 
   * @example
   * 214552063030752
   */
  orderId?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDiskEncryptionServiceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDiskEncryptionServiceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDiskEncryptionServiceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateImageRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to clear private data of users. If you set AutoCleanUserdata to `true`, the custom image clears the data directories, excluding the `Administrator` and `Public` directories, in the `C:\\Users` directory.
   * 
   * @example
   * false
   */
  autoCleanUserdata?: boolean;
  /**
   * @remarks
   * The description of the custom image. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.
   * 
   * @example
   * This is description.
   */
  description?: string;
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * @example
   * ecd-7w78ozhjcwa3u****
   */
  desktopId?: string;
  /**
   * @remarks
   * The disk data that is contained in the custom image.
   * 
   * Valid values:
   * 
   * - SYSTEM: only contain data from system disks.
   * - ALL: contain data from system disks and user disks. [default]
   * 
   * @example
   * ALL
   */
  diskType?: string;
  /**
   * @remarks
   * The name of the image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
   * 
   * @example
   * testImageName
   */
  imageName?: string;
  /**
   * @remarks
   * This parameter is not publicly available.
   * 
   * @example
   * To be hidden.
   */
  imageResourceType?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The ID of the snapshot.
   * 
   * @example
   * s-2zefuwk8l6ytcgd3bf4o
   */
  snapshotId?: string;
  /**
   * @remarks
   * The IDs of the snapshots.
   */
  snapshotIds?: string[];
  static names(): { [key: string]: string } {
    return {
      autoCleanUserdata: 'AutoCleanUserdata',
      description: 'Description',
      desktopId: 'DesktopId',
      diskType: 'DiskType',
      imageName: 'ImageName',
      imageResourceType: 'ImageResourceType',
      regionId: 'RegionId',
      snapshotId: 'SnapshotId',
      snapshotIds: 'SnapshotIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoCleanUserdata: 'boolean',
      description: 'string',
      desktopId: 'string',
      diskType: 'string',
      imageName: 'string',
      imageResourceType: 'string',
      regionId: 'string',
      snapshotId: 'string',
      snapshotIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.snapshotIds)) {
      $dara.Model.validateArray(this.snapshotIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateImageResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the image.
   * 
   * @example
   * m-gx2x1dhsmusr2****
   */
  imageId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      imageId: 'ImageId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      imageId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateImageResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateImageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateImageResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNASFileSystemRequest extends $dara.Model {
  /**
   * @remarks
   * Description of the NAS file system.
   * 
   * @example
   * testDescription
   */
  description?: string;
  /**
   * @remarks
   * Whether the file system is encrypted. Uses KMS service-managed keys to encrypt the file system\\"s on-disk data. No decryption is required when reading and writing encrypted data. Possible values and their meanings:
   * 
   * - 0: Not encrypted.
   * - 1: Encrypted using NAS-managed keys.
   * 
   * Default value: 0
   * 
   * @example
   * 0
   */
  encryptType?: string;
  /**
   * @remarks
   * Name of the NAS file system.
   * The file name must follow these rules:
   * - Length: 2 to 128 English or Chinese characters.
   * - Must start with an uppercase or lowercase letter or a Chinese character, cannot start with http:// or https://.
   * - Can include numbers, underscores (_), or hyphens (-).
   * 
   * @example
   * testNAS
   */
  name?: string;
  /**
   * @remarks
   * Workspace ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * Region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * Storage specification type of the NAS file system. Allowed values:
   * 
   * - Capacity: Capacity type.
   * - Performance: Performance type.
   * 
   * Default value: Capacity
   * 
   * @example
   * Capacity
   */
  storageType?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      encryptType: 'EncryptType',
      name: 'Name',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
      storageType: 'StorageType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      encryptType: 'string',
      name: 'string',
      officeSiteId: 'string',
      regionId: 'string',
      storageType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNASFileSystemResponseBody extends $dara.Model {
  /**
   * @remarks
   * ID of the NAS file system.
   * 
   * @example
   * 04f314****
   */
  fileSystemId?: string;
  /**
   * @remarks
   * Name of the NAS file system.
   * 
   * @example
   * testNAS
   */
  fileSystemName?: string;
  /**
   * @remarks
   * Mount point domain.
   * 
   * @example
   * 04f314****-at***.cn-hangzhou.nas.aliyuncs.com
   */
  mountTargetDomain?: string;
  /**
   * @remarks
   * Workspace ID.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * Request ID.
   * 
   * @example
   * 269BDB16-2CD8-4865-84BD-11C40BC21DB0
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      fileSystemId: 'FileSystemId',
      fileSystemName: 'FileSystemName',
      mountTargetDomain: 'MountTargetDomain',
      officeSiteId: 'OfficeSiteId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileSystemId: 'string',
      fileSystemName: 'string',
      mountTargetDomain: 'string',
      officeSiteId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNASFileSystemResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateNASFileSystemResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateNASFileSystemResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNetworkPackageRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to enable the automatic payment feature.
   * 
   * Valid values:
   * 
   * *   true (default): enables the auto-payment feature.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     Make sure that your account has sufficient balance. Otherwise, no order is generated.
   * 
   *     <!-- -->
   * 
   * *   false: disables the auto-payment feature. In this case, an order is generated but you need to make the payment manually.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     To make the payment, log on to the Elastic Desktop Service console, go to the Orders page, and find the order based on the order ID.
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  autoPay?: boolean;
  /**
   * @remarks
   * Specifies whether to enable auto-renewal for the premium bandwidth plan.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  autoRenew?: boolean;
  /**
   * @remarks
   * The bandwidth provided by the premium bandwidth plan. Unit: Mbit/s.
   * 
   * *   Valid values if the premium bandwidth plan is a subscription plan: 2 to 1000.
   * *   Valid values if the premium bandwidth plan is a pay-as-you-go plan that charges by data transfer (PayByTraffic): 2 to 200.
   * *   Valid values if the premium bandwidth plan is a pay-as-you-go plan that charges by fixed bandwidth (PayByBandwidth): 2 to 1000.
   * 
   * This parameter is required.
   * 
   * @example
   * 10
   */
  bandwidth?: number;
  /**
   * @remarks
   * The charge type of the premium bandwidth plan.
   * 
   * *   Valid value when the `PayType` parameter is set to `PrePaid`:
   * 
   *     *   PayByBandwidth: charges by fixed bandwidth.
   * 
   * *   Valid values when the `PayType` parameter is set to `PostPaid`:
   * 
   *     *   PayByTraffic: charges by data transfer.
   *     *   PayByBandwidth: charges by fixed bandwidth.
   * 
   * @example
   * PayByTraffic
   */
  internetChargeType?: string;
  /**
   * @remarks
   * The office network ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The billing method of the premium bandwidth plan.
   * 
   * Valid values:
   * 
   * *   PostPaid: pay-as-you-go
   * *   PrePaid: subscription
   * 
   * @example
   * PrePaid
   */
  payType?: string;
  /**
   * @remarks
   * The subscription duration of the premium bandwidth plan. This parameter takes effect and is required only when the `PayType` parameter is set to `PrePaid`. The valid values of this parameter vary based on the `PeriodUnit` value.
   * 
   * *   Valid value when the `PeriodUnit` parameter is set to `Week`: 1
   * *   Valid values when the `PeriodUnit` parameter is set to `Month`: 1, 2, 3, and 6
   * *   Valid values when the `PeriodUnit` parameter is set to `Year`: 1, 2, and 3
   * 
   * Default value: 1.
   * 
   * @example
   * 1
   */
  period?: number;
  /**
   * @remarks
   * The unit of the subscription duration of the premium bandwidth plan. This parameter takes effect and is required only when the `PayType` parameter is set to `PrePaid`.
   * 
   * Valid values:
   * 
   * *   Month
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Year
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Week
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Month
   */
  periodUnit?: string;
  /**
   * @remarks
   * The ID of the sales promotion.
   * 
   * @example
   * 23141
   */
  promotionId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      autoPay: 'AutoPay',
      autoRenew: 'AutoRenew',
      bandwidth: 'Bandwidth',
      internetChargeType: 'InternetChargeType',
      officeSiteId: 'OfficeSiteId',
      payType: 'PayType',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      promotionId: 'PromotionId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoPay: 'boolean',
      autoRenew: 'boolean',
      bandwidth: 'number',
      internetChargeType: 'string',
      officeSiteId: 'string',
      payType: 'string',
      period: 'number',
      periodUnit: 'string',
      promotionId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNetworkPackageResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the premium bandwidth plan.
   * 
   * @example
   * np-amtp8e8q1o9e4****
   */
  networkPackageId?: string;
  /**
   * @remarks
   * The ID of the bill.
   * 
   * @example
   * 234526262716724
   */
  orderId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 269BDB16-2CD8-4865-84BD-11C40BC21DB0
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      networkPackageId: 'NetworkPackageId',
      orderId: 'OrderId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      networkPackageId: 'string',
      orderId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNetworkPackageResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateNetworkPackageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateNetworkPackageResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePolicyGroupRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether users have the administrator permissions after they connect to cloud desktops.
   * 
   * >  This parameter is in invitational preview and not available to the public.
   * 
   * @example
   * deny
   */
  adminAccess?: string;
  /**
   * @remarks
   * Specifies whether to enable the anti-screenshot feature.
   * 
   * Valid values:
   * 
   * *   off: Anti-screenshot is disabled. This value is the default value.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   on: Anti-screenshot is enabled.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * off
   */
  appContentProtection?: string;
  /**
   * @remarks
   * The client IP address whitelists. Only the client IP addresses in whitelists can access the cloud desktop.
   */
  authorizeAccessPolicyRule?: CreatePolicyGroupRequestAuthorizeAccessPolicyRule[];
  /**
   * @remarks
   * The security group rules.
   */
  authorizeSecurityPolicyRule?: CreatePolicyGroupRequestAuthorizeSecurityPolicyRule[];
  /**
   * @remarks
   * Specifies whether to enable the webcam redirection feature.
   * 
   * Valid values:
   * 
   * *   off: Webcam redirection is disabled.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   on: Webcam redirection is enabled. This value is the default value.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * on
   */
  cameraRedirect?: string;
  /**
   * @remarks
   * The logon methods. You can use this parameter to determine which clients can be used to connect to the cloud desktop.
   */
  clientType?: CreatePolicyGroupRequestClientType[];
  /**
   * @remarks
   * The permissions on the clipboard.
   * 
   * Valid values:
   * 
   * *   read: specifies one-way transfer
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     You can copy data from your local computer to the cloud desktop, but cannot copy data from the cloud desktop to your local computer.
   * 
   *     <!-- -->
   * 
   * *   readwrite: specifies two-way transfer
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     You can copy data between your local computer and the cloud desktop.
   * 
   *     <!-- -->
   * 
   * *   off: disables both one-way and two-way transfer
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     You cannot copy data between your local computer and the cloud desktop. This value is the default value.
   * 
   *     <!-- -->
   * 
   * @example
   * off
   */
  clipboard?: string;
  deviceRedirects?: CreatePolicyGroupRequestDeviceRedirects[];
  deviceRules?: CreatePolicyGroupRequestDeviceRules[];
  /**
   * @remarks
   * Access control for domain names. The wildcard character (\\*) is supported for domain names. Separate multiple domain names with commas (,). Valid values:
   * 
   * *   off
   * *   on
   * 
   * @example
   * off
   */
  domainList?: string;
  /**
   * @remarks
   * The details of the domain name resolution policy.
   */
  domainResolveRule?: CreatePolicyGroupRequestDomainResolveRule[];
  /**
   * @remarks
   * The type of the domain name resolution policy.
   * 
   * Valid values:
   * 
   * *   OFF
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ON
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * OFF
   */
  domainResolveRuleType?: string;
  /**
   * @remarks
   * Specifies whether to allow end users to seek assistance from the administrator. Valid values: ON OFF
   * 
   * @example
   * ON
   */
  endUserApplyAdminCoordinate?: string;
  /**
   * @remarks
   * The switch for collaboration between end users. Valid values: ON OFF
   * 
   * @example
   * ON
   */
  endUserGroupCoordinate?: string;
  /**
   * @remarks
   * Specifies whether to enable the image display quality feature for the Graphics cloud desktop. If you have high requirements for desktop performance and user experience, we recommend that you enable this feature. For example, you can enable this feature in professional design scenarios.
   * 
   * Valid values:
   * 
   * *   off
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   on
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * off
   */
  gpuAcceleration?: string;
  /**
   * @remarks
   * The policy for HTML5 client access.
   * 
   * > We recommend that you use the ClientType parameter to manage the type of Alibaba Cloud Workspace clients for desktop connection.
   * 
   * Valid values:
   * 
   * *   off: HTML5 client access is disabled. This value is the default value.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   on: HTML5 client access is enabled.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * off
   */
  html5Access?: string;
  /**
   * @remarks
   * The file transfer policy for HTML5 clients.
   * 
   * Valid values:
   * 
   * *   all: Files can be uploaded and downloaded between your computer and HTML5 clients.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   download: Files on HTML5 clients can be downloaded to your computer.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   upload: Files on your computer can be uploaded to HTML5 clients.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   off: File transfer between HTML5 clients and your computer is disabled. This value is the default value.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * off
   */
  html5FileTransfer?: string;
  /**
   * @remarks
   * The protocol that you want to use for network communication. Valid values: -TCP: Only TCP is allowed. -BOTH: Automatic switch between TCP and UDP is allowed. Default value: TCP.
   * 
   * @example
   * both
   */
  internetCommunicationProtocol?: string;
  /**
   * @remarks
   * The permissions on local disk mapping.
   * 
   * Valid values:
   * 
   * *   read: read-only
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     The disks on your local computer are mapped to the cloud desktop. You can only read (copy) files on the local computer.
   * 
   *     <!-- -->
   * 
   * *   readwrite: read and write
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     The disks on your local computer are mapped to the cloud desktop. You can read (copy) and modify files on your local computer.
   * 
   *     <!-- -->
   * 
   * *   off:
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     The disks on your local computer are not mapped to the cloud desktop. This value is the default value.
   * 
   *     <!-- -->
   * 
   * @example
   * off
   */
  localDrive?: string;
  maxReconnectTime?: number;
  /**
   * @remarks
   * The name of the policy.
   * 
   * @example
   * testPolicyGroupName
   */
  name?: string;
  /**
   * @remarks
   * Specifies whether to enable the network redirection feature.
   * 
   * > This feature is in invitational preview and is not available to the public.
   * 
   * Valid values:
   * 
   * *   off (default): The network redirection feature is disabled.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   on: The network redirection feature is enabled.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * off
   */
  netRedirect?: string;
  /**
   * @remarks
   * Specifies whether to allow user preemption.
   * 
   * > To improve user experience and ensure data security, multiple end users cannot connect to the same cloud desktop at the same time. The default value of this parameter is `off`, and the value cannot be changed.
   * 
   * @example
   * off
   */
  preemptLogin?: string;
  /**
   * @remarks
   * The names of the users that are allowed to connect to the same cloud desktop at the same time. You can specify up to five usernames.
   * 
   * > To improve user experience and ensure data security, we recommend that you disable the user preemption feature.
   * 
   * @example
   * Alice
   */
  preemptLoginUser?: string[];
  /**
   * @remarks
   * The policy for printer redirection.
   * 
   * Valid values:
   * 
   * *   off: Printer redirection is disabled.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   on: Printer redirection is enabled.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * on
   */
  printerRedirection?: string;
  /**
   * @remarks
   * Specifies whether to enable the custom screen recording feature.
   * 
   * Valid values:
   * 
   * *   off: Custom screen recording is disabled. This value is the default value.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   on: Custom screen recording is enabled.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * OFF
   */
  recordContent?: string;
  /**
   * @remarks
   * The duration in which the custom screen recording is valid. Default value: 30. Unit: days.
   * 
   * @example
   * 30
   */
  recordContentExpires?: number;
  /**
   * @remarks
   * Specifies whether to enable screen recording.
   * 
   * Valid values:
   * 
   * *   ALLTIME: All operations that are performed by end users on cloud desktops are recorded. The recording starts immediately when end users connect to cloud desktops and ends when the end users disconnect from the cloud desktops.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PERIOD: The operations that are performed by end users on cloud desktops during a specified period of time are recorded. You must set the start time and end time for the recording period.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   OFF: Screen recording is disabled.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * OFF
   */
  recording?: string;
  /**
   * @remarks
   * Specifies whether to record audio data during the screen recording. Valid values:
   * 
   * *   on: records audio and video data
   * *   off: records only video data
   * 
   * @example
   * on
   */
  recordingAudio?: string;
  /**
   * @remarks
   * The duration from the time when the screen recording starts to the time when the screen recording stops. If you specify the Recording parameter, you must also specify the RecordingDuration parameter. When the specified duration ends, a recording file is generated.
   * 
   * @example
   * 15
   */
  recordingDuration?: number;
  /**
   * @remarks
   * The time when the screen recording stops. Specify the value in the HH:MM:SS format. The value of this parameter is valid only if you set the Recording parameter to PERIOD.
   * 
   * @example
   * 08:59:00
   */
  recordingEndTime?: string;
  /**
   * @remarks
   * The duration in which the screen recording is valid. Unit: days.
   * 
   * @example
   * 15
   */
  recordingExpires?: number;
  /**
   * @remarks
   * The frame rate of screen recording.
   * 
   * Valid values:
   * 
   * *   2
   * 
   * *   5
   * 
   * *  10
   * 
   * *   15
   * 
   * @example
   * 2
   */
  recordingFps?: number;
  /**
   * @remarks
   * The time when screen recording starts. Specify the value in the HH:MM:SS format. The value of this parameter is valid only if you set the Recording parameter to PERIOD.
   * 
   * @example
   * 08:00:00
   */
  recordingStartTime?: string;
  /**
   * @remarks
   * Specifies whether the feature to send screen recording notifications to clients is enabled. Valid values: on and off.
   * 
   * @example
   * off
   */
  recordingUserNotify?: string;
  /**
   * @remarks
   * The notification content sent to clients when screen recording is enabled. By default, you do not need to specify this parameter.
   * 
   * @example
   * Your desktop is being recorded.
   */
  recordingUserNotifyMessage?: string;
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The permission to control the keyboard and the mouse during remote assistance.
   * 
   * Valid values:
   * 
   * *    optionalControl: By default, this feature is disabled. You can enable it by applying permissions.
   * 
   * *   fullControl: The permission is granted.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   disableControl: The permission is revoked.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * fullControl
   */
  remoteCoordinate?: string;
  /**
   * @remarks
   * The effective scope of the policy. Valid values:
   * 
   * *   GLOBAL: The policy takes effect globally.
   * *   IP: The policy takes effect for specified IP addresses.
   * 
   * @example
   * GLOBAL
   */
  scope?: string;
  /**
   * @remarks
   * The effective CIDR block ranges. If you set the Scope parameter to IP, you must specify this parameter.
   */
  scopeValue?: string[];
  /**
   * @remarks
   * Specifies whether to enable USB redirection.
   * 
   * Valid values:
   * 
   * *   off: USB redirection is disabled. This value is the default value.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   on: USB redirection is enabled.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * off
   */
  usbRedirect?: string;
  /**
   * @remarks
   * The USB redirection rules.
   */
  usbSupplyRedirectRule?: CreatePolicyGroupRequestUsbSupplyRedirectRule[];
  /**
   * @remarks
   * Specifies whether to enable the multimedia redirection feature. Valid values:
   * 
   * *   on: Multimedia redirection is enabled.
   * *   off: Multimedia redirection is disabled.
   * 
   * @example
   * on
   */
  videoRedirect?: string;
  /**
   * @remarks
   * The policy for image display quality.
   * 
   * Valid values:
   * 
   * *   high
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   low
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   lossless
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   medium: adaptive. This value is the default value.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * medium
   */
  visualQuality?: string;
  /**
   * @remarks
   * Specifies whether to enable watermarking.
   * 
   * Valid values:
   * 
   * *   off: Watermarking is disabled. This value is the default value.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   on: Watermarking is enabled.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * off
   */
  watermark?: string;
  /**
   * @remarks
   * The anti-screen photo feature. Valid values: on and off.
   * 
   * @example
   * off
   */
  watermarkAntiCam?: string;
  /**
   * @remarks
   * The font color of the watermark. Valid values: 0 to 16777215.
   * 
   * @example
   * 0
   */
  watermarkColor?: number;
  /**
   * @remarks
   * The inclination angle of the watermark. Valid values: -10 to -30.
   * 
   * @example
   * -10
   */
  watermarkDegree?: number;
  /**
   * @remarks
   * The font size of the watermark. Valid values: 10 to 20.
   * 
   * @example
   * 10
   */
  watermarkFontSize?: number;
  /**
   * @remarks
   * The font style of the watermark. Valid values:
   * 
   * *   plain
   * *   bold
   * 
   * @example
   * plain
   */
  watermarkFontStyle?: string;
  /**
   * @remarks
   * The invisible watermark enhancement feature. Valid values: low, medium, and high.
   * 
   * @example
   * medium
   */
  watermarkPower?: string;
  /**
   * @remarks
   * The number of watermark rows. This parameter is now invalid.
   * 
   * @example
   * 5
   */
  watermarkRowAmount?: number;
  /**
   * @remarks
   * The security priority for invisible watermarks. Valid values: on and off.
   * 
   * @example
   * on
   */
  watermarkSecurity?: string;
  /**
   * @remarks
   * The transparency of the watermark.
   * 
   * Valid values:
   * 
   * *   LIGHT
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DARK
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   MIDDLE
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * LIGHT
   */
  watermarkTransparency?: string;
  /**
   * @remarks
   * The transparency of the watermark. A larger value specifies that the watermark is less transparent. Valid values: 10 to 100.
   * 
   * @example
   * 10
   */
  watermarkTransparencyValue?: number;
  /**
   * @remarks
   * The type of the watermark. You can specify multiple types of watermarks at the same time. Separate multiple watermark types with commas (,).
   * 
   * Valid values:
   * 
   * *   EndUserId: The ID of the end user is displayed.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   HostName: The rightmost 15 characters of the cloud desktop ID are displayed.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * EndUserId
   */
  watermarkType?: string;
  wyAssistant?: string;
  static names(): { [key: string]: string } {
    return {
      adminAccess: 'AdminAccess',
      appContentProtection: 'AppContentProtection',
      authorizeAccessPolicyRule: 'AuthorizeAccessPolicyRule',
      authorizeSecurityPolicyRule: 'AuthorizeSecurityPolicyRule',
      cameraRedirect: 'CameraRedirect',
      clientType: 'ClientType',
      clipboard: 'Clipboard',
      deviceRedirects: 'DeviceRedirects',
      deviceRules: 'DeviceRules',
      domainList: 'DomainList',
      domainResolveRule: 'DomainResolveRule',
      domainResolveRuleType: 'DomainResolveRuleType',
      endUserApplyAdminCoordinate: 'EndUserApplyAdminCoordinate',
      endUserGroupCoordinate: 'EndUserGroupCoordinate',
      gpuAcceleration: 'GpuAcceleration',
      html5Access: 'Html5Access',
      html5FileTransfer: 'Html5FileTransfer',
      internetCommunicationProtocol: 'InternetCommunicationProtocol',
      localDrive: 'LocalDrive',
      maxReconnectTime: 'MaxReconnectTime',
      name: 'Name',
      netRedirect: 'NetRedirect',
      preemptLogin: 'PreemptLogin',
      preemptLoginUser: 'PreemptLoginUser',
      printerRedirection: 'PrinterRedirection',
      recordContent: 'RecordContent',
      recordContentExpires: 'RecordContentExpires',
      recording: 'Recording',
      recordingAudio: 'RecordingAudio',
      recordingDuration: 'RecordingDuration',
      recordingEndTime: 'RecordingEndTime',
      recordingExpires: 'RecordingExpires',
      recordingFps: 'RecordingFps',
      recordingStartTime: 'RecordingStartTime',
      recordingUserNotify: 'RecordingUserNotify',
      recordingUserNotifyMessage: 'RecordingUserNotifyMessage',
      regionId: 'RegionId',
      remoteCoordinate: 'RemoteCoordinate',
      scope: 'Scope',
      scopeValue: 'ScopeValue',
      usbRedirect: 'UsbRedirect',
      usbSupplyRedirectRule: 'UsbSupplyRedirectRule',
      videoRedirect: 'VideoRedirect',
      visualQuality: 'VisualQuality',
      watermark: 'Watermark',
      watermarkAntiCam: 'WatermarkAntiCam',
      watermarkColor: 'WatermarkColor',
      watermarkDegree: 'WatermarkDegree',
      watermarkFontSize: 'WatermarkFontSize',
      watermarkFontStyle: 'WatermarkFontStyle',
      watermarkPower: 'WatermarkPower',
      watermarkRowAmount: 'WatermarkRowAmount',
      watermarkSecurity: 'WatermarkSecurity',
      watermarkTransparency: 'WatermarkTransparency',
      watermarkTransparencyValue: 'WatermarkTransparencyValue',
      watermarkType: 'WatermarkType',
      wyAssistant: 'WyAssistant',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adminAccess: 'string',
      appContentProtection: 'string',
      authorizeAccessPolicyRule: { 'type': 'array', 'itemType': CreatePolicyGroupRequestAuthorizeAccessPolicyRule },
      authorizeSecurityPolicyRule: { 'type': 'array', 'itemType': CreatePolicyGroupRequestAuthorizeSecurityPolicyRule },
      cameraRedirect: 'string',
      clientType: { 'type': 'array', 'itemType': CreatePolicyGroupRequestClientType },
      clipboard: 'string',
      deviceRedirects: { 'type': 'array', 'itemType': CreatePolicyGroupRequestDeviceRedirects },
      deviceRules: { 'type': 'array', 'itemType': CreatePolicyGroupRequestDeviceRules },
      domainList: 'string',
      domainResolveRule: { 'type': 'array', 'itemType': CreatePolicyGroupRequestDomainResolveRule },
      domainResolveRuleType: 'string',
      endUserApplyAdminCoordinate: 'string',
      endUserGroupCoordinate: 'string',
      gpuAcceleration: 'string',
      html5Access: 'string',
      html5FileTransfer: 'string',
      internetCommunicationProtocol: 'string',
      localDrive: 'string',
      maxReconnectTime: 'number',
      name: 'string',
      netRedirect: 'string',
      preemptLogin: 'string',
      preemptLoginUser: { 'type': 'array', 'itemType': 'string' },
      printerRedirection: 'string',
      recordContent: 'string',
      recordContentExpires: 'number',
      recording: 'string',
      recordingAudio: 'string',
      recordingDuration: 'number',
      recordingEndTime: 'string',
      recordingExpires: 'number',
      recordingFps: 'number',
      recordingStartTime: 'string',
      recordingUserNotify: 'string',
      recordingUserNotifyMessage: 'string',
      regionId: 'string',
      remoteCoordinate: 'string',
      scope: 'string',
      scopeValue: { 'type': 'array', 'itemType': 'string' },
      usbRedirect: 'string',
      usbSupplyRedirectRule: { 'type': 'array', 'itemType': CreatePolicyGroupRequestUsbSupplyRedirectRule },
      videoRedirect: 'string',
      visualQuality: 'string',
      watermark: 'string',
      watermarkAntiCam: 'string',
      watermarkColor: 'number',
      watermarkDegree: 'number',
      watermarkFontSize: 'number',
      watermarkFontStyle: 'string',
      watermarkPower: 'string',
      watermarkRowAmount: 'number',
      watermarkSecurity: 'string',
      watermarkTransparency: 'string',
      watermarkTransparencyValue: 'number',
      watermarkType: 'string',
      wyAssistant: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.authorizeAccessPolicyRule)) {
      $dara.Model.validateArray(this.authorizeAccessPolicyRule);
    }
    if(Array.isArray(this.authorizeSecurityPolicyRule)) {
      $dara.Model.validateArray(this.authorizeSecurityPolicyRule);
    }
    if(Array.isArray(this.clientType)) {
      $dara.Model.validateArray(this.clientType);
    }
    if(Array.isArray(this.deviceRedirects)) {
      $dara.Model.validateArray(this.deviceRedirects);
    }
    if(Array.isArray(this.deviceRules)) {
      $dara.Model.validateArray(this.deviceRules);
    }
    if(Array.isArray(this.domainResolveRule)) {
      $dara.Model.validateArray(this.domainResolveRule);
    }
    if(Array.isArray(this.preemptLoginUser)) {
      $dara.Model.validateArray(this.preemptLoginUser);
    }
    if(Array.isArray(this.scopeValue)) {
      $dara.Model.validateArray(this.scopeValue);
    }
    if(Array.isArray(this.usbSupplyRedirectRule)) {
      $dara.Model.validateArray(this.usbSupplyRedirectRule);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePolicyGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the policy.
   * 
   * @example
   * pg-gx2x1dhsmthe9****
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      policyGroupId: 'PolicyGroupId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      policyGroupId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePolicyGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreatePolicyGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreatePolicyGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRAMDirectoryRequest extends $dara.Model {
  /**
   * @remarks
   * The method in which the cloud computer is connected.
   * 
   * Valid values:
   * 
   * *   VPC
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Internet (default)
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Any
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Internet
   */
  desktopAccessType?: string;
  /**
   * @remarks
   * The directory name. The name must be 2 to 255 characters in length. It must start with a letter but cannot start with `http://` or `https://`. The name can contain digits, colons (:), underscores (_), and hyphens (-).
   * 
   * This parameter is required.
   * 
   * @example
   * testDirectoryName
   */
  directoryName?: string;
  /**
   * @remarks
   * Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.
   * 
   * Valid values:
   * 
   * *   <!-- -->
   * 
   *     true
   * 
   *     <!-- -->
   * 
   *     (default)
   * 
   *     <!-- -->
   * 
   * *   <!-- -->
   * 
   *     false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  enableAdminAccess?: boolean;
  /**
   * @remarks
   * Specifies whether to enable Internet access.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  enableInternetAccess?: boolean;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The vSwitch IDs. You can configure only one vSwitch.
   * 
   * This parameter is required.
   */
  vSwitchId?: string[];
  static names(): { [key: string]: string } {
    return {
      desktopAccessType: 'DesktopAccessType',
      directoryName: 'DirectoryName',
      enableAdminAccess: 'EnableAdminAccess',
      enableInternetAccess: 'EnableInternetAccess',
      regionId: 'RegionId',
      vSwitchId: 'VSwitchId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopAccessType: 'string',
      directoryName: 'string',
      enableAdminAccess: 'boolean',
      enableInternetAccess: 'boolean',
      regionId: 'string',
      vSwitchId: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.vSwitchId)) {
      $dara.Model.validateArray(this.vSwitchId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRAMDirectoryResponseBody extends $dara.Model {
  /**
   * @remarks
   * The RAM directory ID.
   * 
   * @example
   * dri-uf62w3qzt4aigvlcb****
   */
  directoryId?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      directoryId: 'DirectoryId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      directoryId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRAMDirectoryResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateRAMDirectoryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateRAMDirectoryResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSimpleOfficeSiteRequest extends $dara.Model {
  /**
   * @remarks
   * The maximum public bandwidth. Value range: 10 to 200. Unit: Mbit/s. This parameter is available if you set `EnableInternetAccess` to `true`.
   * 
   * @example
   * 10
   */
  bandwidth?: number;
  /**
   * @remarks
   * The Cloud Enterprise Network (CEN) instance ID.
   * 
   * >  If you want end users to connect to cloud computers from Alibaba Cloud Workspace clients over VPCs, you can attach the office network to a CEN instance. The CEN instance is the one that connects to your on-premises network over VPN Gateway or Express Connect.
   * 
   * @example
   * cen-3gwy16dojz1m65****
   */
  cenId?: string;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account to which the Cloud Enterprise Network (CEN) instance belongs.
   * 
   * - If you do not specify the CenId parameter, or the CEN instance that is specified by the CenId parameter belongs to the current Alibaba Cloud account, skip this parameter.
   * - If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, enter the ID of the Alibaba Cloud account.
   * 
   * @example
   * 118272523431****
   */
  cenOwnerId?: number;
  /**
   * @remarks
   * The IPv4 CIDR block that you want the office network to use in the virtual private cloud (VPC) of the office network. The system automatically creates a VPC for the office network based on the IPv4 CIDR block. We recommend that you set this parameter to one of the following CIDR blocks and their subnets:
   * 
   * *   `10.0.0.0/12` (subnet mask range: 12 to 14 bits)
   * *   `172.16.0.0/12` (subnet mask range: 12 to 24 bits)
   * *   `192.168.0.0/16` (subnet mask range: 16 to 24 bits)
   * 
   * @example
   * 172.16.0.0/12
   */
  cidrBlock?: string;
  /**
   * @remarks
   * Specifies whether to create a CloudBox-based office network.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  cloudBoxOfficeSite?: boolean;
  /**
   * @remarks
   * The method to connect to cloud computers from Alibaba Cloud Workspace clients.
   * 
   * >  The VPC connection depends on Alibaba Cloud PrivateLink. You can use PrivateLink for free. When you set this parameter to VPC or Any, PrivateLink is automatically activated.````
   * 
   * @example
   * Internet
   */
  desktopAccessType?: string;
  /**
   * @remarks
   * Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.
   * 
   * Valid values:
   * 
   * * true (default)
   * * false
   * 
   * @example
   * true
   */
  enableAdminAccess?: boolean;
  /**
   * @remarks
   * Specifies whether to enable Internet access.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false (default)
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  enableInternetAccess?: boolean;
  /**
   * @remarks
   * Specifies whether to enable trusted device verification.
   * 
   * @example
   * true
   */
  needVerifyZeroDevice?: boolean;
  /**
   * @remarks
   * The office network name. The name must be 2 to 255 characters in length. It can contain digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
   * 
   * @example
   * TestOfficeSite_Simple
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The IDs of the vSwitches that you want to specify in VPCs. This parameter is required only when you create CloudBox-based office networks.
   */
  vSwitchId?: string[];
  /**
   * @remarks
   * The verification code. If the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, you must call the [SendVerifyCode](https://help.aliyun.com/document_detail/335132.html) operation to obtain the verification code.
   * 
   * @example
   * 123456
   */
  verifyCode?: string;
  /**
   * @remarks
   * The network type of the office network.
   * 
   * Valid values:
   * 
   * *   standard: advanced
   * *   basic: basic
   * 
   * @example
   * standard
   */
  vpcType?: string;
  static names(): { [key: string]: string } {
    return {
      bandwidth: 'Bandwidth',
      cenId: 'CenId',
      cenOwnerId: 'CenOwnerId',
      cidrBlock: 'CidrBlock',
      cloudBoxOfficeSite: 'CloudBoxOfficeSite',
      desktopAccessType: 'DesktopAccessType',
      enableAdminAccess: 'EnableAdminAccess',
      enableInternetAccess: 'EnableInternetAccess',
      needVerifyZeroDevice: 'NeedVerifyZeroDevice',
      officeSiteName: 'OfficeSiteName',
      regionId: 'RegionId',
      vSwitchId: 'VSwitchId',
      verifyCode: 'VerifyCode',
      vpcType: 'VpcType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bandwidth: 'number',
      cenId: 'string',
      cenOwnerId: 'number',
      cidrBlock: 'string',
      cloudBoxOfficeSite: 'boolean',
      desktopAccessType: 'string',
      enableAdminAccess: 'boolean',
      enableInternetAccess: 'boolean',
      needVerifyZeroDevice: 'boolean',
      officeSiteName: 'string',
      regionId: 'string',
      vSwitchId: { 'type': 'array', 'itemType': 'string' },
      verifyCode: 'string',
      vpcType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.vSwitchId)) {
      $dara.Model.validateArray(this.vSwitchId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSimpleOfficeSiteResponseBody extends $dara.Model {
  /**
   * @remarks
   * The office network ID.
   * 
   * @example
   * cn-hangzhou+os-c5cy7q578s8jc****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      officeSiteId: 'OfficeSiteId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      officeSiteId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSimpleOfficeSiteResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateSimpleOfficeSiteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateSimpleOfficeSiteResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSnapshotRequest extends $dara.Model {
  /**
   * @remarks
   * The description of the snapshot. The description can be up to 128 characters in length.
   * 
   * @example
   * testDescription
   */
  description?: string;
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****"
   */
  desktopId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The name of the snapshot. The name must be 2 to 127 characters in length. The name must start with a letter. The name can contain letters, digits, underscores (_), and hyphens (-). The name cannot start with `auto` because snapshots whose names start with auto are recognized as automatic snapshots.
   * 
   * This parameter is required.
   * 
   * @example
   * testSnapshotName
   */
  snapshotName?: string;
  /**
   * @remarks
   * The type of the disk for which you want to create a snapshot.
   * 
   * Valid values:
   * 
   * *   system: system disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   data: data disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * This parameter is required.
   * 
   * @example
   * system
   */
  sourceDiskType?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      desktopId: 'DesktopId',
      regionId: 'RegionId',
      snapshotName: 'SnapshotName',
      sourceDiskType: 'SourceDiskType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      desktopId: 'string',
      regionId: 'string',
      snapshotName: 'string',
      sourceDiskType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSnapshotResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the region.
   * 
   * @example
   * 3EB7FCEE-D731-4948-85A3-4B2C341CA983
   */
  requestId?: string;
  /**
   * @remarks
   * The ID of the snapshot.
   * 
   * @example
   * s-2ze81owrnv9pity4****
   */
  snapshotId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      snapshotId: 'SnapshotId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      snapshotId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSnapshotResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateSnapshotResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateSnapshotResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAutoSnapshotPolicyRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the automatic snapshot policies that you want to delete.
   * 
   * This parameter is required.
   */
  policyId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      policyId: 'PolicyId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      policyId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.policyId)) {
      $dara.Model.validateArray(this.policyId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAutoSnapshotPolicyResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 51592A88-0F2C-55E6-AD2C-2AD9C10D****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAutoSnapshotPolicyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteAutoSnapshotPolicyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteAutoSnapshotPolicyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBundlesRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computer templates. You can specify 1 to 100 IDs.
   * 
   * This parameter is required.
   * 
   * @example
   * b-cezrnfgecbich****
   */
  bundleId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      bundleId: 'BundleId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bundleId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.bundleId)) {
      $dara.Model.validateArray(this.bundleId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBundlesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBundlesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteBundlesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteBundlesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCdsFileRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-066224****
   */
  cdsId?: string;
  /**
   * @remarks
   * The ID of the end user who uses the cloud disk.
   * 
   * @example
   * user01
   */
  endUserId?: string;
  /**
   * @remarks
   * The ID of the file. The ID is a unique identifier for the file.
   * 
   * This parameter is required.
   * 
   * @example
   * 6333e553a133ce21e6f747cf948bb9ef95d7****
   */
  fileId?: string;
  /**
   * @remarks
   * The group ID.
   */
  groupId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      fileId: 'FileId',
      groupId: 'GroupId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: 'string',
      fileId: 'string',
      groupId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCdsFileResponseBody extends $dara.Model {
  /**
   * @remarks
   * The operation result. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * Indicates whether the data is returned.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  data?: string;
  /**
   * @remarks
   * The returned message.
   * 
   * @example
   * success
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 5CC5E450-FC43-4F5B-B540-9964BD31****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCdsFileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteCdsFileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteCdsFileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCloudDriveGroupsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk in Cloud Drive Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-532033****
   */
  cdsId?: string;
  /**
   * @remarks
   * The IDs of the teams that you want to delete. You can delete multiple teams at a time.
   */
  groupId?: string[];
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      groupId: 'GroupId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      groupId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.groupId)) {
      $dara.Model.validateArray(this.groupId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCloudDriveGroupsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The result of the operation. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * The data information.
   * 
   * @example
   * []
   */
  data?: string;
  /**
   * @remarks
   * The error message returned. This parameter is not returned if the value of Code is `success`.
   * 
   * @example
   * success
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values: true: The request is successful. false: The request fails.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCloudDriveGroupsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteCloudDriveGroupsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteCloudDriveGroupsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCloudDriveUsersRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-64326*****
   */
  cdsId?: string;
  endUserId?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.endUserId)) {
      $dara.Model.validateArray(this.endUserId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCloudDriveUsersResponseBody extends $dara.Model {
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCloudDriveUsersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteCloudDriveUsersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteCloudDriveUsersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteConfigGroupRequest extends $dara.Model {
  groupIds?: string[];
  /**
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      groupIds: 'GroupIds',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupIds: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.groupIds)) {
      $dara.Model.validateArray(this.groupIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteConfigGroupResponseBody extends $dara.Model {
  /**
   * @example
   * F7E4322D-D679-5ACB-A909-490D2F0E****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteConfigGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteConfigGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteConfigGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDesktopGroupRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the desktop group.
   * 
   * This parameter is required.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDesktopGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDesktopGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteDesktopGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteDesktopGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDesktopsRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computers. You can specify 1 to 100 IDs.
   * 
   * This parameter is required.
   */
  desktopId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDesktopsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDesktopsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteDesktopsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteDesktopsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDevicesRequest extends $dara.Model {
  /**
   * @remarks
   * The type of the client.
   * 
   * Valid values:
   * 
   * *   1: hardware client.
   * *   2: software client.
   * 
   * This parameter is required.
   * 
   * @example
   * 2
   */
  clientType?: number;
  /**
   * @remarks
   * The IDs of the devices. You can specify up to 200 IDs.
   * 
   * This parameter is required.
   */
  deviceIds?: string[];
  /**
   * @remarks
   * Specifies whether to forcefully delete the device if the device is bound to a user.
   * 
   * Valid values:
   * 
   * *   0: do not forcefully delete the device.
   * *   1: forcefully delete the device.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  force?: number;
  /**
   * @remarks
   * The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      clientType: 'ClientType',
      deviceIds: 'DeviceIds',
      force: 'Force',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientType: 'number',
      deviceIds: { 'type': 'array', 'itemType': 'string' },
      force: 'number',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.deviceIds)) {
      $dara.Model.validateArray(this.deviceIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDevicesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 2AF861B4-0ECC-130C-B100-21A01E02****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDevicesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteDevicesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteDevicesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDirectoriesRequest extends $dara.Model {
  /**
   * @remarks
   * The directory IDs. You can specify one or more directory IDs.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-gx2x1dhsmu52rd****
   */
  directoryId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      directoryId: 'DirectoryId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      directoryId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.directoryId)) {
      $dara.Model.validateArray(this.directoryId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDirectoriesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 5CC5E450-FC43-4F5B-B540-9964BD313427
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDirectoriesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteDirectoriesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteDirectoriesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteEduRoomRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  eduRoomId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      eduRoomId: 'EduRoomId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      eduRoomId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteEduRoomResponseBody extends $dara.Model {
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteEduRoomResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteEduRoomResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteEduRoomResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteImagesRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to delete the associated template.
   * 
   * @example
   * true
   */
  deleteCascadedBundle?: boolean;
  /**
   * @remarks
   * The image IDs. You can specify 1 to 100 image IDs.
   * 
   * This parameter is required.
   */
  imageId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      deleteCascadedBundle: 'DeleteCascadedBundle',
      imageId: 'ImageId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deleteCascadedBundle: 'boolean',
      imageId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.imageId)) {
      $dara.Model.validateArray(this.imageId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteImagesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteImagesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteImagesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteImagesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteNASFileSystemsRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the NAS file systems that you want to delete.
   * 
   * This parameter is required.
   * 
   * @example
   * 04f314****
   */
  fileSystemId?: string[];
  /**
   * @remarks
   * The region ID of the NAS file system that you want to delete.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      fileSystemId: 'FileSystemId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileSystemId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.fileSystemId)) {
      $dara.Model.validateArray(this.fileSystemId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteNASFileSystemsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteNASFileSystemsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteNASFileSystemsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteNASFileSystemsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteNetworkPackagesRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of premium bandwidth plans. You can specify one or more IDs.
   * 
   * This parameter is required.
   */
  networkPackageId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      networkPackageId: 'NetworkPackageId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      networkPackageId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.networkPackageId)) {
      $dara.Model.validateArray(this.networkPackageId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteNetworkPackagesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteNetworkPackagesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteNetworkPackagesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteNetworkPackagesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteOfficeSitesRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the office networks. You can specify 1 to 100 office networks.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      officeSiteId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.officeSiteId)) {
      $dara.Model.validateArray(this.officeSiteId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteOfficeSitesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteOfficeSitesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteOfficeSitesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteOfficeSitesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeletePolicyGroupsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the policy. You can specify 1 to 100 policy IDs.
   * 
   * This parameter is required.
   * 
   * @example
   * pg-gx2x1dhsmthe9****
   */
  policyGroupId?: string[];
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      policyGroupId: 'PolicyGroupId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      policyGroupId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.policyGroupId)) {
      $dara.Model.validateArray(this.policyGroupId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeletePolicyGroupsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeletePolicyGroupsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeletePolicyGroupsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeletePolicyGroupsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteSnapshotRequest extends $dara.Model {
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The snapshot IDs. You can specify 1 to 100 IDs.
   * 
   * This parameter is required.
   * 
   * @example
   * s-2ze81owrnv9pity4****
   */
  snapshotId?: string[];
  static names(): { [key: string]: string } {
    return {
      regionId: 'RegionId',
      snapshotId: 'SnapshotId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
      snapshotId: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.snapshotId)) {
      $dara.Model.validateArray(this.snapshotId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteSnapshotResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteSnapshotResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteSnapshotResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteSnapshotResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteVirtualMFADeviceRequest extends $dara.Model {
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The serial number of the virtual MFA device, which is a unique identifier.
   * 
   * You can call the [DescribeVirtualMFADevices](https://help.aliyun.com/document_detail/206210.html) operation to query the serial number of the virtual MFA device that is bound by AD users.
   * 
   * This parameter is required.
   * 
   * @example
   * a25f297f-f2e1-4a44-bbf1-5f48a6e5****
   */
  serialNumber?: string;
  static names(): { [key: string]: string } {
    return {
      regionId: 'RegionId',
      serialNumber: 'SerialNumber',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
      serialNumber: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteVirtualMFADeviceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteVirtualMFADeviceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteVirtualMFADeviceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteVirtualMFADeviceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAclEntriesRequest extends $dara.Model {
  /**
   * @remarks
   * The number of entries per page. Maximum value: 1600.
   * 
   * Default value: 1600.
   * 
   * @example
   * 50
   */
  maxResults?: number;
  /**
   * @remarks
   * The token that is used for the next query. If this parameter is empty, all results have been returned.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6kRxd1mKkNnHlUy14zdjl/I
   */
  nextToken?: string;
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The ID of the instance to which the ACL applies. You can specify an office network ID or a cloud computer ID.
   * 
   * @example
   * cn-hangzhou+dir-****
   */
  sourceId?: string;
  /**
   * @remarks
   * The granularity of the ACL.
   * 
   * Valid values:
   * 
   * *   desktop: cloud computer
   * *   vpc: office network
   * 
   * @example
   * desktop
   */
  sourceType?: string;
  static names(): { [key: string]: string } {
    return {
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
      sourceId: 'SourceId',
      sourceType: 'SourceType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxResults: 'number',
      nextToken: 'string',
      officeSiteId: 'string',
      regionId: 'string',
      sourceId: 'string',
      sourceType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAclEntriesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ACL entries.
   */
  aclEntries?: DescribeAclEntriesResponseBodyAclEntries[];
  /**
   * @remarks
   * The token that is used to start the next query. If the value of this parameter is empty, all results are returned.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      aclEntries: 'AclEntries',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      aclEntries: { 'type': 'array', 'itemType': DescribeAclEntriesResponseBodyAclEntries },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.aclEntries)) {
      $dara.Model.validateArray(this.aclEntries);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAclEntriesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAclEntriesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAclEntriesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoSnapshotPolicyRequest extends $dara.Model {
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * *   Maximum value: 100
   * *   Default value: 20
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The token that determines the start point of the next query. If this parameter is left empty, all results are returned.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6mqIGdPhID94rjhZFGsvpJo
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the automatic snapshot policy.
   * 
   * @example
   * sp-c5tv9d64ebjnj****
   */
  policyId?: string;
  /**
   * @remarks
   * The name of the automatic snapshot policy.
   * 
   * @example
   * Test 1201
   */
  policyName?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      policyId: 'PolicyId',
      policyName: 'PolicyName',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxResults: 'number',
      nextToken: 'string',
      policyId: 'string',
      policyName: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoSnapshotPolicyResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the queried automatic snapshot policies.
   */
  autoSnapshotPolicies?: DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies[];
  /**
   * @remarks
   * The token that is used to start the next query. If this parameter is empty, all results haven been returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * A7F6612E-59CC-59F9-9DD1-91867FCC****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      autoSnapshotPolicies: 'AutoSnapshotPolicies',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoSnapshotPolicies: { 'type': 'array', 'itemType': DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.autoSnapshotPolicies)) {
      $dara.Model.validateArray(this.autoSnapshotPolicies);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAutoSnapshotPolicyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAutoSnapshotPolicyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAutoSnapshotPolicyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBundlesRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computer templates. You can specify 1 to 100 IDs.
   * 
   * @example
   * bundle_ecd_graphics.2xlarge_s15d15_win2019
   */
  bundleId?: string[];
  /**
   * @remarks
   * The type of the cloud computer template.
   * 
   * Valid values:
   * 
   * *   SYSTEM: system template
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CUSTOM: custom template
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * SYSTEM
   */
  bundleType?: string;
  /**
   * @remarks
   * Specifies whether to query the inventory status of the cloud computer instance type.
   * 
   * @example
   * true
   */
  checkStock?: boolean;
  /**
   * @remarks
   * The number of vCPUs contained in the cloud computer instance type.
   * 
   * @example
   * 2
   */
  cpuCount?: number;
  /**
   * @remarks
   * The instance family of the cloud computers.
   * 
   * Valid values:
   * 
   * *   eds.graphics: graphical instance families
   * *   eds.hf: instance families with high clock speeds
   * *   eds.general: general-purpose instance families
   * 
   * @example
   * eds.general
   */
  desktopTypeFamily?: string;
  /**
   * @remarks
   * This parameter is now in invitational preview and not publicly available.
   * 
   * @example
   * This parameter is now in invitational preview and unavailable.
   */
  fotaChannel?: string;
  /**
   * @remarks
   * Specifies whether the cloud computers in the template belong to a cloud computer pool.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  fromDesktopGroup?: boolean;
  /**
   * @remarks
   * The number of GPUs contained in the cloud computer instance type.
   * 
   * @example
   * 1
   */
  gpuCount?: number;
  gpuDriverType?: string;
  /**
   * @remarks
   * The image ID.
   */
  imageId?: string[];
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * Maximum value: 100.
   * 
   * Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The memory size of the cloud computer instance type. Unit: GiB.
   * 
   * @example
   * 4
   */
  memorySize?: number;
  /**
   * @remarks
   * The token that is used to start the next query.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The type of the OS.
   * 
   * Valid values:
   * 
   * *   Linux
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Windows
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Windows
   */
  osType?: string;
  /**
   * @remarks
   * The protocol type.
   * 
   * Valid values:
   * 
   * *   HDX: High-definition Experience (HDX) protocol
   * *   ASP: in-house Adaptive Streaming Protocol (ASP) (recommend)
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The scenario to use the image.
   * 
   * @example
   * FastBuy
   */
  scope?: string;
  /**
   * @remarks
   * The desktop template that is selected based on specific criteria.
   * 
   * @example
   * true
   */
  selectedBundle?: boolean;
  /**
   * @remarks
   * The type of the session.
   * 
   * Enumeration Value:
   * * **SingleSession**
   * * **MultipleSession**
   * 
   * @example
   * SingleSession
   */
  sessionType?: string;
  /**
   * @remarks
   * Specifies whether to return multi-session cloud computer templates. Default value: false.
   * 
   * @example
   * false
   */
  supportMultiSession?: boolean;
  /**
   * @remarks
   * Specifies whether to enable disk encryption.
   * 
   * @example
   * false
   */
  volumeEncryptionEnabled?: boolean;
  static names(): { [key: string]: string } {
    return {
      bundleId: 'BundleId',
      bundleType: 'BundleType',
      checkStock: 'CheckStock',
      cpuCount: 'CpuCount',
      desktopTypeFamily: 'DesktopTypeFamily',
      fotaChannel: 'FotaChannel',
      fromDesktopGroup: 'FromDesktopGroup',
      gpuCount: 'GpuCount',
      gpuDriverType: 'GpuDriverType',
      imageId: 'ImageId',
      maxResults: 'MaxResults',
      memorySize: 'MemorySize',
      nextToken: 'NextToken',
      osType: 'OsType',
      protocolType: 'ProtocolType',
      regionId: 'RegionId',
      scope: 'Scope',
      selectedBundle: 'SelectedBundle',
      sessionType: 'SessionType',
      supportMultiSession: 'SupportMultiSession',
      volumeEncryptionEnabled: 'VolumeEncryptionEnabled',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bundleId: { 'type': 'array', 'itemType': 'string' },
      bundleType: 'string',
      checkStock: 'boolean',
      cpuCount: 'number',
      desktopTypeFamily: 'string',
      fotaChannel: 'string',
      fromDesktopGroup: 'boolean',
      gpuCount: 'number',
      gpuDriverType: 'string',
      imageId: { 'type': 'array', 'itemType': 'string' },
      maxResults: 'number',
      memorySize: 'number',
      nextToken: 'string',
      osType: 'string',
      protocolType: 'string',
      regionId: 'string',
      scope: 'string',
      selectedBundle: 'boolean',
      sessionType: 'string',
      supportMultiSession: 'boolean',
      volumeEncryptionEnabled: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.bundleId)) {
      $dara.Model.validateArray(this.bundleId);
    }
    if(Array.isArray(this.imageId)) {
      $dara.Model.validateArray(this.imageId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBundlesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the queried cloud computer templates.
   */
  bundles?: DescribeBundlesResponseBodyBundles[];
  /**
   * @remarks
   * The token that is used for the next query. If this parameter is empty, all results have been returned.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6lu3PTF6h3zE8egwlYuv8M8
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * BCC854D8-5D1E-46D3-96EF-797A5DD36789
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      bundles: 'Bundles',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bundles: { 'type': 'array', 'itemType': DescribeBundlesResponseBodyBundles },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.bundles)) {
      $dara.Model.validateArray(this.bundles);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBundlesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeBundlesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeBundlesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCdsFileShareLinksRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-532033****
   */
  cdsId?: string;
  /**
   * @remarks
   * The users that create the file sharing links.
   */
  creators?: string[];
  /**
   * @remarks
   * The maximum number of resources to return. Valid values: 1 to 100. Default value: 100. The number of returned resources must be less than or equal to the specified number.
   * 
   * @example
   * 100
   */
  maxResults?: number;
  /**
   * @remarks
   * Specifies the marker after which the returned list begins. If this parameter is not specified, all results are returned. Default value: null.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the file sharing link.
   * 
   * @example
   * 7JQX1Fs****
   */
  shareId?: string;
  /**
   * @remarks
   * The sharing name for fuzzy search.
   * 
   * @example
   * user
   */
  shareName?: string;
  /**
   * @remarks
   * The file sharing status. Valid values: ● disabled: canceled ● enabled: valid
   * 
   * @example
   * disabled
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      creators: 'Creators',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      shareId: 'ShareId',
      shareName: 'ShareName',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      creators: { 'type': 'array', 'itemType': 'string' },
      maxResults: 'number',
      nextToken: 'string',
      shareId: 'string',
      shareName: 'string',
      status: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.creators)) {
      $dara.Model.validateArray(this.creators);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCdsFileShareLinksResponseBody extends $dara.Model {
  /**
   * @remarks
   * The operation result. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * The data information.
   */
  data?: CdsFileShareLinkModel[];
  /**
   * @remarks
   * The error message that is returned. This parameter is not returned if the value of Code is `success`.
   * 
   * @example
   * success
   */
  message?: string;
  /**
   * @remarks
   * A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6mnFXZiT7NdvGNgkInJ****
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      nextToken: 'NextToken',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: { 'type': 'array', 'itemType': CdsFileShareLinkModel },
      message: 'string',
      nextToken: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.data)) {
      $dara.Model.validateArray(this.data);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCdsFileShareLinksResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCdsFileShareLinksResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCdsFileShareLinksResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCensRequest extends $dara.Model {
  /**
   * @remarks
   * The page number.\\
   * Default value: 1.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries per page.\\
   * Default value: 50.
   * 
   * @example
   * 50
   */
  pageSize?: number;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNumber: 'number',
      pageSize: 'number',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCensResponseBody extends $dara.Model {
  /**
   * @remarks
   * Details of the CEN instances.
   */
  cens?: DescribeCensResponseBodyCens[];
  /**
   * @remarks
   * The page number.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 50
   */
  pageSize?: number;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * The total number of CEN instances returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      cens: 'Cens',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cens: { 'type': 'array', 'itemType': DescribeCensResponseBodyCens },
      pageNumber: 'number',
      pageSize: 'number',
      requestId: 'string',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.cens)) {
      $dara.Model.validateArray(this.cens);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCensResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCensResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCensResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeClientEventsRequest extends $dara.Model {
  /**
   * @remarks
   * The cloud desktop ID. If you do not specify a value for this parameter, events of all cloud desktops in the specified region are queried.
   * 
   * @example
   * ecd-8fupvkhg0aayu****
   */
  desktopId?: string;
  /**
   * @remarks
   * The IP address of the cloud desktop. If you do not specify a value for this parameter, the events of all cloud desktops in the specified region are queried.
   * 
   * @example
   * 10.10.*.*
   */
  desktopIp?: string;
  /**
   * @remarks
   * The cloud desktop name.
   * 
   * @example
   * test
   */
  desktopName?: string;
  /**
   * @remarks
   * This parameter is not available to the public.
   * 
   * @example
   * cn-hangzhou+dir-bh77qa8nmjot4****
   */
  directoryId?: string;
  /**
   * @remarks
   * The end of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.\\
   * If you do not specify a value for this parameter, the current time is used.
   * 
   * @example
   * 2020-11-31T06:32:31Z
   */
  endTime?: string;
  /**
   * @remarks
   * The information about the end user that connects to the cloud desktop from the Elastic Desktop Service (EDS) client. The information can be a Resource Access Management (RAM) user ID or an Active Directory (AD) username. If you do not specify a value for this parameter, the events of all end users in the specified region are queried.
   * 
   * @example
   * 28961708130834****
   */
  endUserId?: string;
  /**
   * @remarks
   * The type of the events that you want to query. If you specify multiple values for the EventTypes parameter, the events of all specified types are returned. If you do not specify values for the EventTypes and EventType parameters, all events of end users in the specified region are returned.
   * 
   * Valid values:
   * 
   * *   DESKTOP_STOP: End users stop the cloud desktop.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   GET_LITE_CONNECTION_TICKET: End users obtain the credential for reconnecting to the cloud desktop upon disconnection.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DESKTOP_DISCONNECT: End users disconnect desktop sessions.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   GET_CONNECTION_TICKET: End users request to connect to the cloud desktop.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CLIENT_LOGIN: End users log on to the cloud desktop.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DESKTOP_REBOOT: End users restart the cloud desktop.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DESKTOP_CONNECT: End users establish desktop sessions.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DESKTOP_START: End users start the cloud desktop.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * DESKTOP_DISCONNECT
   */
  eventType?: string;
  /**
   * @remarks
   * The array of event types that you want to query. You can specify multiple event types. The response contains all or specified types of events.
   */
  eventTypes?: string[];
  /**
   * @remarks
   * The number of entries per page.\\
   * Default value: 100.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the workspace to which the cloud desktop belongs. If you do not specify a value for this parameter, the events of all workspaces in the specified region are queried.
   * 
   * @example
   * cn-hangzhou+dir-bh77qa8nmjot4****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The workspace name.
   * 
   * @example
   * test
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.\\
   * If you do not specify a value for this parameter, all events that occurred before the point in time that you specify for `EndTime` are queried.
   * 
   * @example
   * 2020-11-30T06:32:31Z
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      desktopIp: 'DesktopIp',
      desktopName: 'DesktopName',
      directoryId: 'DirectoryId',
      endTime: 'EndTime',
      endUserId: 'EndUserId',
      eventType: 'EventType',
      eventTypes: 'EventTypes',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      regionId: 'RegionId',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      desktopIp: 'string',
      desktopName: 'string',
      directoryId: 'string',
      endTime: 'string',
      endUserId: 'string',
      eventType: 'string',
      eventTypes: { 'type': 'array', 'itemType': 'string' },
      maxResults: 'number',
      nextToken: 'string',
      officeSiteId: 'string',
      officeSiteName: 'string',
      regionId: 'string',
      startTime: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.eventTypes)) {
      $dara.Model.validateArray(this.eventTypes);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeClientEventsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The information about the events of an end user.
   */
  events?: DescribeClientEventsResponseBodyEvents[];
  /**
   * @remarks
   * A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 28A40F12-F340-442B-A35F-46EF6A03227B
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      events: 'Events',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      events: { 'type': 'array', 'itemType': DescribeClientEventsResponseBodyEvents },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.events)) {
      $dara.Model.validateArray(this.events);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeClientEventsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeClientEventsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeClientEventsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudDriveGroupsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk in Cloud Drive Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-shanghai+cds-135515****
   */
  cdsId?: string;
  /**
   * @remarks
   * The workspace ID.
   * 
   * @example
   * cn-hangzhou+dir-jedbpr4sl9l37****
   */
  directoryId?: string;
  /**
   * @remarks
   * The workspace name.
   * 
   * @example
   * testDirectoryName
   */
  directoryName?: string;
  /**
   * @remarks
   * The team space status. Valid values:
   * 
   * *   enabled
   * *   disabled
   * 
   * Default value: enabled.
   * 
   * @example
   * enabled
   */
  driveStatus?: string;
  /**
   * @remarks
   * Specifies whether the space is increased.
   * 
   * *   binding: increased
   * *   unbound: not increased
   * 
   * Default value: null. The default value indicates that all spaces are queried.
   * 
   * @example
   * binding
   * 
   * **if can be null:**
   * true
   */
  driveType?: string;
  /**
   * @remarks
   * The team ID.
   */
  groupId?: string[];
  /**
   * @remarks
   * The team name for fuzzy search.
   * 
   * @example
   * Test Team 1
   */
  groupName?: string;
  /**
   * @remarks
   * The team type.
   * 
   * *   org: organizational structure
   * *   directory: workspace
   * 
   * Default value: null. The default value indicates that all types of teams are queried.
   * 
   * @example
   * org
   */
  groupType?: string;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * *   Valid values: 1 to 100
   * *   Default value: 20
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The pagination token that is used in the next request to retrieve a new page of results.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6lY3I2VNHLwy+nIoSXh****
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the parent node. If a parent node ID is specified, the subnodes are queried. If you set the value of this parameter to root, the root node is queried.
   * 
   * Default value: null. The default value indicates that all nodes are queried.
   * 
   * @example
   * cg-e70ga4ixp30ur****
   */
  parentGroupId?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      directoryId: 'DirectoryId',
      directoryName: 'DirectoryName',
      driveStatus: 'DriveStatus',
      driveType: 'DriveType',
      groupId: 'GroupId',
      groupName: 'GroupName',
      groupType: 'GroupType',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      parentGroupId: 'ParentGroupId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      directoryId: 'string',
      directoryName: 'string',
      driveStatus: 'string',
      driveType: 'string',
      groupId: { 'type': 'array', 'itemType': 'string' },
      groupName: 'string',
      groupType: 'string',
      maxResults: 'number',
      nextToken: 'string',
      parentGroupId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.groupId)) {
      $dara.Model.validateArray(this.groupId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudDriveGroupsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The list of team spaces.
   */
  cloudDriveGroups?: DescribeCloudDriveGroupsResponseBodyCloudDriveGroups[];
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 0
   */
  count?: number;
  /**
   * @remarks
   * The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * EF015AE5-B30A-5189-B519-735CEE40****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      cloudDriveGroups: 'CloudDriveGroups',
      count: 'Count',
      nextToken: 'NextToken',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cloudDriveGroups: { 'type': 'array', 'itemType': DescribeCloudDriveGroupsResponseBodyCloudDriveGroups },
      count: 'number',
      nextToken: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.cloudDriveGroups)) {
      $dara.Model.validateArray(this.cloudDriveGroups);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudDriveGroupsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCloudDriveGroupsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCloudDriveGroupsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudDrivePermissionsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-82414*****
   */
  cdsId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudDrivePermissionsResponseBody extends $dara.Model {
  cloudDrivePermissionModels?: DescribeCloudDrivePermissionsResponseBodyCloudDrivePermissionModels[];
  /**
   * @example
   * A87DBB05-653A-5E4B-B72B-5F4A1E07E5B3
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      cloudDrivePermissionModels: 'CloudDrivePermissionModels',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cloudDrivePermissionModels: { 'type': 'array', 'itemType': DescribeCloudDrivePermissionsResponseBodyCloudDrivePermissionModels },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.cloudDrivePermissionModels)) {
      $dara.Model.validateArray(this.cloudDrivePermissionModels);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudDrivePermissionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCloudDrivePermissionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCloudDrivePermissionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudDriveUsersRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-066224****
   */
  cdsId?: string;
  /**
   * @example
   * abc
   */
  endUserId?: string;
  /**
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @example
   * aGN4YzAxQGNuLWhhbmd6aG91LjExNzU5NTMyNjgzMTQ1****
   */
  nextToken?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: 'string',
      maxResults: 'number',
      nextToken: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudDriveUsersResponseBody extends $dara.Model {
  cloudDriveUsers?: DescribeCloudDriveUsersResponseBodyCloudDriveUsers[];
  /**
   * @example
   * aGN4YzAxQGNuLWhhbmd6aG91LjExNzU5NTMyNjgzMTQ1****
   */
  nextToken?: string;
  /**
   * @example
   * F083AAE5-7AA9-53BB-9060-AFFB2C18****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      cloudDriveUsers: 'CloudDriveUsers',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cloudDriveUsers: { 'type': 'array', 'itemType': DescribeCloudDriveUsersResponseBodyCloudDriveUsers },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.cloudDriveUsers)) {
      $dara.Model.validateArray(this.cloudDriveUsers);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCloudDriveUsersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCloudDriveUsersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCloudDriveUsersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeConfigGroupRequest extends $dara.Model {
  /**
   * @example
   * cg-i1ruuudp92qpj****
   */
  groupId?: string;
  groupIds?: string[];
  name?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * CLOUD_DESKTOP
   */
  productType?: string;
  /**
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  statuses?: string[];
  /**
   * @example
   * Timer
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      groupId: 'GroupId',
      groupIds: 'GroupIds',
      name: 'Name',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      productType: 'ProductType',
      regionId: 'RegionId',
      statuses: 'Statuses',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupId: 'string',
      groupIds: { 'type': 'array', 'itemType': 'string' },
      name: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      productType: 'string',
      regionId: 'string',
      statuses: { 'type': 'array', 'itemType': 'string' },
      type: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.groupIds)) {
      $dara.Model.validateArray(this.groupIds);
    }
    if(Array.isArray(this.statuses)) {
      $dara.Model.validateArray(this.statuses);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeConfigGroupResponseBody extends $dara.Model {
  data?: DescribeConfigGroupResponseBodyData[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @example
   * 20
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': DescribeConfigGroupResponseBodyData },
      pageNumber: 'number',
      pageSize: 'number',
      requestId: 'string',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.data)) {
      $dara.Model.validateArray(this.data);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeConfigGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeConfigGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeConfigGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustomizedListHeadersRequest extends $dara.Model {
  /**
   * @example
   * zh-CN
   */
  langType?: string;
  /**
   * @example
   * desktop
   */
  listType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      langType: 'LangType',
      listType: 'ListType',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      langType: 'string',
      listType: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustomizedListHeadersResponseBody extends $dara.Model {
  headers?: DescribeCustomizedListHeadersResponseBodyHeaders[];
  /**
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      headers: 'Headers',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'array', 'itemType': DescribeCustomizedListHeadersResponseBodyHeaders },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.headers)) {
      $dara.Model.validateArray(this.headers);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustomizedListHeadersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCustomizedListHeadersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCustomizedListHeadersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopGroupSessionsRequest extends $dara.Model {
  /**
   * @remarks
   * The end of the time range to query.
   * 
   * @example
   * "2022-08-31T06:56:45Z"
   */
  endTime?: string;
  /**
   * @remarks
   * The ID of the end user.
   * 
   * @example
   * xianqiu
   */
  endUserId?: string;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @remarks
   * The pagination token that is used in the next request to retrieve a new page of results.
   * 
   * @example
   * "asdfdfsdfsdfds"
   */
  nextToken?: string;
  /**
   * @remarks
   * The type of the session.
   * 
   * Valid values:
   * 
   * *   0: single-session
   * *   1: multi-session
   * 
   * @example
   * 1
   */
  ownType?: number;
  /**
   * @remarks
   * The region ID.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The status of the session.
   * 
   * Valid values:
   * 
   * *   Connected
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Disconnected
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Connected
   */
  sessionStatus?: string;
  /**
   * @remarks
   * The beginning of the time range to query.
   * 
   * @example
   * "2022-08-31T06:56:45Z"
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      endUserId: 'EndUserId',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      ownType: 'OwnType',
      regionId: 'RegionId',
      sessionStatus: 'SessionStatus',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'string',
      endUserId: 'string',
      maxResults: 'number',
      nextToken: 'string',
      ownType: 'number',
      regionId: 'string',
      sessionStatus: 'string',
      startTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopGroupSessionsResponseBody extends $dara.Model {
  /**
   * @remarks
   * A pagination token. It can be used in the next request to retrieve a new page of results.
   * 
   * @example
   * caeba0bbb2
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * D0920845-7359-59FC-9899-B****
   */
  requestId?: string;
  /**
   * @remarks
   * The sessions.
   */
  sessions?: DescribeDesktopGroupSessionsResponseBodySessions[];
  /**
   * @remarks
   * The total number of sessions.
   * 
   * @example
   * 15
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      nextToken: 'NextToken',
      requestId: 'RequestId',
      sessions: 'Sessions',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nextToken: 'string',
      requestId: 'string',
      sessions: { 'type': 'array', 'itemType': DescribeDesktopGroupSessionsResponseBodySessions },
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.sessions)) {
      $dara.Model.validateArray(this.sessions);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopGroupSessionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDesktopGroupSessionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDesktopGroupSessionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopGroupsRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computer templates.
   */
  bundleId?: string[];
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  desktopGroupIds?: string[];
  /**
   * @remarks
   * The name of the cloud computer pool to query. Fuzzy search is supported.
   * 
   * @example
   * testName
   */
  desktopGroupName?: string;
  /**
   * @remarks
   * The authorized user IDs of cloud computer pools.
   */
  endUserIds?: string[];
  /**
   * @remarks
   * The authorized users that you want to exclude.
   */
  excludedEndUserIds?: string[];
  /**
   * @remarks
   * The IDs of the images.
   * 
   * **if can be null:**
   * false
   */
  imageId?: string[];
  /**
   * @remarks
   * The number of entries to return on each page. Valid values: 1 to 100. Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  multiResource?: boolean;
  /**
   * @remarks
   * The pagination token that is used in the next request to retrieve a new page of results. If the NextToken parameter is empty, no next page exists.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the office network to which the cloud computer pool belongs.
   * 
   * @example
   * cn-hangzhou+dir-467671****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The type of the cloud computer pool.
   * 
   * >  This parameter is not publicly available.
   * 
   * Valid values:
   * 
   * *   0: individual (single session)
   * *   1: shared (multiple sessions)
   * 
   * @example
   * 0
   */
  ownType?: number;
  /**
   * @remarks
   * The subscription duration of the cloud computer pool. The unit is specified by the `PeriodUnit` parameter.
   * 
   * *   Valid values if the `PeriodUnit` parameter is set to `Month`:
   * 
   *     *   1
   *     *   2
   *     *   3
   *     *   6
   * 
   * *   Valid values if the `PeriodUnit` parameter is set to `Year`:
   * 
   *     *   1
   *     *   2
   *     *   3
   *     *   4
   *     *   5
   * 
   * @example
   * 1
   */
  period?: number;
  /**
   * @remarks
   * The unit of the subscription duration.
   * 
   * @example
   * Month
   */
  periodUnit?: string;
  /**
   * @remarks
   * The ID of the policy that you want to associate with the cloud computer pool.
   * 
   * @example
   * pg-53iyi2aar0nd6****
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The protocol type.
   * 
   * Valid values:
   * 
   * *   High-definition Experience (HDX)
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Adaptive Streaming Protocol (ASP)
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The payment status of the cloud computer pool.
   * 
   * Valid values:
   * 
   * *   0: unpaid
   * *   1: paid
   * *   2: overdue or expired
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * The tags attached to the cloud computer pool. You can specify 1 to 20 tags.
   */
  tag?: DescribeDesktopGroupsRequestTag[];
  static names(): { [key: string]: string } {
    return {
      bundleId: 'BundleId',
      desktopGroupId: 'DesktopGroupId',
      desktopGroupIds: 'DesktopGroupIds',
      desktopGroupName: 'DesktopGroupName',
      endUserIds: 'EndUserIds',
      excludedEndUserIds: 'ExcludedEndUserIds',
      imageId: 'ImageId',
      maxResults: 'MaxResults',
      multiResource: 'MultiResource',
      nextToken: 'NextToken',
      officeSiteId: 'OfficeSiteId',
      ownType: 'OwnType',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      policyGroupId: 'PolicyGroupId',
      protocolType: 'ProtocolType',
      regionId: 'RegionId',
      status: 'Status',
      tag: 'Tag',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bundleId: { 'type': 'array', 'itemType': 'string' },
      desktopGroupId: 'string',
      desktopGroupIds: { 'type': 'array', 'itemType': 'string' },
      desktopGroupName: 'string',
      endUserIds: { 'type': 'array', 'itemType': 'string' },
      excludedEndUserIds: { 'type': 'array', 'itemType': 'string' },
      imageId: { 'type': 'array', 'itemType': 'string' },
      maxResults: 'number',
      multiResource: 'boolean',
      nextToken: 'string',
      officeSiteId: 'string',
      ownType: 'number',
      period: 'number',
      periodUnit: 'string',
      policyGroupId: 'string',
      protocolType: 'string',
      regionId: 'string',
      status: 'number',
      tag: { 'type': 'array', 'itemType': DescribeDesktopGroupsRequestTag },
    };
  }

  validate() {
    if(Array.isArray(this.bundleId)) {
      $dara.Model.validateArray(this.bundleId);
    }
    if(Array.isArray(this.desktopGroupIds)) {
      $dara.Model.validateArray(this.desktopGroupIds);
    }
    if(Array.isArray(this.endUserIds)) {
      $dara.Model.validateArray(this.endUserIds);
    }
    if(Array.isArray(this.excludedEndUserIds)) {
      $dara.Model.validateArray(this.excludedEndUserIds);
    }
    if(Array.isArray(this.imageId)) {
      $dara.Model.validateArray(this.imageId);
    }
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopGroupsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The cloud computer pools.
   */
  desktopGroups?: DescribeDesktopGroupsResponseBodyDesktopGroups[];
  /**
   * @remarks
   * The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroups: 'DesktopGroups',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroups: { 'type': 'array', 'itemType': DescribeDesktopGroupsResponseBodyDesktopGroups },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopGroups)) {
      $dara.Model.validateArray(this.desktopGroups);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopGroupsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDesktopGroupsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDesktopGroupsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopInfoRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computers. You can specify 1 to 100 IDs.
   */
  desktopId?: string[];
  /**
   * @remarks
   * The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopInfoResponseBody extends $dara.Model {
  /**
   * @remarks
   * The basic information about cloud computers.
   */
  desktops?: DescribeDesktopInfoResponseBodyDesktops[];
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 062B1439-709A-580E-85DF-CE97A1560565
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      desktops: 'Desktops',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktops: { 'type': 'array', 'itemType': DescribeDesktopInfoResponseBodyDesktops },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktops)) {
      $dara.Model.validateArray(this.desktops);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDesktopInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDesktopInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopOversoldGroupRequest extends $dara.Model {
  maxResults?: number;
  nextToken?: string;
  oversoldGroupIds?: string[];
  static names(): { [key: string]: string } {
    return {
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      oversoldGroupIds: 'OversoldGroupIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxResults: 'number',
      nextToken: 'string',
      oversoldGroupIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.oversoldGroupIds)) {
      $dara.Model.validateArray(this.oversoldGroupIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopOversoldGroupResponseBody extends $dara.Model {
  count?: number;
  data?: DescribeDesktopOversoldGroupResponseBodyData[];
  nextToken?: string;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      count: 'Count',
      data: 'Data',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: 'number',
      data: { 'type': 'array', 'itemType': DescribeDesktopOversoldGroupResponseBodyData },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.data)) {
      $dara.Model.validateArray(this.data);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopOversoldGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDesktopOversoldGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDesktopOversoldGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopOversoldUserRequest extends $dara.Model {
  clientToken?: string;
  endUserId?: string;
  maxResults?: number;
  nextToken?: string;
  oversoldGroupId?: string;
  userDesktopIds?: string[];
  userGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      clientToken: 'ClientToken',
      endUserId: 'EndUserId',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      oversoldGroupId: 'OversoldGroupId',
      userDesktopIds: 'UserDesktopIds',
      userGroupId: 'UserGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientToken: 'string',
      endUserId: 'string',
      maxResults: 'number',
      nextToken: 'string',
      oversoldGroupId: 'string',
      userDesktopIds: { 'type': 'array', 'itemType': 'string' },
      userGroupId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.userDesktopIds)) {
      $dara.Model.validateArray(this.userDesktopIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopOversoldUserResponseBody extends $dara.Model {
  count?: number;
  data?: DescribeDesktopOversoldUserResponseBodyData[];
  nextToken?: string;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      count: 'Count',
      data: 'Data',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: 'number',
      data: { 'type': 'array', 'itemType': DescribeDesktopOversoldUserResponseBodyData },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.data)) {
      $dara.Model.validateArray(this.data);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopOversoldUserResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDesktopOversoldUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDesktopOversoldUserResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopOversoldUserGroupRequest extends $dara.Model {
  maxResults?: number;
  nextToken?: string;
  oversoldGroupId?: string;
  userGroupIds?: string[];
  static names(): { [key: string]: string } {
    return {
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      oversoldGroupId: 'OversoldGroupId',
      userGroupIds: 'UserGroupIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxResults: 'number',
      nextToken: 'string',
      oversoldGroupId: 'string',
      userGroupIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.userGroupIds)) {
      $dara.Model.validateArray(this.userGroupIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopOversoldUserGroupResponseBody extends $dara.Model {
  count?: number;
  data?: DescribeDesktopOversoldUserGroupResponseBodyData[];
  nextToken?: string;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      count: 'Count',
      data: 'Data',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: 'number',
      data: { 'type': 'array', 'itemType': DescribeDesktopOversoldUserGroupResponseBodyData },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.data)) {
      $dara.Model.validateArray(this.data);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopOversoldUserGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDesktopOversoldUserGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDesktopOversoldUserGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopSessionsRequest extends $dara.Model {
  checkOsSession?: boolean;
  /**
   * @remarks
   * The IDs of the cloud computers. You can specify the IDs of 1 to 100 cloud computers.
   */
  desktopId?: string[];
  /**
   * @remarks
   * The name of the cloud computer.
   * 
   * @example
   * DemoComputer
   */
  desktopName?: string;
  /**
   * @remarks
   * The end of the time range to query.
   * 
   * @example
   * 2023-02-13T02:51:43Z
   */
  endTime?: string;
  /**
   * @remarks
   * The ID of the end user.
   * 
   * @example
   * testUser
   */
  endUserId?: string;
  endUserIdFilter?: string;
  /**
   * @remarks
   * The ID of the office network.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The page number.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries returned per page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The state of the session.
   * 
   * Valid values:
   * 
   * *   Connected
   * *   Disconnected
   * 
   * @example
   * Connected
   */
  sessionStatus?: string;
  /**
   * @remarks
   * The start of the time range to query.
   * 
   * @example
   * 2023-01-28T02:31:43Z
   */
  startTime?: string;
  subPayType?: string;
  static names(): { [key: string]: string } {
    return {
      checkOsSession: 'CheckOsSession',
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      endTime: 'EndTime',
      endUserId: 'EndUserId',
      endUserIdFilter: 'EndUserIdFilter',
      officeSiteId: 'OfficeSiteId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      regionId: 'RegionId',
      sessionStatus: 'SessionStatus',
      startTime: 'StartTime',
      subPayType: 'SubPayType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkOsSession: 'boolean',
      desktopId: { 'type': 'array', 'itemType': 'string' },
      desktopName: 'string',
      endTime: 'string',
      endUserId: 'string',
      endUserIdFilter: 'string',
      officeSiteId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      regionId: 'string',
      sessionStatus: 'string',
      startTime: 'string',
      subPayType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopSessionsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 3EC4A6DB-EC8D-55B0-9038-543DE671****
   */
  requestId?: string;
  /**
   * @remarks
   * Details of the session.
   */
  sessions?: DescribeDesktopSessionsResponseBodySessions[];
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      sessions: 'Sessions',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      sessions: { 'type': 'array', 'itemType': DescribeDesktopSessionsResponseBodySessions },
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.sessions)) {
      $dara.Model.validateArray(this.sessions);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopSessionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDesktopSessionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDesktopSessionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopTypesRequest extends $dara.Model {
  /**
   * @remarks
   * Applicable Scope of specifications. Default value: `Public`
   * 
   * @example
   * Public
   */
  appliedScope?: string;
  /**
   * @remarks
   * The number of vCPUs.
   * 
   * @example
   * 2
   */
  cpuCount?: number;
  /**
   * @remarks
   * The ID of the cloud computer pool when you change instance types of cloud computers. If you specify this parameter, the information about whether the instance type is compatible with the cloud computer pool is included in the response.
   * 
   * @example
   * dg-abcdefg****
   */
  desktopGroupIdForModify?: string;
  /**
   * @remarks
   * The ID of the cloud computer when you change instance types of cloud computers. If you specify this parameter, the information about whether the instance type is compatible with the cloud computer is included in the response.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopIdForModify?: string;
  /**
   * @remarks
   * The IDs of the instance types of cloud computers.
   * 
   * >  If the values of the `InstanceTypeFamily` and `DesktopTypeId` parameters are empty, all instance types of cloud computers are queried.
   * 
   * Valid values:
   * 
   * *   eds.hf.4c8g
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ecd.basic.large
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ecd.advanced.large
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ecd.basic.small
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ecd.graphics.2xlarge
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.hf.8c16g
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.hf.12c24g
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.general.8c16g
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.general.16c32g
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ecd.advanced.xlarge
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.graphics.16c1t4
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ecd.graphics.xlarge
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ecd.performance.2xlarge
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.general.8c32g
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.general.2c2g
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.general.2c4g
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.graphics.24c1t4
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.general.4c8g
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.general.4c16g
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.general.2c8g
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * ecd.graphics.xlarge
   */
  desktopTypeId?: string;
  desktopTypeIdList?: string[];
  /**
   * @remarks
   * The number of GPUs.
   * 
   * @example
   * 1
   */
  gpuCount?: number;
  gpuDriverType?: string;
  /**
   * @remarks
   * The name of the instance family.
   * 
   * >  If the values of the `InstanceTypeFamily` and `DesktopTypeId` parameters are empty, all instance families of cloud computers are queried.
   * 
   * Valid values:
   * 
   * *   ecd.advanced
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.graphics
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ecd.basic
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.hf
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ecd.graphics
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   eds.general
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ecd.performance
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * ecd.graphics
   */
  instanceTypeFamily?: string;
  /**
   * @remarks
   * The memory size. Unit: MiB.
   * 
   * @example
   * 4
   */
  memorySize?: number;
  orderBy?: string;
  /**
   * @remarks
   * The order type.
   * 
   * @example
   * DOWNGRADE
   */
  orderType?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  scope?: string;
  sortType?: string;
  supportMinSessionCount?: number;
  zoneId?: string;
  static names(): { [key: string]: string } {
    return {
      appliedScope: 'AppliedScope',
      cpuCount: 'CpuCount',
      desktopGroupIdForModify: 'DesktopGroupIdForModify',
      desktopIdForModify: 'DesktopIdForModify',
      desktopTypeId: 'DesktopTypeId',
      desktopTypeIdList: 'DesktopTypeIdList',
      gpuCount: 'GpuCount',
      gpuDriverType: 'GpuDriverType',
      instanceTypeFamily: 'InstanceTypeFamily',
      memorySize: 'MemorySize',
      orderBy: 'OrderBy',
      orderType: 'OrderType',
      regionId: 'RegionId',
      scope: 'Scope',
      sortType: 'SortType',
      supportMinSessionCount: 'SupportMinSessionCount',
      zoneId: 'ZoneId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appliedScope: 'string',
      cpuCount: 'number',
      desktopGroupIdForModify: 'string',
      desktopIdForModify: 'string',
      desktopTypeId: 'string',
      desktopTypeIdList: { 'type': 'array', 'itemType': 'string' },
      gpuCount: 'number',
      gpuDriverType: 'string',
      instanceTypeFamily: 'string',
      memorySize: 'number',
      orderBy: 'string',
      orderType: 'string',
      regionId: 'string',
      scope: 'string',
      sortType: 'string',
      supportMinSessionCount: 'number',
      zoneId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopTypeIdList)) {
      $dara.Model.validateArray(this.desktopTypeIdList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopTypesResponseBody extends $dara.Model {
  /**
   * @remarks
   * Details of cloud desktop types.
   */
  desktopTypes?: DescribeDesktopTypesResponseBodyDesktopTypes[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopTypes: 'DesktopTypes',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopTypes: { 'type': 'array', 'itemType': DescribeDesktopTypesResponseBodyDesktopTypes },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopTypes)) {
      $dara.Model.validateArray(this.desktopTypes);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopTypesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDesktopTypesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDesktopTypesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsRequest extends $dara.Model {
  /**
   * @remarks
   * The billing method of the cloud desktop.
   * 
   * @example
   * PostPaid
   */
  chargeType?: string;
  /**
   * @remarks
   * The ID of the desktop group. If you specify the `DesktopId` parameter, ignore the `DesktopGroupId` parameter. If you do not specify the `DesktopId` parameter, specify the `DesktopGroupId` parameter in the call to request all IDs of the cloud desktops in the specified desktop group.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The IDs of the cloud desktops. You can specify 1 to 100 cloud desktop IDs.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string[];
  /**
   * @remarks
   * The name of the cloud desktop.
   * 
   * @example
   * testDesktopName
   */
  desktopName?: string;
  /**
   * @remarks
   * The status of the cloud desktop.
   * 
   * @example
   * Running
   */
  desktopStatus?: string;
  /**
   * @remarks
   * The list of desktop status.
   */
  desktopStatusList?: string[];
  /**
   * @remarks
   * The new desktop type. You can call the [DescribeDesktopTypes](~~DescribeDesktopTypes~~) operation to query the IDs of supported desktop types.
   * 
   * @example
   * eds.general.2c8g
   */
  desktopType?: string;
  /**
   * @remarks
   * The ID of the directory, The ID is the same as the workspace ID.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  directoryId?: string;
  /**
   * @remarks
   * The IDs of the end users that are assigned the cloud desktop. You can specify 1 to 100 end user IDs.
   * 
   * > Only one end user can use the cloud desktop at a time.
   * 
   * @example
   * alice
   */
  endUserId?: string[];
  /**
   * @remarks
   * The IDs of the end users that are excluded from the end users that are assigned the cloud desktop. You can specify 1 to 100 end user IDs.
   * 
   * @example
   * andy
   */
  excludedEndUserId?: string[];
  /**
   * @remarks
   * The time when the subscription cloud desktop expires.
   * 
   * @example
   * 2022-12-31T15:59:59Z
   */
  expiredTime?: string;
  fillResourceGroup?: boolean;
  /**
   * @remarks
   * Specifies whether to filter cloud desktops in the desktop group.
   * 
   * @example
   * false
   */
  filterDesktopGroup?: boolean;
  gpuInstanceGroupId?: string;
  /**
   * @remarks
   * The ID of the desktop group.
   * 
   * > The desktop group feature is in invitational preview. If you want to use this feature, submit a ticket.
   * 
   * @example
   * dg-boyczi8enfyc5****
   */
  groupId?: string;
  /**
   * @remarks
   * The IDs of the images.
   */
  imageId?: string[];
  /**
   * @remarks
   * The flag that is used to manage the cloud desktops.
   * 
   * @example
   * NoFlag
   */
  managementFlag?: string;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * *   Maximum value: 100
   * *   Default value: 10
   * 
   * @example
   * 10
   */
  maxResults?: number;
  multiResource?: boolean;
  /**
   * @remarks
   * The token that determines the start point of the next query. If this parameter is left empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the workspace.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The name of the workspace.
   * 
   * @example
   * testName
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The progress when the cloud desktop was created.
   * 
   * @example
   * true
   */
  onlyDesktopGroup?: boolean;
  /**
   * @remarks
   * The types of the OSs.
   */
  osTypes?: string[];
  pageNumber?: number;
  pageSize?: number;
  /**
   * @remarks
   * The ID of the policy.
   * 
   * @example
   * system-all-enabled-policy
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The type of the protocol.
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  qosRuleId?: string;
  /**
   * @remarks
   * Specifies whether to query the information about image update of the cloud desktop.
   * 
   * @example
   * false
   */
  queryFotaUpdate?: boolean;
  /**
   * @remarks
   * The ID of the region. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  resourceGroupId?: string;
  /**
   * @remarks
   * The ID of the snapshot policy.
   * 
   * @example
   * sp-hb12mclyne09xw***
   */
  snapshotPolicyId?: string;
  subPayType?: string;
  /**
   * @remarks
   * The tags. A tag is a key-value pair that consists of a tag key and a tag value. Tags are used to identify resources. You can use tags to manage cloud desktops by group for easy searching and batch operations. For more information, see [Use tags to manage cloud desktops](https://help.aliyun.com/document_detail/203781.html).
   */
  tag?: DescribeDesktopsRequestTag[];
  /**
   * @remarks
   * The name of the end user.
   * 
   * @example
   * Alice
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      chargeType: 'ChargeType',
      desktopGroupId: 'DesktopGroupId',
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      desktopStatus: 'DesktopStatus',
      desktopStatusList: 'DesktopStatusList',
      desktopType: 'DesktopType',
      directoryId: 'DirectoryId',
      endUserId: 'EndUserId',
      excludedEndUserId: 'ExcludedEndUserId',
      expiredTime: 'ExpiredTime',
      fillResourceGroup: 'FillResourceGroup',
      filterDesktopGroup: 'FilterDesktopGroup',
      gpuInstanceGroupId: 'GpuInstanceGroupId',
      groupId: 'GroupId',
      imageId: 'ImageId',
      managementFlag: 'ManagementFlag',
      maxResults: 'MaxResults',
      multiResource: 'MultiResource',
      nextToken: 'NextToken',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      onlyDesktopGroup: 'OnlyDesktopGroup',
      osTypes: 'OsTypes',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      policyGroupId: 'PolicyGroupId',
      protocolType: 'ProtocolType',
      qosRuleId: 'QosRuleId',
      queryFotaUpdate: 'QueryFotaUpdate',
      regionId: 'RegionId',
      resourceGroupId: 'ResourceGroupId',
      snapshotPolicyId: 'SnapshotPolicyId',
      subPayType: 'SubPayType',
      tag: 'Tag',
      userName: 'UserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      chargeType: 'string',
      desktopGroupId: 'string',
      desktopId: { 'type': 'array', 'itemType': 'string' },
      desktopName: 'string',
      desktopStatus: 'string',
      desktopStatusList: { 'type': 'array', 'itemType': 'string' },
      desktopType: 'string',
      directoryId: 'string',
      endUserId: { 'type': 'array', 'itemType': 'string' },
      excludedEndUserId: { 'type': 'array', 'itemType': 'string' },
      expiredTime: 'string',
      fillResourceGroup: 'boolean',
      filterDesktopGroup: 'boolean',
      gpuInstanceGroupId: 'string',
      groupId: 'string',
      imageId: { 'type': 'array', 'itemType': 'string' },
      managementFlag: 'string',
      maxResults: 'number',
      multiResource: 'boolean',
      nextToken: 'string',
      officeSiteId: 'string',
      officeSiteName: 'string',
      onlyDesktopGroup: 'boolean',
      osTypes: { 'type': 'array', 'itemType': 'string' },
      pageNumber: 'number',
      pageSize: 'number',
      policyGroupId: 'string',
      protocolType: 'string',
      qosRuleId: 'string',
      queryFotaUpdate: 'boolean',
      regionId: 'string',
      resourceGroupId: 'string',
      snapshotPolicyId: 'string',
      subPayType: 'string',
      tag: { 'type': 'array', 'itemType': DescribeDesktopsRequestTag },
      userName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    if(Array.isArray(this.desktopStatusList)) {
      $dara.Model.validateArray(this.desktopStatusList);
    }
    if(Array.isArray(this.endUserId)) {
      $dara.Model.validateArray(this.endUserId);
    }
    if(Array.isArray(this.excludedEndUserId)) {
      $dara.Model.validateArray(this.excludedEndUserId);
    }
    if(Array.isArray(this.imageId)) {
      $dara.Model.validateArray(this.imageId);
    }
    if(Array.isArray(this.osTypes)) {
      $dara.Model.validateArray(this.osTypes);
    }
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details about the cloud desktops.
   */
  desktops?: DescribeDesktopsResponseBodyDesktops[];
  /**
   * @remarks
   * The token that is used for the next query. If this parameter is left empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  pageNumber?: number;
  pageSize?: number;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 484256DA-D816-44D2-9D86-B6EE4D5BA78C
   */
  requestId?: string;
  /**
   * @remarks
   * The total number of cloud desktops.
   * 
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      desktops: 'Desktops',
      nextToken: 'NextToken',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktops: { 'type': 'array', 'itemType': DescribeDesktopsResponseBodyDesktops },
      nextToken: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      requestId: 'string',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.desktops)) {
      $dara.Model.validateArray(this.desktops);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDesktopsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDesktopsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsInGroupRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * This parameter is required.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * Specifies whether to ignore deletion flags.
   * 
   * Default value: true. Valid values:
   * 
   * *   true: ignores deletion flags. The cloud computers that were deleted are returned.
   * *   false: does not ignore deletion flags. The cloud computers that were deleted are not returned.
   * 
   * @example
   * true
   */
  ignoreDeleted?: boolean;
  /**
   * @remarks
   * The number of entries to return on each page. Valid values: 1 to 100. Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The pagination token that is used in the next request to retrieve a new page of results. If the NextToken parameter is empty, no next page exists.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The billing method of the desktop group.
   * 
   * @example
   * PrePaid
   */
  payType?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      ignoreDeleted: 'IgnoreDeleted',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      payType: 'PayType',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      ignoreDeleted: 'boolean',
      maxResults: 'number',
      nextToken: 'string',
      payType: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsInGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The number of subscription cloud computers that are in the Connected state.
   * 
   * @example
   * 100
   */
  onlinePrePaidDesktopsCount?: number;
  /**
   * @remarks
   * The details about subscription cloud computers.
   */
  paidDesktops?: DescribeDesktopsInGroupResponseBodyPaidDesktops[];
  /**
   * @remarks
   * The total number of queried subscription cloud computers.
   * 
   * @example
   * 10
   */
  paidDesktopsCount?: number;
  /**
   * @remarks
   * The details about pay-as-you-go cloud computers.
   */
  postPaidDesktops?: DescribeDesktopsInGroupResponseBodyPostPaidDesktops[];
  /**
   * @remarks
   * The total number of queried pay-as-you-go cloud computers.
   * 
   * @example
   * 10
   */
  postPaidDesktopsCount?: number;
  /**
   * @remarks
   * The total amount of bills for pay-as-you-go cloud computers.
   * 
   * @example
   * 10000
   */
  postPaidDesktopsTotalAmount?: number;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * The number of subscription cloud computers that are in the Running state.
   * 
   * @example
   * 100
   */
  runningPrePaidDesktopsCount?: number;
  /**
   * @remarks
   * The number of subscription cloud computers that are in the Stopped state.
   * 
   * @example
   * 100
   */
  stopedPrePaidDesktopsCount?: number;
  /**
   * @remarks
   * The number of subscription cloud computers that are in the Stopped state.
   * 
   * @example
   * 100
   */
  stoppedPrePaidDesktopsCount?: number;
  static names(): { [key: string]: string } {
    return {
      nextToken: 'NextToken',
      onlinePrePaidDesktopsCount: 'OnlinePrePaidDesktopsCount',
      paidDesktops: 'PaidDesktops',
      paidDesktopsCount: 'PaidDesktopsCount',
      postPaidDesktops: 'PostPaidDesktops',
      postPaidDesktopsCount: 'PostPaidDesktopsCount',
      postPaidDesktopsTotalAmount: 'PostPaidDesktopsTotalAmount',
      requestId: 'RequestId',
      runningPrePaidDesktopsCount: 'RunningPrePaidDesktopsCount',
      stopedPrePaidDesktopsCount: 'StopedPrePaidDesktopsCount',
      stoppedPrePaidDesktopsCount: 'StoppedPrePaidDesktopsCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nextToken: 'string',
      onlinePrePaidDesktopsCount: 'number',
      paidDesktops: { 'type': 'array', 'itemType': DescribeDesktopsInGroupResponseBodyPaidDesktops },
      paidDesktopsCount: 'number',
      postPaidDesktops: { 'type': 'array', 'itemType': DescribeDesktopsInGroupResponseBodyPostPaidDesktops },
      postPaidDesktopsCount: 'number',
      postPaidDesktopsTotalAmount: 'number',
      requestId: 'string',
      runningPrePaidDesktopsCount: 'number',
      stopedPrePaidDesktopsCount: 'number',
      stoppedPrePaidDesktopsCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.paidDesktops)) {
      $dara.Model.validateArray(this.paidDesktops);
    }
    if(Array.isArray(this.postPaidDesktops)) {
      $dara.Model.validateArray(this.postPaidDesktops);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDesktopsInGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDesktopsInGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDesktopsInGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDevicesRequest extends $dara.Model {
  /**
   * @remarks
   * The address of the Active Directory (AD) office network.
   * 
   * @example
   * xn--0zw****
   */
  adDomain?: string;
  /**
   * @remarks
   * The type of the client.
   * 
   * Valid values:
   * 
   * *   1: hardware client.
   * *   2: software client.
   * 
   * This parameter is required.
   * 
   * @example
   * 2
   */
  clientType?: string;
  /**
   * @remarks
   * The ID of the device. The serial number (SN) of the hardware client or the UUID of the software client.
   * 
   * @example
   * 5F52817BE267A43C608D245070D2****
   */
  deviceId?: string;
  /**
   * @remarks
   * The ID of the convenient office network.
   * 
   * @example
   * cn-hangzhou+dir-jedbpr4sl9l37****
   */
  directoryId?: string;
  /**
   * @remarks
   * The ID of the bound user.
   * 
   * @example
   * moli
   */
  endUserId?: string;
  /**
   * @remarks
   * The page number.
   * 
   * @example
   * 10
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 1
   */
  pageSize?: number;
  /**
   * @remarks
   * The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.
   * 
   * @example
   * cn-hangzhou
   */
  region?: string;
  /**
   * @remarks
   * The account type of the user.
   * 
   * Valid values:
   * 
   * *   AD: enterprise AD account.
   * *   SIMPLE: convenience account
   * 
   * @example
   * SIMPLE
   */
  userType?: string;
  static names(): { [key: string]: string } {
    return {
      adDomain: 'AdDomain',
      clientType: 'ClientType',
      deviceId: 'DeviceId',
      directoryId: 'DirectoryId',
      endUserId: 'EndUserId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      region: 'Region',
      userType: 'UserType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adDomain: 'string',
      clientType: 'string',
      deviceId: 'string',
      directoryId: 'string',
      endUserId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      region: 'string',
      userType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDevicesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The information about devices that you queried.
   */
  devices?: DescribeDevicesResponseBodyDevices[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 5BEFE642-A383-4A18-8939-FB7DE452****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      devices: 'Devices',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      devices: { 'type': 'array', 'itemType': DescribeDevicesResponseBodyDevices },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.devices)) {
      $dara.Model.validateArray(this.devices);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDevicesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDevicesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDevicesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDirectoriesRequest extends $dara.Model {
  /**
   * @remarks
   * Details of directory IDs. You can specify one or more directory IDs.
   * 
   * @example
   * cn-hangzhou+dir-gx2x1dhsmu52rd****
   */
  directoryId?: string[];
  /**
   * @remarks
   * The directory status. This parameter is equivalent to `Status`.
   * 
   * @example
   * REGISTERED
   */
  directoryStatus?: string;
  /**
   * @remarks
   * The directory type.
   * 
   * Valid values:
   * 
   * *   SIMPLE: a directory of the convenience account type
   * *   AD_CONNECTOR: an AD directory
   * *   RAM: a RAM directory
   * 
   * @example
   * RAM
   */
  directoryType?: string;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * Maximum value: 100.
   * 
   * Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The token that determines the start point of the next query. If this parameter is empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The directory status.
   * 
   * Valid values:
   * 
   * *   REGISTERING: The directory is being registered.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DEREGISTERING: The directory is being deregistered.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   REGISTERED: The directory is registered.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   NEEDCONFIGTRUST: A trust relationship needs to be configured for the directory.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CONFIGTRUSTFAILED: A trust relationship fails to be configured for the directory.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DEREGISTERED: The directory is deregistered.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ERROR: One or more configurations of the directory are invalid.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CONFIGTRUSTING: A trust relationship is being configured.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   NEEDCONFIGUSER: Users need to be configured for the directory.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * REGISTERED
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      directoryId: 'DirectoryId',
      directoryStatus: 'DirectoryStatus',
      directoryType: 'DirectoryType',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      regionId: 'RegionId',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      directoryId: { 'type': 'array', 'itemType': 'string' },
      directoryStatus: 'string',
      directoryType: 'string',
      maxResults: 'number',
      nextToken: 'string',
      regionId: 'string',
      status: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.directoryId)) {
      $dara.Model.validateArray(this.directoryId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDirectoriesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The hostname of the domain controller. The hostname must comply with the hostname naming convention of Windows. This parameter is returned only when the directory type is AD office network.
   * 
   * @example
   * cnshsv21hmc****
   */
  adHostname?: string;
  /**
   * @remarks
   * The directories.
   */
  directories?: DescribeDirectoriesResponseBodyDirectories[];
  /**
   * @remarks
   * The token that is used for the next query. If this parameter is empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * F369A091-002F-49C8-AD55-02A776297C7B
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      adHostname: 'AdHostname',
      directories: 'Directories',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adHostname: 'string',
      directories: { 'type': 'array', 'itemType': DescribeDirectoriesResponseBodyDirectories },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.directories)) {
      $dara.Model.validateArray(this.directories);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDirectoriesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDirectoriesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDirectoriesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFlowMetricRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1664714703743
   */
  endTime?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * desktop
   */
  instanceType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * intranetOutRate
   */
  metricType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 60
   */
  period?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1651817220643
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      instanceType: 'InstanceType',
      metricType: 'MetricType',
      period: 'Period',
      regionId: 'RegionId',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'string',
      instanceId: 'string',
      instanceType: 'string',
      metricType: 'string',
      period: 'number',
      regionId: 'string',
      startTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFlowMetricResponseBody extends $dara.Model {
  /**
   * @example
   * {\\"instanceId\\": \\"np-4wrye3ishxi47****\\", \\"requestId\\": \\"4F0CD5B6-70D6-5115-A2F7-7EAC3981****\\", \\"dataPoints\\": [{\\"timeStamp\\": 1636510320000, \\"Average\\": 293752.0}]}
   */
  data?: string;
  /**
   * @example
   * 6857EDCB-631F-5405-BE95-45CBB4C3****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFlowMetricResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeFlowMetricResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeFlowMetricResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFlowStatisticRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * @example
   * ecd-7w78ozhjcwa3u****
   */
  desktopId?: string;
  /**
   * @remarks
   * The office network ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The number of the page to return.\\
   * Default value: 1.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The statistic collection interval. Unit: seconds.
   * 
   * Valid values:
   * 
   * *   3600: 1 hour
   * *   10800: 3 hours
   * *   86400: 24 hours
   * 
   * This parameter is required.
   * 
   * @example
   * 3600
   */
  period?: number;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      officeSiteId: 'OfficeSiteId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      period: 'Period',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      officeSiteId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      period: 'number',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFlowStatisticResponseBody extends $dara.Model {
  /**
   * @remarks
   * The number of available cloud computers in the office network.
   * 
   * @example
   * 10
   */
  desktopCount?: number;
  /**
   * @remarks
   * The traffic statistics.
   */
  desktopFlowStatistic?: DescribeFlowStatisticResponseBodyDesktopFlowStatistic[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 269BDB16-2CD8-4865-84BD-11C40BC2****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopCount: 'DesktopCount',
      desktopFlowStatistic: 'DesktopFlowStatistic',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopCount: 'number',
      desktopFlowStatistic: { 'type': 'array', 'itemType': DescribeFlowStatisticResponseBodyDesktopFlowStatistic },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopFlowStatistic)) {
      $dara.Model.validateArray(this.desktopFlowStatistic);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFlowStatisticResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeFlowStatisticResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeFlowStatisticResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFotaPendingDesktopsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string;
  /**
   * @remarks
   * The name of the cloud computer.
   * 
   * @example
   * testName
   */
  desktopName?: string;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * *   Valid values: 1 to 100.
   * *   Default value: 20.
   * 
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @remarks
   * The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of `NextToken`.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the office network. You can call the [DescribeOfficeSites](https://help.aliyun.com/document_detail/216071.html) operation to obtain the value of this parameter.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The ID of the image update task. You can call the [DescribeFotaTasks](https://help.aliyun.com/document_detail/437001.html) operation to obtain the value of this parameter.
   * 
   * @example
   * aot-c4khwrp9ocml4****
   */
  taskUid?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
      taskUid: 'TaskUid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      desktopName: 'string',
      maxResults: 'number',
      nextToken: 'string',
      officeSiteId: 'string',
      regionId: 'string',
      taskUid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFotaPendingDesktopsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The response code.
   * 
   * @example
   * 200
   */
  code?: string;
  /**
   * @remarks
   * The cloud computers whose images can be and are pending to be updated to the version specified in `TaskUid`.
   */
  fotaPendingDesktops?: DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops[];
  /**
   * @remarks
   * The returned message.
   * 
   * @example
   * success
   */
  message?: string;
  /**
   * @remarks
   * A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      fotaPendingDesktops: 'FotaPendingDesktops',
      message: 'Message',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      fotaPendingDesktops: { 'type': 'array', 'itemType': DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops },
      message: 'string',
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.fotaPendingDesktops)) {
      $dara.Model.validateArray(this.fotaPendingDesktops);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFotaPendingDesktopsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeFotaPendingDesktopsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeFotaPendingDesktopsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFotaTasksRequest extends $dara.Model {
  /**
   * @remarks
   * >  This parameter is not publicly available.
   * 
   * @example
   * To be hidden.
   */
  fotaStatus?: string;
  /**
   * @remarks
   * The language of the image version to update.
   * 
   * Valid values:
   * 
   * *   en: English.
   * *   zh: Simplified Chinese.
   * 
   * @example
   * zh
   */
  lang?: string;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * *   Valid values: 1 to 100
   * *   Default value: 20
   * 
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @remarks
   * The pagination token that is used in the next request to retrieve a new page of results. If the NextToken parameter is empty, no next page exists.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The IDs of the image update tasks.
   */
  taskUid?: string[];
  /**
   * @remarks
   * Specifies whether to automatically push the image update task.
   * 
   * Valid values:
   * 
   * *   Running: automatically pushes the image update task.
   * *   Pending: does not automatically push the image update task.
   * 
   * @example
   * Pending
   */
  userStatus?: string;
  static names(): { [key: string]: string } {
    return {
      fotaStatus: 'FotaStatus',
      lang: 'Lang',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      regionId: 'RegionId',
      taskUid: 'TaskUid',
      userStatus: 'UserStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fotaStatus: 'string',
      lang: 'string',
      maxResults: 'number',
      nextToken: 'string',
      regionId: 'string',
      taskUid: { 'type': 'array', 'itemType': 'string' },
      userStatus: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.taskUid)) {
      $dara.Model.validateArray(this.taskUid);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFotaTasksResponseBody extends $dara.Model {
  /**
   * @remarks
   * The returned message. If the request was successful, a `success` is returned. If the request failed, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * Details about the image update task.
   */
  fotaTasks?: DescribeFotaTasksResponseBodyFotaTasks[];
  /**
   * @remarks
   * The returned error message. This parameter is not returned if the Code value is a `success` message.
   * 
   * @example
   * success
   */
  message?: string;
  /**
   * @remarks
   * A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      fotaTasks: 'FotaTasks',
      message: 'Message',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      fotaTasks: { 'type': 'array', 'itemType': DescribeFotaTasksResponseBodyFotaTasks },
      message: 'string',
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.fotaTasks)) {
      $dara.Model.validateArray(this.fotaTasks);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFotaTasksResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeFotaTasksResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeFotaTasksResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGuestApplicationsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-asw3giklqvfqe****
   */
  desktopId?: string;
  /**
   * @remarks
   * The ID of the end user.
   * 
   * This parameter is required.
   * 
   * @example
   * demo001
   */
  endUserId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      endUserId: 'EndUserId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      endUserId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGuestApplicationsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the applications.
   */
  applications?: DescribeGuestApplicationsResponseBodyApplications[];
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 272CF39E-B5DE-5BE3-A09B-B43F1026****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      applications: 'Applications',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applications: { 'type': 'array', 'itemType': DescribeGuestApplicationsResponseBodyApplications },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.applications)) {
      $dara.Model.validateArray(this.applications);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGuestApplicationsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeGuestApplicationsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeGuestApplicationsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeImageModifiedRecordsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-bd53sfmysz8ir****
   */
  desktopId?: string;
  /**
   * @remarks
   * The maximum number of entries to return on each page.
   * 
   * *   Maximum value: 100.
   * *   Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The token that determines the start point of the next query. If this parameter is left empty, all results are returned.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6l3d+SWeOobbIlDLjwhjkTk
   */
  nextToken?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      maxResults: 'number',
      nextToken: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeImageModifiedRecordsResponseBody extends $dara.Model {
  /**
   * @remarks
   * Details about the image modification record.
   */
  imageModifiedRecords?: DescribeImageModifiedRecordsResponseBodyImageModifiedRecords[];
  /**
   * @remarks
   * If the NextToken parameter is empty, no next page exists.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6koN7RqHg3d2z8LKmSoe821
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * DC40EE61-7E83-59ED-AEA6-7EE9C437F352
   */
  requestId?: string;
  /**
   * @remarks
   * The total number of image modification records.
   * 
   * @example
   * 20
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      imageModifiedRecords: 'ImageModifiedRecords',
      nextToken: 'NextToken',
      requestId: 'RequestId',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      imageModifiedRecords: { 'type': 'array', 'itemType': DescribeImageModifiedRecordsResponseBodyImageModifiedRecords },
      nextToken: 'string',
      requestId: 'string',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.imageModifiedRecords)) {
      $dara.Model.validateArray(this.imageModifiedRecords);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeImageModifiedRecordsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeImageModifiedRecordsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeImageModifiedRecordsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeImagePermissionRequest extends $dara.Model {
  /**
   * @remarks
   * The image ID.
   * 
   * This parameter is required.
   * 
   * @example
   * m-4zfb6zj728hhr****
   */
  imageId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      imageId: 'ImageId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      imageId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeImagePermissionResponseBody extends $dara.Model {
  /**
   * @remarks
   * The IDs of the Alibaba Cloud accounts with which the image is shared.
   */
  aliUids?: string[];
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 473469C7-AA6F-4DC5-B3DB-A3DC0DE3****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      aliUids: 'AliUids',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      aliUids: { 'type': 'array', 'itemType': 'string' },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.aliUids)) {
      $dara.Model.validateArray(this.aliUids);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeImagePermissionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeImagePermissionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeImagePermissionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeImagesRequest extends $dara.Model {
  /**
   * @remarks
   * The instance type of the cloud computer. You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/436816.html) operation to obtain the parameter value.
   * 
   * @example
   * ecd.graphics.xlarge
   */
  desktopInstanceType?: string;
  /**
   * @remarks
   * The image version.
   * 
   * @example
   * 0.0.3-R-20220616.133609
   */
  fotaVersion?: string;
  /**
   * @remarks
   * Specifies whether the images are GPU-accelerated images.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  gpuCategory?: boolean;
  /**
   * @remarks
   * The version of the GPU driver.
   * 
   * @example
   * 417.22
   */
  gpuDriverVersion?: string;
  /**
   * @remarks
   * The IDs of the images. You can specify one or more image IDs.
   * 
   * @example
   * m-gx2x1dhsmusr2****
   */
  imageId?: string[];
  /**
   * @remarks
   * The image name.
   * 
   * @example
   * Win_01
   */
  imageName?: string;
  /**
   * @remarks
   * The state of the image.
   * 
   * @example
   * Available
   */
  imageStatus?: string;
  /**
   * @remarks
   * The type of the image.
   * 
   * @example
   * SYSTEM
   */
  imageType?: string;
  /**
   * @remarks
   * The language of the OS.
   * 
   * @example
   * en-US
   */
  languageType?: string;
  /**
   * @remarks
   * The maximum number of entries to return on each page.
   * 
   * *   Maximum value: 100.
   * *   Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The token that determines the start point of the next query. If you do not specify this parameter, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The type of the operating system of the images. Default value: `null`.
   * 
   * Valid values:
   * 
   * *   Linux
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Windows
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Windows
   */
  osType?: string;
  /**
   * @remarks
   * The protocol type.
   * 
   * Valid values:
   * 
   * *   HDX: High-definition Experience (HDX) protocol
   * *   ASP: in-house Adaptive Streaming Protocol (ASP) (recommended)
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The session type.
   * 
   * @example
   * SINGLE_SESSION
   */
  sessionType?: string;
  static names(): { [key: string]: string } {
    return {
      desktopInstanceType: 'DesktopInstanceType',
      fotaVersion: 'FotaVersion',
      gpuCategory: 'GpuCategory',
      gpuDriverVersion: 'GpuDriverVersion',
      imageId: 'ImageId',
      imageName: 'ImageName',
      imageStatus: 'ImageStatus',
      imageType: 'ImageType',
      languageType: 'LanguageType',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      osType: 'OsType',
      protocolType: 'ProtocolType',
      regionId: 'RegionId',
      sessionType: 'SessionType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopInstanceType: 'string',
      fotaVersion: 'string',
      gpuCategory: 'boolean',
      gpuDriverVersion: 'string',
      imageId: { 'type': 'array', 'itemType': 'string' },
      imageName: 'string',
      imageStatus: 'string',
      imageType: 'string',
      languageType: 'string',
      maxResults: 'number',
      nextToken: 'string',
      osType: 'string',
      protocolType: 'string',
      regionId: 'string',
      sessionType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.imageId)) {
      $dara.Model.validateArray(this.imageId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeImagesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the images.
   */
  images?: DescribeImagesResponseBodyImages[];
  /**
   * @remarks
   * The token that determines the start point of the next query. If this parameter is empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 4636DBE0-BBB4-4076-8B8E-94D21A9A3CFB
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      images: 'Images',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      images: { 'type': 'array', 'itemType': DescribeImagesResponseBodyImages },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.images)) {
      $dara.Model.validateArray(this.images);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeImagesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeImagesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeImagesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInvocationsRequest extends $dara.Model {
  /**
   * @remarks
   * The type of the command. Valid values:
   * 
   * *   RunBatScript
   * *   RunPowerShellScript
   * 
   * @example
   * RunPowerShellScript
   */
  commandType?: string;
  /**
   * @remarks
   * The encoding method of the command content and output. Valid values:
   * 
   * *   PlainText
   * *   Base64
   * 
   * Default value: Base64.
   * 
   * @example
   * PlainText
   */
  contentEncoding?: string;
  /**
   * @remarks
   * The ID of the cloud desktop. If you specify a cloud desktop, all the execution records of Cloud Assistant commands on the cloud desktop are queried.
   * 
   * @example
   * ecd-7w78ozhjcwa3u****
   */
  desktopId?: string;
  /**
   * @remarks
   * The IDs of the cloud desktops.
   */
  desktopIds?: string[];
  /**
   * @remarks
   * The ID of the end user.
   * 
   * @example
   * test1
   */
  endUserId?: string;
  includeInvokeDesktops?: boolean;
  /**
   * @remarks
   * Specifies whether to return command outputs in the response. Valid values:
   * 
   * *   true: returns command outputs.
   * *   false: does not return command outputs.
   * 
   * Default value: false.
   * 
   * @example
   * false
   */
  includeOutput?: boolean;
  /**
   * @remarks
   * The ID of the execution.
   * 
   * @example
   * t-hz0jdfwd9f****
   */
  invokeId?: string;
  /**
   * @remarks
   * The overall execution status of a command. The overall execution status is determined by the execution status of the command on one or more cloud desktops. Valid values:
   * 
   * *   Running: The execution is in progress on one or more cloud desktops.
   * *   Finished: The execution is finished on all cloud desktops, or the execution is manually stopped on some cloud desktops and the execution is finished on others.
   * *   Failed: The execution failed on all cloud desktops.
   * *   PartialFailed: The execution failed on some cloud desktops.
   * *   Stopped: The execution is stopped.
   * 
   * Default value: Running.
   * 
   * @example
   * Finished
   */
  invokeStatus?: string;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * *   Valid values: 1 to 50.
   * *   Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The query token. Set the value to the NextToken value that is returned from the last call to the previous DescribeInvocations operation.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      commandType: 'CommandType',
      contentEncoding: 'ContentEncoding',
      desktopId: 'DesktopId',
      desktopIds: 'DesktopIds',
      endUserId: 'EndUserId',
      includeInvokeDesktops: 'IncludeInvokeDesktops',
      includeOutput: 'IncludeOutput',
      invokeId: 'InvokeId',
      invokeStatus: 'InvokeStatus',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commandType: 'string',
      contentEncoding: 'string',
      desktopId: 'string',
      desktopIds: { 'type': 'array', 'itemType': 'string' },
      endUserId: 'string',
      includeInvokeDesktops: 'boolean',
      includeOutput: 'boolean',
      invokeId: 'string',
      invokeStatus: 'string',
      maxResults: 'number',
      nextToken: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopIds)) {
      $dara.Model.validateArray(this.desktopIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInvocationsResponseBody extends $dara.Model {
  /**
   * @remarks
   * Details about execution records of the command.
   */
  invocations?: DescribeInvocationsResponseBodyInvocations[];
  /**
   * @remarks
   * The query token that is returned from this call.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      invocations: 'Invocations',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      invocations: { 'type': 'array', 'itemType': DescribeInvocationsResponseBodyInvocations },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.invocations)) {
      $dara.Model.validateArray(this.invocations);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInvocationsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeInvocationsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeInvocationsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeKmsKeysRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the region. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the most recent region list.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeKmsKeysResponseBody extends $dara.Model {
  /**
   * @remarks
   * The authorization status.
   * 
   * @example
   * authorized
   */
  authorizeStatus?: string;
  /**
   * @remarks
   * Details about the customer master keys (CMKs).
   */
  keys?: DescribeKmsKeysResponseBodyKeys[];
  /**
   * @remarks
   * Indicates whether KMS is activated.
   * 
   * @example
   * enabled
   */
  kmsServiceStatus?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      authorizeStatus: 'AuthorizeStatus',
      keys: 'Keys',
      kmsServiceStatus: 'KmsServiceStatus',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorizeStatus: 'string',
      keys: { 'type': 'array', 'itemType': DescribeKmsKeysResponseBodyKeys },
      kmsServiceStatus: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.keys)) {
      $dara.Model.validateArray(this.keys);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeKmsKeysResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeKmsKeysResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeKmsKeysResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeModificationPriceRequest extends $dara.Model {
  /**
   * @example
   * 20
   */
  bandwidth?: number;
  /**
   * @example
   * ecd-0gfv2z3sf95zvt****
   */
  instanceId?: string;
  /**
   * @example
   * eds.enterprise_office.8c16g
   */
  instanceType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @example
   * Desktop
   */
  resourceType?: string;
  /**
   * @example
   * 80
   */
  rootDiskSizeGib?: number;
  /**
   * @example
   * 50
   */
  userDiskSizeGib?: number;
  static names(): { [key: string]: string } {
    return {
      bandwidth: 'Bandwidth',
      instanceId: 'InstanceId',
      instanceType: 'InstanceType',
      regionId: 'RegionId',
      resourceType: 'ResourceType',
      rootDiskSizeGib: 'RootDiskSizeGib',
      userDiskSizeGib: 'UserDiskSizeGib',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bandwidth: 'number',
      instanceId: 'string',
      instanceType: 'string',
      regionId: 'string',
      resourceType: 'string',
      rootDiskSizeGib: 'number',
      userDiskSizeGib: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeModificationPriceResponseBody extends $dara.Model {
  priceInfo?: DescribeModificationPriceResponseBodyPriceInfo;
  /**
   * @example
   * 48174475-5EB2-5F99-A9E9-6F892D645****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      priceInfo: 'PriceInfo',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      priceInfo: DescribeModificationPriceResponseBodyPriceInfo,
      requestId: 'string',
    };
  }

  validate() {
    if(this.priceInfo && typeof (this.priceInfo as any).validate === 'function') {
      (this.priceInfo as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeModificationPriceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeModificationPriceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeModificationPriceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNASFileSystemsRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the NAS file system.
   * 
   * @example
   * 04f314****
   */
  fileSystemId?: string[];
  /**
   * @remarks
   * Specifies whether to filter NAS file systems that only support the user profile management (UPM) feature.
   * 
   * @example
   * false
   */
  matchCompatibleProfile?: boolean;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * Maximum value: 100.
   * 
   * Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The token that determines the start point of the query.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the workspace.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      fileSystemId: 'FileSystemId',
      matchCompatibleProfile: 'MatchCompatibleProfile',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileSystemId: { 'type': 'array', 'itemType': 'string' },
      matchCompatibleProfile: 'boolean',
      maxResults: 'number',
      nextToken: 'string',
      officeSiteId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.fileSystemId)) {
      $dara.Model.validateArray(this.fileSystemId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNASFileSystemsResponseBody extends $dara.Model {
  /**
   * @remarks
   * Details about the NAS file systems.
   */
  fileSystems?: DescribeNASFileSystemsResponseBodyFileSystems[];
  /**
   * @remarks
   * The token that determines the start point of the next query. This parameter is empty if no additional results exist.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 269BDB16-2CD8-4865-84BD-11C40BC21DB0
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      fileSystems: 'FileSystems',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileSystems: { 'type': 'array', 'itemType': DescribeNASFileSystemsResponseBodyFileSystems },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.fileSystems)) {
      $dara.Model.validateArray(this.fileSystems);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNASFileSystemsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeNASFileSystemsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeNASFileSystemsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNetworkPackagesRequest extends $dara.Model {
  /**
   * @remarks
   * The charge type of the pay-as-you-go premium bandwidth plan.
   * 
   * Valid values:
   * 
   * *   PayByTraffic: charges by data transfer.
   * 
   * *   PayByBandwidth: charges by fixed bandwidth.
   * 
   * @example
   * PayByBandwidth
   */
  internetChargeType?: string;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * *   Maximum value: 100
   * *   Default value: 10
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The ID of the premium bandwidth plan. You can specify 1 to 100 IDs.
   * 
   * @example
   * np-amtp8e8q1o9e4****
   */
  networkPackageId?: string[];
  /**
   * @remarks
   * The token that determines the start point of the next query.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      internetChargeType: 'InternetChargeType',
      maxResults: 'MaxResults',
      networkPackageId: 'NetworkPackageId',
      nextToken: 'NextToken',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      internetChargeType: 'string',
      maxResults: 'number',
      networkPackageId: { 'type': 'array', 'itemType': 'string' },
      nextToken: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.networkPackageId)) {
      $dara.Model.validateArray(this.networkPackageId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNetworkPackagesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The premium bandwidth plans.
   */
  networkPackages?: DescribeNetworkPackagesResponseBodyNetworkPackages[];
  /**
   * @remarks
   * The token that is used to start the next query. If the value of this parameter is empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      networkPackages: 'NetworkPackages',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      networkPackages: { 'type': 'array', 'itemType': DescribeNetworkPackagesResponseBodyNetworkPackages },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.networkPackages)) {
      $dara.Model.validateArray(this.networkPackages);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNetworkPackagesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeNetworkPackagesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeNetworkPackagesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOfficeSitesRequest extends $dara.Model {
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * *   Maximum value: 100.
   * *   Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The token that determines the start point of the next query.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The office network IDs. You can specify the IDs of 1 to 100 office networks.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string[];
  /**
   * @remarks
   * The account type of the office network.
   * 
   * Valid values:
   * 
   * *   SIMPLE: convenience account
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   AD_CONNECTOR: enterprise Active Directory (AD) account
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * SIMPLE
   */
  officeSiteType?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The security protection setting of the office network.
   * 
   * Valid values:
   * 
   * *   SASE: SASE is configured.
   * *   OFF: No security protection setting is configured.
   * 
   * @example
   * SASE
   */
  securityProtection?: string;
  /**
   * @remarks
   * The office network status.
   * 
   * Valid values:
   * 
   * *   REGISTERING: The office network is being registered.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DEREGISTERING: The office network is being deregistered.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   REGISTERED: The office network is registered.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   NEEDCONFIGTRUST: A trust relationship is required for the office network.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CONFIGTRUSTFAILED: A trust relationship fails to be configured for the office network.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DEREGISTERED: The office network is deregistered.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   ERROR: One or more configurations of the office network are invalid.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   CONFIGTRUSTING: A trust relationship is being configured for the office network.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   NEEDCONFIGUSER: Users are required for the office network.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * REGISTERED
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      officeSiteId: 'OfficeSiteId',
      officeSiteType: 'OfficeSiteType',
      regionId: 'RegionId',
      securityProtection: 'SecurityProtection',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxResults: 'number',
      nextToken: 'string',
      officeSiteId: { 'type': 'array', 'itemType': 'string' },
      officeSiteType: 'string',
      regionId: 'string',
      securityProtection: 'string',
      status: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.officeSiteId)) {
      $dara.Model.validateArray(this.officeSiteId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOfficeSitesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The token that determines the start point of the next query. If this parameter is empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The information about office networks.
   */
  officeSites?: DescribeOfficeSitesResponseBodyOfficeSites[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 20
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      nextToken: 'NextToken',
      officeSites: 'OfficeSites',
      requestId: 'RequestId',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nextToken: 'string',
      officeSites: { 'type': 'array', 'itemType': DescribeOfficeSitesResponseBodyOfficeSites },
      requestId: 'string',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.officeSites)) {
      $dara.Model.validateArray(this.officeSites);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOfficeSitesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeOfficeSitesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeOfficeSitesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGroupsRequest extends $dara.Model {
  externalPolicyGroupIds?: string[];
  /**
   * @remarks
   * The number of entries per page.
   * 
   * *   Valid values: 1 to 100
   * *   Default value: 10
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The policy IDs. You can specify one or more policy IDs.
   * 
   * @example
   * system-all-enabled-policy
   */
  policyGroupId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The effective scope of the policy. Valid values:
   * 
   * *   GLOBAL: The policy takes effect globally.
   * *   IP: The policy takes effect based on the IP address.
   * *   ALL: The policy takes effect without limits.
   * 
   * Default value: GLOBAL.
   * 
   * @example
   * ALL
   */
  scope?: string;
  static names(): { [key: string]: string } {
    return {
      externalPolicyGroupIds: 'ExternalPolicyGroupIds',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      policyGroupId: 'PolicyGroupId',
      regionId: 'RegionId',
      scope: 'Scope',
    };
  }

  static types(): { [key: string]: any } {
    return {
      externalPolicyGroupIds: { 'type': 'array', 'itemType': 'string' },
      maxResults: 'number',
      nextToken: 'string',
      policyGroupId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
      scope: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.externalPolicyGroupIds)) {
      $dara.Model.validateArray(this.externalPolicyGroupIds);
    }
    if(Array.isArray(this.policyGroupId)) {
      $dara.Model.validateArray(this.policyGroupId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGroupsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The details of the policies.
   */
  describePolicyGroups?: DescribePolicyGroupsResponseBodyDescribePolicyGroups[];
  /**
   * @remarks
   * A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a****
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 473469C7-AA6F-4DC5-B3DB-A3DC0DE3****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      describePolicyGroups: 'DescribePolicyGroups',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      describePolicyGroups: { 'type': 'array', 'itemType': DescribePolicyGroupsResponseBodyDescribePolicyGroups },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.describePolicyGroups)) {
      $dara.Model.validateArray(this.describePolicyGroups);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGroupsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribePolicyGroupsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribePolicyGroupsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceRequest extends $dara.Model {
  /**
   * @remarks
   * The number of the resources. Default value: 1.
   * 
   * @example
   * 1
   */
  amount?: number;
  /**
   * @remarks
   * The maximum public bandwidth. Unit: Mbit/s.
   * 
   * *   Valid values if the PayByTraffic parameter is set to PayByBandwidth: 10 to 1000
   * *   Valid values if the PayByTraffic parameter is set to PayByTraffic: 10 to 200
   * 
   * @example
   * 10
   */
  bandwidth?: number;
  duration?: number;
  groupDesktopCount?: number;
  /**
   * @remarks
   * The resource specifications.
   * 
   * *   If you set ResourceType to Desktop, set this parameter to one of the following values:
   * 
   *     *   ecd.basic.small
   *     *   ecd.basic.large
   *     *   ecd.advanced.large
   *     *   ecd.advanced.xlarge
   *     *   ecd.performance.2xlarge
   *     *   ecd.graphics.xlarge
   *     *   ecd.graphics.2xlarge
   *     *   ecd.advanced.xlarge_s8d2
   *     *   ecd.advanced.xlarge_s8d7
   *     *   ecd.graphics.1g72c
   *     *   eds.general.2c2g
   *     *   eds.general.2c4g
   *     *   eds.general.2c8g
   *     *   eds.general.4c8g
   *     *   eds.general.4c16g
   *     *   eds.general.8c16g
   *     *   eds.general.8c32g
   *     *   eds.general.16c32g
   * 
   * *   If you set ResourceType to OfficeSite, set this parameter to large.
   * 
   * *   If you set ResourceType to Bandwidth, leave this parameter empty.
   * 
   * @example
   * eds.general.2c2g
   */
  instanceType?: string;
  /**
   * @remarks
   * The metering method of the Internet access package. Valid values:
   * 
   * *   PayByBandwidth: pay-by-bandwidth
   * *   PayByTraffic: pay-by-data-transfer
   * 
   * @example
   * PayByTraffic
   */
  internetChargeType?: string;
  /**
   * @remarks
   * The OS. Valid values:
   * 
   * *   Windows
   * *   Linux
   * 
   * Default value: Windows.
   * 
   * @example
   * Windows
   */
  osType?: string;
  /**
   * @remarks
   * The subscription duration. Default value: 1.
   * 
   * @example
   * 1
   */
  period?: number;
  /**
   * @remarks
   * The unit of the billing cycle. Valid values:
   * 
   * *   Hour
   * *   Month
   * *   Year
   * 
   * Default value: Hour.
   * 
   * @example
   * Hour
   */
  periodUnit?: string;
  /**
   * @remarks
   * The promotion ID.
   * 
   * @example
   * 123456
   */
  promotionId?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The resource type. Valid values:
   * 
   * *   Desktop: cloud desktop
   * *   OfficeSite: workspace
   * *   Bandwidth: network bandwidth
   * 
   * Default value: Desktop.
   * 
   * @example
   * Desktop
   */
  resourceType?: string;
  rootDiskCategory?: string;
  /**
   * @remarks
   * The system disk size. Unit: GiB.
   * 
   * @example
   * 80
   */
  rootDiskSizeGib?: number;
  userDiskCategory?: string;
  /**
   * @remarks
   * The data disk size. Unit: GiB.
   * 
   * @example
   * 100
   */
  userDiskSizeGib?: number;
  static names(): { [key: string]: string } {
    return {
      amount: 'Amount',
      bandwidth: 'Bandwidth',
      duration: 'Duration',
      groupDesktopCount: 'GroupDesktopCount',
      instanceType: 'InstanceType',
      internetChargeType: 'InternetChargeType',
      osType: 'OsType',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      promotionId: 'PromotionId',
      regionId: 'RegionId',
      resourceType: 'ResourceType',
      rootDiskCategory: 'RootDiskCategory',
      rootDiskSizeGib: 'RootDiskSizeGib',
      userDiskCategory: 'UserDiskCategory',
      userDiskSizeGib: 'UserDiskSizeGib',
    };
  }

  static types(): { [key: string]: any } {
    return {
      amount: 'number',
      bandwidth: 'number',
      duration: 'number',
      groupDesktopCount: 'number',
      instanceType: 'string',
      internetChargeType: 'string',
      osType: 'string',
      period: 'number',
      periodUnit: 'string',
      promotionId: 'string',
      regionId: 'string',
      resourceType: 'string',
      rootDiskCategory: 'string',
      rootDiskSizeGib: 'number',
      userDiskCategory: 'string',
      userDiskSizeGib: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The price details.
   */
  priceInfo?: DescribePriceResponseBodyPriceInfo;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * B1175630-3C44-4389-A3C1-15639FFC8EBC
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      priceInfo: 'PriceInfo',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      priceInfo: DescribePriceResponseBodyPriceInfo,
      requestId: 'string',
    };
  }

  validate() {
    if(this.priceInfo && typeof (this.priceInfo as any).validate === 'function') {
      (this.priceInfo as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribePriceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribePriceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceForCreateDesktopOversoldGroupRequest extends $dara.Model {
  concurrenceCount?: number;
  dataDiskSize?: number;
  desktopType?: string;
  oversoldUserCount?: number;
  period?: number;
  periodUnit?: string;
  systemDiskSize?: number;
  static names(): { [key: string]: string } {
    return {
      concurrenceCount: 'ConcurrenceCount',
      dataDiskSize: 'DataDiskSize',
      desktopType: 'DesktopType',
      oversoldUserCount: 'OversoldUserCount',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      systemDiskSize: 'SystemDiskSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      concurrenceCount: 'number',
      dataDiskSize: 'number',
      desktopType: 'string',
      oversoldUserCount: 'number',
      period: 'number',
      periodUnit: 'string',
      systemDiskSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceForCreateDesktopOversoldGroupResponseBody extends $dara.Model {
  data?: DescribePriceForCreateDesktopOversoldGroupResponseBodyData;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: DescribePriceForCreateDesktopOversoldGroupResponseBodyData,
      requestId: 'string',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceForCreateDesktopOversoldGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribePriceForCreateDesktopOversoldGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribePriceForCreateDesktopOversoldGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceForModifyDesktopOversoldGroupSaleRequest extends $dara.Model {
  concurrenceCount?: number;
  oversoldGroupId?: string;
  oversoldUserCount?: number;
  static names(): { [key: string]: string } {
    return {
      concurrenceCount: 'ConcurrenceCount',
      oversoldGroupId: 'OversoldGroupId',
      oversoldUserCount: 'OversoldUserCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      concurrenceCount: 'number',
      oversoldGroupId: 'string',
      oversoldUserCount: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceForModifyDesktopOversoldGroupSaleResponseBody extends $dara.Model {
  data?: DescribePriceForModifyDesktopOversoldGroupSaleResponseBodyData;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: DescribePriceForModifyDesktopOversoldGroupSaleResponseBodyData,
      requestId: 'string',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceForModifyDesktopOversoldGroupSaleResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribePriceForModifyDesktopOversoldGroupSaleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribePriceForModifyDesktopOversoldGroupSaleResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceForRenewDesktopOversoldGroupRequest extends $dara.Model {
  oversoldGroupId?: string;
  period?: number;
  periodUnit?: string;
  static names(): { [key: string]: string } {
    return {
      oversoldGroupId: 'OversoldGroupId',
      period: 'Period',
      periodUnit: 'PeriodUnit',
    };
  }

  static types(): { [key: string]: any } {
    return {
      oversoldGroupId: 'string',
      period: 'number',
      periodUnit: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceForRenewDesktopOversoldGroupResponseBody extends $dara.Model {
  data?: DescribePriceForRenewDesktopOversoldGroupResponseBodyData;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: DescribePriceForRenewDesktopOversoldGroupResponseBodyData,
      requestId: 'string',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePriceForRenewDesktopOversoldGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribePriceForRenewDesktopOversoldGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribePriceForRenewDesktopOversoldGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecordingsRequest extends $dara.Model {
  /**
   * @example
   * ecd-hlh41mk78dugw****
   */
  desktopId?: string;
  /**
   * @example
   * 20230424004441
   */
  endTime?: string;
  /**
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @example
   * false
   */
  needSignedUrl?: boolean;
  /**
   * @example
   * aGN4YzAxQGNuLWhhbmd6aG91LjExNzU5NTMyNjgzMTQ1****
   */
  nextToken?: string;
  /**
   * @example
   * pg-gx2x1dhsmthe9****
   */
  policyGroupId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-beijing
   */
  regionId?: string;
  /**
   * @example
   * 10
   */
  signedUrlExpireMinutes?: number;
  standardEndTime?: string;
  standardStartTime?: string;
  /**
   * @example
   * 20230424000000
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      endTime: 'EndTime',
      maxResults: 'MaxResults',
      needSignedUrl: 'NeedSignedUrl',
      nextToken: 'NextToken',
      policyGroupId: 'PolicyGroupId',
      regionId: 'RegionId',
      signedUrlExpireMinutes: 'SignedUrlExpireMinutes',
      standardEndTime: 'StandardEndTime',
      standardStartTime: 'StandardStartTime',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      endTime: 'string',
      maxResults: 'number',
      needSignedUrl: 'boolean',
      nextToken: 'string',
      policyGroupId: 'string',
      regionId: 'string',
      signedUrlExpireMinutes: 'number',
      standardEndTime: 'string',
      standardStartTime: 'string',
      startTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecordingsResponseBody extends $dara.Model {
  /**
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6nbCQ7ar+fECeh1IuWQXi39R5eoJ68zWp99mTAKRRNRhw==
   */
  nextToken?: string;
  recordings?: DescribeRecordingsResponseBodyRecordings[];
  /**
   * @example
   * 327CFE78-1C0D-51AC-A9C6-BCEDF0DD44D6
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      nextToken: 'NextToken',
      recordings: 'Recordings',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nextToken: 'string',
      recordings: { 'type': 'array', 'itemType': DescribeRecordingsResponseBodyRecordings },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.recordings)) {
      $dara.Model.validateArray(this.recordings);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecordingsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRecordingsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRecordingsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRefundPriceRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  desktopId?: string[];
  /**
   * @example
   * RemainRefund
   */
  refundType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      refundType: 'RefundType',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      refundType: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRefundPriceResponseBody extends $dara.Model {
  priceInfo?: DescribeRefundPriceResponseBodyPriceInfo;
  /**
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      priceInfo: 'PriceInfo',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      priceInfo: DescribeRefundPriceResponseBodyPriceInfo,
      requestId: 'string',
    };
  }

  validate() {
    if(this.priceInfo && typeof (this.priceInfo as any).validate === 'function') {
      (this.priceInfo as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRefundPriceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRefundPriceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRefundPriceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRegionsRequest extends $dara.Model {
  /**
   * @remarks
   * The display name of the region, which varies based on the current language.
   * 
   * @example
   * zh
   */
  acceptLanguage?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      acceptLanguage: 'AcceptLanguage',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      acceptLanguage: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRegionsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The information about regions.
   */
  regions?: DescribeRegionsResponseBodyRegions[];
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      regions: 'Regions',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regions: { 'type': 'array', 'itemType': DescribeRegionsResponseBodyRegions },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.regions)) {
      $dara.Model.validateArray(this.regions);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRegionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRegionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRegionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRenewalPriceRequest extends $dara.Model {
  /**
   * @example
   * ecd-6ldllk9zxcpfhs****
   */
  instanceId?: string;
  instanceIds?: string[];
  /**
   * @example
   * 1
   */
  period?: number;
  /**
   * @example
   * Month
   */
  periodUnit?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @example
   * Desktop
   */
  resourceType?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      instanceIds: 'InstanceIds',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      regionId: 'RegionId',
      resourceType: 'ResourceType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      instanceIds: { 'type': 'array', 'itemType': 'string' },
      period: 'number',
      periodUnit: 'string',
      regionId: 'string',
      resourceType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.instanceIds)) {
      $dara.Model.validateArray(this.instanceIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRenewalPriceResponseBody extends $dara.Model {
  priceInfo?: DescribeRenewalPriceResponseBodyPriceInfo;
  /**
   * @example
   * 72E47B1E-6B11-5A11-A27C-7A80F866****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      priceInfo: 'PriceInfo',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      priceInfo: DescribeRenewalPriceResponseBodyPriceInfo,
      requestId: 'string',
    };
  }

  validate() {
    if(this.priceInfo && typeof (this.priceInfo as any).validate === 'function') {
      (this.priceInfo as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRenewalPriceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRenewalPriceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRenewalPriceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSessionStatisticRequest extends $dara.Model {
  /**
   * @remarks
   * The end of the time range to query.
   * 
   * @example
   * 1677808889806
   */
  endTime?: string;
  /**
   * @remarks
   * The workspace ID.
   * 
   * @example
   * cn-shanghai+dir-259382****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The query interval. Unit: seconds. Valid values:
   * 
   * *   60
   * *   120
   * 
   * @example
   * 60
   */
  period?: number;
  /**
   * @remarks
   * The region ID.
   * 
   * @example
   * cn-shanghai
   */
  regionId?: string;
  /**
   * @remarks
   * Specifies to search for session information by region ID. This parameter is used to filter desktop information of a specific region.
   * 
   * @example
   * cn-hangzhou
   */
  searchRegionId?: string;
  /**
   * @remarks
   * The beginning of the time range to query.
   * 
   * @example
   * 1679449506572
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      officeSiteId: 'OfficeSiteId',
      period: 'Period',
      regionId: 'RegionId',
      searchRegionId: 'SearchRegionId',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'string',
      officeSiteId: 'string',
      period: 'number',
      regionId: 'string',
      searchRegionId: 'string',
      startTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSessionStatisticResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * C5528624-C6ED-5CA4-A4A2-7C30DBF2****
   */
  requestId?: string;
  /**
   * @remarks
   * The statistics.
   */
  statistic?: DescribeSessionStatisticResponseBodyStatistic[];
  /**
   * @remarks
   * The total number of sessions returned.
   * 
   * @example
   * 1
   */
  totalCount?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      statistic: 'Statistic',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      statistic: { 'type': 'array', 'itemType': DescribeSessionStatisticResponseBodyStatistic },
      totalCount: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.statistic)) {
      $dara.Model.validateArray(this.statistic);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSessionStatisticResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSessionStatisticResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSessionStatisticResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSnapshotsRequest extends $dara.Model {
  /**
   * @remarks
   * The user who creates the snapshot.
   * 
   * @example
   * Administrator
   */
  creator?: string;
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string;
  /**
   * @remarks
   * The name of the cloud computer.
   * 
   * @example
   * testName
   */
  desktopName?: string;
  /**
   * @remarks
   * The end of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC.
   * 
   * @example
   * 2020-11-31T06:32:31Z
   */
  endTime?: string;
  /**
   * @remarks
   * The maximum number of entries to return on each page.
   * 
   * *   Valid values: 1 to 100
   * *   Default value: 10
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The pagination token that is used in the next request to retrieve a new page of results. You must specify the token that is obtained from the previous query as the value of NextToken.
   * 
   * @example
   * 8051af8d01b5479bec9f5ddf02e4a8fbd0ab6e7e43f8****
   */
  nextToken?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The snapshot ID.
   * 
   * @example
   * s-2ze81owrnv9pity4****
   */
  snapshotId?: string;
  /**
   * @remarks
   * The name of the snapshot. The name must be 2 to 127 characters in length. The name must start with a letter. The name can contain letters, digits, underscores (_), and hyphens (-). The name cannot start with `auto` because snapshots whose names start with auto are recognized as automatic snapshots.
   * 
   * @example
   * test_data_disk
   */
  snapshotName?: string;
  /**
   * @remarks
   * The category of the snapshots.
   * 
   * Default value: all. Valid values:
   * 
   * *   all: all snapshot categories
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   auto: automatic snapshots
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   user: manual snapshots
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * user
   */
  snapshotType?: string;
  /**
   * @remarks
   * The type of the disk for which the snapshot is created.
   * 
   * >  The value of this parameter is not case-sensitive.
   * 
   * Valid values:
   * 
   * *   Data: data disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   System: system disk
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * system
   */
  sourceDiskType?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC.
   * 
   * @example
   * 2020-11-30T06:32:31Z
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      creator: 'Creator',
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      endTime: 'EndTime',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      regionId: 'RegionId',
      snapshotId: 'SnapshotId',
      snapshotName: 'SnapshotName',
      snapshotType: 'SnapshotType',
      sourceDiskType: 'SourceDiskType',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creator: 'string',
      desktopId: 'string',
      desktopName: 'string',
      endTime: 'string',
      maxResults: 'number',
      nextToken: 'string',
      regionId: 'string',
      snapshotId: 'string',
      snapshotName: 'string',
      snapshotType: 'string',
      sourceDiskType: 'string',
      startTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSnapshotsResponseBody extends $dara.Model {
  /**
   * @remarks
   * If the NextToken parameter is empty, no next page exists.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 51592A88-0F2C-55E6-AD2C-2AD9C10D****
   */
  requestId?: string;
  /**
   * @remarks
   * Details of the queried snapshots.
   */
  snapshots?: DescribeSnapshotsResponseBodySnapshots[];
  static names(): { [key: string]: string } {
    return {
      nextToken: 'NextToken',
      requestId: 'RequestId',
      snapshots: 'Snapshots',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nextToken: 'string',
      requestId: 'string',
      snapshots: { 'type': 'array', 'itemType': DescribeSnapshotsResponseBodySnapshots },
    };
  }

  validate() {
    if(Array.isArray(this.snapshots)) {
      $dara.Model.validateArray(this.snapshots);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSnapshotsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSnapshotsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSnapshotsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTimerGroupRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cg-hs3i1w39o68ma****
   */
  groupId?: string;
  /**
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      groupId: 'GroupId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTimerGroupResponseBody extends $dara.Model {
  data?: DescribeTimerGroupResponseBodyData;
  /**
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: DescribeTimerGroupResponseBodyData,
      requestId: 'string',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTimerGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTimerGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTimerGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserConnectTimeRequest extends $dara.Model {
  endTime?: string;
  endUserId?: string;
  maxResults?: number;
  nextToken?: string;
  oversoldGroupId?: string;
  startTime?: string;
  userDesktopId?: string;
  userGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      endUserId: 'EndUserId',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      oversoldGroupId: 'OversoldGroupId',
      startTime: 'StartTime',
      userDesktopId: 'UserDesktopId',
      userGroupId: 'UserGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'string',
      endUserId: 'string',
      maxResults: 'number',
      nextToken: 'string',
      oversoldGroupId: 'string',
      startTime: 'string',
      userDesktopId: 'string',
      userGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserConnectTimeResponseBody extends $dara.Model {
  count?: number;
  data?: DescribeUserConnectTimeResponseBodyData[];
  nextToken?: string;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      count: 'Count',
      data: 'Data',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: 'number',
      data: { 'type': 'array', 'itemType': DescribeUserConnectTimeResponseBodyData },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.data)) {
      $dara.Model.validateArray(this.data);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserConnectTimeResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeUserConnectTimeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeUserConnectTimeResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserConnectionRecordsRequest extends $dara.Model {
  /**
   * @remarks
   * The duration when the cloud desktop is connected, which is the minimum value for condition filtering.
   * 
   * @example
   * 100
   */
  connectDurationFrom?: number;
  /**
   * @remarks
   * The duration when the cloud desktop is connected, which is the maximum value for condition filtering.
   * 
   * @example
   * 100
   */
  connectDurationTo?: number;
  /**
   * @remarks
   * The time when the cloud desktop stops to be connected, which is the minimum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.
   * 
   * @example
   * 1631266200000
   */
  connectEndTimeFrom?: number;
  /**
   * @remarks
   * The time when the cloud desktop stops to be connected, which is the maximum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.
   * 
   * @example
   * 1631268000000
   */
  connectEndTimeTo?: number;
  /**
   * @remarks
   * The time when the cloud desktop starts to be connected, which is the minimum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.
   * 
   * @example
   * 1631239200000
   */
  connectStartTimeFrom?: number;
  /**
   * @remarks
   * The time when the cloud desktop starts to be connected, which is the maximum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.
   * 
   * @example
   * 1631241000000
   */
  connectStartTimeTo?: number;
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * This parameter is required.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * @example
   * ecd-138dsptkrt00u****
   */
  desktopId?: string;
  /**
   * @remarks
   * The ID of the authorized user.
   * 
   * This parameter is required.
   * 
   * @example
   * alice
   */
  endUserId?: string;
  /**
   * @remarks
   * The type of the user account.
   * 
   * Valid values:
   * 
   * *   SIMPLE: convenience account
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   AD_CONNECTOR: enterprise AD account
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * SIMPLE
   */
  endUserType?: string;
  /**
   * @remarks
   * The number of entries to return on each page. Maximum value: 100. Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The token that determines the start point of the next query. If this parameter is empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      connectDurationFrom: 'ConnectDurationFrom',
      connectDurationTo: 'ConnectDurationTo',
      connectEndTimeFrom: 'ConnectEndTimeFrom',
      connectEndTimeTo: 'ConnectEndTimeTo',
      connectStartTimeFrom: 'ConnectStartTimeFrom',
      connectStartTimeTo: 'ConnectStartTimeTo',
      desktopGroupId: 'DesktopGroupId',
      desktopId: 'DesktopId',
      endUserId: 'EndUserId',
      endUserType: 'EndUserType',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      connectDurationFrom: 'number',
      connectDurationTo: 'number',
      connectEndTimeFrom: 'number',
      connectEndTimeTo: 'number',
      connectStartTimeFrom: 'number',
      connectStartTimeTo: 'number',
      desktopGroupId: 'string',
      desktopId: 'string',
      endUserId: 'string',
      endUserType: 'string',
      maxResults: 'number',
      nextToken: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserConnectionRecordsResponseBody extends $dara.Model {
  /**
   * @remarks
   * Details about connection records of the end user.
   */
  connectionRecords?: DescribeUserConnectionRecordsResponseBodyConnectionRecords[];
  /**
   * @remarks
   * The token that is used to start the next query.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 2CC66B0A-BA3B-5D87-BFBE-11AAAD7A8E03
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      connectionRecords: 'ConnectionRecords',
      nextToken: 'NextToken',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      connectionRecords: { 'type': 'array', 'itemType': DescribeUserConnectionRecordsResponseBodyConnectionRecords },
      nextToken: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.connectionRecords)) {
      $dara.Model.validateArray(this.connectionRecords);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserConnectionRecordsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeUserConnectionRecordsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeUserConnectionRecordsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserProfilePathRulesRequest extends $dara.Model {
  /**
   * @remarks
   * The desktop group ID. This parameter is required when you set RuleType parameter to DesktopGroup.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The rule type that you want to configure for the directory.
   * 
   * Valid values:
   * 
   * *   DesktopGroup
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Default
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * DesktopGroup
   */
  ruleType?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      regionId: 'RegionId',
      ruleType: 'RuleType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      regionId: 'string',
      ruleType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserProfilePathRulesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * A87DBB05-653A-5E4B-B72B-5F4A1E07****
   */
  requestId?: string;
  /**
   * @remarks
   * The directory blacklist and whitelist.
   */
  userProfilePathRule?: DescribeUserProfilePathRulesResponseBodyUserProfilePathRule;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      userProfilePathRule: 'UserProfilePathRule',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      userProfilePathRule: DescribeUserProfilePathRulesResponseBodyUserProfilePathRule,
    };
  }

  validate() {
    if(this.userProfilePathRule && typeof (this.userProfilePathRule as any).validate === 'function') {
      (this.userProfilePathRule as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserProfilePathRulesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeUserProfilePathRulesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeUserProfilePathRulesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsersInGroupRequest extends $dara.Model {
  /**
   * @remarks
   * The status of the desktop connection for the end user.
   * 
   * Valid values:
   * 
   * - 0: Disconnected.
   * - 1: Connected.
   * 
   * @example
   * 1
   */
  connectState?: number;
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * This parameter is required.
   * 
   * @example
   * dg-8ttn55ujj8nj8****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The ID of the authorized user.
   * 
   * @example
   * alice
   */
  endUserId?: string;
  /**
   * @remarks
   * The IDs of the authorized users.
   */
  endUserIds?: string[];
  /**
   * @remarks
   * The query string for fuzzy match. If you specify this parameter, the system returns all results that contain the string.
   * 
   * @example
   * alice
   */
  filter?: string;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * *   Maximum value: 100.
   * *   Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The token that determines the start point of the next query. If this parameter is left empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the organization to which the end user belongs.
   * 
   * @example
   * org-d0fua2oyukw8j****
   */
  orgId?: string;
  /**
   * @remarks
   * Specifies whether to query user details.
   * 
   * Valid values:
   * 
   * *   true (default)
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  queryUserDetail?: boolean;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      connectState: 'ConnectState',
      desktopGroupId: 'DesktopGroupId',
      endUserId: 'EndUserId',
      endUserIds: 'EndUserIds',
      filter: 'Filter',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      orgId: 'OrgId',
      queryUserDetail: 'QueryUserDetail',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      connectState: 'number',
      desktopGroupId: 'string',
      endUserId: 'string',
      endUserIds: { 'type': 'array', 'itemType': 'string' },
      filter: 'string',
      maxResults: 'number',
      nextToken: 'string',
      orgId: 'string',
      queryUserDetail: 'boolean',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.endUserIds)) {
      $dara.Model.validateArray(this.endUserIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsersInGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The list of authorized users.
   */
  endUsers?: DescribeUsersInGroupResponseBodyEndUsers[];
  /**
   * @remarks
   * The token that is used to start the next query.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The total number of authorized users that is connected to cloud computers in the cloud computer pool.
   * 
   * @example
   * 0
   */
  onlineUsersCount?: number;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * The total number of authorized users of the cloud computer pool.
   * 
   * @example
   * 1
   */
  usersCount?: number;
  static names(): { [key: string]: string } {
    return {
      endUsers: 'EndUsers',
      nextToken: 'NextToken',
      onlineUsersCount: 'OnlineUsersCount',
      requestId: 'RequestId',
      usersCount: 'UsersCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endUsers: { 'type': 'array', 'itemType': DescribeUsersInGroupResponseBodyEndUsers },
      nextToken: 'string',
      onlineUsersCount: 'number',
      requestId: 'string',
      usersCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.endUsers)) {
      $dara.Model.validateArray(this.endUsers);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsersInGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeUsersInGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeUsersInGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsersPasswordRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-gq8u6whi9f6k8****
   */
  desktopId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsersPasswordResponseBody extends $dara.Model {
  /**
   * @remarks
   * The authorized users of the cloud computer.
   */
  desktopUsers?: DescribeUsersPasswordResponseBodyDesktopUsers[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * F7B4B17B-5C8A-514C-AA4D-F8090E3A63E9
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopUsers: 'DesktopUsers',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopUsers: { 'type': 'array', 'itemType': DescribeUsersPasswordResponseBodyDesktopUsers },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopUsers)) {
      $dara.Model.validateArray(this.desktopUsers);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsersPasswordResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeUsersPasswordResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeUsersPasswordResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVirtualMFADevicesRequest extends $dara.Model {
  /**
   * @remarks
   * The names of the AD users.
   * 
   * @example
   * testuser
   */
  endUserId?: string[];
  /**
   * @remarks
   * The number of entries per page. Valid values: 1 to 500. Default value: 100.
   * 
   * @example
   * 100
   */
  maxResults?: number;
  /**
   * @remarks
   * The pagination token that is used in the next request to retrieve a new page of results. You must specify the token that is obtained from the previous query as the value of NextToken.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the workspace.
   * 
   * @example
   * cn-hangzhou+dir-269345****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      endUserId: 'EndUserId',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endUserId: { 'type': 'array', 'itemType': 'string' },
      maxResults: 'number',
      nextToken: 'string',
      officeSiteId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.endUserId)) {
      $dara.Model.validateArray(this.endUserId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVirtualMFADevicesResponseBody extends $dara.Model {
  /**
   * @remarks
   * A pagination token. It can be used in the next request to retrieve a new page of results.If NextToken is empty, no next page exists.
   * 
   * @example
   * AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL23as
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * FB550AAB-FB36-4A91-93F6-F4374AF65403
   */
  requestId?: string;
  /**
   * @remarks
   * Details of the virtual MFA devices.
   */
  virtualMFADevices?: DescribeVirtualMFADevicesResponseBodyVirtualMFADevices[];
  static names(): { [key: string]: string } {
    return {
      nextToken: 'NextToken',
      requestId: 'RequestId',
      virtualMFADevices: 'VirtualMFADevices',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nextToken: 'string',
      requestId: 'string',
      virtualMFADevices: { 'type': 'array', 'itemType': DescribeVirtualMFADevicesResponseBodyVirtualMFADevices },
    };
  }

  validate() {
    if(Array.isArray(this.virtualMFADevices)) {
      $dara.Model.validateArray(this.virtualMFADevices);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVirtualMFADevicesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeVirtualMFADevicesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeVirtualMFADevicesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeZonesRequest extends $dara.Model {
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The type of the zone. Default value: `AvailabilityZone`. This value indicates Alibaba Cloud zones.
   * 
   * @example
   * AvailabilityZone
   */
  zoneType?: string;
  static names(): { [key: string]: string } {
    return {
      regionId: 'RegionId',
      zoneType: 'ZoneType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
      zoneType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeZonesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * Details of zones.
   */
  zones?: DescribeZonesResponseBodyZones[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      zones: 'Zones',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      zones: { 'type': 'array', 'itemType': DescribeZonesResponseBodyZones },
    };
  }

  validate() {
    if(Array.isArray(this.zones)) {
      $dara.Model.validateArray(this.zones);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeZonesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeZonesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeZonesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DetachCenRequest extends $dara.Model {
  /**
   * @remarks
   * The office network ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      officeSiteId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DetachCenResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DetachCenResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DetachCenResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DetachCenResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DetachEndUserRequest extends $dara.Model {
  /**
   * @remarks
   * The address of the Active Directory (AD) office network.
   * 
   * @example
   * xn--0zw****
   */
  adDomain?: string;
  /**
   * @remarks
   * The type of the client.
   * 
   * Valid values:
   * 
   * *   1: hardware client.
   * 
   * This parameter is required.
   * 
   * @example
   * 2
   */
  clientType?: string;
  /**
   * @remarks
   * The serial number (SN) of the hardware client.
   * 
   * This parameter is required.
   * 
   * @example
   * F9E52EDCCB2B****
   */
  deviceId?: string;
  /**
   * @remarks
   * The ID of the convenient office network.
   * 
   * @example
   * cn-hangzhou+dir-jedbpr4sl9l37****
   */
  directoryId?: string;
  /**
   * @remarks
   * The ID of the user that you want to unbind from the hardware client.
   * 
   * This parameter is required.
   * 
   * @example
   * moli
   */
  endUserId?: string;
  /**
   * @remarks
   * The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.
   * 
   * @example
   * cn-shanghai
   */
  region?: string;
  static names(): { [key: string]: string } {
    return {
      adDomain: 'AdDomain',
      clientType: 'ClientType',
      deviceId: 'DeviceId',
      directoryId: 'DirectoryId',
      endUserId: 'EndUserId',
      region: 'Region',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adDomain: 'string',
      clientType: 'string',
      deviceId: 'string',
      directoryId: 'string',
      endUserId: 'string',
      region: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DetachEndUserResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DetachEndUserResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DetachEndUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DetachEndUserResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableDesktopsInGroupRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the desktop group.
   * 
   * This parameter is required.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The IDs of cloud desktops.
   * 
   * This parameter is required.
   */
  desktopIds?: string[];
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      desktopIds: 'DesktopIds',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      desktopIds: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopIds)) {
      $dara.Model.validateArray(this.desktopIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableDesktopsInGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 34FB4D97-C0D9-5534-ABC6-90C7EBD5****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisableDesktopsInGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DisableDesktopsInGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DisableDesktopsInGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisconnectDesktopSessionsRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to perform precheck. If you perform precheck, the system does not disconnect from desktop sessions. Only the sessions that do not meet specific conditions are returned.
   * 
   * @example
   * true
   */
  preCheck?: boolean;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The session details.
   * 
   * This parameter is required.
   */
  sessions?: DisconnectDesktopSessionsRequestSessions[];
  static names(): { [key: string]: string } {
    return {
      preCheck: 'PreCheck',
      regionId: 'RegionId',
      sessions: 'Sessions',
    };
  }

  static types(): { [key: string]: any } {
    return {
      preCheck: 'boolean',
      regionId: 'string',
      sessions: { 'type': 'array', 'itemType': DisconnectDesktopSessionsRequestSessions },
    };
  }

  validate() {
    if(Array.isArray(this.sessions)) {
      $dara.Model.validateArray(this.sessions);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisconnectDesktopSessionsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The list of invalid sessions.
   */
  invalidSessions?: DisconnectDesktopSessionsResponseBodyInvalidSessions[];
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 2507CFA8-FEAB-5208-98F5-5E028C50XXXX
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      invalidSessions: 'InvalidSessions',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      invalidSessions: { 'type': 'array', 'itemType': DisconnectDesktopSessionsResponseBodyInvalidSessions },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.invalidSessions)) {
      $dara.Model.validateArray(this.invalidSessions);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DisconnectDesktopSessionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DisconnectDesktopSessionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DisconnectDesktopSessionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DissociateNetworkPackageRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the premium bandwidth plan. You can call the [DescribeNetworkPackages](https://help.aliyun.com/document_detail/216079.html) operation to obtain the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * np-*********
   */
  networkPackageId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      networkPackageId: 'NetworkPackageId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      networkPackageId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DissociateNetworkPackageResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DissociateNetworkPackageResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DissociateNetworkPackageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DissociateNetworkPackageResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadCdsFileRequest extends $dara.Model {
  /**
   * @example
   * cn-hangzhou+cds-643267****
   */
  cdsId?: string;
  /**
   * @example
   * user****
   */
  endUserId?: string;
  /**
   * @example
   * 63f3257b68b018170b194d87b875512d108f****
   */
  fileId?: string;
  /**
   * @example
   * cg-i1ruuudp92qpj****
   */
  groupId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      fileId: 'FileId',
      groupId: 'GroupId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: 'string',
      fileId: 'string',
      groupId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadCdsFileResponseBody extends $dara.Model {
  downloadFileModel?: DownloadCdsFileResponseBodyDownloadFileModel;
  /**
   * @example
   * success
   */
  message?: string;
  /**
   * @example
   * E3ED9519-DD73-5C86-9C0A-43C9281C****
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      downloadFileModel: 'DownloadFileModel',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downloadFileModel: DownloadCdsFileResponseBodyDownloadFileModel,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.downloadFileModel && typeof (this.downloadFileModel as any).validate === 'function') {
      (this.downloadFileModel as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadCdsFileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DownloadCdsFileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DownloadCdsFileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportClientEventsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud desktop.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string;
  /**
   * @remarks
   * The name of the cloud desktop.
   * 
   * @example
   * testName
   */
  desktopName?: string;
  /**
   * @remarks
   * The end of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.
   * 
   * If you do not specify a value for this parameter, the current time is used.
   * 
   * @example
   * 2022-03-23T07:11:01Z
   */
  endTime?: string;
  /**
   * @remarks
   * The ID of the endpoint user.
   * 
   * @example
   * user01
   */
  endUserId?: string;
  /**
   * @remarks
   * The type of event that you want to query. Valid values:
   * 
   * *   DESKTOP_CONNECT: The desktop session is established.
   * *   DESKTOP_DISCONNECT: The desktop session is disconnected.
   * *   DESKTOP_REBOOT: The cloud desktop is restarted.
   * *   CLIENT_AD_LOGIN: The AD user logs on to the client.
   * *   GET_CONNECTION_TICKET: The request to connect to the cloud desktop is sent.
   * *   DESKTOP_START: The cloud desktop is started.
   * *   DESKTOP_STOP: The cloud desktop is stopped.
   * 
   * If you do not specify a value for this parameter, events of all types are queried.
   * 
   * @example
   * CLIENT_LOGIN
   */
  eventType?: string;
  /**
   * @remarks
   * The types of event.
   */
  eventTypes?: string[];
  /**
   * @remarks
   * The language in which the cloud desktop is displayed in the console UI. You can export the list of cloud desktops in the specified language. Valid values:
   * 
   * *   `zh-CN`: Simplified Chinese
   * *   `en-GB`: English (United Kingdom)
   * 
   * Default value: `zh-CN`.
   * 
   * @example
   * zh-CN
   */
  langType?: string;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * *   Maximum value: 5000.
   * *   Default value: 5000.
   * 
   * @example
   * 50
   */
  maxResults?: number;
  /**
   * @remarks
   * The ID of the workspace.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The name of the workspace.
   * 
   * @example
   * test
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The beginning of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.
   * 
   * If you do not specify a value for this parameter, all events that occurred before the point in time that you specify for `EndTime` are queried.
   * 
   * @example
   * 2022-03-23T04:10:21Z
   */
  startTime?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      endTime: 'EndTime',
      endUserId: 'EndUserId',
      eventType: 'EventType',
      eventTypes: 'EventTypes',
      langType: 'LangType',
      maxResults: 'MaxResults',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      regionId: 'RegionId',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      desktopName: 'string',
      endTime: 'string',
      endUserId: 'string',
      eventType: 'string',
      eventTypes: { 'type': 'array', 'itemType': 'string' },
      langType: 'string',
      maxResults: 'number',
      officeSiteId: 'string',
      officeSiteName: 'string',
      regionId: 'string',
      startTime: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.eventTypes)) {
      $dara.Model.validateArray(this.eventTypes);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportClientEventsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * The download address from which you can export desktop groups.
   * 
   * @example
   * https://cn-shanghai-servicemanager.oss-cn-shanghai.aliyuncs.com/A0_CLIENT_EVENT/EDS_Events%20List_20220519234611_w5HuD83KGs.csv?Expires=1652975773&OSSAccessKeyId=LTYL****8tso&Signature=4erMG*********k%3D
   */
  url?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      url: 'Url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      url: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportClientEventsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExportClientEventsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExportClientEventsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportDesktopGroupInfoRequest extends $dara.Model {
  /**
   * @remarks
   * The billing method of the cloud computer pool.
   * 
   * Valid values:
   * 
   * *   PostPaid: pay-as-you-go.
   * 
   * *   PrePaid: subscription.
   * 
   * @example
   * PrePaid
   */
  chargeType?: string;
  /**
   * @remarks
   * The IDs of the cloud computer pools.
   */
  desktopGroupId?: string[];
  /**
   * @remarks
   * The name of the cloud computer pool.
   * 
   * @example
   * test
   */
  desktopGroupName?: string;
  /**
   * @remarks
   * The authorized user IDs of cloud computer pools.
   */
  endUserId?: string[];
  /**
   * @remarks
   * The time when the subscription cloud computer pool expires.
   * 
   * @example
   * 2022-12-31T15:59Z
   */
  expiredTime?: string;
  /**
   * @remarks
   * The language of the response.
   * 
   * @example
   * zh-CN
   */
  langType?: string;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * Maximum value: 100.
   * 
   * Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The token that determines the start point of the next query. If this parameter is left empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the office network to which the cloud computer pool belongs.
   * 
   * @example
   * cn-hangzhou+dir-467671****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The ID of the policy that is associated with the cloud computer pool.
   * 
   * @example
   * pg-53iyi2aar0nd6****
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The tags attached to the cloud computer pool. You can specify 1 to 20 tags.
   */
  tag?: ExportDesktopGroupInfoRequestTag[];
  static names(): { [key: string]: string } {
    return {
      chargeType: 'ChargeType',
      desktopGroupId: 'DesktopGroupId',
      desktopGroupName: 'DesktopGroupName',
      endUserId: 'EndUserId',
      expiredTime: 'ExpiredTime',
      langType: 'LangType',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      officeSiteId: 'OfficeSiteId',
      policyGroupId: 'PolicyGroupId',
      regionId: 'RegionId',
      tag: 'Tag',
    };
  }

  static types(): { [key: string]: any } {
    return {
      chargeType: 'string',
      desktopGroupId: { 'type': 'array', 'itemType': 'string' },
      desktopGroupName: 'string',
      endUserId: { 'type': 'array', 'itemType': 'string' },
      expiredTime: 'string',
      langType: 'string',
      maxResults: 'number',
      nextToken: 'string',
      officeSiteId: 'string',
      policyGroupId: 'string',
      regionId: 'string',
      tag: { 'type': 'array', 'itemType': ExportDesktopGroupInfoRequestTag },
    };
  }

  validate() {
    if(Array.isArray(this.desktopGroupId)) {
      $dara.Model.validateArray(this.desktopGroupId);
    }
    if(Array.isArray(this.endUserId)) {
      $dara.Model.validateArray(this.endUserId);
    }
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportDesktopGroupInfoResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 24E05D3E-08F4-551E-B1F0-F6D84EE0BCCC
   */
  requestId?: string;
  /**
   * @remarks
   * The URL from which you can download the exported cloud computer pools. The details of the cloud computer pools include:
   * 
   * *   IDs and names of the cloud computer pools
   * *   IDs and names of the office networks
   * *   Cloud computer pool templates
   * *   Number of CPU cores and memory size
   * *   System disks and data disks
   * *   Names of security policies
   * *   Number of current authorized users
   * *   Billing methods
   * *   The time when the cloud computer pools were created
   * *   The time when the cloud computer pools expire
   * 
   * @example
   * https://cn-hangzhou-servicemanager.oss-cn-hangzhou.aliyuncs.com/A0_DESKTOP/EDS_CloudDesktopGroups_202203********_xBjqdCT***.xlsx?*********
   */
  url?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      url: 'Url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      url: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportDesktopGroupInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExportDesktopGroupInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExportDesktopGroupInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportDesktopListInfoRequest extends $dara.Model {
  /**
   * @remarks
   * The billing method of the cloud computer.
   * 
   * Default value: Postpaid. Valid values:
   * 
   * *   Postpaid: pay-as-you-go
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PrePaid: subscription
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * PostPaid
   */
  chargeType?: string;
  /**
   * @remarks
   * The IDs of the cloud computers. You can specify 1 to 100 IDs.
   */
  desktopId?: string[];
  /**
   * @remarks
   * The name of the cloud computer.
   * 
   * @example
   * testName
   */
  desktopName?: string;
  /**
   * @remarks
   * The status of the cloud computers.
   * 
   * Valid values:
   * 
   * *   Stopped
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Starting
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Rebuilding
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Running
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Stopping
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Expired
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Deleted
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Pending
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Running
   */
  desktopStatus?: string;
  /**
   * @remarks
   * The IDs of the end users of the cloud computer. You can specify 1 to 100 IDs.
   * 
   * >  During a specific period of time, only one user can connect to and use the cloud computer.
   */
  endUserId?: string[];
  /**
   * @remarks
   * The time when a subscription cloud computer expires.
   * 
   * @example
   * 2022-12-31T15:59Z
   */
  expiredTime?: string;
  /**
   * @remarks
   * The ID of the cloud computer pool to which the cloud computers belong.
   * 
   * @example
   * dg-boyczi8enfyc5***
   */
  groupId?: string;
  /**
   * @remarks
   * The language in which the cloud computer is displayed in the console UI. You can export the list of cloud computers in the specified language.
   * 
   * Default value: zh-CN. Valid values:
   * 
   * *   zh-CN: Simplified Chinese
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   en-GB: British English
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * `zh-CN`
   */
  langType?: string;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * Maximum value: 100.
   * 
   * Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The token that is used for the next query. If this parameter is empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The office network ID.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The ID of the policy that is attached to the cloud computer.
   * 
   * @example
   * system-all-enabled-policy
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The tags that are added to the cloud computer. A tag is a key-value pair that consists of a tag key and a tag value. Tags are used to identify resources. You can use tags to manage cloud computers by group. This facilitates search and batch operations. For more information, see [Use tags to manage cloud computers](https://help.aliyun.com/document_detail/203781.html).
   */
  tag?: ExportDesktopListInfoRequestTag[];
  /**
   * @remarks
   * The username of the end user who is using the cloud computer.
   * 
   * @example
   * alice
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      chargeType: 'ChargeType',
      desktopId: 'DesktopId',
      desktopName: 'DesktopName',
      desktopStatus: 'DesktopStatus',
      endUserId: 'EndUserId',
      expiredTime: 'ExpiredTime',
      groupId: 'GroupId',
      langType: 'LangType',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      officeSiteId: 'OfficeSiteId',
      policyGroupId: 'PolicyGroupId',
      regionId: 'RegionId',
      tag: 'Tag',
      userName: 'UserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      chargeType: 'string',
      desktopId: { 'type': 'array', 'itemType': 'string' },
      desktopName: 'string',
      desktopStatus: 'string',
      endUserId: { 'type': 'array', 'itemType': 'string' },
      expiredTime: 'string',
      groupId: 'string',
      langType: 'string',
      maxResults: 'number',
      nextToken: 'string',
      officeSiteId: 'string',
      policyGroupId: 'string',
      regionId: 'string',
      tag: { 'type': 'array', 'itemType': ExportDesktopListInfoRequestTag },
      userName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    if(Array.isArray(this.endUserId)) {
      $dara.Model.validateArray(this.endUserId);
    }
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportDesktopListInfoResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * The URL of the exported file of the cloud computer list.
   * 
   * @example
   * https://cn-hangzhou-servicemanager.oss-cn-hangzhou.aliyuncs.com/A0_DESKTOP/EDS_CloudDesktops%20List_2022**********_w3fq******.csv?**********
   */
  url?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      url: 'Url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      url: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportDesktopListInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExportDesktopListInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExportDesktopListInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncTaskRequest extends $dara.Model {
  /**
   * @remarks
   * The asynchronous task ID. This parameter is not returned if you copy files. This parameter is returned if you copy folders in the backend in an asynchronous manner. You can call the GetAsyncTask operation to obtain the ID and information about an asynchronous task.
   * 
   * This parameter is required.
   * 
   * @example
   * 81a8a07a-aec4-4dd5-80da-ae69e482****
   */
  asyncTaskId?: string;
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-shanghai+cds-135515****
   */
  cdsId?: string;
  static names(): { [key: string]: string } {
    return {
      asyncTaskId: 'AsyncTaskId',
      cdsId: 'CdsId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncTaskId: 'string',
      cdsId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncTaskResponseBody extends $dara.Model {
  /**
   * @remarks
   * The operation result. If the request was successful, a success message is returned. If the request failed, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * The data information.
   */
  data?: GetAsyncTaskResponseBodyData;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * @example
   * true
   */
  success?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetAsyncTaskResponseBodyData,
      requestId: 'string',
      success: 'string',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsyncTaskResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAsyncTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAsyncTaskResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetConnectionTicketRequest extends $dara.Model {
  /**
   * @remarks
   * The command that you want to run to configure a custom application in user mode. After you obtain the credential, the application is automatically started. Parameter description in the command:
   * 
   * *   appPath: the path of the application startup file. Example: `"C:\\\\Program Files (x86)\\\\000\\\\000.exe"`. Use double slashes (\\\\\\) as the delimiter. Type of the parameter value: string.
   * *   appParameter: the startup arguments of the application. Example: `"meetingid 000 meetingname aaa"`. Separate multiple arguments with spaces. Type of the parameter value: string.
   * 
   * @example
   * {
   *       "startApplication": {
   *             "startApplicationList": [
   *                   {
   *                         "sessionName": "",
   *                         "appList": [
   *                               {
   *                                     "appPath": "C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe",
   *                                     "appParameter": "www.example.com www.example1.com"
   *                               }
   *                         ]
   *                   }
   *             ]
   *       }
   * }
   */
  commandContent?: string;
  /**
   * @remarks
   * The ID of the cloud computer for which you want to generate a connection credential. This parameter is required.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string;
  /**
   * @remarks
   * The ID of the end user of the cloud computer. The end user must be the current end user of the cloud computer.
   * 
   * @example
   * Alice
   */
  endUserId?: string;
  ownerId?: number;
  /**
   * @remarks
   * The password of the current end user of the cloud computer.
   * 
   * @example
   * Ab123456
   */
  password?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  resourceOwnerAccount?: string;
  resourceOwnerId?: number;
  /**
   * @remarks
   * The ID of the cloud computer connection task.
   * 
   * @example
   * 2afbad19-778a-4fc5-9674-1f19c63862da
   */
  taskId?: string;
  /**
   * @remarks
   * The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About** on the client logon page to view the identifier of the client.
   * 
   * @example
   * 28c80e90-f71e-4c23-93d6-1225329cf949
   */
  uuid?: string;
  static names(): { [key: string]: string } {
    return {
      commandContent: 'CommandContent',
      desktopId: 'DesktopId',
      endUserId: 'EndUserId',
      ownerId: 'OwnerId',
      password: 'Password',
      regionId: 'RegionId',
      resourceOwnerAccount: 'ResourceOwnerAccount',
      resourceOwnerId: 'ResourceOwnerId',
      taskId: 'TaskId',
      uuid: 'Uuid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commandContent: 'string',
      desktopId: 'string',
      endUserId: 'string',
      ownerId: 'number',
      password: 'string',
      regionId: 'string',
      resourceOwnerAccount: 'string',
      resourceOwnerId: 'number',
      taskId: 'string',
      uuid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetConnectionTicketResponseBody extends $dara.Model {
  desktopId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  taskCode?: string;
  /**
   * @remarks
   * The ID of the cloud computer connection task.
   * 
   * @example
   * 2afbad19-778a-4fc5-9674-1f19c638****
   */
  taskId?: string;
  taskMessage?: string;
  /**
   * @remarks
   * The task status.
   * 
   * Valid values:
   * 
   * *   FAILED: The credential fails to be obtained.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   RUNNING: The credential is being obtained.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   FINISHED: The credential is obtained.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * FINISHED
   */
  taskStatus?: string;
  /**
   * @remarks
   * The credential that is returned to connect to the cloud computer. Before you use the credential, you must Base64 decode the content of the credential, save the credential as an xxx.ica file, and then open the file. Python sample code:
   * 
   *     import base64
   *     response = {
   *         "Ticket": "W0VuY29kaW5nXQ0KSW5wdXRFbmNvZGluZz1V********",
   *         "RequestId": "1CBAFFAB-B697-4049-A9B1-67E1FC5F****",
   *     }
   *     f = open (\\"xxx.ica\\", \\"w\\")
   *     out = base64.b64decode(response[\\"Ticket\\"])
   *     f.write(out)
   *     f.close()
   * 
   * @example
   * W0VuY29kaW5nXQ0KSW5wdXRFbmNvZGluZz1V********
   */
  ticket?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      requestId: 'RequestId',
      taskCode: 'TaskCode',
      taskId: 'TaskId',
      taskMessage: 'TaskMessage',
      taskStatus: 'TaskStatus',
      ticket: 'Ticket',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      requestId: 'string',
      taskCode: 'string',
      taskId: 'string',
      taskMessage: 'string',
      taskStatus: 'string',
      ticket: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetConnectionTicketResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetConnectionTicketResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetConnectionTicketResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetCoordinateTicketRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the stream collaboration. You can obtain the value of this parameter based on the value of `Coid` that is returned by the `ApplyCoordinationForMonitoring` operation.
   * 
   * This parameter is required.
   * 
   * @example
   * co-0sot77uale3****
   */
  coId?: string;
  /**
   * @remarks
   * The name of the convenience user account. If you initiate the request as an administrator, you do not need to specify this parameter.
   * 
   * @example
   * Alice
   */
  endUserId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/436773.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The ID of the cloud computer connection task. The first time you initiate the request, you do not need to specify the ID of the cloud computer connection task. If no ticket is returned after you initiate the first request, you must specify the value of taskId that is returned for the first request in the subsequent request.
   * 
   * @example
   * 39cc15e5-6998-4b9f-9b2c-7a4cc3e2****
   */
  taskId?: string;
  /**
   * @remarks
   * The type of the user.
   * 
   * Set the value to TENANT_ADMIN.
   * 
   * *   The value of
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     TENANT_ADMIN
   * 
   *     <!-- -->
   * 
   *     specifies an administrator.
   * 
   * This parameter is required.
   * 
   * @example
   * TENANT_ADMIN
   */
  userType?: string;
  static names(): { [key: string]: string } {
    return {
      coId: 'CoId',
      endUserId: 'EndUserId',
      regionId: 'RegionId',
      taskId: 'TaskId',
      userType: 'UserType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      coId: 'string',
      endUserId: 'string',
      regionId: 'string',
      taskId: 'string',
      userType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetCoordinateTicketResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the stream collaboration.
   * 
   * @example
   * co-0sot77uale3****
   */
  coId?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * The ID of the cloud computer connection task.
   * 
   * @example
   * 39cc15e5-6998-4b9f-9b2c-7a4cc3e2****
   */
  taskId?: string;
  /**
   * @remarks
   * The task status.
   * 
   * Possible values:
   * 
   * *   Finished
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Failed
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Running
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Finished
   */
  taskStatus?: string;
  /**
   * @remarks
   * The credentials of the stream collaboration.
   * 
   * @example
   * W0VuY29kaW5nXQ0KSW5wdXRFbmNvZGluZz1V********
   */
  ticket?: string;
  static names(): { [key: string]: string } {
    return {
      coId: 'CoId',
      requestId: 'RequestId',
      taskId: 'TaskId',
      taskStatus: 'TaskStatus',
      ticket: 'Ticket',
    };
  }

  static types(): { [key: string]: any } {
    return {
      coId: 'string',
      requestId: 'string',
      taskId: 'string',
      taskStatus: 'string',
      ticket: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetCoordinateTicketResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetCoordinateTicketResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetCoordinateTicketResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDesktopGroupDetailRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * This parameter is required.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDesktopGroupDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The information about the cloud computer pool.
   */
  desktops?: GetDesktopGroupDetailResponseBodyDesktops;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1B5268CE-5EB3-545F-9F38-A8BCF710****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      desktops: 'Desktops',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktops: GetDesktopGroupDetailResponseBodyDesktops,
      requestId: 'string',
    };
  }

  validate() {
    if(this.desktops && typeof (this.desktops as any).validate === 'function') {
      (this.desktops as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetDesktopGroupDetailResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetDesktopGroupDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetDesktopGroupDetailResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOfficeSiteSsoStatusRequest extends $dara.Model {
  /**
   * @remarks
   * The workspace ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      officeSiteId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOfficeSiteSsoStatusResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether SSO is enabled.
   * 
   * @example
   * false
   */
  ssoStatus?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      ssoStatus: 'SsoStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      ssoStatus: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetOfficeSiteSsoStatusResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetOfficeSiteSsoStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetOfficeSiteSsoStatusResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSpMetadataRequest extends $dara.Model {
  /**
   * @remarks
   * The workspace ID. This parameter is the same as `OfficeSiteId`. We recommend that you use `OfficeSiteId` to replace `DirectoryId`. You can specify only `DirectoryId` or `OfficeSiteId`.
   * 
   * @example
   * cn-hangzhou+dir-400695****
   */
  directoryId?: string;
  /**
   * @remarks
   * The workspace ID.
   * 
   * @example
   * cn-hangzhou+dir-400695****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      directoryId: 'DirectoryId',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      directoryId: 'string',
      officeSiteId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSpMetadataResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * The metadata of the SP.
   */
  spMetadata?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      spMetadata: 'SpMetadata',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      spMetadata: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSpMetadataResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetSpMetadataResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetSpMetadataResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HibernateDesktopsRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud desktops. You can specify 1 to 20 cloud desktop IDs.
   * 
   * This parameter is required.
   */
  desktopId?: string[];
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HibernateDesktopsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 101AE027-8299-5E6E-A782-6C91C962****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class HibernateDesktopsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: HibernateDesktopsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: HibernateDesktopsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListCdsFilesRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-320357****
   */
  cdsId?: string;
  /**
   * @remarks
   * The ID of the user to whom the cloud disk is allocated.
   * 
   * @example
   * testUser
   */
  endUserId?: string;
  /**
   * @remarks
   * The IDs of the files to be queried.
   */
  fileIds?: string[];
  groupId?: string;
  /**
   * @remarks
   * The number of entries to return on each page. Default value: 100.
   * 
   * @example
   * 100
   */
  maxResults?: number;
  /**
   * @remarks
   * The token used for the next query. If this parameter is empty, all results are returned.
   * 
   * @example
   * WyI2Mzg4MjAwMzFhNGQwZWVmN2I3MjRkZjZhZjAyMWU4YzY1MmRjZmUyIiwibiIsIm4iLDEsLTEsMTY2OTg2NTQ3NTMxMiwiNjM4ODIwMDNlNTU0YmZiZjFkYTk0MmEyYTZhMjEyZDkxODdjMjAy****
   */
  nextToken?: string;
  /**
   * @remarks
   * The sorting method of the files.
   * 
   * Valid values:
   * 
   * *   CreateTimeDesc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in descending order based on the time when they are created.
   * 
   *     <!-- -->
   * 
   * *   ModifiedTimeAsc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in ascending order based on the time when they are modified.
   * 
   *     <!-- -->
   * 
   * *   NameDesc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in descending order based on their names.
   * 
   *     <!-- -->
   * 
   * *   SizeAsc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in ascending order based on their sizes.
   * 
   *     <!-- -->
   * 
   * *   ModifiedTimeDesc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in descending order based on the time when they are modified.
   * 
   *     <!-- -->
   * 
   * *   CreateTimeAsc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in ascending order based on the time when they are created.
   * 
   *     <!-- -->
   * 
   * *   SizeDesc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in descending order based on their sizes.
   * 
   *     <!-- -->
   * 
   * *   NameAsc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in ascending order based on their names.
   * 
   *     <!-- -->
   * 
   * @example
   * CreateTimeDesc
   */
  orderType?: string;
  /**
   * @remarks
   * The ID of the parent file.
   * 
   * @example
   * 63636837e47e5a24a8a940218bef395c210e****
   */
  parentFileId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The file status.
   * 
   * Valid values:
   * 
   * *   available
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     returns only normal files.
   * 
   *     <!-- -->
   * 
   * *   uploading
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     returns only the files that are being uploaded.
   * 
   *     <!-- -->
   * 
   * @example
   * available
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      fileIds: 'FileIds',
      groupId: 'GroupId',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      orderType: 'OrderType',
      parentFileId: 'ParentFileId',
      regionId: 'RegionId',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: 'string',
      fileIds: { 'type': 'array', 'itemType': 'string' },
      groupId: 'string',
      maxResults: 'number',
      nextToken: 'string',
      orderType: 'string',
      parentFileId: 'string',
      regionId: 'string',
      status: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.fileIds)) {
      $dara.Model.validateArray(this.fileIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListCdsFilesShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-320357****
   */
  cdsId?: string;
  /**
   * @remarks
   * The ID of the user to whom the cloud disk is allocated.
   * 
   * @example
   * testUser
   */
  endUserId?: string;
  /**
   * @remarks
   * The IDs of the files to be queried.
   */
  fileIdsShrink?: string;
  groupId?: string;
  /**
   * @remarks
   * The number of entries to return on each page. Default value: 100.
   * 
   * @example
   * 100
   */
  maxResults?: number;
  /**
   * @remarks
   * The token used for the next query. If this parameter is empty, all results are returned.
   * 
   * @example
   * WyI2Mzg4MjAwMzFhNGQwZWVmN2I3MjRkZjZhZjAyMWU4YzY1MmRjZmUyIiwibiIsIm4iLDEsLTEsMTY2OTg2NTQ3NTMxMiwiNjM4ODIwMDNlNTU0YmZiZjFkYTk0MmEyYTZhMjEyZDkxODdjMjAy****
   */
  nextToken?: string;
  /**
   * @remarks
   * The sorting method of the files.
   * 
   * Valid values:
   * 
   * *   CreateTimeDesc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in descending order based on the time when they are created.
   * 
   *     <!-- -->
   * 
   * *   ModifiedTimeAsc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in ascending order based on the time when they are modified.
   * 
   *     <!-- -->
   * 
   * *   NameDesc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in descending order based on their names.
   * 
   *     <!-- -->
   * 
   * *   SizeAsc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in ascending order based on their sizes.
   * 
   *     <!-- -->
   * 
   * *   ModifiedTimeDesc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in descending order based on the time when they are modified.
   * 
   *     <!-- -->
   * 
   * *   CreateTimeAsc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in ascending order based on the time when they are created.
   * 
   *     <!-- -->
   * 
   * *   SizeDesc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in descending order based on their sizes.
   * 
   *     <!-- -->
   * 
   * *   NameAsc
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     sorts files in ascending order based on their names.
   * 
   *     <!-- -->
   * 
   * @example
   * CreateTimeDesc
   */
  orderType?: string;
  /**
   * @remarks
   * The ID of the parent file.
   * 
   * @example
   * 63636837e47e5a24a8a940218bef395c210e****
   */
  parentFileId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The file status.
   * 
   * Valid values:
   * 
   * *   available
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     returns only normal files.
   * 
   *     <!-- -->
   * 
   * *   uploading
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     returns only the files that are being uploaded.
   * 
   *     <!-- -->
   * 
   * @example
   * available
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      fileIdsShrink: 'FileIds',
      groupId: 'GroupId',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      orderType: 'OrderType',
      parentFileId: 'ParentFileId',
      regionId: 'RegionId',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: 'string',
      fileIdsShrink: 'string',
      groupId: 'string',
      maxResults: 'number',
      nextToken: 'string',
      orderType: 'string',
      parentFileId: 'string',
      regionId: 'string',
      status: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListCdsFilesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The result of the operation. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * The total number of entries.
   * 
   * @example
   * 0
   */
  count?: string;
  /**
   * @remarks
   * The files.
   */
  fileModels?: ListCdsFilesResponseBodyFileModels[];
  /**
   * @remarks
   * The error message returned if the request failed. This parameter is empty if the value of Code is success.
   * 
   * @example
   * success
   */
  message?: string;
  /**
   * @remarks
   * The token used for the next query. If this parameter is empty, all results have been returned.
   * 
   * @example
   * WyI2MzhmMjA2ZTFmZGZlZGVjZDk3OTRlNzVhZmIwMDFiZmM5NWQ3YTgwIiwibiIsIm4iLDEsLTEsMTY3MDMyNDMzNTAzMSwiNjM4ZjIwNmZjNDFkMzIwOTZmZWU0NGYxODkwY2I5ZjI0Mjg0NzM2****
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID. An ID is the unique identifier of the request.
   * 
   * @example
   * 40D86754-20FD-53DC-A9B8-25F7FECC****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   <!-- -->
   * 
   *     false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      count: 'Count',
      fileModels: 'FileModels',
      message: 'Message',
      nextToken: 'NextToken',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      count: 'string',
      fileModels: { 'type': 'array', 'itemType': ListCdsFilesResponseBodyFileModels },
      message: 'string',
      nextToken: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.fileModels)) {
      $dara.Model.validateArray(this.fileModels);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListCdsFilesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListCdsFilesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListCdsFilesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDirectoryUsersRequest extends $dara.Model {
  assignedInfo?: string;
  /**
   * @remarks
   * The ID of the AD directory.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-jedbpr4sl9l37****
   */
  directoryId?: string;
  /**
   * @remarks
   * The query string for fuzzy match. If you specify this parameter, the system returns all results that contain the string.
   * 
   * @example
   * alice
   */
  filter?: string;
  includeAssignedUser?: boolean;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * Valid values: 1 to 100.
   * 
   * Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The token used to start the next query. If the value of this parameter is empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The organizational unit (OU) in the specified AD domain.
   * 
   * @example
   * example.com/Domain Controllers
   */
  OUPath?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  sortType?: string;
  static names(): { [key: string]: string } {
    return {
      assignedInfo: 'AssignedInfo',
      directoryId: 'DirectoryId',
      filter: 'Filter',
      includeAssignedUser: 'IncludeAssignedUser',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      OUPath: 'OUPath',
      regionId: 'RegionId',
      sortType: 'SortType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      assignedInfo: 'string',
      directoryId: 'string',
      filter: 'string',
      includeAssignedUser: 'boolean',
      maxResults: 'number',
      nextToken: 'string',
      OUPath: 'string',
      regionId: 'string',
      sortType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDirectoryUsersResponseBody extends $dara.Model {
  /**
   * @remarks
   * The token used to start the next query. If the value of this parameter is empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * The names of users corresponding to the AD directory. If the AD directory contains only Administrator and Guest, an empty Users array is returned.
   */
  users?: ListDirectoryUsersResponseBodyUsers[];
  static names(): { [key: string]: string } {
    return {
      nextToken: 'NextToken',
      requestId: 'RequestId',
      users: 'Users',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nextToken: 'string',
      requestId: 'string',
      users: { 'type': 'array', 'itemType': ListDirectoryUsersResponseBodyUsers },
    };
  }

  validate() {
    if(Array.isArray(this.users)) {
      $dara.Model.validateArray(this.users);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDirectoryUsersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDirectoryUsersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDirectoryUsersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListFilePermissionRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-346063****
   */
  cdsId?: string;
  /**
   * @remarks
   * The ID of the end user who uses the cloud disk.
   * 
   * @example
   * user01
   */
  endUserId?: string;
  /**
   * @remarks
   * The ID of the shared file.
   * 
   * This parameter is required.
   * 
   * @example
   * 6333e553a133ce21e6f747cf948bb9ef95d7****
   */
  fileId?: string;
  /**
   * @remarks
   * The group ID.
   */
  groupId?: string;
  /**
   * @remarks
   * The region ID of the cloud disk. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      fileId: 'FileId',
      groupId: 'GroupId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: 'string',
      fileId: 'string',
      groupId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListFilePermissionResponseBody extends $dara.Model {
  /**
   * @remarks
   * The permissions on the shared file.
   */
  filePermissions?: FilePermissionMember[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      filePermissions: 'FilePermissions',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      filePermissions: { 'type': 'array', 'itemType': FilePermissionMember },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.filePermissions)) {
      $dara.Model.validateArray(this.filePermissions);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListFilePermissionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListFilePermissionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListFilePermissionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOfficeSiteOverviewRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to refresh the cache.
   * 
   * @example
   * false
   */
  forceRefresh?: boolean;
  /**
   * @remarks
   * The number of entries to return on each page.
   * 
   * *   Valid values: 1 to 100
   * *   Default value: 10
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The token that determines the start point of the next query. If this is your first query or no next query is to be sent, skip this parameter. If a next query is to be sent, set the parameter to the value of NextToken that is returned from the last call.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The office network IDs. You can specify IDs of 1 to 100 office networks.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string[];
  /**
   * @remarks
   * The query scope. Cloud computers in a cloud computer pool are pooled cloud computers.
   * 
   * Default values:
   * 
   * *   1 (default): queries non-pooled cloud computers in the office network.
   * *   2: queries pooled cloud computers in the office network.
   * *   3: queries all cloud computers in the office network.
   * 
   * @example
   * 1
   */
  queryRange?: number;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      forceRefresh: 'ForceRefresh',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      officeSiteId: 'OfficeSiteId',
      queryRange: 'QueryRange',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      forceRefresh: 'boolean',
      maxResults: 'number',
      nextToken: 'string',
      officeSiteId: { 'type': 'array', 'itemType': 'string' },
      queryRange: 'number',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.officeSiteId)) {
      $dara.Model.validateArray(this.officeSiteId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOfficeSiteOverviewResponseBody extends $dara.Model {
  /**
   * @remarks
   * The token that is used to start the next query. If this parameter is empty, all results are returned.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The office network information.
   */
  officeSiteOverviewResults?: ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      nextToken: 'NextToken',
      officeSiteOverviewResults: 'OfficeSiteOverviewResults',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nextToken: 'string',
      officeSiteOverviewResults: { 'type': 'array', 'itemType': ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.officeSiteOverviewResults)) {
      $dara.Model.validateArray(this.officeSiteOverviewResults);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOfficeSiteOverviewResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListOfficeSiteOverviewResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListOfficeSiteOverviewResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOfficeSiteUsersRequest extends $dara.Model {
  assignedInfo?: string;
  /**
   * @remarks
   * The query string for fuzzy query.
   * 
   * @example
   * *jin*
   */
  filter?: string;
  includeAssignedUser?: boolean;
  /**
   * @remarks
   * The number of entries per page.
   * 
   * *   Valid values: 1 to 100.
   * *   Default value: 10.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request or if no next query exists. You must specify the token that is obtained from the previous query as the value of NextToken.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The organizational unit (OU) of the specified AD domain.
   * 
   * @example
   * example.com/Domain Controllers
   */
  OUPath?: string;
  /**
   * @remarks
   * The office network ID. The office network must be of the enterprise AD account type.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  sortType?: string;
  static names(): { [key: string]: string } {
    return {
      assignedInfo: 'AssignedInfo',
      filter: 'Filter',
      includeAssignedUser: 'IncludeAssignedUser',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      OUPath: 'OUPath',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
      sortType: 'SortType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      assignedInfo: 'string',
      filter: 'string',
      includeAssignedUser: 'boolean',
      maxResults: 'number',
      nextToken: 'string',
      OUPath: 'string',
      officeSiteId: 'string',
      regionId: 'string',
      sortType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOfficeSiteUsersResponseBody extends $dara.Model {
  /**
   * @remarks
   * A pagination token. It can be used in the next request to retrieve a new page of results.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 269BDB16-2CD8-4865-84BD-11C40BC21DB0
   */
  requestId?: string;
  /**
   * @remarks
   * The usernames of AD users.\\
   * If the only Administrator and Guest users exist in the enterprise AD, an empty User array is returned.
   */
  users?: ListOfficeSiteUsersResponseBodyUsers[];
  static names(): { [key: string]: string } {
    return {
      nextToken: 'NextToken',
      requestId: 'RequestId',
      users: 'Users',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nextToken: 'string',
      requestId: 'string',
      users: { 'type': 'array', 'itemType': ListOfficeSiteUsersResponseBodyUsers },
    };
  }

  validate() {
    if(Array.isArray(this.users)) {
      $dara.Model.validateArray(this.users);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOfficeSiteUsersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListOfficeSiteUsersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListOfficeSiteUsersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagResourcesRequest extends $dara.Model {
  /**
   * @remarks
   * The number of entries per page.
   * 
   * @example
   * 10
   */
  maxResults?: number;
  /**
   * @remarks
   * The pagination token that is used in the next request to retrieve a new page of results.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The resource IDs, which are cloud computer IDs. You can specify 1 to 50 IDs.
   * 
   * @example
   * ecd-ia2zw38bi6cm7****
   */
  resourceId?: string[];
  /**
   * @remarks
   * The type of the resource.
   * 
   * Valid values:
   * 
   * * ALIYUN::GWS::INSTANCE: cloud computer.
   * 
   * This parameter is required.
   * 
   * @example
   * ALIYUN::GWS::INSTANCE
   */
  resourceType?: string;
  /**
   * @remarks
   * The tags that you want to query.
   */
  tag?: ListTagResourcesRequestTag[];
  static names(): { [key: string]: string } {
    return {
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      regionId: 'RegionId',
      resourceId: 'ResourceId',
      resourceType: 'ResourceType',
      tag: 'Tag',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxResults: 'number',
      nextToken: 'string',
      regionId: 'string',
      resourceId: { 'type': 'array', 'itemType': 'string' },
      resourceType: 'string',
      tag: { 'type': 'array', 'itemType': ListTagResourcesRequestTag },
    };
  }

  validate() {
    if(Array.isArray(this.resourceId)) {
      $dara.Model.validateArray(this.resourceId);
    }
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagResourcesResponseBody extends $dara.Model {
  /**
   * @remarks
   * A pagination token. If NextToken is empty, no next page exists.
   * 
   * @example
   * caeba0bbb2be03f84eb48b699f0a4883
   */
  nextToken?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 484256DA-D816-44D2-9D86-B6EE4D5BA78C
   */
  requestId?: string;
  /**
   * @remarks
   * The resources and their tags.
   */
  tagResources?: ListTagResourcesResponseBodyTagResources[];
  static names(): { [key: string]: string } {
    return {
      nextToken: 'NextToken',
      requestId: 'RequestId',
      tagResources: 'TagResources',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nextToken: 'string',
      requestId: 'string',
      tagResources: { 'type': 'array', 'itemType': ListTagResourcesResponseBodyTagResources },
    };
  }

  validate() {
    if(Array.isArray(this.tagResources)) {
      $dara.Model.validateArray(this.tagResources);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagResourcesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListTagResourcesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListTagResourcesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserAdOrganizationUnitsRequest extends $dara.Model {
  /**
   * @remarks
   * The string that you enter for fuzzy search.
   * 
   * @example
   * develop
   */
  filter?: string;
  /**
   * @remarks
   * The maximum number of entries to return on each page. Valid values: 1 to 500. Default value: 500.
   * 
   * @example
   * 100
   */
  maxResults?: number;
  /**
   * @remarks
   * The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request or if no next request exists. You must specify the token that is obtained from the previous query as the value of NextToken.
   * 
   * @example
   * CAAAAA==
   */
  nextToken?: string;
  /**
   * @remarks
   * The enterprise AD office network ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-485361****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      filter: 'Filter',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      filter: 'string',
      maxResults: 'number',
      nextToken: 'string',
      officeSiteId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserAdOrganizationUnitsResponseBody extends $dara.Model {
  /**
   * @remarks
   * A pagination token.
   * 
   * @example
   * CAAAAA==
   */
  nextToken?: string;
  /**
   * @remarks
   * The OUs of the AD domain.
   */
  OUNames?: ListUserAdOrganizationUnitsResponseBodyOUNames[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      nextToken: 'NextToken',
      OUNames: 'OUNames',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nextToken: 'string',
      OUNames: { 'type': 'array', 'itemType': ListUserAdOrganizationUnitsResponseBodyOUNames },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.OUNames)) {
      $dara.Model.validateArray(this.OUNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListUserAdOrganizationUnitsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListUserAdOrganizationUnitsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListUserAdOrganizationUnitsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class LockVirtualMFADeviceRequest extends $dara.Model {
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The serial number of the virtual MFA device, which is a unique identifier.
   * 
   * You can call the [DescribeVirtualMFADevices](https://help.aliyun.com/document_detail/206210.html) operation to query the serial number of the virtual MFA device bound to AD users.
   * 
   * This parameter is required.
   * 
   * @example
   * a25f297f-f2e1-4a44-bbf1-5f48a6e5****
   */
  serialNumber?: string;
  static names(): { [key: string]: string } {
    return {
      regionId: 'RegionId',
      serialNumber: 'SerialNumber',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
      serialNumber: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class LockVirtualMFADeviceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class LockVirtualMFADeviceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: LockVirtualMFADeviceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: LockVirtualMFADeviceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MigrateDesktopsRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computers. You can specify 1 to 100 IDs.
   * 
   * This parameter is required.
   */
  desktopId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-shanghai
   */
  regionId?: string;
  /**
   * @remarks
   * The ID of the destination office network.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-shenzhen+dir-388505****
   */
  targetOfficeSiteId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      regionId: 'RegionId',
      targetOfficeSiteId: 'TargetOfficeSiteId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
      targetOfficeSiteId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MigrateDesktopsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * E46DECEC-AC72-570E-958B-B52A4B****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MigrateDesktopsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: MigrateDesktopsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: MigrateDesktopsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MigrateImageProtocolRequest extends $dara.Model {
  /**
   * @remarks
   * The image IDs.
   * 
   * This parameter is required.
   */
  imageId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The protocol to which you want to update the image protocols. Set the value to ASP.
   * 
   * @example
   * ASP
   */
  targetProtocolType?: string;
  static names(): { [key: string]: string } {
    return {
      imageId: 'ImageId',
      regionId: 'RegionId',
      targetProtocolType: 'TargetProtocolType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      imageId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
      targetProtocolType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.imageId)) {
      $dara.Model.validateArray(this.imageId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MigrateImageProtocolResponseBody extends $dara.Model {
  /**
   * @remarks
   * The IDs of the images whose protocols failed to be updated.
   */
  failedIds?: string[];
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 4D4E5AF5-DF28-5FE7-85C7-9F98315B****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      failedIds: 'FailedIds',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      failedIds: { 'type': 'array', 'itemType': 'string' },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.failedIds)) {
      $dara.Model.validateArray(this.failedIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MigrateImageProtocolResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: MigrateImageProtocolResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: MigrateImageProtocolResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyADConnectorDirectoryRequest extends $dara.Model {
  /**
   * @remarks
   * The hostname of the domain controller. The hostname must comply with the naming conventions for hostnames in Windows.
   * 
   * @example
   * cnshsv21hmcdc01
   */
  adHostname?: string;
  /**
   * @remarks
   * The ID of the directory.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-gx2x1dhsmu52rd****
   */
  directoryId?: string;
  /**
   * @remarks
   * The name of the AD directory.
   * 
   * @example
   * testDirectoryName
   */
  directoryName?: string;
  /**
   * @remarks
   * The IP address of the DNS server corresponding to the enterprise AD. You can specify only one IP address. Make sure that the specified IP address is accessible in the network of the selected vSwitch.
   * 
   * @example
   * ``127.0.**.**``
   */
  dnsAddress?: string[];
  /**
   * @remarks
   * The domain name. The name must be 2 to 255 characters in length and must be in the two-part domain name format, such as `example.com`. You can register each domain name only once.
   * 
   * @example
   * example.com
   */
  domainName?: string;
  /**
   * @remarks
   * The password of the domain administrator. The username can be up to 64 characters in length.
   * 
   * @example
   * testPassword
   */
  domainPassword?: string;
  /**
   * @remarks
   * The username of the domain administrator. The username can be up to 64 characters in length.
   * 
   * @example
   * sAMAccountName
   */
  domainUserName?: string;
  /**
   * @remarks
   * Specifies whether to enable Multi-Factor Authentication (MFA). After you enable MFA, all AD users in the directory must enter a dynamic verification code generated by the virtual MFA device in addition to a correct password when they log on to a cloud computer.
   * 
   * >  When end users log on to a cloud computer for the first time, they must bind an MFA device.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   <!-- -->
   * 
   *     false (default)
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  mfaEnabled?: boolean;
  /**
   * @remarks
   * The name of the organizational unit (OU) in the AD domain. You can call the ListUserAdOrganizationUnits operation to obtain the name of the OU.
   * 
   * @example
   * example.com/Domain Controllers
   */
  OUName?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The DNS address of the existing AD subdomain.\\
   * If you specify the `SubDomainName` parameter but you do not specify this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.
   * 
   * @example
   * ``127.0.**.**``
   */
  subDomainDnsAddress?: string[];
  /**
   * @remarks
   * The domain name of the existing AD subdomain.
   * 
   * @example
   * childexample.com
   */
  subDomainName?: string;
  static names(): { [key: string]: string } {
    return {
      adHostname: 'AdHostname',
      directoryId: 'DirectoryId',
      directoryName: 'DirectoryName',
      dnsAddress: 'DnsAddress',
      domainName: 'DomainName',
      domainPassword: 'DomainPassword',
      domainUserName: 'DomainUserName',
      mfaEnabled: 'MfaEnabled',
      OUName: 'OUName',
      regionId: 'RegionId',
      subDomainDnsAddress: 'SubDomainDnsAddress',
      subDomainName: 'SubDomainName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adHostname: 'string',
      directoryId: 'string',
      directoryName: 'string',
      dnsAddress: { 'type': 'array', 'itemType': 'string' },
      domainName: 'string',
      domainPassword: 'string',
      domainUserName: 'string',
      mfaEnabled: 'boolean',
      OUName: 'string',
      regionId: 'string',
      subDomainDnsAddress: { 'type': 'array', 'itemType': 'string' },
      subDomainName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.dnsAddress)) {
      $dara.Model.validateArray(this.dnsAddress);
    }
    if(Array.isArray(this.subDomainDnsAddress)) {
      $dara.Model.validateArray(this.subDomainDnsAddress);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyADConnectorDirectoryResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyADConnectorDirectoryResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyADConnectorDirectoryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyADConnectorDirectoryResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyADConnectorOfficeSiteRequest extends $dara.Model {
  /**
   * @remarks
   * The hostname of the domain controller. The hostname must comply with the naming conventions for hostnames in Windows.
   * 
   * @example
   * beijing-ad01
   */
  adHostname?: string;
  backupDCHostname?: string;
  backupDns?: string;
  /**
   * @remarks
   * Details of the IP addresses of the Domain Name System (DNS) servers that correspond to the enterprise AD system. You can specify only one IP address.
   * 
   * @example
   * 127.0.*.*
   */
  dnsAddress?: string[];
  /**
   * @remarks
   * The domain name of the enterprise AD system. You can register each domain name only once.
   * 
   * @example
   * example.com
   */
  domainName?: string;
  /**
   * @remarks
   * The password of the domain administrator. The username can be up to 64 characters in length.
   * 
   * @example
   * testPassword
   */
  domainPassword?: string;
  /**
   * @remarks
   * The username of the domain administrator. The username can be up to 64 characters in length.
   * 
   * > Specify the value of the sAMAccountName parameter instead of the value of the userPrincipalName parameter as the username.
   * 
   * @example
   * Administrator
   */
  domainUserName?: string;
  /**
   * @remarks
   * Specifies whether to enable multi-factor authentication (MFA).
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  mfaEnabled?: boolean;
  /**
   * @remarks
   * The name of the organizational unit (OU) in the AD domain. You can call the [ListUserAdOrganizationUnits](https://help.aliyun.com/document_detail/311259.html) operation to obtain OUs.
   * 
   * @example
   * oldad.com/Domain Controllers
   */
  OUName?: string;
  /**
   * @remarks
   * The office network ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The office network name. The name must be 2 to 255 characters in length. It can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
   * 
   * @example
   * test
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The DNS address of the subdomain in the enterprise AD domain. You can specify only one DNS address. If you configure `SubDomainName` and leave this parameter empty, the value is the same as that of the enterprise AD domain.
   * 
   * @example
   * 127.0.*.*
   */
  subDomainDnsAddress?: string[];
  /**
   * @remarks
   * The name of the subdomain in the enterprise AD domain.
   * 
   * @example
   * childexample.com
   */
  subDomainName?: string;
  static names(): { [key: string]: string } {
    return {
      adHostname: 'AdHostname',
      backupDCHostname: 'BackupDCHostname',
      backupDns: 'BackupDns',
      dnsAddress: 'DnsAddress',
      domainName: 'DomainName',
      domainPassword: 'DomainPassword',
      domainUserName: 'DomainUserName',
      mfaEnabled: 'MfaEnabled',
      OUName: 'OUName',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      regionId: 'RegionId',
      subDomainDnsAddress: 'SubDomainDnsAddress',
      subDomainName: 'SubDomainName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adHostname: 'string',
      backupDCHostname: 'string',
      backupDns: 'string',
      dnsAddress: { 'type': 'array', 'itemType': 'string' },
      domainName: 'string',
      domainPassword: 'string',
      domainUserName: 'string',
      mfaEnabled: 'boolean',
      OUName: 'string',
      officeSiteId: 'string',
      officeSiteName: 'string',
      regionId: 'string',
      subDomainDnsAddress: { 'type': 'array', 'itemType': 'string' },
      subDomainName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.dnsAddress)) {
      $dara.Model.validateArray(this.dnsAddress);
    }
    if(Array.isArray(this.subDomainDnsAddress)) {
      $dara.Model.validateArray(this.subDomainDnsAddress);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyADConnectorOfficeSiteResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyADConnectorOfficeSiteResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyADConnectorOfficeSiteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyADConnectorOfficeSiteResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAclEntriesRequest extends $dara.Model {
  /**
   * @remarks
   * The Internet access control policy.
   * 
   * Valid values:
   * 
   * *   allow: allows access to the Internet.
   * 
   * *   disable: forbids access to the Internet.
   * 
   * This parameter is required.
   * 
   * @example
   * allow
   */
  policy?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The instance IDs (office network IDs or cloud computer IDs) to which the Internet access control policy is applicable.
   * 
   * This parameter is required.
   */
  sourceId?: string[];
  /**
   * @remarks
   * The granularity to which the Internet access control policy is applicable.
   * 
   * Valid values:
   * 
   * *   desktop: cloud computer granularity.
   * 
   * *   vpc: office network granularity.
   * 
   * This parameter is required.
   * 
   * @example
   * desktop
   */
  sourceType?: string;
  static names(): { [key: string]: string } {
    return {
      policy: 'Policy',
      regionId: 'RegionId',
      sourceId: 'SourceId',
      sourceType: 'SourceType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      policy: 'string',
      regionId: 'string',
      sourceId: { 'type': 'array', 'itemType': 'string' },
      sourceType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.sourceId)) {
      $dara.Model.validateArray(this.sourceId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAclEntriesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 062B1439-709A-580E-85DF-CE97A1560565
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAclEntriesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyAclEntriesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyAclEntriesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAutoSnapshotPolicyRequest extends $dara.Model {
  /**
   * @remarks
   * The CRON expression.
   * 
   * @example
   * 0 20 16 ? * 1,2,3,4,5,6,7
   */
  cronExpression?: string;
  /**
   * @remarks
   * The ID of the automatic snapshot policy.
   * 
   * This parameter is required.
   * 
   * @example
   * sp-itcmrhqt01tdo****
   */
  policyId?: string;
  /**
   * @remarks
   * The name of the automatic snapshot policy. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-). This parameter is empty by default.
   * 
   * @example
   * Automatic system snapshot
   */
  policyName?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The retention period of the automatic snapshots. Unit: days. Valid values: 1 to 180.
   * 
   * @example
   * 5
   */
  retentionDays?: number;
  static names(): { [key: string]: string } {
    return {
      cronExpression: 'CronExpression',
      policyId: 'PolicyId',
      policyName: 'PolicyName',
      regionId: 'RegionId',
      retentionDays: 'RetentionDays',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cronExpression: 'string',
      policyId: 'string',
      policyName: 'string',
      regionId: 'string',
      retentionDays: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAutoSnapshotPolicyResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 51592A88-0F2C-55E6-AD2C-2AD9C10D****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAutoSnapshotPolicyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyAutoSnapshotPolicyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyAutoSnapshotPolicyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBundleRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer template that you want to modify.
   * 
   * This parameter is required.
   * 
   * @example
   * b-2g65ljy4291vl****
   */
  bundleId?: string;
  /**
   * @remarks
   * The name of the new cloud computer template.
   * 
   * @example
   * newName
   */
  bundleName?: string;
  /**
   * @remarks
   * The description of the new cloud computer template.
   * 
   * @example
   * newDescription
   */
  description?: string;
  /**
   * @remarks
   * The new image ID. The new image must meet the following conditions:
   * 
   * *   The new image must be in the Available state.
   * *   The operating system of the new image must be the same as that of the original image.
   * *   The required disk size for the new image cannot be greater than that for the original image.
   * *   The GPU type of the new image must be the same as that of the original image.
   * 
   * @example
   * m-aea3oaww001np****
   */
  imageId?: string;
  /**
   * @remarks
   * The OS language. This parameter is available only for system images.
   * 
   * Valid values:
   * 
   * *   en-US: American English
   * *   zh-HK: Traditional Chinese (Hong Kong)
   * *   zh-CN: Simplified Chinese.
   * 
   * *   ja-JP: Japanese
   * 
   * @example
   * zh-CN
   */
  language?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      bundleId: 'BundleId',
      bundleName: 'BundleName',
      description: 'Description',
      imageId: 'ImageId',
      language: 'Language',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bundleId: 'string',
      bundleName: 'string',
      description: 'string',
      imageId: 'string',
      language: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBundleResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBundleResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyBundleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyBundleResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCdsFileRequest extends $dara.Model {
  /**
   * @remarks
   * The cloud disk ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-64326*****
   */
  cdsId?: string;
  /**
   * @remarks
   * The processing mode of files that have the same name.
   * 
   * Valid values:
   * 
   * *   refuse
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     refuses to create a file that has the same name as the file in the cloud.
   * 
   *     <!-- -->
   * 
   * *   auto_rename
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     automatically renames a file if the file has the same name as another file. By default, the current point in time is appended. Example: xxx20060102_150405.
   * 
   *     <!-- -->
   * 
   * *   ignore
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     allows files with the same name.
   * 
   *     <!-- -->
   * 
   * @example
   * ignore
   */
  conflictPolicy?: string;
  /**
   * @remarks
   * The ID of the end user who uses the cloud disk.
   * 
   * @example
   * user01
   */
  endUserId?: string;
  /**
   * @remarks
   * The file ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 6333e553a133ce21e6f747cf948bb9ef95d7****
   */
  fileId?: string;
  /**
   * @remarks
   * The file name.
   * 
   * This parameter is required.
   * 
   * @example
   * test.txt
   */
  fileName?: string;
  /**
   * @remarks
   * The group ID.
   * 
   * @example
   * cg-i1ruuudp92qpj****
   */
  groupId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      conflictPolicy: 'ConflictPolicy',
      endUserId: 'EndUserId',
      fileId: 'FileId',
      fileName: 'FileName',
      groupId: 'GroupId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      conflictPolicy: 'string',
      endUserId: 'string',
      fileId: 'string',
      fileName: 'string',
      groupId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCdsFileResponseBody extends $dara.Model {
  /**
   * @remarks
   * The modification result. The value success indicates that the modification is successful. If the modification failed, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * Specifies whether data is returned.
   * 
   * Valid values:
   * 
   * *   false: Data fails to be returned.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     : Data is returned.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  data?: string;
  /**
   * @remarks
   * The error message returned if the request failed.
   * 
   * @example
   * success
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * Valid values:
   * 
   * *   true: The request is successful.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false: The request fails.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCdsFileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyCdsFileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyCdsFileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCdsFileShareLinkRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-shanghai+cds-135515****
   */
  cdsId?: string;
  /**
   * @remarks
   * The description of the file sharing task. The description must be 0 to 1,024 characters in length.
   * 
   * @example
   * testDescription
   */
  description?: string;
  /**
   * @remarks
   * Specifies whether to prohibit the download of the files that are being shared.
   * 
   * Valid values:
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  disableDownload?: boolean;
  /**
   * @remarks
   * Specifies whether to prohibit the preview of the files that are being shared.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  disablePreview?: boolean;
  /**
   * @remarks
   * Specifies whether to prohibit the dump of the files that are being shared.
   * 
   * Valid values:
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  disableSave?: boolean;
  /**
   * @remarks
   * The number of times that the shared files are downloaded. The value of this parameter must be equal to or greater than 0.
   * 
   * @example
   * 0
   */
  downloadCount?: number;
  /**
   * @remarks
   * The limit on the number of times that the shared files can be downloaded. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.
   * 
   * @example
   * 0
   */
  downloadLimit?: number;
  /**
   * @remarks
   * The time when the file sharing link expires. The value of this parameter follows the RFC 3339 standard. Example: "2020-06-28T11:33:00.000+08:00". If this parameter is set to "", the file sharing link never expires.
   * 
   * @example
   * 2022-07-20T06:30:22.365Z
   */
  expiration?: string;
  /**
   * @remarks
   * The number of times that the shared files are previewed. The value of this parameter must be equal to or greater than 0.
   * 
   * @example
   * 0
   */
  previewCount?: number;
  /**
   * @remarks
   * The limit on the number of times that the shared files can be previewed. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.
   * 
   * @example
   * 100
   */
  previewLimit?: number;
  /**
   * @remarks
   * The number of times that the shared files are reported. The value of this parameter must be equal to or greater than 0.
   * 
   * @example
   * 0
   */
  reportCount?: number;
  /**
   * @remarks
   * The number of times that the shared files are dumped. The value of this parameter must be equal to or greater than 0.
   * 
   * @example
   * 0
   */
  saveCount?: number;
  /**
   * @remarks
   * The limit on the number of times that the shared files can be dumped. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.
   * 
   * @example
   * 100
   */
  saveLimit?: number;
  /**
   * @remarks
   * The ID of the file sharing task.
   * 
   * This parameter is required.
   * 
   * @example
   * 7JQX1Fs****
   */
  shareId?: string;
  /**
   * @remarks
   * The name of the file sharing task. If you do not configure this parameter, the sharing task name is the first ID that is returned in the file_id_list value.
   * 
   * >  The sharing task name must be 0 to 128 characters in length.
   */
  shareName?: string;
  /**
   * @remarks
   * The length of the access code. Valid values: 6 to 8. Unit: bytes. If you leave this parameter empty or set it to null, no access code is required. If you use a token to share files, you do not need to configure this parameter. The access code can contain only visible ASCII characters.
   * 
   * @example
   * 12345678
   */
  sharePwd?: string;
  /**
   * @remarks
   * The sharing status.
   * 
   * Valid values:
   * 
   * *   disabled: The sharing task is canceled.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   enabled: The sharing task is valid.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * enabled
   */
  status?: string;
  /**
   * @remarks
   * The number of times that the videos are previewed in the shared files. The value of this parameter must be equal to or greater than 0.
   * 
   * @example
   * 0
   */
  videoPreviewCount?: number;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      description: 'Description',
      disableDownload: 'DisableDownload',
      disablePreview: 'DisablePreview',
      disableSave: 'DisableSave',
      downloadCount: 'DownloadCount',
      downloadLimit: 'DownloadLimit',
      expiration: 'Expiration',
      previewCount: 'PreviewCount',
      previewLimit: 'PreviewLimit',
      reportCount: 'ReportCount',
      saveCount: 'SaveCount',
      saveLimit: 'SaveLimit',
      shareId: 'ShareId',
      shareName: 'ShareName',
      sharePwd: 'SharePwd',
      status: 'Status',
      videoPreviewCount: 'VideoPreviewCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      description: 'string',
      disableDownload: 'boolean',
      disablePreview: 'boolean',
      disableSave: 'boolean',
      downloadCount: 'number',
      downloadLimit: 'number',
      expiration: 'string',
      previewCount: 'number',
      previewLimit: 'number',
      reportCount: 'number',
      saveCount: 'number',
      saveLimit: 'number',
      shareId: 'string',
      shareName: 'string',
      sharePwd: 'string',
      status: 'string',
      videoPreviewCount: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCdsFileShareLinkResponseBody extends $dara.Model {
  /**
   * @remarks
   * The modification result. The value success indicates that the modification is successful. If the modification failed, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * The data information.
   */
  data?: CdsFileShareLinkModel;
  /**
   * @remarks
   * The error message that is returned. This parameter is not returned if the value of Code is success.
   * 
   * @example
   * success
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * F7E4322D-D679-5ACB-A909-490D2F0E****
   */
  requestId?: string;
  /**
   * @remarks
   * The request status.
   * 
   * Valid values:
   * 
   * *   true: The request is successful.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false: The request fails.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: CdsFileShareLinkModel,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCdsFileShareLinkResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyCdsFileShareLinkResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyCdsFileShareLinkResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCloudDriveGroupsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk in Cloud Drive Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-shanghai+cds-135515****
   */
  cdsId?: string;
  /**
   * @remarks
   * The IDs of the teams.
   */
  groupId?: string[];
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The status of the team space. Valid values:
   * 
   * *   enabled
   * *   disabled
   * 
   * Default value: enabled.
   * 
   * @example
   * disabled
   */
  status?: string;
  /**
   * @remarks
   * The total capacity of the team space.
   * 
   * @example
   * 32212254720
   */
  totalSize?: number;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      groupId: 'GroupId',
      regionId: 'RegionId',
      status: 'Status',
      totalSize: 'TotalSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      groupId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
      status: 'string',
      totalSize: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.groupId)) {
      $dara.Model.validateArray(this.groupId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCloudDriveGroupsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The returned results. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * The data information.
   * 
   * @example
   * []
   */
  data?: string;
  /**
   * @remarks
   * The message returned.
   * 
   * @example
   * success
   */
  message?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values: true and false.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCloudDriveGroupsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyCloudDriveGroupsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyCloudDriveGroupsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCloudDrivePermissionRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk in Cloud Drive Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-60911*****
   */
  cdsId?: string;
  /**
   * @remarks
   * The IDs of the users who have the download permissions.
   */
  downloadEndUserIds?: string[];
  /**
   * @remarks
   * The IDs of the users who have the upload and download permissions.
   */
  downloadUploadEndUserIds?: string[];
  noDownloadNoUploadEndUserIds?: string[];
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      downloadEndUserIds: 'DownloadEndUserIds',
      downloadUploadEndUserIds: 'DownloadUploadEndUserIds',
      noDownloadNoUploadEndUserIds: 'NoDownloadNoUploadEndUserIds',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      downloadEndUserIds: { 'type': 'array', 'itemType': 'string' },
      downloadUploadEndUserIds: { 'type': 'array', 'itemType': 'string' },
      noDownloadNoUploadEndUserIds: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.downloadEndUserIds)) {
      $dara.Model.validateArray(this.downloadEndUserIds);
    }
    if(Array.isArray(this.downloadUploadEndUserIds)) {
      $dara.Model.validateArray(this.downloadUploadEndUserIds);
    }
    if(Array.isArray(this.noDownloadNoUploadEndUserIds)) {
      $dara.Model.validateArray(this.noDownloadNoUploadEndUserIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCloudDrivePermissionResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 9197824D-AD4B-571F-94BB-C2E6D5855AB6
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCloudDrivePermissionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyCloudDrivePermissionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyCloudDrivePermissionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCloudDriveUsersRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-596198****
   */
  cdsId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  endUserId?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The status of Cloud Drive Service users.
   * 
   * Valid values:
   * 
   * *   disabled
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     unavailable
   * 
   *     <!-- -->
   * 
   * *   enabled
   * 
   *     <!-- -->
   * 
   *     :
   * 
   *     <!-- -->
   * 
   *     available
   * 
   *     <!-- -->
   * 
   * @example
   * enabled
   */
  status?: string;
  /**
   * @remarks
   * The maximum storage space of a user. Unit: bytes.
   * 
   * @example
   * 1024
   */
  userMaxSize?: number;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      regionId: 'RegionId',
      status: 'Status',
      userMaxSize: 'UserMaxSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
      status: 'string',
      userMaxSize: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.endUserId)) {
      $dara.Model.validateArray(this.endUserId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCloudDriveUsersResponseBody extends $dara.Model {
  /**
   * @example
   * D2E005C4-8CA3-5F1D-9917-E75BE3BF****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCloudDriveUsersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyCloudDriveUsersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyCloudDriveUsersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyConfigGroupRequest extends $dara.Model {
  description?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cg-i1ruuudp92qpj****
   */
  groupId?: string;
  name?: string;
  /**
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      groupId: 'GroupId',
      name: 'Name',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      groupId: 'string',
      name: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyConfigGroupResponseBody extends $dara.Model {
  /**
   * @example
   * cg-i1ruuudp92qpj****
   */
  groupId?: string;
  /**
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      groupId: 'GroupId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyConfigGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyConfigGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyConfigGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCustomizedListHeadersRequest extends $dara.Model {
  /**
   * @remarks
   * The headers.
   */
  headers?: ModifyCustomizedListHeadersRequestHeaders[];
  /**
   * @remarks
   * The type of the list.
   * 
   * Valid values:
   * 
   * *   desktop: cloud computer
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * desktop
   */
  listType?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      headers: 'Headers',
      listType: 'ListType',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'array', 'itemType': ModifyCustomizedListHeadersRequestHeaders },
      listType: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.headers)) {
      $dara.Model.validateArray(this.headers);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCustomizedListHeadersResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCustomizedListHeadersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyCustomizedListHeadersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyCustomizedListHeadersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopChargeTypeRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to enable automatic payment if you specify subscription as the new billing method for the cloud desktop.
   * 
   * @example
   * false
   */
  autoPay?: boolean;
  /**
   * @remarks
   * The new billing method that you want to apply.
   * 
   * Valid values:
   * 
   * *   PostPaid: changes the billing method from subscription to pay-as-you-go.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PrePaid: changes the billing method from pay-as-you-go to subscription.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * PrePaid
   */
  chargeType?: string;
  /**
   * @remarks
   * The IDs of the cloud computers. You can specify 1 to 20 IDs.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string[];
  /**
   * @remarks
   * The subscription duration of the cloud computers if you set the ChargeType parameter to PrePaid. The unit is specified by the `PeriodUnit` parameter. This parameter is valid only when the `ChargeType` parameter is set to `PrePaid`. In this case, you must specify this parameter.
   * 
   * *   If the `PeriodUnit` parameter is set to `Week`, set the Period parameter to 1.
   * *   If the `PeriodUnit` parameter is set to `Month`, the valid values of the Period parameter are 1, 2, 3, and 6.
   * *   If the `PeriodUnit` parameter is set to `Year`, the valid values of the Period parameter are 1, 2, 3, 4, and 5.
   * 
   * @example
   * 1
   */
  period?: number;
  /**
   * @remarks
   * The unit of the subscription duration if you specify subscription as the new billing method for the cloud desktop.
   * 
   * @example
   * Month
   */
  periodUnit?: string;
  /**
   * @remarks
   * The ID of the promotional activity.
   * 
   * @example
   * 500038360030606
   */
  promotionId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * >  This parameter is in invitational preview and not publicly available.
   * 
   * @example
   * internal only
   */
  useDuration?: number;
  static names(): { [key: string]: string } {
    return {
      autoPay: 'AutoPay',
      chargeType: 'ChargeType',
      desktopId: 'DesktopId',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      promotionId: 'PromotionId',
      regionId: 'RegionId',
      useDuration: 'UseDuration',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoPay: 'boolean',
      chargeType: 'string',
      desktopId: { 'type': 'array', 'itemType': 'string' },
      period: 'number',
      periodUnit: 'string',
      promotionId: 'string',
      regionId: 'string',
      useDuration: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopChargeTypeResponseBody extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computers.
   */
  desktopId?: string[];
  /**
   * @remarks
   * The ID of the order.
   * 
   * @example
   * 123456789
   */
  orderId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      orderId: 'OrderId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      orderId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopChargeTypeResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDesktopChargeTypeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDesktopChargeTypeResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopGroupRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether cloud computers can be automatically created in the subscription cloud computer pool. This parameter takes effect and is required only if you set `ChargeType` to `PrePaid`.
   * 
   * Valid values:
   * 
   * *   0: false
   * *   1: true
   * 
   * @example
   * 1
   */
  allowAutoSetup?: number;
  /**
   * @remarks
   * The number of cloud computers that can be reserved in the pay-as-you-go cloud computer pool. This parameter takes effect and is required only if you set `ChargeType` to `PostPaid`. Valid values:
   * 
   * *   0: does not allow the system to reserve cloud computers.
   * *   N: allows the system to reserve N cloud computers (1≤ N ≤ 100).
   * 
   * >  If you set this parameter to 0, the system must create and start cloud computers and then assign the cloud computers to end users when the end users request cloud computers. This process is time-consuming. To improve user experience, we recommend that you reserve a specific number of cloud computers.
   * 
   * @example
   * 1
   */
  allowBufferCount?: number;
  /**
   * @remarks
   * The number of concurrent sessions that is allowed for each cloud computer in a multi-session cloud computer pool.
   * 
   * >  This parameter is unavailable.
   * 
   * @example
   * 1
   */
  bindAmount?: number;
  /**
   * @remarks
   * *   This parameter has different meanings based on the billing method of the cloud computer pool. For a subscription pool, this parameter specifies the number of cloud computers to purchase in the pool. Valid values: 0 to 200.
   * *   For a pay-as-you-go pool, this parameter specifies the minimum number of cloud computers to create in the pool. Default value: 1. Valid values: 0 to `MaxDesktopsCount`.
   * 
   * @example
   * 5
   */
  buyDesktopsCount?: number;
  /**
   * @remarks
   * The role that uses the cloud computer pool.
   * 
   * >  This parameter is unavailable.
   * 
   * Valid values:
   * 
   * *   teacher
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   student
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * teacher
   */
  classify?: string;
  /**
   * @remarks
   * The remarks.
   * 
   * @example
   * test
   */
  comments?: string;
  /**
   * @remarks
   * The maximum period of time during which the session is connected. When the specified maximum period of time is reached, the session is automatically disconnected. Unit: milliseconds. Valid values: 900000 to 345600000. That is, the session can be connected for 15 to 5,760 minutes (4 days).
   * 
   * @example
   * 600000
   */
  connectDuration?: number;
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * This parameter is required.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The name of the cloud computer pool.
   * 
   * @example
   * desktopGroupName1
   */
  desktopGroupName?: string;
  /**
   * @remarks
   * Specifies whether to disable session management.
   * 
   * @example
   * true
   */
  disableSessionConfig?: boolean;
  /**
   * @remarks
   * The ID of the File Storage NAS (NAS) file system for the user data roaming feature.
   * 
   * >  This parameter is unavailable.
   * 
   * @example
   * 04f314****
   */
  fileSystemId?: string;
  /**
   * @remarks
   * After an end user connects to a cloud computer, the session is established. If the system does not detect inputs from the keyboard or mouse within the specified period of time, the session is closed. Unit: milliseconds. Valid values: 360000 to 3600000 (6 minutes to 60 minutes)
   * 
   * End users can receive a prompt to save data before sessions are disconnected. The system sends the prompt 30 seconds before the specified period of time is reached. To prevent data loss, end users must save the data of the sessions.
   * 
   * >  This parameter is suitable only for cloud computers whose image version is v1.0.2 or later.
   * 
   * @example
   * 120000
   */
  idleDisconnectDuration?: number;
  /**
   * @remarks
   * The IDs of the images.
   * 
   * @example
   * desktopimage-windows-server-2016-64-ch
   */
  imageId?: string;
  /**
   * @remarks
   * The retention period of a session after it is disconnected. Unit: milliseconds. Valid values: 180000 to 345600000. That is, the session can be retained for 3 to 5,760 minutes (4 days) after it is disconnected. If you set this parameter to 0, the session is permanently retained after it is disconnected.
   * 
   * When a session is disconnected, take note of the following situations: If an end user does not resume the session within the specified duration, the session is closed and all unsaved data is cleared. If the end user resumes the session within the specified duration, the end user can continue to access data of the session.
   * 
   * @example
   * 1000
   */
  keepDuration?: number;
  /**
   * @remarks
   * The load balancing policy of the multi-session cloud computer pool.
   * 
   * >  This parameter is unavailable.
   * 
   * Valid values:
   * 
   * *   0: depth-first
   * *   1: breadth-first
   * 
   * @example
   * 0
   */
  loadPolicy?: number;
  /**
   * @remarks
   * The maximum number of cloud computers that can be housed in the pay-as-you-go cloud computer pool. Valid values: 0 to 500.
   * 
   * @example
   * 10
   */
  maxDesktopsCount?: number;
  /**
   * @remarks
   * The maximum number of cloud computers that can be automatically created in the subscription cloud computer pool. This parameter takes effect and is required only if you set `ChargeType` to `PrePaid`. Default value: 1. Valid values: 0 to `MaxDesktopsCount`.
   * 
   * @example
   * 1
   */
  minDesktopsCount?: number;
  /**
   * @remarks
   * The ID of the cloud computer template.
   * 
   * @example
   * b-7t275tpgjueeu****
   */
  ownBundleId?: string;
  /**
   * @remarks
   * The ID of the security policy.
   * 
   * @example
   * pg-53iyi2aar0nd6****
   */
  policyGroupId?: string;
  /**
   * @remarks
   * The IDs of policy groups.
   */
  policyGroupIds?: string[];
  /**
   * @remarks
   * Specifies whether to enable user data roaming.
   * 
   * >  This parameter is unavailable.
   * 
   * @example
   * false
   */
  profileFollowSwitch?: boolean;
  /**
   * @remarks
   * The threshold for the ratio of connected sessions. This parameter indicates the condition that triggers auto scaling in a multi-session cloud computer pool. The ratio of connected sessions IS calculated by using the following formula:
   * 
   * `Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`
   * 
   * If the ratio of connected sessions is greater than the specified value, new cloud computers are created. If the ratio of connected sessions is smaller than the specified value, idle cloud computers are deleted.
   * 
   * >  This parameter is unavailable.
   * 
   * @example
   * 0.5
   */
  ratioThreshold?: number;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The disk reset type of cloud computers.
   * 
   * Valid values:
   * 
   * *   0: does not reset disks.
   * 
   * *   1: resets only the system disks.
   * 
   * *   2: resets only the user disks.
   * 
   * *   3: resets the system disks and user disks.
   * 
   * @example
   * 0
   */
  resetType?: number;
  /**
   * @remarks
   * The ID of the scaling policy group.
   * 
   * >  This parameter is unavailable.
   * 
   * @example
   * s-kakowkdl****
   */
  scaleStrategyId?: string;
  /**
   * @remarks
   * The period of time before the idle cloud computer enters the Stopped state. When the specified period of time is reached, the cloud computer is automatically stopped. If an end user connects to the stopped cloud computer, the cloud computer automatically starts. Unit: milliseconds.
   * 
   * @example
   * 180000
   */
  stopDuration?: number;
  static names(): { [key: string]: string } {
    return {
      allowAutoSetup: 'AllowAutoSetup',
      allowBufferCount: 'AllowBufferCount',
      bindAmount: 'BindAmount',
      buyDesktopsCount: 'BuyDesktopsCount',
      classify: 'Classify',
      comments: 'Comments',
      connectDuration: 'ConnectDuration',
      desktopGroupId: 'DesktopGroupId',
      desktopGroupName: 'DesktopGroupName',
      disableSessionConfig: 'DisableSessionConfig',
      fileSystemId: 'FileSystemId',
      idleDisconnectDuration: 'IdleDisconnectDuration',
      imageId: 'ImageId',
      keepDuration: 'KeepDuration',
      loadPolicy: 'LoadPolicy',
      maxDesktopsCount: 'MaxDesktopsCount',
      minDesktopsCount: 'MinDesktopsCount',
      ownBundleId: 'OwnBundleId',
      policyGroupId: 'PolicyGroupId',
      policyGroupIds: 'PolicyGroupIds',
      profileFollowSwitch: 'ProfileFollowSwitch',
      ratioThreshold: 'RatioThreshold',
      regionId: 'RegionId',
      resetType: 'ResetType',
      scaleStrategyId: 'ScaleStrategyId',
      stopDuration: 'StopDuration',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allowAutoSetup: 'number',
      allowBufferCount: 'number',
      bindAmount: 'number',
      buyDesktopsCount: 'number',
      classify: 'string',
      comments: 'string',
      connectDuration: 'number',
      desktopGroupId: 'string',
      desktopGroupName: 'string',
      disableSessionConfig: 'boolean',
      fileSystemId: 'string',
      idleDisconnectDuration: 'number',
      imageId: 'string',
      keepDuration: 'number',
      loadPolicy: 'number',
      maxDesktopsCount: 'number',
      minDesktopsCount: 'number',
      ownBundleId: 'string',
      policyGroupId: 'string',
      policyGroupIds: { 'type': 'array', 'itemType': 'string' },
      profileFollowSwitch: 'boolean',
      ratioThreshold: 'number',
      regionId: 'string',
      resetType: 'number',
      scaleStrategyId: 'string',
      stopDuration: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.policyGroupIds)) {
      $dara.Model.validateArray(this.policyGroupIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDesktopGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDesktopGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopHostNameRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string;
  /**
   * @remarks
   * The new hostname of the cloud computer. The hostname must meet the following requirements:
   * 
   * *   The hostname must be 2 to 15 characters in length.
   * *   The hostname can contain only letters, digits, and hyphens (-). The hostname cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.
   * 
   * This parameter is required.
   * 
   * @example
   * NewName
   */
  newHostName?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      newHostName: 'NewHostName',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      newHostName: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopHostNameResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopHostNameResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDesktopHostNameResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDesktopHostNameResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopNameRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string;
  /**
   * @remarks
   * The new name of the cloud computer. The name of the cloud computer must meet the following requirements:
   * 
   * *   The name must be 1 to 64 characters in length.
   * *   The name must start with a letter but cannot start with `http://` or `https://`.
   * *   The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
   * 
   * This parameter is required.
   * 
   * @example
   * test
   */
  newDesktopName?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      newDesktopName: 'NewDesktopName',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      newDesktopName: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopNameResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopNameResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDesktopNameResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDesktopNameResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopOversoldGroupRequest extends $dara.Model {
  concurrenceCount?: number;
  description?: string;
  idleDisconnectDuration?: number;
  imageId?: string;
  keepDuration?: number;
  name?: string;
  oversoldGroupId?: string;
  oversoldUserCount?: number;
  oversoldWarn?: number;
  policyGroupId?: string;
  stopDuration?: number;
  static names(): { [key: string]: string } {
    return {
      concurrenceCount: 'ConcurrenceCount',
      description: 'Description',
      idleDisconnectDuration: 'IdleDisconnectDuration',
      imageId: 'ImageId',
      keepDuration: 'KeepDuration',
      name: 'Name',
      oversoldGroupId: 'OversoldGroupId',
      oversoldUserCount: 'OversoldUserCount',
      oversoldWarn: 'OversoldWarn',
      policyGroupId: 'PolicyGroupId',
      stopDuration: 'StopDuration',
    };
  }

  static types(): { [key: string]: any } {
    return {
      concurrenceCount: 'number',
      description: 'string',
      idleDisconnectDuration: 'number',
      imageId: 'string',
      keepDuration: 'number',
      name: 'string',
      oversoldGroupId: 'string',
      oversoldUserCount: 'number',
      oversoldWarn: 'number',
      policyGroupId: 'string',
      stopDuration: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopOversoldGroupResponseBody extends $dara.Model {
  data?: ModifyDesktopOversoldGroupResponseBodyData;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: ModifyDesktopOversoldGroupResponseBodyData,
      requestId: 'string',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopOversoldGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDesktopOversoldGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDesktopOversoldGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopOversoldGroupSaleRequest extends $dara.Model {
  concurrenceCount?: number;
  oversoldGroupId?: string;
  oversoldUserCount?: number;
  static names(): { [key: string]: string } {
    return {
      concurrenceCount: 'ConcurrenceCount',
      oversoldGroupId: 'OversoldGroupId',
      oversoldUserCount: 'OversoldUserCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      concurrenceCount: 'number',
      oversoldGroupId: 'string',
      oversoldUserCount: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopOversoldGroupSaleResponseBody extends $dara.Model {
  data?: ModifyDesktopOversoldGroupSaleResponseBodyData;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: ModifyDesktopOversoldGroupSaleResponseBodyData,
      requestId: 'string',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopOversoldGroupSaleResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDesktopOversoldGroupSaleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDesktopOversoldGroupSaleResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopOversoldUserGroupRequest extends $dara.Model {
  imageId?: string;
  name?: string;
  oversoldGroupId?: string;
  policyGroupId?: string;
  userGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      imageId: 'ImageId',
      name: 'Name',
      oversoldGroupId: 'OversoldGroupId',
      policyGroupId: 'PolicyGroupId',
      userGroupId: 'UserGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      imageId: 'string',
      name: 'string',
      oversoldGroupId: 'string',
      policyGroupId: 'string',
      userGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopOversoldUserGroupResponseBody extends $dara.Model {
  data?: ModifyDesktopOversoldUserGroupResponseBodyData;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: ModifyDesktopOversoldUserGroupResponseBodyData,
      requestId: 'string',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopOversoldUserGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDesktopOversoldUserGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDesktopOversoldUserGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopSpecRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to enable the auto-payment feature.
   * 
   * Default value: true. Valid values:
   * 
   * *   true: enables the auto-payment feature.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     Make sure that you have sufficient balance in your Alibaba Cloud account. Otherwise, an exception occurs on your order.
   * 
   *     <!-- -->
   * 
   * *   false: disables the auto-payment feature. In this case, an order is generated, and no payment is automatically made.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     You can log on to the Elastic Desktop Service console and complete the payment based on the order ID on the Orders page.
   * 
   *     <!-- -->
   * 
   * @example
   * false
   */
  autoPay?: boolean;
  /**
   * @remarks
   * The ID of a cloud computer.
   * 
   * @example
   * ecd-4543qyik164a4****
   */
  desktopId?: string;
  /**
   * @remarks
   * The destination instance type. You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/188882.html) operation to query the instance types supported by cloud computers.
   * 
   * This parameter is required.
   * 
   * @example
   * eds.general.2c8g
   */
  desktopType?: string;
  /**
   * @remarks
   * The ID of the promotional activity.
   * 
   * @example
   * 500033080110596
   */
  promotionId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  resourceSpecs?: ModifyDesktopSpecRequestResourceSpecs[];
  resourceType?: string;
  /**
   * @remarks
   * The size of the new system disk. Unit: GiB. Valid values: 80 to 500 GiB. The value must be a multiple of 10.
   * 
   * @example
   * 80
   */
  rootDiskSizeGib?: number;
  /**
   * @remarks
   * The performance level (PL) of the data disk. Default value: PL0.
   * 
   * Valid values:
   * 
   * *   PL1
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PL0
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PL3
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   PL2
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * PL0
   */
  userDiskPerformanceLevel?: string;
  /**
   * @remarks
   * The destination data disk size. Unit: GiB.
   * 
   * *   The data disk size of a non-graphical cloud computer ranges from 20 to 1020 GiB and must be a multiple of 10.
   * *   The data disk size of a graphical cloud computer ranges from 40 to 1020 GiB and must be a multiple of 10.
   * 
   * @example
   * 100
   */
  userDiskSizeGib?: number;
  static names(): { [key: string]: string } {
    return {
      autoPay: 'AutoPay',
      desktopId: 'DesktopId',
      desktopType: 'DesktopType',
      promotionId: 'PromotionId',
      regionId: 'RegionId',
      resourceSpecs: 'ResourceSpecs',
      resourceType: 'ResourceType',
      rootDiskSizeGib: 'RootDiskSizeGib',
      userDiskPerformanceLevel: 'UserDiskPerformanceLevel',
      userDiskSizeGib: 'UserDiskSizeGib',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoPay: 'boolean',
      desktopId: 'string',
      desktopType: 'string',
      promotionId: 'string',
      regionId: 'string',
      resourceSpecs: { 'type': 'array', 'itemType': ModifyDesktopSpecRequestResourceSpecs },
      resourceType: 'string',
      rootDiskSizeGib: 'number',
      userDiskPerformanceLevel: 'string',
      userDiskSizeGib: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.resourceSpecs)) {
      $dara.Model.validateArray(this.resourceSpecs);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopSpecResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the order.
   * 
   * @example
   * 123456789
   */
  orderId?: string;
  orderIds?: number[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      orderIds: 'OrderIds',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      orderIds: { 'type': 'array', 'itemType': 'number' },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.orderIds)) {
      $dara.Model.validateArray(this.orderIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopSpecResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDesktopSpecResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDesktopSpecResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopTimerRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computers.
   * 
   * This parameter is required.
   */
  desktopId?: string[];
  /**
   * @remarks
   * The details of the scheduled task on cloud computers.
   */
  desktopTimers?: ModifyDesktopTimerRequestDesktopTimers[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * Specifies whether to use the `DesktopTimers`** parameter. Set the value to `true`**.
   * 
   * @example
   * true
   */
  useDesktopTimers?: boolean;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      desktopTimers: 'DesktopTimers',
      regionId: 'RegionId',
      useDesktopTimers: 'UseDesktopTimers',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      desktopTimers: { 'type': 'array', 'itemType': ModifyDesktopTimerRequestDesktopTimers },
      regionId: 'string',
      useDesktopTimers: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    if(Array.isArray(this.desktopTimers)) {
      $dara.Model.validateArray(this.desktopTimers);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopTimerResponseBody extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computers for which you successfully configure the scheduled task.
   */
  desktopIds?: string[];
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 4638719F-3CAB-5704-BD54-55617BFF****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopIds: 'DesktopIds',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopIds: { 'type': 'array', 'itemType': 'string' },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopIds)) {
      $dara.Model.validateArray(this.desktopIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopTimerResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDesktopTimerResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDesktopTimerResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopsPolicyGroupRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud desktop. You can specify one or more desktop IDs. The value is a JSON array.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-ia2zw38bi6cm7****
   */
  desktopId?: string[];
  /**
   * @remarks
   * The ID of the policy.
   * 
   * @example
   * pg-gx2x1dhsmthe9****
   */
  policyGroupId?: string;
  /**
   * @remarks
   * 策略ID列表。
   */
  policyGroupIds?: string[];
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      policyGroupId: 'PolicyGroupId',
      policyGroupIds: 'PolicyGroupIds',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      policyGroupId: 'string',
      policyGroupIds: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    if(Array.isArray(this.policyGroupIds)) {
      $dara.Model.validateArray(this.policyGroupIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopsPolicyGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The modification results.
   */
  modifyResults?: ModifyDesktopsPolicyGroupResponseBodyModifyResults[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      modifyResults: 'ModifyResults',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      modifyResults: { 'type': 'array', 'itemType': ModifyDesktopsPolicyGroupResponseBodyModifyResults },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.modifyResults)) {
      $dara.Model.validateArray(this.modifyResults);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDesktopsPolicyGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDesktopsPolicyGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDesktopsPolicyGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDiskSpecRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to automatically complete the payment. Valid values:
   * 
   * *   `true`: automatically completes the payment. Make sure that your Alibaba Cloud account has sufficient balance. If your Alibaba Cloud account does not have sufficient balance, abnormal orders are generated.
   * *   `false`: does not complete the payment. In this case, an order is generated, but no payment is made. You can log on to the Elastic Desktop Service (EDS) console and complete the payment based on the order ID on the **Orders** page.
   * 
   * Default value: `true`.
   * 
   * @example
   * false
   */
  autoPay?: boolean;
  /**
   * @remarks
   * The ID of the cloud desktop.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-2yjhqxo1monxxxxxx
   */
  desktopId?: string;
  /**
   * @remarks
   * The ID of the sales promotion activity. You can call the DescribePrice operation to obtain the IDs of matching sales promotion activities.
   * 
   * @example
   * youhuiquan_promotion_option_id_for_blank
   */
  promotionId?: string;
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The performance level (PL) of the system disk. If the cloud desktop type is Graphics or High Frequency, you can set the PL of the system disk. Valid values:
   * 
   * *   PL0
   * *   PL1
   * *   PL2
   * *   PL3
   * 
   * @example
   * PL1
   */
  rootDiskPerformanceLevel?: string;
  /**
   * @remarks
   * The PL of the data disk. If the cloud desktop type is Graphics or High Frequency, you can set the PL of the data disk. Valid values:
   * 
   * *   PL0
   * *   PL1
   * *   PL2
   * *   PL3
   * 
   * @example
   * PL1
   */
  userDiskPerformanceLevel?: string;
  static names(): { [key: string]: string } {
    return {
      autoPay: 'AutoPay',
      desktopId: 'DesktopId',
      promotionId: 'PromotionId',
      regionId: 'RegionId',
      rootDiskPerformanceLevel: 'RootDiskPerformanceLevel',
      userDiskPerformanceLevel: 'UserDiskPerformanceLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoPay: 'boolean',
      desktopId: 'string',
      promotionId: 'string',
      regionId: 'string',
      rootDiskPerformanceLevel: 'string',
      userDiskPerformanceLevel: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDiskSpecResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the order. You can obtain the order ID on the [Orders](https://usercenter2-intl.aliyun.com/order/list?pageIndex=1\\&pageSize=20\\&spm=5176.12818093.top-nav.ditem-ord.36f016d0OQFmJa) page in Alibaba Cloud User Center.
   * 
   * @example
   * 219861020660568
   */
  orderId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * F89BBB13-8B3B-5C8A-A700-EEFDC17B8227
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDiskSpecResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDiskSpecResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDiskSpecResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyEntitlementRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-7w78ozhjcwa3u****
   */
  desktopId?: string;
  /**
   * @remarks
   * The username IDs. End users specified by this parameter become the end users of the cloud computer, and the original end users of the cloud computer are removed. You can specify 1 to 100 IDs.
   * 
   * @example
   * alice
   */
  endUserId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      endUserId: 'EndUserId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: 'string',
      endUserId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.endUserId)) {
      $dara.Model.validateArray(this.endUserId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyEntitlementResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyEntitlementResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyEntitlementResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyEntitlementResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyImageAttributeRequest extends $dara.Model {
  /**
   * @remarks
   * The description of the image. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
   * 
   * @example
   * testDescription
   */
  description?: string;
  /**
   * @remarks
   * The image ID.
   * 
   * This parameter is required.
   * 
   * @example
   * m-2g65ljy3ynrdq****
   */
  imageId?: string;
  /**
   * @remarks
   * The name of the image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
   * 
   * @example
   * testName
   */
  name?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      imageId: 'ImageId',
      name: 'Name',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      imageId: 'string',
      name: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyImageAttributeResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyImageAttributeResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyImageAttributeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyImageAttributeResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyImagePermissionRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of Alibaba Cloud accounts to which to share the image that will be created based on the image template. You can specify up to 20 account IDs.
   */
  addAccount?: number[];
  /**
   * @remarks
   * The IDs of the images.
   * 
   * This parameter is required.
   * 
   * @example
   * m-gx2x1dhsmusr2****
   */
  imageId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The ID of Alibaba Cloud account N from which you want to unshare the custom image. Valid values of N: 1 to 10. If the value of N is greater than 10, this parameter is ignored.
   */
  removeAccount?: number[];
  static names(): { [key: string]: string } {
    return {
      addAccount: 'AddAccount',
      imageId: 'ImageId',
      regionId: 'RegionId',
      removeAccount: 'RemoveAccount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      addAccount: { 'type': 'array', 'itemType': 'number' },
      imageId: 'string',
      regionId: 'string',
      removeAccount: { 'type': 'array', 'itemType': 'number' },
    };
  }

  validate() {
    if(Array.isArray(this.addAccount)) {
      $dara.Model.validateArray(this.addAccount);
    }
    if(Array.isArray(this.removeAccount)) {
      $dara.Model.validateArray(this.removeAccount);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyImagePermissionResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyImagePermissionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyImagePermissionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyImagePermissionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyNASDefaultMountTargetRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the NAS file system.
   * 
   * This parameter is required.
   * 
   * @example
   * 04f314****
   */
  fileSystemId?: string;
  /**
   * @remarks
   * The domain name of the mount target.
   * 
   * This parameter is required.
   * 
   * @example
   * 0bf744****-xo***.cn-hangzhou.nas.aliyuncs.com
   */
  mountTargetDomain?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      fileSystemId: 'FileSystemId',
      mountTargetDomain: 'MountTargetDomain',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileSystemId: 'string',
      mountTargetDomain: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyNASDefaultMountTargetResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyNASDefaultMountTargetResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyNASDefaultMountTargetResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyNASDefaultMountTargetResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyNetworkPackageBandwidthRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to enable the automatic payment feature.
   * 
   * Valid values:
   * 
   * *   true (default): enables the auto-payment feature.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     Make sure that your account has sufficient balance. Otherwise, no order is generated.
   * 
   *     <!-- -->
   * 
   * *   false: disables the auto-payment feature. In this case, an order is generated but you need to make the payment manually.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     To make the payment, log on to the Elastic Desktop Service console, go to the Orders page, and find the order based on the order ID.
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  autoPay?: boolean;
  /**
   * @remarks
   * The bandwidth provided by the premium bandwidth plan. Unit: Mbit/s.
   * 
   * *   Valid values if the premium bandwidth plan is a subscription plan: 2 to 1000.
   * *   Valid values if the premium bandwidth plan is a pay-as-you-go plan that charges by data transfer (PayByTraffic): 2 to 200.
   * *   Valid values if the premium bandwidth plan is a pay-as-you-go plan that charges by fixed bandwidth (PayByBandwidth): 2 to 1000.
   * 
   * This parameter is required.
   * 
   * @example
   * 10
   */
  bandwidth?: number;
  /**
   * @remarks
   * The ID of the premium bandwidth plan.
   * 
   * This parameter is required.
   * 
   * @example
   * np-cxj99qb8d34vo****
   */
  networkPackageId?: string;
  /**
   * @remarks
   * The promotion ID.
   * 
   * @example
   * 500033080110596
   */
  promotionId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      autoPay: 'AutoPay',
      bandwidth: 'Bandwidth',
      networkPackageId: 'NetworkPackageId',
      promotionId: 'PromotionId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoPay: 'boolean',
      bandwidth: 'number',
      networkPackageId: 'string',
      promotionId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyNetworkPackageBandwidthResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the order.
   * 
   * @example
   * 214552063030752
   */
  orderId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyNetworkPackageBandwidthResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyNetworkPackageBandwidthResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyNetworkPackageBandwidthResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyNetworkPackageEnabledRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to restore the premium bandwidth plan of the cloud computer.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  enabled?: boolean;
  /**
   * @remarks
   * The ID of the premium bandwidth plan.
   * 
   * This parameter is required.
   * 
   * @example
   * np-cfedn7r2pe48g****
   */
  networkPackageId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      enabled: 'Enabled',
      networkPackageId: 'NetworkPackageId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      enabled: 'boolean',
      networkPackageId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyNetworkPackageEnabledResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyNetworkPackageEnabledResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyNetworkPackageEnabledResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyNetworkPackageEnabledResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyOfficeSiteAttributeRequest extends $dara.Model {
  /**
   * @remarks
   * The method to connect to cloud computers from Alibaba Cloud Workspace clients.
   * 
   * >  VPC connection relies on the Alibaba Cloud PrivateLink service. You can use PrivateLink for free. When you set this parameter to `VPC` or `Any`, the system automatically activates PrivateLink.
   * 
   * Valid values:
   * 
   * *   INTERNET (default): allows end users to connect to cloud computers over the Internet.
   * *   VPC: allows end users to connect to cloud computers over VPCs.
   * *   ANY: allows end users to connect to cloud computers over the Internet and VPCs. When end users connect to cloud computers from Elastic Desktop Service, you can choose a connection method based on your business requirements.
   * 
   * @example
   * INTERNET
   */
  desktopAccessType?: string;
  /**
   * @remarks
   * Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.
   * 
   * Valid values:
   * 
   * * true (default)
   * * false
   * 
   * @example
   * false
   */
  enableAdminAccess?: boolean;
  /**
   * @remarks
   * Specifies whether to enable two-factor verification when an end user logs on to an Alibaba Cloud Workspace client. This parameter is required only for convenience office networks. If two-factor verification is enabled, the system checks whether security risks exist within the logon account when the end user uses a convenience user to log on to the client. If risks are detected, the system sends a verification code to the email address that is associated with the account of the convenience user. Then, the end user can log on to the client only when the verification code is correct.
   * 
   * @example
   * false
   */
  needVerifyLoginRisk?: boolean;
  /**
   * @remarks
   * Specifies whether to enable device verification. This parameter is required only for convenience office networks. This parameter is left empty for enterprise Active Directory (AD) office networks.
   * 
   * @example
   * false
   */
  needVerifyZeroDevice?: boolean;
  /**
   * @remarks
   * The office network ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-882398****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The office network name. The name must be 2 to 255 characters in length. It can contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.\\
   * This parameter is empty by default.
   * 
   * @example
   * test
   */
  officeSiteName?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopAccessType: 'DesktopAccessType',
      enableAdminAccess: 'EnableAdminAccess',
      needVerifyLoginRisk: 'NeedVerifyLoginRisk',
      needVerifyZeroDevice: 'NeedVerifyZeroDevice',
      officeSiteId: 'OfficeSiteId',
      officeSiteName: 'OfficeSiteName',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopAccessType: 'string',
      enableAdminAccess: 'boolean',
      needVerifyLoginRisk: 'boolean',
      needVerifyZeroDevice: 'boolean',
      officeSiteId: 'string',
      officeSiteName: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyOfficeSiteAttributeResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyOfficeSiteAttributeResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyOfficeSiteAttributeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyOfficeSiteAttributeResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyOfficeSiteCrossDesktopAccessRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to enable the communication between cloud computers in an office network. If you enable the communication between cloud computers in an office network, the cloud computers can access each other.
   * 
   * This parameter is required.
   * 
   * @example
   * false
   */
  enableCrossDesktopAccess?: boolean;
  /**
   * @remarks
   * The office network ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-068266****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      enableCrossDesktopAccess: 'EnableCrossDesktopAccess',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      enableCrossDesktopAccess: 'boolean',
      officeSiteId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyOfficeSiteCrossDesktopAccessResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyOfficeSiteCrossDesktopAccessResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyOfficeSiteCrossDesktopAccessResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyOfficeSiteCrossDesktopAccessResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyOfficeSiteMfaEnabledRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to enable MFA.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * This parameter is required.
   * 
   * @example
   * true
   */
  mfaEnabled?: boolean;
  /**
   * @remarks
   * The office network ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      mfaEnabled: 'MfaEnabled',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      mfaEnabled: 'boolean',
      officeSiteId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyOfficeSiteMfaEnabledResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyOfficeSiteMfaEnabledResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyOfficeSiteMfaEnabledResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyOfficeSiteMfaEnabledResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPolicyGroupRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether the end user has administrator permissions after the end user connects to the cloud desktop.
   * 
   * >  This parameter is in invitational preview and not available to the public.
   * 
   * @example
   * deny
   */
  adminAccess?: string;
  /**
   * @remarks
   * Specifies whether to enable the anti-screenshot feature. Valid values:
   * 
   * * on
   * * off
   * 
   * Default value: off.
   * 
   * @example
   * on
   */
  appContentProtection?: string;
  /**
   * @remarks
   * The client CIDR blocks in the whitelist.
   */
  authorizeAccessPolicyRule?: ModifyPolicyGroupRequestAuthorizeAccessPolicyRule[];
  /**
   * @remarks
   * The security group rules.
   */
  authorizeSecurityPolicyRule?: ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule[];
  /**
   * @remarks
   * Specifies whether to enable the webcam redirection feature. Valid values:
   * 
   * * on
   * * off
   * 
   * Default value: on.
   * 
   * @example
   * on
   */
  cameraRedirect?: string;
  /**
   * @remarks
   * The logon methods.
   */
  clientType?: ModifyPolicyGroupRequestClientType[];
  /**
   * @remarks
   * The permissions on clipboards. Valid values:
   * 
   * *   read: specifies one-way transfer. You can copy data from your computer to cloud desktops, but cannot copy data from cloud desktops to your computer.
   * *   readwrite: specifies two-way transfer. You can copy data between your computer and cloud desktops.
   * *   off: specifies that the two-way transfer is disabled. You cannot copy data between your computer and cloud desktops.
   * 
   * @example
   * off
   */
  clipboard?: string;
  deviceRedirects?: ModifyPolicyGroupRequestDeviceRedirects[];
  /**
   * **if can be null:**
   * false
   */
  deviceRules?: ModifyPolicyGroupRequestDeviceRules[];
  /**
   * @remarks
   * The domain blacklist or whitelist. Wildcard domains are supported. Separate domain names with commas (,). Valid values:
   * 
   * *   [black:],example1.com,example2.com: the domain name blacklist.
   * *   [white:],example1.com,example2.com: the domain name whitelist.
   * 
   * @example
   * [black:],example1.com,example2.com
   */
  domainList?: string;
  /**
   * @remarks
   * The details of the DNS rule.
   */
  domainResolveRule?: ModifyPolicyGroupRequestDomainResolveRule[];
  /**
   * @remarks
   * The DNS rule type.
   * 
   * @example
   * OFF
   */
  domainResolveRuleType?: string;
  /**
   * @remarks
   * The user applies for the administrator assistance switch. Value range: 
   * * on 
   * * off
   * 
   * @example
   * on
   */
  endUserApplyAdminCoordinate?: string;
  /**
   * @remarks
   * The flow collaboration switch between users. Value range: 
   * * on 
   * * off
   * 
   * @example
   * on
   */
  endUserGroupCoordinate?: string;
  /**
   * @remarks
   * Specifies whether to enable the image display quality feature for the Graphics cloud desktop. If your business requires high desktop performance and optimal user experience, we recommend that you enable this feature. For example, you can enable this policy in professional design scenarios. Valid values:
   * 
   * * on
   * * off
   * 
   * @example
   * off
   */
  gpuAcceleration?: string;
  /**
   * @remarks
   * Specifies whether to allow the access from HTM5 clients to a cloud desktop. Valid values:
   * 
   * *   on: allows the access.
   * *   off: denies the access.
   * 
   * Default value: off.
   * 
   * >  We recommend that you use the ClientType-related parameters to control the EDS client type for cloud desktop logon.
   * 
   * @example
   * off
   */
  html5Access?: string;
  /**
   * @remarks
   * The file transfer policy for HTML5 clients. Valid values:
   * 
   * *   off: Files cannot be uploaded from or downloaded to HTML5 clients.
   * *   upload: Files can be uploaded from HTML5 clients.
   * *   download: Files can be downloaded to HTML5 clients.
   * *   all: Files can be uploaded from and downloaded to HTML5 clients.
   * 
   * Default value: off.
   * 
   * @example
   * off
   */
  html5FileTransfer?: string;
  /**
   * @remarks
   * The protocol that you want to use for network communication. Valid values:
   * 
   * * TCP: Only the TCP protocol is used.
   * * BOTH: allows automatic switchover between the TCP protocol and the UDP protocol.
   * 
   * Default value: TCP.
   * 
   * @example
   * BOTH
   */
  internetCommunicationProtocol?: string;
  /**
   * @remarks
   * The permissions on local disk mapping. Valid values:
   * 
   * *   read: read-only permissions. Local disks are mapped to cloud desktops. You can only read (copy) local files but cannot modify them.
   * *   readwrite: read and write permissions. Local disks are mapped to cloud desktops. You can read (copy) and modify local files.
   * *   off: no permissions. Local disks are not mapped to cloud desktops.
   * 
   * @example
   * off
   */
  localDrive?: string;
  maxReconnectTime?: number;
  /**
   * @remarks
   * The name of the policy.
   * 
   * @example
   * testPolicyGroupName
   */
  name?: string;
  /**
   * @remarks
   * The network redirection feature. Valid values:
   * 
   * * on
   * * off
   * 
   * Default value: off.
   * 
   * @example
   * on
   */
  netRedirect?: string;
  /**
   * @remarks
   * The ID of the policy.
   * 
   * This parameter is required.
   * 
   * @example
   * pg-gx2x1dhsmthe9****
   */
  policyGroupId?: string;
  /**
   * @remarks
   * Specifies whether to allow user preemption. Default value: off. You cannot change the value.
   * 
   * @example
   * off
   */
  preemptLogin?: string;
  /**
   * @remarks
   * The names of the users that are allowed to connect to the same cloud desktop at the same time. You can specify up to five usernames.
   * 
   * > To improve user experience and ensure data security, multiple end users cannot connect to the same cloud desktop at the same time.
   */
  preemptLoginUser?: string[];
  /**
   * @remarks
   * Specifies whether to enable printer redirection. Valid values:
   * 
   * *   off: disables printer redirection.
   * *   on: enables printer redirection.
   * 
   * @example
   * off
   */
  printerRedirection?: string;
  /**
   * @remarks
   * Specifies whether to enable the custom screen recording feature. Valid values:
   * 
   * * on
   * * off
   * 
   * Default value: off.
   * 
   * @example
   * OFF
   */
  recordContent?: string;
  /**
   * @remarks
   * The duration in which the custom screen recording is valid. Default value: 30. Unit: days.
   * 
   * @example
   * 30
   */
  recordContentExpires?: number;
  /**
   * @remarks
   * Specifies whether to enable screen recording. Valid values:
   * 
   * * OFF: disabled.
   * * ALLTIME: All operations that are performed by an end user on the cloud desktop are recorded. The recording immediately starts when the end user connects to the cloud desktop and ends after the end user disconnects from the cloud desktop.
   * * PERIOD: The operations that are performed by an end user on the cloud desktop during a specific period of time are recorded. You must specify the start time and the end time of the recording.
   * 
   * @example
   * OFF
   */
  recording?: string;
  /**
   * @remarks
   * Specifies whether to record the sound that is generated on the cloud desktop during screen recording. Valid values:
   * 
   * * on
   * * off
   * 
   * @example
   * on
   */
  recordingAudio?: string;
  /**
   * @remarks
   * This parameter takes effect based on the Recording-related parameters. You can specify a time range for screen recording, and recording files are generated after the specified end time is reached.
   * 
   * @example
   * 15
   */
  recordingDuration?: number;
  /**
   * @remarks
   * The time when the screen recording ends. Specify the value in the HH:MM:SS format. The value is valid only when you set the Recording parameter to PERIOD.
   * 
   * @example
   * 08:59:00
   */
  recordingEndTime?: string;
  /**
   * @remarks
   * The period in which the screen recording audit is valid. Valid values: 15 to 180. Unit: days.
   * 
   * @example
   * 30
   */
  recordingExpires?: number;
  /**
   * @remarks
   * The frame rate of screen recording. Unit: fps. Valid values:
   * 
   * * 2
   * * 5
   * * 10
   * * 15
   * 
   * @example
   * 5
   */
  recordingFps?: number;
  /**
   * @remarks
   * The time when the screen recording starts. Specify the value in the HH:MM:SS format. The value is valid only when you set the Recording parameter to PERIOD.
   * 
   * @example
   * 08:00:00
   */
  recordingStartTime?: string;
  /**
   * @remarks
   * Specifies whether to enable the screen recording notification feature. Valid values: on and off. on and off (default).
   * 
   * @example
   * off
   */
  recordingUserNotify?: string;
  /**
   * @remarks
   * The content of the screen recording notification sent to the client. By default, you do not need to specify this parameter.
   * 
   * @example
   * Your desktop is being recorded.
   */
  recordingUserNotifyMessage?: string;
  /**
   * @remarks
   * The ID of the region where the cloud desktop resides.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The permissions on the keyboard and mouse to control the cloud desktop during remote assistance. Valid values:
   * 
   * * fullControl: The keyboard and mouse can be fully controlled.
   * * optionalControl: By default, this feature is disabled. You can apply for permissions to enable the feature.
   * * disableControl: The keyboard and mouse cannot be controlled.
   * 
   * @example
   * fullControl
   */
  remoteCoordinate?: string;
  /**
   * @remarks
   * The security group rules that you want to delete.
   */
  revokeAccessPolicyRule?: ModifyPolicyGroupRequestRevokeAccessPolicyRule[];
  /**
   * @remarks
   * The security group rules that you want to delete.
   */
  revokeSecurityPolicyRule?: ModifyPolicyGroupRequestRevokeSecurityPolicyRule[];
  /**
   * @remarks
   * The effective scope of the policy. Valid values:
   * 
   * * GLOBAL: takes effect globally.
   * * IP: takes effect based on the IP address.
   * 
   * @example
   * GLOBAL
   */
  scope?: string;
  /**
   * @remarks
   * This parameter is required when the Scope parameter is set to IP.
   */
  scopeValue?: string[];
  /**
   * @remarks
   * Specifies whether to enable USB redirection. Valid values:
   * 
   * *   on: enables USB redirection.
   * *   off: disables USB redirection.
   * 
   * @example
   * off
   */
  usbRedirect?: string;
  /**
   * @remarks
   * The USB redirection rules.
   */
  usbSupplyRedirectRule?: ModifyPolicyGroupRequestUsbSupplyRedirectRule[];
  /**
   * @remarks
   * The multimedia redirection feature.
   * 
   * @example
   * on
   */
  videoRedirect?: string;
  /**
   * @remarks
   * Specify whether to enable the policy of image display quality. Valid values:
   * 
   * *   on: enables the policy of image display quality.
   * *   off: disables the policy of image display quality.
   * 
   * Default value: off.
   * 
   * @example
   * low
   */
  visualQuality?: string;
  /**
   * @remarks
   * Specifies whether to enable watermarking. Valid values:
   * 
   * *   on: enables watermarking.
   * *   off: disables watermarking.
   * 
   * @example
   * off
   */
  watermark?: string;
  /**
   * @remarks
   * Specifies whether to enable the anti-screen photo feature for invisible watermarks. on and off (default).
   * 
   * @example
   * off
   */
  watermarkAntiCam?: string;
  /**
   * @remarks
   * The font color of the watermark. Valid values: 0 to 16777215.
   * 
   * @example
   * 0
   */
  watermarkColor?: number;
  /**
   * @remarks
   * The inclination angle of the watermark. Value values: -10 to -30.
   * 
   * @example
   * -10
   */
  watermarkDegree?: number;
  /**
   * @remarks
   * The font size of the watermark. Valid values: 10 to 50
   * 
   * @example
   * 10
   */
  watermarkFontSize?: number;
  /**
   * @remarks
   * The font style of the watermark. Valid values:
   * 
   * * plain
   * * bold
   * 
   * @example
   * plain
   */
  watermarkFontStyle?: string;
  /**
   * @remarks
   * The watermark enhancement feature. Valid values: low, medium, and high.
   * 
   * @example
   * medium
   */
  watermarkPower?: string;
  /**
   * @remarks
   * The number of watermark rows. This parameter is not in use.
   * 
   * @example
   * 3
   */
  watermarkRowAmount?: number;
  /**
   * @remarks
   * The security priority rule for invisible watermarks. Valid values: on and off.
   * 
   * @example
   * off
   */
  watermarkSecurity?: string;
  /**
   * @remarks
   * The transparency of the watermark. The valid values include:
   * 
   * *   LIGHT
   * *   MIDDLE
   * *   DARK
   * 
   * @example
   * LIGHT
   */
  watermarkTransparency?: string;
  /**
   * @remarks
   * The transparency of the watermark. A larger value indicates a less transparent watermark. Valid values: 10 to 100.
   * 
   * @example
   * 10
   */
  watermarkTransparencyValue?: number;
  /**
   * @remarks
   * The type of the watermark. You can specify multiple watermark types at a time. Separate watermark types with commas (,). Valid values:
   * 
   * *   EndUserId: the username
   * *   HostName: the last 15 characters of the cloud desktop ID
   * 
   * @example
   * EndUserId
   */
  watermarkType?: string;
  wyAssistant?: string;
  static names(): { [key: string]: string } {
    return {
      adminAccess: 'AdminAccess',
      appContentProtection: 'AppContentProtection',
      authorizeAccessPolicyRule: 'AuthorizeAccessPolicyRule',
      authorizeSecurityPolicyRule: 'AuthorizeSecurityPolicyRule',
      cameraRedirect: 'CameraRedirect',
      clientType: 'ClientType',
      clipboard: 'Clipboard',
      deviceRedirects: 'DeviceRedirects',
      deviceRules: 'DeviceRules',
      domainList: 'DomainList',
      domainResolveRule: 'DomainResolveRule',
      domainResolveRuleType: 'DomainResolveRuleType',
      endUserApplyAdminCoordinate: 'EndUserApplyAdminCoordinate',
      endUserGroupCoordinate: 'EndUserGroupCoordinate',
      gpuAcceleration: 'GpuAcceleration',
      html5Access: 'Html5Access',
      html5FileTransfer: 'Html5FileTransfer',
      internetCommunicationProtocol: 'InternetCommunicationProtocol',
      localDrive: 'LocalDrive',
      maxReconnectTime: 'MaxReconnectTime',
      name: 'Name',
      netRedirect: 'NetRedirect',
      policyGroupId: 'PolicyGroupId',
      preemptLogin: 'PreemptLogin',
      preemptLoginUser: 'PreemptLoginUser',
      printerRedirection: 'PrinterRedirection',
      recordContent: 'RecordContent',
      recordContentExpires: 'RecordContentExpires',
      recording: 'Recording',
      recordingAudio: 'RecordingAudio',
      recordingDuration: 'RecordingDuration',
      recordingEndTime: 'RecordingEndTime',
      recordingExpires: 'RecordingExpires',
      recordingFps: 'RecordingFps',
      recordingStartTime: 'RecordingStartTime',
      recordingUserNotify: 'RecordingUserNotify',
      recordingUserNotifyMessage: 'RecordingUserNotifyMessage',
      regionId: 'RegionId',
      remoteCoordinate: 'RemoteCoordinate',
      revokeAccessPolicyRule: 'RevokeAccessPolicyRule',
      revokeSecurityPolicyRule: 'RevokeSecurityPolicyRule',
      scope: 'Scope',
      scopeValue: 'ScopeValue',
      usbRedirect: 'UsbRedirect',
      usbSupplyRedirectRule: 'UsbSupplyRedirectRule',
      videoRedirect: 'VideoRedirect',
      visualQuality: 'VisualQuality',
      watermark: 'Watermark',
      watermarkAntiCam: 'WatermarkAntiCam',
      watermarkColor: 'WatermarkColor',
      watermarkDegree: 'WatermarkDegree',
      watermarkFontSize: 'WatermarkFontSize',
      watermarkFontStyle: 'WatermarkFontStyle',
      watermarkPower: 'WatermarkPower',
      watermarkRowAmount: 'WatermarkRowAmount',
      watermarkSecurity: 'WatermarkSecurity',
      watermarkTransparency: 'WatermarkTransparency',
      watermarkTransparencyValue: 'WatermarkTransparencyValue',
      watermarkType: 'WatermarkType',
      wyAssistant: 'WyAssistant',
    };
  }

  static types(): { [key: string]: any } {
    return {
      adminAccess: 'string',
      appContentProtection: 'string',
      authorizeAccessPolicyRule: { 'type': 'array', 'itemType': ModifyPolicyGroupRequestAuthorizeAccessPolicyRule },
      authorizeSecurityPolicyRule: { 'type': 'array', 'itemType': ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule },
      cameraRedirect: 'string',
      clientType: { 'type': 'array', 'itemType': ModifyPolicyGroupRequestClientType },
      clipboard: 'string',
      deviceRedirects: { 'type': 'array', 'itemType': ModifyPolicyGroupRequestDeviceRedirects },
      deviceRules: { 'type': 'array', 'itemType': ModifyPolicyGroupRequestDeviceRules },
      domainList: 'string',
      domainResolveRule: { 'type': 'array', 'itemType': ModifyPolicyGroupRequestDomainResolveRule },
      domainResolveRuleType: 'string',
      endUserApplyAdminCoordinate: 'string',
      endUserGroupCoordinate: 'string',
      gpuAcceleration: 'string',
      html5Access: 'string',
      html5FileTransfer: 'string',
      internetCommunicationProtocol: 'string',
      localDrive: 'string',
      maxReconnectTime: 'number',
      name: 'string',
      netRedirect: 'string',
      policyGroupId: 'string',
      preemptLogin: 'string',
      preemptLoginUser: { 'type': 'array', 'itemType': 'string' },
      printerRedirection: 'string',
      recordContent: 'string',
      recordContentExpires: 'number',
      recording: 'string',
      recordingAudio: 'string',
      recordingDuration: 'number',
      recordingEndTime: 'string',
      recordingExpires: 'number',
      recordingFps: 'number',
      recordingStartTime: 'string',
      recordingUserNotify: 'string',
      recordingUserNotifyMessage: 'string',
      regionId: 'string',
      remoteCoordinate: 'string',
      revokeAccessPolicyRule: { 'type': 'array', 'itemType': ModifyPolicyGroupRequestRevokeAccessPolicyRule },
      revokeSecurityPolicyRule: { 'type': 'array', 'itemType': ModifyPolicyGroupRequestRevokeSecurityPolicyRule },
      scope: 'string',
      scopeValue: { 'type': 'array', 'itemType': 'string' },
      usbRedirect: 'string',
      usbSupplyRedirectRule: { 'type': 'array', 'itemType': ModifyPolicyGroupRequestUsbSupplyRedirectRule },
      videoRedirect: 'string',
      visualQuality: 'string',
      watermark: 'string',
      watermarkAntiCam: 'string',
      watermarkColor: 'number',
      watermarkDegree: 'number',
      watermarkFontSize: 'number',
      watermarkFontStyle: 'string',
      watermarkPower: 'string',
      watermarkRowAmount: 'number',
      watermarkSecurity: 'string',
      watermarkTransparency: 'string',
      watermarkTransparencyValue: 'number',
      watermarkType: 'string',
      wyAssistant: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.authorizeAccessPolicyRule)) {
      $dara.Model.validateArray(this.authorizeAccessPolicyRule);
    }
    if(Array.isArray(this.authorizeSecurityPolicyRule)) {
      $dara.Model.validateArray(this.authorizeSecurityPolicyRule);
    }
    if(Array.isArray(this.clientType)) {
      $dara.Model.validateArray(this.clientType);
    }
    if(Array.isArray(this.deviceRedirects)) {
      $dara.Model.validateArray(this.deviceRedirects);
    }
    if(Array.isArray(this.deviceRules)) {
      $dara.Model.validateArray(this.deviceRules);
    }
    if(Array.isArray(this.domainResolveRule)) {
      $dara.Model.validateArray(this.domainResolveRule);
    }
    if(Array.isArray(this.preemptLoginUser)) {
      $dara.Model.validateArray(this.preemptLoginUser);
    }
    if(Array.isArray(this.revokeAccessPolicyRule)) {
      $dara.Model.validateArray(this.revokeAccessPolicyRule);
    }
    if(Array.isArray(this.revokeSecurityPolicyRule)) {
      $dara.Model.validateArray(this.revokeSecurityPolicyRule);
    }
    if(Array.isArray(this.scopeValue)) {
      $dara.Model.validateArray(this.scopeValue);
    }
    if(Array.isArray(this.usbSupplyRedirectRule)) {
      $dara.Model.validateArray(this.usbSupplyRedirectRule);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPolicyGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPolicyGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyPolicyGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyPolicyGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTimerGroupRequest extends $dara.Model {
  configTimers?: ModifyTimerGroupRequestConfigTimers[];
  description?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cg-i1ruuudp92qpj****
   */
  groupId?: string;
  name?: string;
  /**
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      configTimers: 'ConfigTimers',
      description: 'Description',
      groupId: 'GroupId',
      name: 'Name',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configTimers: { 'type': 'array', 'itemType': ModifyTimerGroupRequestConfigTimers },
      description: 'string',
      groupId: 'string',
      name: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.configTimers)) {
      $dara.Model.validateArray(this.configTimers);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTimerGroupResponseBody extends $dara.Model {
  /**
   * @example
   * cg-i1ruuudp92qpj****
   */
  groupId?: string;
  /**
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      groupId: 'GroupId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTimerGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyTimerGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyTimerGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyUserEntitlementRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computers to which you want to add end users.
   */
  authorizeDesktopId?: string[];
  /**
   * @remarks
   * The ID of the users.
   */
  endUserId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The IDs of the cloud computers whose end users you want to remove.
   */
  revokeDesktopId?: string[];
  static names(): { [key: string]: string } {
    return {
      authorizeDesktopId: 'AuthorizeDesktopId',
      endUserId: 'EndUserId',
      regionId: 'RegionId',
      revokeDesktopId: 'RevokeDesktopId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorizeDesktopId: { 'type': 'array', 'itemType': 'string' },
      endUserId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
      revokeDesktopId: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.authorizeDesktopId)) {
      $dara.Model.validateArray(this.authorizeDesktopId);
    }
    if(Array.isArray(this.endUserId)) {
      $dara.Model.validateArray(this.endUserId);
    }
    if(Array.isArray(this.revokeDesktopId)) {
      $dara.Model.validateArray(this.revokeDesktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyUserEntitlementResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyUserEntitlementResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyUserEntitlementResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyUserEntitlementResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyUserToDesktopGroupRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer pool whose end users you want to change.
   * 
   * This parameter is required.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The IDs of the end users that you want to add. You can configure 1 to 500 IDs.
   * 
   * This parameter is required.
   */
  newEndUserIds?: string[];
  /**
   * @remarks
   * The IDs of the end users that you want to remove. You can configure 1 to 500 IDs.
   * 
   * This parameter is required.
   */
  oldEndUserIds?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      newEndUserIds: 'NewEndUserIds',
      oldEndUserIds: 'OldEndUserIds',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      newEndUserIds: { 'type': 'array', 'itemType': 'string' },
      oldEndUserIds: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.newEndUserIds)) {
      $dara.Model.validateArray(this.newEndUserIds);
    }
    if(Array.isArray(this.oldEndUserIds)) {
      $dara.Model.validateArray(this.oldEndUserIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyUserToDesktopGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyUserToDesktopGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyUserToDesktopGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyUserToDesktopGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MoveCdsFileRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk.
   * 
   * @example
   * cn-hangzhou+cds-346063****
   */
  cdsId?: string;
  /**
   * @remarks
   * The processing mode of files that have the same name.
   * 
   * Valid values:
   * 
   * *   <!-- -->
   * 
   *     refuse
   * 
   *     <!-- -->
   * 
   *     : If you want to create a file that uses the same name as an existing file in the cloud, the system denies your request and returns the details of the existing file.
   * 
   *     <!-- -->
   * 
   * *   <!-- -->
   * 
   *     auto_rename
   * 
   *     <!-- -->
   * 
   *     : If you want to create a file that uses the same name as an existing file in the cloud, the system renames the file that you want to create by appending the current time point.
   * 
   *     <!-- -->
   * 
   * *   <!-- -->
   * 
   *     ignore
   * 
   *     <!-- -->
   * 
   *     : The system allows you to create a file that uses the same name as an existing file in the cloud.
   * 
   *     <!-- -->
   * 
   * *   <!-- -->
   * 
   *     over_write
   * 
   *     <!-- -->
   * 
   *     : After you create a file that uses the same name as an existing file in the cloud, the new file overwrites the existing file.
   * 
   *     <!-- -->
   * 
   * @example
   * ignore
   */
  conflictPolicy?: string;
  /**
   * @remarks
   * The user ID that you want to use to access the cloud disk.
   * 
   * @example
   * user01
   */
  endUserId?: string;
  /**
   * @remarks
   * The ID of the file.
   * 
   * @example
   * 63f3257b68b018170b194d87b875512d108f****
   */
  fileId?: string;
  /**
   * @remarks
   * The group ID.
   */
  groupId?: string;
  /**
   * @remarks
   * The ID of the parent folder that you want to move. If you want to remove the root folder, set the value to root.
   * 
   * @example
   * 6409848a6da91d6240604e7ba7337d85ba8a1****
   */
  parentFolderId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      conflictPolicy: 'ConflictPolicy',
      endUserId: 'EndUserId',
      fileId: 'FileId',
      groupId: 'GroupId',
      parentFolderId: 'ParentFolderId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      conflictPolicy: 'string',
      endUserId: 'string',
      fileId: 'string',
      groupId: 'string',
      parentFolderId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MoveCdsFileResponseBody extends $dara.Model {
  /**
   * @remarks
   * The result of the modification. A value of success indicates that the modification is successful. If the modification failed, an error message is returned.
   * 
   * @example
   * success
   */
  code?: string;
  /**
   * @remarks
   * The error message that is returned. This parameter is not returned if the value of Code is success.
   * 
   * @example
   * success
   */
  message?: string;
  /**
   * @remarks
   * The response object when you move a file.
   */
  moveCdsFileModel?: MoveCdsFileResponseBodyMoveCdsFileModel;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request is successful.
   * 
   * Valid values:
   * 
   * *   <!-- -->
   * 
   *     true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   <!-- -->
   * 
   *     false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      message: 'Message',
      moveCdsFileModel: 'MoveCdsFileModel',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      message: 'string',
      moveCdsFileModel: MoveCdsFileResponseBodyMoveCdsFileModel,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.moveCdsFileModel && typeof (this.moveCdsFileModel as any).validate === 'function') {
      (this.moveCdsFileModel as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MoveCdsFileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: MoveCdsFileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: MoveCdsFileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RebootDesktopsRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computers. You can specify 1 to 100 IDs.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RebootDesktopsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RebootDesktopsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RebootDesktopsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RebootDesktopsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RebuildDesktopsRequest extends $dara.Model {
  /**
   * @remarks
   * The cloud computer IDs. You can specify the IDs of 1 to 20 cloud computers.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-gx2x1dhsmucyy****
   */
  desktopId?: string[];
  /**
   * @remarks
   * The ID of the new image.
   * 
   * @example
   * m-84mztzatmlnys****
   */
  imageId?: string;
  /**
   * @remarks
   * The OS language. Only system images are supported, and Linux cloud computers support only English.
   * 
   * Valid values:
   * 
   * *   en-US: English
   * *   zh-HK: Traditional Chinese (Hong Kong, China)
   * *   zh-CN: Simplified Chinese
   * *   ja-JP: Japanese
   * 
   * @example
   * en-US
   */
  language?: string;
  /**
   * @remarks
   * The operation type on the data disk.
   * 
   * >  This parameter is empty by default regardless of whether data disks are attached to the cloud computer.
   * 
   * *   No data disks are attached to the cloud computer:\\
   *     No operation is performed on the data disks of the cloud computer regardless of the value of this parameter.
   * 
   * *   Data disks are attached to the cloud computer:
   * 
   *     1.  The OS of the cloud computer is the same as the OS of the destination image:
   * 
   *         *   If you set the OperateType parameter to `replace`, the data in the data disks of the cloud computer is replaced.
   *         *   If you leave the OperateType parameter empty, the data in the data disks of the cloud computer is retained.
   * 
   *     2.  The OS of the cloud computer is different from the OS of the destination image:
   * 
   *         *   If you set the OperateType parameter to `replace`, the data in the data disks of the cloud computer is replaced.
   *         *   If you leave the OperateType parameter empty, the data in the data disks of the cloud computer is cleared.
   * 
   * @example
   * replace
   */
  operateType?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      imageId: 'ImageId',
      language: 'Language',
      operateType: 'OperateType',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      imageId: 'string',
      language: 'string',
      operateType: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RebuildDesktopsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The recreation results.
   */
  rebuildResults?: RebuildDesktopsResponseBodyRebuildResults[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      rebuildResults: 'RebuildResults',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      rebuildResults: { 'type': 'array', 'itemType': RebuildDesktopsResponseBodyRebuildResults },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.rebuildResults)) {
      $dara.Model.validateArray(this.rebuildResults);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RebuildDesktopsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RebuildDesktopsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RebuildDesktopsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveFilePermissionRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk in Cloud Drive Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-066224****
   */
  cdsId?: string;
  /**
   * @remarks
   * The user ID.
   * 
   * @example
   * user01
   */
  endUserId?: string;
  /**
   * @remarks
   * The file ID. The ID is a unique identifier for the file.
   * 
   * This parameter is required.
   * 
   * @example
   * 6333e553a133ce21e6f747cf948bb9ef95d7****
   */
  fileId?: string;
  /**
   * @remarks
   * The group ID.
   */
  groupId?: string;
  /**
   * @remarks
   * The users that you want to authorize.
   * 
   * This parameter is required.
   */
  memberList?: RemoveFilePermissionRequestMemberList[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      fileId: 'FileId',
      groupId: 'GroupId',
      memberList: 'MemberList',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: 'string',
      fileId: 'string',
      groupId: 'string',
      memberList: { 'type': 'array', 'itemType': RemoveFilePermissionRequestMemberList },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.memberList)) {
      $dara.Model.validateArray(this.memberList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveFilePermissionShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud disk in Cloud Drive Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+cds-066224****
   */
  cdsId?: string;
  /**
   * @remarks
   * The user ID.
   * 
   * @example
   * user01
   */
  endUserId?: string;
  /**
   * @remarks
   * The file ID. The ID is a unique identifier for the file.
   * 
   * This parameter is required.
   * 
   * @example
   * 6333e553a133ce21e6f747cf948bb9ef95d7****
   */
  fileId?: string;
  /**
   * @remarks
   * The group ID.
   */
  groupId?: string;
  /**
   * @remarks
   * The users that you want to authorize.
   * 
   * This parameter is required.
   */
  memberListShrink?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      cdsId: 'CdsId',
      endUserId: 'EndUserId',
      fileId: 'FileId',
      groupId: 'GroupId',
      memberListShrink: 'MemberList',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cdsId: 'string',
      endUserId: 'string',
      fileId: 'string',
      groupId: 'string',
      memberListShrink: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveFilePermissionResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 4636DBE0-BBB4-4076-8B8E-94D21A9A3CFB
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveFilePermissionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RemoveFilePermissionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RemoveFilePermissionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveUserFromDesktopGroupRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer pool for which you want to remove the authorized users.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The IDs of cloud computer pools.
   */
  desktopGroupIds?: string[];
  /**
   * @remarks
   * The IDs of the authorized users that you want to remove.
   * 
   * This parameter is required.
   */
  endUserIds?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      desktopGroupIds: 'DesktopGroupIds',
      endUserIds: 'EndUserIds',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      desktopGroupIds: { 'type': 'array', 'itemType': 'string' },
      endUserIds: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopGroupIds)) {
      $dara.Model.validateArray(this.desktopGroupIds);
    }
    if(Array.isArray(this.endUserIds)) {
      $dara.Model.validateArray(this.endUserIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveUserFromDesktopGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveUserFromDesktopGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RemoveUserFromDesktopGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RemoveUserFromDesktopGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveUserFromDesktopOversoldUserGroupRequest extends $dara.Model {
  endUserId?: string;
  oversoldGroupId?: string;
  userDesktopId?: string;
  userGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      endUserId: 'EndUserId',
      oversoldGroupId: 'OversoldGroupId',
      userDesktopId: 'UserDesktopId',
      userGroupId: 'UserGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endUserId: 'string',
      oversoldGroupId: 'string',
      userDesktopId: 'string',
      userGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveUserFromDesktopOversoldUserGroupResponseBody extends $dara.Model {
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveUserFromDesktopOversoldUserGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RemoveUserFromDesktopOversoldUserGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RemoveUserFromDesktopOversoldUserGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RenewDesktopGroupRequest extends $dara.Model {
  /**
   * @example
   * true
   */
  autoPay?: boolean;
  /**
   * @example
   * false
   */
  autoRenew?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dg-7724r1jitbjzc****
   */
  desktopGroupId?: string;
  /**
   * @example
   * 1
   */
  period?: number;
  /**
   * @example
   * Month
   */
  periodUnit?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      autoPay: 'AutoPay',
      autoRenew: 'AutoRenew',
      desktopGroupId: 'DesktopGroupId',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoPay: 'boolean',
      autoRenew: 'boolean',
      desktopGroupId: 'string',
      period: 'number',
      periodUnit: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RenewDesktopGroupResponseBody extends $dara.Model {
  orderId?: string[];
  /**
   * @example
   * E55E6732-2028-52FA-AB06-EA29C36B****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: { 'type': 'array', 'itemType': 'string' },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.orderId)) {
      $dara.Model.validateArray(this.orderId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RenewDesktopGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RenewDesktopGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RenewDesktopGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RenewDesktopOversoldGroupRequest extends $dara.Model {
  oversoldGroupId?: string;
  period?: number;
  periodUnit?: string;
  static names(): { [key: string]: string } {
    return {
      oversoldGroupId: 'OversoldGroupId',
      period: 'Period',
      periodUnit: 'PeriodUnit',
    };
  }

  static types(): { [key: string]: any } {
    return {
      oversoldGroupId: 'string',
      period: 'number',
      periodUnit: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RenewDesktopOversoldGroupResponseBody extends $dara.Model {
  data?: RenewDesktopOversoldGroupResponseBodyData;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: RenewDesktopOversoldGroupResponseBodyData,
      requestId: 'string',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RenewDesktopOversoldGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RenewDesktopOversoldGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RenewDesktopOversoldGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RenewDesktopsRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to enable the auto-payment feature.
   * 
   * Default value: true. Valid values:
   * 
   * *   true: enables the auto-payment feature.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     Make sure that you have sufficient balance in your Alibaba Cloud account. Otherwise, your order becomes invalid.
   * 
   *     <!-- -->
   * 
   * *   false: disables the auto-payment feature. In this case, an order is generated, and no payment is automatically made.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     You can log on to the Elastic Desktop Service console and complete the payment based on the order ID on the Orders page.
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  autoPay?: boolean;
  autoRenew?: boolean;
  /**
   * @remarks
   * The IDs of the cloud computers. Only IDs of subscription cloud computers are supported.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-ia2zw38bi6cm7****
   */
  desktopId?: string[];
  /**
   * @remarks
   * The renewal duration. Valid values of this parameter are determined by the value of the `PeriodUnit` parameter.
   * 
   * *   Valid values if you set the `PeriodUnit` parameter to `Month`: 1, 2, 3, and 6
   * *   Valid values if you set the `PeriodUnit` parameter to `Year`: 1, 2, 3, 4, 5, and 6
   * 
   * Default value: 1.
   * 
   * @example
   * 1
   */
  period?: number;
  /**
   * @remarks
   * The unit of the renewal duration specified by the `Period` parameter.
   * 
   * Default value: Month. Valid values:
   * 
   * *   Month
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Year
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Month
   */
  periodUnit?: string;
  /**
   * @remarks
   * The ID of the promotional activity.
   * 
   * @example
   * 500030980150146
   */
  promotionId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  resourceType?: string;
  static names(): { [key: string]: string } {
    return {
      autoPay: 'AutoPay',
      autoRenew: 'AutoRenew',
      desktopId: 'DesktopId',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      promotionId: 'PromotionId',
      regionId: 'RegionId',
      resourceType: 'ResourceType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoPay: 'boolean',
      autoRenew: 'boolean',
      desktopId: { 'type': 'array', 'itemType': 'string' },
      period: 'number',
      periodUnit: 'string',
      promotionId: 'string',
      regionId: 'string',
      resourceType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RenewDesktopsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The order ID.
   * 
   * @example
   * 20844399755****
   */
  orderId?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RenewDesktopsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RenewDesktopsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RenewDesktopsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RenewNetworkPackagesRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to enable the automatic payment feature.
   * 
   * Valid values:
   * 
   * *   true (default): enables the auto-payment feature.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     Make sure that your account has sufficient balance. Otherwise, no order is generated.
   * 
   *     <!-- -->
   * 
   * *   false: disables the auto-payment feature. In this case, an order is generated but you need to make the payment manually.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     To make the payment, log on to the Elastic Desktop Service console, go to the Orders page, and find the order based on the order ID.
   * 
   *     <!-- -->
   * 
   * @example
   * true
   */
  autoPay?: boolean;
  /**
   * @remarks
   * The IDs of premium bandwidth plans. You can specify up to 100 IDs.
   * 
   * This parameter is required.
   */
  networkPackageId?: string[];
  /**
   * @remarks
   * The subscription duration if you specify subscription as the new billing method for the cloud desktop. The unit of the value is specified by the `PeriodUnit` parameter. This parameter takes effect only when the `ChargeType` parameter is set to `PrePaid`.
   * 
   * *   If the `PeriodUnit` parameter is set to `Week`, the valid value of the Period parameter is 1.
   * *   If the `PeriodUnit` parameter is set to `Month`, the valid values of the Period parameter are 1, 2, 3, and 6.
   * *   If the `PeriodUnit` parameter is set to `Year`, the valid values of the Period parameter are 1, 2, 3, 4, and 5.
   * 
   * @example
   * 1
   */
  period?: number;
  /**
   * @remarks
   * The unit of the renewal duration specified by the Period parameter. Valid values:
   * 
   * *   Month
   * *   Year
   * 
   * Default value: Month.
   * 
   * @example
   * Month
   */
  periodUnit?: string;
  /**
   * @remarks
   * The promotion ID.
   * 
   * @example
   * 500038360030606
   */
  promotionId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      autoPay: 'AutoPay',
      networkPackageId: 'NetworkPackageId',
      period: 'Period',
      periodUnit: 'PeriodUnit',
      promotionId: 'PromotionId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      autoPay: 'boolean',
      networkPackageId: { 'type': 'array', 'itemType': 'string' },
      period: 'number',
      periodUnit: 'string',
      promotionId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.networkPackageId)) {
      $dara.Model.validateArray(this.networkPackageId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RenewNetworkPackagesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the order.
   * 
   * @example
   * 214726268900640
   */
  orderId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      orderId: 'OrderId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      orderId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RenewNetworkPackagesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RenewNetworkPackagesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RenewNetworkPackagesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResetDesktopsRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer pool. If you specify the `DesktopId` parameter, ignore the `DesktopGroupId` parameter. If you do not specify the `DesktopId` parameter, specify the `DesktopGroupId` parameter in the call to request all IDs of the cloud computers in the specified pool.
   * 
   * @example
   * dg-07if7qsxoxkb6****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The IDs of the cloud computer pools.
   */
  desktopGroupIds?: string[];
  /**
   * @remarks
   * The IDs of the cloud computers. You can specify the IDs of 1 to 100 cloud computers.
   */
  desktopId?: string[];
  /**
   * @remarks
   * The ID of the image.
   * 
   * @example
   * m-4zfb6zj728hhr****
   */
  imageId?: string;
  /**
   * @remarks
   * The billing method.
   * 
   * > This parameter is available only when you reset cloud computer pools. If you leave this parameter empty, all cloud computers in the specified cloud computer pool are reset, regardless of how the cloud computers are billed.
   * 
   * @example
   * PrePaid
   */
  payType?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/436773.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The reset scope. You can configure this parameter to reset the image or cloud computer.
   * 
   * Valid values:
   * 
   * *   ALL (default): resets the image and cloud computer.
   * *   IMAGE: resets only the image.
   * 
   * @example
   * ALL
   */
  resetScope?: string;
  /**
   * @remarks
   * The disk reset type.
   * 
   * Valid values:
   * 
   * *   0: does not reset disks.
   * *   1: resets only the system disk.
   * *   2: resets only the user disk.
   * *   3: resets the system disk and the user disk.
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  resetType?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      desktopGroupIds: 'DesktopGroupIds',
      desktopId: 'DesktopId',
      imageId: 'ImageId',
      payType: 'PayType',
      regionId: 'RegionId',
      resetScope: 'ResetScope',
      resetType: 'ResetType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      desktopGroupIds: { 'type': 'array', 'itemType': 'string' },
      desktopId: { 'type': 'array', 'itemType': 'string' },
      imageId: 'string',
      payType: 'string',
      regionId: 'string',
      resetScope: 'string',
      resetType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopGroupIds)) {
      $dara.Model.validateArray(this.desktopGroupIds);
    }
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResetDesktopsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResetDesktopsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ResetDesktopsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ResetDesktopsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResetNASDefaultMountTargetRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the NAS file system.
   * 
   * This parameter is required.
   * 
   * @example
   * 3a6ef4****
   */
  fileSystemId?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      fileSystemId: 'FileSystemId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileSystemId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResetNASDefaultMountTargetResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResetNASDefaultMountTargetResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ResetNASDefaultMountTargetResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ResetNASDefaultMountTargetResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResetSnapshotRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hzngahou
   */
  regionId?: string;
  /**
   * @remarks
   * The ID of the snapshot.
   * 
   * This parameter is required.
   * 
   * @example
   * s-2zeipxmnhej803x7****
   */
  snapshotId?: string;
  static names(): { [key: string]: string } {
    return {
      regionId: 'RegionId',
      snapshotId: 'SnapshotId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
      snapshotId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResetSnapshotResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResetSnapshotResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ResetSnapshotResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ResetSnapshotResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RevokeCoordinatePrivilegeRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the stream coordination task.
   * 
   * This parameter is required.
   * 
   * @example
   * co-fqsm6e8ee75w61fp9
   */
  coId?: string;
  /**
   * @remarks
   * The ID of the end user.
   * 
   * @example
   * zhangsan
   */
  endUserId?: string;
  /**
   * @remarks
   * The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The type of user who requires the coordinate permissions.
   * 
   * Set the value to TENANT_ADMIN. Only tenant administrators can be granted with the coordinate permissions.
   * 
   * This parameter is required.
   * 
   * @example
   * TENANT_ADMIN
   */
  userType?: string;
  /**
   * @remarks
   * The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About** on the client logon page to view the identifier of the client.
   * 
   * @example
   * C78CA9E99315687575DD2844C1F3****
   */
  uuid?: string;
  static names(): { [key: string]: string } {
    return {
      coId: 'CoId',
      endUserId: 'EndUserId',
      regionId: 'RegionId',
      userType: 'UserType',
      uuid: 'Uuid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      coId: 'string',
      endUserId: 'string',
      regionId: 'string',
      userType: 'string',
      uuid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RevokeCoordinatePrivilegeResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RevokeCoordinatePrivilegeResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RevokeCoordinatePrivilegeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RevokeCoordinatePrivilegeResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RunCommandRequest extends $dara.Model {
  /**
   * @remarks
   * The content of the command. The command content can be plaintext or Base64-encoded.\\
   * The Base64-encoded command content cannot exceed 16 KB in size.
   * 
   * > If the command content is Base64-encoded, you must set the ContentEncoding parameter to Base64.
   * 
   * This parameter is required.
   * 
   * @example
   * ipconfig
   */
  commandContent?: string;
  /**
   * @remarks
   * The encoding mode of the command content. Valid values:
   * 
   * *   PlainText: The command content is not encoded.
   * *   Base64: The command content is Base64-encoded.
   * 
   * Default value: PlainText. If the specified value of this parameter is invalid, PlainText is used by default.
   * 
   * @example
   * Base64
   */
  contentEncoding?: string;
  /**
   * @remarks
   * The ID of cloud desktop N. Valid values of N: 1 to 50.\\
   * If multiple cloud desktops are specified and the command execution succeeds on at least one of the cloud desktops, the operation is considered successful. If multiple cloud desktops are specified and the command execution fails on all the cloud desktops, verify the value of the parameter and try again.
   * 
   * This parameter is required.
   */
  desktopId?: string[];
  /**
   * @remarks
   * The ID of the end user. If you specify a value, you run the command as the end user that is granted specific permissions. Note: The end user has sessions on a cloud computer. That is, when the cloud computer is started, the end user logs on to an Alibaba Cloud Workspace client and connects to the cloud computer, and the cloud computer is not preempted by another end user during the connection. This parameter is not available for Linux cloud computers.
   * 
   * @example
   * User1
   */
  endUserId?: string;
  /**
   * @remarks
   * The ID of the region.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The timeout period for the command to run. Unit: seconds. Default value: 60.\\
   * A timeout error occurs if the command cannot be run because the process slows down or because a specific module or the Cloud Assistant client does not exist. When a timeout error occurs, the command process is forcibly terminated.
   * 
   * @example
   * 3600
   */
  timeout?: number;
  /**
   * @remarks
   * The language of the O\\&M command. Valid values:
   * 
   * *   RunBatScript
   * *   RunPowerShellScript
   * 
   * This parameter is required.
   * 
   * @example
   * RunPowerShellScript
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      commandContent: 'CommandContent',
      contentEncoding: 'ContentEncoding',
      desktopId: 'DesktopId',
      endUserId: 'EndUserId',
      regionId: 'RegionId',
      timeout: 'Timeout',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commandContent: 'string',
      contentEncoding: 'string',
      desktopId: { 'type': 'array', 'itemType': 'string' },
      endUserId: 'string',
      regionId: 'string',
      timeout: 'number',
      type: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RunCommandResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the command execution.
   * 
   * @example
   * t-hz01qgsqj2n****
   */
  invokeId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      invokeId: 'InvokeId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      invokeId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RunCommandResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RunCommandResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RunCommandResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SendVerifyCodeRequest extends $dara.Model {
  /**
   * @remarks
   * The information that is required to send the verification code, in JSON format. When you verify the CEN instance of another Alibaba Cloud account, you must provide the ID of the CEN instance and the ID of the Alibaba Cloud account to which the instance belongs.
   * 
   * *   CenId: the ID of the CEN instance.
   * *   CenOwnerId: the ID of the Alibaba Cloud account to which the CEN instance belongs.
   * 
   * >  If you own the CEN instance, skip this parameter. If you do not own the CEN instance, specify the ID of the Alibaba Cloud account that owns the CEN instance.
   * 
   * @example
   * {"cenOwnerId": 1234567890******,"cenId": "cen-3weq30r6t0s7t4****"}
   */
  extraInfo?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The action that you want to perform by using the verification code.
   * 
   * Valid value:
   * 
   * *   eds_cenID_securityverification: Use the verification code to verify the CEN instance.
   * 
   * This parameter is required.
   * 
   * @example
   * eds_cenID_securityverification
   */
  verifyCodeAction?: string;
  static names(): { [key: string]: string } {
    return {
      extraInfo: 'ExtraInfo',
      regionId: 'RegionId',
      verifyCodeAction: 'VerifyCodeAction',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extraInfo: 'string',
      regionId: 'string',
      verifyCodeAction: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SendVerifyCodeResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SendVerifyCodeResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SendVerifyCodeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SendVerifyCodeResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDesktopGroupScaleTimerRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * This parameter is required.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The information about the scheduled auto scaling task.
   */
  scaleTimerInfos?: SetDesktopGroupScaleTimerRequestScaleTimerInfos[];
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      regionId: 'RegionId',
      scaleTimerInfos: 'ScaleTimerInfos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      regionId: 'string',
      scaleTimerInfos: { 'type': 'array', 'itemType': SetDesktopGroupScaleTimerRequestScaleTimerInfos },
    };
  }

  validate() {
    if(Array.isArray(this.scaleTimerInfos)) {
      $dara.Model.validateArray(this.scaleTimerInfos);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDesktopGroupScaleTimerResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDesktopGroupScaleTimerResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SetDesktopGroupScaleTimerResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SetDesktopGroupScaleTimerResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDesktopGroupTimerRequest extends $dara.Model {
  /**
   * @remarks
   * The cron expression for the scheduled task. This parameter is required when `TimerType` is set to 2, 3, or 4.
   * 
   * @example
   * 0 0 2 ? * 1-7
   */
  cronExpression?: string;
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * This parameter is required.
   * 
   * @example
   * dg-dbdkfmh883****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * Specifies whether to forcefully execute the scheduled task.
   * 
   * @example
   * true
   */
  force?: boolean;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The type of the disk that you want to reset.
   * 
   * Valid values:
   * 
   * - does not reset disks.
   * - resets only the system disk.
   * - resets only the user disk.
   * - resets the system disk and the user disk.
   * 
   * @example
   * 1
   */
  resetType?: number;
  /**
   * @remarks
   * The type of the scheduled task.
   * 
   * Valid values:
   * 
   * *   1: scheduled reset
   * *   2: scheduled startup
   * *   3: scheduled stop
   * *   4: scheduled restart
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  timerType?: number;
  static names(): { [key: string]: string } {
    return {
      cronExpression: 'CronExpression',
      desktopGroupId: 'DesktopGroupId',
      force: 'Force',
      regionId: 'RegionId',
      resetType: 'ResetType',
      timerType: 'TimerType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cronExpression: 'string',
      desktopGroupId: 'string',
      force: 'boolean',
      regionId: 'string',
      resetType: 'number',
      timerType: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDesktopGroupTimerResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 388CF76E-FFB3-5174-9F91-CDD****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDesktopGroupTimerResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SetDesktopGroupTimerResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SetDesktopGroupTimerResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDesktopGroupTimerStatusRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the cloud computer pool.
   * 
   * This parameter is required.
   * 
   * @example
   * dg-fgxsniu6at****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The status of the scheduled task.
   * 
   * Valid values:
   * 
   * *   1: enabled
   * *   2: disabled
   * *   3: deleted
   * *   100: unknown
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * The type of the scheduled task.
   * 
   * Valid values:
   * 
   * *   1: scheduled reset
   * *   2: scheduled startup
   * *   3: scheduled stop
   * *   4: scheduled restart
   * 
   * This parameter is required.
   * 
   * @example
   * 1
   */
  timerType?: number;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      regionId: 'RegionId',
      status: 'Status',
      timerType: 'TimerType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      regionId: 'string',
      status: 'number',
      timerType: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDesktopGroupTimerStatusResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * AC7912E7-8BDF-547F-BCAC****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDesktopGroupTimerStatusResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SetDesktopGroupTimerStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SetDesktopGroupTimerStatusResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDesktopMaintenanceRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  desktopIds?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * enter
   */
  mode?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopIds: 'DesktopIds',
      mode: 'Mode',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopIds: { 'type': 'array', 'itemType': 'string' },
      mode: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopIds)) {
      $dara.Model.validateArray(this.desktopIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDesktopMaintenanceResponseBody extends $dara.Model {
  /**
   * @example
   * BA6A1853-3EA9-5EEB-86C8-3D14A3E01905
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDesktopMaintenanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SetDesktopMaintenanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SetDesktopMaintenanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDirectorySsoStatusRequest extends $dara.Model {
  /**
   * @remarks
   * The AD directory ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-h95efs1mbukd9****
   */
  directoryId?: string;
  /**
   * @remarks
   * Specifies whether to enable SSO. Valid values:
   * 
   * *   true: enables SSO.
   * *   false: disables SSO.
   * 
   * This parameter is required.
   * 
   * @example
   * true
   */
  enableSso?: boolean;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      directoryId: 'DirectoryId',
      enableSso: 'EnableSso',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      directoryId: 'string',
      enableSso: 'boolean',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDirectorySsoStatusResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDirectorySsoStatusResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SetDirectorySsoStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SetDirectorySsoStatusResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetIdpMetadataRequest extends $dara.Model {
  /**
   * @remarks
   * The workspace ID. This parameter is the same as `OfficeSiteId`. We recommend that you use `OfficeSiteId` to replace `DirectoryId`. You can specify only `DirectoryId` or `OfficeSiteId`.
   * 
   * @example
   * cn-hangzhou+dir-400695****
   */
  directoryId?: string;
  /**
   * @remarks
   * The metadata of the IdP.
   * 
   * This parameter is required.
   * 
   * @example
   * &lt;EntityDescriptor ID********Descriptor&gt;
   */
  idpMetadata?: string;
  /**
   * @remarks
   * The workspace ID.
   * 
   * @example
   * cn-hangzhou+dir-400695****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      directoryId: 'DirectoryId',
      idpMetadata: 'IdpMetadata',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      directoryId: 'string',
      idpMetadata: 'string',
      officeSiteId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetIdpMetadataResponseBody extends $dara.Model {
  /**
   * @remarks
   * The entity ID obtained after the IdP metadata file is parsed.
   * 
   * @example
   * http://test****.cn/adfs/services/trust
   */
  idpEntityId?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      idpEntityId: 'IdpEntityId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      idpEntityId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetIdpMetadataResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SetIdpMetadataResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SetIdpMetadataResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetOfficeSiteSsoStatusRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to enable SSO.
   * 
   * Valid values:
   * 
   * *   true
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   false
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * This parameter is required.
   * 
   * @example
   * true
   */
  enableSso?: boolean;
  /**
   * @remarks
   * The workspace ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou+dir-363353****
   */
  officeSiteId?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      enableSso: 'EnableSso',
      officeSiteId: 'OfficeSiteId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      enableSso: 'boolean',
      officeSiteId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetOfficeSiteSsoStatusResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetOfficeSiteSsoStatusResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SetOfficeSiteSsoStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SetOfficeSiteSsoStatusResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetUserProfilePathRulesRequest extends $dara.Model {
  /**
   * @remarks
   * The desktop group ID.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The directories that you want to configure in the blacklist and whitelist.
   */
  userProfilePathRule?: SetUserProfilePathRulesRequestUserProfilePathRule[];
  /**
   * @remarks
   * The directory type that you want to configure.
   * 
   * Valid values:
   * 
   * *   Both_Default_DesktopGroup
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DesktopGroup
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Default
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * DesktopGroup
   */
  userProfileRuleType?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      regionId: 'RegionId',
      userProfilePathRule: 'UserProfilePathRule',
      userProfileRuleType: 'UserProfileRuleType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      regionId: 'string',
      userProfilePathRule: { 'type': 'array', 'itemType': SetUserProfilePathRulesRequestUserProfilePathRule },
      userProfileRuleType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.userProfilePathRule)) {
      $dara.Model.validateArray(this.userProfilePathRule);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetUserProfilePathRulesShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * The desktop group ID.
   * 
   * @example
   * dg-2i8qxpv6t1a03****
   */
  desktopGroupId?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The directories that you want to configure in the blacklist and whitelist.
   */
  userProfilePathRuleShrink?: string;
  /**
   * @remarks
   * The directory type that you want to configure.
   * 
   * Valid values:
   * 
   * *   Both_Default_DesktopGroup
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   DesktopGroup
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Default
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * DesktopGroup
   */
  userProfileRuleType?: string;
  static names(): { [key: string]: string } {
    return {
      desktopGroupId: 'DesktopGroupId',
      regionId: 'RegionId',
      userProfilePathRuleShrink: 'UserProfilePathRule',
      userProfileRuleType: 'UserProfileRuleType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopGroupId: 'string',
      regionId: 'string',
      userProfilePathRuleShrink: 'string',
      userProfileRuleType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetUserProfilePathRulesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetUserProfilePathRulesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SetUserProfilePathRulesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SetUserProfilePathRulesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDesktopsRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computers. You can specify 1 to 20 IDs.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-7w78ozhjcwa3u****
   */
  desktopId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDesktopsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDesktopsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: StartDesktopsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: StartDesktopsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopDesktopsRequest extends $dara.Model {
  /**
   * @remarks
   * The IDs of the cloud computers. You can specify 1 to 20 IDs.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-7w78ozhjcwa3u****
   */
  desktopId?: string[];
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The billing mode after you stop the cloud computer.
   * 
   * Default value: StopCharging. Valid values:
   * 
   * *   StopCharging: After the cloud computer is stopped, the system automatically reclaims computing resources. You are no longer charged for computing resources. However, you are still charged for storage resources.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   KeepCharging: After the cloud computer is stopped, the system does not reclaim resources to prevent insufficient resources and startup failures. You are still charged for the resources.
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * StopCharging
   */
  stoppedMode?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      regionId: 'RegionId',
      stoppedMode: 'StoppedMode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
      stoppedMode: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopDesktopsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopDesktopsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: StopDesktopsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: StopDesktopsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopInvocationRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of cloud desktop N. Valid values of N: 1 to 50.
   * 
   * @example
   * ecd-7w78ozhjcwa3u****
   */
  desktopId?: string[];
  /**
   * @remarks
   * The ID of the execution.
   * 
   * This parameter is required.
   * 
   * @example
   * t-7d2a745b412b4601b2d47f6a768d****
   */
  invokeId?: string;
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      invokeId: 'InvokeId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      invokeId: 'string',
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopInvocationResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopInvocationResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: StopInvocationResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: StopInvocationResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TagResourcesRequest extends $dara.Model {
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The resource IDs, which are cloud computer IDs. You can specify 1 to 50 IDs.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-ia2zw38bi6cm7****
   */
  resourceId?: string[];
  /**
   * @remarks
   * The type of the resource.
   * 
   * Valid values:
   * 
   * * ALIYUN::GWS::INSTANCE: cloud computer.
   * 
   * This parameter is required.
   * 
   * @example
   * ALIYUN::GWS::INSTANCE
   */
  resourceType?: string;
  /**
   * @remarks
   * The tags that you want to add to the cloud computers. You can specify 1 to 20 tags.
   * 
   * This parameter is required.
   */
  tag?: TagResourcesRequestTag[];
  static names(): { [key: string]: string } {
    return {
      regionId: 'RegionId',
      resourceId: 'ResourceId',
      resourceType: 'ResourceType',
      tag: 'Tag',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
      resourceId: { 'type': 'array', 'itemType': 'string' },
      resourceType: 'string',
      tag: { 'type': 'array', 'itemType': TagResourcesRequestTag },
    };
  }

  validate() {
    if(Array.isArray(this.resourceId)) {
      $dara.Model.validateArray(this.resourceId);
    }
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TagResourcesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TagResourcesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TagResourcesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TagResourcesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnbindConfigGroupRequest extends $dara.Model {
  /**
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  resourceInfos?: UnbindConfigGroupRequestResourceInfos[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * Timer
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      regionId: 'RegionId',
      resourceInfos: 'ResourceInfos',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
      resourceInfos: { 'type': 'array', 'itemType': UnbindConfigGroupRequestResourceInfos },
      type: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.resourceInfos)) {
      $dara.Model.validateArray(this.resourceInfos);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnbindConfigGroupResponseBody extends $dara.Model {
  groupIds?: string[];
  /**
   * @example
   * AD0FF13D-FC7D-56AD-934F-91C8487*****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      groupIds: 'GroupIds',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupIds: { 'type': 'array', 'itemType': 'string' },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.groupIds)) {
      $dara.Model.validateArray(this.groupIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnbindConfigGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UnbindConfigGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UnbindConfigGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnbindUserDesktopRequest extends $dara.Model {
  desktopAgentIds?: string[];
  desktopGroupId?: string;
  desktopIds?: string[];
  force?: boolean;
  reason?: string;
  userDesktopIds?: string[];
  static names(): { [key: string]: string } {
    return {
      desktopAgentIds: 'DesktopAgentIds',
      desktopGroupId: 'DesktopGroupId',
      desktopIds: 'DesktopIds',
      force: 'Force',
      reason: 'Reason',
      userDesktopIds: 'UserDesktopIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopAgentIds: { 'type': 'array', 'itemType': 'string' },
      desktopGroupId: 'string',
      desktopIds: { 'type': 'array', 'itemType': 'string' },
      force: 'boolean',
      reason: 'string',
      userDesktopIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.desktopAgentIds)) {
      $dara.Model.validateArray(this.desktopAgentIds);
    }
    if(Array.isArray(this.desktopIds)) {
      $dara.Model.validateArray(this.desktopIds);
    }
    if(Array.isArray(this.userDesktopIds)) {
      $dara.Model.validateArray(this.userDesktopIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnbindUserDesktopResponseBody extends $dara.Model {
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnbindUserDesktopResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UnbindUserDesktopResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UnbindUserDesktopResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnlockVirtualMFADeviceRequest extends $dara.Model {
  /**
   * @remarks
   * The region ID.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The serial number of the virtual MFA device, which is a unique identifier.
   * 
   * You can call the [DescribeVirtualMFADevices](https://help.aliyun.com/document_detail/206210.html) operation to query the serial number of the virtual MFA device bound to Active Directory (AD) users.
   * 
   * This parameter is required.
   * 
   * @example
   * a25f297f-f2e1-4a44-bbf1-5f48a6e5****
   */
  serialNumber?: string;
  static names(): { [key: string]: string } {
    return {
      regionId: 'RegionId',
      serialNumber: 'SerialNumber',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
      serialNumber: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnlockVirtualMFADeviceResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnlockVirtualMFADeviceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UnlockVirtualMFADeviceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UnlockVirtualMFADeviceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UntagResourcesRequest extends $dara.Model {
  /**
   * @remarks
   * Specifies whether to unbind all tags from the resource. This parameter takes effect only when TagKey.N is not specified. Default value: false.
   * 
   * @example
   * false
   */
  all?: boolean;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The resource IDs, which are cloud computer IDs. You can specify 1 to 50 IDs.
   * 
   * This parameter is required.
   * 
   * @example
   * ecd-ia2zw38bi6cm7****
   */
  resourceId?: string[];
  /**
   * @remarks
   * The type of the resource.
   * 
   * Valid values:
   * 
   * * ALIYUN::GWS::INSTANCE: cloud computer.
   * 
   * This parameter is required.
   * 
   * @example
   * ALIYUN::GWS::INSTANCE
   */
  resourceType?: string;
  /**
   * @remarks
   * The tag keys. You can specify 1 to 20 tag keys.
   * 
   * @example
   * TestKey
   */
  tagKey?: string[];
  static names(): { [key: string]: string } {
    return {
      all: 'All',
      regionId: 'RegionId',
      resourceId: 'ResourceId',
      resourceType: 'ResourceType',
      tagKey: 'TagKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      all: 'boolean',
      regionId: 'string',
      resourceId: { 'type': 'array', 'itemType': 'string' },
      resourceType: 'string',
      tagKey: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.resourceId)) {
      $dara.Model.validateArray(this.resourceId);
    }
    if(Array.isArray(this.tagKey)) {
      $dara.Model.validateArray(this.tagKey);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UntagResourcesResponseBody extends $dara.Model {
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UntagResourcesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UntagResourcesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UntagResourcesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateFotaTaskRequest extends $dara.Model {
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The ID of the image update task. You can call the [DescribeFotaTasks](https://help.aliyun.com/document_detail/437001.html) operation to obtain the value of this parameter.
   * 
   * This parameter is required.
   * 
   * @example
   * aot-c4khwrp9ocml4****
   */
  taskUid?: string;
  /**
   * @remarks
   * Specifies whether to automatically push the image update task.
   * 
   * Valid values:
   * 
   * *   Running: automatically pushes the image update task.
   * *   Pending: does not automatically push the image update task.
   * 
   * @example
   * Pending
   */
  userStatus?: string;
  static names(): { [key: string]: string } {
    return {
      regionId: 'RegionId',
      taskUid: 'TaskUid',
      userStatus: 'UserStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
      taskUid: 'string',
      userStatus: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateFotaTaskResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateFotaTaskResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateFotaTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateFotaTaskResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadImageRequest extends $dara.Model {
  /**
   * @remarks
   * The size of the data disk. Valid values: 80 to 500. Unit: GiB.
   * 
   * @example
   * 80
   */
  dataDiskSize?: number;
  /**
   * @remarks
   * The description of the image. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
   * 
   * @example
   * test description
   */
  description?: string;
  /**
   * @remarks
   * Specifies whether to enable security check.
   * 
   * @example
   * true
   */
  enableSecurityCheck?: boolean;
  /**
   * @remarks
   * Specifies whether the image is a GPU-accelerated image.
   * 
   * @example
   * true
   */
  gpuCategory?: boolean;
  /**
   * @remarks
   * The type of the pre-installed GPU driver.
   * 
   * Valid values:
   * 
   * *   gpu_grid9: This GPU driver is used on cloud computers of the following two specifications: graphics – 4 vCPUs, 23 GiB memory, 4 GiB GPU memory, and graphics – 10 vCPUs, 46 GiB memory, 8 GiB GPU memory.
   * *   gpu_custom: You can install the driver later.
   * *   gpu_grid12: This GPU driver is used on graphical cloud computers of specifications other than the following two specifications: graphics – 4 vCPUs, 23 GiB memory, & 4 GiB GPU memory, and graphics – 10 vCPUs, 46 GiB memory, & 8 GiB GPU memory.
   * 
   * @example
   * gpu_grid9
   */
  gpuDriverType?: string;
  /**
   * @remarks
   * The name of the image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
   * 
   * This parameter is required.
   * 
   * @example
   * Win10_Test
   */
  imageName?: string;
  /**
   * @remarks
   * The type of the license that is used to activate the operating system after the image is imported. Valid values:
   * 
   * *   Auto: Elastic Desktop Service detects the operating system of the image and allocates a license to the operating system. In this mode, the system first checks whether a license allocated by an official Alibaba Cloud channel is specified in the `Platform`. If a license allocated by an official Alibaba Cloud channel is specified, the system allocates the license to the imported image. If no such license is specified, the BYOL (Bring Your Own License) mode is used.
   * *   Aliyun: The license that is allocated by an official Alibaba Cloud channel and is specified by `Platform` is used for the operating system distribution.
   * *   BYOL: The license that comes with the source operating system is used. When you use the BYOL mode, make sure that your license key is supported by Alibaba Cloud.
   * 
   * Default value: Auto.
   * 
   * >  Windows 10 cannot be activated by Alibaba Cloud. Set the `LicenseType` to BYOL for Windows 10.
   * 
   * @example
   * Auto
   */
  licenseType?: string;
  /**
   * @remarks
   * The type of the operating system.
   * 
   * Valid values:
   * 
   * *   Linux
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * *   Windows
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   *     <!-- -->
   * 
   * @example
   * Windows
   */
  osType?: string;
  /**
   * @remarks
   * The object path of the image file in Object Storage Service (OSS).
   * 
   * This parameter is required.
   * 
   * @example
   * https://ossbucket:endpoint/object
   */
  ossObjectPath?: string;
  /**
   * @remarks
   * The protocol type.
   * 
   * Valid values:
   * 
   * *   ASP: in-house Adaptive Streaming Protocol (ASP)
   * 
   * @example
   * ASP
   */
  protocolType?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  systemDiskSize?: string;
  static names(): { [key: string]: string } {
    return {
      dataDiskSize: 'DataDiskSize',
      description: 'Description',
      enableSecurityCheck: 'EnableSecurityCheck',
      gpuCategory: 'GpuCategory',
      gpuDriverType: 'GpuDriverType',
      imageName: 'ImageName',
      licenseType: 'LicenseType',
      osType: 'OsType',
      ossObjectPath: 'OssObjectPath',
      protocolType: 'ProtocolType',
      regionId: 'RegionId',
      systemDiskSize: 'SystemDiskSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataDiskSize: 'number',
      description: 'string',
      enableSecurityCheck: 'boolean',
      gpuCategory: 'boolean',
      gpuDriverType: 'string',
      imageName: 'string',
      licenseType: 'string',
      osType: 'string',
      ossObjectPath: 'string',
      protocolType: 'string',
      regionId: 'string',
      systemDiskSize: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadImageResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the custom image.
   * 
   * @example
   * m-d4dwr5tgrgvd****
   */
  imageId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 2CC66B0A-BA3B-5D87-BFBE-11AAAD7A****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      imageId: 'ImageId',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      imageId: 'string',
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadImageResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UploadImageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UploadImageResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VerifyCenRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the CEN instance.
   * 
   * This parameter is required.
   * 
   * @example
   * cen-3gwy16dojz1m65****
   */
  cenId?: string;
  /**
   * @remarks
   * The Alibaba Cloud account to which the CEN instance belongs.
   * 
   * *   If you own the CEN instance, you can skip this parameter.
   * *   If you do not own the CEN instance, you must specify the ID of the account that owns the CEN instance.
   * 
   * @example
   * 102681951715****
   */
  cenOwnerId?: number;
  /**
   * @remarks
   * The IPv4 CIDR block of the associated office network.
   * 
   * This parameter is required.
   * 
   * @example
   * 47.100.XX.XX
   */
  cidrBlock?: string;
  /**
   * @remarks
   * The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The verification code. If you do not own the CEN instance, you must call the [SendVerifyCode](https://help.aliyun.com/document_detail/436847.html) operation to obtain a verification code.
   * 
   * @example
   * 12****
   */
  verifyCode?: string;
  static names(): { [key: string]: string } {
    return {
      cenId: 'CenId',
      cenOwnerId: 'CenOwnerId',
      cidrBlock: 'CidrBlock',
      regionId: 'RegionId',
      verifyCode: 'VerifyCode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cenId: 'string',
      cenOwnerId: 'number',
      cidrBlock: 'string',
      regionId: 'string',
      verifyCode: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VerifyCenResponseBody extends $dara.Model {
  /**
   * @remarks
   * The recommended IPv4 CIDR blocks. Three CIDR blocks are randomly recommended. This parameter is returned when the `Status` value is `Conflict`.
   */
  cidrBlocks?: string[];
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0AF9D857-AE96-53D6-B317-5DD665EC4EC0
   */
  requestId?: string;
  /**
   * @remarks
   * The routes provided by the CEN instance.
   */
  routeEntries?: VerifyCenResponseBodyRouteEntries[];
  /**
   * @remarks
   * The check result of CIDR block conflict.
   * 
   * Valid values:
   * 
   * *   InvalidCen.CenUidInvalid: The Alibaba Cloud account is invalid or the Alibaba Cloud account does not have the permission to access Elastic Desktop Service.
   * *   VerifyCode.InvalidTokenCode: The verification code is invalid.
   * *   VerifyCode.ReachTokenRetryTime: The maximum number of times for entering a verification code reaches the limit.
   * *   Conflict: A CIDR block conflict exists. If the verification result of at least one route is Conflict, Conflict is returned for this parameter.
   * *   Access: The verification is passed. If the verification result for all routes is Access, Access is returned for this parameter.
   * *   InvalidCen.ParameterCenInstanceId: The Alibaba Cloud account does not own the CEN instance.
   * 
   * @example
   * Access
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      cidrBlocks: 'CidrBlocks',
      requestId: 'RequestId',
      routeEntries: 'RouteEntries',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cidrBlocks: { 'type': 'array', 'itemType': 'string' },
      requestId: 'string',
      routeEntries: { 'type': 'array', 'itemType': VerifyCenResponseBodyRouteEntries },
      status: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.cidrBlocks)) {
      $dara.Model.validateArray(this.cidrBlocks);
    }
    if(Array.isArray(this.routeEntries)) {
      $dara.Model.validateArray(this.routeEntries);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VerifyCenResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: VerifyCenResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: VerifyCenResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class WakeupDesktopsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  desktopId?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      desktopId: 'DesktopId',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desktopId: { 'type': 'array', 'itemType': 'string' },
      regionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.desktopId)) {
      $dara.Model.validateArray(this.desktopId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class WakeupDesktopsResponseBody extends $dara.Model {
  /**
   * @example
   * 6557DBA9-CF3E-5C1B-B1F1-68FDA599****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class WakeupDesktopsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: WakeupDesktopsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: WakeupDesktopsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}


export default class Client extends OpenApi {

  constructor(config: $OpenApiUtil.Config) {
    super(config);
    this._signatureAlgorithm = "v2";
    this._endpointRule = "regional";
    this.checkConfig(config);
    this._endpoint = this.getEndpoint("ecd", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
  }


  getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {[key: string ]: string}, endpoint: string): string {
    if (!$dara.isNull(endpoint)) {
      return endpoint;
    }

    if (!$dara.isNull(endpointMap) && !$dara.isNull(endpointMap[regionId])) {
      return endpointMap[regionId];
    }

    return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
  }

  /**
   * Unlocks a convenience office network that is automatically locked due to a long idle period of time.
   * 
   * @remarks
   * If you do not create any cloud computer in a convenience office network within 15 days, the office network is automatically locked and virtual private cloud (VPC) resources are released. If you want to resume the office network, you can call this operation to unlock the office network.
   * 
   * @param request - ActivateOfficeSiteRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ActivateOfficeSiteResponse
   */
  async activateOfficeSiteWithOptions(request: ActivateOfficeSiteRequest, runtime: $dara.RuntimeOptions): Promise<ActivateOfficeSiteResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ActivateOfficeSite",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ActivateOfficeSiteResponse>(await this.callApi(params, req, runtime), new ActivateOfficeSiteResponse({}));
    } else {
      return $dara.cast<ActivateOfficeSiteResponse>(await this.execute(params, req, runtime), new ActivateOfficeSiteResponse({}));
    }

  }

  /**
   * Unlocks a convenience office network that is automatically locked due to a long idle period of time.
   * 
   * @remarks
   * If you do not create any cloud computer in a convenience office network within 15 days, the office network is automatically locked and virtual private cloud (VPC) resources are released. If you want to resume the office network, you can call this operation to unlock the office network.
   * 
   * @param request - ActivateOfficeSiteRequest
   * @returns ActivateOfficeSiteResponse
   */
  async activateOfficeSite(request: ActivateOfficeSiteRequest): Promise<ActivateOfficeSiteResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.activateOfficeSiteWithOptions(request, runtime);
  }

  /**
   * 添加桌面超卖用户组
   * 
   * @param request - AddDesktopOversoldUserGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddDesktopOversoldUserGroupResponse
   */
  async addDesktopOversoldUserGroupWithOptions(request: AddDesktopOversoldUserGroupRequest, runtime: $dara.RuntimeOptions): Promise<AddDesktopOversoldUserGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.oversoldGroupId)) {
      query["OversoldGroupId"] = request.oversoldGroupId;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddDesktopOversoldUserGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AddDesktopOversoldUserGroupResponse>(await this.callApi(params, req, runtime), new AddDesktopOversoldUserGroupResponse({}));
    } else {
      return $dara.cast<AddDesktopOversoldUserGroupResponse>(await this.execute(params, req, runtime), new AddDesktopOversoldUserGroupResponse({}));
    }

  }

  /**
   * 添加桌面超卖用户组
   * 
   * @param request - AddDesktopOversoldUserGroupRequest
   * @returns AddDesktopOversoldUserGroupResponse
   */
  async addDesktopOversoldUserGroup(request: AddDesktopOversoldUserGroupRequest): Promise<AddDesktopOversoldUserGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addDesktopOversoldUserGroupWithOptions(request, runtime);
  }

  /**
   * Adds trusted devices.
   * 
   * @remarks
   * Each device can be registered in only one Alibaba Cloud account. If you register a device that has been registered in another Alibaba Cloud account, an error is reported.
   * 
   * @param request - AddDevicesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddDevicesResponse
   */
  async addDevicesWithOptions(request: AddDevicesRequest, runtime: $dara.RuntimeOptions): Promise<AddDevicesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientType)) {
      query["ClientType"] = request.clientType;
    }

    if (!$dara.isNull(request.deviceIds)) {
      query["DeviceIds"] = request.deviceIds;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddDevices",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AddDevicesResponse>(await this.callApi(params, req, runtime), new AddDevicesResponse({}));
    } else {
      return $dara.cast<AddDevicesResponse>(await this.execute(params, req, runtime), new AddDevicesResponse({}));
    }

  }

  /**
   * Adds trusted devices.
   * 
   * @remarks
   * Each device can be registered in only one Alibaba Cloud account. If you register a device that has been registered in another Alibaba Cloud account, an error is reported.
   * 
   * @param request - AddDevicesRequest
   * @returns AddDevicesResponse
   */
  async addDevices(request: AddDevicesRequest): Promise<AddDevicesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addDevicesWithOptions(request, runtime);
  }

  /**
   * Shares a folder of a cloud disk with other users.
   * 
   * @remarks
   * You can call this operation to share a specific folder with other users. You can also configure the folder permissions.
   * 
   * @param tmpReq - AddFilePermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddFilePermissionResponse
   */
  async addFilePermissionWithOptions(tmpReq: AddFilePermissionRequest, runtime: $dara.RuntimeOptions): Promise<AddFilePermissionResponse> {
    tmpReq.validate();
    let request = new AddFilePermissionShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.memberList)) {
      request.memberListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.memberList, "MemberList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.fileId)) {
      query["FileId"] = request.fileId;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.memberListShrink)) {
      query["MemberList"] = request.memberListShrink;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddFilePermission",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AddFilePermissionResponse>(await this.callApi(params, req, runtime), new AddFilePermissionResponse({}));
    } else {
      return $dara.cast<AddFilePermissionResponse>(await this.execute(params, req, runtime), new AddFilePermissionResponse({}));
    }

  }

  /**
   * Shares a folder of a cloud disk with other users.
   * 
   * @remarks
   * You can call this operation to share a specific folder with other users. You can also configure the folder permissions.
   * 
   * @param request - AddFilePermissionRequest
   * @returns AddFilePermissionResponse
   */
  async addFilePermission(request: AddFilePermissionRequest): Promise<AddFilePermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addFilePermissionWithOptions(request, runtime);
  }

  /**
   * Adds authorized end users of a desktop group.
   * 
   * @param request - AddUserToDesktopGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddUserToDesktopGroupResponse
   */
  async addUserToDesktopGroupWithOptions(request: AddUserToDesktopGroupRequest, runtime: $dara.RuntimeOptions): Promise<AddUserToDesktopGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.desktopGroupIds)) {
      query["DesktopGroupIds"] = request.desktopGroupIds;
    }

    if (!$dara.isNull(request.endUserIds)) {
      query["EndUserIds"] = request.endUserIds;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddUserToDesktopGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AddUserToDesktopGroupResponse>(await this.callApi(params, req, runtime), new AddUserToDesktopGroupResponse({}));
    } else {
      return $dara.cast<AddUserToDesktopGroupResponse>(await this.execute(params, req, runtime), new AddUserToDesktopGroupResponse({}));
    }

  }

  /**
   * Adds authorized end users of a desktop group.
   * 
   * @param request - AddUserToDesktopGroupRequest
   * @returns AddUserToDesktopGroupResponse
   */
  async addUserToDesktopGroup(request: AddUserToDesktopGroupRequest): Promise<AddUserToDesktopGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addUserToDesktopGroupWithOptions(request, runtime);
  }

  /**
   * 添加用户到超卖用户组
   * 
   * @param request - AddUserToDesktopOversoldUserGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddUserToDesktopOversoldUserGroupResponse
   */
  async addUserToDesktopOversoldUserGroupWithOptions(request: AddUserToDesktopOversoldUserGroupRequest, runtime: $dara.RuntimeOptions): Promise<AddUserToDesktopOversoldUserGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.addUserAmount)) {
      query["AddUserAmount"] = request.addUserAmount;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.oversoldGroupId)) {
      query["OversoldGroupId"] = request.oversoldGroupId;
    }

    if (!$dara.isNull(request.userGroupId)) {
      query["UserGroupId"] = request.userGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddUserToDesktopOversoldUserGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AddUserToDesktopOversoldUserGroupResponse>(await this.callApi(params, req, runtime), new AddUserToDesktopOversoldUserGroupResponse({}));
    } else {
      return $dara.cast<AddUserToDesktopOversoldUserGroupResponse>(await this.execute(params, req, runtime), new AddUserToDesktopOversoldUserGroupResponse({}));
    }

  }

  /**
   * 添加用户到超卖用户组
   * 
   * @param request - AddUserToDesktopOversoldUserGroupRequest
   * @returns AddUserToDesktopOversoldUserGroupResponse
   */
  async addUserToDesktopOversoldUserGroup(request: AddUserToDesktopOversoldUserGroupRequest): Promise<AddUserToDesktopOversoldUserGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addUserToDesktopOversoldUserGroupWithOptions(request, runtime);
  }

  /**
   * Apply an automatic snapshot policy to cloud computers. After the automatic snapshot policy is applied to the cloud computers, Elastic Desktop Service automatically creates snapshots for the cloud computers based on the time specified in the automatic snapshot policy.
   * 
   * @remarks
   * You can also associate an automatic snapshot policy with a cloud desktop in the Elastic Desktop Service (EDS) console. To do so, perform the following steps: 1. Log on to the EDS console. 2. Choose Desktops and Groups > Desktops in the left-side navigation pane. 3. Find the cloud desktop that you want to manage on the Cloud Desktops page and choose More > Change Automatic Snapshot Policy in the Actions column. 4. Configure a policy for the cloud desktop as prompted in the Change Automatic Snapshot Policy panel.
   * After you associate an automatic snapshot policy with the cloud desktop, the system creates snapshots for the cloud desktop based on the policy.
   * 
   * @param request - ApplyAutoSnapshotPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApplyAutoSnapshotPolicyResponse
   */
  async applyAutoSnapshotPolicyWithOptions(request: ApplyAutoSnapshotPolicyRequest, runtime: $dara.RuntimeOptions): Promise<ApplyAutoSnapshotPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ApplyAutoSnapshotPolicy",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ApplyAutoSnapshotPolicyResponse>(await this.callApi(params, req, runtime), new ApplyAutoSnapshotPolicyResponse({}));
    } else {
      return $dara.cast<ApplyAutoSnapshotPolicyResponse>(await this.execute(params, req, runtime), new ApplyAutoSnapshotPolicyResponse({}));
    }

  }

  /**
   * Apply an automatic snapshot policy to cloud computers. After the automatic snapshot policy is applied to the cloud computers, Elastic Desktop Service automatically creates snapshots for the cloud computers based on the time specified in the automatic snapshot policy.
   * 
   * @remarks
   * You can also associate an automatic snapshot policy with a cloud desktop in the Elastic Desktop Service (EDS) console. To do so, perform the following steps: 1. Log on to the EDS console. 2. Choose Desktops and Groups > Desktops in the left-side navigation pane. 3. Find the cloud desktop that you want to manage on the Cloud Desktops page and choose More > Change Automatic Snapshot Policy in the Actions column. 4. Configure a policy for the cloud desktop as prompted in the Change Automatic Snapshot Policy panel.
   * After you associate an automatic snapshot policy with the cloud desktop, the system creates snapshots for the cloud desktop based on the policy.
   * 
   * @param request - ApplyAutoSnapshotPolicyRequest
   * @returns ApplyAutoSnapshotPolicyResponse
   */
  async applyAutoSnapshotPolicy(request: ApplyAutoSnapshotPolicyRequest): Promise<ApplyAutoSnapshotPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.applyAutoSnapshotPolicyWithOptions(request, runtime);
  }

  /**
   * Applies for the coordinate permissions.
   * 
   * @param request - ApplyCoordinatePrivilegeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApplyCoordinatePrivilegeResponse
   */
  async applyCoordinatePrivilegeWithOptions(request: ApplyCoordinatePrivilegeRequest, runtime: $dara.RuntimeOptions): Promise<ApplyCoordinatePrivilegeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.coId)) {
      query["CoId"] = request.coId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.userType)) {
      query["UserType"] = request.userType;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ApplyCoordinatePrivilege",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ApplyCoordinatePrivilegeResponse>(await this.callApi(params, req, runtime), new ApplyCoordinatePrivilegeResponse({}));
    } else {
      return $dara.cast<ApplyCoordinatePrivilegeResponse>(await this.execute(params, req, runtime), new ApplyCoordinatePrivilegeResponse({}));
    }

  }

  /**
   * Applies for the coordinate permissions.
   * 
   * @param request - ApplyCoordinatePrivilegeRequest
   * @returns ApplyCoordinatePrivilegeResponse
   */
  async applyCoordinatePrivilege(request: ApplyCoordinatePrivilegeRequest): Promise<ApplyCoordinatePrivilegeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.applyCoordinatePrivilegeWithOptions(request, runtime);
  }

  /**
   * Applies for coordination monitoring. This operation is mainly used in administrator assistance scenarios and education scenarios.
   * 
   * @param request - ApplyCoordinationForMonitoringRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApplyCoordinationForMonitoringResponse
   */
  async applyCoordinationForMonitoringWithOptions(request: ApplyCoordinationForMonitoringRequest, runtime: $dara.RuntimeOptions): Promise<ApplyCoordinationForMonitoringResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.coordinatePolicyType)) {
      query["CoordinatePolicyType"] = request.coordinatePolicyType;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.initiatorType)) {
      query["InitiatorType"] = request.initiatorType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceCandidates)) {
      query["ResourceCandidates"] = request.resourceCandidates;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ApplyCoordinationForMonitoring",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ApplyCoordinationForMonitoringResponse>(await this.callApi(params, req, runtime), new ApplyCoordinationForMonitoringResponse({}));
    } else {
      return $dara.cast<ApplyCoordinationForMonitoringResponse>(await this.execute(params, req, runtime), new ApplyCoordinationForMonitoringResponse({}));
    }

  }

  /**
   * Applies for coordination monitoring. This operation is mainly used in administrator assistance scenarios and education scenarios.
   * 
   * @param request - ApplyCoordinationForMonitoringRequest
   * @returns ApplyCoordinationForMonitoringResponse
   */
  async applyCoordinationForMonitoring(request: ApplyCoordinationForMonitoringRequest): Promise<ApplyCoordinationForMonitoringResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.applyCoordinationForMonitoringWithOptions(request, runtime);
  }

  /**
   * Allows you to upgrade images.
   * 
   * @remarks
   * The cloud computers for which you want to allow image updates must be in the Running state.
   * 
   * @param request - ApproveFotaUpdateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApproveFotaUpdateResponse
   */
  async approveFotaUpdateWithOptions(request: ApproveFotaUpdateRequest, runtime: $dara.RuntimeOptions): Promise<ApproveFotaUpdateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appVersion)) {
      query["AppVersion"] = request.appVersion;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ApproveFotaUpdate",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ApproveFotaUpdateResponse>(await this.callApi(params, req, runtime), new ApproveFotaUpdateResponse({}));
    } else {
      return $dara.cast<ApproveFotaUpdateResponse>(await this.execute(params, req, runtime), new ApproveFotaUpdateResponse({}));
    }

  }

  /**
   * Allows you to upgrade images.
   * 
   * @remarks
   * The cloud computers for which you want to allow image updates must be in the Running state.
   * 
   * @param request - ApproveFotaUpdateRequest
   * @returns ApproveFotaUpdateResponse
   */
  async approveFotaUpdate(request: ApproveFotaUpdateRequest): Promise<ApproveFotaUpdateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.approveFotaUpdateWithOptions(request, runtime);
  }

  /**
   * Binds a premium bandwidth plan to an office network. A premium bandwidth plan is used together with only one office network.
   * 
   * @param request - AssociateNetworkPackageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AssociateNetworkPackageResponse
   */
  async associateNetworkPackageWithOptions(request: AssociateNetworkPackageRequest, runtime: $dara.RuntimeOptions): Promise<AssociateNetworkPackageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.networkPackageId)) {
      query["NetworkPackageId"] = request.networkPackageId;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AssociateNetworkPackage",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AssociateNetworkPackageResponse>(await this.callApi(params, req, runtime), new AssociateNetworkPackageResponse({}));
    } else {
      return $dara.cast<AssociateNetworkPackageResponse>(await this.execute(params, req, runtime), new AssociateNetworkPackageResponse({}));
    }

  }

  /**
   * Binds a premium bandwidth plan to an office network. A premium bandwidth plan is used together with only one office network.
   * 
   * @param request - AssociateNetworkPackageRequest
   * @returns AssociateNetworkPackageResponse
   */
  async associateNetworkPackage(request: AssociateNetworkPackageRequest): Promise<AssociateNetworkPackageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.associateNetworkPackageWithOptions(request, runtime);
  }

  /**
   * Binds an advanced office network to a Cloud Enterprise Network (CEN) instance.
   * 
   * @remarks
   * Prerequisites
   * *   A CEN instance is created.
   * *   The office network is an advanced office network, and the account system type is convenient account.
   * >  The office network is added to the CEN instance when you create the instance. An office network can be added to only one CEN instance.
   * 
   * @param request - AttachCenRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AttachCenResponse
   */
  async attachCenWithOptions(request: AttachCenRequest, runtime: $dara.RuntimeOptions): Promise<AttachCenResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cenId)) {
      query["CenId"] = request.cenId;
    }

    if (!$dara.isNull(request.cenOwnerId)) {
      query["CenOwnerId"] = request.cenOwnerId;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.verifyCode)) {
      query["VerifyCode"] = request.verifyCode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AttachCen",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AttachCenResponse>(await this.callApi(params, req, runtime), new AttachCenResponse({}));
    } else {
      return $dara.cast<AttachCenResponse>(await this.execute(params, req, runtime), new AttachCenResponse({}));
    }

  }

  /**
   * Binds an advanced office network to a Cloud Enterprise Network (CEN) instance.
   * 
   * @remarks
   * Prerequisites
   * *   A CEN instance is created.
   * *   The office network is an advanced office network, and the account system type is convenient account.
   * >  The office network is added to the CEN instance when you create the instance. An office network can be added to only one CEN instance.
   * 
   * @param request - AttachCenRequest
   * @returns AttachCenResponse
   */
  async attachCen(request: AttachCenRequest): Promise<AttachCenResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.attachCenWithOptions(request, runtime);
  }

  /**
   * Binds a hardware client to a user.
   * 
   * @param request - AttachEndUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AttachEndUserResponse
   */
  async attachEndUserWithOptions(request: AttachEndUserRequest, runtime: $dara.RuntimeOptions): Promise<AttachEndUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.adDomain)) {
      query["AdDomain"] = request.adDomain;
    }

    if (!$dara.isNull(request.clientType)) {
      query["ClientType"] = request.clientType;
    }

    if (!$dara.isNull(request.deviceId)) {
      query["DeviceId"] = request.deviceId;
    }

    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.userType)) {
      query["UserType"] = request.userType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AttachEndUser",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<AttachEndUserResponse>(await this.callApi(params, req, runtime), new AttachEndUserResponse({}));
    } else {
      return $dara.cast<AttachEndUserResponse>(await this.execute(params, req, runtime), new AttachEndUserResponse({}));
    }

  }

  /**
   * Binds a hardware client to a user.
   * 
   * @param request - AttachEndUserRequest
   * @returns AttachEndUserResponse
   */
  async attachEndUser(request: AttachEndUserRequest): Promise<AttachEndUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.attachEndUserWithOptions(request, runtime);
  }

  /**
   * 绑定配置组
   * 
   * @param request - BindConfigGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BindConfigGroupResponse
   */
  async bindConfigGroupWithOptions(request: BindConfigGroupRequest, runtime: $dara.RuntimeOptions): Promise<BindConfigGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceInfos)) {
      query["ResourceInfos"] = request.resourceInfos;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "BindConfigGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<BindConfigGroupResponse>(await this.callApi(params, req, runtime), new BindConfigGroupResponse({}));
    } else {
      return $dara.cast<BindConfigGroupResponse>(await this.execute(params, req, runtime), new BindConfigGroupResponse({}));
    }

  }

  /**
   * 绑定配置组
   * 
   * @param request - BindConfigGroupRequest
   * @returns BindConfigGroupResponse
   */
  async bindConfigGroup(request: BindConfigGroupRequest): Promise<BindConfigGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.bindConfigGroupWithOptions(request, runtime);
  }

  /**
   * Cancels an automatic snapshot policy for cloud computers.
   * 
   * @param request - CancelAutoSnapshotPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CancelAutoSnapshotPolicyResponse
   */
  async cancelAutoSnapshotPolicyWithOptions(request: CancelAutoSnapshotPolicyRequest, runtime: $dara.RuntimeOptions): Promise<CancelAutoSnapshotPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CancelAutoSnapshotPolicy",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CancelAutoSnapshotPolicyResponse>(await this.callApi(params, req, runtime), new CancelAutoSnapshotPolicyResponse({}));
    } else {
      return $dara.cast<CancelAutoSnapshotPolicyResponse>(await this.execute(params, req, runtime), new CancelAutoSnapshotPolicyResponse({}));
    }

  }

  /**
   * Cancels an automatic snapshot policy for cloud computers.
   * 
   * @param request - CancelAutoSnapshotPolicyRequest
   * @returns CancelAutoSnapshotPolicyResponse
   */
  async cancelAutoSnapshotPolicy(request: CancelAutoSnapshotPolicyRequest): Promise<CancelAutoSnapshotPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.cancelAutoSnapshotPolicyWithOptions(request, runtime);
  }

  /**
   * Cancels a file sharing task.
   * 
   * @param request - CancelCdsFileShareLinkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CancelCdsFileShareLinkResponse
   */
  async cancelCdsFileShareLinkWithOptions(request: CancelCdsFileShareLinkRequest, runtime: $dara.RuntimeOptions): Promise<CancelCdsFileShareLinkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.shareId)) {
      query["ShareId"] = request.shareId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CancelCdsFileShareLink",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CancelCdsFileShareLinkResponse>(await this.callApi(params, req, runtime), new CancelCdsFileShareLinkResponse({}));
    } else {
      return $dara.cast<CancelCdsFileShareLinkResponse>(await this.execute(params, req, runtime), new CancelCdsFileShareLinkResponse({}));
    }

  }

  /**
   * Cancels a file sharing task.
   * 
   * @param request - CancelCdsFileShareLinkRequest
   * @returns CancelCdsFileShareLinkResponse
   */
  async cancelCdsFileShareLink(request: CancelCdsFileShareLinkRequest): Promise<CancelCdsFileShareLinkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.cancelCdsFileShareLinkWithOptions(request, runtime);
  }

  /**
   * Cancels monitoring on stream collaboration.
   * 
   * @param request - CancelCoordinationForMonitoringRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CancelCoordinationForMonitoringResponse
   */
  async cancelCoordinationForMonitoringWithOptions(request: CancelCoordinationForMonitoringRequest, runtime: $dara.RuntimeOptions): Promise<CancelCoordinationForMonitoringResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.coIds)) {
      query["CoIds"] = request.coIds;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.userType)) {
      query["UserType"] = request.userType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CancelCoordinationForMonitoring",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CancelCoordinationForMonitoringResponse>(await this.callApi(params, req, runtime), new CancelCoordinationForMonitoringResponse({}));
    } else {
      return $dara.cast<CancelCoordinationForMonitoringResponse>(await this.execute(params, req, runtime), new CancelCoordinationForMonitoringResponse({}));
    }

  }

  /**
   * Cancels monitoring on stream collaboration.
   * 
   * @param request - CancelCoordinationForMonitoringRequest
   * @returns CancelCoordinationForMonitoringResponse
   */
  async cancelCoordinationForMonitoring(request: CancelCoordinationForMonitoringRequest): Promise<CancelCoordinationForMonitoringResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.cancelCoordinationForMonitoringWithOptions(request, runtime);
  }

  /**
   * Cancels the operation of copying an image to another region.
   * 
   * @param request - CancelCopyImageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CancelCopyImageResponse
   */
  async cancelCopyImageWithOptions(request: CancelCopyImageRequest, runtime: $dara.RuntimeOptions): Promise<CancelCopyImageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CancelCopyImage",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CancelCopyImageResponse>(await this.callApi(params, req, runtime), new CancelCopyImageResponse({}));
    } else {
      return $dara.cast<CancelCopyImageResponse>(await this.execute(params, req, runtime), new CancelCopyImageResponse({}));
    }

  }

  /**
   * Cancels the operation of copying an image to another region.
   * 
   * @param request - CancelCopyImageRequest
   * @returns CancelCopyImageResponse
   */
  async cancelCopyImage(request: CancelCopyImageRequest): Promise<CancelCopyImageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.cancelCopyImageWithOptions(request, runtime);
  }

  /**
   * Clones an existing policy.
   * 
   * @param request - ClonePolicyGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ClonePolicyGroupResponse
   */
  async clonePolicyGroupWithOptions(request: ClonePolicyGroupRequest, runtime: $dara.RuntimeOptions): Promise<ClonePolicyGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ClonePolicyGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ClonePolicyGroupResponse>(await this.callApi(params, req, runtime), new ClonePolicyGroupResponse({}));
    } else {
      return $dara.cast<ClonePolicyGroupResponse>(await this.execute(params, req, runtime), new ClonePolicyGroupResponse({}));
    }

  }

  /**
   * Clones an existing policy.
   * 
   * @param request - ClonePolicyGroupRequest
   * @returns ClonePolicyGroupResponse
   */
  async clonePolicyGroup(request: ClonePolicyGroupRequest): Promise<ClonePolicyGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.clonePolicyGroupWithOptions(request, runtime);
  }

  /**
   * Completes a file uploading task.
   * 
   * @param request - CompleteCdsFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CompleteCdsFileResponse
   */
  async completeCdsFileWithOptions(request: CompleteCdsFileRequest, runtime: $dara.RuntimeOptions): Promise<CompleteCdsFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.fileId)) {
      query["FileId"] = request.fileId;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.uploadId)) {
      query["UploadId"] = request.uploadId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CompleteCdsFile",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CompleteCdsFileResponse>(await this.callApi(params, req, runtime), new CompleteCdsFileResponse({}));
    } else {
      return $dara.cast<CompleteCdsFileResponse>(await this.execute(params, req, runtime), new CompleteCdsFileResponse({}));
    }

  }

  /**
   * Completes a file uploading task.
   * 
   * @param request - CompleteCdsFileRequest
   * @returns CompleteCdsFileResponse
   */
  async completeCdsFile(request: CompleteCdsFileRequest): Promise<CompleteCdsFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.completeCdsFileWithOptions(request, runtime);
  }

  /**
   * Configures a conditional forwarder and trust relationship for a high-definition experience (HDX)-based office network (formerly workspace). You can call the operation to configure a trust relationship for an enterprise Active Directory (AD) office network.
   * 
   * @param request - ConfigADConnectorTrustRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ConfigADConnectorTrustResponse
   */
  async configADConnectorTrustWithOptions(request: ConfigADConnectorTrustRequest, runtime: $dara.RuntimeOptions): Promise<ConfigADConnectorTrustResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.rdsLicenseDomain)) {
      query["RdsLicenseDomain"] = request.rdsLicenseDomain;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.trustKey)) {
      query["TrustKey"] = request.trustKey;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ConfigADConnectorTrust",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ConfigADConnectorTrustResponse>(await this.callApi(params, req, runtime), new ConfigADConnectorTrustResponse({}));
    } else {
      return $dara.cast<ConfigADConnectorTrustResponse>(await this.execute(params, req, runtime), new ConfigADConnectorTrustResponse({}));
    }

  }

  /**
   * Configures a conditional forwarder and trust relationship for a high-definition experience (HDX)-based office network (formerly workspace). You can call the operation to configure a trust relationship for an enterprise Active Directory (AD) office network.
   * 
   * @param request - ConfigADConnectorTrustRequest
   * @returns ConfigADConnectorTrustResponse
   */
  async configADConnectorTrust(request: ConfigADConnectorTrustRequest): Promise<ConfigADConnectorTrustResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.configADConnectorTrustWithOptions(request, runtime);
  }

  /**
   * @param request - ConfigADConnectorUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ConfigADConnectorUserResponse
   */
  async configADConnectorUserWithOptions(request: ConfigADConnectorUserRequest, runtime: $dara.RuntimeOptions): Promise<ConfigADConnectorUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainPassword)) {
      query["DomainPassword"] = request.domainPassword;
    }

    if (!$dara.isNull(request.domainUserName)) {
      query["DomainUserName"] = request.domainUserName;
    }

    if (!$dara.isNull(request.OUName)) {
      query["OUName"] = request.OUName;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ConfigADConnectorUser",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ConfigADConnectorUserResponse>(await this.callApi(params, req, runtime), new ConfigADConnectorUserResponse({}));
    } else {
      return $dara.cast<ConfigADConnectorUserResponse>(await this.execute(params, req, runtime), new ConfigADConnectorUserResponse({}));
    }

  }

  /**
   * @param request - ConfigADConnectorUserRequest
   * @returns ConfigADConnectorUserResponse
   */
  async configADConnectorUser(request: ConfigADConnectorUserRequest): Promise<ConfigADConnectorUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.configADConnectorUserWithOptions(request, runtime);
  }

  /**
   * Copies a file or a directory.
   * 
   * @param request - CopyCdsFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CopyCdsFileResponse
   */
  async copyCdsFileWithOptions(request: CopyCdsFileRequest, runtime: $dara.RuntimeOptions): Promise<CopyCdsFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoRename)) {
      query["AutoRename"] = request.autoRename;
    }

    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.fileId)) {
      query["FileId"] = request.fileId;
    }

    if (!$dara.isNull(request.fileReceiverId)) {
      query["FileReceiverId"] = request.fileReceiverId;
    }

    if (!$dara.isNull(request.fileReceiverType)) {
      query["FileReceiverType"] = request.fileReceiverType;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.parentFolderId)) {
      query["ParentFolderId"] = request.parentFolderId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CopyCdsFile",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CopyCdsFileResponse>(await this.callApi(params, req, runtime), new CopyCdsFileResponse({}));
    } else {
      return $dara.cast<CopyCdsFileResponse>(await this.execute(params, req, runtime), new CopyCdsFileResponse({}));
    }

  }

  /**
   * Copies a file or a directory.
   * 
   * @param request - CopyCdsFileRequest
   * @returns CopyCdsFileResponse
   */
  async copyCdsFile(request: CopyCdsFileRequest): Promise<CopyCdsFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.copyCdsFileWithOptions(request, runtime);
  }

  /**
   * Copy an image to another region. If you want to share an image across regions, you can call this operation to copy the image to the destination region and then share the image.
   * 
   * @param request - CopyImageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CopyImageResponse
   */
  async copyImageWithOptions(request: CopyImageRequest, runtime: $dara.RuntimeOptions): Promise<CopyImageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.destinationDescription)) {
      query["DestinationDescription"] = request.destinationDescription;
    }

    if (!$dara.isNull(request.destinationImageName)) {
      query["DestinationImageName"] = request.destinationImageName;
    }

    if (!$dara.isNull(request.destinationRegionId)) {
      query["DestinationRegionId"] = request.destinationRegionId;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CopyImage",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CopyImageResponse>(await this.callApi(params, req, runtime), new CopyImageResponse({}));
    } else {
      return $dara.cast<CopyImageResponse>(await this.execute(params, req, runtime), new CopyImageResponse({}));
    }

  }

  /**
   * Copy an image to another region. If you want to share an image across regions, you can call this operation to copy the image to the destination region and then share the image.
   * 
   * @param request - CopyImageRequest
   * @returns CopyImageResponse
   */
  async copyImage(request: CopyImageRequest): Promise<CopyImageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.copyImageWithOptions(request, runtime);
  }

  /**
   * Creates a directory of the Active Directory (AD) type.
   * 
   * @remarks
   * An AD directory is used to connect to an enterprise\\"s existing Active Directory and is suitable for large-scale cloud computer deployment. You are charged directory fees when you connect your AD to cloud computers. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
   * 
   * @param request - CreateADConnectorDirectoryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateADConnectorDirectoryResponse
   */
  async createADConnectorDirectoryWithOptions(request: CreateADConnectorDirectoryRequest, runtime: $dara.RuntimeOptions): Promise<CreateADConnectorDirectoryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopAccessType)) {
      query["DesktopAccessType"] = request.desktopAccessType;
    }

    if (!$dara.isNull(request.directoryName)) {
      query["DirectoryName"] = request.directoryName;
    }

    if (!$dara.isNull(request.dnsAddress)) {
      query["DnsAddress"] = request.dnsAddress;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.domainPassword)) {
      query["DomainPassword"] = request.domainPassword;
    }

    if (!$dara.isNull(request.domainUserName)) {
      query["DomainUserName"] = request.domainUserName;
    }

    if (!$dara.isNull(request.enableAdminAccess)) {
      query["EnableAdminAccess"] = request.enableAdminAccess;
    }

    if (!$dara.isNull(request.mfaEnabled)) {
      query["MfaEnabled"] = request.mfaEnabled;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.specification)) {
      query["Specification"] = request.specification;
    }

    if (!$dara.isNull(request.subDomainDnsAddress)) {
      query["SubDomainDnsAddress"] = request.subDomainDnsAddress;
    }

    if (!$dara.isNull(request.subDomainName)) {
      query["SubDomainName"] = request.subDomainName;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateADConnectorDirectory",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateADConnectorDirectoryResponse>(await this.callApi(params, req, runtime), new CreateADConnectorDirectoryResponse({}));
    } else {
      return $dara.cast<CreateADConnectorDirectoryResponse>(await this.execute(params, req, runtime), new CreateADConnectorDirectoryResponse({}));
    }

  }

  /**
   * Creates a directory of the Active Directory (AD) type.
   * 
   * @remarks
   * An AD directory is used to connect to an enterprise\\"s existing Active Directory and is suitable for large-scale cloud computer deployment. You are charged directory fees when you connect your AD to cloud computers. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
   * 
   * @param request - CreateADConnectorDirectoryRequest
   * @returns CreateADConnectorDirectoryResponse
   */
  async createADConnectorDirectory(request: CreateADConnectorDirectoryRequest): Promise<CreateADConnectorDirectoryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createADConnectorDirectoryWithOptions(request, runtime);
  }

  /**
   * Creates an enterprise Active Directory (AD) office network (formerly workspace). Elastic Desktop Service supports the following types of accounts: convenience accounts and enterprise AD accounts.
   * 
   * @remarks
   * When you create an enterprise AD office network, the system automatically creates an AD connector to connect to an enterprise AD. You are charged for the AD connector. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
   * After you call this operation to create an AD office network, you must perform the following steps to complete AD domain setting:
   * 1.  Configure a conditional forwarder in a Domain Name System (DNS) server.
   * 2.  Configure a trust relationship in an AD domain controller and call the [ConfigADConnectorTrust](https://help.aliyun.com/document_detail/311258.html) operation to configure the trust relationship with the AD office network.
   * 3.  Call the [ListUserAdOrganizationUnits](https://help.aliyun.com/document_detail/311259.html) operation to query a list of organizational units (OUs) of the AD domain, and call the [ConfigADConnectorUser](https://help.aliyun.com/document_detail/311262.html) operation to specify an OU and administrator for the AD office network.
   *     >  When you create the AD office network, take note of the DomainUserName and DomainPassword parameters. If you specify the parameters, you need to only configure a conditional forwarder. If you do not specify the parameters, you must configure a conditional forwarder, trust relationship, and OU as prompted.
   * For more information, see [Create and manage enterprise AD office networks](https://help.aliyun.com/document_detail/214469.html).
   * 
   * @param request - CreateADConnectorOfficeSiteRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateADConnectorOfficeSiteResponse
   */
  async createADConnectorOfficeSiteWithOptions(request: CreateADConnectorOfficeSiteRequest, runtime: $dara.RuntimeOptions): Promise<CreateADConnectorOfficeSiteResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.adHostname)) {
      query["AdHostname"] = request.adHostname;
    }

    if (!$dara.isNull(request.backupDCHostname)) {
      query["BackupDCHostname"] = request.backupDCHostname;
    }

    if (!$dara.isNull(request.backupDns)) {
      query["BackupDns"] = request.backupDns;
    }

    if (!$dara.isNull(request.bandwidth)) {
      query["Bandwidth"] = request.bandwidth;
    }

    if (!$dara.isNull(request.cenId)) {
      query["CenId"] = request.cenId;
    }

    if (!$dara.isNull(request.cenOwnerId)) {
      query["CenOwnerId"] = request.cenOwnerId;
    }

    if (!$dara.isNull(request.cidrBlock)) {
      query["CidrBlock"] = request.cidrBlock;
    }

    if (!$dara.isNull(request.desktopAccessType)) {
      query["DesktopAccessType"] = request.desktopAccessType;
    }

    if (!$dara.isNull(request.dnsAddress)) {
      query["DnsAddress"] = request.dnsAddress;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.domainPassword)) {
      query["DomainPassword"] = request.domainPassword;
    }

    if (!$dara.isNull(request.domainUserName)) {
      query["DomainUserName"] = request.domainUserName;
    }

    if (!$dara.isNull(request.enableAdminAccess)) {
      query["EnableAdminAccess"] = request.enableAdminAccess;
    }

    if (!$dara.isNull(request.enableInternetAccess)) {
      query["EnableInternetAccess"] = request.enableInternetAccess;
    }

    if (!$dara.isNull(request.mfaEnabled)) {
      query["MfaEnabled"] = request.mfaEnabled;
    }

    if (!$dara.isNull(request.officeSiteName)) {
      query["OfficeSiteName"] = request.officeSiteName;
    }

    if (!$dara.isNull(request.protocolType)) {
      query["ProtocolType"] = request.protocolType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.specification)) {
      query["Specification"] = request.specification;
    }

    if (!$dara.isNull(request.subDomainDnsAddress)) {
      query["SubDomainDnsAddress"] = request.subDomainDnsAddress;
    }

    if (!$dara.isNull(request.subDomainName)) {
      query["SubDomainName"] = request.subDomainName;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.verifyCode)) {
      query["VerifyCode"] = request.verifyCode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateADConnectorOfficeSite",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateADConnectorOfficeSiteResponse>(await this.callApi(params, req, runtime), new CreateADConnectorOfficeSiteResponse({}));
    } else {
      return $dara.cast<CreateADConnectorOfficeSiteResponse>(await this.execute(params, req, runtime), new CreateADConnectorOfficeSiteResponse({}));
    }

  }

  /**
   * Creates an enterprise Active Directory (AD) office network (formerly workspace). Elastic Desktop Service supports the following types of accounts: convenience accounts and enterprise AD accounts.
   * 
   * @remarks
   * When you create an enterprise AD office network, the system automatically creates an AD connector to connect to an enterprise AD. You are charged for the AD connector. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
   * After you call this operation to create an AD office network, you must perform the following steps to complete AD domain setting:
   * 1.  Configure a conditional forwarder in a Domain Name System (DNS) server.
   * 2.  Configure a trust relationship in an AD domain controller and call the [ConfigADConnectorTrust](https://help.aliyun.com/document_detail/311258.html) operation to configure the trust relationship with the AD office network.
   * 3.  Call the [ListUserAdOrganizationUnits](https://help.aliyun.com/document_detail/311259.html) operation to query a list of organizational units (OUs) of the AD domain, and call the [ConfigADConnectorUser](https://help.aliyun.com/document_detail/311262.html) operation to specify an OU and administrator for the AD office network.
   *     >  When you create the AD office network, take note of the DomainUserName and DomainPassword parameters. If you specify the parameters, you need to only configure a conditional forwarder. If you do not specify the parameters, you must configure a conditional forwarder, trust relationship, and OU as prompted.
   * For more information, see [Create and manage enterprise AD office networks](https://help.aliyun.com/document_detail/214469.html).
   * 
   * @param request - CreateADConnectorOfficeSiteRequest
   * @returns CreateADConnectorOfficeSiteResponse
   */
  async createADConnectorOfficeSite(request: CreateADConnectorOfficeSiteRequest): Promise<CreateADConnectorOfficeSiteResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createADConnectorOfficeSiteWithOptions(request, runtime);
  }

  /**
   * Creates a File Storage NAS (NAS) file system and mount the file system to the workspace in which a desktop group resides.
   * 
   * @param request - CreateAndBindNasFileSystemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAndBindNasFileSystemResponse
   */
  async createAndBindNasFileSystemWithOptions(request: CreateAndBindNasFileSystemRequest, runtime: $dara.RuntimeOptions): Promise<CreateAndBindNasFileSystemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.encryptType)) {
      query["EncryptType"] = request.encryptType;
    }

    if (!$dara.isNull(request.endUserIds)) {
      query["EndUserIds"] = request.endUserIds;
    }

    if (!$dara.isNull(request.fileSystemName)) {
      query["FileSystemName"] = request.fileSystemName;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.storageType)) {
      query["StorageType"] = request.storageType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAndBindNasFileSystem",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateAndBindNasFileSystemResponse>(await this.callApi(params, req, runtime), new CreateAndBindNasFileSystemResponse({}));
    } else {
      return $dara.cast<CreateAndBindNasFileSystemResponse>(await this.execute(params, req, runtime), new CreateAndBindNasFileSystemResponse({}));
    }

  }

  /**
   * Creates a File Storage NAS (NAS) file system and mount the file system to the workspace in which a desktop group resides.
   * 
   * @param request - CreateAndBindNasFileSystemRequest
   * @returns CreateAndBindNasFileSystemResponse
   */
  async createAndBindNasFileSystem(request: CreateAndBindNasFileSystemRequest): Promise<CreateAndBindNasFileSystemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAndBindNasFileSystemWithOptions(request, runtime);
  }

  /**
   * Creates an automatic snapshot policy. WUYING WorkSpace automatically creates snapshots based on the time specified by the cron expression in the automatic snapshot policy.
   * 
   * @remarks
   * You can call the operation to create an automatic snapshot policy based on a CRON expression. Then, the system automatically creates snapshots of a cloud desktop based on the policy.
   * 
   * @param request - CreateAutoSnapshotPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAutoSnapshotPolicyResponse
   */
  async createAutoSnapshotPolicyWithOptions(request: CreateAutoSnapshotPolicyRequest, runtime: $dara.RuntimeOptions): Promise<CreateAutoSnapshotPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cronExpression)) {
      query["CronExpression"] = request.cronExpression;
    }

    if (!$dara.isNull(request.policyName)) {
      query["PolicyName"] = request.policyName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.retentionDays)) {
      query["RetentionDays"] = request.retentionDays;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAutoSnapshotPolicy",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateAutoSnapshotPolicyResponse>(await this.callApi(params, req, runtime), new CreateAutoSnapshotPolicyResponse({}));
    } else {
      return $dara.cast<CreateAutoSnapshotPolicyResponse>(await this.execute(params, req, runtime), new CreateAutoSnapshotPolicyResponse({}));
    }

  }

  /**
   * Creates an automatic snapshot policy. WUYING WorkSpace automatically creates snapshots based on the time specified by the cron expression in the automatic snapshot policy.
   * 
   * @remarks
   * You can call the operation to create an automatic snapshot policy based on a CRON expression. Then, the system automatically creates snapshots of a cloud desktop based on the policy.
   * 
   * @param request - CreateAutoSnapshotPolicyRequest
   * @returns CreateAutoSnapshotPolicyResponse
   */
  async createAutoSnapshotPolicy(request: CreateAutoSnapshotPolicyRequest): Promise<CreateAutoSnapshotPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAutoSnapshotPolicyWithOptions(request, runtime);
  }

  /**
   * Creates a custom cloud computer template.
   * 
   * @remarks
   * Cloud computer templates include system templates and custom templates. A system template is the default template provided by Alibaba Cloud. You can call this operation to create a custom template.
   * 
   * @param request - CreateBundleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateBundleResponse
   */
  async createBundleWithOptions(request: CreateBundleRequest, runtime: $dara.RuntimeOptions): Promise<CreateBundleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bundleName)) {
      query["BundleName"] = request.bundleName;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.desktopType)) {
      query["DesktopType"] = request.desktopType;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.language)) {
      query["Language"] = request.language;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.rootDiskPerformanceLevel)) {
      query["RootDiskPerformanceLevel"] = request.rootDiskPerformanceLevel;
    }

    if (!$dara.isNull(request.rootDiskSizeGib)) {
      query["RootDiskSizeGib"] = request.rootDiskSizeGib;
    }

    if (!$dara.isNull(request.userDiskPerformanceLevel)) {
      query["UserDiskPerformanceLevel"] = request.userDiskPerformanceLevel;
    }

    if (!$dara.isNull(request.userDiskSizeGib)) {
      query["UserDiskSizeGib"] = request.userDiskSizeGib;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateBundle",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateBundleResponse>(await this.callApi(params, req, runtime), new CreateBundleResponse({}));
    } else {
      return $dara.cast<CreateBundleResponse>(await this.execute(params, req, runtime), new CreateBundleResponse({}));
    }

  }

  /**
   * Creates a custom cloud computer template.
   * 
   * @remarks
   * Cloud computer templates include system templates and custom templates. A system template is the default template provided by Alibaba Cloud. You can call this operation to create a custom template.
   * 
   * @param request - CreateBundleRequest
   * @returns CreateBundleResponse
   */
  async createBundle(request: CreateBundleRequest): Promise<CreateBundleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createBundleWithOptions(request, runtime);
  }

  /**
   * Uploads a file to a cloud disk.
   * 
   * @remarks
   * After the RAM permissions are authenticated, you can call the CreateCdsFile operation to obtain the upload URL of a file and upload the file to a cloud disk.
   * 
   * @param request - CreateCdsFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCdsFileResponse
   */
  async createCdsFileWithOptions(request: CreateCdsFileRequest, runtime: $dara.RuntimeOptions): Promise<CreateCdsFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.conflictPolicy)) {
      query["ConflictPolicy"] = request.conflictPolicy;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.fileHash)) {
      query["FileHash"] = request.fileHash;
    }

    if (!$dara.isNull(request.fileLength)) {
      query["FileLength"] = request.fileLength;
    }

    if (!$dara.isNull(request.fileName)) {
      query["FileName"] = request.fileName;
    }

    if (!$dara.isNull(request.fileType)) {
      query["FileType"] = request.fileType;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.parentFileId)) {
      query["ParentFileId"] = request.parentFileId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateCdsFile",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateCdsFileResponse>(await this.callApi(params, req, runtime), new CreateCdsFileResponse({}));
    } else {
      return $dara.cast<CreateCdsFileResponse>(await this.execute(params, req, runtime), new CreateCdsFileResponse({}));
    }

  }

  /**
   * Uploads a file to a cloud disk.
   * 
   * @remarks
   * After the RAM permissions are authenticated, you can call the CreateCdsFile operation to obtain the upload URL of a file and upload the file to a cloud disk.
   * 
   * @param request - CreateCdsFileRequest
   * @returns CreateCdsFileResponse
   */
  async createCdsFile(request: CreateCdsFileRequest): Promise<CreateCdsFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createCdsFileWithOptions(request, runtime);
  }

  /**
   * Creates a file sharing task.
   * 
   * @param request - CreateCdsFileShareLinkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCdsFileShareLinkResponse
   */
  async createCdsFileShareLinkWithOptions(request: CreateCdsFileShareLinkRequest, runtime: $dara.RuntimeOptions): Promise<CreateCdsFileShareLinkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.disableDownload)) {
      query["DisableDownload"] = request.disableDownload;
    }

    if (!$dara.isNull(request.disablePreview)) {
      query["DisablePreview"] = request.disablePreview;
    }

    if (!$dara.isNull(request.disableSave)) {
      query["DisableSave"] = request.disableSave;
    }

    if (!$dara.isNull(request.downloadLimit)) {
      query["DownloadLimit"] = request.downloadLimit;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.expiration)) {
      query["Expiration"] = request.expiration;
    }

    if (!$dara.isNull(request.fileIds)) {
      query["FileIds"] = request.fileIds;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.previewLimit)) {
      query["PreviewLimit"] = request.previewLimit;
    }

    if (!$dara.isNull(request.saveLimit)) {
      query["SaveLimit"] = request.saveLimit;
    }

    if (!$dara.isNull(request.shareName)) {
      query["ShareName"] = request.shareName;
    }

    if (!$dara.isNull(request.sharePwd)) {
      query["SharePwd"] = request.sharePwd;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateCdsFileShareLink",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateCdsFileShareLinkResponse>(await this.callApi(params, req, runtime), new CreateCdsFileShareLinkResponse({}));
    } else {
      return $dara.cast<CreateCdsFileShareLinkResponse>(await this.execute(params, req, runtime), new CreateCdsFileShareLinkResponse({}));
    }

  }

  /**
   * Creates a file sharing task.
   * 
   * @param request - CreateCdsFileShareLinkRequest
   * @returns CreateCdsFileShareLinkResponse
   */
  async createCdsFileShareLink(request: CreateCdsFileShareLinkRequest): Promise<CreateCdsFileShareLinkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createCdsFileShareLinkWithOptions(request, runtime);
  }

  /**
   * Creates a cloud disk.
   * 
   * @param request - CreateCloudDriveServiceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCloudDriveServiceResponse
   */
  async createCloudDriveServiceWithOptions(request: CreateCloudDriveServiceRequest, runtime: $dara.RuntimeOptions): Promise<CreateCloudDriveServiceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.bizType)) {
      query["BizType"] = request.bizType;
    }

    if (!$dara.isNull(request.cdsChargeType)) {
      query["CdsChargeType"] = request.cdsChargeType;
    }

    if (!$dara.isNull(request.cenId)) {
      query["CenId"] = request.cenId;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.maxSize)) {
      query["MaxSize"] = request.maxSize;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.officeSiteType)) {
      query["OfficeSiteType"] = request.officeSiteType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.solutionId)) {
      query["SolutionId"] = request.solutionId;
    }

    if (!$dara.isNull(request.userCount)) {
      query["UserCount"] = request.userCount;
    }

    if (!$dara.isNull(request.userMaxSize)) {
      query["UserMaxSize"] = request.userMaxSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateCloudDriveService",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateCloudDriveServiceResponse>(await this.callApi(params, req, runtime), new CreateCloudDriveServiceResponse({}));
    } else {
      return $dara.cast<CreateCloudDriveServiceResponse>(await this.execute(params, req, runtime), new CreateCloudDriveServiceResponse({}));
    }

  }

  /**
   * Creates a cloud disk.
   * 
   * @param request - CreateCloudDriveServiceRequest
   * @returns CreateCloudDriveServiceResponse
   */
  async createCloudDriveService(request: CreateCloudDriveServiceRequest): Promise<CreateCloudDriveServiceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createCloudDriveServiceWithOptions(request, runtime);
  }

  /**
   * Creates the users of a cloud disk.
   * 
   * @param request - CreateCloudDriveUsersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCloudDriveUsersResponse
   */
  async createCloudDriveUsersWithOptions(request: CreateCloudDriveUsersRequest, runtime: $dara.RuntimeOptions): Promise<CreateCloudDriveUsersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.userMaxSize)) {
      query["UserMaxSize"] = request.userMaxSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateCloudDriveUsers",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateCloudDriveUsersResponse>(await this.callApi(params, req, runtime), new CreateCloudDriveUsersResponse({}));
    } else {
      return $dara.cast<CreateCloudDriveUsersResponse>(await this.execute(params, req, runtime), new CreateCloudDriveUsersResponse({}));
    }

  }

  /**
   * Creates the users of a cloud disk.
   * 
   * @param request - CreateCloudDriveUsersRequest
   * @returns CreateCloudDriveUsersResponse
   */
  async createCloudDriveUsers(request: CreateCloudDriveUsersRequest): Promise<CreateCloudDriveUsersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createCloudDriveUsersWithOptions(request, runtime);
  }

  /**
   * 创建配置组
   * 
   * @param request - CreateConfigGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateConfigGroupResponse
   */
  async createConfigGroupWithOptions(request: CreateConfigGroupRequest, runtime: $dara.RuntimeOptions): Promise<CreateConfigGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configTimers)) {
      query["ConfigTimers"] = request.configTimers;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.productType)) {
      query["ProductType"] = request.productType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateConfigGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateConfigGroupResponse>(await this.callApi(params, req, runtime), new CreateConfigGroupResponse({}));
    } else {
      return $dara.cast<CreateConfigGroupResponse>(await this.execute(params, req, runtime), new CreateConfigGroupResponse({}));
    }

  }

  /**
   * 创建配置组
   * 
   * @param request - CreateConfigGroupRequest
   * @returns CreateConfigGroupResponse
   */
  async createConfigGroup(request: CreateConfigGroupRequest): Promise<CreateConfigGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createConfigGroupWithOptions(request, runtime);
  }

  /**
   * Creates a cloud computer pool (formerly desktop group).
   * 
   * @remarks
   * Before you call this operation to create a desktop group, make sure that the following operations are complete:
   * *   You are familiar with the features, usage limits, and scaling policies of desktop groups. For more information, see [Overview](https://help.aliyun.com/document_detail/290959.html) of desktop groups.
   * *   Resources, such as workspaces, users, desktop templates, and policies, are created.
   * 
   * @param request - CreateDesktopGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDesktopGroupResponse
   */
  async createDesktopGroupWithOptions(request: CreateDesktopGroupRequest, runtime: $dara.RuntimeOptions): Promise<CreateDesktopGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.allClassifyUsers)) {
      query["AllClassifyUsers"] = request.allClassifyUsers;
    }

    if (!$dara.isNull(request.allowAutoSetup)) {
      query["AllowAutoSetup"] = request.allowAutoSetup;
    }

    if (!$dara.isNull(request.allowBufferCount)) {
      query["AllowBufferCount"] = request.allowBufferCount;
    }

    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.bindAmount)) {
      query["BindAmount"] = request.bindAmount;
    }

    if (!$dara.isNull(request.bundleId)) {
      query["BundleId"] = request.bundleId;
    }

    if (!$dara.isNull(request.buyDesktopsCount)) {
      query["BuyDesktopsCount"] = request.buyDesktopsCount;
    }

    if (!$dara.isNull(request.chargeType)) {
      query["ChargeType"] = request.chargeType;
    }

    if (!$dara.isNull(request.classify)) {
      query["Classify"] = request.classify;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.comments)) {
      query["Comments"] = request.comments;
    }

    if (!$dara.isNull(request.connectDuration)) {
      query["ConnectDuration"] = request.connectDuration;
    }

    if (!$dara.isNull(request.dataDiskCategory)) {
      query["DataDiskCategory"] = request.dataDiskCategory;
    }

    if (!$dara.isNull(request.dataDiskPerLevel)) {
      query["DataDiskPerLevel"] = request.dataDiskPerLevel;
    }

    if (!$dara.isNull(request.dataDiskSize)) {
      query["DataDiskSize"] = request.dataDiskSize;
    }

    if (!$dara.isNull(request.defaultInitDesktopCount)) {
      query["DefaultInitDesktopCount"] = request.defaultInitDesktopCount;
    }

    if (!$dara.isNull(request.defaultLanguage)) {
      query["DefaultLanguage"] = request.defaultLanguage;
    }

    if (!$dara.isNull(request.desktopGroupName)) {
      query["DesktopGroupName"] = request.desktopGroupName;
    }

    if (!$dara.isNull(request.desktopType)) {
      query["DesktopType"] = request.desktopType;
    }

    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.endUserIds)) {
      query["EndUserIds"] = request.endUserIds;
    }

    if (!$dara.isNull(request.exclusiveType)) {
      query["ExclusiveType"] = request.exclusiveType;
    }

    if (!$dara.isNull(request.fileSystemId)) {
      query["FileSystemId"] = request.fileSystemId;
    }

    if (!$dara.isNull(request.groupAmount)) {
      query["GroupAmount"] = request.groupAmount;
    }

    if (!$dara.isNull(request.groupVersion)) {
      query["GroupVersion"] = request.groupVersion;
    }

    if (!$dara.isNull(request.hostname)) {
      query["Hostname"] = request.hostname;
    }

    if (!$dara.isNull(request.idleDisconnectDuration)) {
      query["IdleDisconnectDuration"] = request.idleDisconnectDuration;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.keepDuration)) {
      query["KeepDuration"] = request.keepDuration;
    }

    if (!$dara.isNull(request.loadPolicy)) {
      query["LoadPolicy"] = request.loadPolicy;
    }

    if (!$dara.isNull(request.maxDesktopsCount)) {
      query["MaxDesktopsCount"] = request.maxDesktopsCount;
    }

    if (!$dara.isNull(request.minDesktopsCount)) {
      query["MinDesktopsCount"] = request.minDesktopsCount;
    }

    if (!$dara.isNull(request.multiResource)) {
      query["MultiResource"] = request.multiResource;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.ownType)) {
      query["OwnType"] = request.ownType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.profileFollowSwitch)) {
      query["ProfileFollowSwitch"] = request.profileFollowSwitch;
    }

    if (!$dara.isNull(request.promotionId)) {
      query["PromotionId"] = request.promotionId;
    }

    if (!$dara.isNull(request.ratioThreshold)) {
      query["RatioThreshold"] = request.ratioThreshold;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resetType)) {
      query["ResetType"] = request.resetType;
    }

    if (!$dara.isNull(request.scaleStrategyId)) {
      query["ScaleStrategyId"] = request.scaleStrategyId;
    }

    if (!$dara.isNull(request.sessionType)) {
      query["SessionType"] = request.sessionType;
    }

    if (!$dara.isNull(request.snapshotPolicyId)) {
      query["SnapshotPolicyId"] = request.snapshotPolicyId;
    }

    if (!$dara.isNull(request.stopDuration)) {
      query["StopDuration"] = request.stopDuration;
    }

    if (!$dara.isNull(request.systemDiskCategory)) {
      query["SystemDiskCategory"] = request.systemDiskCategory;
    }

    if (!$dara.isNull(request.systemDiskPerLevel)) {
      query["SystemDiskPerLevel"] = request.systemDiskPerLevel;
    }

    if (!$dara.isNull(request.systemDiskSize)) {
      query["SystemDiskSize"] = request.systemDiskSize;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.timerGroupId)) {
      query["TimerGroupId"] = request.timerGroupId;
    }

    if (!$dara.isNull(request.volumeEncryptionEnabled)) {
      query["VolumeEncryptionEnabled"] = request.volumeEncryptionEnabled;
    }

    if (!$dara.isNull(request.volumeEncryptionKey)) {
      query["VolumeEncryptionKey"] = request.volumeEncryptionKey;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDesktopGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDesktopGroupResponse>(await this.callApi(params, req, runtime), new CreateDesktopGroupResponse({}));
    } else {
      return $dara.cast<CreateDesktopGroupResponse>(await this.execute(params, req, runtime), new CreateDesktopGroupResponse({}));
    }

  }

  /**
   * Creates a cloud computer pool (formerly desktop group).
   * 
   * @remarks
   * Before you call this operation to create a desktop group, make sure that the following operations are complete:
   * *   You are familiar with the features, usage limits, and scaling policies of desktop groups. For more information, see [Overview](https://help.aliyun.com/document_detail/290959.html) of desktop groups.
   * *   Resources, such as workspaces, users, desktop templates, and policies, are created.
   * 
   * @param request - CreateDesktopGroupRequest
   * @returns CreateDesktopGroupResponse
   */
  async createDesktopGroup(request: CreateDesktopGroupRequest): Promise<CreateDesktopGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDesktopGroupWithOptions(request, runtime);
  }

  /**
   * 创建桌面超卖组
   * 
   * @param request - CreateDesktopOversoldGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDesktopOversoldGroupResponse
   */
  async createDesktopOversoldGroupWithOptions(request: CreateDesktopOversoldGroupRequest, runtime: $dara.RuntimeOptions): Promise<CreateDesktopOversoldGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.concurrenceCount)) {
      query["ConcurrenceCount"] = request.concurrenceCount;
    }

    if (!$dara.isNull(request.dataDiskSize)) {
      query["DataDiskSize"] = request.dataDiskSize;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.desktopType)) {
      query["DesktopType"] = request.desktopType;
    }

    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.idleDisconnectDuration)) {
      query["IdleDisconnectDuration"] = request.idleDisconnectDuration;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.keepDuration)) {
      query["KeepDuration"] = request.keepDuration;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.oversoldUserCount)) {
      query["OversoldUserCount"] = request.oversoldUserCount;
    }

    if (!$dara.isNull(request.oversoldWarn)) {
      query["OversoldWarn"] = request.oversoldWarn;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.stopDuration)) {
      query["StopDuration"] = request.stopDuration;
    }

    if (!$dara.isNull(request.systemDiskSize)) {
      query["SystemDiskSize"] = request.systemDiskSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDesktopOversoldGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDesktopOversoldGroupResponse>(await this.callApi(params, req, runtime), new CreateDesktopOversoldGroupResponse({}));
    } else {
      return $dara.cast<CreateDesktopOversoldGroupResponse>(await this.execute(params, req, runtime), new CreateDesktopOversoldGroupResponse({}));
    }

  }

  /**
   * 创建桌面超卖组
   * 
   * @param request - CreateDesktopOversoldGroupRequest
   * @returns CreateDesktopOversoldGroupResponse
   */
  async createDesktopOversoldGroup(request: CreateDesktopOversoldGroupRequest): Promise<CreateDesktopOversoldGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDesktopOversoldGroupWithOptions(request, runtime);
  }

  /**
   * Creates cloud computers. If you specify end users when you create cloud computers, the cloud computers are assigned to the end users after the cloud computers are created.
   * 
   * @remarks
   * Before you create cloud computers, complete the following preparations:
   * *   An office network (formerly called workspace) and users are created. For more information, see:
   *     *   Convenience office network: [CreateSimpleOfficeSite](https://help.aliyun.com/document_detail/215416.html) and [CreateUsers](https://help.aliyun.com/document_detail/437832.html).
   *     *   Active Directory (AD) office network: [CreateADConnectorOfficeSite](https://help.aliyun.com/document_detail/215417.html) and [Create an AD user](https://help.aliyun.com/document_detail/188619.html).
   * *   Make sure a cloud computer template exists. If no cloud computer template exists, call the [CreateBundle](https://help.aliyun.com/document_detail/188883.html) operation to create a template.
   * *   Make sure a policy exists. If no policy exists, call the [CreatePolicyGroup](https://help.aliyun.com/document_detail/188889.html) operation to create a policy.
   * If you want the cloud computers to automatically execute a custom command script, you can use the `UserCommands` field to configure a custom command.
   * 
   * @param tmpReq - CreateDesktopsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDesktopsResponse
   */
  async createDesktopsWithOptions(tmpReq: CreateDesktopsRequest, runtime: $dara.RuntimeOptions): Promise<CreateDesktopsResponse> {
    tmpReq.validate();
    let request = new CreateDesktopsShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.desktopAttachment)) {
      request.desktopAttachmentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.desktopAttachment, "DesktopAttachment", "json");
    }

    let query = { };
    if (!$dara.isNull(request.amount)) {
      query["Amount"] = request.amount;
    }

    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.bundleId)) {
      query["BundleId"] = request.bundleId;
    }

    if (!$dara.isNull(request.bundleModels)) {
      query["BundleModels"] = request.bundleModels;
    }

    if (!$dara.isNull(request.chargeType)) {
      query["ChargeType"] = request.chargeType;
    }

    if (!$dara.isNull(request.desktopAttachmentShrink)) {
      query["DesktopAttachment"] = request.desktopAttachmentShrink;
    }

    if (!$dara.isNull(request.desktopMemberIp)) {
      query["DesktopMemberIp"] = request.desktopMemberIp;
    }

    if (!$dara.isNull(request.desktopName)) {
      query["DesktopName"] = request.desktopName;
    }

    if (!$dara.isNull(request.desktopNameSuffix)) {
      query["DesktopNameSuffix"] = request.desktopNameSuffix;
    }

    if (!$dara.isNull(request.desktopTimers)) {
      query["DesktopTimers"] = request.desktopTimers;
    }

    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.hostname)) {
      query["Hostname"] = request.hostname;
    }

    if (!$dara.isNull(request.monthDesktopSetting)) {
      query["MonthDesktopSetting"] = request.monthDesktopSetting;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.promotionId)) {
      query["PromotionId"] = request.promotionId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.snapshotPolicyId)) {
      query["SnapshotPolicyId"] = request.snapshotPolicyId;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.timerGroupId)) {
      query["TimerGroupId"] = request.timerGroupId;
    }

    if (!$dara.isNull(request.userAssignMode)) {
      query["UserAssignMode"] = request.userAssignMode;
    }

    if (!$dara.isNull(request.userCommands)) {
      query["UserCommands"] = request.userCommands;
    }

    if (!$dara.isNull(request.userName)) {
      query["UserName"] = request.userName;
    }

    if (!$dara.isNull(request.volumeEncryptionEnabled)) {
      query["VolumeEncryptionEnabled"] = request.volumeEncryptionEnabled;
    }

    if (!$dara.isNull(request.volumeEncryptionKey)) {
      query["VolumeEncryptionKey"] = request.volumeEncryptionKey;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDesktops",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDesktopsResponse>(await this.callApi(params, req, runtime), new CreateDesktopsResponse({}));
    } else {
      return $dara.cast<CreateDesktopsResponse>(await this.execute(params, req, runtime), new CreateDesktopsResponse({}));
    }

  }

  /**
   * Creates cloud computers. If you specify end users when you create cloud computers, the cloud computers are assigned to the end users after the cloud computers are created.
   * 
   * @remarks
   * Before you create cloud computers, complete the following preparations:
   * *   An office network (formerly called workspace) and users are created. For more information, see:
   *     *   Convenience office network: [CreateSimpleOfficeSite](https://help.aliyun.com/document_detail/215416.html) and [CreateUsers](https://help.aliyun.com/document_detail/437832.html).
   *     *   Active Directory (AD) office network: [CreateADConnectorOfficeSite](https://help.aliyun.com/document_detail/215417.html) and [Create an AD user](https://help.aliyun.com/document_detail/188619.html).
   * *   Make sure a cloud computer template exists. If no cloud computer template exists, call the [CreateBundle](https://help.aliyun.com/document_detail/188883.html) operation to create a template.
   * *   Make sure a policy exists. If no policy exists, call the [CreatePolicyGroup](https://help.aliyun.com/document_detail/188889.html) operation to create a policy.
   * If you want the cloud computers to automatically execute a custom command script, you can use the `UserCommands` field to configure a custom command.
   * 
   * @param request - CreateDesktopsRequest
   * @returns CreateDesktopsResponse
   */
  async createDesktops(request: CreateDesktopsRequest): Promise<CreateDesktopsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDesktopsWithOptions(request, runtime);
  }

  /**
   * Enables the disk encryption feature and adds the service-linked role that is encrypted by Cloud Drive Service to a Resource Access Management (RAM) user.
   * 
   * @param request - CreateDiskEncryptionServiceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDiskEncryptionServiceResponse
   */
  async createDiskEncryptionServiceWithOptions(request: CreateDiskEncryptionServiceRequest, runtime: $dara.RuntimeOptions): Promise<CreateDiskEncryptionServiceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDiskEncryptionService",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateDiskEncryptionServiceResponse>(await this.callApi(params, req, runtime), new CreateDiskEncryptionServiceResponse({}));
    } else {
      return $dara.cast<CreateDiskEncryptionServiceResponse>(await this.execute(params, req, runtime), new CreateDiskEncryptionServiceResponse({}));
    }

  }

  /**
   * Enables the disk encryption feature and adds the service-linked role that is encrypted by Cloud Drive Service to a Resource Access Management (RAM) user.
   * 
   * @param request - CreateDiskEncryptionServiceRequest
   * @returns CreateDiskEncryptionServiceResponse
   */
  async createDiskEncryptionService(request: CreateDiskEncryptionServiceRequest): Promise<CreateDiskEncryptionServiceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDiskEncryptionServiceWithOptions(request, runtime);
  }

  /**
   * Creates a custom image based on a deployed cloud computer. Then, you can use the custom image to create cloud computers that have the same configurations. This prevents the repeated settings when you create cloud computers.
   * 
   * @param request - CreateImageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateImageResponse
   */
  async createImageWithOptions(request: CreateImageRequest, runtime: $dara.RuntimeOptions): Promise<CreateImageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoCleanUserdata)) {
      query["AutoCleanUserdata"] = request.autoCleanUserdata;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.diskType)) {
      query["DiskType"] = request.diskType;
    }

    if (!$dara.isNull(request.imageName)) {
      query["ImageName"] = request.imageName;
    }

    if (!$dara.isNull(request.imageResourceType)) {
      query["ImageResourceType"] = request.imageResourceType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.snapshotId)) {
      query["SnapshotId"] = request.snapshotId;
    }

    if (!$dara.isNull(request.snapshotIds)) {
      query["SnapshotIds"] = request.snapshotIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateImage",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateImageResponse>(await this.callApi(params, req, runtime), new CreateImageResponse({}));
    } else {
      return $dara.cast<CreateImageResponse>(await this.execute(params, req, runtime), new CreateImageResponse({}));
    }

  }

  /**
   * Creates a custom image based on a deployed cloud computer. Then, you can use the custom image to create cloud computers that have the same configurations. This prevents the repeated settings when you create cloud computers.
   * 
   * @param request - CreateImageRequest
   * @returns CreateImageResponse
   */
  async createImage(request: CreateImageRequest): Promise<CreateImageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createImageWithOptions(request, runtime);
  }

  /**
   * Create a NAS file system.
   * 
   * @remarks
   * <props="china">
   * - Each standard workspace can create one NAS file system to meet the need for sharing files between cloud desktops in the workspace.
   * - The system will automatically create a general-purpose NAS file system (with storage specifications of Capacity and Performance, with capacities of 10 PiB and 1 PiB respectively) and generate a default mount point.
   * - The NAS file system uses pay-as-you-go by default. You need to pay for the actual storage usage. You can also purchase resource packages to offset the storage usage.
   * For more information, see [Creating Shared Storage NAS](https://help.aliyun.com/document_detail/214481.html).
   * <props="intl">
   * - Each standard workspace can create one NAS file system to meet the need for sharing files between cloud desktops in the workspace.
   * - The system will automatically create a general-purpose NAS file system (with storage specifications of Capacity and Performance, with capacities of 10 PiB and 1 PiB respectively) and generate a default mount point.
   * - The NAS file system uses pay-as-you-go by default. You need to pay for the actual storage usage. You can also purchase storage packages to offset the storage usage.
   * For more information, see [Creating Shared Storage NAS](https://help.aliyun.com/document_detail/214481.html).
   * 
   * @param request - CreateNASFileSystemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateNASFileSystemResponse
   */
  async createNASFileSystemWithOptions(request: CreateNASFileSystemRequest, runtime: $dara.RuntimeOptions): Promise<CreateNASFileSystemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.encryptType)) {
      query["EncryptType"] = request.encryptType;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.storageType)) {
      query["StorageType"] = request.storageType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateNASFileSystem",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateNASFileSystemResponse>(await this.callApi(params, req, runtime), new CreateNASFileSystemResponse({}));
    } else {
      return $dara.cast<CreateNASFileSystemResponse>(await this.execute(params, req, runtime), new CreateNASFileSystemResponse({}));
    }

  }

  /**
   * Create a NAS file system.
   * 
   * @remarks
   * <props="china">
   * - Each standard workspace can create one NAS file system to meet the need for sharing files between cloud desktops in the workspace.
   * - The system will automatically create a general-purpose NAS file system (with storage specifications of Capacity and Performance, with capacities of 10 PiB and 1 PiB respectively) and generate a default mount point.
   * - The NAS file system uses pay-as-you-go by default. You need to pay for the actual storage usage. You can also purchase resource packages to offset the storage usage.
   * For more information, see [Creating Shared Storage NAS](https://help.aliyun.com/document_detail/214481.html).
   * <props="intl">
   * - Each standard workspace can create one NAS file system to meet the need for sharing files between cloud desktops in the workspace.
   * - The system will automatically create a general-purpose NAS file system (with storage specifications of Capacity and Performance, with capacities of 10 PiB and 1 PiB respectively) and generate a default mount point.
   * - The NAS file system uses pay-as-you-go by default. You need to pay for the actual storage usage. You can also purchase storage packages to offset the storage usage.
   * For more information, see [Creating Shared Storage NAS](https://help.aliyun.com/document_detail/214481.html).
   * 
   * @param request - CreateNASFileSystemRequest
   * @returns CreateNASFileSystemResponse
   */
  async createNASFileSystem(request: CreateNASFileSystemRequest): Promise<CreateNASFileSystemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createNASFileSystemWithOptions(request, runtime);
  }

  /**
   * Creates a premium bandwidth plan for an office network.
   * 
   * @param request - CreateNetworkPackageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateNetworkPackageResponse
   */
  async createNetworkPackageWithOptions(request: CreateNetworkPackageRequest, runtime: $dara.RuntimeOptions): Promise<CreateNetworkPackageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.bandwidth)) {
      query["Bandwidth"] = request.bandwidth;
    }

    if (!$dara.isNull(request.internetChargeType)) {
      query["InternetChargeType"] = request.internetChargeType;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.promotionId)) {
      query["PromotionId"] = request.promotionId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateNetworkPackage",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateNetworkPackageResponse>(await this.callApi(params, req, runtime), new CreateNetworkPackageResponse({}));
    } else {
      return $dara.cast<CreateNetworkPackageResponse>(await this.execute(params, req, runtime), new CreateNetworkPackageResponse({}));
    }

  }

  /**
   * Creates a premium bandwidth plan for an office network.
   * 
   * @param request - CreateNetworkPackageRequest
   * @returns CreateNetworkPackageResponse
   */
  async createNetworkPackage(request: CreateNetworkPackageRequest): Promise<CreateNetworkPackageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createNetworkPackageWithOptions(request, runtime);
  }

  /**
   * Creates a policy.
   * 
   * @remarks
   * A policy is a set of security rules that are used to control security configurations when end users use cloud desktops. A policy contains basic features, such as USB redirection and watermarking, and other features, such as security group control. For more information, see [Policy overview](https://help.aliyun.com/document_detail/189345.html).
   * 
   * @param request - CreatePolicyGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreatePolicyGroupResponse
   */
  async createPolicyGroupWithOptions(request: CreatePolicyGroupRequest, runtime: $dara.RuntimeOptions): Promise<CreatePolicyGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.adminAccess)) {
      query["AdminAccess"] = request.adminAccess;
    }

    if (!$dara.isNull(request.appContentProtection)) {
      query["AppContentProtection"] = request.appContentProtection;
    }

    if (!$dara.isNull(request.authorizeAccessPolicyRule)) {
      query["AuthorizeAccessPolicyRule"] = request.authorizeAccessPolicyRule;
    }

    if (!$dara.isNull(request.authorizeSecurityPolicyRule)) {
      query["AuthorizeSecurityPolicyRule"] = request.authorizeSecurityPolicyRule;
    }

    if (!$dara.isNull(request.cameraRedirect)) {
      query["CameraRedirect"] = request.cameraRedirect;
    }

    if (!$dara.isNull(request.clientType)) {
      query["ClientType"] = request.clientType;
    }

    if (!$dara.isNull(request.clipboard)) {
      query["Clipboard"] = request.clipboard;
    }

    if (!$dara.isNull(request.deviceRedirects)) {
      query["DeviceRedirects"] = request.deviceRedirects;
    }

    if (!$dara.isNull(request.deviceRules)) {
      query["DeviceRules"] = request.deviceRules;
    }

    if (!$dara.isNull(request.domainList)) {
      query["DomainList"] = request.domainList;
    }

    if (!$dara.isNull(request.domainResolveRule)) {
      query["DomainResolveRule"] = request.domainResolveRule;
    }

    if (!$dara.isNull(request.domainResolveRuleType)) {
      query["DomainResolveRuleType"] = request.domainResolveRuleType;
    }

    if (!$dara.isNull(request.endUserApplyAdminCoordinate)) {
      query["EndUserApplyAdminCoordinate"] = request.endUserApplyAdminCoordinate;
    }

    if (!$dara.isNull(request.endUserGroupCoordinate)) {
      query["EndUserGroupCoordinate"] = request.endUserGroupCoordinate;
    }

    if (!$dara.isNull(request.gpuAcceleration)) {
      query["GpuAcceleration"] = request.gpuAcceleration;
    }

    if (!$dara.isNull(request.html5Access)) {
      query["Html5Access"] = request.html5Access;
    }

    if (!$dara.isNull(request.html5FileTransfer)) {
      query["Html5FileTransfer"] = request.html5FileTransfer;
    }

    if (!$dara.isNull(request.internetCommunicationProtocol)) {
      query["InternetCommunicationProtocol"] = request.internetCommunicationProtocol;
    }

    if (!$dara.isNull(request.localDrive)) {
      query["LocalDrive"] = request.localDrive;
    }

    if (!$dara.isNull(request.maxReconnectTime)) {
      query["MaxReconnectTime"] = request.maxReconnectTime;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.netRedirect)) {
      query["NetRedirect"] = request.netRedirect;
    }

    if (!$dara.isNull(request.preemptLogin)) {
      query["PreemptLogin"] = request.preemptLogin;
    }

    if (!$dara.isNull(request.preemptLoginUser)) {
      query["PreemptLoginUser"] = request.preemptLoginUser;
    }

    if (!$dara.isNull(request.printerRedirection)) {
      query["PrinterRedirection"] = request.printerRedirection;
    }

    if (!$dara.isNull(request.recordContent)) {
      query["RecordContent"] = request.recordContent;
    }

    if (!$dara.isNull(request.recordContentExpires)) {
      query["RecordContentExpires"] = request.recordContentExpires;
    }

    if (!$dara.isNull(request.recording)) {
      query["Recording"] = request.recording;
    }

    if (!$dara.isNull(request.recordingAudio)) {
      query["RecordingAudio"] = request.recordingAudio;
    }

    if (!$dara.isNull(request.recordingDuration)) {
      query["RecordingDuration"] = request.recordingDuration;
    }

    if (!$dara.isNull(request.recordingEndTime)) {
      query["RecordingEndTime"] = request.recordingEndTime;
    }

    if (!$dara.isNull(request.recordingExpires)) {
      query["RecordingExpires"] = request.recordingExpires;
    }

    if (!$dara.isNull(request.recordingFps)) {
      query["RecordingFps"] = request.recordingFps;
    }

    if (!$dara.isNull(request.recordingStartTime)) {
      query["RecordingStartTime"] = request.recordingStartTime;
    }

    if (!$dara.isNull(request.recordingUserNotify)) {
      query["RecordingUserNotify"] = request.recordingUserNotify;
    }

    if (!$dara.isNull(request.recordingUserNotifyMessage)) {
      query["RecordingUserNotifyMessage"] = request.recordingUserNotifyMessage;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.remoteCoordinate)) {
      query["RemoteCoordinate"] = request.remoteCoordinate;
    }

    if (!$dara.isNull(request.scope)) {
      query["Scope"] = request.scope;
    }

    if (!$dara.isNull(request.scopeValue)) {
      query["ScopeValue"] = request.scopeValue;
    }

    if (!$dara.isNull(request.usbRedirect)) {
      query["UsbRedirect"] = request.usbRedirect;
    }

    if (!$dara.isNull(request.usbSupplyRedirectRule)) {
      query["UsbSupplyRedirectRule"] = request.usbSupplyRedirectRule;
    }

    if (!$dara.isNull(request.videoRedirect)) {
      query["VideoRedirect"] = request.videoRedirect;
    }

    if (!$dara.isNull(request.visualQuality)) {
      query["VisualQuality"] = request.visualQuality;
    }

    if (!$dara.isNull(request.watermark)) {
      query["Watermark"] = request.watermark;
    }

    if (!$dara.isNull(request.watermarkAntiCam)) {
      query["WatermarkAntiCam"] = request.watermarkAntiCam;
    }

    if (!$dara.isNull(request.watermarkColor)) {
      query["WatermarkColor"] = request.watermarkColor;
    }

    if (!$dara.isNull(request.watermarkDegree)) {
      query["WatermarkDegree"] = request.watermarkDegree;
    }

    if (!$dara.isNull(request.watermarkFontSize)) {
      query["WatermarkFontSize"] = request.watermarkFontSize;
    }

    if (!$dara.isNull(request.watermarkFontStyle)) {
      query["WatermarkFontStyle"] = request.watermarkFontStyle;
    }

    if (!$dara.isNull(request.watermarkPower)) {
      query["WatermarkPower"] = request.watermarkPower;
    }

    if (!$dara.isNull(request.watermarkRowAmount)) {
      query["WatermarkRowAmount"] = request.watermarkRowAmount;
    }

    if (!$dara.isNull(request.watermarkSecurity)) {
      query["WatermarkSecurity"] = request.watermarkSecurity;
    }

    if (!$dara.isNull(request.watermarkTransparency)) {
      query["WatermarkTransparency"] = request.watermarkTransparency;
    }

    if (!$dara.isNull(request.watermarkTransparencyValue)) {
      query["WatermarkTransparencyValue"] = request.watermarkTransparencyValue;
    }

    if (!$dara.isNull(request.watermarkType)) {
      query["WatermarkType"] = request.watermarkType;
    }

    if (!$dara.isNull(request.wyAssistant)) {
      query["WyAssistant"] = request.wyAssistant;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreatePolicyGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreatePolicyGroupResponse>(await this.callApi(params, req, runtime), new CreatePolicyGroupResponse({}));
    } else {
      return $dara.cast<CreatePolicyGroupResponse>(await this.execute(params, req, runtime), new CreatePolicyGroupResponse({}));
    }

  }

  /**
   * Creates a policy.
   * 
   * @remarks
   * A policy is a set of security rules that are used to control security configurations when end users use cloud desktops. A policy contains basic features, such as USB redirection and watermarking, and other features, such as security group control. For more information, see [Policy overview](https://help.aliyun.com/document_detail/189345.html).
   * 
   * @param request - CreatePolicyGroupRequest
   * @returns CreatePolicyGroupResponse
   */
  async createPolicyGroup(request: CreatePolicyGroupRequest): Promise<CreatePolicyGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createPolicyGroupWithOptions(request, runtime);
  }

  /**
   * Creates a Resource Access Management (RAM) directory.
   * 
   * @remarks
   * Before you create a RAM directory, complete the following preparations:
   * *   Call the `CreateVpc` operation to create a virtual private cloud (VPC) in a region supported by Elastic Desktop Service.
   * *   Call the `CreateVSwitch` operation to create a vSwitch in the VPC. The vSwitch is in a zone that is supported by Elastic Desktop Service. You can call the [DescribeZones](https://help.aliyun.com/document_detail/196648.html) operation to obtain the most recent zone list for a region supported by Elastic Desktop Service
   * 
   * @param request - CreateRAMDirectoryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateRAMDirectoryResponse
   */
  async createRAMDirectoryWithOptions(request: CreateRAMDirectoryRequest, runtime: $dara.RuntimeOptions): Promise<CreateRAMDirectoryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopAccessType)) {
      query["DesktopAccessType"] = request.desktopAccessType;
    }

    if (!$dara.isNull(request.directoryName)) {
      query["DirectoryName"] = request.directoryName;
    }

    if (!$dara.isNull(request.enableAdminAccess)) {
      query["EnableAdminAccess"] = request.enableAdminAccess;
    }

    if (!$dara.isNull(request.enableInternetAccess)) {
      query["EnableInternetAccess"] = request.enableInternetAccess;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateRAMDirectory",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateRAMDirectoryResponse>(await this.callApi(params, req, runtime), new CreateRAMDirectoryResponse({}));
    } else {
      return $dara.cast<CreateRAMDirectoryResponse>(await this.execute(params, req, runtime), new CreateRAMDirectoryResponse({}));
    }

  }

  /**
   * Creates a Resource Access Management (RAM) directory.
   * 
   * @remarks
   * Before you create a RAM directory, complete the following preparations:
   * *   Call the `CreateVpc` operation to create a virtual private cloud (VPC) in a region supported by Elastic Desktop Service.
   * *   Call the `CreateVSwitch` operation to create a vSwitch in the VPC. The vSwitch is in a zone that is supported by Elastic Desktop Service. You can call the [DescribeZones](https://help.aliyun.com/document_detail/196648.html) operation to obtain the most recent zone list for a region supported by Elastic Desktop Service
   * 
   * @param request - CreateRAMDirectoryRequest
   * @returns CreateRAMDirectoryResponse
   */
  async createRAMDirectory(request: CreateRAMDirectoryRequest): Promise<CreateRAMDirectoryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createRAMDirectoryWithOptions(request, runtime);
  }

  /**
   * Creates an office network of the convenience account type. Elastic Desktop Service supports the following types of accounts: convenience accounts and enterprise AD accounts.
   * 
   * @param request - CreateSimpleOfficeSiteRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateSimpleOfficeSiteResponse
   */
  async createSimpleOfficeSiteWithOptions(request: CreateSimpleOfficeSiteRequest, runtime: $dara.RuntimeOptions): Promise<CreateSimpleOfficeSiteResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bandwidth)) {
      query["Bandwidth"] = request.bandwidth;
    }

    if (!$dara.isNull(request.cenId)) {
      query["CenId"] = request.cenId;
    }

    if (!$dara.isNull(request.cenOwnerId)) {
      query["CenOwnerId"] = request.cenOwnerId;
    }

    if (!$dara.isNull(request.cidrBlock)) {
      query["CidrBlock"] = request.cidrBlock;
    }

    if (!$dara.isNull(request.cloudBoxOfficeSite)) {
      query["CloudBoxOfficeSite"] = request.cloudBoxOfficeSite;
    }

    if (!$dara.isNull(request.desktopAccessType)) {
      query["DesktopAccessType"] = request.desktopAccessType;
    }

    if (!$dara.isNull(request.enableAdminAccess)) {
      query["EnableAdminAccess"] = request.enableAdminAccess;
    }

    if (!$dara.isNull(request.enableInternetAccess)) {
      query["EnableInternetAccess"] = request.enableInternetAccess;
    }

    if (!$dara.isNull(request.needVerifyZeroDevice)) {
      query["NeedVerifyZeroDevice"] = request.needVerifyZeroDevice;
    }

    if (!$dara.isNull(request.officeSiteName)) {
      query["OfficeSiteName"] = request.officeSiteName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.verifyCode)) {
      query["VerifyCode"] = request.verifyCode;
    }

    if (!$dara.isNull(request.vpcType)) {
      query["VpcType"] = request.vpcType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateSimpleOfficeSite",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateSimpleOfficeSiteResponse>(await this.callApi(params, req, runtime), new CreateSimpleOfficeSiteResponse({}));
    } else {
      return $dara.cast<CreateSimpleOfficeSiteResponse>(await this.execute(params, req, runtime), new CreateSimpleOfficeSiteResponse({}));
    }

  }

  /**
   * Creates an office network of the convenience account type. Elastic Desktop Service supports the following types of accounts: convenience accounts and enterprise AD accounts.
   * 
   * @param request - CreateSimpleOfficeSiteRequest
   * @returns CreateSimpleOfficeSiteResponse
   */
  async createSimpleOfficeSite(request: CreateSimpleOfficeSiteRequest): Promise<CreateSimpleOfficeSiteResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createSimpleOfficeSiteWithOptions(request, runtime);
  }

  /**
   * Create a snapshot for a disk of a cloud computer to back up or restore the data on the disk.
   * 
   * @remarks
   * The cloud computer must be in the **Running** or **Stopped** state.
   * 
   * @param request - CreateSnapshotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateSnapshotResponse
   */
  async createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: $dara.RuntimeOptions): Promise<CreateSnapshotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.snapshotName)) {
      query["SnapshotName"] = request.snapshotName;
    }

    if (!$dara.isNull(request.sourceDiskType)) {
      query["SourceDiskType"] = request.sourceDiskType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateSnapshot",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<CreateSnapshotResponse>(await this.callApi(params, req, runtime), new CreateSnapshotResponse({}));
    } else {
      return $dara.cast<CreateSnapshotResponse>(await this.execute(params, req, runtime), new CreateSnapshotResponse({}));
    }

  }

  /**
   * Create a snapshot for a disk of a cloud computer to back up or restore the data on the disk.
   * 
   * @remarks
   * The cloud computer must be in the **Running** or **Stopped** state.
   * 
   * @param request - CreateSnapshotRequest
   * @returns CreateSnapshotResponse
   */
  async createSnapshot(request: CreateSnapshotRequest): Promise<CreateSnapshotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createSnapshotWithOptions(request, runtime);
  }

  /**
   * Deletes an automatic snapshot policy.
   * 
   * @param request - DeleteAutoSnapshotPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteAutoSnapshotPolicyResponse
   */
  async deleteAutoSnapshotPolicyWithOptions(request: DeleteAutoSnapshotPolicyRequest, runtime: $dara.RuntimeOptions): Promise<DeleteAutoSnapshotPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteAutoSnapshotPolicy",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteAutoSnapshotPolicyResponse>(await this.callApi(params, req, runtime), new DeleteAutoSnapshotPolicyResponse({}));
    } else {
      return $dara.cast<DeleteAutoSnapshotPolicyResponse>(await this.execute(params, req, runtime), new DeleteAutoSnapshotPolicyResponse({}));
    }

  }

  /**
   * Deletes an automatic snapshot policy.
   * 
   * @param request - DeleteAutoSnapshotPolicyRequest
   * @returns DeleteAutoSnapshotPolicyResponse
   */
  async deleteAutoSnapshotPolicy(request: DeleteAutoSnapshotPolicyRequest): Promise<DeleteAutoSnapshotPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteAutoSnapshotPolicyWithOptions(request, runtime);
  }

  /**
   * Deletes custom cloud computer templates.
   * 
   * @param request - DeleteBundlesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteBundlesResponse
   */
  async deleteBundlesWithOptions(request: DeleteBundlesRequest, runtime: $dara.RuntimeOptions): Promise<DeleteBundlesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bundleId)) {
      query["BundleId"] = request.bundleId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteBundles",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteBundlesResponse>(await this.callApi(params, req, runtime), new DeleteBundlesResponse({}));
    } else {
      return $dara.cast<DeleteBundlesResponse>(await this.execute(params, req, runtime), new DeleteBundlesResponse({}));
    }

  }

  /**
   * Deletes custom cloud computer templates.
   * 
   * @param request - DeleteBundlesRequest
   * @returns DeleteBundlesResponse
   */
  async deleteBundles(request: DeleteBundlesRequest): Promise<DeleteBundlesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteBundlesWithOptions(request, runtime);
  }

  /**
   * Deletes a file from a cloud disk in Cloud Drive Service.
   * 
   * @param request - DeleteCdsFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCdsFileResponse
   */
  async deleteCdsFileWithOptions(request: DeleteCdsFileRequest, runtime: $dara.RuntimeOptions): Promise<DeleteCdsFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.fileId)) {
      query["FileId"] = request.fileId;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCdsFile",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteCdsFileResponse>(await this.callApi(params, req, runtime), new DeleteCdsFileResponse({}));
    } else {
      return $dara.cast<DeleteCdsFileResponse>(await this.execute(params, req, runtime), new DeleteCdsFileResponse({}));
    }

  }

  /**
   * Deletes a file from a cloud disk in Cloud Drive Service.
   * 
   * @param request - DeleteCdsFileRequest
   * @returns DeleteCdsFileResponse
   */
  async deleteCdsFile(request: DeleteCdsFileRequest): Promise<DeleteCdsFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCdsFileWithOptions(request, runtime);
  }

  /**
   * Deletes team spaces.
   * 
   * @param request - DeleteCloudDriveGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCloudDriveGroupsResponse
   */
  async deleteCloudDriveGroupsWithOptions(request: DeleteCloudDriveGroupsRequest, runtime: $dara.RuntimeOptions): Promise<DeleteCloudDriveGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCloudDriveGroups",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteCloudDriveGroupsResponse>(await this.callApi(params, req, runtime), new DeleteCloudDriveGroupsResponse({}));
    } else {
      return $dara.cast<DeleteCloudDriveGroupsResponse>(await this.execute(params, req, runtime), new DeleteCloudDriveGroupsResponse({}));
    }

  }

  /**
   * Deletes team spaces.
   * 
   * @param request - DeleteCloudDriveGroupsRequest
   * @returns DeleteCloudDriveGroupsResponse
   */
  async deleteCloudDriveGroups(request: DeleteCloudDriveGroupsRequest): Promise<DeleteCloudDriveGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCloudDriveGroupsWithOptions(request, runtime);
  }

  /**
   * 删除无影网盘中的终端用户
   * 
   * @param request - DeleteCloudDriveUsersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCloudDriveUsersResponse
   */
  async deleteCloudDriveUsersWithOptions(request: DeleteCloudDriveUsersRequest, runtime: $dara.RuntimeOptions): Promise<DeleteCloudDriveUsersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCloudDriveUsers",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteCloudDriveUsersResponse>(await this.callApi(params, req, runtime), new DeleteCloudDriveUsersResponse({}));
    } else {
      return $dara.cast<DeleteCloudDriveUsersResponse>(await this.execute(params, req, runtime), new DeleteCloudDriveUsersResponse({}));
    }

  }

  /**
   * 删除无影网盘中的终端用户
   * 
   * @param request - DeleteCloudDriveUsersRequest
   * @returns DeleteCloudDriveUsersResponse
   */
  async deleteCloudDriveUsers(request: DeleteCloudDriveUsersRequest): Promise<DeleteCloudDriveUsersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCloudDriveUsersWithOptions(request, runtime);
  }

  /**
   * 删除配置组
   * 
   * @param request - DeleteConfigGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteConfigGroupResponse
   */
  async deleteConfigGroupWithOptions(request: DeleteConfigGroupRequest, runtime: $dara.RuntimeOptions): Promise<DeleteConfigGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupIds)) {
      query["GroupIds"] = request.groupIds;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteConfigGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteConfigGroupResponse>(await this.callApi(params, req, runtime), new DeleteConfigGroupResponse({}));
    } else {
      return $dara.cast<DeleteConfigGroupResponse>(await this.execute(params, req, runtime), new DeleteConfigGroupResponse({}));
    }

  }

  /**
   * 删除配置组
   * 
   * @param request - DeleteConfigGroupRequest
   * @returns DeleteConfigGroupResponse
   */
  async deleteConfigGroup(request: DeleteConfigGroupRequest): Promise<DeleteConfigGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteConfigGroupWithOptions(request, runtime);
  }

  /**
   * Releases a desktop group.
   * 
   * @remarks
   *   Before you delete a desktop group, make sure that cloud desktops in the desktop group are not connected and no users are authorized to use the cloud desktops.
   * *   You cannot delete a subscription desktop group when cloud desktops in the group are in valid period.
   * *   If you delete a pay-as-you-go desktop group, cloud desktops in the group are deleted.
   * 
   * @param request - DeleteDesktopGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDesktopGroupResponse
   */
  async deleteDesktopGroupWithOptions(request: DeleteDesktopGroupRequest, runtime: $dara.RuntimeOptions): Promise<DeleteDesktopGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDesktopGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteDesktopGroupResponse>(await this.callApi(params, req, runtime), new DeleteDesktopGroupResponse({}));
    } else {
      return $dara.cast<DeleteDesktopGroupResponse>(await this.execute(params, req, runtime), new DeleteDesktopGroupResponse({}));
    }

  }

  /**
   * Releases a desktop group.
   * 
   * @remarks
   *   Before you delete a desktop group, make sure that cloud desktops in the desktop group are not connected and no users are authorized to use the cloud desktops.
   * *   You cannot delete a subscription desktop group when cloud desktops in the group are in valid period.
   * *   If you delete a pay-as-you-go desktop group, cloud desktops in the group are deleted.
   * 
   * @param request - DeleteDesktopGroupRequest
   * @returns DeleteDesktopGroupResponse
   */
  async deleteDesktopGroup(request: DeleteDesktopGroupRequest): Promise<DeleteDesktopGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDesktopGroupWithOptions(request, runtime);
  }

  /**
   * Releases pay-as-you-go cloud computers or expired subscription cloud computers.
   * 
   * @param request - DeleteDesktopsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDesktopsResponse
   */
  async deleteDesktopsWithOptions(request: DeleteDesktopsRequest, runtime: $dara.RuntimeOptions): Promise<DeleteDesktopsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDesktops",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteDesktopsResponse>(await this.callApi(params, req, runtime), new DeleteDesktopsResponse({}));
    } else {
      return $dara.cast<DeleteDesktopsResponse>(await this.execute(params, req, runtime), new DeleteDesktopsResponse({}));
    }

  }

  /**
   * Releases pay-as-you-go cloud computers or expired subscription cloud computers.
   * 
   * @param request - DeleteDesktopsRequest
   * @returns DeleteDesktopsResponse
   */
  async deleteDesktops(request: DeleteDesktopsRequest): Promise<DeleteDesktopsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDesktopsWithOptions(request, runtime);
  }

  /**
   * Deletes trusted devices.
   * 
   * @remarks
   * You can call the operation to manage client devices.
   * 
   * @param request - DeleteDevicesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDevicesResponse
   */
  async deleteDevicesWithOptions(request: DeleteDevicesRequest, runtime: $dara.RuntimeOptions): Promise<DeleteDevicesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientType)) {
      query["ClientType"] = request.clientType;
    }

    if (!$dara.isNull(request.deviceIds)) {
      query["DeviceIds"] = request.deviceIds;
    }

    if (!$dara.isNull(request.force)) {
      query["Force"] = request.force;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDevices",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteDevicesResponse>(await this.callApi(params, req, runtime), new DeleteDevicesResponse({}));
    } else {
      return $dara.cast<DeleteDevicesResponse>(await this.execute(params, req, runtime), new DeleteDevicesResponse({}));
    }

  }

  /**
   * Deletes trusted devices.
   * 
   * @remarks
   * You can call the operation to manage client devices.
   * 
   * @param request - DeleteDevicesRequest
   * @returns DeleteDevicesResponse
   */
  async deleteDevices(request: DeleteDevicesRequest): Promise<DeleteDevicesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDevicesWithOptions(request, runtime);
  }

  /**
   * Deletes one or more directories.
   * 
   * @remarks
   * You cannot delete a directory that has a cloud computer or is used by a cloud computer.
   * 
   * @param request - DeleteDirectoriesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDirectoriesResponse
   */
  async deleteDirectoriesWithOptions(request: DeleteDirectoriesRequest, runtime: $dara.RuntimeOptions): Promise<DeleteDirectoriesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDirectories",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteDirectoriesResponse>(await this.callApi(params, req, runtime), new DeleteDirectoriesResponse({}));
    } else {
      return $dara.cast<DeleteDirectoriesResponse>(await this.execute(params, req, runtime), new DeleteDirectoriesResponse({}));
    }

  }

  /**
   * Deletes one or more directories.
   * 
   * @remarks
   * You cannot delete a directory that has a cloud computer or is used by a cloud computer.
   * 
   * @param request - DeleteDirectoriesRequest
   * @returns DeleteDirectoriesResponse
   */
  async deleteDirectories(request: DeleteDirectoriesRequest): Promise<DeleteDirectoriesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDirectoriesWithOptions(request, runtime);
  }

  /**
   * @param request - DeleteEduRoomRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteEduRoomResponse
   */
  async deleteEduRoomWithOptions(request: DeleteEduRoomRequest, runtime: $dara.RuntimeOptions): Promise<DeleteEduRoomResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eduRoomId)) {
      query["EduRoomId"] = request.eduRoomId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteEduRoom",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteEduRoomResponse>(await this.callApi(params, req, runtime), new DeleteEduRoomResponse({}));
    } else {
      return $dara.cast<DeleteEduRoomResponse>(await this.execute(params, req, runtime), new DeleteEduRoomResponse({}));
    }

  }

  /**
   * @param request - DeleteEduRoomRequest
   * @returns DeleteEduRoomResponse
   */
  async deleteEduRoom(request: DeleteEduRoomRequest): Promise<DeleteEduRoomResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteEduRoomWithOptions(request, runtime);
  }

  /**
   * Deletes one or more custom images.
   * 
   * @remarks
   *   Images include system images and custom images. System images cannot be deleted.
   * *   If an image that you want to delete is referenced by a cloud computer template, call the [DeleteBundles](https://help.aliyun.com/document_detail/436972.html) operation to delete the cloud computer template before you delete the image.
   * 
   * @param request - DeleteImagesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteImagesResponse
   */
  async deleteImagesWithOptions(request: DeleteImagesRequest, runtime: $dara.RuntimeOptions): Promise<DeleteImagesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.deleteCascadedBundle)) {
      query["DeleteCascadedBundle"] = request.deleteCascadedBundle;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteImages",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteImagesResponse>(await this.callApi(params, req, runtime), new DeleteImagesResponse({}));
    } else {
      return $dara.cast<DeleteImagesResponse>(await this.execute(params, req, runtime), new DeleteImagesResponse({}));
    }

  }

  /**
   * Deletes one or more custom images.
   * 
   * @remarks
   *   Images include system images and custom images. System images cannot be deleted.
   * *   If an image that you want to delete is referenced by a cloud computer template, call the [DeleteBundles](https://help.aliyun.com/document_detail/436972.html) operation to delete the cloud computer template before you delete the image.
   * 
   * @param request - DeleteImagesRequest
   * @returns DeleteImagesResponse
   */
  async deleteImages(request: DeleteImagesRequest): Promise<DeleteImagesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteImagesWithOptions(request, runtime);
  }

  /**
   * Deletes NAS file systems.
   * 
   * @remarks
   * Before you delete a File Storage NAS (NAS) file system, make sure that the data you want to retain is backed up.
   * >Warning: If a NAS file system is deleted, data stored in the NAS file system cannot be restored. Proceed with caution when you delete NAS file systems.
   * 
   * @param request - DeleteNASFileSystemsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteNASFileSystemsResponse
   */
  async deleteNASFileSystemsWithOptions(request: DeleteNASFileSystemsRequest, runtime: $dara.RuntimeOptions): Promise<DeleteNASFileSystemsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fileSystemId)) {
      query["FileSystemId"] = request.fileSystemId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteNASFileSystems",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteNASFileSystemsResponse>(await this.callApi(params, req, runtime), new DeleteNASFileSystemsResponse({}));
    } else {
      return $dara.cast<DeleteNASFileSystemsResponse>(await this.execute(params, req, runtime), new DeleteNASFileSystemsResponse({}));
    }

  }

  /**
   * Deletes NAS file systems.
   * 
   * @remarks
   * Before you delete a File Storage NAS (NAS) file system, make sure that the data you want to retain is backed up.
   * >Warning: If a NAS file system is deleted, data stored in the NAS file system cannot be restored. Proceed with caution when you delete NAS file systems.
   * 
   * @param request - DeleteNASFileSystemsRequest
   * @returns DeleteNASFileSystemsResponse
   */
  async deleteNASFileSystems(request: DeleteNASFileSystemsRequest): Promise<DeleteNASFileSystemsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteNASFileSystemsWithOptions(request, runtime);
  }

  /**
   * Deletes one or more premium bandwidth plans.
   * 
   * @param request - DeleteNetworkPackagesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteNetworkPackagesResponse
   */
  async deleteNetworkPackagesWithOptions(request: DeleteNetworkPackagesRequest, runtime: $dara.RuntimeOptions): Promise<DeleteNetworkPackagesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.networkPackageId)) {
      query["NetworkPackageId"] = request.networkPackageId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteNetworkPackages",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteNetworkPackagesResponse>(await this.callApi(params, req, runtime), new DeleteNetworkPackagesResponse({}));
    } else {
      return $dara.cast<DeleteNetworkPackagesResponse>(await this.execute(params, req, runtime), new DeleteNetworkPackagesResponse({}));
    }

  }

  /**
   * Deletes one or more premium bandwidth plans.
   * 
   * @param request - DeleteNetworkPackagesRequest
   * @returns DeleteNetworkPackagesResponse
   */
  async deleteNetworkPackages(request: DeleteNetworkPackagesRequest): Promise<DeleteNetworkPackagesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteNetworkPackagesWithOptions(request, runtime);
  }

  /**
   * Deletes office networks (formerly workspaces).
   * 
   * @remarks
   * Before you delete an office network, make sure that the following operations are complete:
   * *   All cloud computers in the office network are released.
   * *   The data that you want to retain is backed up.
   * >  Resources and data on cloud computers in an office network cannot be restored after you delete it. Proceed with caution.
   * 
   * @param request - DeleteOfficeSitesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteOfficeSitesResponse
   */
  async deleteOfficeSitesWithOptions(request: DeleteOfficeSitesRequest, runtime: $dara.RuntimeOptions): Promise<DeleteOfficeSitesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteOfficeSites",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteOfficeSitesResponse>(await this.callApi(params, req, runtime), new DeleteOfficeSitesResponse({}));
    } else {
      return $dara.cast<DeleteOfficeSitesResponse>(await this.execute(params, req, runtime), new DeleteOfficeSitesResponse({}));
    }

  }

  /**
   * Deletes office networks (formerly workspaces).
   * 
   * @remarks
   * Before you delete an office network, make sure that the following operations are complete:
   * *   All cloud computers in the office network are released.
   * *   The data that you want to retain is backed up.
   * >  Resources and data on cloud computers in an office network cannot be restored after you delete it. Proceed with caution.
   * 
   * @param request - DeleteOfficeSitesRequest
   * @returns DeleteOfficeSitesResponse
   */
  async deleteOfficeSites(request: DeleteOfficeSitesRequest): Promise<DeleteOfficeSitesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteOfficeSitesWithOptions(request, runtime);
  }

  /**
   * Deletes one or more custom policies.
   * 
   * @param request - DeletePolicyGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeletePolicyGroupsResponse
   */
  async deletePolicyGroupsWithOptions(request: DeletePolicyGroupsRequest, runtime: $dara.RuntimeOptions): Promise<DeletePolicyGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeletePolicyGroups",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeletePolicyGroupsResponse>(await this.callApi(params, req, runtime), new DeletePolicyGroupsResponse({}));
    } else {
      return $dara.cast<DeletePolicyGroupsResponse>(await this.execute(params, req, runtime), new DeletePolicyGroupsResponse({}));
    }

  }

  /**
   * Deletes one or more custom policies.
   * 
   * @param request - DeletePolicyGroupsRequest
   * @returns DeletePolicyGroupsResponse
   */
  async deletePolicyGroups(request: DeletePolicyGroupsRequest): Promise<DeletePolicyGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deletePolicyGroupsWithOptions(request, runtime);
  }

  /**
   * Deletes one or more snapshots.
   * 
   * @remarks
   * If the IDs of the snapshots that you specify do not exist, requests are ignored.
   * 
   * @param request - DeleteSnapshotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteSnapshotResponse
   */
  async deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: $dara.RuntimeOptions): Promise<DeleteSnapshotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.snapshotId)) {
      query["SnapshotId"] = request.snapshotId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteSnapshot",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteSnapshotResponse>(await this.callApi(params, req, runtime), new DeleteSnapshotResponse({}));
    } else {
      return $dara.cast<DeleteSnapshotResponse>(await this.execute(params, req, runtime), new DeleteSnapshotResponse({}));
    }

  }

  /**
   * Deletes one or more snapshots.
   * 
   * @remarks
   * If the IDs of the snapshots that you specify do not exist, requests are ignored.
   * 
   * @param request - DeleteSnapshotRequest
   * @returns DeleteSnapshotResponse
   */
  async deleteSnapshot(request: DeleteSnapshotRequest): Promise<DeleteSnapshotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteSnapshotWithOptions(request, runtime);
  }

  /**
   * Delete virtual multi-factor authentication (MFA) devices.
   * 
   * @remarks
   * If an MFA device is deleted, the device is unbound, reset, and disabled. When an Active Directory (AD) user wants to connect to the cloud desktop that is bound to the MFA device, the AD user must bind a new MFA device.
   * 
   * @param request - DeleteVirtualMFADeviceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteVirtualMFADeviceResponse
   */
  async deleteVirtualMFADeviceWithOptions(request: DeleteVirtualMFADeviceRequest, runtime: $dara.RuntimeOptions): Promise<DeleteVirtualMFADeviceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.serialNumber)) {
      query["SerialNumber"] = request.serialNumber;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteVirtualMFADevice",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DeleteVirtualMFADeviceResponse>(await this.callApi(params, req, runtime), new DeleteVirtualMFADeviceResponse({}));
    } else {
      return $dara.cast<DeleteVirtualMFADeviceResponse>(await this.execute(params, req, runtime), new DeleteVirtualMFADeviceResponse({}));
    }

  }

  /**
   * Delete virtual multi-factor authentication (MFA) devices.
   * 
   * @remarks
   * If an MFA device is deleted, the device is unbound, reset, and disabled. When an Active Directory (AD) user wants to connect to the cloud desktop that is bound to the MFA device, the AD user must bind a new MFA device.
   * 
   * @param request - DeleteVirtualMFADeviceRequest
   * @returns DeleteVirtualMFADeviceResponse
   */
  async deleteVirtualMFADevice(request: DeleteVirtualMFADeviceRequest): Promise<DeleteVirtualMFADeviceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteVirtualMFADeviceWithOptions(request, runtime);
  }

  /**
   * Queries the details of an access control list (ACL) of an office network or a cloud computer.
   * 
   * @param request - DescribeAclEntriesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAclEntriesResponse
   */
  async describeAclEntriesWithOptions(request: DescribeAclEntriesRequest, runtime: $dara.RuntimeOptions): Promise<DescribeAclEntriesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sourceId)) {
      query["SourceId"] = request.sourceId;
    }

    if (!$dara.isNull(request.sourceType)) {
      query["SourceType"] = request.sourceType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAclEntries",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeAclEntriesResponse>(await this.callApi(params, req, runtime), new DescribeAclEntriesResponse({}));
    } else {
      return $dara.cast<DescribeAclEntriesResponse>(await this.execute(params, req, runtime), new DescribeAclEntriesResponse({}));
    }

  }

  /**
   * Queries the details of an access control list (ACL) of an office network or a cloud computer.
   * 
   * @param request - DescribeAclEntriesRequest
   * @returns DescribeAclEntriesResponse
   */
  async describeAclEntries(request: DescribeAclEntriesRequest): Promise<DescribeAclEntriesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAclEntriesWithOptions(request, runtime);
  }

  /**
   * Queries the automatic snapshot policy.
   * 
   * @remarks
   * You can view an automatic snapshot policy that is associated with a cloud desktop in the Elastic Desktop Service (EDS) console. To view the automatic snapshot policy, you can go to the EDS console, choose Deployment > Snapshots in the left-side navigation pane, and then view an automatic snapshot policy on the Snapshots page.
   * 
   * @param request - DescribeAutoSnapshotPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAutoSnapshotPolicyResponse
   */
  async describeAutoSnapshotPolicyWithOptions(request: DescribeAutoSnapshotPolicyRequest, runtime: $dara.RuntimeOptions): Promise<DescribeAutoSnapshotPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    if (!$dara.isNull(request.policyName)) {
      query["PolicyName"] = request.policyName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAutoSnapshotPolicy",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeAutoSnapshotPolicyResponse>(await this.callApi(params, req, runtime), new DescribeAutoSnapshotPolicyResponse({}));
    } else {
      return $dara.cast<DescribeAutoSnapshotPolicyResponse>(await this.execute(params, req, runtime), new DescribeAutoSnapshotPolicyResponse({}));
    }

  }

  /**
   * Queries the automatic snapshot policy.
   * 
   * @remarks
   * You can view an automatic snapshot policy that is associated with a cloud desktop in the Elastic Desktop Service (EDS) console. To view the automatic snapshot policy, you can go to the EDS console, choose Deployment > Snapshots in the left-side navigation pane, and then view an automatic snapshot policy on the Snapshots page.
   * 
   * @param request - DescribeAutoSnapshotPolicyRequest
   * @returns DescribeAutoSnapshotPolicyResponse
   */
  async describeAutoSnapshotPolicy(request: DescribeAutoSnapshotPolicyRequest): Promise<DescribeAutoSnapshotPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAutoSnapshotPolicyWithOptions(request, runtime);
  }

  /**
   * Queries the details of cloud computer templates.
   * 
   * @param request - DescribeBundlesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBundlesResponse
   */
  async describeBundlesWithOptions(request: DescribeBundlesRequest, runtime: $dara.RuntimeOptions): Promise<DescribeBundlesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bundleId)) {
      query["BundleId"] = request.bundleId;
    }

    if (!$dara.isNull(request.bundleType)) {
      query["BundleType"] = request.bundleType;
    }

    if (!$dara.isNull(request.checkStock)) {
      query["CheckStock"] = request.checkStock;
    }

    if (!$dara.isNull(request.cpuCount)) {
      query["CpuCount"] = request.cpuCount;
    }

    if (!$dara.isNull(request.desktopTypeFamily)) {
      query["DesktopTypeFamily"] = request.desktopTypeFamily;
    }

    if (!$dara.isNull(request.fotaChannel)) {
      query["FotaChannel"] = request.fotaChannel;
    }

    if (!$dara.isNull(request.fromDesktopGroup)) {
      query["FromDesktopGroup"] = request.fromDesktopGroup;
    }

    if (!$dara.isNull(request.gpuCount)) {
      query["GpuCount"] = request.gpuCount;
    }

    if (!$dara.isNull(request.gpuDriverType)) {
      query["GpuDriverType"] = request.gpuDriverType;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.memorySize)) {
      query["MemorySize"] = request.memorySize;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.osType)) {
      query["OsType"] = request.osType;
    }

    if (!$dara.isNull(request.protocolType)) {
      query["ProtocolType"] = request.protocolType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.scope)) {
      query["Scope"] = request.scope;
    }

    if (!$dara.isNull(request.selectedBundle)) {
      query["SelectedBundle"] = request.selectedBundle;
    }

    if (!$dara.isNull(request.sessionType)) {
      query["SessionType"] = request.sessionType;
    }

    if (!$dara.isNull(request.supportMultiSession)) {
      query["SupportMultiSession"] = request.supportMultiSession;
    }

    if (!$dara.isNull(request.volumeEncryptionEnabled)) {
      query["VolumeEncryptionEnabled"] = request.volumeEncryptionEnabled;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBundles",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeBundlesResponse>(await this.callApi(params, req, runtime), new DescribeBundlesResponse({}));
    } else {
      return $dara.cast<DescribeBundlesResponse>(await this.execute(params, req, runtime), new DescribeBundlesResponse({}));
    }

  }

  /**
   * Queries the details of cloud computer templates.
   * 
   * @param request - DescribeBundlesRequest
   * @returns DescribeBundlesResponse
   */
  async describeBundles(request: DescribeBundlesRequest): Promise<DescribeBundlesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBundlesWithOptions(request, runtime);
  }

  /**
   * Queries file sharing links of a cloud disk in Cloud Drive Service.
   * 
   * @param request - DescribeCdsFileShareLinksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCdsFileShareLinksResponse
   */
  async describeCdsFileShareLinksWithOptions(request: DescribeCdsFileShareLinksRequest, runtime: $dara.RuntimeOptions): Promise<DescribeCdsFileShareLinksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.creators)) {
      query["Creators"] = request.creators;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.shareId)) {
      query["ShareId"] = request.shareId;
    }

    if (!$dara.isNull(request.shareName)) {
      query["ShareName"] = request.shareName;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCdsFileShareLinks",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeCdsFileShareLinksResponse>(await this.callApi(params, req, runtime), new DescribeCdsFileShareLinksResponse({}));
    } else {
      return $dara.cast<DescribeCdsFileShareLinksResponse>(await this.execute(params, req, runtime), new DescribeCdsFileShareLinksResponse({}));
    }

  }

  /**
   * Queries file sharing links of a cloud disk in Cloud Drive Service.
   * 
   * @param request - DescribeCdsFileShareLinksRequest
   * @returns DescribeCdsFileShareLinksResponse
   */
  async describeCdsFileShareLinks(request: DescribeCdsFileShareLinksRequest): Promise<DescribeCdsFileShareLinksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCdsFileShareLinksWithOptions(request, runtime);
  }

  /**
   * Queries the details of all Cloud Enterprise Network (CEN) instances within an Alibaba Cloud account.
   * 
   * @param request - DescribeCensRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCensResponse
   */
  async describeCensWithOptions(request: DescribeCensRequest, runtime: $dara.RuntimeOptions): Promise<DescribeCensResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCens",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeCensResponse>(await this.callApi(params, req, runtime), new DescribeCensResponse({}));
    } else {
      return $dara.cast<DescribeCensResponse>(await this.execute(params, req, runtime), new DescribeCensResponse({}));
    }

  }

  /**
   * Queries the details of all Cloud Enterprise Network (CEN) instances within an Alibaba Cloud account.
   * 
   * @param request - DescribeCensRequest
   * @returns DescribeCensResponse
   */
  async describeCens(request: DescribeCensRequest): Promise<DescribeCensResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCensWithOptions(request, runtime);
  }

  /**
   * Queries the operation logs of end users. For example, the logs record the events that end users start and stop cloud desktops, and disconnect desktop sessions.
   * 
   * @remarks
   * You can audit the operation logs of regular users to improve security. The operation logs record events such as desktop startup, shutdown, and session disconnection.
   * 
   * @param request - DescribeClientEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeClientEventsResponse
   */
  async describeClientEventsWithOptions(request: DescribeClientEventsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeClientEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.desktopIp)) {
      query["DesktopIp"] = request.desktopIp;
    }

    if (!$dara.isNull(request.desktopName)) {
      query["DesktopName"] = request.desktopName;
    }

    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.eventType)) {
      query["EventType"] = request.eventType;
    }

    if (!$dara.isNull(request.eventTypes)) {
      query["EventTypes"] = request.eventTypes;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.officeSiteName)) {
      query["OfficeSiteName"] = request.officeSiteName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeClientEvents",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeClientEventsResponse>(await this.callApi(params, req, runtime), new DescribeClientEventsResponse({}));
    } else {
      return $dara.cast<DescribeClientEventsResponse>(await this.execute(params, req, runtime), new DescribeClientEventsResponse({}));
    }

  }

  /**
   * Queries the operation logs of end users. For example, the logs record the events that end users start and stop cloud desktops, and disconnect desktop sessions.
   * 
   * @remarks
   * You can audit the operation logs of regular users to improve security. The operation logs record events such as desktop startup, shutdown, and session disconnection.
   * 
   * @param request - DescribeClientEventsRequest
   * @returns DescribeClientEventsResponse
   */
  async describeClientEvents(request: DescribeClientEventsRequest): Promise<DescribeClientEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeClientEventsWithOptions(request, runtime);
  }

  /**
   * Queries a list of authorized team spaces.
   * 
   * @param request - DescribeCloudDriveGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCloudDriveGroupsResponse
   */
  async describeCloudDriveGroupsWithOptions(request: DescribeCloudDriveGroupsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeCloudDriveGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.directoryName)) {
      query["DirectoryName"] = request.directoryName;
    }

    if (!$dara.isNull(request.driveStatus)) {
      query["DriveStatus"] = request.driveStatus;
    }

    if (!$dara.isNull(request.driveType)) {
      query["DriveType"] = request.driveType;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.groupName)) {
      query["GroupName"] = request.groupName;
    }

    if (!$dara.isNull(request.groupType)) {
      query["GroupType"] = request.groupType;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.parentGroupId)) {
      query["ParentGroupId"] = request.parentGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCloudDriveGroups",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeCloudDriveGroupsResponse>(await this.callApi(params, req, runtime), new DescribeCloudDriveGroupsResponse({}));
    } else {
      return $dara.cast<DescribeCloudDriveGroupsResponse>(await this.execute(params, req, runtime), new DescribeCloudDriveGroupsResponse({}));
    }

  }

  /**
   * Queries a list of authorized team spaces.
   * 
   * @param request - DescribeCloudDriveGroupsRequest
   * @returns DescribeCloudDriveGroupsResponse
   */
  async describeCloudDriveGroups(request: DescribeCloudDriveGroupsRequest): Promise<DescribeCloudDriveGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCloudDriveGroupsWithOptions(request, runtime);
  }

  /**
   * 查询pds用户权限
   * 
   * @param request - DescribeCloudDrivePermissionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCloudDrivePermissionsResponse
   */
  async describeCloudDrivePermissionsWithOptions(request: DescribeCloudDrivePermissionsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeCloudDrivePermissionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCloudDrivePermissions",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeCloudDrivePermissionsResponse>(await this.callApi(params, req, runtime), new DescribeCloudDrivePermissionsResponse({}));
    } else {
      return $dara.cast<DescribeCloudDrivePermissionsResponse>(await this.execute(params, req, runtime), new DescribeCloudDrivePermissionsResponse({}));
    }

  }

  /**
   * 查询pds用户权限
   * 
   * @param request - DescribeCloudDrivePermissionsRequest
   * @returns DescribeCloudDrivePermissionsResponse
   */
  async describeCloudDrivePermissions(request: DescribeCloudDrivePermissionsRequest): Promise<DescribeCloudDrivePermissionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCloudDrivePermissionsWithOptions(request, runtime);
  }

  /**
   * 查询所有无影网盘终端用户的信息
   * 
   * @param request - DescribeCloudDriveUsersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCloudDriveUsersResponse
   */
  async describeCloudDriveUsersWithOptions(request: DescribeCloudDriveUsersRequest, runtime: $dara.RuntimeOptions): Promise<DescribeCloudDriveUsersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCloudDriveUsers",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeCloudDriveUsersResponse>(await this.callApi(params, req, runtime), new DescribeCloudDriveUsersResponse({}));
    } else {
      return $dara.cast<DescribeCloudDriveUsersResponse>(await this.execute(params, req, runtime), new DescribeCloudDriveUsersResponse({}));
    }

  }

  /**
   * 查询所有无影网盘终端用户的信息
   * 
   * @param request - DescribeCloudDriveUsersRequest
   * @returns DescribeCloudDriveUsersResponse
   */
  async describeCloudDriveUsers(request: DescribeCloudDriveUsersRequest): Promise<DescribeCloudDriveUsersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCloudDriveUsersWithOptions(request, runtime);
  }

  /**
   * 查询配置组
   * 
   * @param request - DescribeConfigGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeConfigGroupResponse
   */
  async describeConfigGroupWithOptions(request: DescribeConfigGroupRequest, runtime: $dara.RuntimeOptions): Promise<DescribeConfigGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.groupIds)) {
      query["GroupIds"] = request.groupIds;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.productType)) {
      query["ProductType"] = request.productType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.statuses)) {
      query["Statuses"] = request.statuses;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeConfigGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeConfigGroupResponse>(await this.callApi(params, req, runtime), new DescribeConfigGroupResponse({}));
    } else {
      return $dara.cast<DescribeConfigGroupResponse>(await this.execute(params, req, runtime), new DescribeConfigGroupResponse({}));
    }

  }

  /**
   * 查询配置组
   * 
   * @param request - DescribeConfigGroupRequest
   * @returns DescribeConfigGroupResponse
   */
  async describeConfigGroup(request: DescribeConfigGroupRequest): Promise<DescribeConfigGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeConfigGroupWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeCustomizedListHeadersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCustomizedListHeadersResponse
   */
  async describeCustomizedListHeadersWithOptions(request: DescribeCustomizedListHeadersRequest, runtime: $dara.RuntimeOptions): Promise<DescribeCustomizedListHeadersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.langType)) {
      query["LangType"] = request.langType;
    }

    if (!$dara.isNull(request.listType)) {
      query["ListType"] = request.listType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCustomizedListHeaders",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeCustomizedListHeadersResponse>(await this.callApi(params, req, runtime), new DescribeCustomizedListHeadersResponse({}));
    } else {
      return $dara.cast<DescribeCustomizedListHeadersResponse>(await this.execute(params, req, runtime), new DescribeCustomizedListHeadersResponse({}));
    }

  }

  /**
   * @param request - DescribeCustomizedListHeadersRequest
   * @returns DescribeCustomizedListHeadersResponse
   */
  async describeCustomizedListHeaders(request: DescribeCustomizedListHeadersRequest): Promise<DescribeCustomizedListHeadersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCustomizedListHeadersWithOptions(request, runtime);
  }

  /**
   * Queries sessions in a desktop group.
   * 
   * @param request - DescribeDesktopGroupSessionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDesktopGroupSessionsResponse
   */
  async describeDesktopGroupSessionsWithOptions(request: DescribeDesktopGroupSessionsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDesktopGroupSessionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.ownType)) {
      query["OwnType"] = request.ownType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sessionStatus)) {
      query["SessionStatus"] = request.sessionStatus;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDesktopGroupSessions",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeDesktopGroupSessionsResponse>(await this.callApi(params, req, runtime), new DescribeDesktopGroupSessionsResponse({}));
    } else {
      return $dara.cast<DescribeDesktopGroupSessionsResponse>(await this.execute(params, req, runtime), new DescribeDesktopGroupSessionsResponse({}));
    }

  }

  /**
   * Queries sessions in a desktop group.
   * 
   * @param request - DescribeDesktopGroupSessionsRequest
   * @returns DescribeDesktopGroupSessionsResponse
   */
  async describeDesktopGroupSessions(request: DescribeDesktopGroupSessionsRequest): Promise<DescribeDesktopGroupSessionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDesktopGroupSessionsWithOptions(request, runtime);
  }

  /**
   * Queries a list of desktop groups.
   * 
   * @param request - DescribeDesktopGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDesktopGroupsResponse
   */
  async describeDesktopGroupsWithOptions(request: DescribeDesktopGroupsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDesktopGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bundleId)) {
      query["BundleId"] = request.bundleId;
    }

    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.desktopGroupIds)) {
      query["DesktopGroupIds"] = request.desktopGroupIds;
    }

    if (!$dara.isNull(request.desktopGroupName)) {
      query["DesktopGroupName"] = request.desktopGroupName;
    }

    if (!$dara.isNull(request.endUserIds)) {
      query["EndUserIds"] = request.endUserIds;
    }

    if (!$dara.isNull(request.excludedEndUserIds)) {
      query["ExcludedEndUserIds"] = request.excludedEndUserIds;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.multiResource)) {
      query["MultiResource"] = request.multiResource;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.ownType)) {
      query["OwnType"] = request.ownType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.protocolType)) {
      query["ProtocolType"] = request.protocolType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDesktopGroups",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeDesktopGroupsResponse>(await this.callApi(params, req, runtime), new DescribeDesktopGroupsResponse({}));
    } else {
      return $dara.cast<DescribeDesktopGroupsResponse>(await this.execute(params, req, runtime), new DescribeDesktopGroupsResponse({}));
    }

  }

  /**
   * Queries a list of desktop groups.
   * 
   * @param request - DescribeDesktopGroupsRequest
   * @returns DescribeDesktopGroupsResponse
   */
  async describeDesktopGroups(request: DescribeDesktopGroupsRequest): Promise<DescribeDesktopGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDesktopGroupsWithOptions(request, runtime);
  }

  /**
   * Queries the basic information about cloud computers.
   * 
   * @param request - DescribeDesktopInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDesktopInfoResponse
   */
  async describeDesktopInfoWithOptions(request: DescribeDesktopInfoRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDesktopInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDesktopInfo",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeDesktopInfoResponse>(await this.callApi(params, req, runtime), new DescribeDesktopInfoResponse({}));
    } else {
      return $dara.cast<DescribeDesktopInfoResponse>(await this.execute(params, req, runtime), new DescribeDesktopInfoResponse({}));
    }

  }

  /**
   * Queries the basic information about cloud computers.
   * 
   * @param request - DescribeDesktopInfoRequest
   * @returns DescribeDesktopInfoResponse
   */
  async describeDesktopInfo(request: DescribeDesktopInfoRequest): Promise<DescribeDesktopInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDesktopInfoWithOptions(request, runtime);
  }

  /**
   * 查询超卖组
   * 
   * @param request - DescribeDesktopOversoldGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDesktopOversoldGroupResponse
   */
  async describeDesktopOversoldGroupWithOptions(request: DescribeDesktopOversoldGroupRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDesktopOversoldGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.oversoldGroupIds)) {
      query["OversoldGroupIds"] = request.oversoldGroupIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDesktopOversoldGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeDesktopOversoldGroupResponse>(await this.callApi(params, req, runtime), new DescribeDesktopOversoldGroupResponse({}));
    } else {
      return $dara.cast<DescribeDesktopOversoldGroupResponse>(await this.execute(params, req, runtime), new DescribeDesktopOversoldGroupResponse({}));
    }

  }

  /**
   * 查询超卖组
   * 
   * @param request - DescribeDesktopOversoldGroupRequest
   * @returns DescribeDesktopOversoldGroupResponse
   */
  async describeDesktopOversoldGroup(request: DescribeDesktopOversoldGroupRequest): Promise<DescribeDesktopOversoldGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDesktopOversoldGroupWithOptions(request, runtime);
  }

  /**
   * 查询超卖组用户
   * 
   * @param request - DescribeDesktopOversoldUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDesktopOversoldUserResponse
   */
  async describeDesktopOversoldUserWithOptions(request: DescribeDesktopOversoldUserRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDesktopOversoldUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.oversoldGroupId)) {
      query["OversoldGroupId"] = request.oversoldGroupId;
    }

    if (!$dara.isNull(request.userDesktopIds)) {
      query["UserDesktopIds"] = request.userDesktopIds;
    }

    if (!$dara.isNull(request.userGroupId)) {
      query["UserGroupId"] = request.userGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDesktopOversoldUser",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeDesktopOversoldUserResponse>(await this.callApi(params, req, runtime), new DescribeDesktopOversoldUserResponse({}));
    } else {
      return $dara.cast<DescribeDesktopOversoldUserResponse>(await this.execute(params, req, runtime), new DescribeDesktopOversoldUserResponse({}));
    }

  }

  /**
   * 查询超卖组用户
   * 
   * @param request - DescribeDesktopOversoldUserRequest
   * @returns DescribeDesktopOversoldUserResponse
   */
  async describeDesktopOversoldUser(request: DescribeDesktopOversoldUserRequest): Promise<DescribeDesktopOversoldUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDesktopOversoldUserWithOptions(request, runtime);
  }

  /**
   * 查询超卖用户组
   * 
   * @param request - DescribeDesktopOversoldUserGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDesktopOversoldUserGroupResponse
   */
  async describeDesktopOversoldUserGroupWithOptions(request: DescribeDesktopOversoldUserGroupRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDesktopOversoldUserGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.oversoldGroupId)) {
      query["OversoldGroupId"] = request.oversoldGroupId;
    }

    if (!$dara.isNull(request.userGroupIds)) {
      query["UserGroupIds"] = request.userGroupIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDesktopOversoldUserGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeDesktopOversoldUserGroupResponse>(await this.callApi(params, req, runtime), new DescribeDesktopOversoldUserGroupResponse({}));
    } else {
      return $dara.cast<DescribeDesktopOversoldUserGroupResponse>(await this.execute(params, req, runtime), new DescribeDesktopOversoldUserGroupResponse({}));
    }

  }

  /**
   * 查询超卖用户组
   * 
   * @param request - DescribeDesktopOversoldUserGroupRequest
   * @returns DescribeDesktopOversoldUserGroupResponse
   */
  async describeDesktopOversoldUserGroup(request: DescribeDesktopOversoldUserGroupRequest): Promise<DescribeDesktopOversoldUserGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDesktopOversoldUserGroupWithOptions(request, runtime);
  }

  /**
   * Queries the detailed session information of a cloud computer.
   * 
   * @remarks
   * You can only query data within the last 30 days.
   * 
   * @param request - DescribeDesktopSessionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDesktopSessionsResponse
   */
  async describeDesktopSessionsWithOptions(request: DescribeDesktopSessionsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDesktopSessionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkOsSession)) {
      query["CheckOsSession"] = request.checkOsSession;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.desktopName)) {
      query["DesktopName"] = request.desktopName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.endUserIdFilter)) {
      query["EndUserIdFilter"] = request.endUserIdFilter;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sessionStatus)) {
      query["SessionStatus"] = request.sessionStatus;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.subPayType)) {
      query["SubPayType"] = request.subPayType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDesktopSessions",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeDesktopSessionsResponse>(await this.callApi(params, req, runtime), new DescribeDesktopSessionsResponse({}));
    } else {
      return $dara.cast<DescribeDesktopSessionsResponse>(await this.execute(params, req, runtime), new DescribeDesktopSessionsResponse({}));
    }

  }

  /**
   * Queries the detailed session information of a cloud computer.
   * 
   * @remarks
   * You can only query data within the last 30 days.
   * 
   * @param request - DescribeDesktopSessionsRequest
   * @returns DescribeDesktopSessionsResponse
   */
  async describeDesktopSessions(request: DescribeDesktopSessionsRequest): Promise<DescribeDesktopSessionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDesktopSessionsWithOptions(request, runtime);
  }

  /**
   * Queries the instance types of cloud computers.
   * 
   * @remarks
   * When no values are specified for the `InstanceTypeFamily` and `DesktopTypeId` parameters for a cloud desktop, all types of cloud desktops are queried.
   * 
   * @param request - DescribeDesktopTypesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDesktopTypesResponse
   */
  async describeDesktopTypesWithOptions(request: DescribeDesktopTypesRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDesktopTypesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appliedScope)) {
      query["AppliedScope"] = request.appliedScope;
    }

    if (!$dara.isNull(request.cpuCount)) {
      query["CpuCount"] = request.cpuCount;
    }

    if (!$dara.isNull(request.desktopGroupIdForModify)) {
      query["DesktopGroupIdForModify"] = request.desktopGroupIdForModify;
    }

    if (!$dara.isNull(request.desktopIdForModify)) {
      query["DesktopIdForModify"] = request.desktopIdForModify;
    }

    if (!$dara.isNull(request.desktopTypeId)) {
      query["DesktopTypeId"] = request.desktopTypeId;
    }

    if (!$dara.isNull(request.desktopTypeIdList)) {
      query["DesktopTypeIdList"] = request.desktopTypeIdList;
    }

    if (!$dara.isNull(request.gpuCount)) {
      query["GpuCount"] = request.gpuCount;
    }

    if (!$dara.isNull(request.gpuDriverType)) {
      query["GpuDriverType"] = request.gpuDriverType;
    }

    if (!$dara.isNull(request.instanceTypeFamily)) {
      query["InstanceTypeFamily"] = request.instanceTypeFamily;
    }

    if (!$dara.isNull(request.memorySize)) {
      query["MemorySize"] = request.memorySize;
    }

    if (!$dara.isNull(request.orderBy)) {
      query["OrderBy"] = request.orderBy;
    }

    if (!$dara.isNull(request.orderType)) {
      query["OrderType"] = request.orderType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.scope)) {
      query["Scope"] = request.scope;
    }

    if (!$dara.isNull(request.sortType)) {
      query["SortType"] = request.sortType;
    }

    if (!$dara.isNull(request.supportMinSessionCount)) {
      query["SupportMinSessionCount"] = request.supportMinSessionCount;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDesktopTypes",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeDesktopTypesResponse>(await this.callApi(params, req, runtime), new DescribeDesktopTypesResponse({}));
    } else {
      return $dara.cast<DescribeDesktopTypesResponse>(await this.execute(params, req, runtime), new DescribeDesktopTypesResponse({}));
    }

  }

  /**
   * Queries the instance types of cloud computers.
   * 
   * @remarks
   * When no values are specified for the `InstanceTypeFamily` and `DesktopTypeId` parameters for a cloud desktop, all types of cloud desktops are queried.
   * 
   * @param request - DescribeDesktopTypesRequest
   * @returns DescribeDesktopTypesResponse
   */
  async describeDesktopTypes(request: DescribeDesktopTypesRequest): Promise<DescribeDesktopTypesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDesktopTypesWithOptions(request, runtime);
  }

  /**
   * Query the details of the cloud desktop.
   * 
   * @param request - DescribeDesktopsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDesktopsResponse
   */
  async describeDesktopsWithOptions(request: DescribeDesktopsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDesktopsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.chargeType)) {
      query["ChargeType"] = request.chargeType;
    }

    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.desktopName)) {
      query["DesktopName"] = request.desktopName;
    }

    if (!$dara.isNull(request.desktopStatus)) {
      query["DesktopStatus"] = request.desktopStatus;
    }

    if (!$dara.isNull(request.desktopStatusList)) {
      query["DesktopStatusList"] = request.desktopStatusList;
    }

    if (!$dara.isNull(request.desktopType)) {
      query["DesktopType"] = request.desktopType;
    }

    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.excludedEndUserId)) {
      query["ExcludedEndUserId"] = request.excludedEndUserId;
    }

    if (!$dara.isNull(request.expiredTime)) {
      query["ExpiredTime"] = request.expiredTime;
    }

    if (!$dara.isNull(request.fillResourceGroup)) {
      query["FillResourceGroup"] = request.fillResourceGroup;
    }

    if (!$dara.isNull(request.filterDesktopGroup)) {
      query["FilterDesktopGroup"] = request.filterDesktopGroup;
    }

    if (!$dara.isNull(request.gpuInstanceGroupId)) {
      query["GpuInstanceGroupId"] = request.gpuInstanceGroupId;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.managementFlag)) {
      query["ManagementFlag"] = request.managementFlag;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.multiResource)) {
      query["MultiResource"] = request.multiResource;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.officeSiteName)) {
      query["OfficeSiteName"] = request.officeSiteName;
    }

    if (!$dara.isNull(request.onlyDesktopGroup)) {
      query["OnlyDesktopGroup"] = request.onlyDesktopGroup;
    }

    if (!$dara.isNull(request.osTypes)) {
      query["OsTypes"] = request.osTypes;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.protocolType)) {
      query["ProtocolType"] = request.protocolType;
    }

    if (!$dara.isNull(request.qosRuleId)) {
      query["QosRuleId"] = request.qosRuleId;
    }

    if (!$dara.isNull(request.queryFotaUpdate)) {
      query["QueryFotaUpdate"] = request.queryFotaUpdate;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.snapshotPolicyId)) {
      query["SnapshotPolicyId"] = request.snapshotPolicyId;
    }

    if (!$dara.isNull(request.subPayType)) {
      query["SubPayType"] = request.subPayType;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.userName)) {
      query["UserName"] = request.userName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDesktops",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeDesktopsResponse>(await this.callApi(params, req, runtime), new DescribeDesktopsResponse({}));
    } else {
      return $dara.cast<DescribeDesktopsResponse>(await this.execute(params, req, runtime), new DescribeDesktopsResponse({}));
    }

  }

  /**
   * Query the details of the cloud desktop.
   * 
   * @param request - DescribeDesktopsRequest
   * @returns DescribeDesktopsResponse
   */
  async describeDesktops(request: DescribeDesktopsRequest): Promise<DescribeDesktopsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDesktopsWithOptions(request, runtime);
  }

  /**
   * Queries the cloud computers in a cloud computer pool by billing method.
   * 
   * @param request - DescribeDesktopsInGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDesktopsInGroupResponse
   */
  async describeDesktopsInGroupWithOptions(request: DescribeDesktopsInGroupRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDesktopsInGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.ignoreDeleted)) {
      query["IgnoreDeleted"] = request.ignoreDeleted;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDesktopsInGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeDesktopsInGroupResponse>(await this.callApi(params, req, runtime), new DescribeDesktopsInGroupResponse({}));
    } else {
      return $dara.cast<DescribeDesktopsInGroupResponse>(await this.execute(params, req, runtime), new DescribeDesktopsInGroupResponse({}));
    }

  }

  /**
   * Queries the cloud computers in a cloud computer pool by billing method.
   * 
   * @param request - DescribeDesktopsInGroupRequest
   * @returns DescribeDesktopsInGroupResponse
   */
  async describeDesktopsInGroup(request: DescribeDesktopsInGroupRequest): Promise<DescribeDesktopsInGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDesktopsInGroupWithOptions(request, runtime);
  }

  /**
   * Queries the list of trusted devices.
   * 
   * @param request - DescribeDevicesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDevicesResponse
   */
  async describeDevicesWithOptions(request: DescribeDevicesRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDevicesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.adDomain)) {
      query["AdDomain"] = request.adDomain;
    }

    if (!$dara.isNull(request.clientType)) {
      query["ClientType"] = request.clientType;
    }

    if (!$dara.isNull(request.deviceId)) {
      query["DeviceId"] = request.deviceId;
    }

    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.userType)) {
      query["UserType"] = request.userType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDevices",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeDevicesResponse>(await this.callApi(params, req, runtime), new DescribeDevicesResponse({}));
    } else {
      return $dara.cast<DescribeDevicesResponse>(await this.execute(params, req, runtime), new DescribeDevicesResponse({}));
    }

  }

  /**
   * Queries the list of trusted devices.
   * 
   * @param request - DescribeDevicesRequest
   * @returns DescribeDevicesResponse
   */
  async describeDevices(request: DescribeDevicesRequest): Promise<DescribeDevicesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDevicesWithOptions(request, runtime);
  }

  /**
   * Queries the details of directories.
   * 
   * @param request - DescribeDirectoriesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDirectoriesResponse
   */
  async describeDirectoriesWithOptions(request: DescribeDirectoriesRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDirectoriesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.directoryStatus)) {
      query["DirectoryStatus"] = request.directoryStatus;
    }

    if (!$dara.isNull(request.directoryType)) {
      query["DirectoryType"] = request.directoryType;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDirectories",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeDirectoriesResponse>(await this.callApi(params, req, runtime), new DescribeDirectoriesResponse({}));
    } else {
      return $dara.cast<DescribeDirectoriesResponse>(await this.execute(params, req, runtime), new DescribeDirectoriesResponse({}));
    }

  }

  /**
   * Queries the details of directories.
   * 
   * @param request - DescribeDirectoriesRequest
   * @returns DescribeDirectoriesResponse
   */
  async describeDirectories(request: DescribeDirectoriesRequest): Promise<DescribeDirectoriesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDirectoriesWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeFlowMetricRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeFlowMetricResponse
   */
  async describeFlowMetricWithOptions(request: DescribeFlowMetricRequest, runtime: $dara.RuntimeOptions): Promise<DescribeFlowMetricResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceType)) {
      query["InstanceType"] = request.instanceType;
    }

    if (!$dara.isNull(request.metricType)) {
      query["MetricType"] = request.metricType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeFlowMetric",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeFlowMetricResponse>(await this.callApi(params, req, runtime), new DescribeFlowMetricResponse({}));
    } else {
      return $dara.cast<DescribeFlowMetricResponse>(await this.execute(params, req, runtime), new DescribeFlowMetricResponse({}));
    }

  }

  /**
   * @param request - DescribeFlowMetricRequest
   * @returns DescribeFlowMetricResponse
   */
  async describeFlowMetric(request: DescribeFlowMetricRequest): Promise<DescribeFlowMetricResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeFlowMetricWithOptions(request, runtime);
  }

  /**
   * Queries cloud computer-level traffic statistics of a single office network.
   * 
   * @remarks
   * > You can query only the traffic data in the last 90 days.
   * 
   * @param request - DescribeFlowStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeFlowStatisticResponse
   */
  async describeFlowStatisticWithOptions(request: DescribeFlowStatisticRequest, runtime: $dara.RuntimeOptions): Promise<DescribeFlowStatisticResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeFlowStatistic",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeFlowStatisticResponse>(await this.callApi(params, req, runtime), new DescribeFlowStatisticResponse({}));
    } else {
      return $dara.cast<DescribeFlowStatisticResponse>(await this.execute(params, req, runtime), new DescribeFlowStatisticResponse({}));
    }

  }

  /**
   * Queries cloud computer-level traffic statistics of a single office network.
   * 
   * @remarks
   * > You can query only the traffic data in the last 90 days.
   * 
   * @param request - DescribeFlowStatisticRequest
   * @returns DescribeFlowStatisticResponse
   */
  async describeFlowStatistic(request: DescribeFlowStatisticRequest): Promise<DescribeFlowStatisticResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeFlowStatisticWithOptions(request, runtime);
  }

  /**
   * Queries information about the cloud computers whose images can be and are pending to be updated to the specified version.
   * 
   * @param request - DescribeFotaPendingDesktopsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeFotaPendingDesktopsResponse
   */
  async describeFotaPendingDesktopsWithOptions(request: DescribeFotaPendingDesktopsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeFotaPendingDesktopsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.desktopName)) {
      query["DesktopName"] = request.desktopName;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.taskUid)) {
      query["TaskUid"] = request.taskUid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeFotaPendingDesktops",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeFotaPendingDesktopsResponse>(await this.callApi(params, req, runtime), new DescribeFotaPendingDesktopsResponse({}));
    } else {
      return $dara.cast<DescribeFotaPendingDesktopsResponse>(await this.execute(params, req, runtime), new DescribeFotaPendingDesktopsResponse({}));
    }

  }

  /**
   * Queries information about the cloud computers whose images can be and are pending to be updated to the specified version.
   * 
   * @param request - DescribeFotaPendingDesktopsRequest
   * @returns DescribeFotaPendingDesktopsResponse
   */
  async describeFotaPendingDesktops(request: DescribeFotaPendingDesktopsRequest): Promise<DescribeFotaPendingDesktopsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeFotaPendingDesktopsWithOptions(request, runtime);
  }

  /**
   * Queries a list of update tasks.
   * 
   * @param request - DescribeFotaTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeFotaTasksResponse
   */
  async describeFotaTasksWithOptions(request: DescribeFotaTasksRequest, runtime: $dara.RuntimeOptions): Promise<DescribeFotaTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fotaStatus)) {
      query["FotaStatus"] = request.fotaStatus;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.taskUid)) {
      query["TaskUid"] = request.taskUid;
    }

    if (!$dara.isNull(request.userStatus)) {
      query["UserStatus"] = request.userStatus;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeFotaTasks",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeFotaTasksResponse>(await this.callApi(params, req, runtime), new DescribeFotaTasksResponse({}));
    } else {
      return $dara.cast<DescribeFotaTasksResponse>(await this.execute(params, req, runtime), new DescribeFotaTasksResponse({}));
    }

  }

  /**
   * Queries a list of update tasks.
   * 
   * @param request - DescribeFotaTasksRequest
   * @returns DescribeFotaTasksResponse
   */
  async describeFotaTasks(request: DescribeFotaTasksRequest): Promise<DescribeFotaTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeFotaTasksWithOptions(request, runtime);
  }

  /**
   * Queries the applications and their processes of an end user.
   * 
   * @param request - DescribeGuestApplicationsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeGuestApplicationsResponse
   */
  async describeGuestApplicationsWithOptions(request: DescribeGuestApplicationsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeGuestApplicationsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeGuestApplications",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeGuestApplicationsResponse>(await this.callApi(params, req, runtime), new DescribeGuestApplicationsResponse({}));
    } else {
      return $dara.cast<DescribeGuestApplicationsResponse>(await this.execute(params, req, runtime), new DescribeGuestApplicationsResponse({}));
    }

  }

  /**
   * Queries the applications and their processes of an end user.
   * 
   * @param request - DescribeGuestApplicationsRequest
   * @returns DescribeGuestApplicationsResponse
   */
  async describeGuestApplications(request: DescribeGuestApplicationsRequest): Promise<DescribeGuestApplicationsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeGuestApplicationsWithOptions(request, runtime);
  }

  /**
   * Queries the image modification records of cloud computers.
   * 
   * @param request - DescribeImageModifiedRecordsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageModifiedRecordsResponse
   */
  async describeImageModifiedRecordsWithOptions(request: DescribeImageModifiedRecordsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeImageModifiedRecordsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageModifiedRecords",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeImageModifiedRecordsResponse>(await this.callApi(params, req, runtime), new DescribeImageModifiedRecordsResponse({}));
    } else {
      return $dara.cast<DescribeImageModifiedRecordsResponse>(await this.execute(params, req, runtime), new DescribeImageModifiedRecordsResponse({}));
    }

  }

  /**
   * Queries the image modification records of cloud computers.
   * 
   * @param request - DescribeImageModifiedRecordsRequest
   * @returns DescribeImageModifiedRecordsResponse
   */
  async describeImageModifiedRecords(request: DescribeImageModifiedRecordsRequest): Promise<DescribeImageModifiedRecordsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageModifiedRecordsWithOptions(request, runtime);
  }

  /**
   * Queries the recipient Alibaba Cloud accounts with which an image is shared.
   * 
   * @remarks
   * You can call the [ModifyImagePermission](https://help.aliyun.com/document_detail/436982.html) operation to share an image with another cloud computer user or unshare an image. You can call the DescribeImagePermission operation to obtain the Alibaba Cloud accounts with which the current image is shared.
   * 
   * @param request - DescribeImagePermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImagePermissionResponse
   */
  async describeImagePermissionWithOptions(request: DescribeImagePermissionRequest, runtime: $dara.RuntimeOptions): Promise<DescribeImagePermissionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImagePermission",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeImagePermissionResponse>(await this.callApi(params, req, runtime), new DescribeImagePermissionResponse({}));
    } else {
      return $dara.cast<DescribeImagePermissionResponse>(await this.execute(params, req, runtime), new DescribeImagePermissionResponse({}));
    }

  }

  /**
   * Queries the recipient Alibaba Cloud accounts with which an image is shared.
   * 
   * @remarks
   * You can call the [ModifyImagePermission](https://help.aliyun.com/document_detail/436982.html) operation to share an image with another cloud computer user or unshare an image. You can call the DescribeImagePermission operation to obtain the Alibaba Cloud accounts with which the current image is shared.
   * 
   * @param request - DescribeImagePermissionRequest
   * @returns DescribeImagePermissionResponse
   */
  async describeImagePermission(request: DescribeImagePermissionRequest): Promise<DescribeImagePermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImagePermissionWithOptions(request, runtime);
  }

  /**
   * Queries the information about images.
   * 
   * @param request - DescribeImagesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImagesResponse
   */
  async describeImagesWithOptions(request: DescribeImagesRequest, runtime: $dara.RuntimeOptions): Promise<DescribeImagesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopInstanceType)) {
      query["DesktopInstanceType"] = request.desktopInstanceType;
    }

    if (!$dara.isNull(request.fotaVersion)) {
      query["FotaVersion"] = request.fotaVersion;
    }

    if (!$dara.isNull(request.gpuCategory)) {
      query["GpuCategory"] = request.gpuCategory;
    }

    if (!$dara.isNull(request.gpuDriverVersion)) {
      query["GpuDriverVersion"] = request.gpuDriverVersion;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.imageName)) {
      query["ImageName"] = request.imageName;
    }

    if (!$dara.isNull(request.imageStatus)) {
      query["ImageStatus"] = request.imageStatus;
    }

    if (!$dara.isNull(request.imageType)) {
      query["ImageType"] = request.imageType;
    }

    if (!$dara.isNull(request.languageType)) {
      query["LanguageType"] = request.languageType;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.osType)) {
      query["OsType"] = request.osType;
    }

    if (!$dara.isNull(request.protocolType)) {
      query["ProtocolType"] = request.protocolType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sessionType)) {
      query["SessionType"] = request.sessionType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImages",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeImagesResponse>(await this.callApi(params, req, runtime), new DescribeImagesResponse({}));
    } else {
      return $dara.cast<DescribeImagesResponse>(await this.execute(params, req, runtime), new DescribeImagesResponse({}));
    }

  }

  /**
   * Queries the information about images.
   * 
   * @param request - DescribeImagesRequest
   * @returns DescribeImagesResponse
   */
  async describeImages(request: DescribeImagesRequest): Promise<DescribeImagesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImagesWithOptions(request, runtime);
  }

  /**
   * @remarks
   *   After you run a command, it may not succeed. You can call this operation to query the execution result.
   * *   You can query the information about execution in the last two weeks. A maximum of 100,000 lines of execution information can be retained.
   * 
   * @param request - DescribeInvocationsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInvocationsResponse
   */
  async describeInvocationsWithOptions(request: DescribeInvocationsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeInvocationsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.commandType)) {
      query["CommandType"] = request.commandType;
    }

    if (!$dara.isNull(request.contentEncoding)) {
      query["ContentEncoding"] = request.contentEncoding;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.desktopIds)) {
      query["DesktopIds"] = request.desktopIds;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.includeInvokeDesktops)) {
      query["IncludeInvokeDesktops"] = request.includeInvokeDesktops;
    }

    if (!$dara.isNull(request.includeOutput)) {
      query["IncludeOutput"] = request.includeOutput;
    }

    if (!$dara.isNull(request.invokeId)) {
      query["InvokeId"] = request.invokeId;
    }

    if (!$dara.isNull(request.invokeStatus)) {
      query["InvokeStatus"] = request.invokeStatus;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeInvocations",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeInvocationsResponse>(await this.callApi(params, req, runtime), new DescribeInvocationsResponse({}));
    } else {
      return $dara.cast<DescribeInvocationsResponse>(await this.execute(params, req, runtime), new DescribeInvocationsResponse({}));
    }

  }

  /**
   * @remarks
   *   After you run a command, it may not succeed. You can call this operation to query the execution result.
   * *   You can query the information about execution in the last two weeks. A maximum of 100,000 lines of execution information can be retained.
   * 
   * @param request - DescribeInvocationsRequest
   * @returns DescribeInvocationsResponse
   */
  async describeInvocations(request: DescribeInvocationsRequest): Promise<DescribeInvocationsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeInvocationsWithOptions(request, runtime);
  }

  /**
   * Queries Key Management Service (KMS) keys of users. The first time you call this operation, you can try to create a service key for Elastic Desktop Service (EDS) and call the operation to return results.
   * 
   * @param request - DescribeKmsKeysRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeKmsKeysResponse
   */
  async describeKmsKeysWithOptions(request: DescribeKmsKeysRequest, runtime: $dara.RuntimeOptions): Promise<DescribeKmsKeysResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeKmsKeys",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeKmsKeysResponse>(await this.callApi(params, req, runtime), new DescribeKmsKeysResponse({}));
    } else {
      return $dara.cast<DescribeKmsKeysResponse>(await this.execute(params, req, runtime), new DescribeKmsKeysResponse({}));
    }

  }

  /**
   * Queries Key Management Service (KMS) keys of users. The first time you call this operation, you can try to create a service key for Elastic Desktop Service (EDS) and call the operation to return results.
   * 
   * @param request - DescribeKmsKeysRequest
   * @returns DescribeKmsKeysResponse
   */
  async describeKmsKeys(request: DescribeKmsKeysRequest): Promise<DescribeKmsKeysResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeKmsKeysWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeModificationPriceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeModificationPriceResponse
   */
  async describeModificationPriceWithOptions(request: DescribeModificationPriceRequest, runtime: $dara.RuntimeOptions): Promise<DescribeModificationPriceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bandwidth)) {
      query["Bandwidth"] = request.bandwidth;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceType)) {
      query["InstanceType"] = request.instanceType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.rootDiskSizeGib)) {
      query["RootDiskSizeGib"] = request.rootDiskSizeGib;
    }

    if (!$dara.isNull(request.userDiskSizeGib)) {
      query["UserDiskSizeGib"] = request.userDiskSizeGib;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeModificationPrice",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeModificationPriceResponse>(await this.callApi(params, req, runtime), new DescribeModificationPriceResponse({}));
    } else {
      return $dara.cast<DescribeModificationPriceResponse>(await this.execute(params, req, runtime), new DescribeModificationPriceResponse({}));
    }

  }

  /**
   * @param request - DescribeModificationPriceRequest
   * @returns DescribeModificationPriceResponse
   */
  async describeModificationPrice(request: DescribeModificationPriceRequest): Promise<DescribeModificationPriceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeModificationPriceWithOptions(request, runtime);
  }

  /**
   * Queries the information about File Storage NAS (NAS) file systems.
   * 
   * @param request - DescribeNASFileSystemsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeNASFileSystemsResponse
   */
  async describeNASFileSystemsWithOptions(request: DescribeNASFileSystemsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeNASFileSystemsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fileSystemId)) {
      query["FileSystemId"] = request.fileSystemId;
    }

    if (!$dara.isNull(request.matchCompatibleProfile)) {
      query["MatchCompatibleProfile"] = request.matchCompatibleProfile;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeNASFileSystems",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeNASFileSystemsResponse>(await this.callApi(params, req, runtime), new DescribeNASFileSystemsResponse({}));
    } else {
      return $dara.cast<DescribeNASFileSystemsResponse>(await this.execute(params, req, runtime), new DescribeNASFileSystemsResponse({}));
    }

  }

  /**
   * Queries the information about File Storage NAS (NAS) file systems.
   * 
   * @param request - DescribeNASFileSystemsRequest
   * @returns DescribeNASFileSystemsResponse
   */
  async describeNASFileSystems(request: DescribeNASFileSystemsRequest): Promise<DescribeNASFileSystemsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeNASFileSystemsWithOptions(request, runtime);
  }

  /**
   * Queries the details of one or more premium bandwidth plans.
   * 
   * @param request - DescribeNetworkPackagesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeNetworkPackagesResponse
   */
  async describeNetworkPackagesWithOptions(request: DescribeNetworkPackagesRequest, runtime: $dara.RuntimeOptions): Promise<DescribeNetworkPackagesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.internetChargeType)) {
      query["InternetChargeType"] = request.internetChargeType;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.networkPackageId)) {
      query["NetworkPackageId"] = request.networkPackageId;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeNetworkPackages",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeNetworkPackagesResponse>(await this.callApi(params, req, runtime), new DescribeNetworkPackagesResponse({}));
    } else {
      return $dara.cast<DescribeNetworkPackagesResponse>(await this.execute(params, req, runtime), new DescribeNetworkPackagesResponse({}));
    }

  }

  /**
   * Queries the details of one or more premium bandwidth plans.
   * 
   * @param request - DescribeNetworkPackagesRequest
   * @returns DescribeNetworkPackagesResponse
   */
  async describeNetworkPackages(request: DescribeNetworkPackagesRequest): Promise<DescribeNetworkPackagesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeNetworkPackagesWithOptions(request, runtime);
  }

  /**
   * Queries office network properties, including office network ID, name, status, and creation time.
   * 
   * @param request - DescribeOfficeSitesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeOfficeSitesResponse
   */
  async describeOfficeSitesWithOptions(request: DescribeOfficeSitesRequest, runtime: $dara.RuntimeOptions): Promise<DescribeOfficeSitesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.officeSiteType)) {
      query["OfficeSiteType"] = request.officeSiteType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.securityProtection)) {
      query["SecurityProtection"] = request.securityProtection;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeOfficeSites",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeOfficeSitesResponse>(await this.callApi(params, req, runtime), new DescribeOfficeSitesResponse({}));
    } else {
      return $dara.cast<DescribeOfficeSitesResponse>(await this.execute(params, req, runtime), new DescribeOfficeSitesResponse({}));
    }

  }

  /**
   * Queries office network properties, including office network ID, name, status, and creation time.
   * 
   * @param request - DescribeOfficeSitesRequest
   * @returns DescribeOfficeSitesResponse
   */
  async describeOfficeSites(request: DescribeOfficeSitesRequest): Promise<DescribeOfficeSitesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeOfficeSitesWithOptions(request, runtime);
  }

  /**
   * Queries the information about one or more policies.
   * 
   * @param request - DescribePolicyGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePolicyGroupsResponse
   */
  async describePolicyGroupsWithOptions(request: DescribePolicyGroupsRequest, runtime: $dara.RuntimeOptions): Promise<DescribePolicyGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.externalPolicyGroupIds)) {
      query["ExternalPolicyGroupIds"] = request.externalPolicyGroupIds;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.scope)) {
      query["Scope"] = request.scope;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePolicyGroups",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribePolicyGroupsResponse>(await this.callApi(params, req, runtime), new DescribePolicyGroupsResponse({}));
    } else {
      return $dara.cast<DescribePolicyGroupsResponse>(await this.execute(params, req, runtime), new DescribePolicyGroupsResponse({}));
    }

  }

  /**
   * Queries the information about one or more policies.
   * 
   * @param request - DescribePolicyGroupsRequest
   * @returns DescribePolicyGroupsResponse
   */
  async describePolicyGroups(request: DescribePolicyGroupsRequest): Promise<DescribePolicyGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePolicyGroupsWithOptions(request, runtime);
  }

  /**
   * Queries the price information of desktop resources in Elastic Desktop Service (EDS).
   * 
   * @remarks
   * ## Usage notes
   * The request parameters vary based on the type of desktop resources whose price you want to query. Take note of the following items:
   * *   If you set ResourceType to OfficeSite, you must specify InstanceType.
   * *   If you set ResourceType to Bandwidth, the pay-by-data-transfer metering method is used for network billing.
   * *   If you set ResourceType to Desktop, you must specify InstanceType, RootDiskSizeGib, and UserDiskSizeGib. You can specify OsType, PeriodUnit, Period, and Amount based on your business requirements.
   * > Before you call this operation to query the prices of cloud desktops by setting ResourceType to Desktop, you must know the desktop types and disk sizes that EDS provides. The disk sizes vary based on the desktop types. For more information, see [Cloud desktop types](https://help.aliyun.com/document_detail/188609.html).
   * 
   * @param request - DescribePriceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePriceResponse
   */
  async describePriceWithOptions(request: DescribePriceRequest, runtime: $dara.RuntimeOptions): Promise<DescribePriceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.amount)) {
      query["Amount"] = request.amount;
    }

    if (!$dara.isNull(request.bandwidth)) {
      query["Bandwidth"] = request.bandwidth;
    }

    if (!$dara.isNull(request.duration)) {
      query["Duration"] = request.duration;
    }

    if (!$dara.isNull(request.groupDesktopCount)) {
      query["GroupDesktopCount"] = request.groupDesktopCount;
    }

    if (!$dara.isNull(request.instanceType)) {
      query["InstanceType"] = request.instanceType;
    }

    if (!$dara.isNull(request.internetChargeType)) {
      query["InternetChargeType"] = request.internetChargeType;
    }

    if (!$dara.isNull(request.osType)) {
      query["OsType"] = request.osType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.promotionId)) {
      query["PromotionId"] = request.promotionId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.rootDiskCategory)) {
      query["RootDiskCategory"] = request.rootDiskCategory;
    }

    if (!$dara.isNull(request.rootDiskSizeGib)) {
      query["RootDiskSizeGib"] = request.rootDiskSizeGib;
    }

    if (!$dara.isNull(request.userDiskCategory)) {
      query["UserDiskCategory"] = request.userDiskCategory;
    }

    if (!$dara.isNull(request.userDiskSizeGib)) {
      query["UserDiskSizeGib"] = request.userDiskSizeGib;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePrice",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribePriceResponse>(await this.callApi(params, req, runtime), new DescribePriceResponse({}));
    } else {
      return $dara.cast<DescribePriceResponse>(await this.execute(params, req, runtime), new DescribePriceResponse({}));
    }

  }

  /**
   * Queries the price information of desktop resources in Elastic Desktop Service (EDS).
   * 
   * @remarks
   * ## Usage notes
   * The request parameters vary based on the type of desktop resources whose price you want to query. Take note of the following items:
   * *   If you set ResourceType to OfficeSite, you must specify InstanceType.
   * *   If you set ResourceType to Bandwidth, the pay-by-data-transfer metering method is used for network billing.
   * *   If you set ResourceType to Desktop, you must specify InstanceType, RootDiskSizeGib, and UserDiskSizeGib. You can specify OsType, PeriodUnit, Period, and Amount based on your business requirements.
   * > Before you call this operation to query the prices of cloud desktops by setting ResourceType to Desktop, you must know the desktop types and disk sizes that EDS provides. The disk sizes vary based on the desktop types. For more information, see [Cloud desktop types](https://help.aliyun.com/document_detail/188609.html).
   * 
   * @param request - DescribePriceRequest
   * @returns DescribePriceResponse
   */
  async describePrice(request: DescribePriceRequest): Promise<DescribePriceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePriceWithOptions(request, runtime);
  }

  /**
   * 查询价格用于创建超卖组
   * 
   * @param request - DescribePriceForCreateDesktopOversoldGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePriceForCreateDesktopOversoldGroupResponse
   */
  async describePriceForCreateDesktopOversoldGroupWithOptions(request: DescribePriceForCreateDesktopOversoldGroupRequest, runtime: $dara.RuntimeOptions): Promise<DescribePriceForCreateDesktopOversoldGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.concurrenceCount)) {
      query["ConcurrenceCount"] = request.concurrenceCount;
    }

    if (!$dara.isNull(request.dataDiskSize)) {
      query["DataDiskSize"] = request.dataDiskSize;
    }

    if (!$dara.isNull(request.desktopType)) {
      query["DesktopType"] = request.desktopType;
    }

    if (!$dara.isNull(request.oversoldUserCount)) {
      query["OversoldUserCount"] = request.oversoldUserCount;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.systemDiskSize)) {
      query["SystemDiskSize"] = request.systemDiskSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePriceForCreateDesktopOversoldGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribePriceForCreateDesktopOversoldGroupResponse>(await this.callApi(params, req, runtime), new DescribePriceForCreateDesktopOversoldGroupResponse({}));
    } else {
      return $dara.cast<DescribePriceForCreateDesktopOversoldGroupResponse>(await this.execute(params, req, runtime), new DescribePriceForCreateDesktopOversoldGroupResponse({}));
    }

  }

  /**
   * 查询价格用于创建超卖组
   * 
   * @param request - DescribePriceForCreateDesktopOversoldGroupRequest
   * @returns DescribePriceForCreateDesktopOversoldGroupResponse
   */
  async describePriceForCreateDesktopOversoldGroup(request: DescribePriceForCreateDesktopOversoldGroupRequest): Promise<DescribePriceForCreateDesktopOversoldGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePriceForCreateDesktopOversoldGroupWithOptions(request, runtime);
  }

  /**
   * 查询价格用于变配超卖组
   * 
   * @param request - DescribePriceForModifyDesktopOversoldGroupSaleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePriceForModifyDesktopOversoldGroupSaleResponse
   */
  async describePriceForModifyDesktopOversoldGroupSaleWithOptions(request: DescribePriceForModifyDesktopOversoldGroupSaleRequest, runtime: $dara.RuntimeOptions): Promise<DescribePriceForModifyDesktopOversoldGroupSaleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.concurrenceCount)) {
      query["ConcurrenceCount"] = request.concurrenceCount;
    }

    if (!$dara.isNull(request.oversoldGroupId)) {
      query["OversoldGroupId"] = request.oversoldGroupId;
    }

    if (!$dara.isNull(request.oversoldUserCount)) {
      query["OversoldUserCount"] = request.oversoldUserCount;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePriceForModifyDesktopOversoldGroupSale",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribePriceForModifyDesktopOversoldGroupSaleResponse>(await this.callApi(params, req, runtime), new DescribePriceForModifyDesktopOversoldGroupSaleResponse({}));
    } else {
      return $dara.cast<DescribePriceForModifyDesktopOversoldGroupSaleResponse>(await this.execute(params, req, runtime), new DescribePriceForModifyDesktopOversoldGroupSaleResponse({}));
    }

  }

  /**
   * 查询价格用于变配超卖组
   * 
   * @param request - DescribePriceForModifyDesktopOversoldGroupSaleRequest
   * @returns DescribePriceForModifyDesktopOversoldGroupSaleResponse
   */
  async describePriceForModifyDesktopOversoldGroupSale(request: DescribePriceForModifyDesktopOversoldGroupSaleRequest): Promise<DescribePriceForModifyDesktopOversoldGroupSaleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePriceForModifyDesktopOversoldGroupSaleWithOptions(request, runtime);
  }

  /**
   * 查询价格用于续费超卖组
   * 
   * @param request - DescribePriceForRenewDesktopOversoldGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePriceForRenewDesktopOversoldGroupResponse
   */
  async describePriceForRenewDesktopOversoldGroupWithOptions(request: DescribePriceForRenewDesktopOversoldGroupRequest, runtime: $dara.RuntimeOptions): Promise<DescribePriceForRenewDesktopOversoldGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.oversoldGroupId)) {
      query["OversoldGroupId"] = request.oversoldGroupId;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePriceForRenewDesktopOversoldGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribePriceForRenewDesktopOversoldGroupResponse>(await this.callApi(params, req, runtime), new DescribePriceForRenewDesktopOversoldGroupResponse({}));
    } else {
      return $dara.cast<DescribePriceForRenewDesktopOversoldGroupResponse>(await this.execute(params, req, runtime), new DescribePriceForRenewDesktopOversoldGroupResponse({}));
    }

  }

  /**
   * 查询价格用于续费超卖组
   * 
   * @param request - DescribePriceForRenewDesktopOversoldGroupRequest
   * @returns DescribePriceForRenewDesktopOversoldGroupResponse
   */
  async describePriceForRenewDesktopOversoldGroup(request: DescribePriceForRenewDesktopOversoldGroupRequest): Promise<DescribePriceForRenewDesktopOversoldGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePriceForRenewDesktopOversoldGroupWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeRecordingsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRecordingsResponse
   */
  async describeRecordingsWithOptions(request: DescribeRecordingsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeRecordingsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.needSignedUrl)) {
      query["NeedSignedUrl"] = request.needSignedUrl;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.signedUrlExpireMinutes)) {
      query["SignedUrlExpireMinutes"] = request.signedUrlExpireMinutes;
    }

    if (!$dara.isNull(request.standardEndTime)) {
      query["StandardEndTime"] = request.standardEndTime;
    }

    if (!$dara.isNull(request.standardStartTime)) {
      query["StandardStartTime"] = request.standardStartTime;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRecordings",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeRecordingsResponse>(await this.callApi(params, req, runtime), new DescribeRecordingsResponse({}));
    } else {
      return $dara.cast<DescribeRecordingsResponse>(await this.execute(params, req, runtime), new DescribeRecordingsResponse({}));
    }

  }

  /**
   * @param request - DescribeRecordingsRequest
   * @returns DescribeRecordingsResponse
   */
  async describeRecordings(request: DescribeRecordingsRequest): Promise<DescribeRecordingsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRecordingsWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeRefundPriceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRefundPriceResponse
   */
  async describeRefundPriceWithOptions(request: DescribeRefundPriceRequest, runtime: $dara.RuntimeOptions): Promise<DescribeRefundPriceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.refundType)) {
      query["RefundType"] = request.refundType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRefundPrice",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeRefundPriceResponse>(await this.callApi(params, req, runtime), new DescribeRefundPriceResponse({}));
    } else {
      return $dara.cast<DescribeRefundPriceResponse>(await this.execute(params, req, runtime), new DescribeRefundPriceResponse({}));
    }

  }

  /**
   * @param request - DescribeRefundPriceRequest
   * @returns DescribeRefundPriceResponse
   */
  async describeRefundPrice(request: DescribeRefundPriceRequest): Promise<DescribeRefundPriceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRefundPriceWithOptions(request, runtime);
  }

  /**
   * Queries the Alibaba Cloud regions that are available for Elastic Desktop Service (EDS).
   * 
   * @param request - DescribeRegionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRegionsResponse
   */
  async describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeRegionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.acceptLanguage)) {
      query["AcceptLanguage"] = request.acceptLanguage;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRegions",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeRegionsResponse>(await this.callApi(params, req, runtime), new DescribeRegionsResponse({}));
    } else {
      return $dara.cast<DescribeRegionsResponse>(await this.execute(params, req, runtime), new DescribeRegionsResponse({}));
    }

  }

  /**
   * Queries the Alibaba Cloud regions that are available for Elastic Desktop Service (EDS).
   * 
   * @param request - DescribeRegionsRequest
   * @returns DescribeRegionsResponse
   */
  async describeRegions(request: DescribeRegionsRequest): Promise<DescribeRegionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRegionsWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeRenewalPriceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRenewalPriceResponse
   */
  async describeRenewalPriceWithOptions(request: DescribeRenewalPriceRequest, runtime: $dara.RuntimeOptions): Promise<DescribeRenewalPriceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRenewalPrice",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeRenewalPriceResponse>(await this.callApi(params, req, runtime), new DescribeRenewalPriceResponse({}));
    } else {
      return $dara.cast<DescribeRenewalPriceResponse>(await this.execute(params, req, runtime), new DescribeRenewalPriceResponse({}));
    }

  }

  /**
   * @param request - DescribeRenewalPriceRequest
   * @returns DescribeRenewalPriceResponse
   */
  async describeRenewalPrice(request: DescribeRenewalPriceRequest): Promise<DescribeRenewalPriceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRenewalPriceWithOptions(request, runtime);
  }

  /**
   * Queries the session statistics of a region.
   * 
   * @remarks
   *   This is a central operation and can be called only by using services in the China (Shanghai) region.
   * *   You can query session statistics for the past hour.
   * 
   * @param request - DescribeSessionStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSessionStatisticResponse
   */
  async describeSessionStatisticWithOptions(request: DescribeSessionStatisticRequest, runtime: $dara.RuntimeOptions): Promise<DescribeSessionStatisticResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.searchRegionId)) {
      query["SearchRegionId"] = request.searchRegionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSessionStatistic",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeSessionStatisticResponse>(await this.callApi(params, req, runtime), new DescribeSessionStatisticResponse({}));
    } else {
      return $dara.cast<DescribeSessionStatisticResponse>(await this.execute(params, req, runtime), new DescribeSessionStatisticResponse({}));
    }

  }

  /**
   * Queries the session statistics of a region.
   * 
   * @remarks
   *   This is a central operation and can be called only by using services in the China (Shanghai) region.
   * *   You can query session statistics for the past hour.
   * 
   * @param request - DescribeSessionStatisticRequest
   * @returns DescribeSessionStatisticResponse
   */
  async describeSessionStatistic(request: DescribeSessionStatisticRequest): Promise<DescribeSessionStatisticResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSessionStatisticWithOptions(request, runtime);
  }

  /**
   * Queries the snapshots that are created based on a cloud computer and the details of the snapshots.
   * 
   * @param request - DescribeSnapshotsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSnapshotsResponse
   */
  async describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeSnapshotsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.creator)) {
      query["Creator"] = request.creator;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.desktopName)) {
      query["DesktopName"] = request.desktopName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.snapshotId)) {
      query["SnapshotId"] = request.snapshotId;
    }

    if (!$dara.isNull(request.snapshotName)) {
      query["SnapshotName"] = request.snapshotName;
    }

    if (!$dara.isNull(request.snapshotType)) {
      query["SnapshotType"] = request.snapshotType;
    }

    if (!$dara.isNull(request.sourceDiskType)) {
      query["SourceDiskType"] = request.sourceDiskType;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSnapshots",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeSnapshotsResponse>(await this.callApi(params, req, runtime), new DescribeSnapshotsResponse({}));
    } else {
      return $dara.cast<DescribeSnapshotsResponse>(await this.execute(params, req, runtime), new DescribeSnapshotsResponse({}));
    }

  }

  /**
   * Queries the snapshots that are created based on a cloud computer and the details of the snapshots.
   * 
   * @param request - DescribeSnapshotsRequest
   * @returns DescribeSnapshotsResponse
   */
  async describeSnapshots(request: DescribeSnapshotsRequest): Promise<DescribeSnapshotsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSnapshotsWithOptions(request, runtime);
  }

  /**
   * 查询定时任务配置
   * 
   * @param request - DescribeTimerGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTimerGroupResponse
   */
  async describeTimerGroupWithOptions(request: DescribeTimerGroupRequest, runtime: $dara.RuntimeOptions): Promise<DescribeTimerGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeTimerGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeTimerGroupResponse>(await this.callApi(params, req, runtime), new DescribeTimerGroupResponse({}));
    } else {
      return $dara.cast<DescribeTimerGroupResponse>(await this.execute(params, req, runtime), new DescribeTimerGroupResponse({}));
    }

  }

  /**
   * 查询定时任务配置
   * 
   * @param request - DescribeTimerGroupRequest
   * @returns DescribeTimerGroupResponse
   */
  async describeTimerGroup(request: DescribeTimerGroupRequest): Promise<DescribeTimerGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeTimerGroupWithOptions(request, runtime);
  }

  /**
   * 查询超卖组中用户连接数据
   * 
   * @param request - DescribeUserConnectTimeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUserConnectTimeResponse
   */
  async describeUserConnectTimeWithOptions(request: DescribeUserConnectTimeRequest, runtime: $dara.RuntimeOptions): Promise<DescribeUserConnectTimeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.oversoldGroupId)) {
      query["OversoldGroupId"] = request.oversoldGroupId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.userDesktopId)) {
      query["UserDesktopId"] = request.userDesktopId;
    }

    if (!$dara.isNull(request.userGroupId)) {
      query["UserGroupId"] = request.userGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUserConnectTime",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeUserConnectTimeResponse>(await this.callApi(params, req, runtime), new DescribeUserConnectTimeResponse({}));
    } else {
      return $dara.cast<DescribeUserConnectTimeResponse>(await this.execute(params, req, runtime), new DescribeUserConnectTimeResponse({}));
    }

  }

  /**
   * 查询超卖组中用户连接数据
   * 
   * @param request - DescribeUserConnectTimeRequest
   * @returns DescribeUserConnectTimeResponse
   */
  async describeUserConnectTime(request: DescribeUserConnectTimeRequest): Promise<DescribeUserConnectTimeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUserConnectTimeWithOptions(request, runtime);
  }

  /**
   * Queries the connection records of an authorized user to cloud computers in a cloud computer pool.
   * 
   * @param request - DescribeUserConnectionRecordsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUserConnectionRecordsResponse
   */
  async describeUserConnectionRecordsWithOptions(request: DescribeUserConnectionRecordsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeUserConnectionRecordsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.connectDurationFrom)) {
      query["ConnectDurationFrom"] = request.connectDurationFrom;
    }

    if (!$dara.isNull(request.connectDurationTo)) {
      query["ConnectDurationTo"] = request.connectDurationTo;
    }

    if (!$dara.isNull(request.connectEndTimeFrom)) {
      query["ConnectEndTimeFrom"] = request.connectEndTimeFrom;
    }

    if (!$dara.isNull(request.connectEndTimeTo)) {
      query["ConnectEndTimeTo"] = request.connectEndTimeTo;
    }

    if (!$dara.isNull(request.connectStartTimeFrom)) {
      query["ConnectStartTimeFrom"] = request.connectStartTimeFrom;
    }

    if (!$dara.isNull(request.connectStartTimeTo)) {
      query["ConnectStartTimeTo"] = request.connectStartTimeTo;
    }

    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.endUserType)) {
      query["EndUserType"] = request.endUserType;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUserConnectionRecords",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeUserConnectionRecordsResponse>(await this.callApi(params, req, runtime), new DescribeUserConnectionRecordsResponse({}));
    } else {
      return $dara.cast<DescribeUserConnectionRecordsResponse>(await this.execute(params, req, runtime), new DescribeUserConnectionRecordsResponse({}));
    }

  }

  /**
   * Queries the connection records of an authorized user to cloud computers in a cloud computer pool.
   * 
   * @param request - DescribeUserConnectionRecordsRequest
   * @returns DescribeUserConnectionRecordsResponse
   */
  async describeUserConnectionRecords(request: DescribeUserConnectionRecordsRequest): Promise<DescribeUserConnectionRecordsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUserConnectionRecordsWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of the user profile management (UPM) directory blacklist and whitelist.
   * 
   * @param request - DescribeUserProfilePathRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUserProfilePathRulesResponse
   */
  async describeUserProfilePathRulesWithOptions(request: DescribeUserProfilePathRulesRequest, runtime: $dara.RuntimeOptions): Promise<DescribeUserProfilePathRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUserProfilePathRules",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeUserProfilePathRulesResponse>(await this.callApi(params, req, runtime), new DescribeUserProfilePathRulesResponse({}));
    } else {
      return $dara.cast<DescribeUserProfilePathRulesResponse>(await this.execute(params, req, runtime), new DescribeUserProfilePathRulesResponse({}));
    }

  }

  /**
   * Queries the configurations of the user profile management (UPM) directory blacklist and whitelist.
   * 
   * @param request - DescribeUserProfilePathRulesRequest
   * @returns DescribeUserProfilePathRulesResponse
   */
  async describeUserProfilePathRules(request: DescribeUserProfilePathRulesRequest): Promise<DescribeUserProfilePathRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUserProfilePathRulesWithOptions(request, runtime);
  }

  /**
   * Queries the information about authorized users in a cloud computer pool, including the usernames, email addresses, mobile numbers, and cloud computer IDs.
   * 
   * @param request - DescribeUsersInGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUsersInGroupResponse
   */
  async describeUsersInGroupWithOptions(request: DescribeUsersInGroupRequest, runtime: $dara.RuntimeOptions): Promise<DescribeUsersInGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.connectState)) {
      query["ConnectState"] = request.connectState;
    }

    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.endUserIds)) {
      query["EndUserIds"] = request.endUserIds;
    }

    if (!$dara.isNull(request.filter)) {
      query["Filter"] = request.filter;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.orgId)) {
      query["OrgId"] = request.orgId;
    }

    if (!$dara.isNull(request.queryUserDetail)) {
      query["QueryUserDetail"] = request.queryUserDetail;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUsersInGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeUsersInGroupResponse>(await this.callApi(params, req, runtime), new DescribeUsersInGroupResponse({}));
    } else {
      return $dara.cast<DescribeUsersInGroupResponse>(await this.execute(params, req, runtime), new DescribeUsersInGroupResponse({}));
    }

  }

  /**
   * Queries the information about authorized users in a cloud computer pool, including the usernames, email addresses, mobile numbers, and cloud computer IDs.
   * 
   * @param request - DescribeUsersInGroupRequest
   * @returns DescribeUsersInGroupResponse
   */
  async describeUsersInGroup(request: DescribeUsersInGroupRequest): Promise<DescribeUsersInGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUsersInGroupWithOptions(request, runtime);
  }

  /**
   * Queries the passwords of authorized users of a cloud computer.
   * 
   * @param request - DescribeUsersPasswordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUsersPasswordResponse
   */
  async describeUsersPasswordWithOptions(request: DescribeUsersPasswordRequest, runtime: $dara.RuntimeOptions): Promise<DescribeUsersPasswordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUsersPassword",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeUsersPasswordResponse>(await this.callApi(params, req, runtime), new DescribeUsersPasswordResponse({}));
    } else {
      return $dara.cast<DescribeUsersPasswordResponse>(await this.execute(params, req, runtime), new DescribeUsersPasswordResponse({}));
    }

  }

  /**
   * Queries the passwords of authorized users of a cloud computer.
   * 
   * @param request - DescribeUsersPasswordRequest
   * @returns DescribeUsersPasswordResponse
   */
  async describeUsersPassword(request: DescribeUsersPasswordRequest): Promise<DescribeUsersPasswordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUsersPasswordWithOptions(request, runtime);
  }

  /**
   * Queries multi-factor authentication (MFA) devices that are bound to an Active Directory (AD) account.
   * 
   * @param request - DescribeVirtualMFADevicesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVirtualMFADevicesResponse
   */
  async describeVirtualMFADevicesWithOptions(request: DescribeVirtualMFADevicesRequest, runtime: $dara.RuntimeOptions): Promise<DescribeVirtualMFADevicesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVirtualMFADevices",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeVirtualMFADevicesResponse>(await this.callApi(params, req, runtime), new DescribeVirtualMFADevicesResponse({}));
    } else {
      return $dara.cast<DescribeVirtualMFADevicesResponse>(await this.execute(params, req, runtime), new DescribeVirtualMFADevicesResponse({}));
    }

  }

  /**
   * Queries multi-factor authentication (MFA) devices that are bound to an Active Directory (AD) account.
   * 
   * @param request - DescribeVirtualMFADevicesRequest
   * @returns DescribeVirtualMFADevicesResponse
   */
  async describeVirtualMFADevices(request: DescribeVirtualMFADevicesRequest): Promise<DescribeVirtualMFADevicesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVirtualMFADevicesWithOptions(request, runtime);
  }

  /**
   * Queries the zones in a region in which Elastic Desktop Service is supported.
   * 
   * @param request - DescribeZonesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeZonesResponse
   */
  async describeZonesWithOptions(request: DescribeZonesRequest, runtime: $dara.RuntimeOptions): Promise<DescribeZonesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.zoneType)) {
      query["ZoneType"] = request.zoneType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeZones",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DescribeZonesResponse>(await this.callApi(params, req, runtime), new DescribeZonesResponse({}));
    } else {
      return $dara.cast<DescribeZonesResponse>(await this.execute(params, req, runtime), new DescribeZonesResponse({}));
    }

  }

  /**
   * Queries the zones in a region in which Elastic Desktop Service is supported.
   * 
   * @param request - DescribeZonesRequest
   * @returns DescribeZonesResponse
   */
  async describeZones(request: DescribeZonesRequest): Promise<DescribeZonesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeZonesWithOptions(request, runtime);
  }

  /**
   * Unbinds an advanced office network from a CEN instance.
   * 
   * @param request - DetachCenRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DetachCenResponse
   */
  async detachCenWithOptions(request: DetachCenRequest, runtime: $dara.RuntimeOptions): Promise<DetachCenResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DetachCen",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DetachCenResponse>(await this.callApi(params, req, runtime), new DetachCenResponse({}));
    } else {
      return $dara.cast<DetachCenResponse>(await this.execute(params, req, runtime), new DetachCenResponse({}));
    }

  }

  /**
   * Unbinds an advanced office network from a CEN instance.
   * 
   * @param request - DetachCenRequest
   * @returns DetachCenResponse
   */
  async detachCen(request: DetachCenRequest): Promise<DetachCenResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.detachCenWithOptions(request, runtime);
  }

  /**
   * Unbinds a hardware client from a user.
   * 
   * @param request - DetachEndUserRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DetachEndUserResponse
   */
  async detachEndUserWithOptions(request: DetachEndUserRequest, runtime: $dara.RuntimeOptions): Promise<DetachEndUserResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.adDomain)) {
      query["AdDomain"] = request.adDomain;
    }

    if (!$dara.isNull(request.clientType)) {
      query["ClientType"] = request.clientType;
    }

    if (!$dara.isNull(request.deviceId)) {
      query["DeviceId"] = request.deviceId;
    }

    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DetachEndUser",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DetachEndUserResponse>(await this.callApi(params, req, runtime), new DetachEndUserResponse({}));
    } else {
      return $dara.cast<DetachEndUserResponse>(await this.execute(params, req, runtime), new DetachEndUserResponse({}));
    }

  }

  /**
   * Unbinds a hardware client from a user.
   * 
   * @param request - DetachEndUserRequest
   * @returns DetachEndUserResponse
   */
  async detachEndUser(request: DetachEndUserRequest): Promise<DetachEndUserResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.detachEndUserWithOptions(request, runtime);
  }

  /**
   * Disables cloud desktops in a desktop group.
   * 
   * @param request - DisableDesktopsInGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DisableDesktopsInGroupResponse
   */
  async disableDesktopsInGroupWithOptions(request: DisableDesktopsInGroupRequest, runtime: $dara.RuntimeOptions): Promise<DisableDesktopsInGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.desktopIds)) {
      query["DesktopIds"] = request.desktopIds;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DisableDesktopsInGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DisableDesktopsInGroupResponse>(await this.callApi(params, req, runtime), new DisableDesktopsInGroupResponse({}));
    } else {
      return $dara.cast<DisableDesktopsInGroupResponse>(await this.execute(params, req, runtime), new DisableDesktopsInGroupResponse({}));
    }

  }

  /**
   * Disables cloud desktops in a desktop group.
   * 
   * @param request - DisableDesktopsInGroupRequest
   * @returns DisableDesktopsInGroupResponse
   */
  async disableDesktopsInGroup(request: DisableDesktopsInGroupRequest): Promise<DisableDesktopsInGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.disableDesktopsInGroupWithOptions(request, runtime);
  }

  /**
   * Disconnects from desktop sessions.
   * 
   * @param request - DisconnectDesktopSessionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DisconnectDesktopSessionsResponse
   */
  async disconnectDesktopSessionsWithOptions(request: DisconnectDesktopSessionsRequest, runtime: $dara.RuntimeOptions): Promise<DisconnectDesktopSessionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.preCheck)) {
      query["PreCheck"] = request.preCheck;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sessions)) {
      query["Sessions"] = request.sessions;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DisconnectDesktopSessions",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DisconnectDesktopSessionsResponse>(await this.callApi(params, req, runtime), new DisconnectDesktopSessionsResponse({}));
    } else {
      return $dara.cast<DisconnectDesktopSessionsResponse>(await this.execute(params, req, runtime), new DisconnectDesktopSessionsResponse({}));
    }

  }

  /**
   * Disconnects from desktop sessions.
   * 
   * @param request - DisconnectDesktopSessionsRequest
   * @returns DisconnectDesktopSessionsResponse
   */
  async disconnectDesktopSessions(request: DisconnectDesktopSessionsRequest): Promise<DisconnectDesktopSessionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.disconnectDesktopSessionsWithOptions(request, runtime);
  }

  /**
   * Unbinds a premium bandwidth plan from an office network.
   * 
   * @param request - DissociateNetworkPackageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DissociateNetworkPackageResponse
   */
  async dissociateNetworkPackageWithOptions(request: DissociateNetworkPackageRequest, runtime: $dara.RuntimeOptions): Promise<DissociateNetworkPackageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.networkPackageId)) {
      query["NetworkPackageId"] = request.networkPackageId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DissociateNetworkPackage",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DissociateNetworkPackageResponse>(await this.callApi(params, req, runtime), new DissociateNetworkPackageResponse({}));
    } else {
      return $dara.cast<DissociateNetworkPackageResponse>(await this.execute(params, req, runtime), new DissociateNetworkPackageResponse({}));
    }

  }

  /**
   * Unbinds a premium bandwidth plan from an office network.
   * 
   * @param request - DissociateNetworkPackageRequest
   * @returns DissociateNetworkPackageResponse
   */
  async dissociateNetworkPackage(request: DissociateNetworkPackageRequest): Promise<DissociateNetworkPackageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.dissociateNetworkPackageWithOptions(request, runtime);
  }

  /**
   * CDS文件下载
   * 
   * @param request - DownloadCdsFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DownloadCdsFileResponse
   */
  async downloadCdsFileWithOptions(request: DownloadCdsFileRequest, runtime: $dara.RuntimeOptions): Promise<DownloadCdsFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.fileId)) {
      query["FileId"] = request.fileId;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DownloadCdsFile",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<DownloadCdsFileResponse>(await this.callApi(params, req, runtime), new DownloadCdsFileResponse({}));
    } else {
      return $dara.cast<DownloadCdsFileResponse>(await this.execute(params, req, runtime), new DownloadCdsFileResponse({}));
    }

  }

  /**
   * CDS文件下载
   * 
   * @param request - DownloadCdsFileRequest
   * @returns DownloadCdsFileResponse
   */
  async downloadCdsFile(request: DownloadCdsFileRequest): Promise<DownloadCdsFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.downloadCdsFileWithOptions(request, runtime);
  }

  /**
   * Exports events that occur on a cloud desktop from an Alibaba Cloud Workspace client.
   * 
   * @param request - ExportClientEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExportClientEventsResponse
   */
  async exportClientEventsWithOptions(request: ExportClientEventsRequest, runtime: $dara.RuntimeOptions): Promise<ExportClientEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.desktopName)) {
      query["DesktopName"] = request.desktopName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.eventType)) {
      query["EventType"] = request.eventType;
    }

    if (!$dara.isNull(request.eventTypes)) {
      query["EventTypes"] = request.eventTypes;
    }

    if (!$dara.isNull(request.langType)) {
      query["LangType"] = request.langType;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.officeSiteName)) {
      query["OfficeSiteName"] = request.officeSiteName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExportClientEvents",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ExportClientEventsResponse>(await this.callApi(params, req, runtime), new ExportClientEventsResponse({}));
    } else {
      return $dara.cast<ExportClientEventsResponse>(await this.execute(params, req, runtime), new ExportClientEventsResponse({}));
    }

  }

  /**
   * Exports events that occur on a cloud desktop from an Alibaba Cloud Workspace client.
   * 
   * @param request - ExportClientEventsRequest
   * @returns ExportClientEventsResponse
   */
  async exportClientEvents(request: ExportClientEventsRequest): Promise<ExportClientEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.exportClientEventsWithOptions(request, runtime);
  }

  /**
   * Exports cloud computer pools. The list of cloud computer pools is saved as an XLSX file. Each entry of cloud computer pool data includes the ID and name of the cloud computer pool, the ID and name of the office network, the cloud computer pool template, and the name of the security policy.
   * 
   * @param request - ExportDesktopGroupInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExportDesktopGroupInfoResponse
   */
  async exportDesktopGroupInfoWithOptions(request: ExportDesktopGroupInfoRequest, runtime: $dara.RuntimeOptions): Promise<ExportDesktopGroupInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.chargeType)) {
      query["ChargeType"] = request.chargeType;
    }

    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.desktopGroupName)) {
      query["DesktopGroupName"] = request.desktopGroupName;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.expiredTime)) {
      query["ExpiredTime"] = request.expiredTime;
    }

    if (!$dara.isNull(request.langType)) {
      query["LangType"] = request.langType;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExportDesktopGroupInfo",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ExportDesktopGroupInfoResponse>(await this.callApi(params, req, runtime), new ExportDesktopGroupInfoResponse({}));
    } else {
      return $dara.cast<ExportDesktopGroupInfoResponse>(await this.execute(params, req, runtime), new ExportDesktopGroupInfoResponse({}));
    }

  }

  /**
   * Exports cloud computer pools. The list of cloud computer pools is saved as an XLSX file. Each entry of cloud computer pool data includes the ID and name of the cloud computer pool, the ID and name of the office network, the cloud computer pool template, and the name of the security policy.
   * 
   * @param request - ExportDesktopGroupInfoRequest
   * @returns ExportDesktopGroupInfoResponse
   */
  async exportDesktopGroupInfo(request: ExportDesktopGroupInfoRequest): Promise<ExportDesktopGroupInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.exportDesktopGroupInfoWithOptions(request, runtime);
  }

  /**
   * Exports a cloud computer list as a CSV file.
   * 
   * @remarks
   * The cloud computer list exported by calling this operation is saved as a CSV file. Each entry of data of a cloud computer includes the following fields:
   * *   Cloud computer ID and name
   * *   Office network ID and name
   * *   The instance type, OS and protocol of the cloud computer
   * *   System disk and data disk of the cloud computer
   * *   The status
   * *   Purchase method
   * *   The time when the cloud computer expires
   * *   Remaining duration and total duration
   * *   Number of assigned users and number of current users
   * *   Office network type
   * *   The time when the cloud computer was created
   * *   Tags
   * *   Encryption status
   * *   IP
   * *   The hostname
   * 
   * @param request - ExportDesktopListInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExportDesktopListInfoResponse
   */
  async exportDesktopListInfoWithOptions(request: ExportDesktopListInfoRequest, runtime: $dara.RuntimeOptions): Promise<ExportDesktopListInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.chargeType)) {
      query["ChargeType"] = request.chargeType;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.desktopName)) {
      query["DesktopName"] = request.desktopName;
    }

    if (!$dara.isNull(request.desktopStatus)) {
      query["DesktopStatus"] = request.desktopStatus;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.expiredTime)) {
      query["ExpiredTime"] = request.expiredTime;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.langType)) {
      query["LangType"] = request.langType;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.userName)) {
      query["UserName"] = request.userName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExportDesktopListInfo",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ExportDesktopListInfoResponse>(await this.callApi(params, req, runtime), new ExportDesktopListInfoResponse({}));
    } else {
      return $dara.cast<ExportDesktopListInfoResponse>(await this.execute(params, req, runtime), new ExportDesktopListInfoResponse({}));
    }

  }

  /**
   * Exports a cloud computer list as a CSV file.
   * 
   * @remarks
   * The cloud computer list exported by calling this operation is saved as a CSV file. Each entry of data of a cloud computer includes the following fields:
   * *   Cloud computer ID and name
   * *   Office network ID and name
   * *   The instance type, OS and protocol of the cloud computer
   * *   System disk and data disk of the cloud computer
   * *   The status
   * *   Purchase method
   * *   The time when the cloud computer expires
   * *   Remaining duration and total duration
   * *   Number of assigned users and number of current users
   * *   Office network type
   * *   The time when the cloud computer was created
   * *   Tags
   * *   Encryption status
   * *   IP
   * *   The hostname
   * 
   * @param request - ExportDesktopListInfoRequest
   * @returns ExportDesktopListInfoResponse
   */
  async exportDesktopListInfo(request: ExportDesktopListInfoRequest): Promise<ExportDesktopListInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.exportDesktopListInfoWithOptions(request, runtime);
  }

  /**
   * Obtains the information about an asynchronous task based on the value of the AsyncTaskId parameter that you obtain by calling the CopyCdsFile operation.
   * 
   * @param request - GetAsyncTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAsyncTaskResponse
   */
  async getAsyncTaskWithOptions(request: GetAsyncTaskRequest, runtime: $dara.RuntimeOptions): Promise<GetAsyncTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.asyncTaskId)) {
      query["AsyncTaskId"] = request.asyncTaskId;
    }

    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAsyncTask",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetAsyncTaskResponse>(await this.callApi(params, req, runtime), new GetAsyncTaskResponse({}));
    } else {
      return $dara.cast<GetAsyncTaskResponse>(await this.execute(params, req, runtime), new GetAsyncTaskResponse({}));
    }

  }

  /**
   * Obtains the information about an asynchronous task based on the value of the AsyncTaskId parameter that you obtain by calling the CopyCdsFile operation.
   * 
   * @param request - GetAsyncTaskRequest
   * @returns GetAsyncTaskResponse
   */
  async getAsyncTask(request: GetAsyncTaskRequest): Promise<GetAsyncTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAsyncTaskWithOptions(request, runtime);
  }

  /**
   * Obtains the credential that is used to connect to a cloud desktop.
   * 
   * @remarks
   * The cloud computer must be in the Running state.
   * 
   * @param request - GetConnectionTicketRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetConnectionTicketResponse
   */
  async getConnectionTicketWithOptions(request: GetConnectionTicketRequest, runtime: $dara.RuntimeOptions): Promise<GetConnectionTicketResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.commandContent)) {
      query["CommandContent"] = request.commandContent;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.password)) {
      query["Password"] = request.password;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetConnectionTicket",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetConnectionTicketResponse>(await this.callApi(params, req, runtime), new GetConnectionTicketResponse({}));
    } else {
      return $dara.cast<GetConnectionTicketResponse>(await this.execute(params, req, runtime), new GetConnectionTicketResponse({}));
    }

  }

  /**
   * Obtains the credential that is used to connect to a cloud desktop.
   * 
   * @remarks
   * The cloud computer must be in the Running state.
   * 
   * @param request - GetConnectionTicketRequest
   * @returns GetConnectionTicketResponse
   */
  async getConnectionTicket(request: GetConnectionTicketRequest): Promise<GetConnectionTicketResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getConnectionTicketWithOptions(request, runtime);
  }

  /**
   * Obtains the credentials of the stream collaboration
   * 
   * @param request - GetCoordinateTicketRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCoordinateTicketResponse
   */
  async getCoordinateTicketWithOptions(request: GetCoordinateTicketRequest, runtime: $dara.RuntimeOptions): Promise<GetCoordinateTicketResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.coId)) {
      query["CoId"] = request.coId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.userType)) {
      query["UserType"] = request.userType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCoordinateTicket",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetCoordinateTicketResponse>(await this.callApi(params, req, runtime), new GetCoordinateTicketResponse({}));
    } else {
      return $dara.cast<GetCoordinateTicketResponse>(await this.execute(params, req, runtime), new GetCoordinateTicketResponse({}));
    }

  }

  /**
   * Obtains the credentials of the stream collaboration
   * 
   * @param request - GetCoordinateTicketRequest
   * @returns GetCoordinateTicketResponse
   */
  async getCoordinateTicket(request: GetCoordinateTicketRequest): Promise<GetCoordinateTicketResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCoordinateTicketWithOptions(request, runtime);
  }

  /**
   * Queries the information about a cloud computer pool.
   * 
   * @param request - GetDesktopGroupDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDesktopGroupDetailResponse
   */
  async getDesktopGroupDetailWithOptions(request: GetDesktopGroupDetailRequest, runtime: $dara.RuntimeOptions): Promise<GetDesktopGroupDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDesktopGroupDetail",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetDesktopGroupDetailResponse>(await this.callApi(params, req, runtime), new GetDesktopGroupDetailResponse({}));
    } else {
      return $dara.cast<GetDesktopGroupDetailResponse>(await this.execute(params, req, runtime), new GetDesktopGroupDetailResponse({}));
    }

  }

  /**
   * Queries the information about a cloud computer pool.
   * 
   * @param request - GetDesktopGroupDetailRequest
   * @returns GetDesktopGroupDetailResponse
   */
  async getDesktopGroupDetail(request: GetDesktopGroupDetailRequest): Promise<GetDesktopGroupDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDesktopGroupDetailWithOptions(request, runtime);
  }

  /**
   * Queries whether single sign-on (SSO) is enabled for a workspace.
   * 
   * @param request - GetOfficeSiteSsoStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOfficeSiteSsoStatusResponse
   */
  async getOfficeSiteSsoStatusWithOptions(request: GetOfficeSiteSsoStatusRequest, runtime: $dara.RuntimeOptions): Promise<GetOfficeSiteSsoStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOfficeSiteSsoStatus",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetOfficeSiteSsoStatusResponse>(await this.callApi(params, req, runtime), new GetOfficeSiteSsoStatusResponse({}));
    } else {
      return $dara.cast<GetOfficeSiteSsoStatusResponse>(await this.execute(params, req, runtime), new GetOfficeSiteSsoStatusResponse({}));
    }

  }

  /**
   * Queries whether single sign-on (SSO) is enabled for a workspace.
   * 
   * @param request - GetOfficeSiteSsoStatusRequest
   * @returns GetOfficeSiteSsoStatusResponse
   */
  async getOfficeSiteSsoStatus(request: GetOfficeSiteSsoStatusRequest): Promise<GetOfficeSiteSsoStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOfficeSiteSsoStatusWithOptions(request, runtime);
  }

  /**
   * Obtains the metadata of a Security Assertion Markup Language (SAML) 2.0-based service provider (SP).
   * 
   * @remarks
   * You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
   * 
   * @param request - GetSpMetadataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSpMetadataResponse
   */
  async getSpMetadataWithOptions(request: GetSpMetadataRequest, runtime: $dara.RuntimeOptions): Promise<GetSpMetadataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetSpMetadata",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<GetSpMetadataResponse>(await this.callApi(params, req, runtime), new GetSpMetadataResponse({}));
    } else {
      return $dara.cast<GetSpMetadataResponse>(await this.execute(params, req, runtime), new GetSpMetadataResponse({}));
    }

  }

  /**
   * Obtains the metadata of a Security Assertion Markup Language (SAML) 2.0-based service provider (SP).
   * 
   * @remarks
   * You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
   * 
   * @param request - GetSpMetadataRequest
   * @returns GetSpMetadataResponse
   */
  async getSpMetadata(request: GetSpMetadataRequest): Promise<GetSpMetadataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getSpMetadataWithOptions(request, runtime);
  }

  /**
   * Hibernates cloud desktops.
   * 
   * @remarks
   * Hibernating a cloud desktop is in private preview. If you want to try this feature, submit a ticket.
   * 
   * @param request - HibernateDesktopsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HibernateDesktopsResponse
   */
  async hibernateDesktopsWithOptions(request: HibernateDesktopsRequest, runtime: $dara.RuntimeOptions): Promise<HibernateDesktopsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "HibernateDesktops",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<HibernateDesktopsResponse>(await this.callApi(params, req, runtime), new HibernateDesktopsResponse({}));
    } else {
      return $dara.cast<HibernateDesktopsResponse>(await this.execute(params, req, runtime), new HibernateDesktopsResponse({}));
    }

  }

  /**
   * Hibernates cloud desktops.
   * 
   * @remarks
   * Hibernating a cloud desktop is in private preview. If you want to try this feature, submit a ticket.
   * 
   * @param request - HibernateDesktopsRequest
   * @returns HibernateDesktopsResponse
   */
  async hibernateDesktops(request: HibernateDesktopsRequest): Promise<HibernateDesktopsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.hibernateDesktopsWithOptions(request, runtime);
  }

  /**
   * Queries the files in a cloud disk.
   * 
   * @param tmpReq - ListCdsFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCdsFilesResponse
   */
  async listCdsFilesWithOptions(tmpReq: ListCdsFilesRequest, runtime: $dara.RuntimeOptions): Promise<ListCdsFilesResponse> {
    tmpReq.validate();
    let request = new ListCdsFilesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.fileIds)) {
      request.fileIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fileIds, "FileIds", "json");
    }

    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.fileIdsShrink)) {
      query["FileIds"] = request.fileIdsShrink;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.orderType)) {
      query["OrderType"] = request.orderType;
    }

    if (!$dara.isNull(request.parentFileId)) {
      query["ParentFileId"] = request.parentFileId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCdsFiles",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListCdsFilesResponse>(await this.callApi(params, req, runtime), new ListCdsFilesResponse({}));
    } else {
      return $dara.cast<ListCdsFilesResponse>(await this.execute(params, req, runtime), new ListCdsFilesResponse({}));
    }

  }

  /**
   * Queries the files in a cloud disk.
   * 
   * @param request - ListCdsFilesRequest
   * @returns ListCdsFilesResponse
   */
  async listCdsFiles(request: ListCdsFilesRequest): Promise<ListCdsFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCdsFilesWithOptions(request, runtime);
  }

  /**
   * Obtains the user information in the AD system if you use an AD directory to connect to an AD system.
   * 
   * @remarks
   * If you use an AD directory to connect to an AD system, you can call this operation to obtain the user information in the AD system.
   * 
   * @param request - ListDirectoryUsersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDirectoryUsersResponse
   */
  async listDirectoryUsersWithOptions(request: ListDirectoryUsersRequest, runtime: $dara.RuntimeOptions): Promise<ListDirectoryUsersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.assignedInfo)) {
      query["AssignedInfo"] = request.assignedInfo;
    }

    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.filter)) {
      query["Filter"] = request.filter;
    }

    if (!$dara.isNull(request.includeAssignedUser)) {
      query["IncludeAssignedUser"] = request.includeAssignedUser;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.OUPath)) {
      query["OUPath"] = request.OUPath;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sortType)) {
      query["SortType"] = request.sortType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDirectoryUsers",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListDirectoryUsersResponse>(await this.callApi(params, req, runtime), new ListDirectoryUsersResponse({}));
    } else {
      return $dara.cast<ListDirectoryUsersResponse>(await this.execute(params, req, runtime), new ListDirectoryUsersResponse({}));
    }

  }

  /**
   * Obtains the user information in the AD system if you use an AD directory to connect to an AD system.
   * 
   * @remarks
   * If you use an AD directory to connect to an AD system, you can call this operation to obtain the user information in the AD system.
   * 
   * @param request - ListDirectoryUsersRequest
   * @returns ListDirectoryUsersResponse
   */
  async listDirectoryUsers(request: ListDirectoryUsersRequest): Promise<ListDirectoryUsersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDirectoryUsersWithOptions(request, runtime);
  }

  /**
   * Queries the information about shared files of cloud disks.
   * 
   * @param request - ListFilePermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListFilePermissionResponse
   */
  async listFilePermissionWithOptions(request: ListFilePermissionRequest, runtime: $dara.RuntimeOptions): Promise<ListFilePermissionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.fileId)) {
      query["FileId"] = request.fileId;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListFilePermission",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListFilePermissionResponse>(await this.callApi(params, req, runtime), new ListFilePermissionResponse({}));
    } else {
      return $dara.cast<ListFilePermissionResponse>(await this.execute(params, req, runtime), new ListFilePermissionResponse({}));
    }

  }

  /**
   * Queries the information about shared files of cloud disks.
   * 
   * @param request - ListFilePermissionRequest
   * @returns ListFilePermissionResponse
   */
  async listFilePermission(request: ListFilePermissionRequest): Promise<ListFilePermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listFilePermissionWithOptions(request, runtime);
  }

  /**
   * Queries information about an office network, including its status, cloud computer quantity, virtual private cloud (VPC) type, and more.
   * 
   * @param request - ListOfficeSiteOverviewRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListOfficeSiteOverviewResponse
   */
  async listOfficeSiteOverviewWithOptions(request: ListOfficeSiteOverviewRequest, runtime: $dara.RuntimeOptions): Promise<ListOfficeSiteOverviewResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.forceRefresh)) {
      query["ForceRefresh"] = request.forceRefresh;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.queryRange)) {
      query["QueryRange"] = request.queryRange;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListOfficeSiteOverview",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListOfficeSiteOverviewResponse>(await this.callApi(params, req, runtime), new ListOfficeSiteOverviewResponse({}));
    } else {
      return $dara.cast<ListOfficeSiteOverviewResponse>(await this.execute(params, req, runtime), new ListOfficeSiteOverviewResponse({}));
    }

  }

  /**
   * Queries information about an office network, including its status, cloud computer quantity, virtual private cloud (VPC) type, and more.
   * 
   * @param request - ListOfficeSiteOverviewRequest
   * @returns ListOfficeSiteOverviewResponse
   */
  async listOfficeSiteOverview(request: ListOfficeSiteOverviewRequest): Promise<ListOfficeSiteOverviewResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listOfficeSiteOverviewWithOptions(request, runtime);
  }

  /**
   * Queries information about Active Directory (AD) users after an enterprise AD office network (formerly workspace) interconnects to an AD domain.
   * 
   * @param request - ListOfficeSiteUsersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListOfficeSiteUsersResponse
   */
  async listOfficeSiteUsersWithOptions(request: ListOfficeSiteUsersRequest, runtime: $dara.RuntimeOptions): Promise<ListOfficeSiteUsersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.assignedInfo)) {
      query["AssignedInfo"] = request.assignedInfo;
    }

    if (!$dara.isNull(request.filter)) {
      query["Filter"] = request.filter;
    }

    if (!$dara.isNull(request.includeAssignedUser)) {
      query["IncludeAssignedUser"] = request.includeAssignedUser;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.OUPath)) {
      query["OUPath"] = request.OUPath;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sortType)) {
      query["SortType"] = request.sortType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListOfficeSiteUsers",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListOfficeSiteUsersResponse>(await this.callApi(params, req, runtime), new ListOfficeSiteUsersResponse({}));
    } else {
      return $dara.cast<ListOfficeSiteUsersResponse>(await this.execute(params, req, runtime), new ListOfficeSiteUsersResponse({}));
    }

  }

  /**
   * Queries information about Active Directory (AD) users after an enterprise AD office network (formerly workspace) interconnects to an AD domain.
   * 
   * @param request - ListOfficeSiteUsersRequest
   * @returns ListOfficeSiteUsersResponse
   */
  async listOfficeSiteUsers(request: ListOfficeSiteUsersRequest): Promise<ListOfficeSiteUsersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listOfficeSiteUsersWithOptions(request, runtime);
  }

  /**
   * Queries the tags of cloud computers.
   * 
   * @remarks
   * You must use at least one of the following parameters in the request to determine the object that you want to query: `ResourceId.N`, `Tag.N.Key`, and `Tag.N.Value`.
   * 
   * @param request - ListTagResourcesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTagResourcesResponse
   */
  async listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: $dara.RuntimeOptions): Promise<ListTagResourcesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTagResources",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListTagResourcesResponse>(await this.callApi(params, req, runtime), new ListTagResourcesResponse({}));
    } else {
      return $dara.cast<ListTagResourcesResponse>(await this.execute(params, req, runtime), new ListTagResourcesResponse({}));
    }

  }

  /**
   * Queries the tags of cloud computers.
   * 
   * @remarks
   * You must use at least one of the following parameters in the request to determine the object that you want to query: `ResourceId.N`, `Tag.N.Key`, and `Tag.N.Value`.
   * 
   * @param request - ListTagResourcesRequest
   * @returns ListTagResourcesResponse
   */
  async listTagResources(request: ListTagResourcesRequest): Promise<ListTagResourcesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTagResourcesWithOptions(request, runtime);
  }

  /**
   * Obtains the organizational units (OUs) of an Active Directory (AD) domain that is connected to an enterprise AD office network (formerly workspace).
   * 
   * @param request - ListUserAdOrganizationUnitsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListUserAdOrganizationUnitsResponse
   */
  async listUserAdOrganizationUnitsWithOptions(request: ListUserAdOrganizationUnitsRequest, runtime: $dara.RuntimeOptions): Promise<ListUserAdOrganizationUnitsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.filter)) {
      query["Filter"] = request.filter;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListUserAdOrganizationUnits",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ListUserAdOrganizationUnitsResponse>(await this.callApi(params, req, runtime), new ListUserAdOrganizationUnitsResponse({}));
    } else {
      return $dara.cast<ListUserAdOrganizationUnitsResponse>(await this.execute(params, req, runtime), new ListUserAdOrganizationUnitsResponse({}));
    }

  }

  /**
   * Obtains the organizational units (OUs) of an Active Directory (AD) domain that is connected to an enterprise AD office network (formerly workspace).
   * 
   * @param request - ListUserAdOrganizationUnitsRequest
   * @returns ListUserAdOrganizationUnitsResponse
   */
  async listUserAdOrganizationUnits(request: ListUserAdOrganizationUnitsRequest): Promise<ListUserAdOrganizationUnitsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listUserAdOrganizationUnitsWithOptions(request, runtime);
  }

  /**
   * Locks a multi-factor authentication (MFA) device that is in the NORMAL state.
   * 
   * @remarks
   * After a virtual MFA device is locked, its status changes to LOCKED. The Active Directory (AD) user who uses the virtual MFA device is unable to pass MFA and is therefore unable to log on to the client. You can call the [UnlockVirtualMFADevice](https://help.aliyun.com/document_detail/206212.html) operation to unlock the device.
   * 
   * @param request - LockVirtualMFADeviceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns LockVirtualMFADeviceResponse
   */
  async lockVirtualMFADeviceWithOptions(request: LockVirtualMFADeviceRequest, runtime: $dara.RuntimeOptions): Promise<LockVirtualMFADeviceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.serialNumber)) {
      query["SerialNumber"] = request.serialNumber;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "LockVirtualMFADevice",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<LockVirtualMFADeviceResponse>(await this.callApi(params, req, runtime), new LockVirtualMFADeviceResponse({}));
    } else {
      return $dara.cast<LockVirtualMFADeviceResponse>(await this.execute(params, req, runtime), new LockVirtualMFADeviceResponse({}));
    }

  }

  /**
   * Locks a multi-factor authentication (MFA) device that is in the NORMAL state.
   * 
   * @remarks
   * After a virtual MFA device is locked, its status changes to LOCKED. The Active Directory (AD) user who uses the virtual MFA device is unable to pass MFA and is therefore unable to log on to the client. You can call the [UnlockVirtualMFADevice](https://help.aliyun.com/document_detail/206212.html) operation to unlock the device.
   * 
   * @param request - LockVirtualMFADeviceRequest
   * @returns LockVirtualMFADeviceResponse
   */
  async lockVirtualMFADevice(request: LockVirtualMFADeviceRequest): Promise<LockVirtualMFADeviceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.lockVirtualMFADeviceWithOptions(request, runtime);
  }

  /**
   * Migrates cloud computers from the current office network (formerly called workspace) to the new office network.
   * 
   * @param request - MigrateDesktopsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MigrateDesktopsResponse
   */
  async migrateDesktopsWithOptions(request: MigrateDesktopsRequest, runtime: $dara.RuntimeOptions): Promise<MigrateDesktopsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.targetOfficeSiteId)) {
      query["TargetOfficeSiteId"] = request.targetOfficeSiteId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "MigrateDesktops",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<MigrateDesktopsResponse>(await this.callApi(params, req, runtime), new MigrateDesktopsResponse({}));
    } else {
      return $dara.cast<MigrateDesktopsResponse>(await this.execute(params, req, runtime), new MigrateDesktopsResponse({}));
    }

  }

  /**
   * Migrates cloud computers from the current office network (formerly called workspace) to the new office network.
   * 
   * @param request - MigrateDesktopsRequest
   * @returns MigrateDesktopsResponse
   */
  async migrateDesktops(request: MigrateDesktopsRequest): Promise<MigrateDesktopsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.migrateDesktopsWithOptions(request, runtime);
  }

  /**
   * Update the protocols of images to Adaptive Streaming Protocol (ASP).
   * 
   * @param request - MigrateImageProtocolRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MigrateImageProtocolResponse
   */
  async migrateImageProtocolWithOptions(request: MigrateImageProtocolRequest, runtime: $dara.RuntimeOptions): Promise<MigrateImageProtocolResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.targetProtocolType)) {
      query["TargetProtocolType"] = request.targetProtocolType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "MigrateImageProtocol",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<MigrateImageProtocolResponse>(await this.callApi(params, req, runtime), new MigrateImageProtocolResponse({}));
    } else {
      return $dara.cast<MigrateImageProtocolResponse>(await this.execute(params, req, runtime), new MigrateImageProtocolResponse({}));
    }

  }

  /**
   * Update the protocols of images to Adaptive Streaming Protocol (ASP).
   * 
   * @param request - MigrateImageProtocolRequest
   * @returns MigrateImageProtocolResponse
   */
  async migrateImageProtocol(request: MigrateImageProtocolRequest): Promise<MigrateImageProtocolResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.migrateImageProtocolWithOptions(request, runtime);
  }

  /**
   * Modifies an Active Directory (AD) directory.
   * 
   * @remarks
   * You can modify the following domain name- and Domain Name System (DNS)-related parameters only for Active Directory (AD) directories that are in the ERROR or REGISTERING state: `DomainName`, `SubDomainName`, `DnsAddress.N`, and `SubDomainDnsAddress`.
   * 
   * @param request - ModifyADConnectorDirectoryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyADConnectorDirectoryResponse
   */
  async modifyADConnectorDirectoryWithOptions(request: ModifyADConnectorDirectoryRequest, runtime: $dara.RuntimeOptions): Promise<ModifyADConnectorDirectoryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.adHostname)) {
      query["AdHostname"] = request.adHostname;
    }

    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.directoryName)) {
      query["DirectoryName"] = request.directoryName;
    }

    if (!$dara.isNull(request.dnsAddress)) {
      query["DnsAddress"] = request.dnsAddress;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.domainPassword)) {
      query["DomainPassword"] = request.domainPassword;
    }

    if (!$dara.isNull(request.domainUserName)) {
      query["DomainUserName"] = request.domainUserName;
    }

    if (!$dara.isNull(request.mfaEnabled)) {
      query["MfaEnabled"] = request.mfaEnabled;
    }

    if (!$dara.isNull(request.OUName)) {
      query["OUName"] = request.OUName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.subDomainDnsAddress)) {
      query["SubDomainDnsAddress"] = request.subDomainDnsAddress;
    }

    if (!$dara.isNull(request.subDomainName)) {
      query["SubDomainName"] = request.subDomainName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyADConnectorDirectory",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyADConnectorDirectoryResponse>(await this.callApi(params, req, runtime), new ModifyADConnectorDirectoryResponse({}));
    } else {
      return $dara.cast<ModifyADConnectorDirectoryResponse>(await this.execute(params, req, runtime), new ModifyADConnectorDirectoryResponse({}));
    }

  }

  /**
   * Modifies an Active Directory (AD) directory.
   * 
   * @remarks
   * You can modify the following domain name- and Domain Name System (DNS)-related parameters only for Active Directory (AD) directories that are in the ERROR or REGISTERING state: `DomainName`, `SubDomainName`, `DnsAddress.N`, and `SubDomainDnsAddress`.
   * 
   * @param request - ModifyADConnectorDirectoryRequest
   * @returns ModifyADConnectorDirectoryResponse
   */
  async modifyADConnectorDirectory(request: ModifyADConnectorDirectoryRequest): Promise<ModifyADConnectorDirectoryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyADConnectorDirectoryWithOptions(request, runtime);
  }

  /**
   * Modifies the basic properties of an enterprise Active Directory (AD) office network, such as the office network name and domain names of the enterprise AD subdomains.
   * 
   * @remarks
   * You can modify parameters of domain names and Domain Name System (DNS) for enterprise AD office networks that are in the `ERROR` or `REGISTERED` state. The parameters include `DomainName`, `SubDomainName`, `DnsAddress.N`, and `SubDomainDnsAddress.N`.
   * 
   * @param request - ModifyADConnectorOfficeSiteRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyADConnectorOfficeSiteResponse
   */
  async modifyADConnectorOfficeSiteWithOptions(request: ModifyADConnectorOfficeSiteRequest, runtime: $dara.RuntimeOptions): Promise<ModifyADConnectorOfficeSiteResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.adHostname)) {
      query["AdHostname"] = request.adHostname;
    }

    if (!$dara.isNull(request.backupDCHostname)) {
      query["BackupDCHostname"] = request.backupDCHostname;
    }

    if (!$dara.isNull(request.backupDns)) {
      query["BackupDns"] = request.backupDns;
    }

    if (!$dara.isNull(request.dnsAddress)) {
      query["DnsAddress"] = request.dnsAddress;
    }

    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.domainPassword)) {
      query["DomainPassword"] = request.domainPassword;
    }

    if (!$dara.isNull(request.domainUserName)) {
      query["DomainUserName"] = request.domainUserName;
    }

    if (!$dara.isNull(request.mfaEnabled)) {
      query["MfaEnabled"] = request.mfaEnabled;
    }

    if (!$dara.isNull(request.OUName)) {
      query["OUName"] = request.OUName;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.officeSiteName)) {
      query["OfficeSiteName"] = request.officeSiteName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.subDomainDnsAddress)) {
      query["SubDomainDnsAddress"] = request.subDomainDnsAddress;
    }

    if (!$dara.isNull(request.subDomainName)) {
      query["SubDomainName"] = request.subDomainName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyADConnectorOfficeSite",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyADConnectorOfficeSiteResponse>(await this.callApi(params, req, runtime), new ModifyADConnectorOfficeSiteResponse({}));
    } else {
      return $dara.cast<ModifyADConnectorOfficeSiteResponse>(await this.execute(params, req, runtime), new ModifyADConnectorOfficeSiteResponse({}));
    }

  }

  /**
   * Modifies the basic properties of an enterprise Active Directory (AD) office network, such as the office network name and domain names of the enterprise AD subdomains.
   * 
   * @remarks
   * You can modify parameters of domain names and Domain Name System (DNS) for enterprise AD office networks that are in the `ERROR` or `REGISTERED` state. The parameters include `DomainName`, `SubDomainName`, `DnsAddress.N`, and `SubDomainDnsAddress.N`.
   * 
   * @param request - ModifyADConnectorOfficeSiteRequest
   * @returns ModifyADConnectorOfficeSiteResponse
   */
  async modifyADConnectorOfficeSite(request: ModifyADConnectorOfficeSiteRequest): Promise<ModifyADConnectorOfficeSiteResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyADConnectorOfficeSiteWithOptions(request, runtime);
  }

  /**
   * Modify the Internet access control policy on the office network or cloud computer granularity.
   * 
   * @remarks
   * You can set different Internet access control policies at different granularities to achieve the effect of composite policies. For example, you can disable the Internet access on the office network granularity and enable the Internet access on specific cloud computer granularity. The effect is that all cloud computers in the office network except the specified cloud computers are not allowed to access the Internet.
   * 
   * @param request - ModifyAclEntriesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAclEntriesResponse
   */
  async modifyAclEntriesWithOptions(request: ModifyAclEntriesRequest, runtime: $dara.RuntimeOptions): Promise<ModifyAclEntriesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.policy)) {
      query["Policy"] = request.policy;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.sourceId)) {
      query["SourceId"] = request.sourceId;
    }

    if (!$dara.isNull(request.sourceType)) {
      query["SourceType"] = request.sourceType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAclEntries",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyAclEntriesResponse>(await this.callApi(params, req, runtime), new ModifyAclEntriesResponse({}));
    } else {
      return $dara.cast<ModifyAclEntriesResponse>(await this.execute(params, req, runtime), new ModifyAclEntriesResponse({}));
    }

  }

  /**
   * Modify the Internet access control policy on the office network or cloud computer granularity.
   * 
   * @remarks
   * You can set different Internet access control policies at different granularities to achieve the effect of composite policies. For example, you can disable the Internet access on the office network granularity and enable the Internet access on specific cloud computer granularity. The effect is that all cloud computers in the office network except the specified cloud computers are not allowed to access the Internet.
   * 
   * @param request - ModifyAclEntriesRequest
   * @returns ModifyAclEntriesResponse
   */
  async modifyAclEntries(request: ModifyAclEntriesRequest): Promise<ModifyAclEntriesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAclEntriesWithOptions(request, runtime);
  }

  /**
   * Modifies the parameters of an automatic snapshot policy, such as the policy name and snapshot retention period.
   * 
   * @param request - ModifyAutoSnapshotPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAutoSnapshotPolicyResponse
   */
  async modifyAutoSnapshotPolicyWithOptions(request: ModifyAutoSnapshotPolicyRequest, runtime: $dara.RuntimeOptions): Promise<ModifyAutoSnapshotPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cronExpression)) {
      query["CronExpression"] = request.cronExpression;
    }

    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    if (!$dara.isNull(request.policyName)) {
      query["PolicyName"] = request.policyName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.retentionDays)) {
      query["RetentionDays"] = request.retentionDays;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAutoSnapshotPolicy",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyAutoSnapshotPolicyResponse>(await this.callApi(params, req, runtime), new ModifyAutoSnapshotPolicyResponse({}));
    } else {
      return $dara.cast<ModifyAutoSnapshotPolicyResponse>(await this.execute(params, req, runtime), new ModifyAutoSnapshotPolicyResponse({}));
    }

  }

  /**
   * Modifies the parameters of an automatic snapshot policy, such as the policy name and snapshot retention period.
   * 
   * @param request - ModifyAutoSnapshotPolicyRequest
   * @returns ModifyAutoSnapshotPolicyResponse
   */
  async modifyAutoSnapshotPolicy(request: ModifyAutoSnapshotPolicyRequest): Promise<ModifyAutoSnapshotPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAutoSnapshotPolicyWithOptions(request, runtime);
  }

  /**
   * Modifies a custom cloud computer template.
   * 
   * @remarks
   * Only custom desktop templates can be modified.
   * 
   * @param request - ModifyBundleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyBundleResponse
   */
  async modifyBundleWithOptions(request: ModifyBundleRequest, runtime: $dara.RuntimeOptions): Promise<ModifyBundleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bundleId)) {
      query["BundleId"] = request.bundleId;
    }

    if (!$dara.isNull(request.bundleName)) {
      query["BundleName"] = request.bundleName;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.language)) {
      query["Language"] = request.language;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyBundle",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyBundleResponse>(await this.callApi(params, req, runtime), new ModifyBundleResponse({}));
    } else {
      return $dara.cast<ModifyBundleResponse>(await this.execute(params, req, runtime), new ModifyBundleResponse({}));
    }

  }

  /**
   * Modifies a custom cloud computer template.
   * 
   * @remarks
   * Only custom desktop templates can be modified.
   * 
   * @param request - ModifyBundleRequest
   * @returns ModifyBundleResponse
   */
  async modifyBundle(request: ModifyBundleRequest): Promise<ModifyBundleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyBundleWithOptions(request, runtime);
  }

  /**
   * Modifies the files in a cloud disk.
   * 
   * @param request - ModifyCdsFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCdsFileResponse
   */
  async modifyCdsFileWithOptions(request: ModifyCdsFileRequest, runtime: $dara.RuntimeOptions): Promise<ModifyCdsFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.conflictPolicy)) {
      query["ConflictPolicy"] = request.conflictPolicy;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.fileId)) {
      query["FileId"] = request.fileId;
    }

    if (!$dara.isNull(request.fileName)) {
      query["FileName"] = request.fileName;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCdsFile",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyCdsFileResponse>(await this.callApi(params, req, runtime), new ModifyCdsFileResponse({}));
    } else {
      return $dara.cast<ModifyCdsFileResponse>(await this.execute(params, req, runtime), new ModifyCdsFileResponse({}));
    }

  }

  /**
   * Modifies the files in a cloud disk.
   * 
   * @param request - ModifyCdsFileRequest
   * @returns ModifyCdsFileResponse
   */
  async modifyCdsFile(request: ModifyCdsFileRequest): Promise<ModifyCdsFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCdsFileWithOptions(request, runtime);
  }

  /**
   * Modifies the link for file sharing.
   * 
   * @param request - ModifyCdsFileShareLinkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCdsFileShareLinkResponse
   */
  async modifyCdsFileShareLinkWithOptions(request: ModifyCdsFileShareLinkRequest, runtime: $dara.RuntimeOptions): Promise<ModifyCdsFileShareLinkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.disableDownload)) {
      query["DisableDownload"] = request.disableDownload;
    }

    if (!$dara.isNull(request.disablePreview)) {
      query["DisablePreview"] = request.disablePreview;
    }

    if (!$dara.isNull(request.disableSave)) {
      query["DisableSave"] = request.disableSave;
    }

    if (!$dara.isNull(request.downloadCount)) {
      query["DownloadCount"] = request.downloadCount;
    }

    if (!$dara.isNull(request.downloadLimit)) {
      query["DownloadLimit"] = request.downloadLimit;
    }

    if (!$dara.isNull(request.expiration)) {
      query["Expiration"] = request.expiration;
    }

    if (!$dara.isNull(request.previewCount)) {
      query["PreviewCount"] = request.previewCount;
    }

    if (!$dara.isNull(request.previewLimit)) {
      query["PreviewLimit"] = request.previewLimit;
    }

    if (!$dara.isNull(request.reportCount)) {
      query["ReportCount"] = request.reportCount;
    }

    if (!$dara.isNull(request.saveCount)) {
      query["SaveCount"] = request.saveCount;
    }

    if (!$dara.isNull(request.saveLimit)) {
      query["SaveLimit"] = request.saveLimit;
    }

    if (!$dara.isNull(request.shareId)) {
      query["ShareId"] = request.shareId;
    }

    if (!$dara.isNull(request.shareName)) {
      query["ShareName"] = request.shareName;
    }

    if (!$dara.isNull(request.sharePwd)) {
      query["SharePwd"] = request.sharePwd;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.videoPreviewCount)) {
      query["VideoPreviewCount"] = request.videoPreviewCount;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCdsFileShareLink",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyCdsFileShareLinkResponse>(await this.callApi(params, req, runtime), new ModifyCdsFileShareLinkResponse({}));
    } else {
      return $dara.cast<ModifyCdsFileShareLinkResponse>(await this.execute(params, req, runtime), new ModifyCdsFileShareLinkResponse({}));
    }

  }

  /**
   * Modifies the link for file sharing.
   * 
   * @param request - ModifyCdsFileShareLinkRequest
   * @returns ModifyCdsFileShareLinkResponse
   */
  async modifyCdsFileShareLink(request: ModifyCdsFileShareLinkRequest): Promise<ModifyCdsFileShareLinkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCdsFileShareLinkWithOptions(request, runtime);
  }

  /**
   * Modifies team spaces.
   * 
   * @param request - ModifyCloudDriveGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCloudDriveGroupsResponse
   */
  async modifyCloudDriveGroupsWithOptions(request: ModifyCloudDriveGroupsRequest, runtime: $dara.RuntimeOptions): Promise<ModifyCloudDriveGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.totalSize)) {
      query["TotalSize"] = request.totalSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCloudDriveGroups",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyCloudDriveGroupsResponse>(await this.callApi(params, req, runtime), new ModifyCloudDriveGroupsResponse({}));
    } else {
      return $dara.cast<ModifyCloudDriveGroupsResponse>(await this.execute(params, req, runtime), new ModifyCloudDriveGroupsResponse({}));
    }

  }

  /**
   * Modifies team spaces.
   * 
   * @param request - ModifyCloudDriveGroupsRequest
   * @returns ModifyCloudDriveGroupsResponse
   */
  async modifyCloudDriveGroups(request: ModifyCloudDriveGroupsRequest): Promise<ModifyCloudDriveGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCloudDriveGroupsWithOptions(request, runtime);
  }

  /**
   * Modifies the user permissions on Cloud Drive Service, and configures users who have the download permissions and upload and download permissions. By default, the users that are not configured the preceding permissions only have the upload permissions.
   * 
   * @param request - ModifyCloudDrivePermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCloudDrivePermissionResponse
   */
  async modifyCloudDrivePermissionWithOptions(request: ModifyCloudDrivePermissionRequest, runtime: $dara.RuntimeOptions): Promise<ModifyCloudDrivePermissionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.downloadEndUserIds)) {
      query["DownloadEndUserIds"] = request.downloadEndUserIds;
    }

    if (!$dara.isNull(request.downloadUploadEndUserIds)) {
      query["DownloadUploadEndUserIds"] = request.downloadUploadEndUserIds;
    }

    if (!$dara.isNull(request.noDownloadNoUploadEndUserIds)) {
      query["NoDownloadNoUploadEndUserIds"] = request.noDownloadNoUploadEndUserIds;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCloudDrivePermission",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyCloudDrivePermissionResponse>(await this.callApi(params, req, runtime), new ModifyCloudDrivePermissionResponse({}));
    } else {
      return $dara.cast<ModifyCloudDrivePermissionResponse>(await this.execute(params, req, runtime), new ModifyCloudDrivePermissionResponse({}));
    }

  }

  /**
   * Modifies the user permissions on Cloud Drive Service, and configures users who have the download permissions and upload and download permissions. By default, the users that are not configured the preceding permissions only have the upload permissions.
   * 
   * @param request - ModifyCloudDrivePermissionRequest
   * @returns ModifyCloudDrivePermissionResponse
   */
  async modifyCloudDrivePermission(request: ModifyCloudDrivePermissionRequest): Promise<ModifyCloudDrivePermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCloudDrivePermissionWithOptions(request, runtime);
  }

  /**
   * 修改无影网盘终端用户的属性
   * 
   * @param request - ModifyCloudDriveUsersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCloudDriveUsersResponse
   */
  async modifyCloudDriveUsersWithOptions(request: ModifyCloudDriveUsersRequest, runtime: $dara.RuntimeOptions): Promise<ModifyCloudDriveUsersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.userMaxSize)) {
      query["UserMaxSize"] = request.userMaxSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCloudDriveUsers",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyCloudDriveUsersResponse>(await this.callApi(params, req, runtime), new ModifyCloudDriveUsersResponse({}));
    } else {
      return $dara.cast<ModifyCloudDriveUsersResponse>(await this.execute(params, req, runtime), new ModifyCloudDriveUsersResponse({}));
    }

  }

  /**
   * 修改无影网盘终端用户的属性
   * 
   * @param request - ModifyCloudDriveUsersRequest
   * @returns ModifyCloudDriveUsersResponse
   */
  async modifyCloudDriveUsers(request: ModifyCloudDriveUsersRequest): Promise<ModifyCloudDriveUsersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCloudDriveUsersWithOptions(request, runtime);
  }

  /**
   * 修改配置组
   * 
   * @param request - ModifyConfigGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyConfigGroupResponse
   */
  async modifyConfigGroupWithOptions(request: ModifyConfigGroupRequest, runtime: $dara.RuntimeOptions): Promise<ModifyConfigGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyConfigGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyConfigGroupResponse>(await this.callApi(params, req, runtime), new ModifyConfigGroupResponse({}));
    } else {
      return $dara.cast<ModifyConfigGroupResponse>(await this.execute(params, req, runtime), new ModifyConfigGroupResponse({}));
    }

  }

  /**
   * 修改配置组
   * 
   * @param request - ModifyConfigGroupRequest
   * @returns ModifyConfigGroupResponse
   */
  async modifyConfigGroup(request: ModifyConfigGroupRequest): Promise<ModifyConfigGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyConfigGroupWithOptions(request, runtime);
  }

  /**
   * Modifies the layouts of cloud computer list headers, such as the required fields and the display and hide settings.
   * 
   * @param request - ModifyCustomizedListHeadersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCustomizedListHeadersResponse
   */
  async modifyCustomizedListHeadersWithOptions(request: ModifyCustomizedListHeadersRequest, runtime: $dara.RuntimeOptions): Promise<ModifyCustomizedListHeadersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.headers)) {
      query["Headers"] = request.headers;
    }

    if (!$dara.isNull(request.listType)) {
      query["ListType"] = request.listType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCustomizedListHeaders",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyCustomizedListHeadersResponse>(await this.callApi(params, req, runtime), new ModifyCustomizedListHeadersResponse({}));
    } else {
      return $dara.cast<ModifyCustomizedListHeadersResponse>(await this.execute(params, req, runtime), new ModifyCustomizedListHeadersResponse({}));
    }

  }

  /**
   * Modifies the layouts of cloud computer list headers, such as the required fields and the display and hide settings.
   * 
   * @param request - ModifyCustomizedListHeadersRequest
   * @returns ModifyCustomizedListHeadersResponse
   */
  async modifyCustomizedListHeaders(request: ModifyCustomizedListHeadersRequest): Promise<ModifyCustomizedListHeadersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCustomizedListHeadersWithOptions(request, runtime);
  }

  /**
   * Changes the billing method of cloud computers to subscription or pay-as-you-go.
   * 
   * @remarks
   *   Before you call this operation, make sure that you fully understand the billing methods of cloud computers. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
   * *   Before you call this operation, make sure that the cloud computers whose billing method you want to change are in the Running or Stopped state and you have no overdue payments in your Alibaba Cloud account.
   * *   After the order payment is completed, the system starts to change the billing method of the cloud computers. During the change, you cannot perform operations, such as starting or stopping the cloud computers, and changing configurations of the cloud computers.
   * 
   * @param request - ModifyDesktopChargeTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDesktopChargeTypeResponse
   */
  async modifyDesktopChargeTypeWithOptions(request: ModifyDesktopChargeTypeRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDesktopChargeTypeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.chargeType)) {
      query["ChargeType"] = request.chargeType;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.promotionId)) {
      query["PromotionId"] = request.promotionId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.useDuration)) {
      query["UseDuration"] = request.useDuration;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDesktopChargeType",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyDesktopChargeTypeResponse>(await this.callApi(params, req, runtime), new ModifyDesktopChargeTypeResponse({}));
    } else {
      return $dara.cast<ModifyDesktopChargeTypeResponse>(await this.execute(params, req, runtime), new ModifyDesktopChargeTypeResponse({}));
    }

  }

  /**
   * Changes the billing method of cloud computers to subscription or pay-as-you-go.
   * 
   * @remarks
   *   Before you call this operation, make sure that you fully understand the billing methods of cloud computers. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
   * *   Before you call this operation, make sure that the cloud computers whose billing method you want to change are in the Running or Stopped state and you have no overdue payments in your Alibaba Cloud account.
   * *   After the order payment is completed, the system starts to change the billing method of the cloud computers. During the change, you cannot perform operations, such as starting or stopping the cloud computers, and changing configurations of the cloud computers.
   * 
   * @param request - ModifyDesktopChargeTypeRequest
   * @returns ModifyDesktopChargeTypeResponse
   */
  async modifyDesktopChargeType(request: ModifyDesktopChargeTypeRequest): Promise<ModifyDesktopChargeTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDesktopChargeTypeWithOptions(request, runtime);
  }

  /**
   * Modifies the configurations of a cloud computer pool.
   * 
   * @remarks
   * After a cloud computer pool is created, the system creates a specific number of cloud computers in the pool based on the auto scaling policy and user connections. Cloud computers are created by using the same cloud computer template and security policy. You can modify the configurations of the pool, including the pool name, cloud computer template, and policy, in different business scenarios.
   * 
   * @param request - ModifyDesktopGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDesktopGroupResponse
   */
  async modifyDesktopGroupWithOptions(request: ModifyDesktopGroupRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDesktopGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.allowAutoSetup)) {
      query["AllowAutoSetup"] = request.allowAutoSetup;
    }

    if (!$dara.isNull(request.allowBufferCount)) {
      query["AllowBufferCount"] = request.allowBufferCount;
    }

    if (!$dara.isNull(request.bindAmount)) {
      query["BindAmount"] = request.bindAmount;
    }

    if (!$dara.isNull(request.buyDesktopsCount)) {
      query["BuyDesktopsCount"] = request.buyDesktopsCount;
    }

    if (!$dara.isNull(request.classify)) {
      query["Classify"] = request.classify;
    }

    if (!$dara.isNull(request.comments)) {
      query["Comments"] = request.comments;
    }

    if (!$dara.isNull(request.connectDuration)) {
      query["ConnectDuration"] = request.connectDuration;
    }

    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.desktopGroupName)) {
      query["DesktopGroupName"] = request.desktopGroupName;
    }

    if (!$dara.isNull(request.disableSessionConfig)) {
      query["DisableSessionConfig"] = request.disableSessionConfig;
    }

    if (!$dara.isNull(request.fileSystemId)) {
      query["FileSystemId"] = request.fileSystemId;
    }

    if (!$dara.isNull(request.idleDisconnectDuration)) {
      query["IdleDisconnectDuration"] = request.idleDisconnectDuration;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.keepDuration)) {
      query["KeepDuration"] = request.keepDuration;
    }

    if (!$dara.isNull(request.loadPolicy)) {
      query["LoadPolicy"] = request.loadPolicy;
    }

    if (!$dara.isNull(request.maxDesktopsCount)) {
      query["MaxDesktopsCount"] = request.maxDesktopsCount;
    }

    if (!$dara.isNull(request.minDesktopsCount)) {
      query["MinDesktopsCount"] = request.minDesktopsCount;
    }

    if (!$dara.isNull(request.ownBundleId)) {
      query["OwnBundleId"] = request.ownBundleId;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.policyGroupIds)) {
      query["PolicyGroupIds"] = request.policyGroupIds;
    }

    if (!$dara.isNull(request.profileFollowSwitch)) {
      query["ProfileFollowSwitch"] = request.profileFollowSwitch;
    }

    if (!$dara.isNull(request.ratioThreshold)) {
      query["RatioThreshold"] = request.ratioThreshold;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resetType)) {
      query["ResetType"] = request.resetType;
    }

    if (!$dara.isNull(request.scaleStrategyId)) {
      query["ScaleStrategyId"] = request.scaleStrategyId;
    }

    if (!$dara.isNull(request.stopDuration)) {
      query["StopDuration"] = request.stopDuration;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDesktopGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyDesktopGroupResponse>(await this.callApi(params, req, runtime), new ModifyDesktopGroupResponse({}));
    } else {
      return $dara.cast<ModifyDesktopGroupResponse>(await this.execute(params, req, runtime), new ModifyDesktopGroupResponse({}));
    }

  }

  /**
   * Modifies the configurations of a cloud computer pool.
   * 
   * @remarks
   * After a cloud computer pool is created, the system creates a specific number of cloud computers in the pool based on the auto scaling policy and user connections. Cloud computers are created by using the same cloud computer template and security policy. You can modify the configurations of the pool, including the pool name, cloud computer template, and policy, in different business scenarios.
   * 
   * @param request - ModifyDesktopGroupRequest
   * @returns ModifyDesktopGroupResponse
   */
  async modifyDesktopGroup(request: ModifyDesktopGroupRequest): Promise<ModifyDesktopGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDesktopGroupWithOptions(request, runtime);
  }

  /**
   * Modifies the hostname of a Windows cloud computer in the Active Directory (AD) office network.
   * 
   * @remarks
   * The Windows cloud computer whose hostname you want to modify must be in an AD office network. After the hostname is modified, the cloud computer is re-created.
   * 
   * @param request - ModifyDesktopHostNameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDesktopHostNameResponse
   */
  async modifyDesktopHostNameWithOptions(request: ModifyDesktopHostNameRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDesktopHostNameResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.newHostName)) {
      query["NewHostName"] = request.newHostName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDesktopHostName",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyDesktopHostNameResponse>(await this.callApi(params, req, runtime), new ModifyDesktopHostNameResponse({}));
    } else {
      return $dara.cast<ModifyDesktopHostNameResponse>(await this.execute(params, req, runtime), new ModifyDesktopHostNameResponse({}));
    }

  }

  /**
   * Modifies the hostname of a Windows cloud computer in the Active Directory (AD) office network.
   * 
   * @remarks
   * The Windows cloud computer whose hostname you want to modify must be in an AD office network. After the hostname is modified, the cloud computer is re-created.
   * 
   * @param request - ModifyDesktopHostNameRequest
   * @returns ModifyDesktopHostNameResponse
   */
  async modifyDesktopHostName(request: ModifyDesktopHostNameRequest): Promise<ModifyDesktopHostNameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDesktopHostNameWithOptions(request, runtime);
  }

  /**
   * Changes the name of a cloud computer to a new name.
   * 
   * @param request - ModifyDesktopNameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDesktopNameResponse
   */
  async modifyDesktopNameWithOptions(request: ModifyDesktopNameRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDesktopNameResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.newDesktopName)) {
      query["NewDesktopName"] = request.newDesktopName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDesktopName",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyDesktopNameResponse>(await this.callApi(params, req, runtime), new ModifyDesktopNameResponse({}));
    } else {
      return $dara.cast<ModifyDesktopNameResponse>(await this.execute(params, req, runtime), new ModifyDesktopNameResponse({}));
    }

  }

  /**
   * Changes the name of a cloud computer to a new name.
   * 
   * @param request - ModifyDesktopNameRequest
   * @returns ModifyDesktopNameResponse
   */
  async modifyDesktopName(request: ModifyDesktopNameRequest): Promise<ModifyDesktopNameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDesktopNameWithOptions(request, runtime);
  }

  /**
   * 修改桌面超卖组
   * 
   * @param request - ModifyDesktopOversoldGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDesktopOversoldGroupResponse
   */
  async modifyDesktopOversoldGroupWithOptions(request: ModifyDesktopOversoldGroupRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDesktopOversoldGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.concurrenceCount)) {
      query["ConcurrenceCount"] = request.concurrenceCount;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.idleDisconnectDuration)) {
      query["IdleDisconnectDuration"] = request.idleDisconnectDuration;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.keepDuration)) {
      query["KeepDuration"] = request.keepDuration;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.oversoldGroupId)) {
      query["OversoldGroupId"] = request.oversoldGroupId;
    }

    if (!$dara.isNull(request.oversoldUserCount)) {
      query["OversoldUserCount"] = request.oversoldUserCount;
    }

    if (!$dara.isNull(request.oversoldWarn)) {
      query["OversoldWarn"] = request.oversoldWarn;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.stopDuration)) {
      query["StopDuration"] = request.stopDuration;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDesktopOversoldGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyDesktopOversoldGroupResponse>(await this.callApi(params, req, runtime), new ModifyDesktopOversoldGroupResponse({}));
    } else {
      return $dara.cast<ModifyDesktopOversoldGroupResponse>(await this.execute(params, req, runtime), new ModifyDesktopOversoldGroupResponse({}));
    }

  }

  /**
   * 修改桌面超卖组
   * 
   * @param request - ModifyDesktopOversoldGroupRequest
   * @returns ModifyDesktopOversoldGroupResponse
   */
  async modifyDesktopOversoldGroup(request: ModifyDesktopOversoldGroupRequest): Promise<ModifyDesktopOversoldGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDesktopOversoldGroupWithOptions(request, runtime);
  }

  /**
   * 修改桌面超卖组售卖数据
   * 
   * @param request - ModifyDesktopOversoldGroupSaleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDesktopOversoldGroupSaleResponse
   */
  async modifyDesktopOversoldGroupSaleWithOptions(request: ModifyDesktopOversoldGroupSaleRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDesktopOversoldGroupSaleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.concurrenceCount)) {
      query["ConcurrenceCount"] = request.concurrenceCount;
    }

    if (!$dara.isNull(request.oversoldGroupId)) {
      query["OversoldGroupId"] = request.oversoldGroupId;
    }

    if (!$dara.isNull(request.oversoldUserCount)) {
      query["OversoldUserCount"] = request.oversoldUserCount;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDesktopOversoldGroupSale",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyDesktopOversoldGroupSaleResponse>(await this.callApi(params, req, runtime), new ModifyDesktopOversoldGroupSaleResponse({}));
    } else {
      return $dara.cast<ModifyDesktopOversoldGroupSaleResponse>(await this.execute(params, req, runtime), new ModifyDesktopOversoldGroupSaleResponse({}));
    }

  }

  /**
   * 修改桌面超卖组售卖数据
   * 
   * @param request - ModifyDesktopOversoldGroupSaleRequest
   * @returns ModifyDesktopOversoldGroupSaleResponse
   */
  async modifyDesktopOversoldGroupSale(request: ModifyDesktopOversoldGroupSaleRequest): Promise<ModifyDesktopOversoldGroupSaleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDesktopOversoldGroupSaleWithOptions(request, runtime);
  }

  /**
   * 修改桌面超卖用户组
   * 
   * @param request - ModifyDesktopOversoldUserGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDesktopOversoldUserGroupResponse
   */
  async modifyDesktopOversoldUserGroupWithOptions(request: ModifyDesktopOversoldUserGroupRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDesktopOversoldUserGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.oversoldGroupId)) {
      query["OversoldGroupId"] = request.oversoldGroupId;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.userGroupId)) {
      query["UserGroupId"] = request.userGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDesktopOversoldUserGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyDesktopOversoldUserGroupResponse>(await this.callApi(params, req, runtime), new ModifyDesktopOversoldUserGroupResponse({}));
    } else {
      return $dara.cast<ModifyDesktopOversoldUserGroupResponse>(await this.execute(params, req, runtime), new ModifyDesktopOversoldUserGroupResponse({}));
    }

  }

  /**
   * 修改桌面超卖用户组
   * 
   * @param request - ModifyDesktopOversoldUserGroupRequest
   * @returns ModifyDesktopOversoldUserGroupResponse
   */
  async modifyDesktopOversoldUserGroup(request: ModifyDesktopOversoldUserGroupRequest): Promise<ModifyDesktopOversoldUserGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDesktopOversoldUserGroupWithOptions(request, runtime);
  }

  /**
   * Changes the instance type of a cloud computer and scales up the disks of the cloud computer.
   * 
   * @remarks
   * Changing the configurations of a cloud computer includes changing the instance type of the cloud computer and scaling up the disks of the cloud computer.
   * *   Before you change the configurations of a cloud computer, you must understand the instance types and disk sizes supported by cloud computers. For more information, see [Cloud computer types](https://help.aliyun.com/document_detail/188609.html). You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/188882.html) operation to query the instance types supported by cloud computers.
   * *   You must change at least one of the following configurations: instance type, system disk size, and data disk size of the cloud computer. You must specify at least one of the following parameters: `DesktopType`, `RootDiskSizeGib`, and `UserDiskSizeGib`. Take note of the following items:
   *     *   The instance type of a cloud computer includes the configurations of vCPUs, memory, and GPUs. You can only change an instance type to another. You cannot change only one of the configurations.
   *     *   You cannot change a cloud computer between the General Office type and the non-General Office type. You cannot yet change a cloud computer between the Graphics type and the non-Graphics type.
   *     *   The system disk and data disks of a cloud computer can only be scaled up and cannot be scaled down.
   *     *   If the billing method of the cloud computer is subscription, the system calculates the price difference based on the configuration difference between the original cloud computer and the new cloud computer. You must make up for the price difference or receive a refund for the price difference.
   *     *   We recommend that you do not change the configurations of a cloud computer twice within 5 minutes.
   *     *   When you change the configurations of a cloud computer, the cloud computer must be in the Stopped state.
   * *   After you change the configurations of a cloud computer, the personal data on the cloud computer is not affected.
   * 
   * @param request - ModifyDesktopSpecRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDesktopSpecResponse
   */
  async modifyDesktopSpecWithOptions(request: ModifyDesktopSpecRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDesktopSpecResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.desktopType)) {
      query["DesktopType"] = request.desktopType;
    }

    if (!$dara.isNull(request.promotionId)) {
      query["PromotionId"] = request.promotionId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceSpecs)) {
      query["ResourceSpecs"] = request.resourceSpecs;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.rootDiskSizeGib)) {
      query["RootDiskSizeGib"] = request.rootDiskSizeGib;
    }

    if (!$dara.isNull(request.userDiskPerformanceLevel)) {
      query["UserDiskPerformanceLevel"] = request.userDiskPerformanceLevel;
    }

    if (!$dara.isNull(request.userDiskSizeGib)) {
      query["UserDiskSizeGib"] = request.userDiskSizeGib;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDesktopSpec",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyDesktopSpecResponse>(await this.callApi(params, req, runtime), new ModifyDesktopSpecResponse({}));
    } else {
      return $dara.cast<ModifyDesktopSpecResponse>(await this.execute(params, req, runtime), new ModifyDesktopSpecResponse({}));
    }

  }

  /**
   * Changes the instance type of a cloud computer and scales up the disks of the cloud computer.
   * 
   * @remarks
   * Changing the configurations of a cloud computer includes changing the instance type of the cloud computer and scaling up the disks of the cloud computer.
   * *   Before you change the configurations of a cloud computer, you must understand the instance types and disk sizes supported by cloud computers. For more information, see [Cloud computer types](https://help.aliyun.com/document_detail/188609.html). You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/188882.html) operation to query the instance types supported by cloud computers.
   * *   You must change at least one of the following configurations: instance type, system disk size, and data disk size of the cloud computer. You must specify at least one of the following parameters: `DesktopType`, `RootDiskSizeGib`, and `UserDiskSizeGib`. Take note of the following items:
   *     *   The instance type of a cloud computer includes the configurations of vCPUs, memory, and GPUs. You can only change an instance type to another. You cannot change only one of the configurations.
   *     *   You cannot change a cloud computer between the General Office type and the non-General Office type. You cannot yet change a cloud computer between the Graphics type and the non-Graphics type.
   *     *   The system disk and data disks of a cloud computer can only be scaled up and cannot be scaled down.
   *     *   If the billing method of the cloud computer is subscription, the system calculates the price difference based on the configuration difference between the original cloud computer and the new cloud computer. You must make up for the price difference or receive a refund for the price difference.
   *     *   We recommend that you do not change the configurations of a cloud computer twice within 5 minutes.
   *     *   When you change the configurations of a cloud computer, the cloud computer must be in the Stopped state.
   * *   After you change the configurations of a cloud computer, the personal data on the cloud computer is not affected.
   * 
   * @param request - ModifyDesktopSpecRequest
   * @returns ModifyDesktopSpecResponse
   */
  async modifyDesktopSpec(request: ModifyDesktopSpecRequest): Promise<ModifyDesktopSpecResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDesktopSpecWithOptions(request, runtime);
  }

  /**
   * Creates or modifies scheduled tasks on cloud computers, such as starting, stopping, restarting, and resetting cloud computers on schedule.
   * 
   * @param request - ModifyDesktopTimerRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDesktopTimerResponse
   */
  async modifyDesktopTimerWithOptions(request: ModifyDesktopTimerRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDesktopTimerResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.desktopTimers)) {
      query["DesktopTimers"] = request.desktopTimers;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.useDesktopTimers)) {
      query["UseDesktopTimers"] = request.useDesktopTimers;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDesktopTimer",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyDesktopTimerResponse>(await this.callApi(params, req, runtime), new ModifyDesktopTimerResponse({}));
    } else {
      return $dara.cast<ModifyDesktopTimerResponse>(await this.execute(params, req, runtime), new ModifyDesktopTimerResponse({}));
    }

  }

  /**
   * Creates or modifies scheduled tasks on cloud computers, such as starting, stopping, restarting, and resetting cloud computers on schedule.
   * 
   * @param request - ModifyDesktopTimerRequest
   * @returns ModifyDesktopTimerResponse
   */
  async modifyDesktopTimer(request: ModifyDesktopTimerRequest): Promise<ModifyDesktopTimerResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDesktopTimerWithOptions(request, runtime);
  }

  /**
   * Modifies the policies that are configured for a cloud desktop.
   * 
   * @remarks
   * The cloud desktops that you want to restart by calling this operation must be in the Running state.
   * 
   * @param request - ModifyDesktopsPolicyGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDesktopsPolicyGroupResponse
   */
  async modifyDesktopsPolicyGroupWithOptions(request: ModifyDesktopsPolicyGroupRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDesktopsPolicyGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.policyGroupIds)) {
      query["PolicyGroupIds"] = request.policyGroupIds;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDesktopsPolicyGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyDesktopsPolicyGroupResponse>(await this.callApi(params, req, runtime), new ModifyDesktopsPolicyGroupResponse({}));
    } else {
      return $dara.cast<ModifyDesktopsPolicyGroupResponse>(await this.execute(params, req, runtime), new ModifyDesktopsPolicyGroupResponse({}));
    }

  }

  /**
   * Modifies the policies that are configured for a cloud desktop.
   * 
   * @remarks
   * The cloud desktops that you want to restart by calling this operation must be in the Running state.
   * 
   * @param request - ModifyDesktopsPolicyGroupRequest
   * @returns ModifyDesktopsPolicyGroupResponse
   */
  async modifyDesktopsPolicyGroup(request: ModifyDesktopsPolicyGroupRequest): Promise<ModifyDesktopsPolicyGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDesktopsPolicyGroupWithOptions(request, runtime);
  }

  /**
   * Changes the configurations of a cloud desktop, including the number of vCPUs, memory size, and disk size.
   * 
   * @remarks
   * You can call this operation to change the configurations, such as the desktop type and disk size, of a cloud desktop.
   * *   Before you call this operation, you must know the cloud desktop types and the disk sizes for each type of cloud desktop that Elastic Desktop Service (EDS) provides.
   * *   When you change the configurations of a cloud desktop, you must change the desktop type or the size of the system disk or data disk. You must configure at least one of the following parameters: DesktopType, RootDiskSizeGib, and UserDiskSizeGib. Take note of the following items:
   * 1\\. Desktop types include the specifications of vCPUs, memory, and GPUs. You can change only the desktop type, instead of one of the specifications.
   * 2\\. You cannot change a cloud desktop from the General Office type to a non-General Office type, or from a non-General Office type to the General Office type. You cannot change a cloud desktop from the Graphics type to a non-Graphics type, or from a non-Graphics type to the Graphics type.
   * 3\\. You can only increase the sizes of system and data disks. You cannot decrease the sizes of system and data disks.
   * 4\\. If your cloud desktop uses the subscription billing method, the price difference is calculated based on the price before and after configuration changes. You may receive a refund, or must pay for the price difference.
   * 5\\. If you need to change the configurations of a cloud desktop multiple times, we recommend that you wait at least 5 minutes between consecutive operations on the cloud desktop.
   * 6\\. The cloud desktop for which you want to change the desktop type must be in the Stopped state.
   * *   The changes do not affect your personal data on the cloud desktop.
   * 
   * @param request - ModifyDiskSpecRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDiskSpecResponse
   */
  async modifyDiskSpecWithOptions(request: ModifyDiskSpecRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDiskSpecResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.promotionId)) {
      query["PromotionId"] = request.promotionId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.rootDiskPerformanceLevel)) {
      query["RootDiskPerformanceLevel"] = request.rootDiskPerformanceLevel;
    }

    if (!$dara.isNull(request.userDiskPerformanceLevel)) {
      query["UserDiskPerformanceLevel"] = request.userDiskPerformanceLevel;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDiskSpec",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyDiskSpecResponse>(await this.callApi(params, req, runtime), new ModifyDiskSpecResponse({}));
    } else {
      return $dara.cast<ModifyDiskSpecResponse>(await this.execute(params, req, runtime), new ModifyDiskSpecResponse({}));
    }

  }

  /**
   * Changes the configurations of a cloud desktop, including the number of vCPUs, memory size, and disk size.
   * 
   * @remarks
   * You can call this operation to change the configurations, such as the desktop type and disk size, of a cloud desktop.
   * *   Before you call this operation, you must know the cloud desktop types and the disk sizes for each type of cloud desktop that Elastic Desktop Service (EDS) provides.
   * *   When you change the configurations of a cloud desktop, you must change the desktop type or the size of the system disk or data disk. You must configure at least one of the following parameters: DesktopType, RootDiskSizeGib, and UserDiskSizeGib. Take note of the following items:
   * 1\\. Desktop types include the specifications of vCPUs, memory, and GPUs. You can change only the desktop type, instead of one of the specifications.
   * 2\\. You cannot change a cloud desktop from the General Office type to a non-General Office type, or from a non-General Office type to the General Office type. You cannot change a cloud desktop from the Graphics type to a non-Graphics type, or from a non-Graphics type to the Graphics type.
   * 3\\. You can only increase the sizes of system and data disks. You cannot decrease the sizes of system and data disks.
   * 4\\. If your cloud desktop uses the subscription billing method, the price difference is calculated based on the price before and after configuration changes. You may receive a refund, or must pay for the price difference.
   * 5\\. If you need to change the configurations of a cloud desktop multiple times, we recommend that you wait at least 5 minutes between consecutive operations on the cloud desktop.
   * 6\\. The cloud desktop for which you want to change the desktop type must be in the Stopped state.
   * *   The changes do not affect your personal data on the cloud desktop.
   * 
   * @param request - ModifyDiskSpecRequest
   * @returns ModifyDiskSpecResponse
   */
  async modifyDiskSpec(request: ModifyDiskSpecRequest): Promise<ModifyDiskSpecResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDiskSpecWithOptions(request, runtime);
  }

  /**
   * Assigns a cloud computer to end users and removes all original end users of the cloud computer.
   * 
   * @remarks
   *   The cloud computer must be in the Running state.
   * *   After you call this operation, the assignment result is immediately returned. You can call the [DescribeDesktops](https://help.aliyun.com/document_detail/436815.html) operation to query the assignment of the cloud computer. The value of the `ManagementFlags` response parameter indicates the assignment of the cloud computer. A value of `ASSIGNING` indicates that the cloud computer is being assigned, and other values indicate that the cloud computer is assigned.
   * *   We recommend that you check the assignment every 2 to 5 seconds and perform the checks within 50 seconds. Typically, 1 to 5 seconds are required to complete the assignment.
   * 
   * @param request - ModifyEntitlementRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyEntitlementResponse
   */
  async modifyEntitlementWithOptions(request: ModifyEntitlementRequest, runtime: $dara.RuntimeOptions): Promise<ModifyEntitlementResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyEntitlement",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyEntitlementResponse>(await this.callApi(params, req, runtime), new ModifyEntitlementResponse({}));
    } else {
      return $dara.cast<ModifyEntitlementResponse>(await this.execute(params, req, runtime), new ModifyEntitlementResponse({}));
    }

  }

  /**
   * Assigns a cloud computer to end users and removes all original end users of the cloud computer.
   * 
   * @remarks
   *   The cloud computer must be in the Running state.
   * *   After you call this operation, the assignment result is immediately returned. You can call the [DescribeDesktops](https://help.aliyun.com/document_detail/436815.html) operation to query the assignment of the cloud computer. The value of the `ManagementFlags` response parameter indicates the assignment of the cloud computer. A value of `ASSIGNING` indicates that the cloud computer is being assigned, and other values indicate that the cloud computer is assigned.
   * *   We recommend that you check the assignment every 2 to 5 seconds and perform the checks within 50 seconds. Typically, 1 to 5 seconds are required to complete the assignment.
   * 
   * @param request - ModifyEntitlementRequest
   * @returns ModifyEntitlementResponse
   */
  async modifyEntitlement(request: ModifyEntitlementRequest): Promise<ModifyEntitlementResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyEntitlementWithOptions(request, runtime);
  }

  /**
   * Modifies the attributes of an image, including the name and description of the image.
   * 
   * @remarks
   * You can call this operation to modify the attributes of only custom images that are in the Available state.
   * 
   * @param request - ModifyImageAttributeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyImageAttributeResponse
   */
  async modifyImageAttributeWithOptions(request: ModifyImageAttributeRequest, runtime: $dara.RuntimeOptions): Promise<ModifyImageAttributeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyImageAttribute",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyImageAttributeResponse>(await this.callApi(params, req, runtime), new ModifyImageAttributeResponse({}));
    } else {
      return $dara.cast<ModifyImageAttributeResponse>(await this.execute(params, req, runtime), new ModifyImageAttributeResponse({}));
    }

  }

  /**
   * Modifies the attributes of an image, including the name and description of the image.
   * 
   * @remarks
   * You can call this operation to modify the attributes of only custom images that are in the Available state.
   * 
   * @param request - ModifyImageAttributeRequest
   * @returns ModifyImageAttributeResponse
   */
  async modifyImageAttribute(request: ModifyImageAttributeRequest): Promise<ModifyImageAttributeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyImageAttributeWithOptions(request, runtime);
  }

  /**
   * Shares an image with other Alibaba Cloud accounts, or unshares an image from the recipient Alibaba Cloud accounts.
   * 
   * @remarks
   * ### [](#)Security of shared images
   * Elastic Desktop Service cannot guarantee the integrity and security of shared images. When you use a shared image, you must make sure that the image comes from a trusted sharer or account, and you are legally responsible for using the shared image.
   * ### [](#)Quota and billing
   * *   A shared image does not count against the image quotas of principals to which the image is shared.
   * *   After a principal uses a shared image to create a cloud computer, the sharer is not charged for the shared image.
   * *   You are not charged for shared images.
   * ### [](#)Supported sharing behaviors
   * *   You can share custom images with other Alibaba Cloud accounts.
   * *   You can share custom images between accounts in the China site (aliyun.com) and the international site (alibabacloud.com).
   * ### [](#)Unsupported sharing behaviors
   * *   You cannot share images that are shared by other Alibaba Cloud accounts.
   * *   You cannot share encrypted images.
   * *   You cannot share images across regions. If you want to share an image across regions, you must copy the image to the destination region and then share the image. For more information, see [CopyImage](https://help.aliyun.com/document_detail/436978.html).
   * 
   * @param request - ModifyImagePermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyImagePermissionResponse
   */
  async modifyImagePermissionWithOptions(request: ModifyImagePermissionRequest, runtime: $dara.RuntimeOptions): Promise<ModifyImagePermissionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.addAccount)) {
      query["AddAccount"] = request.addAccount;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.removeAccount)) {
      query["RemoveAccount"] = request.removeAccount;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyImagePermission",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyImagePermissionResponse>(await this.callApi(params, req, runtime), new ModifyImagePermissionResponse({}));
    } else {
      return $dara.cast<ModifyImagePermissionResponse>(await this.execute(params, req, runtime), new ModifyImagePermissionResponse({}));
    }

  }

  /**
   * Shares an image with other Alibaba Cloud accounts, or unshares an image from the recipient Alibaba Cloud accounts.
   * 
   * @remarks
   * ### [](#)Security of shared images
   * Elastic Desktop Service cannot guarantee the integrity and security of shared images. When you use a shared image, you must make sure that the image comes from a trusted sharer or account, and you are legally responsible for using the shared image.
   * ### [](#)Quota and billing
   * *   A shared image does not count against the image quotas of principals to which the image is shared.
   * *   After a principal uses a shared image to create a cloud computer, the sharer is not charged for the shared image.
   * *   You are not charged for shared images.
   * ### [](#)Supported sharing behaviors
   * *   You can share custom images with other Alibaba Cloud accounts.
   * *   You can share custom images between accounts in the China site (aliyun.com) and the international site (alibabacloud.com).
   * ### [](#)Unsupported sharing behaviors
   * *   You cannot share images that are shared by other Alibaba Cloud accounts.
   * *   You cannot share encrypted images.
   * *   You cannot share images across regions. If you want to share an image across regions, you must copy the image to the destination region and then share the image. For more information, see [CopyImage](https://help.aliyun.com/document_detail/436978.html).
   * 
   * @param request - ModifyImagePermissionRequest
   * @returns ModifyImagePermissionResponse
   */
  async modifyImagePermission(request: ModifyImagePermissionRequest): Promise<ModifyImagePermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyImagePermissionWithOptions(request, runtime);
  }

  /**
   * Modifies the mount target of a File Storage NAS (NAS) file system.
   * 
   * @remarks
   * When you create a NAS file system, a mount target is automatically generated. By default, the mount target does not need to be changed. If the mount target is deleted by misoperation, you must specify a new mount target for the NAS file system in the workspace. You can call the [CreateMountTarget](https://help.aliyun.com/document_detail/62621.html) operation to create a mount target.
   * 
   * @param request - ModifyNASDefaultMountTargetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyNASDefaultMountTargetResponse
   */
  async modifyNASDefaultMountTargetWithOptions(request: ModifyNASDefaultMountTargetRequest, runtime: $dara.RuntimeOptions): Promise<ModifyNASDefaultMountTargetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fileSystemId)) {
      query["FileSystemId"] = request.fileSystemId;
    }

    if (!$dara.isNull(request.mountTargetDomain)) {
      query["MountTargetDomain"] = request.mountTargetDomain;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyNASDefaultMountTarget",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyNASDefaultMountTargetResponse>(await this.callApi(params, req, runtime), new ModifyNASDefaultMountTargetResponse({}));
    } else {
      return $dara.cast<ModifyNASDefaultMountTargetResponse>(await this.execute(params, req, runtime), new ModifyNASDefaultMountTargetResponse({}));
    }

  }

  /**
   * Modifies the mount target of a File Storage NAS (NAS) file system.
   * 
   * @remarks
   * When you create a NAS file system, a mount target is automatically generated. By default, the mount target does not need to be changed. If the mount target is deleted by misoperation, you must specify a new mount target for the NAS file system in the workspace. You can call the [CreateMountTarget](https://help.aliyun.com/document_detail/62621.html) operation to create a mount target.
   * 
   * @param request - ModifyNASDefaultMountTargetRequest
   * @returns ModifyNASDefaultMountTargetResponse
   */
  async modifyNASDefaultMountTarget(request: ModifyNASDefaultMountTargetRequest): Promise<ModifyNASDefaultMountTargetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyNASDefaultMountTargetWithOptions(request, runtime);
  }

  /**
   * Modifies the bandwidth of a premium bandwidth plan.
   * 
   * @param request - ModifyNetworkPackageBandwidthRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyNetworkPackageBandwidthResponse
   */
  async modifyNetworkPackageBandwidthWithOptions(request: ModifyNetworkPackageBandwidthRequest, runtime: $dara.RuntimeOptions): Promise<ModifyNetworkPackageBandwidthResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.bandwidth)) {
      query["Bandwidth"] = request.bandwidth;
    }

    if (!$dara.isNull(request.networkPackageId)) {
      query["NetworkPackageId"] = request.networkPackageId;
    }

    if (!$dara.isNull(request.promotionId)) {
      query["PromotionId"] = request.promotionId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyNetworkPackageBandwidth",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyNetworkPackageBandwidthResponse>(await this.callApi(params, req, runtime), new ModifyNetworkPackageBandwidthResponse({}));
    } else {
      return $dara.cast<ModifyNetworkPackageBandwidthResponse>(await this.execute(params, req, runtime), new ModifyNetworkPackageBandwidthResponse({}));
    }

  }

  /**
   * Modifies the bandwidth of a premium bandwidth plan.
   * 
   * @param request - ModifyNetworkPackageBandwidthRequest
   * @returns ModifyNetworkPackageBandwidthResponse
   */
  async modifyNetworkPackageBandwidth(request: ModifyNetworkPackageBandwidthRequest): Promise<ModifyNetworkPackageBandwidthResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyNetworkPackageBandwidthWithOptions(request, runtime);
  }

  /**
   * Restores or disables a premium bandwidth plan.
   * 
   * @remarks
   * If you want to temporarily disable the Internet access of your cloud computer after the Internet access is enabled for your cloud computer, you can disable the premium bandwidth plan and restore it as needed.
   * 
   * @param request - ModifyNetworkPackageEnabledRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyNetworkPackageEnabledResponse
   */
  async modifyNetworkPackageEnabledWithOptions(request: ModifyNetworkPackageEnabledRequest, runtime: $dara.RuntimeOptions): Promise<ModifyNetworkPackageEnabledResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.enabled)) {
      query["Enabled"] = request.enabled;
    }

    if (!$dara.isNull(request.networkPackageId)) {
      query["NetworkPackageId"] = request.networkPackageId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyNetworkPackageEnabled",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyNetworkPackageEnabledResponse>(await this.callApi(params, req, runtime), new ModifyNetworkPackageEnabledResponse({}));
    } else {
      return $dara.cast<ModifyNetworkPackageEnabledResponse>(await this.execute(params, req, runtime), new ModifyNetworkPackageEnabledResponse({}));
    }

  }

  /**
   * Restores or disables a premium bandwidth plan.
   * 
   * @remarks
   * If you want to temporarily disable the Internet access of your cloud computer after the Internet access is enabled for your cloud computer, you can disable the premium bandwidth plan and restore it as needed.
   * 
   * @param request - ModifyNetworkPackageEnabledRequest
   * @returns ModifyNetworkPackageEnabledResponse
   */
  async modifyNetworkPackageEnabled(request: ModifyNetworkPackageEnabledRequest): Promise<ModifyNetworkPackageEnabledResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyNetworkPackageEnabledWithOptions(request, runtime);
  }

  /**
   * Modifies the basic properties of an office network, including the name and local administrator permission settings.
   * 
   * @param request - ModifyOfficeSiteAttributeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyOfficeSiteAttributeResponse
   */
  async modifyOfficeSiteAttributeWithOptions(request: ModifyOfficeSiteAttributeRequest, runtime: $dara.RuntimeOptions): Promise<ModifyOfficeSiteAttributeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopAccessType)) {
      query["DesktopAccessType"] = request.desktopAccessType;
    }

    if (!$dara.isNull(request.enableAdminAccess)) {
      query["EnableAdminAccess"] = request.enableAdminAccess;
    }

    if (!$dara.isNull(request.needVerifyLoginRisk)) {
      query["NeedVerifyLoginRisk"] = request.needVerifyLoginRisk;
    }

    if (!$dara.isNull(request.needVerifyZeroDevice)) {
      query["NeedVerifyZeroDevice"] = request.needVerifyZeroDevice;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.officeSiteName)) {
      query["OfficeSiteName"] = request.officeSiteName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyOfficeSiteAttribute",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyOfficeSiteAttributeResponse>(await this.callApi(params, req, runtime), new ModifyOfficeSiteAttributeResponse({}));
    } else {
      return $dara.cast<ModifyOfficeSiteAttributeResponse>(await this.execute(params, req, runtime), new ModifyOfficeSiteAttributeResponse({}));
    }

  }

  /**
   * Modifies the basic properties of an office network, including the name and local administrator permission settings.
   * 
   * @param request - ModifyOfficeSiteAttributeRequest
   * @returns ModifyOfficeSiteAttributeResponse
   */
  async modifyOfficeSiteAttribute(request: ModifyOfficeSiteAttributeRequest): Promise<ModifyOfficeSiteAttributeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyOfficeSiteAttributeWithOptions(request, runtime);
  }

  /**
   * Enables or disables the communication between cloud computers in an office network (formerly workspace). If you enable the communication between cloud computers in an office network, the cloud computers can access each other.
   * 
   * @param request - ModifyOfficeSiteCrossDesktopAccessRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyOfficeSiteCrossDesktopAccessResponse
   */
  async modifyOfficeSiteCrossDesktopAccessWithOptions(request: ModifyOfficeSiteCrossDesktopAccessRequest, runtime: $dara.RuntimeOptions): Promise<ModifyOfficeSiteCrossDesktopAccessResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.enableCrossDesktopAccess)) {
      query["EnableCrossDesktopAccess"] = request.enableCrossDesktopAccess;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyOfficeSiteCrossDesktopAccess",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyOfficeSiteCrossDesktopAccessResponse>(await this.callApi(params, req, runtime), new ModifyOfficeSiteCrossDesktopAccessResponse({}));
    } else {
      return $dara.cast<ModifyOfficeSiteCrossDesktopAccessResponse>(await this.execute(params, req, runtime), new ModifyOfficeSiteCrossDesktopAccessResponse({}));
    }

  }

  /**
   * Enables or disables the communication between cloud computers in an office network (formerly workspace). If you enable the communication between cloud computers in an office network, the cloud computers can access each other.
   * 
   * @param request - ModifyOfficeSiteCrossDesktopAccessRequest
   * @returns ModifyOfficeSiteCrossDesktopAccessResponse
   */
  async modifyOfficeSiteCrossDesktopAccess(request: ModifyOfficeSiteCrossDesktopAccessRequest): Promise<ModifyOfficeSiteCrossDesktopAccessResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyOfficeSiteCrossDesktopAccessWithOptions(request, runtime);
  }

  /**
   * Enables or disables multi-factor authentication (MFA) for an enterprise Active Directory (AD) office network (formerly workspace).
   * 
   * @param request - ModifyOfficeSiteMfaEnabledRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyOfficeSiteMfaEnabledResponse
   */
  async modifyOfficeSiteMfaEnabledWithOptions(request: ModifyOfficeSiteMfaEnabledRequest, runtime: $dara.RuntimeOptions): Promise<ModifyOfficeSiteMfaEnabledResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.mfaEnabled)) {
      query["MfaEnabled"] = request.mfaEnabled;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyOfficeSiteMfaEnabled",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyOfficeSiteMfaEnabledResponse>(await this.callApi(params, req, runtime), new ModifyOfficeSiteMfaEnabledResponse({}));
    } else {
      return $dara.cast<ModifyOfficeSiteMfaEnabledResponse>(await this.execute(params, req, runtime), new ModifyOfficeSiteMfaEnabledResponse({}));
    }

  }

  /**
   * Enables or disables multi-factor authentication (MFA) for an enterprise Active Directory (AD) office network (formerly workspace).
   * 
   * @param request - ModifyOfficeSiteMfaEnabledRequest
   * @returns ModifyOfficeSiteMfaEnabledResponse
   */
  async modifyOfficeSiteMfaEnabled(request: ModifyOfficeSiteMfaEnabledRequest): Promise<ModifyOfficeSiteMfaEnabledResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyOfficeSiteMfaEnabledWithOptions(request, runtime);
  }

  /**
   * Modifies a policy.
   * 
   * @param request - ModifyPolicyGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyPolicyGroupResponse
   */
  async modifyPolicyGroupWithOptions(request: ModifyPolicyGroupRequest, runtime: $dara.RuntimeOptions): Promise<ModifyPolicyGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.adminAccess)) {
      query["AdminAccess"] = request.adminAccess;
    }

    if (!$dara.isNull(request.appContentProtection)) {
      query["AppContentProtection"] = request.appContentProtection;
    }

    if (!$dara.isNull(request.authorizeAccessPolicyRule)) {
      query["AuthorizeAccessPolicyRule"] = request.authorizeAccessPolicyRule;
    }

    if (!$dara.isNull(request.authorizeSecurityPolicyRule)) {
      query["AuthorizeSecurityPolicyRule"] = request.authorizeSecurityPolicyRule;
    }

    if (!$dara.isNull(request.cameraRedirect)) {
      query["CameraRedirect"] = request.cameraRedirect;
    }

    if (!$dara.isNull(request.clientType)) {
      query["ClientType"] = request.clientType;
    }

    if (!$dara.isNull(request.clipboard)) {
      query["Clipboard"] = request.clipboard;
    }

    if (!$dara.isNull(request.deviceRedirects)) {
      query["DeviceRedirects"] = request.deviceRedirects;
    }

    if (!$dara.isNull(request.deviceRules)) {
      query["DeviceRules"] = request.deviceRules;
    }

    if (!$dara.isNull(request.domainList)) {
      query["DomainList"] = request.domainList;
    }

    if (!$dara.isNull(request.domainResolveRule)) {
      query["DomainResolveRule"] = request.domainResolveRule;
    }

    if (!$dara.isNull(request.domainResolveRuleType)) {
      query["DomainResolveRuleType"] = request.domainResolveRuleType;
    }

    if (!$dara.isNull(request.endUserApplyAdminCoordinate)) {
      query["EndUserApplyAdminCoordinate"] = request.endUserApplyAdminCoordinate;
    }

    if (!$dara.isNull(request.endUserGroupCoordinate)) {
      query["EndUserGroupCoordinate"] = request.endUserGroupCoordinate;
    }

    if (!$dara.isNull(request.gpuAcceleration)) {
      query["GpuAcceleration"] = request.gpuAcceleration;
    }

    if (!$dara.isNull(request.html5Access)) {
      query["Html5Access"] = request.html5Access;
    }

    if (!$dara.isNull(request.html5FileTransfer)) {
      query["Html5FileTransfer"] = request.html5FileTransfer;
    }

    if (!$dara.isNull(request.internetCommunicationProtocol)) {
      query["InternetCommunicationProtocol"] = request.internetCommunicationProtocol;
    }

    if (!$dara.isNull(request.localDrive)) {
      query["LocalDrive"] = request.localDrive;
    }

    if (!$dara.isNull(request.maxReconnectTime)) {
      query["MaxReconnectTime"] = request.maxReconnectTime;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.netRedirect)) {
      query["NetRedirect"] = request.netRedirect;
    }

    if (!$dara.isNull(request.policyGroupId)) {
      query["PolicyGroupId"] = request.policyGroupId;
    }

    if (!$dara.isNull(request.preemptLogin)) {
      query["PreemptLogin"] = request.preemptLogin;
    }

    if (!$dara.isNull(request.preemptLoginUser)) {
      query["PreemptLoginUser"] = request.preemptLoginUser;
    }

    if (!$dara.isNull(request.printerRedirection)) {
      query["PrinterRedirection"] = request.printerRedirection;
    }

    if (!$dara.isNull(request.recordContent)) {
      query["RecordContent"] = request.recordContent;
    }

    if (!$dara.isNull(request.recordContentExpires)) {
      query["RecordContentExpires"] = request.recordContentExpires;
    }

    if (!$dara.isNull(request.recording)) {
      query["Recording"] = request.recording;
    }

    if (!$dara.isNull(request.recordingAudio)) {
      query["RecordingAudio"] = request.recordingAudio;
    }

    if (!$dara.isNull(request.recordingDuration)) {
      query["RecordingDuration"] = request.recordingDuration;
    }

    if (!$dara.isNull(request.recordingEndTime)) {
      query["RecordingEndTime"] = request.recordingEndTime;
    }

    if (!$dara.isNull(request.recordingExpires)) {
      query["RecordingExpires"] = request.recordingExpires;
    }

    if (!$dara.isNull(request.recordingFps)) {
      query["RecordingFps"] = request.recordingFps;
    }

    if (!$dara.isNull(request.recordingStartTime)) {
      query["RecordingStartTime"] = request.recordingStartTime;
    }

    if (!$dara.isNull(request.recordingUserNotify)) {
      query["RecordingUserNotify"] = request.recordingUserNotify;
    }

    if (!$dara.isNull(request.recordingUserNotifyMessage)) {
      query["RecordingUserNotifyMessage"] = request.recordingUserNotifyMessage;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.remoteCoordinate)) {
      query["RemoteCoordinate"] = request.remoteCoordinate;
    }

    if (!$dara.isNull(request.revokeAccessPolicyRule)) {
      query["RevokeAccessPolicyRule"] = request.revokeAccessPolicyRule;
    }

    if (!$dara.isNull(request.revokeSecurityPolicyRule)) {
      query["RevokeSecurityPolicyRule"] = request.revokeSecurityPolicyRule;
    }

    if (!$dara.isNull(request.scope)) {
      query["Scope"] = request.scope;
    }

    if (!$dara.isNull(request.scopeValue)) {
      query["ScopeValue"] = request.scopeValue;
    }

    if (!$dara.isNull(request.usbRedirect)) {
      query["UsbRedirect"] = request.usbRedirect;
    }

    if (!$dara.isNull(request.usbSupplyRedirectRule)) {
      query["UsbSupplyRedirectRule"] = request.usbSupplyRedirectRule;
    }

    if (!$dara.isNull(request.videoRedirect)) {
      query["VideoRedirect"] = request.videoRedirect;
    }

    if (!$dara.isNull(request.visualQuality)) {
      query["VisualQuality"] = request.visualQuality;
    }

    if (!$dara.isNull(request.watermark)) {
      query["Watermark"] = request.watermark;
    }

    if (!$dara.isNull(request.watermarkAntiCam)) {
      query["WatermarkAntiCam"] = request.watermarkAntiCam;
    }

    if (!$dara.isNull(request.watermarkColor)) {
      query["WatermarkColor"] = request.watermarkColor;
    }

    if (!$dara.isNull(request.watermarkDegree)) {
      query["WatermarkDegree"] = request.watermarkDegree;
    }

    if (!$dara.isNull(request.watermarkFontSize)) {
      query["WatermarkFontSize"] = request.watermarkFontSize;
    }

    if (!$dara.isNull(request.watermarkFontStyle)) {
      query["WatermarkFontStyle"] = request.watermarkFontStyle;
    }

    if (!$dara.isNull(request.watermarkPower)) {
      query["WatermarkPower"] = request.watermarkPower;
    }

    if (!$dara.isNull(request.watermarkRowAmount)) {
      query["WatermarkRowAmount"] = request.watermarkRowAmount;
    }

    if (!$dara.isNull(request.watermarkSecurity)) {
      query["WatermarkSecurity"] = request.watermarkSecurity;
    }

    if (!$dara.isNull(request.watermarkTransparency)) {
      query["WatermarkTransparency"] = request.watermarkTransparency;
    }

    if (!$dara.isNull(request.watermarkTransparencyValue)) {
      query["WatermarkTransparencyValue"] = request.watermarkTransparencyValue;
    }

    if (!$dara.isNull(request.watermarkType)) {
      query["WatermarkType"] = request.watermarkType;
    }

    if (!$dara.isNull(request.wyAssistant)) {
      query["WyAssistant"] = request.wyAssistant;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyPolicyGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyPolicyGroupResponse>(await this.callApi(params, req, runtime), new ModifyPolicyGroupResponse({}));
    } else {
      return $dara.cast<ModifyPolicyGroupResponse>(await this.execute(params, req, runtime), new ModifyPolicyGroupResponse({}));
    }

  }

  /**
   * Modifies a policy.
   * 
   * @param request - ModifyPolicyGroupRequest
   * @returns ModifyPolicyGroupResponse
   */
  async modifyPolicyGroup(request: ModifyPolicyGroupRequest): Promise<ModifyPolicyGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyPolicyGroupWithOptions(request, runtime);
  }

  /**
   * 修改定时任务配置
   * 
   * @param request - ModifyTimerGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyTimerGroupResponse
   */
  async modifyTimerGroupWithOptions(request: ModifyTimerGroupRequest, runtime: $dara.RuntimeOptions): Promise<ModifyTimerGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configTimers)) {
      query["ConfigTimers"] = request.configTimers;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyTimerGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyTimerGroupResponse>(await this.callApi(params, req, runtime), new ModifyTimerGroupResponse({}));
    } else {
      return $dara.cast<ModifyTimerGroupResponse>(await this.execute(params, req, runtime), new ModifyTimerGroupResponse({}));
    }

  }

  /**
   * 修改定时任务配置
   * 
   * @param request - ModifyTimerGroupRequest
   * @returns ModifyTimerGroupResponse
   */
  async modifyTimerGroup(request: ModifyTimerGroupRequest): Promise<ModifyTimerGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyTimerGroupWithOptions(request, runtime);
  }

  /**
   * Grants permissions on cloud desktops to end users, or revokes the permissions from the end users.
   * 
   * @remarks
   * You can modify end users only for cloud computers that are in the Running state.
   * 
   * @param request - ModifyUserEntitlementRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyUserEntitlementResponse
   */
  async modifyUserEntitlementWithOptions(request: ModifyUserEntitlementRequest, runtime: $dara.RuntimeOptions): Promise<ModifyUserEntitlementResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.authorizeDesktopId)) {
      query["AuthorizeDesktopId"] = request.authorizeDesktopId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.revokeDesktopId)) {
      query["RevokeDesktopId"] = request.revokeDesktopId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyUserEntitlement",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyUserEntitlementResponse>(await this.callApi(params, req, runtime), new ModifyUserEntitlementResponse({}));
    } else {
      return $dara.cast<ModifyUserEntitlementResponse>(await this.execute(params, req, runtime), new ModifyUserEntitlementResponse({}));
    }

  }

  /**
   * Grants permissions on cloud desktops to end users, or revokes the permissions from the end users.
   * 
   * @remarks
   * You can modify end users only for cloud computers that are in the Running state.
   * 
   * @param request - ModifyUserEntitlementRequest
   * @returns ModifyUserEntitlementResponse
   */
  async modifyUserEntitlement(request: ModifyUserEntitlementRequest): Promise<ModifyUserEntitlementResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyUserEntitlementWithOptions(request, runtime);
  }

  /**
   * Changes the end users of a cloud computer pool into new end users.
   * 
   * @param request - ModifyUserToDesktopGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyUserToDesktopGroupResponse
   */
  async modifyUserToDesktopGroupWithOptions(request: ModifyUserToDesktopGroupRequest, runtime: $dara.RuntimeOptions): Promise<ModifyUserToDesktopGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.newEndUserIds)) {
      query["NewEndUserIds"] = request.newEndUserIds;
    }

    if (!$dara.isNull(request.oldEndUserIds)) {
      query["OldEndUserIds"] = request.oldEndUserIds;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyUserToDesktopGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ModifyUserToDesktopGroupResponse>(await this.callApi(params, req, runtime), new ModifyUserToDesktopGroupResponse({}));
    } else {
      return $dara.cast<ModifyUserToDesktopGroupResponse>(await this.execute(params, req, runtime), new ModifyUserToDesktopGroupResponse({}));
    }

  }

  /**
   * Changes the end users of a cloud computer pool into new end users.
   * 
   * @param request - ModifyUserToDesktopGroupRequest
   * @returns ModifyUserToDesktopGroupResponse
   */
  async modifyUserToDesktopGroup(request: ModifyUserToDesktopGroupRequest): Promise<ModifyUserToDesktopGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyUserToDesktopGroupWithOptions(request, runtime);
  }

  /**
   * Move files or folders.
   * 
   * @param request - MoveCdsFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MoveCdsFileResponse
   */
  async moveCdsFileWithOptions(request: MoveCdsFileRequest, runtime: $dara.RuntimeOptions): Promise<MoveCdsFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.conflictPolicy)) {
      query["ConflictPolicy"] = request.conflictPolicy;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.fileId)) {
      query["FileId"] = request.fileId;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.parentFolderId)) {
      query["ParentFolderId"] = request.parentFolderId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "MoveCdsFile",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<MoveCdsFileResponse>(await this.callApi(params, req, runtime), new MoveCdsFileResponse({}));
    } else {
      return $dara.cast<MoveCdsFileResponse>(await this.execute(params, req, runtime), new MoveCdsFileResponse({}));
    }

  }

  /**
   * Move files or folders.
   * 
   * @param request - MoveCdsFileRequest
   * @returns MoveCdsFileResponse
   */
  async moveCdsFile(request: MoveCdsFileRequest): Promise<MoveCdsFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.moveCdsFileWithOptions(request, runtime);
  }

  /**
   * Restart cloud computers.
   * 
   * @remarks
   * The cloud computers that you want to restart must be in the Running state.
   * 
   * @param request - RebootDesktopsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RebootDesktopsResponse
   */
  async rebootDesktopsWithOptions(request: RebootDesktopsRequest, runtime: $dara.RuntimeOptions): Promise<RebootDesktopsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RebootDesktops",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RebootDesktopsResponse>(await this.callApi(params, req, runtime), new RebootDesktopsResponse({}));
    } else {
      return $dara.cast<RebootDesktopsResponse>(await this.execute(params, req, runtime), new RebootDesktopsResponse({}));
    }

  }

  /**
   * Restart cloud computers.
   * 
   * @remarks
   * The cloud computers that you want to restart must be in the Running state.
   * 
   * @param request - RebootDesktopsRequest
   * @returns RebootDesktopsResponse
   */
  async rebootDesktops(request: RebootDesktopsRequest): Promise<RebootDesktopsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.rebootDesktopsWithOptions(request, runtime);
  }

  /**
   * Recreates cloud computers.
   * 
   * @remarks
   * Take note of the following limits when you change an image:
   * *   You can select an image whose OS is different from the OS of the original image. The image change feature is not supported in the following regions: China (Hong Kong), Singapore, and Japan (Tokyo).
   * *   GPU images and non-GPU images cannot be exchanged. Graphic-based cloud computers can only use GPU-accelerated images. The other cloud computers can only use non-GPU-accelerated images.
   * After the image of a cloud computer is changed, the system uses the new image to initialize the system disk of the cloud computer. This has the following impacts:
   * *   Data in the system disk of the original cloud computer is cleared. Snapshots that are created based on the system disk of the original cloud computer become unavailable. The system automatically deletes the snapshots.
   * *   If the OS of the image is changed, the data in the data disk of the original cloud computer is cleared, and the snapshots that are created based on the data disk of the original cloud computer can no longer be used. The system automatically deletes the snapshots. If the OS of the image is not changed, the data in the data disk of the original cloud computer is retained, and the snapshots that are created based on the data disk of the original cloud computer can still be used.
   * 
   * @param request - RebuildDesktopsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RebuildDesktopsResponse
   */
  async rebuildDesktopsWithOptions(request: RebuildDesktopsRequest, runtime: $dara.RuntimeOptions): Promise<RebuildDesktopsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.language)) {
      query["Language"] = request.language;
    }

    if (!$dara.isNull(request.operateType)) {
      query["OperateType"] = request.operateType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RebuildDesktops",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RebuildDesktopsResponse>(await this.callApi(params, req, runtime), new RebuildDesktopsResponse({}));
    } else {
      return $dara.cast<RebuildDesktopsResponse>(await this.execute(params, req, runtime), new RebuildDesktopsResponse({}));
    }

  }

  /**
   * Recreates cloud computers.
   * 
   * @remarks
   * Take note of the following limits when you change an image:
   * *   You can select an image whose OS is different from the OS of the original image. The image change feature is not supported in the following regions: China (Hong Kong), Singapore, and Japan (Tokyo).
   * *   GPU images and non-GPU images cannot be exchanged. Graphic-based cloud computers can only use GPU-accelerated images. The other cloud computers can only use non-GPU-accelerated images.
   * After the image of a cloud computer is changed, the system uses the new image to initialize the system disk of the cloud computer. This has the following impacts:
   * *   Data in the system disk of the original cloud computer is cleared. Snapshots that are created based on the system disk of the original cloud computer become unavailable. The system automatically deletes the snapshots.
   * *   If the OS of the image is changed, the data in the data disk of the original cloud computer is cleared, and the snapshots that are created based on the data disk of the original cloud computer can no longer be used. The system automatically deletes the snapshots. If the OS of the image is not changed, the data in the data disk of the original cloud computer is retained, and the snapshots that are created based on the data disk of the original cloud computer can still be used.
   * 
   * @param request - RebuildDesktopsRequest
   * @returns RebuildDesktopsResponse
   */
  async rebuildDesktops(request: RebuildDesktopsRequest): Promise<RebuildDesktopsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.rebuildDesktopsWithOptions(request, runtime);
  }

  /**
   * Removes the file sharing feature of a folder in a cloud disk.
   * 
   * @param tmpReq - RemoveFilePermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RemoveFilePermissionResponse
   */
  async removeFilePermissionWithOptions(tmpReq: RemoveFilePermissionRequest, runtime: $dara.RuntimeOptions): Promise<RemoveFilePermissionResponse> {
    tmpReq.validate();
    let request = new RemoveFilePermissionShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.memberList)) {
      request.memberListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.memberList, "MemberList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.cdsId)) {
      query["CdsId"] = request.cdsId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.fileId)) {
      query["FileId"] = request.fileId;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.memberListShrink)) {
      query["MemberList"] = request.memberListShrink;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RemoveFilePermission",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RemoveFilePermissionResponse>(await this.callApi(params, req, runtime), new RemoveFilePermissionResponse({}));
    } else {
      return $dara.cast<RemoveFilePermissionResponse>(await this.execute(params, req, runtime), new RemoveFilePermissionResponse({}));
    }

  }

  /**
   * Removes the file sharing feature of a folder in a cloud disk.
   * 
   * @param request - RemoveFilePermissionRequest
   * @returns RemoveFilePermissionResponse
   */
  async removeFilePermission(request: RemoveFilePermissionRequest): Promise<RemoveFilePermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.removeFilePermissionWithOptions(request, runtime);
  }

  /**
   * Removes authorized users of cloud computer pools. The removed users can no longer connect to cloud computers in the cloud computer pool.
   * 
   * @param request - RemoveUserFromDesktopGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RemoveUserFromDesktopGroupResponse
   */
  async removeUserFromDesktopGroupWithOptions(request: RemoveUserFromDesktopGroupRequest, runtime: $dara.RuntimeOptions): Promise<RemoveUserFromDesktopGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.desktopGroupIds)) {
      query["DesktopGroupIds"] = request.desktopGroupIds;
    }

    if (!$dara.isNull(request.endUserIds)) {
      query["EndUserIds"] = request.endUserIds;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RemoveUserFromDesktopGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RemoveUserFromDesktopGroupResponse>(await this.callApi(params, req, runtime), new RemoveUserFromDesktopGroupResponse({}));
    } else {
      return $dara.cast<RemoveUserFromDesktopGroupResponse>(await this.execute(params, req, runtime), new RemoveUserFromDesktopGroupResponse({}));
    }

  }

  /**
   * Removes authorized users of cloud computer pools. The removed users can no longer connect to cloud computers in the cloud computer pool.
   * 
   * @param request - RemoveUserFromDesktopGroupRequest
   * @returns RemoveUserFromDesktopGroupResponse
   */
  async removeUserFromDesktopGroup(request: RemoveUserFromDesktopGroupRequest): Promise<RemoveUserFromDesktopGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.removeUserFromDesktopGroupWithOptions(request, runtime);
  }

  /**
   * 移除超卖用户组用户
   * 
   * @param request - RemoveUserFromDesktopOversoldUserGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RemoveUserFromDesktopOversoldUserGroupResponse
   */
  async removeUserFromDesktopOversoldUserGroupWithOptions(request: RemoveUserFromDesktopOversoldUserGroupRequest, runtime: $dara.RuntimeOptions): Promise<RemoveUserFromDesktopOversoldUserGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.oversoldGroupId)) {
      query["OversoldGroupId"] = request.oversoldGroupId;
    }

    if (!$dara.isNull(request.userDesktopId)) {
      query["UserDesktopId"] = request.userDesktopId;
    }

    if (!$dara.isNull(request.userGroupId)) {
      query["UserGroupId"] = request.userGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RemoveUserFromDesktopOversoldUserGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RemoveUserFromDesktopOversoldUserGroupResponse>(await this.callApi(params, req, runtime), new RemoveUserFromDesktopOversoldUserGroupResponse({}));
    } else {
      return $dara.cast<RemoveUserFromDesktopOversoldUserGroupResponse>(await this.execute(params, req, runtime), new RemoveUserFromDesktopOversoldUserGroupResponse({}));
    }

  }

  /**
   * 移除超卖用户组用户
   * 
   * @param request - RemoveUserFromDesktopOversoldUserGroupRequest
   * @returns RemoveUserFromDesktopOversoldUserGroupResponse
   */
  async removeUserFromDesktopOversoldUserGroup(request: RemoveUserFromDesktopOversoldUserGroupRequest): Promise<RemoveUserFromDesktopOversoldUserGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.removeUserFromDesktopOversoldUserGroupWithOptions(request, runtime);
  }

  /**
   * @param request - RenewDesktopGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RenewDesktopGroupResponse
   */
  async renewDesktopGroupWithOptions(request: RenewDesktopGroupRequest, runtime: $dara.RuntimeOptions): Promise<RenewDesktopGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RenewDesktopGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RenewDesktopGroupResponse>(await this.callApi(params, req, runtime), new RenewDesktopGroupResponse({}));
    } else {
      return $dara.cast<RenewDesktopGroupResponse>(await this.execute(params, req, runtime), new RenewDesktopGroupResponse({}));
    }

  }

  /**
   * @param request - RenewDesktopGroupRequest
   * @returns RenewDesktopGroupResponse
   */
  async renewDesktopGroup(request: RenewDesktopGroupRequest): Promise<RenewDesktopGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.renewDesktopGroupWithOptions(request, runtime);
  }

  /**
   * 续费桌面超卖组
   * 
   * @param request - RenewDesktopOversoldGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RenewDesktopOversoldGroupResponse
   */
  async renewDesktopOversoldGroupWithOptions(request: RenewDesktopOversoldGroupRequest, runtime: $dara.RuntimeOptions): Promise<RenewDesktopOversoldGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.oversoldGroupId)) {
      query["OversoldGroupId"] = request.oversoldGroupId;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RenewDesktopOversoldGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RenewDesktopOversoldGroupResponse>(await this.callApi(params, req, runtime), new RenewDesktopOversoldGroupResponse({}));
    } else {
      return $dara.cast<RenewDesktopOversoldGroupResponse>(await this.execute(params, req, runtime), new RenewDesktopOversoldGroupResponse({}));
    }

  }

  /**
   * 续费桌面超卖组
   * 
   * @param request - RenewDesktopOversoldGroupRequest
   * @returns RenewDesktopOversoldGroupResponse
   */
  async renewDesktopOversoldGroup(request: RenewDesktopOversoldGroupRequest): Promise<RenewDesktopOversoldGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.renewDesktopOversoldGroupWithOptions(request, runtime);
  }

  /**
   * Renew subscription cloud computers.
   * 
   * @param request - RenewDesktopsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RenewDesktopsResponse
   */
  async renewDesktopsWithOptions(request: RenewDesktopsRequest, runtime: $dara.RuntimeOptions): Promise<RenewDesktopsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.promotionId)) {
      query["PromotionId"] = request.promotionId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RenewDesktops",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RenewDesktopsResponse>(await this.callApi(params, req, runtime), new RenewDesktopsResponse({}));
    } else {
      return $dara.cast<RenewDesktopsResponse>(await this.execute(params, req, runtime), new RenewDesktopsResponse({}));
    }

  }

  /**
   * Renew subscription cloud computers.
   * 
   * @param request - RenewDesktopsRequest
   * @returns RenewDesktopsResponse
   */
  async renewDesktops(request: RenewDesktopsRequest): Promise<RenewDesktopsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.renewDesktopsWithOptions(request, runtime);
  }

  /**
   * Renews premium bandwidth plans.
   * 
   * @param request - RenewNetworkPackagesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RenewNetworkPackagesResponse
   */
  async renewNetworkPackagesWithOptions(request: RenewNetworkPackagesRequest, runtime: $dara.RuntimeOptions): Promise<RenewNetworkPackagesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.networkPackageId)) {
      query["NetworkPackageId"] = request.networkPackageId;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.promotionId)) {
      query["PromotionId"] = request.promotionId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RenewNetworkPackages",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RenewNetworkPackagesResponse>(await this.callApi(params, req, runtime), new RenewNetworkPackagesResponse({}));
    } else {
      return $dara.cast<RenewNetworkPackagesResponse>(await this.execute(params, req, runtime), new RenewNetworkPackagesResponse({}));
    }

  }

  /**
   * Renews premium bandwidth plans.
   * 
   * @param request - RenewNetworkPackagesRequest
   * @returns RenewNetworkPackagesResponse
   */
  async renewNetworkPackages(request: RenewNetworkPackagesRequest): Promise<RenewNetworkPackagesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.renewNetworkPackagesWithOptions(request, runtime);
  }

  /**
   * Resets cloud computers.
   * 
   * @remarks
   * > You can call this operation to reset only cloud computers in a cloud computer pool.
   * 
   * @param request - ResetDesktopsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ResetDesktopsResponse
   */
  async resetDesktopsWithOptions(request: ResetDesktopsRequest, runtime: $dara.RuntimeOptions): Promise<ResetDesktopsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.desktopGroupIds)) {
      query["DesktopGroupIds"] = request.desktopGroupIds;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resetScope)) {
      query["ResetScope"] = request.resetScope;
    }

    if (!$dara.isNull(request.resetType)) {
      query["ResetType"] = request.resetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ResetDesktops",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ResetDesktopsResponse>(await this.callApi(params, req, runtime), new ResetDesktopsResponse({}));
    } else {
      return $dara.cast<ResetDesktopsResponse>(await this.execute(params, req, runtime), new ResetDesktopsResponse({}));
    }

  }

  /**
   * Resets cloud computers.
   * 
   * @remarks
   * > You can call this operation to reset only cloud computers in a cloud computer pool.
   * 
   * @param request - ResetDesktopsRequest
   * @returns ResetDesktopsResponse
   */
  async resetDesktops(request: ResetDesktopsRequest): Promise<ResetDesktopsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.resetDesktopsWithOptions(request, runtime);
  }

  /**
   * Resets the mount target of a File Storage NAS (NAS) file system.
   * 
   * @remarks
   * When you create a NAS file system, a mount target is automatically generated. By default, you do not need to modify the mount target of the NAS file system. If the mount target is disabled, you need to reset the mount target of the NAS file system.
   * 
   * @param request - ResetNASDefaultMountTargetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ResetNASDefaultMountTargetResponse
   */
  async resetNASDefaultMountTargetWithOptions(request: ResetNASDefaultMountTargetRequest, runtime: $dara.RuntimeOptions): Promise<ResetNASDefaultMountTargetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fileSystemId)) {
      query["FileSystemId"] = request.fileSystemId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ResetNASDefaultMountTarget",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ResetNASDefaultMountTargetResponse>(await this.callApi(params, req, runtime), new ResetNASDefaultMountTargetResponse({}));
    } else {
      return $dara.cast<ResetNASDefaultMountTargetResponse>(await this.execute(params, req, runtime), new ResetNASDefaultMountTargetResponse({}));
    }

  }

  /**
   * Resets the mount target of a File Storage NAS (NAS) file system.
   * 
   * @remarks
   * When you create a NAS file system, a mount target is automatically generated. By default, you do not need to modify the mount target of the NAS file system. If the mount target is disabled, you need to reset the mount target of the NAS file system.
   * 
   * @param request - ResetNASDefaultMountTargetRequest
   * @returns ResetNASDefaultMountTargetResponse
   */
  async resetNASDefaultMountTarget(request: ResetNASDefaultMountTargetRequest): Promise<ResetNASDefaultMountTargetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.resetNASDefaultMountTargetWithOptions(request, runtime);
  }

  /**
   * Restores the data of a disk from a snapshot.
   * 
   * @remarks
   * Before you call this operation, make sure that the following operations are performed:
   * *   The data that you want to retain is backed up.
   *     > The disk restoration operation is irreversible. After you call this operation, the disk is restored to the status at the point in time when the snapshot was created. Data that is generated between the snapshot creation time and the current time is lost. Before you restore the disk based on the snapshot, make sure that you back up data.
   * *   The cloud computer to which the disk belongs is stopped.
   * 
   * @param request - ResetSnapshotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ResetSnapshotResponse
   */
  async resetSnapshotWithOptions(request: ResetSnapshotRequest, runtime: $dara.RuntimeOptions): Promise<ResetSnapshotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.snapshotId)) {
      query["SnapshotId"] = request.snapshotId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ResetSnapshot",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<ResetSnapshotResponse>(await this.callApi(params, req, runtime), new ResetSnapshotResponse({}));
    } else {
      return $dara.cast<ResetSnapshotResponse>(await this.execute(params, req, runtime), new ResetSnapshotResponse({}));
    }

  }

  /**
   * Restores the data of a disk from a snapshot.
   * 
   * @remarks
   * Before you call this operation, make sure that the following operations are performed:
   * *   The data that you want to retain is backed up.
   *     > The disk restoration operation is irreversible. After you call this operation, the disk is restored to the status at the point in time when the snapshot was created. Data that is generated between the snapshot creation time and the current time is lost. Before you restore the disk based on the snapshot, make sure that you back up data.
   * *   The cloud computer to which the disk belongs is stopped.
   * 
   * @param request - ResetSnapshotRequest
   * @returns ResetSnapshotResponse
   */
  async resetSnapshot(request: ResetSnapshotRequest): Promise<ResetSnapshotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.resetSnapshotWithOptions(request, runtime);
  }

  /**
   * Revokes the coordinate permissions.
   * 
   * @param request - RevokeCoordinatePrivilegeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RevokeCoordinatePrivilegeResponse
   */
  async revokeCoordinatePrivilegeWithOptions(request: RevokeCoordinatePrivilegeRequest, runtime: $dara.RuntimeOptions): Promise<RevokeCoordinatePrivilegeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.coId)) {
      query["CoId"] = request.coId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.userType)) {
      query["UserType"] = request.userType;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RevokeCoordinatePrivilege",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RevokeCoordinatePrivilegeResponse>(await this.callApi(params, req, runtime), new RevokeCoordinatePrivilegeResponse({}));
    } else {
      return $dara.cast<RevokeCoordinatePrivilegeResponse>(await this.execute(params, req, runtime), new RevokeCoordinatePrivilegeResponse({}));
    }

  }

  /**
   * Revokes the coordinate permissions.
   * 
   * @param request - RevokeCoordinatePrivilegeRequest
   * @returns RevokeCoordinatePrivilegeResponse
   */
  async revokeCoordinatePrivilege(request: RevokeCoordinatePrivilegeRequest): Promise<RevokeCoordinatePrivilegeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.revokeCoordinatePrivilegeWithOptions(request, runtime);
  }

  /**
   * Runs a PowerShell or batch (.bat) script on Windows cloud desktops.
   * 
   * @remarks
   * You can use the RunCommand operation to run scripts only on Windows cloud desktops.
   * 
   * @param request - RunCommandRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RunCommandResponse
   */
  async runCommandWithOptions(request: RunCommandRequest, runtime: $dara.RuntimeOptions): Promise<RunCommandResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.commandContent)) {
      query["CommandContent"] = request.commandContent;
    }

    if (!$dara.isNull(request.contentEncoding)) {
      query["ContentEncoding"] = request.contentEncoding;
    }

    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.endUserId)) {
      query["EndUserId"] = request.endUserId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.timeout)) {
      query["Timeout"] = request.timeout;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RunCommand",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<RunCommandResponse>(await this.callApi(params, req, runtime), new RunCommandResponse({}));
    } else {
      return $dara.cast<RunCommandResponse>(await this.execute(params, req, runtime), new RunCommandResponse({}));
    }

  }

  /**
   * Runs a PowerShell or batch (.bat) script on Windows cloud desktops.
   * 
   * @remarks
   * You can use the RunCommand operation to run scripts only on Windows cloud desktops.
   * 
   * @param request - RunCommandRequest
   * @returns RunCommandResponse
   */
  async runCommand(request: RunCommandRequest): Promise<RunCommandResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.runCommandWithOptions(request, runtime);
  }

  /**
   * Obtains the verification code that is required when you bind an advanced office network to a Cloud Enterprise Network (CEN) instance that belongs to another Alibaba Cloud account.
   * 
   * @remarks
   * You must call this operation to obtain the verification code that is required when you bind an advanced office network to a CEN instance that belongs to another Alibaba Cloud account. After you call this operation, the system sends a verification code to the email address associated with the Alibaba Cloud account to which the CEN instance belongs.
   * 
   * @param request - SendVerifyCodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SendVerifyCodeResponse
   */
  async sendVerifyCodeWithOptions(request: SendVerifyCodeRequest, runtime: $dara.RuntimeOptions): Promise<SendVerifyCodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.extraInfo)) {
      query["ExtraInfo"] = request.extraInfo;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.verifyCodeAction)) {
      query["VerifyCodeAction"] = request.verifyCodeAction;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SendVerifyCode",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SendVerifyCodeResponse>(await this.callApi(params, req, runtime), new SendVerifyCodeResponse({}));
    } else {
      return $dara.cast<SendVerifyCodeResponse>(await this.execute(params, req, runtime), new SendVerifyCodeResponse({}));
    }

  }

  /**
   * Obtains the verification code that is required when you bind an advanced office network to a Cloud Enterprise Network (CEN) instance that belongs to another Alibaba Cloud account.
   * 
   * @remarks
   * You must call this operation to obtain the verification code that is required when you bind an advanced office network to a CEN instance that belongs to another Alibaba Cloud account. After you call this operation, the system sends a verification code to the email address associated with the Alibaba Cloud account to which the CEN instance belongs.
   * 
   * @param request - SendVerifyCodeRequest
   * @returns SendVerifyCodeResponse
   */
  async sendVerifyCode(request: SendVerifyCodeRequest): Promise<SendVerifyCodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.sendVerifyCodeWithOptions(request, runtime);
  }

  /**
   * Configures an auto scaling policy for a multi-session cloud computer. Elastic Desktop Service allows multiple end users to share a cloud computer in a multi-session cloud computer pool. This helps save costs.
   * 
   * @param request - SetDesktopGroupScaleTimerRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetDesktopGroupScaleTimerResponse
   */
  async setDesktopGroupScaleTimerWithOptions(request: SetDesktopGroupScaleTimerRequest, runtime: $dara.RuntimeOptions): Promise<SetDesktopGroupScaleTimerResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.scaleTimerInfos)) {
      query["ScaleTimerInfos"] = request.scaleTimerInfos;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetDesktopGroupScaleTimer",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SetDesktopGroupScaleTimerResponse>(await this.callApi(params, req, runtime), new SetDesktopGroupScaleTimerResponse({}));
    } else {
      return $dara.cast<SetDesktopGroupScaleTimerResponse>(await this.execute(params, req, runtime), new SetDesktopGroupScaleTimerResponse({}));
    }

  }

  /**
   * Configures an auto scaling policy for a multi-session cloud computer. Elastic Desktop Service allows multiple end users to share a cloud computer in a multi-session cloud computer pool. This helps save costs.
   * 
   * @param request - SetDesktopGroupScaleTimerRequest
   * @returns SetDesktopGroupScaleTimerResponse
   */
  async setDesktopGroupScaleTimer(request: SetDesktopGroupScaleTimerRequest): Promise<SetDesktopGroupScaleTimerResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setDesktopGroupScaleTimerWithOptions(request, runtime);
  }

  /**
   * Configures a scheduled task for a cloud computer pool, such as starting, stopping, restarting or resting cloud computers in the pool.
   * 
   * @param request - SetDesktopGroupTimerRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetDesktopGroupTimerResponse
   */
  async setDesktopGroupTimerWithOptions(request: SetDesktopGroupTimerRequest, runtime: $dara.RuntimeOptions): Promise<SetDesktopGroupTimerResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cronExpression)) {
      query["CronExpression"] = request.cronExpression;
    }

    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.force)) {
      query["Force"] = request.force;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resetType)) {
      query["ResetType"] = request.resetType;
    }

    if (!$dara.isNull(request.timerType)) {
      query["TimerType"] = request.timerType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetDesktopGroupTimer",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SetDesktopGroupTimerResponse>(await this.callApi(params, req, runtime), new SetDesktopGroupTimerResponse({}));
    } else {
      return $dara.cast<SetDesktopGroupTimerResponse>(await this.execute(params, req, runtime), new SetDesktopGroupTimerResponse({}));
    }

  }

  /**
   * Configures a scheduled task for a cloud computer pool, such as starting, stopping, restarting or resting cloud computers in the pool.
   * 
   * @param request - SetDesktopGroupTimerRequest
   * @returns SetDesktopGroupTimerResponse
   */
  async setDesktopGroupTimer(request: SetDesktopGroupTimerRequest): Promise<SetDesktopGroupTimerResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setDesktopGroupTimerWithOptions(request, runtime);
  }

  /**
   * Sets the status of a scheduled task for a cloud computer pool. For example, you enable or disable the scheduled task.
   * 
   * @param request - SetDesktopGroupTimerStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetDesktopGroupTimerStatusResponse
   */
  async setDesktopGroupTimerStatusWithOptions(request: SetDesktopGroupTimerStatusRequest, runtime: $dara.RuntimeOptions): Promise<SetDesktopGroupTimerStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.timerType)) {
      query["TimerType"] = request.timerType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetDesktopGroupTimerStatus",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SetDesktopGroupTimerStatusResponse>(await this.callApi(params, req, runtime), new SetDesktopGroupTimerStatusResponse({}));
    } else {
      return $dara.cast<SetDesktopGroupTimerStatusResponse>(await this.execute(params, req, runtime), new SetDesktopGroupTimerStatusResponse({}));
    }

  }

  /**
   * Sets the status of a scheduled task for a cloud computer pool. For example, you enable or disable the scheduled task.
   * 
   * @param request - SetDesktopGroupTimerStatusRequest
   * @returns SetDesktopGroupTimerStatusResponse
   */
  async setDesktopGroupTimerStatus(request: SetDesktopGroupTimerStatusRequest): Promise<SetDesktopGroupTimerStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setDesktopGroupTimerStatusWithOptions(request, runtime);
  }

  /**
   * 设置桌面维护模式
   * 
   * @param request - SetDesktopMaintenanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetDesktopMaintenanceResponse
   */
  async setDesktopMaintenanceWithOptions(request: SetDesktopMaintenanceRequest, runtime: $dara.RuntimeOptions): Promise<SetDesktopMaintenanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopIds)) {
      query["DesktopIds"] = request.desktopIds;
    }

    if (!$dara.isNull(request.mode)) {
      query["Mode"] = request.mode;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetDesktopMaintenance",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SetDesktopMaintenanceResponse>(await this.callApi(params, req, runtime), new SetDesktopMaintenanceResponse({}));
    } else {
      return $dara.cast<SetDesktopMaintenanceResponse>(await this.execute(params, req, runtime), new SetDesktopMaintenanceResponse({}));
    }

  }

  /**
   * 设置桌面维护模式
   * 
   * @param request - SetDesktopMaintenanceRequest
   * @returns SetDesktopMaintenanceResponse
   */
  async setDesktopMaintenance(request: SetDesktopMaintenanceRequest): Promise<SetDesktopMaintenanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setDesktopMaintenanceWithOptions(request, runtime);
  }

  /**
   * Configures the single sign-on (SSO) status of an Active Directory (AD) directory.
   * 
   * @remarks
   * This operation is supported only for AD directories, not for RAM directories.
   * 
   * @param request - SetDirectorySsoStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetDirectorySsoStatusResponse
   */
  async setDirectorySsoStatusWithOptions(request: SetDirectorySsoStatusRequest, runtime: $dara.RuntimeOptions): Promise<SetDirectorySsoStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.enableSso)) {
      query["EnableSso"] = request.enableSso;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetDirectorySsoStatus",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SetDirectorySsoStatusResponse>(await this.callApi(params, req, runtime), new SetDirectorySsoStatusResponse({}));
    } else {
      return $dara.cast<SetDirectorySsoStatusResponse>(await this.execute(params, req, runtime), new SetDirectorySsoStatusResponse({}));
    }

  }

  /**
   * Configures the single sign-on (SSO) status of an Active Directory (AD) directory.
   * 
   * @remarks
   * This operation is supported only for AD directories, not for RAM directories.
   * 
   * @param request - SetDirectorySsoStatusRequest
   * @returns SetDirectorySsoStatusResponse
   */
  async setDirectorySsoStatus(request: SetDirectorySsoStatusRequest): Promise<SetDirectorySsoStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setDirectorySsoStatusWithOptions(request, runtime);
  }

  /**
   * Uploads the metadata of a Security Assertion Markup Language (SAML) 2.0-based identity provider (IdP).
   * 
   * @remarks
   * You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
   * 
   * @param request - SetIdpMetadataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetIdpMetadataResponse
   */
  async setIdpMetadataWithOptions(request: SetIdpMetadataRequest, runtime: $dara.RuntimeOptions): Promise<SetIdpMetadataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.directoryId)) {
      query["DirectoryId"] = request.directoryId;
    }

    if (!$dara.isNull(request.idpMetadata)) {
      query["IdpMetadata"] = request.idpMetadata;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetIdpMetadata",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SetIdpMetadataResponse>(await this.callApi(params, req, runtime), new SetIdpMetadataResponse({}));
    } else {
      return $dara.cast<SetIdpMetadataResponse>(await this.execute(params, req, runtime), new SetIdpMetadataResponse({}));
    }

  }

  /**
   * Uploads the metadata of a Security Assertion Markup Language (SAML) 2.0-based identity provider (IdP).
   * 
   * @remarks
   * You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
   * 
   * @param request - SetIdpMetadataRequest
   * @returns SetIdpMetadataResponse
   */
  async setIdpMetadata(request: SetIdpMetadataRequest): Promise<SetIdpMetadataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setIdpMetadataWithOptions(request, runtime);
  }

  /**
   * Enables or disables single sign-on (SSO) for a workspace.
   * 
   * @param request - SetOfficeSiteSsoStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetOfficeSiteSsoStatusResponse
   */
  async setOfficeSiteSsoStatusWithOptions(request: SetOfficeSiteSsoStatusRequest, runtime: $dara.RuntimeOptions): Promise<SetOfficeSiteSsoStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.enableSso)) {
      query["EnableSso"] = request.enableSso;
    }

    if (!$dara.isNull(request.officeSiteId)) {
      query["OfficeSiteId"] = request.officeSiteId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetOfficeSiteSsoStatus",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SetOfficeSiteSsoStatusResponse>(await this.callApi(params, req, runtime), new SetOfficeSiteSsoStatusResponse({}));
    } else {
      return $dara.cast<SetOfficeSiteSsoStatusResponse>(await this.execute(params, req, runtime), new SetOfficeSiteSsoStatusResponse({}));
    }

  }

  /**
   * Enables or disables single sign-on (SSO) for a workspace.
   * 
   * @param request - SetOfficeSiteSsoStatusRequest
   * @returns SetOfficeSiteSsoStatusResponse
   */
  async setOfficeSiteSsoStatus(request: SetOfficeSiteSsoStatusRequest): Promise<SetOfficeSiteSsoStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setOfficeSiteSsoStatusWithOptions(request, runtime);
  }

  /**
   * Configures directories in the blacklist and whitelist based on the user profile management (UPM) feature.
   * 
   * @param tmpReq - SetUserProfilePathRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetUserProfilePathRulesResponse
   */
  async setUserProfilePathRulesWithOptions(tmpReq: SetUserProfilePathRulesRequest, runtime: $dara.RuntimeOptions): Promise<SetUserProfilePathRulesResponse> {
    tmpReq.validate();
    let request = new SetUserProfilePathRulesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.userProfilePathRule)) {
      request.userProfilePathRuleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userProfilePathRule, "UserProfilePathRule", "json");
    }

    let query = { };
    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.userProfilePathRuleShrink)) {
      query["UserProfilePathRule"] = request.userProfilePathRuleShrink;
    }

    if (!$dara.isNull(request.userProfileRuleType)) {
      query["UserProfileRuleType"] = request.userProfileRuleType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetUserProfilePathRules",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<SetUserProfilePathRulesResponse>(await this.callApi(params, req, runtime), new SetUserProfilePathRulesResponse({}));
    } else {
      return $dara.cast<SetUserProfilePathRulesResponse>(await this.execute(params, req, runtime), new SetUserProfilePathRulesResponse({}));
    }

  }

  /**
   * Configures directories in the blacklist and whitelist based on the user profile management (UPM) feature.
   * 
   * @param request - SetUserProfilePathRulesRequest
   * @returns SetUserProfilePathRulesResponse
   */
  async setUserProfilePathRules(request: SetUserProfilePathRulesRequest): Promise<SetUserProfilePathRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setUserProfilePathRulesWithOptions(request, runtime);
  }

  /**
   * Starts stopped cloud computers. After the API operation is successfully called, the cloud computers enter the Running state.
   * 
   * @remarks
   * The cloud computers that you want to start must be in the Stopped state.
   * 
   * @param request - StartDesktopsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartDesktopsResponse
   */
  async startDesktopsWithOptions(request: StartDesktopsRequest, runtime: $dara.RuntimeOptions): Promise<StartDesktopsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartDesktops",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<StartDesktopsResponse>(await this.callApi(params, req, runtime), new StartDesktopsResponse({}));
    } else {
      return $dara.cast<StartDesktopsResponse>(await this.execute(params, req, runtime), new StartDesktopsResponse({}));
    }

  }

  /**
   * Starts stopped cloud computers. After the API operation is successfully called, the cloud computers enter the Running state.
   * 
   * @remarks
   * The cloud computers that you want to start must be in the Stopped state.
   * 
   * @param request - StartDesktopsRequest
   * @returns StartDesktopsResponse
   */
  async startDesktops(request: StartDesktopsRequest): Promise<StartDesktopsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startDesktopsWithOptions(request, runtime);
  }

  /**
   * Stop cloud computers that are in the Running state. After the operation is successfully called, the cloud computers enter the Stopped state.
   * 
   * @remarks
   * The cloud computers that you want to stop must be in the Running state.
   * 
   * @param request - StopDesktopsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopDesktopsResponse
   */
  async stopDesktopsWithOptions(request: StopDesktopsRequest, runtime: $dara.RuntimeOptions): Promise<StopDesktopsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.stoppedMode)) {
      query["StoppedMode"] = request.stoppedMode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopDesktops",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<StopDesktopsResponse>(await this.callApi(params, req, runtime), new StopDesktopsResponse({}));
    } else {
      return $dara.cast<StopDesktopsResponse>(await this.execute(params, req, runtime), new StopDesktopsResponse({}));
    }

  }

  /**
   * Stop cloud computers that are in the Running state. After the operation is successfully called, the cloud computers enter the Stopped state.
   * 
   * @remarks
   * The cloud computers that you want to stop must be in the Running state.
   * 
   * @param request - StopDesktopsRequest
   * @returns StopDesktopsResponse
   */
  async stopDesktops(request: StopDesktopsRequest): Promise<StopDesktopsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopDesktopsWithOptions(request, runtime);
  }

  /**
   * Stops a Cloud Assistant command that is running on one or more cloud desktops.
   * 
   * @remarks
   * When you stop a one-time execution of a command, the command continues to run on the cloud desktops where it has started to run, and will not run on the cloud desktops where it has not started to run.
   * 
   * @param request - StopInvocationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopInvocationResponse
   */
  async stopInvocationWithOptions(request: StopInvocationRequest, runtime: $dara.RuntimeOptions): Promise<StopInvocationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.invokeId)) {
      query["InvokeId"] = request.invokeId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopInvocation",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<StopInvocationResponse>(await this.callApi(params, req, runtime), new StopInvocationResponse({}));
    } else {
      return $dara.cast<StopInvocationResponse>(await this.execute(params, req, runtime), new StopInvocationResponse({}));
    }

  }

  /**
   * Stops a Cloud Assistant command that is running on one or more cloud desktops.
   * 
   * @remarks
   * When you stop a one-time execution of a command, the command continues to run on the cloud desktops where it has started to run, and will not run on the cloud desktops where it has not started to run.
   * 
   * @param request - StopInvocationRequest
   * @returns StopInvocationResponse
   */
  async stopInvocation(request: StopInvocationRequest): Promise<StopInvocationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopInvocationWithOptions(request, runtime);
  }

  /**
   * Adds tags to cloud computers. This allows you to filter and manage cloud computers by tag.
   * 
   * @remarks
   * If TagKey is specified, the new TagValue value overrides the original TagValue value.
   * 
   * @param request - TagResourcesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TagResourcesResponse
   */
  async tagResourcesWithOptions(request: TagResourcesRequest, runtime: $dara.RuntimeOptions): Promise<TagResourcesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "TagResources",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<TagResourcesResponse>(await this.callApi(params, req, runtime), new TagResourcesResponse({}));
    } else {
      return $dara.cast<TagResourcesResponse>(await this.execute(params, req, runtime), new TagResourcesResponse({}));
    }

  }

  /**
   * Adds tags to cloud computers. This allows you to filter and manage cloud computers by tag.
   * 
   * @remarks
   * If TagKey is specified, the new TagValue value overrides the original TagValue value.
   * 
   * @param request - TagResourcesRequest
   * @returns TagResourcesResponse
   */
  async tagResources(request: TagResourcesRequest): Promise<TagResourcesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.tagResourcesWithOptions(request, runtime);
  }

  /**
   * 解绑配置组
   * 
   * @param request - UnbindConfigGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UnbindConfigGroupResponse
   */
  async unbindConfigGroupWithOptions(request: UnbindConfigGroupRequest, runtime: $dara.RuntimeOptions): Promise<UnbindConfigGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceInfos)) {
      query["ResourceInfos"] = request.resourceInfos;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UnbindConfigGroup",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UnbindConfigGroupResponse>(await this.callApi(params, req, runtime), new UnbindConfigGroupResponse({}));
    } else {
      return $dara.cast<UnbindConfigGroupResponse>(await this.execute(params, req, runtime), new UnbindConfigGroupResponse({}));
    }

  }

  /**
   * 解绑配置组
   * 
   * @param request - UnbindConfigGroupRequest
   * @returns UnbindConfigGroupResponse
   */
  async unbindConfigGroup(request: UnbindConfigGroupRequest): Promise<UnbindConfigGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.unbindConfigGroupWithOptions(request, runtime);
  }

  /**
   * 解绑用户桌面
   * 
   * @param request - UnbindUserDesktopRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UnbindUserDesktopResponse
   */
  async unbindUserDesktopWithOptions(request: UnbindUserDesktopRequest, runtime: $dara.RuntimeOptions): Promise<UnbindUserDesktopResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopAgentIds)) {
      query["DesktopAgentIds"] = request.desktopAgentIds;
    }

    if (!$dara.isNull(request.desktopGroupId)) {
      query["DesktopGroupId"] = request.desktopGroupId;
    }

    if (!$dara.isNull(request.desktopIds)) {
      query["DesktopIds"] = request.desktopIds;
    }

    if (!$dara.isNull(request.force)) {
      query["Force"] = request.force;
    }

    if (!$dara.isNull(request.reason)) {
      query["Reason"] = request.reason;
    }

    if (!$dara.isNull(request.userDesktopIds)) {
      query["UserDesktopIds"] = request.userDesktopIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UnbindUserDesktop",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UnbindUserDesktopResponse>(await this.callApi(params, req, runtime), new UnbindUserDesktopResponse({}));
    } else {
      return $dara.cast<UnbindUserDesktopResponse>(await this.execute(params, req, runtime), new UnbindUserDesktopResponse({}));
    }

  }

  /**
   * 解绑用户桌面
   * 
   * @param request - UnbindUserDesktopRequest
   * @returns UnbindUserDesktopResponse
   */
  async unbindUserDesktop(request: UnbindUserDesktopRequest): Promise<UnbindUserDesktopResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.unbindUserDesktopWithOptions(request, runtime);
  }

  /**
   * Unlocks a virtual multi-factor authentication (MFA) device that is in the LOCKED state.
   * 
   * @param request - UnlockVirtualMFADeviceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UnlockVirtualMFADeviceResponse
   */
  async unlockVirtualMFADeviceWithOptions(request: UnlockVirtualMFADeviceRequest, runtime: $dara.RuntimeOptions): Promise<UnlockVirtualMFADeviceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.serialNumber)) {
      query["SerialNumber"] = request.serialNumber;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UnlockVirtualMFADevice",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UnlockVirtualMFADeviceResponse>(await this.callApi(params, req, runtime), new UnlockVirtualMFADeviceResponse({}));
    } else {
      return $dara.cast<UnlockVirtualMFADeviceResponse>(await this.execute(params, req, runtime), new UnlockVirtualMFADeviceResponse({}));
    }

  }

  /**
   * Unlocks a virtual multi-factor authentication (MFA) device that is in the LOCKED state.
   * 
   * @param request - UnlockVirtualMFADeviceRequest
   * @returns UnlockVirtualMFADeviceResponse
   */
  async unlockVirtualMFADevice(request: UnlockVirtualMFADeviceRequest): Promise<UnlockVirtualMFADeviceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.unlockVirtualMFADeviceWithOptions(request, runtime);
  }

  /**
   * Removes tags from cloud computers. After you remove a tag, if the tag is not added to a cloud computer, the tag is automatically deleted.
   * 
   * @param request - UntagResourcesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UntagResourcesResponse
   */
  async untagResourcesWithOptions(request: UntagResourcesRequest, runtime: $dara.RuntimeOptions): Promise<UntagResourcesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.all)) {
      query["All"] = request.all;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.tagKey)) {
      query["TagKey"] = request.tagKey;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UntagResources",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UntagResourcesResponse>(await this.callApi(params, req, runtime), new UntagResourcesResponse({}));
    } else {
      return $dara.cast<UntagResourcesResponse>(await this.execute(params, req, runtime), new UntagResourcesResponse({}));
    }

  }

  /**
   * Removes tags from cloud computers. After you remove a tag, if the tag is not added to a cloud computer, the tag is automatically deleted.
   * 
   * @param request - UntagResourcesRequest
   * @returns UntagResourcesResponse
   */
  async untagResources(request: UntagResourcesRequest): Promise<UntagResourcesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.untagResourcesWithOptions(request, runtime);
  }

  /**
   * Enables or disables the auto-push feature for an image update task.
   * 
   * @remarks
   * You can call this operation to manage each image update task. This operation is valid only when the auto-update switch in the image update module for global image updates is turned off. If the auto-update switch is turned on, the switches for each image update task are always turned on. If you want to turn on or off the auto-update switch, go to the Elastic Desktop Service console and choose **Operations > Image Updates** in the left-side navigation pane.
   * 
   * @param request - UpdateFotaTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateFotaTaskResponse
   */
  async updateFotaTaskWithOptions(request: UpdateFotaTaskRequest, runtime: $dara.RuntimeOptions): Promise<UpdateFotaTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.taskUid)) {
      query["TaskUid"] = request.taskUid;
    }

    if (!$dara.isNull(request.userStatus)) {
      query["UserStatus"] = request.userStatus;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateFotaTask",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UpdateFotaTaskResponse>(await this.callApi(params, req, runtime), new UpdateFotaTaskResponse({}));
    } else {
      return $dara.cast<UpdateFotaTaskResponse>(await this.execute(params, req, runtime), new UpdateFotaTaskResponse({}));
    }

  }

  /**
   * Enables or disables the auto-push feature for an image update task.
   * 
   * @remarks
   * You can call this operation to manage each image update task. This operation is valid only when the auto-update switch in the image update module for global image updates is turned off. If the auto-update switch is turned on, the switches for each image update task are always turned on. If you want to turn on or off the auto-update switch, go to the Elastic Desktop Service console and choose **Operations > Image Updates** in the left-side navigation pane.
   * 
   * @param request - UpdateFotaTaskRequest
   * @returns UpdateFotaTaskResponse
   */
  async updateFotaTask(request: UpdateFotaTaskRequest): Promise<UpdateFotaTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateFotaTaskWithOptions(request, runtime);
  }

  /**
   * Uploads your custom Windows image.
   * 
   * @remarks
   * >  You can upload only Windows images.
   * 
   * @param request - UploadImageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UploadImageResponse
   */
  async uploadImageWithOptions(request: UploadImageRequest, runtime: $dara.RuntimeOptions): Promise<UploadImageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dataDiskSize)) {
      query["DataDiskSize"] = request.dataDiskSize;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.enableSecurityCheck)) {
      query["EnableSecurityCheck"] = request.enableSecurityCheck;
    }

    if (!$dara.isNull(request.gpuCategory)) {
      query["GpuCategory"] = request.gpuCategory;
    }

    if (!$dara.isNull(request.gpuDriverType)) {
      query["GpuDriverType"] = request.gpuDriverType;
    }

    if (!$dara.isNull(request.imageName)) {
      query["ImageName"] = request.imageName;
    }

    if (!$dara.isNull(request.licenseType)) {
      query["LicenseType"] = request.licenseType;
    }

    if (!$dara.isNull(request.osType)) {
      query["OsType"] = request.osType;
    }

    if (!$dara.isNull(request.ossObjectPath)) {
      query["OssObjectPath"] = request.ossObjectPath;
    }

    if (!$dara.isNull(request.protocolType)) {
      query["ProtocolType"] = request.protocolType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.systemDiskSize)) {
      query["SystemDiskSize"] = request.systemDiskSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UploadImage",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<UploadImageResponse>(await this.callApi(params, req, runtime), new UploadImageResponse({}));
    } else {
      return $dara.cast<UploadImageResponse>(await this.execute(params, req, runtime), new UploadImageResponse({}));
    }

  }

  /**
   * Uploads your custom Windows image.
   * 
   * @remarks
   * >  You can upload only Windows images.
   * 
   * @param request - UploadImageRequest
   * @returns UploadImageResponse
   */
  async uploadImage(request: UploadImageRequest): Promise<UploadImageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.uploadImageWithOptions(request, runtime);
  }

  /**
   * Verifies the ID of a Cloud Enterprise Network (CEN) instance and the ID of the Alibaba Cloud account to which the instance belongs and checks whether a CIDR block conflict exists between the routes of the instance and the IPv4 CIDR blocks of the associated office network.
   * 
   * @param request - VerifyCenRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns VerifyCenResponse
   */
  async verifyCenWithOptions(request: VerifyCenRequest, runtime: $dara.RuntimeOptions): Promise<VerifyCenResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cenId)) {
      query["CenId"] = request.cenId;
    }

    if (!$dara.isNull(request.cenOwnerId)) {
      query["CenOwnerId"] = request.cenOwnerId;
    }

    if (!$dara.isNull(request.cidrBlock)) {
      query["CidrBlock"] = request.cidrBlock;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.verifyCode)) {
      query["VerifyCode"] = request.verifyCode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "VerifyCen",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<VerifyCenResponse>(await this.callApi(params, req, runtime), new VerifyCenResponse({}));
    } else {
      return $dara.cast<VerifyCenResponse>(await this.execute(params, req, runtime), new VerifyCenResponse({}));
    }

  }

  /**
   * Verifies the ID of a Cloud Enterprise Network (CEN) instance and the ID of the Alibaba Cloud account to which the instance belongs and checks whether a CIDR block conflict exists between the routes of the instance and the IPv4 CIDR blocks of the associated office network.
   * 
   * @param request - VerifyCenRequest
   * @returns VerifyCenResponse
   */
  async verifyCen(request: VerifyCenRequest): Promise<VerifyCenResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.verifyCenWithOptions(request, runtime);
  }

  /**
   * @param request - WakeupDesktopsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns WakeupDesktopsResponse
   */
  async wakeupDesktopsWithOptions(request: WakeupDesktopsRequest, runtime: $dara.RuntimeOptions): Promise<WakeupDesktopsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.desktopId)) {
      query["DesktopId"] = request.desktopId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "WakeupDesktops",
      version: "2020-09-30",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    if ($dara.isNull(this._signatureVersion) || this._signatureVersion != "v4") {
      return $dara.cast<WakeupDesktopsResponse>(await this.callApi(params, req, runtime), new WakeupDesktopsResponse({}));
    } else {
      return $dara.cast<WakeupDesktopsResponse>(await this.execute(params, req, runtime), new WakeupDesktopsResponse({}));
    }

  }

  /**
   * @param request - WakeupDesktopsRequest
   * @returns WakeupDesktopsResponse
   */
  async wakeupDesktops(request: WakeupDesktopsRequest): Promise<WakeupDesktopsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.wakeupDesktopsWithOptions(request, runtime);
  }

}
