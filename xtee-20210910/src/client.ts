// This file is auto-generated, don't edit it
/**
 *
 */
import Util, * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import OpenApiUtil from '@alicloud/openapi-util';
import EndpointUtil from '@alicloud/endpoint-util';
import * as $tea from '@alicloud/tea-typescript';

export class BindVariableRequest extends $tea.Model {
  lang?: string;
  apiRegionId?: string;
  apiType?: string;
  createType?: string;
  defineId?: string;
  defineIds?: string;
  description?: string;
  eventCode?: string;
  exceptionValue?: string;
  id?: number;
  outputField?: string;
  outputType?: string;
  params?: string;
  paramsList?: string;
  regId?: string;
  sourceType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      apiRegionId: 'apiRegionId',
      apiType: 'apiType',
      createType: 'createType',
      defineId: 'defineId',
      defineIds: 'defineIds',
      description: 'description',
      eventCode: 'eventCode',
      exceptionValue: 'exceptionValue',
      id: 'id',
      outputField: 'outputField',
      outputType: 'outputType',
      params: 'params',
      paramsList: 'paramsList',
      regId: 'regId',
      sourceType: 'sourceType',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      apiRegionId: 'string',
      apiType: 'string',
      createType: 'string',
      defineId: 'string',
      defineIds: 'string',
      description: 'string',
      eventCode: 'string',
      exceptionValue: 'string',
      id: 'number',
      outputField: 'string',
      outputType: 'string',
      params: 'string',
      paramsList: 'string',
      regId: 'string',
      sourceType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BindVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BindVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: BindVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: BindVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckCustVariableLimitRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckCustVariableLimitResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckCustVariableLimitResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CheckCustVariableLimitResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CheckCustVariableLimitResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckExpressionVariableLimitRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckExpressionVariableLimitResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckExpressionVariableLimitResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CheckExpressionVariableLimitResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CheckExpressionVariableLimitResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckFieldLimitRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  source?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      source: 'source',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      source: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckFieldLimitResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckFieldLimitResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CheckFieldLimitResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CheckFieldLimitResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckPermissionRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckPermissionResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckPermissionResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CheckPermissionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CheckPermissionResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckUsageVariableRequest extends $tea.Model {
  lang?: string;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckUsageVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckUsageVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CheckUsageVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CheckUsageVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ClearNameListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  variableId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      variableId: 'variableId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      variableId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ClearNameListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ClearNameListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ClearNameListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ClearNameListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAnalysisConditionFavoriteRequest extends $tea.Model {
  lang?: string;
  condition?: string;
  eventBeginTime?: number;
  eventCodes?: string;
  eventEndTime?: number;
  fieldName?: string;
  fieldValue?: string;
  name?: string;
  regId?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      condition: 'condition',
      eventBeginTime: 'eventBeginTime',
      eventCodes: 'eventCodes',
      eventEndTime: 'eventEndTime',
      fieldName: 'fieldName',
      fieldValue: 'fieldValue',
      name: 'name',
      regId: 'regId',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      condition: 'string',
      eventBeginTime: 'number',
      eventCodes: 'string',
      eventEndTime: 'number',
      fieldName: 'string',
      fieldValue: 'string',
      name: 'string',
      regId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAnalysisConditionFavoriteResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAnalysisConditionFavoriteResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateAnalysisConditionFavoriteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateAnalysisConditionFavoriteResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAnalysisExportTaskRequest extends $tea.Model {
  lang?: string;
  columns?: string;
  conditions?: string;
  eventBeginTime?: number;
  eventCodes?: string;
  eventEndTime?: number;
  fieldName?: string;
  fieldValue?: string;
  fileFormat?: string;
  regId?: string;
  scope?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      columns: 'columns',
      conditions: 'conditions',
      eventBeginTime: 'eventBeginTime',
      eventCodes: 'eventCodes',
      eventEndTime: 'eventEndTime',
      fieldName: 'fieldName',
      fieldValue: 'fieldValue',
      fileFormat: 'fileFormat',
      regId: 'regId',
      scope: 'scope',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      columns: 'string',
      conditions: 'string',
      eventBeginTime: 'number',
      eventCodes: 'string',
      eventEndTime: 'number',
      fieldName: 'string',
      fieldValue: 'string',
      fileFormat: 'string',
      regId: 'string',
      scope: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAnalysisExportTaskResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: CreateAnalysisExportTaskResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: CreateAnalysisExportTaskResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAnalysisExportTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateAnalysisExportTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateAnalysisExportTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAppKeyRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAppKeyResponseBody extends $tea.Model {
  requestId?: string;
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAppKeyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateAppKeyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateAppKeyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthorizationUserRequest extends $tea.Model {
  lang?: string;
  bindId?: number;
  createType?: string;
  eventTemplateId?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      bindId: 'bindId',
      createType: 'createType',
      eventTemplateId: 'eventTemplateId',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      bindId: 'number',
      createType: 'string',
      eventTemplateId: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthorizationUserResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthorizationUserResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateAuthorizationUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateAuthorizationUserResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCustVariableRequest extends $tea.Model {
  lang?: string;
  condition?: string;
  createType?: string;
  description?: string;
  eventCodes?: string;
  historyValueType?: string;
  object?: string;
  outputs?: string;
  regId?: string;
  subject?: string;
  timeType?: string;
  title?: string;
  twCount?: number;
  velocityFC?: string;
  velocityTW?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      condition: 'condition',
      createType: 'createType',
      description: 'description',
      eventCodes: 'eventCodes',
      historyValueType: 'historyValueType',
      object: 'object',
      outputs: 'outputs',
      regId: 'regId',
      subject: 'subject',
      timeType: 'timeType',
      title: 'title',
      twCount: 'twCount',
      velocityFC: 'velocityFC',
      velocityTW: 'velocityTW',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      condition: 'string',
      createType: 'string',
      description: 'string',
      eventCodes: 'string',
      historyValueType: 'string',
      object: 'string',
      outputs: 'string',
      regId: 'string',
      subject: 'string',
      timeType: 'string',
      title: 'string',
      twCount: 'number',
      velocityFC: 'string',
      velocityTW: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCustVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCustVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateCustVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateCustVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataSourceRequest extends $tea.Model {
  lang?: string;
  description?: string;
  name?: string;
  ossKey?: string;
  regId?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      description: 'description',
      name: 'name',
      ossKey: 'ossKey',
      regId: 'regId',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      description: 'string',
      name: 'string',
      ossKey: 'string',
      regId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataSourceResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataSourceResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDataSourceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDataSourceResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateEventRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  eventName?: string;
  inputFieldsStr?: string;
  memo?: string;
  regId?: string;
  templateCode?: string;
  templateName?: string;
  templateType?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      eventName: 'eventName',
      inputFieldsStr: 'inputFieldsStr',
      memo: 'memo',
      regId: 'regId',
      templateCode: 'templateCode',
      templateName: 'templateName',
      templateType: 'templateType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      eventName: 'string',
      inputFieldsStr: 'string',
      memo: 'string',
      regId: 'string',
      templateCode: 'string',
      templateName: 'string',
      templateType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateEventResponseBody extends $tea.Model {
  data?: boolean;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      requestId: 'requestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: 'boolean',
      requestId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateEventResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateEventResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateEventResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateExpressionVariableRequest extends $tea.Model {
  lang?: string;
  description?: string;
  eventCode?: string;
  expression?: string;
  expressionTitle?: string;
  expressionVariable?: string;
  outlier?: string;
  outputs?: string;
  regId?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      description: 'description',
      eventCode: 'eventCode',
      expression: 'expression',
      expressionTitle: 'expressionTitle',
      expressionVariable: 'expressionVariable',
      outlier: 'outlier',
      outputs: 'outputs',
      regId: 'regId',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      description: 'string',
      eventCode: 'string',
      expression: 'string',
      expressionTitle: 'string',
      expressionVariable: 'string',
      outlier: 'string',
      outputs: 'string',
      regId: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateExpressionVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateExpressionVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateExpressionVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateExpressionVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateFieldRequest extends $tea.Model {
  lang?: string;
  classify?: string;
  description?: string;
  enumData?: string;
  name?: string;
  regId?: string;
  source?: string;
  title?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      classify: 'classify',
      description: 'description',
      enumData: 'enumData',
      name: 'name',
      regId: 'regId',
      source: 'source',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      classify: 'string',
      description: 'string',
      enumData: 'string',
      name: 'string',
      regId: 'string',
      source: 'string',
      title: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateFieldResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateFieldResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateFieldResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateFieldResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateGroupSignRequest extends $tea.Model {
  lang?: string;
  signList?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      signList: 'SignList',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      signList: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateGroupSignResponseBody extends $tea.Model {
  requestId?: string;
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateGroupSignResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateGroupSignResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateGroupSignResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateMonitorTaskRequest extends $tea.Model {
  lang?: string;
  bizType?: string;
  cycleType?: string;
  endTime?: number;
  filePath?: string;
  listdayStr?: string;
  regId?: string;
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      bizType: 'bizType',
      cycleType: 'cycleType',
      endTime: 'endTime',
      filePath: 'filePath',
      listdayStr: 'listdayStr',
      regId: 'regId',
      startTime: 'startTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      bizType: 'string',
      cycleType: 'string',
      endTime: 'number',
      filePath: 'string',
      listdayStr: 'string',
      regId: 'string',
      startTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateMonitorTaskResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateMonitorTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateMonitorTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateMonitorTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePocRequest extends $tea.Model {
  lang?: string;
  configStr?: string;
  fileName?: string;
  fileType?: string;
  fileUrl?: string;
  regId?: string;
  serviceCode?: string;
  serviceName?: string;
  taskName?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      configStr: 'configStr',
      fileName: 'fileName',
      fileType: 'fileType',
      fileUrl: 'fileUrl',
      regId: 'regId',
      serviceCode: 'serviceCode',
      serviceName: 'serviceName',
      taskName: 'taskName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      configStr: 'string',
      fileName: 'string',
      fileType: 'string',
      fileUrl: 'string',
      regId: 'string',
      serviceCode: 'string',
      serviceName: 'string',
      taskName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePocResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePocResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreatePocResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreatePocResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePocEvRequest extends $tea.Model {
  dateFormat?: string;
  fileName?: string;
  fileType?: string;
  fileUrl?: string;
  lang?: string;
  regId?: string;
  serviceCode?: string;
  serviceName?: string;
  tab?: string;
  taskName?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      dateFormat: 'DateFormat',
      fileName: 'FileName',
      fileType: 'FileType',
      fileUrl: 'FileUrl',
      lang: 'Lang',
      regId: 'RegId',
      serviceCode: 'ServiceCode',
      serviceName: 'ServiceName',
      tab: 'Tab',
      taskName: 'TaskName',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dateFormat: 'string',
      fileName: 'string',
      fileType: 'string',
      fileUrl: 'string',
      lang: 'string',
      regId: 'string',
      serviceCode: 'string',
      serviceName: 'string',
      tab: 'string',
      taskName: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePocEvResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      resultObject: 'ResultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePocEvResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreatePocEvResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreatePocEvResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateQueryVariableRequest extends $tea.Model {
  lang?: string;
  dataSourceCode?: string;
  description?: string;
  eventCode?: string;
  expression?: string;
  expressionTitle?: string;
  expressionVariable?: string;
  outlier?: string;
  outputs?: string;
  regId?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      dataSourceCode: 'dataSourceCode',
      description: 'description',
      eventCode: 'eventCode',
      expression: 'expression',
      expressionTitle: 'expressionTitle',
      expressionVariable: 'expressionVariable',
      outlier: 'outlier',
      outputs: 'outputs',
      regId: 'regId',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      dataSourceCode: 'string',
      description: 'string',
      eventCode: 'string',
      expression: 'string',
      expressionTitle: 'string',
      expressionVariable: 'string',
      outlier: 'string',
      outputs: 'string',
      regId: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateQueryVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateQueryVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateQueryVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateQueryVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRecommendEventRuleRequest extends $tea.Model {
  lang?: string;
  eventCode?: string;
  eventName?: string;
  recommendRuleIdsStr?: string;
  regId?: string;
  taskId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventCode: 'eventCode',
      eventName: 'eventName',
      recommendRuleIdsStr: 'recommendRuleIdsStr',
      regId: 'regId',
      taskId: 'taskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventCode: 'string',
      eventName: 'string',
      recommendRuleIdsStr: 'string',
      regId: 'string',
      taskId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRecommendEventRuleResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRecommendEventRuleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateRecommendEventRuleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateRecommendEventRuleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRecommendTaskRequest extends $tea.Model {
  lang?: string;
  name?: string;
  regId?: string;
  sampleId?: number;
  variablesStr?: string;
  velocitiesStr?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      name: 'name',
      regId: 'regId',
      sampleId: 'sampleId',
      variablesStr: 'variablesStr',
      velocitiesStr: 'velocitiesStr',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      name: 'string',
      regId: 'string',
      sampleId: 'number',
      variablesStr: 'string',
      velocitiesStr: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRecommendTaskResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRecommendTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateRecommendTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateRecommendTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateReplenishTaskRequest extends $tea.Model {
  clientFileName?: string;
  clientPath?: string;
  lang?: string;
  taskId?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      clientFileName: 'ClientFileName',
      clientPath: 'ClientPath',
      lang: 'Lang',
      taskId: 'TaskId',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientFileName: 'string',
      clientPath: 'string',
      lang: 'string',
      taskId: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateReplenishTaskResponseBody extends $tea.Model {
  requestId?: string;
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateReplenishTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateReplenishTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateReplenishTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRuleRequest extends $tea.Model {
  lang?: string;
  consoleRuleId?: number;
  createType?: string;
  eventCode?: string;
  eventName?: string;
  logicExpression?: string;
  memo?: string;
  regId?: string;
  ruleActions?: string;
  ruleExpressions?: string;
  ruleName?: string;
  ruleStatus?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      consoleRuleId: 'consoleRuleId',
      createType: 'createType',
      eventCode: 'eventCode',
      eventName: 'eventName',
      logicExpression: 'logicExpression',
      memo: 'memo',
      regId: 'regId',
      ruleActions: 'ruleActions',
      ruleExpressions: 'ruleExpressions',
      ruleName: 'ruleName',
      ruleStatus: 'ruleStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      consoleRuleId: 'number',
      createType: 'string',
      eventCode: 'string',
      eventName: 'string',
      logicExpression: 'string',
      memo: 'string',
      regId: 'string',
      ruleActions: 'string',
      ruleExpressions: 'string',
      ruleName: 'string',
      ruleStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRuleResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateRuleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateRuleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateRuleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSampleRequest extends $tea.Model {
  lang?: string;
  clientFileName?: string;
  clientPath?: string;
  fileType?: string;
  regId?: string;
  sampleTag?: string;
  sampleType?: string;
  sampleValues?: string;
  uploadType?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      clientFileName: 'clientFileName',
      clientPath: 'clientPath',
      fileType: 'fileType',
      regId: 'regId',
      sampleTag: 'sampleTag',
      sampleType: 'sampleType',
      sampleValues: 'sampleValues',
      uploadType: 'uploadType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      clientFileName: 'string',
      clientPath: 'string',
      fileType: 'string',
      regId: 'string',
      sampleTag: 'string',
      sampleType: 'string',
      sampleValues: 'string',
      uploadType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSampleResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: CreateSampleResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: CreateSampleResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSampleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateSampleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateSampleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSampleApiRequest extends $tea.Model {
  dataType?: string;
  dataValue?: string;
  lang?: string;
  regId?: string;
  sampleBatchType?: string;
  serviceList?: string;
  static names(): { [key: string]: string } {
    return {
      dataType: 'DataType',
      dataValue: 'DataValue',
      lang: 'Lang',
      regId: 'RegId',
      sampleBatchType: 'SampleBatchType',
      serviceList: 'ServiceList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataType: 'string',
      dataValue: 'string',
      lang: 'string',
      regId: 'string',
      sampleBatchType: 'string',
      serviceList: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSampleApiResponseBody extends $tea.Model {
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSampleApiResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateSampleApiResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateSampleApiResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSampleDataRequest extends $tea.Model {
  lang?: string;
  description?: string;
  encryptType?: string;
  name?: string;
  regId?: string;
  riskValue?: string;
  scene?: string;
  storePath?: string;
  storeType?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      description: 'description',
      encryptType: 'encryptType',
      name: 'name',
      regId: 'regId',
      riskValue: 'riskValue',
      scene: 'scene',
      storePath: 'storePath',
      storeType: 'storeType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      description: 'string',
      encryptType: 'string',
      name: 'string',
      regId: 'string',
      riskValue: 'string',
      scene: 'string',
      storePath: 'string',
      storeType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSampleDataResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSampleDataResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateSampleDataResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateSampleDataResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSimulationTaskRequest extends $tea.Model {
  lang?: string;
  dataSourceConfig?: string;
  dataSourceType?: string;
  endTime?: number;
  eventCode?: string;
  filtersStr?: string;
  regId?: string;
  rulesStr?: string;
  runTask?: boolean;
  startTime?: number;
  taskName?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      dataSourceConfig: 'dataSourceConfig',
      dataSourceType: 'dataSourceType',
      endTime: 'endTime',
      eventCode: 'eventCode',
      filtersStr: 'filtersStr',
      regId: 'regId',
      rulesStr: 'rulesStr',
      runTask: 'runTask',
      startTime: 'startTime',
      taskName: 'taskName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      dataSourceConfig: 'string',
      dataSourceType: 'string',
      endTime: 'number',
      eventCode: 'string',
      filtersStr: 'string',
      regId: 'string',
      rulesStr: 'string',
      runTask: 'boolean',
      startTime: 'number',
      taskName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSimulationTaskResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSimulationTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateSimulationTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateSimulationTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTaskRequest extends $tea.Model {
  clientFileName?: string;
  clientPath?: string;
  describe?: string;
  lang?: string;
  sceneName?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      clientFileName: 'ClientFileName',
      clientPath: 'ClientPath',
      describe: 'Describe',
      lang: 'Lang',
      sceneName: 'SceneName',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientFileName: 'string',
      clientPath: 'string',
      describe: 'string',
      lang: 'string',
      sceneName: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTaskResponseBody extends $tea.Model {
  requestId?: string;
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTemplateRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  eventCode?: string;
  eventName?: string;
  logicExpression?: string;
  memo?: string;
  regId?: string;
  ruleActions?: string;
  ruleExpressions?: string;
  ruleName?: string;
  ruleStatus?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      eventCode: 'eventCode',
      eventName: 'eventName',
      logicExpression: 'logicExpression',
      memo: 'memo',
      regId: 'regId',
      ruleActions: 'ruleActions',
      ruleExpressions: 'ruleExpressions',
      ruleName: 'ruleName',
      ruleStatus: 'ruleStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      eventCode: 'string',
      eventName: 'string',
      logicExpression: 'string',
      memo: 'string',
      regId: 'string',
      ruleActions: 'string',
      ruleExpressions: 'string',
      ruleName: 'string',
      ruleStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTemplateResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTemplateResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateTemplateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateTemplateResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAnalysisConditionFavoriteRequest extends $tea.Model {
  lang?: string;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAnalysisConditionFavoriteResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAnalysisConditionFavoriteResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteAnalysisConditionFavoriteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteAnalysisConditionFavoriteResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAuthUserRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  eventCode?: string;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      eventCode: 'eventCode',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      eventCode: 'string',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAuthUserResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAuthUserResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteAuthUserResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteAuthUserResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteByPassShuntEventRequest extends $tea.Model {
  lang?: string;
  eventId?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventId: 'eventId',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventId: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteByPassShuntEventResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: boolean;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'boolean',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteByPassShuntEventResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteByPassShuntEventResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteByPassShuntEventResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCustVariableRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  dataVersion?: number;
  regId?: string;
  variableId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      dataVersion: 'dataVersion',
      regId: 'regId',
      variableId: 'variableId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      dataVersion: 'number',
      regId: 'string',
      variableId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCustVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCustVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteCustVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteCustVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataSourceRequest extends $tea.Model {
  lang?: string;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataSourceResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataSourceResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteDataSourceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteDataSourceResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteExpressionVariableRequest extends $tea.Model {
  lang?: string;
  dataVersion?: number;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      dataVersion: 'dataVersion',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      dataVersion: 'number',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteExpressionVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteExpressionVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteExpressionVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteExpressionVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteFieldRequest extends $tea.Model {
  lang?: string;
  id?: number;
  name?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      name: 'name',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      name: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteFieldResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteFieldResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteFieldResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteFieldResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteNameListRequest extends $tea.Model {
  lang?: string;
  ids?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      ids: 'ids',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      ids: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteNameListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteNameListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteNameListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteNameListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteNameListDataRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  variableId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      variableId: 'variableId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      variableId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteNameListDataResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteNameListDataResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteNameListDataResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteNameListDataResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteQueryVariableRequest extends $tea.Model {
  lang?: string;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteQueryVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteQueryVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteQueryVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteQueryVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteRuleRequest extends $tea.Model {
  lang?: string;
  consoleRuleId?: number;
  regId?: string;
  ruleId?: string;
  ruleVersionId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      consoleRuleId: 'consoleRuleId',
      regId: 'regId',
      ruleId: 'ruleId',
      ruleVersionId: 'ruleVersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      consoleRuleId: 'number',
      regId: 'string',
      ruleId: 'string',
      ruleVersionId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteRuleResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteRuleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteRuleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteRuleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteSampleBatchRequest extends $tea.Model {
  lang?: string;
  ids?: string;
  regId?: string;
  versions?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      ids: 'ids',
      regId: 'regId',
      versions: 'versions',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      ids: 'string',
      regId: 'string',
      versions: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteSampleBatchResponseBody extends $tea.Model {
  requestId?: string;
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteSampleBatchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteSampleBatchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteSampleBatchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteSampleDataRequest extends $tea.Model {
  lang?: string;
  id?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteSampleDataResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteSampleDataResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteSampleDataResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteSampleDataResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteTaskRequest extends $tea.Model {
  lang?: string;
  taskId?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      taskId: 'TaskId',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      taskId: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteTaskResponseBody extends $tea.Model {
  requestId?: string;
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAdvanceSearchLeftVariableListRequest extends $tea.Model {
  lang?: string;
  eventCodes?: string;
  regId?: string;
  scene?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventCodes: 'eventCodes',
      regId: 'regId',
      scene: 'scene',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventCodes: 'string',
      regId: 'string',
      scene: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAdvanceSearchLeftVariableListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeAdvanceSearchLeftVariableListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeAdvanceSearchLeftVariableListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAdvanceSearchLeftVariableListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAdvanceSearchLeftVariableListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAdvanceSearchLeftVariableListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAdvanceSearchPageListRequest extends $tea.Model {
  lang?: string;
  condition?: string;
  currentPage?: number;
  eventBeginTime?: number;
  eventCodes?: string;
  eventEndTime?: number;
  fieldName?: string;
  fieldValue?: string;
  pageSize?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      condition: 'condition',
      currentPage: 'currentPage',
      eventBeginTime: 'eventBeginTime',
      eventCodes: 'eventCodes',
      eventEndTime: 'eventEndTime',
      fieldName: 'fieldName',
      fieldValue: 'fieldValue',
      pageSize: 'pageSize',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      condition: 'string',
      currentPage: 'number',
      eventBeginTime: 'number',
      eventCodes: 'string',
      eventEndTime: 'number',
      fieldName: 'string',
      fieldValue: 'string',
      pageSize: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAdvanceSearchPageListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeAdvanceSearchPageListResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeAdvanceSearchPageListResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAdvanceSearchPageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAdvanceSearchPageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAdvanceSearchPageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllDataSourceRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllDataSourceResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeAllDataSourceResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeAllDataSourceResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllDataSourceResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAllDataSourceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAllDataSourceResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllEventNameAndCodeRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllEventNameAndCodeResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeAllEventNameAndCodeResponseBodyResultObject[];
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeAllEventNameAndCodeResponseBodyResultObject },
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllEventNameAndCodeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAllEventNameAndCodeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAllEventNameAndCodeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllRootVariableRequest extends $tea.Model {
  lang?: string;
  sourceIp?: string;
  deviceVariableIds?: string;
  eventCode?: string;
  expressionVariableIds?: string;
  id?: number;
  nativeVariableIds?: string;
  queryVariableIds?: string;
  regId?: string;
  velocityVariableIds?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      sourceIp: 'SourceIp',
      deviceVariableIds: 'deviceVariableIds',
      eventCode: 'eventCode',
      expressionVariableIds: 'expressionVariableIds',
      id: 'id',
      nativeVariableIds: 'nativeVariableIds',
      queryVariableIds: 'queryVariableIds',
      regId: 'regId',
      velocityVariableIds: 'velocityVariableIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      sourceIp: 'string',
      deviceVariableIds: 'string',
      eventCode: 'string',
      expressionVariableIds: 'string',
      id: 'number',
      nativeVariableIds: 'string',
      queryVariableIds: 'string',
      regId: 'string',
      velocityVariableIds: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllRootVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeAllRootVariableResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeAllRootVariableResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllRootVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAllRootVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAllRootVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisColumnFieldListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisColumnFieldListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisColumnFieldListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAnalysisColumnFieldListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAnalysisColumnFieldListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisColumnListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisColumnListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeAnalysisColumnListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeAnalysisColumnListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisColumnListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAnalysisColumnListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAnalysisColumnListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisConditionFavoriteListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisConditionFavoriteListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeAnalysisConditionFavoriteListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeAnalysisConditionFavoriteListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisConditionFavoriteListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAnalysisConditionFavoriteListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAnalysisConditionFavoriteListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisExportTaskDownloadUrlRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisExportTaskDownloadUrlResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisExportTaskDownloadUrlResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAnalysisExportTaskDownloadUrlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAnalysisExportTaskDownloadUrlResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiRequest extends $tea.Model {
  lang?: string;
  apiId?: string;
  apiRegionId?: string;
  apiType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      apiId: 'apiId',
      apiRegionId: 'apiRegionId',
      apiType: 'apiType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      apiId: 'string',
      apiRegionId: 'string',
      apiType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeApiResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeApiResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiGroupsRequest extends $tea.Model {
  lang?: string;
  apiRegionId?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      apiRegionId: 'apiRegionId',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      apiRegionId: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiGroupsResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiGroupsResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeApiGroupsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeApiGroupsResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiLimitRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiLimitResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeApiLimitResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeApiLimitResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiLimitResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeApiLimitResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeApiLimitResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiNameListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiNameListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeApiNameListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeApiNameListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiNameListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeApiNameListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeApiNameListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiVariableRequest extends $tea.Model {
  lang?: string;
  id?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeApiVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeApiVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApisRequest extends $tea.Model {
  lang?: string;
  apiGroupId?: string;
  apiRegionId?: string;
  apiType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      apiGroupId: 'apiGroupId',
      apiRegionId: 'apiRegionId',
      apiType: 'apiType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      apiGroupId: 'string',
      apiRegionId: 'string',
      apiType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApisResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApisResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeApisResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeApisResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAppKeyPageRequest extends $tea.Model {
  lang?: string;
  currentPage?: string;
  pageSize?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'string',
      pageSize: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAppKeyPageResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeAppKeyPageResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeAppKeyPageResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAppKeyPageResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAppKeyPageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAppKeyPageResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuditConfigRequest extends $tea.Model {
  lang?: string;
  auditRelationType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      auditRelationType: 'auditRelationType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      auditRelationType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuditConfigResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  resultObject?: boolean;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      resultObject: 'boolean',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuditConfigResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAuditConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAuditConfigResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuditDetailsRequest extends $tea.Model {
  lang?: string;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuditDetailsResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  resultObject?: boolean;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      resultObject: 'boolean',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuditDetailsResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAuditDetailsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAuditDetailsResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuditPageListRequest extends $tea.Model {
  lang?: string;
  auditStatus?: string;
  currentPage?: string;
  eventCode?: string;
  pageSize?: string;
  regId?: string;
  ruleName?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      auditStatus: 'auditStatus',
      currentPage: 'currentPage',
      eventCode: 'eventCode',
      pageSize: 'pageSize',
      regId: 'regId',
      ruleName: 'ruleName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      auditStatus: 'string',
      currentPage: 'string',
      eventCode: 'string',
      pageSize: 'string',
      regId: 'string',
      ruleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuditPageListResponseBody extends $tea.Model {
  currentPage?: number;
  pageSize?: number;
  requestId?: string;
  resultObject?: boolean;
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      requestId: 'requestId',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPage: 'number',
      pageSize: 'number',
      requestId: 'string',
      resultObject: 'boolean',
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuditPageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAuditPageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAuditPageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthEventNameListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthEventNameListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthEventNameListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAuthEventNameListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAuthEventNameListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthRulePageListRequest extends $tea.Model {
  lang?: string;
  eventCode?: string;
  regId?: string;
  ruleName?: string;
  status?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventCode: 'eventCode',
      regId: 'regId',
      ruleName: 'ruleName',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventCode: 'string',
      regId: 'string',
      ruleName: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthRulePageListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeAuthRulePageListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeAuthRulePageListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthRulePageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAuthRulePageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAuthRulePageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthSceneListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthSceneListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeAuthSceneListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeAuthSceneListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthSceneListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAuthSceneListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAuthSceneListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthScenePageListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  sceneName?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      sceneName: 'sceneName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      sceneName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthScenePageListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeAuthScenePageListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeAuthScenePageListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthScenePageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAuthScenePageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAuthScenePageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthStatusRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthStatusResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthStatusResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAuthStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAuthStatusResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAvgExecuteCostReportRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAvgExecuteCostReportResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeAvgExecuteCostReportResponseBodyResultObject[];
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeAvgExecuteCostReportResponseBodyResultObject },
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAvgExecuteCostReportResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeAvgExecuteCostReportResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeAvgExecuteCostReportResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBasicSearchPageListRequest extends $tea.Model {
  lang?: string;
  currentPage?: number;
  eventBeginTime?: number;
  eventCodes?: string;
  eventEndTime?: number;
  fieldName?: string;
  fieldValue?: string;
  pageSize?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      eventBeginTime: 'eventBeginTime',
      eventCodes: 'eventCodes',
      eventEndTime: 'eventEndTime',
      fieldName: 'fieldName',
      fieldValue: 'fieldValue',
      pageSize: 'pageSize',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'number',
      eventBeginTime: 'number',
      eventCodes: 'string',
      eventEndTime: 'number',
      fieldName: 'string',
      fieldValue: 'string',
      pageSize: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBasicSearchPageListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeBasicSearchPageListResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeBasicSearchPageListResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBasicSearchPageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeBasicSearchPageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeBasicSearchPageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBasicStartRequest extends $tea.Model {
  appKey?: string;
  endDs?: string;
  regId?: string;
  service?: string;
  startDs?: string;
  static names(): { [key: string]: string } {
    return {
      appKey: 'appKey',
      endDs: 'endDs',
      regId: 'regId',
      service: 'service',
      startDs: 'startDs',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appKey: 'string',
      endDs: 'string',
      regId: 'string',
      service: 'string',
      startDs: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBasicStartResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: boolean;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'boolean',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBasicStartResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeBasicStartResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeBasicStartResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeByPassShuntEventRequest extends $tea.Model {
  lang?: string;
  eventId?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventId: 'eventId',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventId: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeByPassShuntEventResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeByPassShuntEventResponseBodyResultObject;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: DescribeByPassShuntEventResponseBodyResultObject,
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeByPassShuntEventResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeByPassShuntEventResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeByPassShuntEventResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustVariableConfigListRequest extends $tea.Model {
  lang?: string;
  bizType?: string;
  regId?: string;
  timeType?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      bizType: 'bizType',
      regId: 'regId',
      timeType: 'timeType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      bizType: 'string',
      regId: 'string',
      timeType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustVariableConfigListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeCustVariableConfigListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeCustVariableConfigListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustVariableConfigListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCustVariableConfigListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCustVariableConfigListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustVariableDetailRequest extends $tea.Model {
  lang?: string;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustVariableDetailResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeCustVariableDetailResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeCustVariableDetailResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustVariableDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCustVariableDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCustVariableDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustVariablePageRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  currentPage?: number;
  description?: string;
  eventCode?: string;
  pageSize?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      currentPage: 'currentPage',
      description: 'description',
      eventCode: 'eventCode',
      pageSize: 'pageSize',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      currentPage: 'number',
      description: 'string',
      eventCode: 'string',
      pageSize: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustVariablePageResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeCustVariablePageResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeCustVariablePageResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustVariablePageResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeCustVariablePageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeCustVariablePageResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDataSourceDataDownloadUrlRequest extends $tea.Model {
  lang?: string;
  dataSourceId?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      dataSourceId: 'dataSourceId',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      dataSourceId: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDataSourceDataDownloadUrlResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeDataSourceDataDownloadUrlResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeDataSourceDataDownloadUrlResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDataSourceDataDownloadUrlResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDataSourceDataDownloadUrlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDataSourceDataDownloadUrlResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDataSourceFieldsRequest extends $tea.Model {
  lang?: string;
  dataSourceCode?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      dataSourceCode: 'dataSourceCode',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      dataSourceCode: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDataSourceFieldsResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDataSourceFieldsResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDataSourceFieldsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDataSourceFieldsResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDataSourcePageListRequest extends $tea.Model {
  lang?: string;
  sourceIp?: string;
  currentPage?: number;
  name?: string;
  pageSize?: number;
  regId?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      sourceIp: 'SourceIp',
      currentPage: 'currentPage',
      name: 'name',
      pageSize: 'pageSize',
      regId: 'regId',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      sourceIp: 'string',
      currentPage: 'number',
      name: 'string',
      pageSize: 'number',
      regId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDataSourcePageListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeDataSourcePageListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeDataSourcePageListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDataSourcePageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDataSourcePageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDataSourcePageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDecisionResultFluctuationRequest extends $tea.Model {
  lang?: string;
  eventCodes?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventCodes: 'eventCodes',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventCodes: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDecisionResultFluctuationResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeDecisionResultFluctuationResponseBodyResultObject[];
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeDecisionResultFluctuationResponseBodyResultObject },
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDecisionResultFluctuationResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDecisionResultFluctuationResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDecisionResultFluctuationResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDecisionResultTrendRequest extends $tea.Model {
  lang?: string;
  beginTime?: number;
  endTime?: number;
  eventCodes?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      endTime: 'endTime',
      eventCodes: 'eventCodes',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'number',
      endTime: 'number',
      eventCodes: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDecisionResultTrendResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeDecisionResultTrendResponseBodyResultObject;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: DescribeDecisionResultTrendResponseBodyResultObject,
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDecisionResultTrendResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDecisionResultTrendResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDecisionResultTrendResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDetailStartRequest extends $tea.Model {
  appKey?: string;
  endDs?: string;
  regId?: string;
  service?: string;
  startDs?: string;
  static names(): { [key: string]: string } {
    return {
      appKey: 'appKey',
      endDs: 'endDs',
      regId: 'regId',
      service: 'service',
      startDs: 'startDs',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appKey: 'string',
      endDs: 'string',
      regId: 'string',
      service: 'string',
      startDs: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDetailStartResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: boolean;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'boolean',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDetailStartResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDetailStartResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDetailStartResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDownloadUrlRequest extends $tea.Model {
  fileType?: string;
  lang?: string;
  regId?: string;
  taskId?: number;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      fileType: 'FileType',
      lang: 'Lang',
      regId: 'RegId',
      taskId: 'TaskId',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileType: 'string',
      lang: 'string',
      regId: 'string',
      taskId: 'number',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDownloadUrlResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDownloadUrlResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDownloadUrlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDownloadUrlResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventBaseInfoByEventCodeRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  eventCode?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      eventCode: 'eventCode',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      eventCode: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventBaseInfoByEventCodeResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeEventBaseInfoByEventCodeResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeEventBaseInfoByEventCodeResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventBaseInfoByEventCodeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventBaseInfoByEventCodeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventBaseInfoByEventCodeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventCountRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventCountResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeEventCountResponseBodyResultObject;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: DescribeEventCountResponseBodyResultObject,
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventCountResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventCountResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventCountResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventDetailByRequestIdRequest extends $tea.Model {
  lang?: string;
  eventCode?: string;
  eventTime?: number;
  regId?: string;
  sRequestId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventCode: 'eventCode',
      eventTime: 'eventTime',
      regId: 'regId',
      sRequestId: 'sRequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventCode: 'string',
      eventTime: 'number',
      regId: 'string',
      sRequestId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventDetailByRequestIdResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventDetailByRequestIdResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventDetailByRequestIdResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventDetailByRequestIdResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventLogDetailRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  reqIdByLog?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      reqIdByLog: 'reqIdByLog',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      reqIdByLog: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventLogDetailResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventLogDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventLogDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventLogDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventLogPageRequest extends $tea.Model {
  lang?: string;
  accountIdPRP?: string;
  beginTime?: number;
  condition1AL?: string;
  condition2AL?: string;
  condition3AL?: string;
  currentPage?: number;
  deviceTypeLRP?: string;
  emailPRP?: string;
  endTime?: number;
  failReasonLRP?: string;
  ipPRP?: string;
  loginResultARP?: string;
  loginTypeLRP?: string;
  macPRP?: string;
  mobilePRP?: string;
  nickNamePRP?: string;
  operateSourceLRP?: string;
  pageSize?: number;
  referPRP?: string;
  regId?: string;
  registerIpPRP?: string;
  reqIdPBS?: string;
  scoreEBS?: number;
  scoreSBS?: number;
  serviceABS?: string;
  tagsLBS?: string;
  umidPDI?: string;
  userAgentPRP?: string;
  userNameTypeLRP?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      accountIdPRP: 'accountIdPRP',
      beginTime: 'beginTime',
      condition1AL: 'condition1AL',
      condition2AL: 'condition2AL',
      condition3AL: 'condition3AL',
      currentPage: 'currentPage',
      deviceTypeLRP: 'deviceTypeLRP',
      emailPRP: 'emailPRP',
      endTime: 'endTime',
      failReasonLRP: 'failReasonLRP',
      ipPRP: 'ipPRP',
      loginResultARP: 'loginResultARP',
      loginTypeLRP: 'loginTypeLRP',
      macPRP: 'macPRP',
      mobilePRP: 'mobilePRP',
      nickNamePRP: 'nickNamePRP',
      operateSourceLRP: 'operateSourceLRP',
      pageSize: 'pageSize',
      referPRP: 'referPRP',
      regId: 'regId',
      registerIpPRP: 'registerIpPRP',
      reqIdPBS: 'reqIdPBS',
      scoreEBS: 'scoreEBS',
      scoreSBS: 'scoreSBS',
      serviceABS: 'serviceABS',
      tagsLBS: 'tagsLBS',
      umidPDI: 'umidPDI',
      userAgentPRP: 'userAgentPRP',
      userNameTypeLRP: 'userNameTypeLRP',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      accountIdPRP: 'string',
      beginTime: 'number',
      condition1AL: 'string',
      condition2AL: 'string',
      condition3AL: 'string',
      currentPage: 'number',
      deviceTypeLRP: 'string',
      emailPRP: 'string',
      endTime: 'number',
      failReasonLRP: 'string',
      ipPRP: 'string',
      loginResultARP: 'string',
      loginTypeLRP: 'string',
      macPRP: 'string',
      mobilePRP: 'string',
      nickNamePRP: 'string',
      operateSourceLRP: 'string',
      pageSize: 'number',
      referPRP: 'string',
      regId: 'string',
      registerIpPRP: 'string',
      reqIdPBS: 'string',
      scoreEBS: 'number',
      scoreSBS: 'number',
      serviceABS: 'string',
      tagsLBS: 'string',
      umidPDI: 'string',
      userAgentPRP: 'string',
      userNameTypeLRP: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventLogPageResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeEventLogPageResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeEventLogPageResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventLogPageResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventLogPageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventLogPageResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventPageListRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  currentPage?: number;
  eventCode?: string;
  eventName?: string;
  eventStatus?: string;
  pageSize?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      currentPage: 'currentPage',
      eventCode: 'eventCode',
      eventName: 'eventName',
      eventStatus: 'eventStatus',
      pageSize: 'pageSize',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      currentPage: 'number',
      eventCode: 'string',
      eventName: 'string',
      eventStatus: 'string',
      pageSize: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventPageListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeEventPageListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeEventPageListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventPageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventPageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventPageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventResultBarChartRequest extends $tea.Model {
  lang?: string;
  beginTime?: number;
  endTime?: number;
  eventCodes?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      endTime: 'endTime',
      eventCodes: 'eventCodes',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'number',
      endTime: 'number',
      eventCodes: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventResultBarChartResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeEventResultBarChartResponseBodyResultObject;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: DescribeEventResultBarChartResponseBodyResultObject,
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventResultBarChartResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventResultBarChartResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventResultBarChartResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventResultListRequest extends $tea.Model {
  lang?: string;
  beginTime?: number;
  currentPage?: number;
  endTime?: number;
  pageSize?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      currentPage: 'currentPage',
      endTime: 'endTime',
      pageSize: 'pageSize',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'number',
      currentPage: 'number',
      endTime: 'number',
      pageSize: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventResultListResponseBody extends $tea.Model {
  code?: string;
  currentPage?: number;
  httpStatusCode?: string;
  message?: string;
  pageSize?: number;
  requestId?: string;
  resultObject?: DescribeEventResultListResponseBodyResultObject[];
  success?: boolean;
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      currentPage: 'currentPage',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      pageSize: 'pageSize',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      currentPage: 'number',
      httpStatusCode: 'string',
      message: 'string',
      pageSize: 'number',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeEventResultListResponseBodyResultObject },
      success: 'boolean',
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventResultListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventResultListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventResultListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventTaskHistoryRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventTaskHistoryResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeEventTaskHistoryResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeEventTaskHistoryResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventTaskHistoryResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventTaskHistoryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventTaskHistoryResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventTotalCountReportRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventTotalCountReportResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeEventTotalCountReportResponseBodyResultObject;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: DescribeEventTotalCountReportResponseBodyResultObject,
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventTotalCountReportResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventTotalCountReportResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventTotalCountReportResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventUploadPolicyRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventUploadPolicyResponseBody extends $tea.Model {
  accessId?: string;
  host?: string;
  key?: string;
  policy?: string;
  requestId?: string;
  signature?: string;
  stsToken?: string;
  static names(): { [key: string]: string } {
    return {
      accessId: 'AccessId',
      host: 'Host',
      key: 'Key',
      policy: 'Policy',
      requestId: 'RequestId',
      signature: 'Signature',
      stsToken: 'StsToken',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessId: 'string',
      host: 'string',
      key: 'string',
      policy: 'string',
      requestId: 'string',
      signature: 'string',
      stsToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventUploadPolicyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventUploadPolicyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventUploadPolicyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  filterDTO?: string;
  refObjId?: string;
  refObjType?: string;
  regId?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      filterDTO: 'filterDTO',
      refObjId: 'refObjId',
      refObjType: 'refObjType',
      regId: 'regId',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      filterDTO: 'string',
      refObjId: 'string',
      refObjType: 'string',
      regId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeEventVariableListResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeEventVariableListResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventVariableListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventVariableListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableTemplateBindRequest extends $tea.Model {
  lang?: string;
  inputs?: string;
  regId?: string;
  templateCode?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      inputs: 'inputs',
      regId: 'regId',
      templateCode: 'templateCode',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      inputs: 'string',
      regId: 'string',
      templateCode: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableTemplateBindResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeEventVariableTemplateBindResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeEventVariableTemplateBindResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableTemplateBindResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventVariableTemplateBindResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventVariableTemplateBindResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableTemplateListRequest extends $tea.Model {
  lang?: string;
  inputs?: string;
  regId?: string;
  templateCode?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      inputs: 'inputs',
      regId: 'regId',
      templateCode: 'templateCode',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      inputs: 'string',
      regId: 'string',
      templateCode: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableTemplateListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeEventVariableTemplateListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeEventVariableTemplateListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableTemplateListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventVariableTemplateListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventVariableTemplateListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventsVariableListRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  eventCodes?: string;
  filterDTO?: string;
  regId?: string;
  scene?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      eventCodes: 'eventCodes',
      filterDTO: 'filterDTO',
      regId: 'regId',
      scene: 'scene',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      eventCodes: 'string',
      filterDTO: 'string',
      regId: 'string',
      scene: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventsVariableListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventsVariableListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeEventsVariableListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeEventsVariableListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExcuteNumRequest extends $tea.Model {
  code?: string;
  degree?: string;
  endDate?: string;
  lang?: string;
  sourceIp?: string;
  startDate?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      degree: 'Degree',
      endDate: 'EndDate',
      lang: 'Lang',
      sourceIp: 'SourceIp',
      startDate: 'StartDate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      degree: 'string',
      endDate: 'string',
      lang: 'string',
      sourceIp: 'string',
      startDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExcuteNumResponseBody extends $tea.Model {
  categories?: string[];
  data?: string[];
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      categories: 'Categories',
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      categories: { 'type': 'array', 'itemType': 'string' },
      data: { 'type': 'array', 'itemType': 'string' },
      requestId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExcuteNumResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeExcuteNumResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeExcuteNumResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExistNameRequest extends $tea.Model {
  lang?: string;
  name?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      name: 'name',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      name: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExistNameResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExistNameResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeExistNameResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeExistNameResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExistSceneRequest extends $tea.Model {
  lang?: string;
  sceneName?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      sceneName: 'SceneName',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      sceneName: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExistSceneResponseBody extends $tea.Model {
  requestId?: string;
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExistSceneResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeExistSceneResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeExistSceneResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExpressionVariableDetailRequest extends $tea.Model {
  lang?: string;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExpressionVariableDetailResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: { [key: string]: any };
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExpressionVariableDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeExpressionVariableDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeExpressionVariableDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExpressionVariableFunctionListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExpressionVariableFunctionListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeExpressionVariableFunctionListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeExpressionVariableFunctionListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExpressionVariableFunctionListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeExpressionVariableFunctionListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeExpressionVariableFunctionListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExpressionVariablePageRequest extends $tea.Model {
  lang?: string;
  currentPage?: string;
  eventCode?: string;
  outputs?: string;
  pageSize?: string;
  regId?: string;
  status?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      eventCode: 'eventCode',
      outputs: 'outputs',
      pageSize: 'pageSize',
      regId: 'regId',
      status: 'status',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'string',
      eventCode: 'string',
      outputs: 'string',
      pageSize: 'string',
      regId: 'string',
      status: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExpressionVariablePageResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeExpressionVariablePageResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeExpressionVariablePageResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExpressionVariablePageResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeExpressionVariablePageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeExpressionVariablePageResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFieldByIdRequest extends $tea.Model {
  lang?: string;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFieldByIdResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFieldByIdResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeFieldByIdResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeFieldByIdResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFieldListRequest extends $tea.Model {
  lang?: string;
  condition?: string;
  inputs?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      condition: 'condition',
      inputs: 'inputs',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      condition: 'string',
      inputs: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFieldListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeFieldListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeFieldListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFieldListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeFieldListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeFieldListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFieldPageRequest extends $tea.Model {
  lang?: string;
  classify?: string;
  condition?: string;
  currentPage?: string;
  name?: string;
  pageSize?: string;
  regId?: string;
  source?: string;
  status?: string;
  title?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      classify: 'classify',
      condition: 'condition',
      currentPage: 'currentPage',
      name: 'name',
      pageSize: 'pageSize',
      regId: 'regId',
      source: 'source',
      status: 'status',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      classify: 'string',
      condition: 'string',
      currentPage: 'string',
      name: 'string',
      pageSize: 'string',
      regId: 'string',
      source: 'string',
      status: 'string',
      title: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFieldPageResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeFieldPageResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeFieldPageResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFieldPageResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeFieldPageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeFieldPageResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupAccountPageRequest extends $tea.Model {
  lang?: string;
  communityNo?: string;
  currentPage?: string;
  direction?: string;
  fieldKey?: string;
  fieldVal?: string;
  isPage?: boolean;
  order?: string;
  pageSize?: string;
  regId?: string;
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      communityNo: 'communityNo',
      currentPage: 'currentPage',
      direction: 'direction',
      fieldKey: 'fieldKey',
      fieldVal: 'fieldVal',
      isPage: 'isPage',
      order: 'order',
      pageSize: 'pageSize',
      regId: 'regId',
      taskId: 'taskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      communityNo: 'string',
      currentPage: 'string',
      direction: 'string',
      fieldKey: 'string',
      fieldVal: 'string',
      isPage: 'boolean',
      order: 'string',
      pageSize: 'string',
      regId: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupAccountPageResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  data?: boolean;
  pageSize?: number;
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      data: 'data',
      pageSize: 'pageSize',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      data: 'boolean',
      pageSize: 'number',
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupAccountPageResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeGroupAccountPageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeGroupAccountPageResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupConditionListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupConditionListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeGroupConditionListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeGroupConditionListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupConditionListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeGroupConditionListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeGroupConditionListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupPageRequest extends $tea.Model {
  lang?: string;
  currentPage?: string;
  direction?: string;
  order?: string;
  pageSize?: string;
  regId?: string;
  taskId?: string;
  timeType?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      direction: 'direction',
      order: 'order',
      pageSize: 'pageSize',
      regId: 'regId',
      taskId: 'taskId',
      timeType: 'timeType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'string',
      direction: 'string',
      order: 'string',
      pageSize: 'string',
      regId: 'string',
      taskId: 'string',
      timeType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupPageResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeGroupPageResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeGroupPageResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupPageResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeGroupPageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeGroupPageResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupStatisticsByTodayRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupStatisticsByTodayResponseBody extends $tea.Model {
  requestId?: string;
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupStatisticsByTodayResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeGroupStatisticsByTodayResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeGroupStatisticsByTodayResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupTrendRequest extends $tea.Model {
  lang?: string;
  day?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      day: 'day',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      day: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupTrendResponseBody extends $tea.Model {
  requestId?: string;
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupTrendResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeGroupTrendResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeGroupTrendResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHasRuleNameByEventCodeRequest extends $tea.Model {
  lang?: string;
  eventCode?: string;
  excludeRuleId?: string;
  regId?: string;
  ruleName?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventCode: 'eventCode',
      excludeRuleId: 'excludeRuleId',
      regId: 'regId',
      ruleName: 'ruleName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventCode: 'string',
      excludeRuleId: 'string',
      regId: 'string',
      ruleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHasRuleNameByEventCodeResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHasRuleNameByEventCodeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeHasRuleNameByEventCodeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeHasRuleNameByEventCodeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartRequest extends $tea.Model {
  lang?: string;
  beginTime?: number;
  endTime?: number;
  eventCodes?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      endTime: 'endTime',
      eventCodes: 'eventCodes',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'number',
      endTime: 'number',
      eventCodes: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeHighRiskPieChartResponseBodyResultObject;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: DescribeHighRiskPieChartResponseBodyResultObject,
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeHighRiskPieChartResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeHighRiskPieChartResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleFluctuationRequest extends $tea.Model {
  lang?: string;
  eventCodes?: string;
  regId?: string;
  ruleStatus?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventCodes: 'eventCodes',
      regId: 'regId',
      ruleStatus: 'ruleStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventCodes: 'string',
      regId: 'string',
      ruleStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleFluctuationResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeHitRuleFluctuationResponseBodyResultObject[];
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeHitRuleFluctuationResponseBodyResultObject },
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleFluctuationResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeHitRuleFluctuationResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeHitRuleFluctuationResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleListRequest extends $tea.Model {
  lang?: string;
  beginTime?: number;
  endTime?: number;
  eventCodes?: string;
  eventType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      endTime: 'endTime',
      eventCodes: 'eventCodes',
      eventType: 'eventType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'number',
      endTime: 'number',
      eventCodes: 'string',
      eventType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeHitRuleListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeHitRuleListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeHitRuleListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeHitRuleListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleTrendRequest extends $tea.Model {
  lang?: string;
  beginTime?: number;
  endTime?: number;
  eventCodes?: string;
  regId?: string;
  ruleStatus?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      endTime: 'endTime',
      eventCodes: 'eventCodes',
      regId: 'regId',
      ruleStatus: 'ruleStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'number',
      endTime: 'number',
      eventCodes: 'string',
      regId: 'string',
      ruleStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleTrendResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeHitRuleTrendResponseBodyResultObject;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: DescribeHitRuleTrendResponseBodyResultObject,
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleTrendResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeHitRuleTrendResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeHitRuleTrendResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInputFeildCountByEventCodeRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  eventCode?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      eventCode: 'eventCode',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      eventCode: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInputFeildCountByEventCodeResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeInputFeildCountByEventCodeResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeInputFeildCountByEventCodeResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInputFeildCountByEventCodeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeInputFeildCountByEventCodeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeInputFeildCountByEventCodeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeListPocRequest extends $tea.Model {
  currentPage?: number;
  lang?: string;
  pageSize?: number;
  regId?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      currentPage: 'CurrentPage',
      lang: 'Lang',
      pageSize: 'PageSize',
      regId: 'RegId',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPage: 'number',
      lang: 'string',
      pageSize: 'number',
      regId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeListPocResponseBody extends $tea.Model {
  code?: string;
  currentPage?: string;
  httpStatusCode?: string;
  message?: string;
  pageSize?: string;
  requestId?: string;
  resultObject?: boolean;
  totalItem?: string;
  totalPage?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      currentPage: 'CurrentPage',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      resultObject: 'ResultObject',
      totalItem: 'TotalItem',
      totalPage: 'TotalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      currentPage: 'string',
      httpStatusCode: 'string',
      message: 'string',
      pageSize: 'string',
      requestId: 'string',
      resultObject: 'boolean',
      totalItem: 'string',
      totalPage: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeListPocResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeListPocResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeListPocResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeLoanExecListRequest extends $tea.Model {
  lang?: string;
  batchNo?: string;
  currentPage?: string;
  monitorObj?: string;
  monitorStatus?: string;
  pageSize?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      batchNo: 'batchNo',
      currentPage: 'currentPage',
      monitorObj: 'monitorObj',
      monitorStatus: 'monitorStatus',
      pageSize: 'pageSize',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      batchNo: 'string',
      currentPage: 'string',
      monitorObj: 'string',
      monitorStatus: 'string',
      pageSize: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeLoanExecListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: boolean;
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: 'boolean',
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeLoanExecListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeLoanExecListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeLoanExecListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeLoanTaskListRequest extends $tea.Model {
  lang?: string;
  batchNo?: string;
  currentPage?: string;
  monitorStatus?: string;
  pageSize?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      batchNo: 'batchNo',
      currentPage: 'currentPage',
      monitorStatus: 'monitorStatus',
      pageSize: 'pageSize',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      batchNo: 'string',
      currentPage: 'string',
      monitorStatus: 'string',
      pageSize: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeLoanTaskListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: boolean;
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: 'boolean',
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeLoanTaskListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeLoanTaskListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeLoanTaskListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeMarkPageRequest extends $tea.Model {
  lang?: string;
  currentPage?: string;
  direction?: string;
  isPage?: boolean;
  order?: string;
  pageSize?: string;
  regId?: string;
  taskLogId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      direction: 'direction',
      isPage: 'isPage',
      order: 'order',
      pageSize: 'pageSize',
      regId: 'regId',
      taskLogId: 'taskLogId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'string',
      direction: 'string',
      isPage: 'boolean',
      order: 'string',
      pageSize: 'string',
      regId: 'string',
      taskLogId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeMarkPageResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeMarkPageResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeMarkPageResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeMarkPageResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeMarkPageResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeMarkPageResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeMenuPermissionRequest extends $tea.Model {
  lang?: string;
  permissionType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      permissionType: 'permissionType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      permissionType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeMenuPermissionResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeMenuPermissionResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeMenuPermissionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeMenuPermissionResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeMonitorTaskLimitRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeMonitorTaskLimitResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeMonitorTaskLimitResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeMonitorTaskLimitResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeMonitorTaskLimitResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeMonitorTaskLimitResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeMonitorTaskLimitResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  currentPage?: string;
  pageSize?: string;
  regId?: string;
  value?: string;
  variableId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      regId: 'regId',
      value: 'value',
      variableId: 'variableId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      currentPage: 'string',
      pageSize: 'string',
      regId: 'string',
      value: 'string',
      variableId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeNameListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeNameListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeNameListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeNameListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListDownloadUrlRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  variableId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      variableId: 'variableId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      variableId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListDownloadUrlResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeNameListDownloadUrlResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeNameListDownloadUrlResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListDownloadUrlResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeNameListDownloadUrlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeNameListDownloadUrlResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListLimitRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListLimitResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeNameListLimitResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeNameListLimitResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListLimitResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeNameListLimitResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeNameListLimitResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListPageListRequest extends $tea.Model {
  lang?: string;
  currentPage?: number;
  pageSize?: number;
  regId?: string;
  updateBeginTime?: number;
  updateEndTime?: number;
  value?: string;
  variableId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      regId: 'regId',
      updateBeginTime: 'updateBeginTime',
      updateEndTime: 'updateEndTime',
      value: 'value',
      variableId: 'variableId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'number',
      pageSize: 'number',
      regId: 'string',
      updateBeginTime: 'number',
      updateEndTime: 'number',
      value: 'string',
      variableId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListPageListResponseBody extends $tea.Model {
  currentPage?: string;
  pageSize?: string;
  requestId?: string;
  resultObject?: DescribeNameListPageListResponseBodyResultObject[];
  totalItem?: string;
  totalPage?: string;
  static names(): { [key: string]: string } {
    return {
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      requestId: 'requestId',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPage: 'string',
      pageSize: 'string',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeNameListPageListResponseBodyResultObject },
      totalItem: 'string',
      totalPage: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListPageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeNameListPageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeNameListPageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListTypeListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListTypeListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeNameListTypeListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeNameListTypeListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListTypeListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeNameListTypeListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeNameListTypeListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListVariablePageListRequest extends $tea.Model {
  lang?: string;
  currentPage?: number;
  name?: string;
  nameListType?: string;
  pageSize?: number;
  regId?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      name: 'name',
      nameListType: 'nameListType',
      pageSize: 'pageSize',
      regId: 'regId',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'number',
      name: 'string',
      nameListType: 'string',
      pageSize: 'number',
      regId: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListVariablePageListResponseBody extends $tea.Model {
  currentPage?: number;
  pageSize?: number;
  requestId?: string;
  resultObject?: DescribeNameListVariablePageListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      requestId: 'requestId',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPage: 'number',
      pageSize: 'number',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeNameListVariablePageListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListVariablePageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeNameListVariablePageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeNameListVariablePageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperationLogPageListRequest extends $tea.Model {
  lang?: string;
  currentPage?: number;
  endDate?: number;
  pageSize?: number;
  regId?: string;
  startDate?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      endDate: 'endDate',
      pageSize: 'pageSize',
      regId: 'regId',
      startDate: 'startDate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'number',
      endDate: 'number',
      pageSize: 'number',
      regId: 'string',
      startDate: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperationLogPageListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeOperationLogPageListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeOperationLogPageListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperationLogPageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeOperationLogPageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeOperationLogPageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeOperatorListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeOperatorListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeOperatorListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeOperatorListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListBySceneRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  scene?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      scene: 'scene',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      scene: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListBySceneResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeOperatorListBySceneResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeOperatorListBySceneResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListBySceneResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeOperatorListBySceneResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeOperatorListBySceneResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListByTypeRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListByTypeResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeOperatorListByTypeResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeOperatorListByTypeResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListByTypeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeOperatorListByTypeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeOperatorListByTypeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOssAuthStatusRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOssAuthStatusResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOssAuthStatusResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeOssAuthStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeOssAuthStatusResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOssPolicyRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  scene?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      scene: 'scene',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      scene: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOssPolicyResponseBody extends $tea.Model {
  accessId?: string;
  host?: string;
  key?: string;
  policy?: string;
  signature?: string;
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      accessId: 'AccessId',
      host: 'Host',
      key: 'Key',
      policy: 'Policy',
      signature: 'Signature',
      requestId: 'requestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessId: 'string',
      host: 'string',
      key: 'string',
      policy: 'string',
      signature: 'string',
      requestId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOssPolicyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeOssPolicyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeOssPolicyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOssTokenRequest extends $tea.Model {
  lang?: string;
  fileName?: string;
  regId?: string;
  uploadType?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      fileName: 'fileName',
      regId: 'regId',
      uploadType: 'uploadType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      fileName: 'string',
      regId: 'string',
      uploadType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOssTokenResponseBody extends $tea.Model {
  accessId?: string;
  host?: string;
  key?: string;
  policy?: string;
  requestId?: string;
  signature?: string;
  stsToken?: string;
  static names(): { [key: string]: string } {
    return {
      accessId: 'AccessId',
      host: 'Host',
      key: 'Key',
      policy: 'Policy',
      requestId: 'RequestId',
      signature: 'Signature',
      stsToken: 'StsToken',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessId: 'string',
      host: 'string',
      key: 'string',
      policy: 'string',
      requestId: 'string',
      signature: 'string',
      stsToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOssTokenResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeOssTokenResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeOssTokenResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeParamByEventCodesRequest extends $tea.Model {
  lang?: string;
  eventCodes?: string;
  parma?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventCodes: 'eventCodes',
      parma: 'parma',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventCodes: 'string',
      parma: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeParamByEventCodesResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeParamByEventCodesResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeParamByEventCodesResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeParamByEventCodesResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeParamByEventCodesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeParamByEventCodesResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeParamListRequest extends $tea.Model {
  lang?: string;
  fileUrl?: string;
  regId?: string;
  serviceCode?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      fileUrl: 'fileUrl',
      regId: 'regId',
      serviceCode: 'serviceCode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      fileUrl: 'string',
      regId: 'string',
      serviceCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeParamListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeParamListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeParamListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeParamListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePocDetailRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  taskId?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      taskId: 'taskId',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      taskId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePocDetailResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePocDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribePocDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribePocDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePocOssTokenRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePocOssTokenResponseBody extends $tea.Model {
  accessId?: string;
  host?: string;
  key?: string;
  policy?: string;
  requestId?: string;
  signature?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      accessId: 'AccessId',
      host: 'Host',
      key: 'Key',
      policy: 'Policy',
      requestId: 'RequestId',
      signature: 'Signature',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessId: 'string',
      host: 'string',
      key: 'string',
      policy: 'string',
      requestId: 'string',
      signature: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePocOssTokenResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribePocOssTokenResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribePocOssTokenResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePocTaskListRequest extends $tea.Model {
  lang?: string;
  currentPage?: number;
  pageSize?: number;
  regId?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      regId: 'regId',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'number',
      pageSize: 'number',
      regId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePocTaskListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribePocTaskListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribePocTaskListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePocTaskListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribePocTaskListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribePocTaskListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePrivateStackRequest extends $tea.Model {
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePrivateStackResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePrivateStackResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribePrivateStackResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribePrivateStackResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeQueryVariableDetailRequest extends $tea.Model {
  lang?: string;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeQueryVariableDetailResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeQueryVariableDetailResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeQueryVariableDetailResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeQueryVariableDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeQueryVariableDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeQueryVariableDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeQueryVariablePageListRequest extends $tea.Model {
  lang?: string;
  currentPage?: number;
  dataSourceCode?: string;
  eventCode?: string;
  name?: string;
  pageSize?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      dataSourceCode: 'dataSourceCode',
      eventCode: 'eventCode',
      name: 'name',
      pageSize: 'pageSize',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'number',
      dataSourceCode: 'string',
      eventCode: 'string',
      name: 'string',
      pageSize: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeQueryVariablePageListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeQueryVariablePageListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeQueryVariablePageListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeQueryVariablePageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeQueryVariablePageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeQueryVariablePageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendSceneVariablesRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  sampleId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      sampleId: 'sampleId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      sampleId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendSceneVariablesResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendSceneVariablesResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRecommendSceneVariablesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRecommendSceneVariablesResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendTaskDetailRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  taskId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      taskId: 'taskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      taskId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendTaskDetailResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeRecommendTaskDetailResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeRecommendTaskDetailResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendTaskDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRecommendTaskDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRecommendTaskDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendTaskPageListRequest extends $tea.Model {
  lang?: string;
  currentPage?: string;
  pageSize?: string;
  regId?: string;
  taskName?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      regId: 'regId',
      taskName: 'taskName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'string',
      pageSize: 'string',
      regId: 'string',
      taskName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendTaskPageListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeRecommendTaskPageListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeRecommendTaskPageListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendTaskPageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRecommendTaskPageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRecommendTaskPageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendVariablesVelocityRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  taskId?: number;
  variableIdsStr?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      taskId: 'taskId',
      variableIdsStr: 'variableIdsStr',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      taskId: 'number',
      variableIdsStr: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendVariablesVelocityResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendVariablesVelocityResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRecommendVariablesVelocityResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRecommendVariablesVelocityResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendVelocitiesRequest extends $tea.Model {
  lang?: string;
  code?: string;
  regId?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      code: 'code',
      regId: 'regId',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      code: 'string',
      regId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendVelocitiesResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendVelocitiesResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRecommendVelocitiesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRecommendVelocitiesResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRegionsRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRegionsResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRegionsResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRegionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRegionsResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRequestHitRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  sRequestId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      sRequestId: 'sRequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      sRequestId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRequestHitResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeRequestHitResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeRequestHitResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRequestHitResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRequestHitResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRequestHitResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRequestPeakReportRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRequestPeakReportResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeRequestPeakReportResponseBodyResultObject[];
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeRequestPeakReportResponseBodyResultObject },
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRequestPeakReportResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRequestPeakReportResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRequestPeakReportResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeResultCountRequest extends $tea.Model {
  lang?: string;
  beginTime?: number;
  endTime?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      endTime: 'endTime',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'number',
      endTime: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeResultCountResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeResultCountResponseBodyResultObject[];
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeResultCountResponseBodyResultObject },
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeResultCountResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeResultCountResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeResultCountResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRiskLineChartRequest extends $tea.Model {
  lang?: string;
  beginTime?: number;
  endTime?: number;
  eventCodes?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      endTime: 'endTime',
      eventCodes: 'eventCodes',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'number',
      endTime: 'number',
      eventCodes: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRiskLineChartResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeRiskLineChartResponseBodyResultObject;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: DescribeRiskLineChartResponseBodyResultObject,
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRiskLineChartResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRiskLineChartResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRiskLineChartResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleBarChartRequest extends $tea.Model {
  lang?: string;
  beginTime?: number;
  endTime?: number;
  eventCodes?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      endTime: 'endTime',
      eventCodes: 'eventCodes',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'number',
      endTime: 'number',
      eventCodes: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleBarChartResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeRuleBarChartResponseBodyResultObject;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: DescribeRuleBarChartResponseBodyResultObject,
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleBarChartResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRuleBarChartResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRuleBarChartResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleCountByUserIdRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleCountByUserIdResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeRuleCountByUserIdResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeRuleCountByUserIdResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleCountByUserIdResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRuleCountByUserIdResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRuleCountByUserIdResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleDetailByRuleIdRequest extends $tea.Model {
  lang?: string;
  consoleRuleId?: number;
  regId?: string;
  ruleId?: string;
  ruleVersionId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      consoleRuleId: 'consoleRuleId',
      regId: 'regId',
      ruleId: 'ruleId',
      ruleVersionId: 'ruleVersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      consoleRuleId: 'number',
      regId: 'string',
      ruleId: 'string',
      ruleVersionId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleDetailByRuleIdResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeRuleDetailByRuleIdResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeRuleDetailByRuleIdResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleDetailByRuleIdResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRuleDetailByRuleIdResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRuleDetailByRuleIdResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleHitRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  ruleId?: string;
  ruleSnapshotId?: string;
  sRequestId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      ruleId: 'ruleId',
      ruleSnapshotId: 'ruleSnapshotId',
      sRequestId: 'sRequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      ruleId: 'string',
      ruleSnapshotId: 'string',
      sRequestId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleHitResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: { [key: string]: any };
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleHitResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRuleHitResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRuleHitResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleListByEventCodesListRequest extends $tea.Model {
  lang?: string;
  eventCodes?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventCodes: 'eventCodes',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventCodes: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleListByEventCodesListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeRuleListByEventCodesListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeRuleListByEventCodesListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleListByEventCodesListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRuleListByEventCodesListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRuleListByEventCodesListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRulePageListRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  currentPage?: string;
  eventCode?: string;
  pageSize?: string;
  regId?: string;
  ruleAuthType?: string;
  ruleName?: string;
  ruleStatus?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      currentPage: 'currentPage',
      eventCode: 'eventCode',
      pageSize: 'pageSize',
      regId: 'regId',
      ruleAuthType: 'ruleAuthType',
      ruleName: 'ruleName',
      ruleStatus: 'ruleStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      currentPage: 'string',
      eventCode: 'string',
      pageSize: 'string',
      regId: 'string',
      ruleAuthType: 'string',
      ruleName: 'string',
      ruleStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRulePageListResponseBody extends $tea.Model {
  currentPage?: number;
  pageSize?: number;
  requestId?: string;
  resultObject?: DescribeRulePageListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      requestId: 'requestId',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPage: 'number',
      pageSize: 'number',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeRulePageListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRulePageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRulePageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRulePageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleSnapshotRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  ruleId?: string;
  snapshotVersion?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      ruleId: 'ruleId',
      snapshotVersion: 'snapshotVersion',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      ruleId: 'string',
      snapshotVersion: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleSnapshotResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeRuleSnapshotResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeRuleSnapshotResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleSnapshotResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRuleSnapshotResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRuleSnapshotResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleVersionListRequest extends $tea.Model {
  lang?: string;
  consoleRuleId?: number;
  regId?: string;
  ruleId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      consoleRuleId: 'consoleRuleId',
      regId: 'regId',
      ruleId: 'ruleId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      consoleRuleId: 'number',
      regId: 'string',
      ruleId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleVersionListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeRuleVersionListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeRuleVersionListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleVersionListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeRuleVersionListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeRuleVersionListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSDKDownloadListRequest extends $tea.Model {
  lang?: string;
  deviceType?: string;
  listType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      deviceType: 'deviceType',
      listType: 'listType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      deviceType: 'string',
      listType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSDKDownloadListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeSDKDownloadListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeSDKDownloadListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSDKDownloadListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSDKDownloadListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSDKDownloadListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafConsoleRequest extends $tea.Model {
  lang?: string;
  content?: string;
  service?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      content: 'content',
      service: 'service',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      content: 'string',
      service: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafConsoleResponseBody extends $tea.Model {
  requestId?: string;
  bizData?: string[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      bizData: 'bizData',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      bizData: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafConsoleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSafConsoleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSafConsoleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafDeOrderRequest extends $tea.Model {
  lang?: string;
  currentPage?: number;
  endDate?: string;
  pageSize?: number;
  regId?: string;
  startDate?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      endDate: 'endDate',
      pageSize: 'pageSize',
      regId: 'regId',
      startDate: 'startDate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'number',
      endDate: 'string',
      pageSize: 'number',
      regId: 'string',
      startDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafDeOrderResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeSafDeOrderResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeSafDeOrderResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafDeOrderResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSafDeOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSafDeOrderResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafOrderRequest extends $tea.Model {
  lang?: string;
  currentPage?: number;
  endDate?: string;
  exactProductCode?: string;
  pageSize?: number;
  regId?: string;
  startDate?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      endDate: 'endDate',
      exactProductCode: 'exactProductCode',
      pageSize: 'pageSize',
      regId: 'regId',
      startDate: 'startDate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'number',
      endDate: 'string',
      exactProductCode: 'string',
      pageSize: 'number',
      regId: 'string',
      startDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafOrderResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeSafOrderResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeSafOrderResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafOrderResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSafOrderResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSafOrderResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafStartConfigRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafStartConfigResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeSafStartConfigResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeSafStartConfigResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafStartConfigResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSafStartConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSafStartConfigResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafStartStepsRequest extends $tea.Model {
  lang?: string;
  aliyunServer?: boolean;
  deviceTypesStr?: string;
  eventCode?: string;
  language?: string;
  regId?: string;
  serverRegion?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      aliyunServer: 'aliyunServer',
      deviceTypesStr: 'deviceTypesStr',
      eventCode: 'eventCode',
      language: 'language',
      regId: 'regId',
      serverRegion: 'serverRegion',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      aliyunServer: 'boolean',
      deviceTypesStr: 'string',
      eventCode: 'string',
      language: 'string',
      regId: 'string',
      serverRegion: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafStartStepsResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeSafStartStepsResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeSafStartStepsResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafStartStepsResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSafStartStepsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSafStartStepsResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafTagListRequest extends $tea.Model {
  lang?: string;
  apiId?: string;
  currentPage?: string;
  pageSize?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      apiId: 'apiId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      apiId: 'string',
      currentPage: 'string',
      pageSize: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafTagListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeSafTagListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeSafTagListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafTagListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSafTagListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSafTagListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleDataListRequest extends $tea.Model {
  lang?: string;
  currentPage?: string;
  deleteTag?: string;
  pageSize?: string;
  queryContent?: string;
  regId?: string;
  sampleId?: number;
  scene?: string;
  status?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      deleteTag: 'deleteTag',
      pageSize: 'pageSize',
      queryContent: 'queryContent',
      regId: 'regId',
      sampleId: 'sampleId',
      scene: 'scene',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'string',
      deleteTag: 'string',
      pageSize: 'string',
      queryContent: 'string',
      regId: 'string',
      sampleId: 'number',
      scene: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleDataListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeSampleDataListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeSampleDataListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleDataListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSampleDataListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSampleDataListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleDemoDownloadUrlRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  scene?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      scene: 'scene',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      scene: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleDemoDownloadUrlResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleDemoDownloadUrlResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSampleDemoDownloadUrlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSampleDemoDownloadUrlResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleDownloadUrlRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  sampleId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      sampleId: 'sampleId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      sampleId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleDownloadUrlResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleDownloadUrlResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSampleDownloadUrlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSampleDownloadUrlResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleInfoRequest extends $tea.Model {
  lang?: string;
  id?: number;
  regId?: string;
  versions?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
      versions: 'versions',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      regId: 'string',
      versions: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleInfoResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeSampleInfoResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeSampleInfoResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleInfoResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSampleInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSampleInfoResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleListRequest extends $tea.Model {
  lang?: string;
  currentPage?: number;
  pageSize?: number;
  regId?: string;
  sampleType?: string;
  sampleValue?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      regId: 'regId',
      sampleType: 'sampleType',
      sampleValue: 'sampleValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'number',
      pageSize: 'number',
      regId: 'string',
      sampleType: 'string',
      sampleValue: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeSampleListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeSampleListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSampleListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSampleListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleSceneListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleSceneListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeSampleSceneListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeSampleSceneListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleSceneListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSampleSceneListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSampleSceneListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleTagListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleTagListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleTagListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSampleTagListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSampleTagListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleUploadPolicyRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleUploadPolicyResponseBody extends $tea.Model {
  accessId?: string;
  host?: string;
  key?: string;
  policy?: string;
  requestId?: string;
  signature?: string;
  stsToken?: string;
  static names(): { [key: string]: string } {
    return {
      accessId: 'AccessId',
      host: 'Host',
      key: 'Key',
      policy: 'Policy',
      requestId: 'RequestId',
      signature: 'Signature',
      stsToken: 'StsToken',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessId: 'string',
      host: 'string',
      key: 'string',
      policy: 'string',
      requestId: 'string',
      signature: 'string',
      stsToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleUploadPolicyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSampleUploadPolicyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSampleUploadPolicyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneAllEventNameCodeListRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneAllEventNameCodeListResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeSceneAllEventNameCodeListResponseBodyResultObject[];
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeSceneAllEventNameCodeListResponseBodyResultObject },
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneAllEventNameCodeListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSceneAllEventNameCodeListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSceneAllEventNameCodeListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneEventPageListRequest extends $tea.Model {
  lang?: string;
  currentPage?: string;
  nameOrCode?: string;
  pageSize?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      nameOrCode: 'nameOrCode',
      pageSize: 'pageSize',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'string',
      nameOrCode: 'string',
      pageSize: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneEventPageListResponseBody extends $tea.Model {
  currentPage?: number;
  pageSize?: number;
  requestId?: string;
  resultObject?: DescribeSceneEventPageListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      requestId: 'requestId',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPage: 'number',
      pageSize: 'number',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeSceneEventPageListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneEventPageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSceneEventPageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSceneEventPageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneRulePageListRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  currentPage?: string;
  eventCode?: string;
  pageSize?: string;
  regId?: string;
  ruleAuthType?: string;
  ruleName?: string;
  ruleStatus?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      currentPage: 'currentPage',
      eventCode: 'eventCode',
      pageSize: 'pageSize',
      regId: 'regId',
      ruleAuthType: 'ruleAuthType',
      ruleName: 'ruleName',
      ruleStatus: 'ruleStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      currentPage: 'string',
      eventCode: 'string',
      pageSize: 'string',
      regId: 'string',
      ruleAuthType: 'string',
      ruleName: 'string',
      ruleStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneRulePageListResponseBody extends $tea.Model {
  currentPage?: number;
  pageSize?: number;
  requestId?: string;
  resultObject?: DescribeSceneRulePageListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      requestId: 'requestId',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPage: 'number',
      pageSize: 'number',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeSceneRulePageListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneRulePageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSceneRulePageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSceneRulePageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionNumLineChartRequest extends $tea.Model {
  lang?: string;
  beginTime?: string;
  byPassEventCodes?: string;
  endTime?: string;
  mainEventCodes?: string;
  regId?: string;
  shuntEventCodes?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      byPassEventCodes: 'byPassEventCodes',
      endTime: 'endTime',
      mainEventCodes: 'mainEventCodes',
      regId: 'regId',
      shuntEventCodes: 'shuntEventCodes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'string',
      byPassEventCodes: 'string',
      endTime: 'string',
      mainEventCodes: 'string',
      regId: 'string',
      shuntEventCodes: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionNumLineChartResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeScoreSectionNumLineChartResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeScoreSectionNumLineChartResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionNumLineChartResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeScoreSectionNumLineChartResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeScoreSectionNumLineChartResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionPieChartRequest extends $tea.Model {
  lang?: string;
  beginTime?: number;
  endTime?: number;
  eventCodes?: string;
  eventType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      endTime: 'endTime',
      eventCodes: 'eventCodes',
      eventType: 'eventType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'number',
      endTime: 'number',
      eventCodes: 'string',
      eventType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionPieChartResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeScoreSectionPieChartResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeScoreSectionPieChartResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionPieChartResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeScoreSectionPieChartResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeScoreSectionPieChartResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionRatioLineChartRequest extends $tea.Model {
  lang?: string;
  beginTime?: string;
  byPassEventCodes?: string;
  endTime?: string;
  mainEventCodes?: string;
  regId?: string;
  shuntEventCodes?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      byPassEventCodes: 'byPassEventCodes',
      endTime: 'endTime',
      mainEventCodes: 'mainEventCodes',
      regId: 'regId',
      shuntEventCodes: 'shuntEventCodes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'string',
      byPassEventCodes: 'string',
      endTime: 'string',
      mainEventCodes: 'string',
      regId: 'string',
      shuntEventCodes: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionRatioLineChartResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeScoreSectionRatioLineChartResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeScoreSectionRatioLineChartResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionRatioLineChartResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeScoreSectionRatioLineChartResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeScoreSectionRatioLineChartResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSelectItemRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSelectItemResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeSelectItemResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeSelectItemResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSelectItemResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSelectItemResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSelectItemResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceAppKeyRequest extends $tea.Model {
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceAppKeyResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: boolean;
  uccess?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      uccess: 'uccess',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'boolean',
      uccess: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceAppKeyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeServiceAppKeyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeServiceAppKeyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceConsumeRequest extends $tea.Model {
  lang?: string;
  currentPage?: string;
  endDate?: string;
  pageSize?: string;
  regId?: string;
  serviceCode?: string;
  startDate?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      endDate: 'endDate',
      pageSize: 'pageSize',
      regId: 'regId',
      serviceCode: 'serviceCode',
      startDate: 'startDate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'string',
      endDate: 'string',
      pageSize: 'string',
      regId: 'string',
      serviceCode: 'string',
      startDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceConsumeResponseBody extends $tea.Model {
  requestId?: string;
  consumeRecords?: DescribeServiceConsumeResponseBodyConsumeRecords[];
  currentPage?: number;
  pageSize?: number;
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      consumeRecords: 'consumeRecords',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      consumeRecords: { 'type': 'array', 'itemType': DescribeServiceConsumeResponseBodyConsumeRecords },
      currentPage: 'number',
      pageSize: 'number',
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceConsumeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeServiceConsumeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeServiceConsumeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceConsumeDownloadUrlRequest extends $tea.Model {
  lang?: string;
  endDate?: string;
  regId?: string;
  serviceCode?: string;
  startDate?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      endDate: 'endDate',
      regId: 'regId',
      serviceCode: 'serviceCode',
      startDate: 'startDate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      endDate: 'string',
      regId: 'string',
      serviceCode: 'string',
      startDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceConsumeDownloadUrlResponseBody extends $tea.Model {
  requestId?: string;
  downloadFileUrl?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      downloadFileUrl: 'downloadFileUrl',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      downloadFileUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceConsumeDownloadUrlResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeServiceConsumeDownloadUrlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeServiceConsumeDownloadUrlResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeServiceListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeServiceListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeServiceListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeServiceListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSimulationPreditInfoRequest extends $tea.Model {
  lang?: string;
  eventCode?: string;
  regId?: string;
  rulesStr?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventCode: 'eventCode',
      regId: 'regId',
      rulesStr: 'rulesStr',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventCode: 'string',
      regId: 'string',
      rulesStr: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSimulationPreditInfoResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSimulationPreditInfoResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSimulationPreditInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSimulationPreditInfoResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSimulationTaskCountRequest extends $tea.Model {
  lang?: string;
  dataSourceConfig?: string;
  dataSourceType?: string;
  endTime?: number;
  eventCode?: string;
  filtersStr?: string;
  regId?: string;
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      dataSourceConfig: 'dataSourceConfig',
      dataSourceType: 'dataSourceType',
      endTime: 'endTime',
      eventCode: 'eventCode',
      filtersStr: 'filtersStr',
      regId: 'regId',
      startTime: 'startTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      dataSourceConfig: 'string',
      dataSourceType: 'string',
      endTime: 'number',
      eventCode: 'string',
      filtersStr: 'string',
      regId: 'string',
      startTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSimulationTaskCountResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSimulationTaskCountResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSimulationTaskCountResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSimulationTaskCountResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSimulationTaskListRequest extends $tea.Model {
  lang?: string;
  currentPage?: string;
  id?: string;
  name?: string;
  pageSize?: string;
  regId?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      id: 'id',
      name: 'name',
      pageSize: 'pageSize',
      regId: 'regId',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'string',
      id: 'string',
      name: 'string',
      pageSize: 'string',
      regId: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSimulationTaskListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: boolean;
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: 'boolean',
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSimulationTaskListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSimulationTaskListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSimulationTaskListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlsUrlConfigRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlsUrlConfigResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSlsUrlConfigResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSlsUrlConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSlsUrlConfigResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSupportRuleListRequest extends $tea.Model {
  lang?: string;
  eventCode?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventCode: 'eventCode',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventCode: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSupportRuleListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSupportRuleListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeSupportRuleListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeSupportRuleListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagListRequest extends $tea.Model {
  id?: string;
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      lang: 'Lang',
      regId: 'RegId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagListResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      resultObject: 'ResultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTagListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTagListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsBarChartRequest extends $tea.Model {
  lang?: string;
  beginTime?: number;
  endTime?: number;
  eventCodes?: string;
  regId?: string;
  result?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      endTime: 'endTime',
      eventCodes: 'eventCodes',
      regId: 'regId',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'number',
      endTime: 'number',
      eventCodes: 'string',
      regId: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsBarChartResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeTagsBarChartResponseBodyResultObject;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: DescribeTagsBarChartResponseBodyResultObject,
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsBarChartResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTagsBarChartResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTagsBarChartResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsFluctuationRequest extends $tea.Model {
  lang?: string;
  eventCodes?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventCodes: 'eventCodes',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventCodes: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsFluctuationResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeTagsFluctuationResponseBodyResultObject[];
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeTagsFluctuationResponseBodyResultObject },
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsFluctuationResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTagsFluctuationResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTagsFluctuationResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsListRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTagsListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTagsListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsNumLineChartRequest extends $tea.Model {
  lang?: string;
  beginTime?: string;
  byPassEventCodes?: string;
  endTime?: string;
  mainEventCodes?: string;
  regId?: string;
  shuntEventCodes?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      byPassEventCodes: 'byPassEventCodes',
      endTime: 'endTime',
      mainEventCodes: 'mainEventCodes',
      regId: 'regId',
      shuntEventCodes: 'shuntEventCodes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'string',
      byPassEventCodes: 'string',
      endTime: 'string',
      mainEventCodes: 'string',
      regId: 'string',
      shuntEventCodes: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsNumLineChartResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeTagsNumLineChartResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeTagsNumLineChartResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsNumLineChartResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTagsNumLineChartResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTagsNumLineChartResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsRatioLineChartRequest extends $tea.Model {
  lang?: string;
  beginTime?: number;
  byPassEventCodes?: string;
  endTime?: number;
  mainEventCodes?: string;
  regId?: string;
  shuntEventCodes?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      byPassEventCodes: 'byPassEventCodes',
      endTime: 'endTime',
      mainEventCodes: 'mainEventCodes',
      regId: 'regId',
      shuntEventCodes: 'shuntEventCodes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'number',
      byPassEventCodes: 'string',
      endTime: 'number',
      mainEventCodes: 'string',
      regId: 'string',
      shuntEventCodes: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsRatioLineChartResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeTagsRatioLineChartResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeTagsRatioLineChartResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsRatioLineChartResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTagsRatioLineChartResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTagsRatioLineChartResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsTrendRequest extends $tea.Model {
  lang?: string;
  beginTime?: number;
  endTime?: number;
  eventCodes?: string;
  regId?: string;
  result?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      beginTime: 'beginTime',
      endTime: 'endTime',
      eventCodes: 'eventCodes',
      regId: 'regId',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      beginTime: 'number',
      endTime: 'number',
      eventCodes: 'string',
      regId: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsTrendResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: DescribeTagsTrendResponseBodyResultObject;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: DescribeTagsTrendResponseBodyResultObject,
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsTrendResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTagsTrendResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTagsTrendResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTaskListRequest extends $tea.Model {
  currentPage?: string;
  isPage?: boolean;
  lang?: string;
  pageSize?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      currentPage: 'CurrentPage',
      isPage: 'IsPage',
      lang: 'Lang',
      pageSize: 'PageSize',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPage: 'string',
      isPage: 'boolean',
      lang: 'string',
      pageSize: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTaskListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeTaskListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeTaskListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTaskListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTaskListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTaskListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTaskLogListRequest extends $tea.Model {
  currentPage?: string;
  isPage?: boolean;
  lang?: string;
  pageSize?: string;
  taskId?: string;
  taskLogId?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      currentPage: 'CurrentPage',
      isPage: 'IsPage',
      lang: 'Lang',
      pageSize: 'PageSize',
      taskId: 'TaskId',
      taskLogId: 'TaskLogId',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPage: 'string',
      isPage: 'boolean',
      lang: 'string',
      pageSize: 'string',
      taskId: 'string',
      taskLogId: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTaskLogListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeTaskLogListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeTaskLogListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTaskLogListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTaskLogListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTaskLogListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplateBaseInfoByTemplateIdRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  templateId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      templateId: 'templateId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      templateId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplateBaseInfoByTemplateIdResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplateBaseInfoByTemplateIdResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTemplateBaseInfoByTemplateIdResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTemplateBaseInfoByTemplateIdResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplateCountRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplateCountResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeTemplateCountResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeTemplateCountResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplateCountResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTemplateCountResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTemplateCountResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplateDownloadRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplateDownloadResponseBody extends $tea.Model {
  requestId?: string;
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplateDownloadResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTemplateDownloadResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTemplateDownloadResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplatePageListRequest extends $tea.Model {
  lang?: string;
  currentPage?: string;
  eventCodes?: string;
  pageSize?: string;
  regId?: string;
  templateName?: string;
  templateSearchItem?: string;
  templateStatus?: string;
  templateType?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      currentPage: 'currentPage',
      eventCodes: 'eventCodes',
      pageSize: 'pageSize',
      regId: 'regId',
      templateName: 'templateName',
      templateSearchItem: 'templateSearchItem',
      templateStatus: 'templateStatus',
      templateType: 'templateType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      currentPage: 'string',
      eventCodes: 'string',
      pageSize: 'string',
      regId: 'string',
      templateName: 'string',
      templateSearchItem: 'string',
      templateStatus: 'string',
      templateType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplatePageListResponseBody extends $tea.Model {
  currentPage?: number;
  pageSize?: number;
  requestId?: string;
  resultObject?: DescribeTemplatePageListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      requestId: 'requestId',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPage: 'number',
      pageSize: 'number',
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': DescribeTemplatePageListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplatePageListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTemplatePageListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTemplatePageListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsedServiceRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsedServiceResponseBody extends $tea.Model {
  requestId?: string;
  records?: DescribeUsedServiceResponseBodyRecords[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      records: 'records',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      records: { 'type': 'array', 'itemType': DescribeUsedServiceResponseBodyRecords },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsedServiceResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeUsedServiceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeUsedServiceResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserInfoRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserInfoResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  resultObject?: DescribeUserInfoResponseBodyResultObject;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      resultObject: DescribeUserInfoResponseBodyResultObject,
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserInfoResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeUserInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeUserInfoResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableBindDetailRequest extends $tea.Model {
  lang?: string;
  defineId?: number;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      defineId: 'defineId',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      defineId: 'number',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableBindDetailResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeVariableBindDetailResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeVariableBindDetailResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableBindDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeVariableBindDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeVariableBindDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableDetailRequest extends $tea.Model {
  lang?: string;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableDetailResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: DescribeVariableDetailResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: DescribeVariableDetailResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableDetailResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeVariableDetailResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeVariableDetailResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableFeeRequest extends $tea.Model {
  lang?: string;
  ids?: number[];
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      ids: 'ids',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      ids: { 'type': 'array', 'itemType': 'number' },
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableFeeResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableFeeResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeVariableFeeResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeVariableFeeResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableListRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  currentPage?: string;
  pageSize?: string;
  refObjId?: string;
  regId?: string;
  sourceType?: string;
  type?: string;
  typesStr?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      refObjId: 'refObjId',
      regId: 'regId',
      sourceType: 'sourceType',
      type: 'type',
      typesStr: 'typesStr',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      currentPage: 'string',
      pageSize: 'string',
      refObjId: 'string',
      regId: 'string',
      sourceType: 'string',
      type: 'string',
      typesStr: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeVariableListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeVariableListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeVariableListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeVariableListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableMarketListRequest extends $tea.Model {
  lang?: string;
  chargingMode?: string;
  currentPage?: number;
  pageSize?: number;
  paging?: string;
  queryContent?: string;
  regId?: string;
  scenesStr?: string;
  source?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      chargingMode: 'chargingMode',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      paging: 'paging',
      queryContent: 'queryContent',
      regId: 'regId',
      scenesStr: 'scenesStr',
      source: 'source',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      chargingMode: 'string',
      currentPage: 'number',
      pageSize: 'number',
      paging: 'string',
      queryContent: 'string',
      regId: 'string',
      scenesStr: 'string',
      source: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableMarketListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: boolean;
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: 'boolean',
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableMarketListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeVariableMarketListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeVariableMarketListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableSceneListRequest extends $tea.Model {
  lang?: string;
  bizType?: string;
  configKey?: string;
  currentPage?: string;
  pageSize?: string;
  paging?: boolean;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      bizType: 'bizType',
      configKey: 'configKey',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      paging: 'paging',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      bizType: 'string',
      configKey: 'string',
      currentPage: 'string',
      pageSize: 'string',
      paging: 'boolean',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableSceneListResponseBody extends $tea.Model {
  requestId?: string;
  currentPage?: number;
  pageSize?: number;
  resultObject?: DescribeVariableSceneListResponseBodyResultObject[];
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      currentPage: 'currentPage',
      pageSize: 'pageSize',
      resultObject: 'resultObject',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      currentPage: 'number',
      pageSize: 'number',
      resultObject: { 'type': 'array', 'itemType': DescribeVariableSceneListResponseBodyResultObject },
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableSceneListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeVariableSceneListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeVariableSceneListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExpressionTestRequest extends $tea.Model {
  lang?: string;
  expression?: string;
  expressionVariable?: string;
  expressionVariableIds?: string;
  id?: number;
  regId?: string;
  scene?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      expression: 'expression',
      expressionVariable: 'expressionVariable',
      expressionVariableIds: 'expressionVariableIds',
      id: 'id',
      regId: 'regId',
      scene: 'scene',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      expression: 'string',
      expressionVariable: 'string',
      expressionVariableIds: 'string',
      id: 'number',
      regId: 'string',
      scene: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExpressionTestResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExpressionTestResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExpressionTestResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExpressionTestResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FileUploadRequest extends $tea.Model {
  fileName?: string;
  fileUrl?: string;
  lang?: string;
  tab?: string;
  static names(): { [key: string]: string } {
    return {
      fileName: 'FileName',
      fileUrl: 'FileUrl',
      lang: 'Lang',
      tab: 'Tab',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileName: 'string',
      fileUrl: 'string',
      lang: 'string',
      tab: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FileUploadResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      resultObject: 'ResultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FileUploadResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: FileUploadResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: FileUploadResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportNameListRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  data?: string;
  description?: string;
  importType?: string;
  nameListType?: string;
  regId?: string;
  title?: string;
  variableId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      data: 'data',
      description: 'description',
      importType: 'importType',
      nameListType: 'nameListType',
      regId: 'regId',
      title: 'title',
      variableId: 'variableId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      data: 'string',
      description: 'string',
      importType: 'string',
      nameListType: 'string',
      regId: 'string',
      title: 'string',
      variableId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportNameListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportNameListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ImportNameListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ImportNameListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportTemplateEventRequest extends $tea.Model {
  lang?: string;
  eventTemplateIds?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventTemplateIds: 'eventTemplateIds',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventTemplateIds: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportTemplateEventResponseBody extends $tea.Model {
  requestId?: string;
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportTemplateEventResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ImportTemplateEventResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ImportTemplateEventResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAppKeyRequest extends $tea.Model {
  lang?: string;
  appKey?: string;
  memo?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      appKey: 'appKey',
      memo: 'memo',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      appKey: 'string',
      memo: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAppKeyResponseBody extends $tea.Model {
  requestId?: string;
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAppKeyResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyAppKeyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyAppKeyResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCustVariableRequest extends $tea.Model {
  lang?: string;
  condition?: string;
  dataVersion?: number;
  description?: string;
  eventCodes?: string;
  id?: number;
  name?: string;
  outputs?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      condition: 'condition',
      dataVersion: 'dataVersion',
      description: 'description',
      eventCodes: 'eventCodes',
      id: 'id',
      name: 'name',
      outputs: 'outputs',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      condition: 'string',
      dataVersion: 'number',
      description: 'string',
      eventCodes: 'string',
      id: 'number',
      name: 'string',
      outputs: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCustVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: ModifyCustVariableResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': ModifyCustVariableResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCustVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyCustVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyCustVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyEventRequest extends $tea.Model {
  lang?: string;
  bizVersion?: number;
  createType?: string;
  eventCode?: string;
  inputFieldsStr?: string;
  memo?: string;
  regId?: string;
  templateType?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      bizVersion: 'bizVersion',
      createType: 'createType',
      eventCode: 'eventCode',
      inputFieldsStr: 'inputFieldsStr',
      memo: 'memo',
      regId: 'regId',
      templateType: 'templateType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      bizVersion: 'number',
      createType: 'string',
      eventCode: 'string',
      inputFieldsStr: 'string',
      memo: 'string',
      regId: 'string',
      templateType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyEventResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyEventResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyEventResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyEventResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyEventStatusRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  eventCode?: string;
  fromEventSatus?: string;
  regId?: string;
  toEventSatus?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      eventCode: 'eventCode',
      fromEventSatus: 'fromEventSatus',
      regId: 'regId',
      toEventSatus: 'toEventSatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      eventCode: 'string',
      fromEventSatus: 'string',
      regId: 'string',
      toEventSatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyEventStatusResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyEventStatusResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyEventStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyEventStatusResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyExpressionVariableRequest extends $tea.Model {
  lang?: string;
  dataVersion?: number;
  description?: string;
  eventCode?: string;
  expression?: string;
  expressionTitle?: string;
  expressionVariable?: string;
  id?: number;
  outlier?: string;
  outputs?: string;
  regId?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      dataVersion: 'dataVersion',
      description: 'description',
      eventCode: 'eventCode',
      expression: 'expression',
      expressionTitle: 'expressionTitle',
      expressionVariable: 'expressionVariable',
      id: 'id',
      outlier: 'outlier',
      outputs: 'outputs',
      regId: 'regId',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      dataVersion: 'number',
      description: 'string',
      eventCode: 'string',
      expression: 'string',
      expressionTitle: 'string',
      expressionVariable: 'string',
      id: 'number',
      outlier: 'string',
      outputs: 'string',
      regId: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyExpressionVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyExpressionVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyExpressionVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyExpressionVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyFieldRequest extends $tea.Model {
  lang?: string;
  classify?: string;
  description?: string;
  enumData?: string;
  id?: number;
  name?: string;
  regId?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      classify: 'classify',
      description: 'description',
      enumData: 'enumData',
      id: 'id',
      name: 'name',
      regId: 'regId',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      classify: 'string',
      description: 'string',
      enumData: 'string',
      id: 'number',
      name: 'string',
      regId: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyFieldResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyFieldResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyFieldResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyFieldResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPocTaskRequest extends $tea.Model {
  lang?: string;
  accessType?: string;
  config?: string;
  fileName?: string;
  fileType?: string;
  fileUrl?: string;
  reason?: string;
  regId?: string;
  serviceCode?: string;
  serviceName?: string;
  taskId?: string;
  taskName?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      accessType: 'accessType',
      config: 'config',
      fileName: 'fileName',
      fileType: 'fileType',
      fileUrl: 'fileUrl',
      reason: 'reason',
      regId: 'regId',
      serviceCode: 'serviceCode',
      serviceName: 'serviceName',
      taskId: 'taskId',
      taskName: 'taskName',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      accessType: 'string',
      config: 'string',
      fileName: 'string',
      fileType: 'string',
      fileUrl: 'string',
      reason: 'string',
      regId: 'string',
      serviceCode: 'string',
      serviceName: 'string',
      taskId: 'string',
      taskName: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPocTaskResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyPocTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyPocTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyPocTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyRulePriorityRequest extends $tea.Model {
  lang?: string;
  consoleRuleId?: number;
  priority?: number;
  regId?: string;
  ruleId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      consoleRuleId: 'consoleRuleId',
      priority: 'priority',
      regId: 'regId',
      ruleId: 'ruleId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      consoleRuleId: 'number',
      priority: 'number',
      regId: 'string',
      ruleId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyRulePriorityResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyRulePriorityResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyRulePriorityResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyRulePriorityResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyRuleStatusRequest extends $tea.Model {
  lang?: string;
  applyUserId?: string;
  applyUserName?: string;
  auditRemark?: string;
  auditUserId?: string;
  auditUserName?: string;
  consoleRuleId?: number;
  eventType?: string;
  regId?: string;
  ruleAuditType?: string;
  ruleId?: string;
  ruleVersionId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      applyUserId: 'applyUserId',
      applyUserName: 'applyUserName',
      auditRemark: 'auditRemark',
      auditUserId: 'auditUserId',
      auditUserName: 'auditUserName',
      consoleRuleId: 'consoleRuleId',
      eventType: 'eventType',
      regId: 'regId',
      ruleAuditType: 'ruleAuditType',
      ruleId: 'ruleId',
      ruleVersionId: 'ruleVersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      applyUserId: 'string',
      applyUserName: 'string',
      auditRemark: 'string',
      auditUserId: 'string',
      auditUserName: 'string',
      consoleRuleId: 'number',
      eventType: 'string',
      regId: 'string',
      ruleAuditType: 'string',
      ruleId: 'string',
      ruleVersionId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyRuleStatusResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyRuleStatusResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyRuleStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyRuleStatusResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTemplateRequest extends $tea.Model {
  lang?: string;
  description?: string;
  eventCode?: string;
  inputFields?: ModifyTemplateRequestInputFields;
  regId?: string;
  templateId?: number;
  templateType?: string;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      description: 'description',
      eventCode: 'eventCode',
      inputFields: 'inputFields',
      regId: 'regId',
      templateId: 'templateId',
      templateType: 'templateType',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      description: 'string',
      eventCode: 'string',
      inputFields: ModifyTemplateRequestInputFields,
      regId: 'string',
      templateId: 'number',
      templateType: 'string',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTemplateResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTemplateResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyTemplateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyTemplateResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTemplateStatusRequest extends $tea.Model {
  lang?: string;
  fromTemplateSatus?: string;
  regId?: string;
  templateId?: number;
  toTemplateSatus?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      fromTemplateSatus: 'fromTemplateSatus',
      regId: 'regId',
      templateId: 'templateId',
      toTemplateSatus: 'toTemplateSatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      fromTemplateSatus: 'string',
      regId: 'string',
      templateId: 'number',
      toTemplateSatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTemplateStatusResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTemplateStatusResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyTemplateStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyTemplateStatusResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyVariableRequest extends $tea.Model {
  lang?: string;
  description?: string;
  id?: number;
  regId?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      description: 'description',
      id: 'id',
      regId: 'regId',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      description: 'string',
      id: 'number',
      regId: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenConsoleSlsRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  scene?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'regId',
      scene: 'scene',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      scene: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenConsoleSlsResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenConsoleSlsResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: OpenConsoleSlsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: OpenConsoleSlsResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OperateFavoriteVariableRequest extends $tea.Model {
  lang?: string;
  id?: number;
  operate?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      operate: 'operate',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      operate: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OperateFavoriteVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OperateFavoriteVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: OperateFavoriteVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: OperateFavoriteVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PermissionCheckRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'RegId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PermissionCheckResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      resultObject: 'ResultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PermissionCheckResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: PermissionCheckResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: PermissionCheckResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthRuleDetailByRuleIdRequest extends $tea.Model {
  lang?: string;
  consoleRuleId?: number;
  regId?: string;
  ruleId?: string;
  ruleVersionId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      consoleRuleId: 'consoleRuleId',
      regId: 'regId',
      ruleId: 'ruleId',
      ruleVersionId: 'ruleVersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      consoleRuleId: 'number',
      regId: 'string',
      ruleId: 'string',
      ruleVersionId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthRuleDetailByRuleIdResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: QueryAuthRuleDetailByRuleIdResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: QueryAuthRuleDetailByRuleIdResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthRuleDetailByRuleIdResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: QueryAuthRuleDetailByRuleIdResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: QueryAuthRuleDetailByRuleIdResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthUserNameRequest extends $tea.Model {
  lang?: string;
  bindId?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      bindId: 'bindId',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      bindId: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthUserNameResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: QueryAuthUserNameResponseBodyResultObject;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: QueryAuthUserNameResponseBodyResultObject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthUserNameResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: QueryAuthUserNameResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: QueryAuthUserNameResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthorizationUserListRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  eventCode?: string;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      eventCode: 'eventCode',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      eventCode: 'string',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthorizationUserListResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: QueryAuthorizationUserListResponseBodyResultObject[];
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: { 'type': 'array', 'itemType': QueryAuthorizationUserListResponseBodyResultObject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthorizationUserListResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: QueryAuthorizationUserListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: QueryAuthorizationUserListResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RecallRuleAuditRequest extends $tea.Model {
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RecallRuleAuditResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RecallRuleAuditResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RecallRuleAuditResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RecallRuleAuditResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveEventRequest extends $tea.Model {
  lang?: string;
  createType?: string;
  eventCode?: string;
  id?: number;
  regId?: string;
  templateCode?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      createType: 'createType',
      eventCode: 'eventCode',
      id: 'id',
      regId: 'regId',
      templateCode: 'templateCode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      createType: 'string',
      eventCode: 'string',
      id: 'number',
      regId: 'string',
      templateCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveEventResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveEventResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RemoveEventResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RemoveEventResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveTemplateRequest extends $tea.Model {
  lang?: string;
  eventCode?: string;
  regId?: string;
  templateId?: number;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventCode: 'eventCode',
      regId: 'regId',
      templateId: 'templateId',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventCode: 'string',
      regId: 'string',
      templateId: 'number',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveTemplateResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RemoveTemplateResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RemoveTemplateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RemoveTemplateResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SampleFileDownloadRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  tab?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'RegId',
      tab: 'Tab',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      tab: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SampleFileDownloadResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      resultObject: 'ResultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SampleFileDownloadResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SampleFileDownloadResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SampleFileDownloadResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnalysisColumnRequest extends $tea.Model {
  lang?: string;
  columns?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      columns: 'columns',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      columns: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnalysisColumnResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnalysisColumnResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SaveAnalysisColumnResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SaveAnalysisColumnResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveByPassOrShuntEventRequest extends $tea.Model {
  lang?: string;
  eventId?: number;
  eventName?: string;
  eventType?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventId: 'eventId',
      eventName: 'eventName',
      eventType: 'eventType',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventId: 'number',
      eventName: 'string',
      eventType: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveByPassOrShuntEventResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: boolean;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'boolean',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveByPassOrShuntEventResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SaveByPassOrShuntEventResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SaveByPassOrShuntEventResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartOrStopByPassShuntEventRequest extends $tea.Model {
  lang?: string;
  eventId?: number;
  regId?: string;
  status?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventId: 'eventId',
      regId: 'regId',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventId: 'number',
      regId: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartOrStopByPassShuntEventResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: boolean;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'boolean',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartOrStopByPassShuntEventResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: StartOrStopByPassShuntEventResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: StartOrStopByPassShuntEventResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartSimulationTaskRequest extends $tea.Model {
  lang?: string;
  id?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartSimulationTaskResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartSimulationTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: StartSimulationTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: StartSimulationTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopSimulationTaskRequest extends $tea.Model {
  lang?: string;
  id?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopSimulationTaskResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopSimulationTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: StopSimulationTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: StopSimulationTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitImportTaskRequest extends $tea.Model {
  lang?: string;
  fileName?: string;
  regId?: string;
  url?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      fileName: 'fileName',
      regId: 'regId',
      url: 'url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      fileName: 'string',
      regId: 'string',
      url: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitImportTaskResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitImportTaskResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SubmitImportTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SubmitImportTaskResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchExpressionVariableRequest extends $tea.Model {
  lang?: string;
  dataVersion?: number;
  id?: number;
  regId?: string;
  status?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      dataVersion: 'dataVersion',
      id: 'id',
      regId: 'regId',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      dataVersion: 'number',
      id: 'number',
      regId: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchExpressionVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchExpressionVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SwitchExpressionVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SwitchExpressionVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchFieldRequest extends $tea.Model {
  lang?: string;
  id?: number;
  name?: string;
  regId?: string;
  source?: string;
  status?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      name: 'name',
      regId: 'regId',
      source: 'source',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      name: 'string',
      regId: 'string',
      source: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchFieldResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchFieldResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SwitchFieldResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SwitchFieldResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchQueryVariableRequest extends $tea.Model {
  lang?: string;
  id?: number;
  regId?: string;
  status?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      id: 'id',
      regId: 'regId',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      id: 'number',
      regId: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchQueryVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchQueryVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SwitchQueryVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SwitchQueryVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchToOnlineRequest extends $tea.Model {
  lang?: string;
  eventId?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventId: 'eventId',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventId: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchToOnlineResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: boolean;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'boolean',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchToOnlineResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SwitchToOnlineResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SwitchToOnlineResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchVariableRequest extends $tea.Model {
  lang?: string;
  dataVersion?: number;
  id?: number;
  name?: string;
  regId?: string;
  status?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      dataVersion: 'dataVersion',
      id: 'id',
      name: 'name',
      regId: 'regId',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      dataVersion: 'number',
      id: 'number',
      name: 'string',
      regId: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SwitchVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SwitchVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SwitchVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TaskNameByUserIdRequest extends $tea.Model {
  lang?: string;
  regId?: string;
  taskName?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      regId: 'RegId',
      taskName: 'TaskName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      regId: 'string',
      taskName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TaskNameByUserIdResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      resultObject: 'ResultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TaskNameByUserIdResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TaskNameByUserIdResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TaskNameByUserIdResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAnalysisConditionFavoriteRequest extends $tea.Model {
  lang?: string;
  condition?: string;
  eventBeginTime?: number;
  eventCode?: string;
  eventEndTime?: number;
  fieldName?: string;
  fieldValue?: string;
  id?: number;
  name?: string;
  regId?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      condition: 'condition',
      eventBeginTime: 'eventBeginTime',
      eventCode: 'eventCode',
      eventEndTime: 'eventEndTime',
      fieldName: 'fieldName',
      fieldValue: 'fieldValue',
      id: 'id',
      name: 'name',
      regId: 'regId',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      condition: 'string',
      eventBeginTime: 'number',
      eventCode: 'string',
      eventEndTime: 'number',
      fieldName: 'string',
      fieldValue: 'string',
      id: 'number',
      name: 'string',
      regId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAnalysisConditionFavoriteResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAnalysisConditionFavoriteResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateAnalysisConditionFavoriteResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateAnalysisConditionFavoriteResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAuditRequest extends $tea.Model {
  lang?: string;
  auditMsg?: string;
  auditRelationType?: string;
  auditStatus?: string;
  id?: number;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      auditMsg: 'auditMsg',
      auditRelationType: 'auditRelationType',
      auditStatus: 'auditStatus',
      id: 'id',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      auditMsg: 'string',
      auditRelationType: 'string',
      auditStatus: 'string',
      id: 'number',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAuditResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  resultObject?: boolean;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      resultObject: 'boolean',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAuditResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateAuditResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateAuditResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAuthRuleRequest extends $tea.Model {
  lang?: string;
  consoleRuleId?: number;
  eventCode?: string;
  regId?: string;
  ruleActions?: string;
  ruleExpressions?: string;
  ruleId?: string;
  ruleVersionId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      consoleRuleId: 'consoleRuleId',
      eventCode: 'eventCode',
      regId: 'regId',
      ruleActions: 'ruleActions',
      ruleExpressions: 'ruleExpressions',
      ruleId: 'ruleId',
      ruleVersionId: 'ruleVersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      consoleRuleId: 'number',
      eventCode: 'string',
      regId: 'string',
      ruleActions: 'string',
      ruleExpressions: 'string',
      ruleId: 'string',
      ruleVersionId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAuthRuleResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAuthRuleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateAuthRuleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateAuthRuleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateByPassShuntEventRequest extends $tea.Model {
  lang?: string;
  eventId?: number;
  eventName?: string;
  regId?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      eventId: 'eventId',
      eventName: 'eventName',
      regId: 'regId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      eventId: 'number',
      eventName: 'string',
      regId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateByPassShuntEventResponseBody extends $tea.Model {
  code?: string;
  httpStatusCode?: string;
  message?: string;
  requestId?: string;
  resultObject?: boolean;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      httpStatusCode: 'httpStatusCode',
      message: 'message',
      requestId: 'requestId',
      resultObject: 'resultObject',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'string',
      message: 'string',
      requestId: 'string',
      resultObject: 'boolean',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateByPassShuntEventResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateByPassShuntEventResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateByPassShuntEventResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataSourceRequest extends $tea.Model {
  lang?: string;
  description?: string;
  id?: number;
  name?: string;
  ossKey?: string;
  regId?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      description: 'description',
      id: 'id',
      name: 'name',
      ossKey: 'ossKey',
      regId: 'regId',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      description: 'string',
      id: 'number',
      name: 'string',
      ossKey: 'string',
      regId: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataSourceResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataSourceResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateDataSourceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateDataSourceResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateQueryVariableRequest extends $tea.Model {
  lang?: string;
  dataSourceCode?: string;
  description?: string;
  eventCode?: string;
  expression?: string;
  expressionTitle?: string;
  expressionVariable?: string;
  id?: number;
  outlier?: string;
  outputs?: string;
  regId?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      dataSourceCode: 'dataSourceCode',
      description: 'description',
      eventCode: 'eventCode',
      expression: 'expression',
      expressionTitle: 'expressionTitle',
      expressionVariable: 'expressionVariable',
      id: 'id',
      outlier: 'outlier',
      outputs: 'outputs',
      regId: 'regId',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      dataSourceCode: 'string',
      description: 'string',
      eventCode: 'string',
      expression: 'string',
      expressionTitle: 'string',
      expressionVariable: 'string',
      id: 'number',
      outlier: 'string',
      outputs: 'string',
      regId: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateQueryVariableResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateQueryVariableResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateQueryVariableResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateQueryVariableResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateRuleRequest extends $tea.Model {
  lang?: string;
  consoleRuleId?: number;
  eventCode?: string;
  logicExpression?: string;
  memo?: string;
  regId?: string;
  ruleActions?: string;
  ruleExpressions?: string;
  ruleId?: string;
  ruleName?: string;
  ruleStatus?: string;
  ruleVersionId?: number;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      consoleRuleId: 'consoleRuleId',
      eventCode: 'eventCode',
      logicExpression: 'logicExpression',
      memo: 'memo',
      regId: 'regId',
      ruleActions: 'ruleActions',
      ruleExpressions: 'ruleExpressions',
      ruleId: 'ruleId',
      ruleName: 'ruleName',
      ruleStatus: 'ruleStatus',
      ruleVersionId: 'ruleVersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      consoleRuleId: 'number',
      eventCode: 'string',
      logicExpression: 'string',
      memo: 'string',
      regId: 'string',
      ruleActions: 'string',
      ruleExpressions: 'string',
      ruleId: 'string',
      ruleName: 'string',
      ruleStatus: 'string',
      ruleVersionId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateRuleResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateRuleResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateRuleResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateRuleResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateRuleBaseRequest extends $tea.Model {
  lang?: string;
  consoleRuleId?: number;
  eventCode?: string;
  memo?: string;
  regId?: string;
  ruleId?: string;
  ruleName?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      consoleRuleId: 'consoleRuleId',
      eventCode: 'eventCode',
      memo: 'memo',
      regId: 'regId',
      ruleId: 'ruleId',
      ruleName: 'ruleName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      consoleRuleId: 'number',
      eventCode: 'string',
      memo: 'string',
      regId: 'string',
      ruleId: 'string',
      ruleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateRuleBaseResponseBody extends $tea.Model {
  requestId?: string;
  resultObject?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'requestId',
      resultObject: 'resultObject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      resultObject: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateRuleBaseResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateRuleBaseResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateRuleBaseResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateSampleBatchRequest extends $tea.Model {
  lang?: string;
  ids?: string;
  regId?: string;
  tags?: string;
  versions?: string;
  static names(): { [key: string]: string } {
    return {
      lang: 'Lang',
      ids: 'ids',
      regId: 'regId',
      tags: 'tags',
      versions: 'versions',
    };
  }

  static types(): { [key: string]: any } {
    return {
      lang: 'string',
      ids: 'string',
      regId: 'string',
      tags: 'string',
      versions: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateSampleBatchResponseBody extends $tea.Model {
  requestId?: string;
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateSampleBatchResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UpdateSampleBatchResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UpdateSampleBatchResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadSampleApiRequest extends $tea.Model {
  dataType?: string;
  dataValue?: string;
  sampleType?: string;
  service?: string;
  static names(): { [key: string]: string } {
    return {
      dataType: 'DataType',
      dataValue: 'DataValue',
      sampleType: 'SampleType',
      service: 'Service',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataType: 'string',
      dataValue: 'string',
      sampleType: 'string',
      service: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadSampleApiResponseBody extends $tea.Model {
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadSampleApiResponse extends $tea.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UploadSampleApiResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UploadSampleApiResponseBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAnalysisExportTaskResponseBodyResultObject extends $tea.Model {
  columns?: string;
  conditions?: string;
  eventBeginTime?: number;
  eventCodes?: string;
  eventEndTime?: number;
  fileFormat?: string;
  ossKey?: string;
  scope?: string;
  status?: string;
  type?: string;
  userId?: number;
  static names(): { [key: string]: string } {
    return {
      columns: 'columns',
      conditions: 'conditions',
      eventBeginTime: 'eventBeginTime',
      eventCodes: 'eventCodes',
      eventEndTime: 'eventEndTime',
      fileFormat: 'fileFormat',
      ossKey: 'ossKey',
      scope: 'scope',
      status: 'status',
      type: 'type',
      userId: 'userId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columns: 'string',
      conditions: 'string',
      eventBeginTime: 'number',
      eventCodes: 'string',
      eventEndTime: 'number',
      fileFormat: 'string',
      ossKey: 'string',
      scope: 'string',
      status: 'string',
      type: 'string',
      userId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateSampleResponseBodyResultObject extends $tea.Model {
  communityCount?: number;
  failCount?: number;
  recallProbability?: string;
  riskDensity?: string;
  sampleCount?: number;
  successCount?: number;
  static names(): { [key: string]: string } {
    return {
      communityCount: 'communityCount',
      failCount: 'failCount',
      recallProbability: 'recallProbability',
      riskDensity: 'riskDensity',
      sampleCount: 'sampleCount',
      successCount: 'successCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      communityCount: 'number',
      failCount: 'number',
      recallProbability: 'string',
      riskDensity: 'string',
      sampleCount: 'number',
      successCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAdvanceSearchLeftVariableListResponseBodyResultObject extends $tea.Model {
  code?: string;
  description?: string;
  displayType?: string;
  fieldRank?: number;
  fieldType?: string;
  id?: number;
  name?: string;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      description: 'description',
      displayType: 'displayType',
      fieldRank: 'fieldRank',
      fieldType: 'fieldType',
      id: 'id',
      name: 'name',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      description: 'string',
      displayType: 'string',
      fieldRank: 'number',
      fieldType: 'string',
      id: 'number',
      name: 'string',
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAdvanceSearchPageListResponseBodyResultObjectHeader extends $tea.Model {
  fieldName?: string;
  fieldTitle?: string;
  isDefault?: boolean;
  static names(): { [key: string]: string } {
    return {
      fieldName: 'fieldName',
      fieldTitle: 'fieldTitle',
      isDefault: 'isDefault',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fieldName: 'string',
      fieldTitle: 'string',
      isDefault: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAdvanceSearchPageListResponseBodyResultObject extends $tea.Model {
  currentPage?: number;
  data?: { [key: string]: any }[];
  header?: DescribeAdvanceSearchPageListResponseBodyResultObjectHeader[];
  pageSize?: number;
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      currentPage: 'currentPage',
      data: 'data',
      header: 'header',
      pageSize: 'pageSize',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPage: 'number',
      data: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
      header: { 'type': 'array', 'itemType': DescribeAdvanceSearchPageListResponseBodyResultObjectHeader },
      pageSize: 'number',
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllDataSourceResponseBodyResultObject extends $tea.Model {
  eventCode?: string;
  eventName?: string;
  id?: number;
  static names(): { [key: string]: string } {
    return {
      eventCode: 'eventCode',
      eventName: 'eventName',
      id: 'id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      eventCode: 'string',
      eventName: 'string',
      id: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllEventNameAndCodeResponseBodyResultObjectChildren extends $tea.Model {
  createType?: string;
  eventCode?: string;
  eventName?: string;
  eventType?: string;
  static names(): { [key: string]: string } {
    return {
      createType: 'createType',
      eventCode: 'eventCode',
      eventName: 'eventName',
      eventType: 'eventType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createType: 'string',
      eventCode: 'string',
      eventName: 'string',
      eventType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllEventNameAndCodeResponseBodyResultObject extends $tea.Model {
  children?: DescribeAllEventNameAndCodeResponseBodyResultObjectChildren[];
  createType?: string;
  eventCode?: string;
  eventName?: string;
  eventType?: string;
  static names(): { [key: string]: string } {
    return {
      children: 'children',
      createType: 'createType',
      eventCode: 'eventCode',
      eventName: 'eventName',
      eventType: 'eventType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      children: { 'type': 'array', 'itemType': DescribeAllEventNameAndCodeResponseBodyResultObjectChildren },
      createType: 'string',
      eventCode: 'string',
      eventName: 'string',
      eventType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllRootVariableResponseBodyResultObjectOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAllRootVariableResponseBodyResultObject extends $tea.Model {
  code?: string;
  description?: string;
  displayType?: string;
  favoriteFlag?: boolean;
  fieldRank?: number;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputs?: string;
  name?: string;
  outputThreshold?: DescribeAllRootVariableResponseBodyResultObjectOutputThreshold;
  sourceType?: string;
  title?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      description: 'description',
      displayType: 'displayType',
      favoriteFlag: 'favoriteFlag',
      fieldRank: 'fieldRank',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputs: 'inputs',
      name: 'name',
      outputThreshold: 'outputThreshold',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      description: 'string',
      displayType: 'string',
      favoriteFlag: 'boolean',
      fieldRank: 'number',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputs: 'string',
      name: 'string',
      outputThreshold: DescribeAllRootVariableResponseBodyResultObjectOutputThreshold,
      sourceType: 'string',
      title: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisColumnListResponseBodyResultObject extends $tea.Model {
  eventCode?: string;
  eventName?: string;
  isDefault?: boolean;
  variableName?: string;
  variableTitle?: string;
  variableType?: string;
  static names(): { [key: string]: string } {
    return {
      eventCode: 'eventCode',
      eventName: 'eventName',
      isDefault: 'isDefault',
      variableName: 'variableName',
      variableTitle: 'variableTitle',
      variableType: 'variableType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      eventCode: 'string',
      eventName: 'string',
      isDefault: 'boolean',
      variableName: 'string',
      variableTitle: 'string',
      variableType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisConditionFavoriteListResponseBodyResultObject extends $tea.Model {
  condition?: string;
  eventBeginTime?: number;
  eventCodes?: string;
  eventEndTime?: number;
  fieldName?: string;
  fieldValue?: string;
  id?: number;
  name?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      condition: 'condition',
      eventBeginTime: 'eventBeginTime',
      eventCodes: 'eventCodes',
      eventEndTime: 'eventEndTime',
      fieldName: 'fieldName',
      fieldValue: 'fieldValue',
      id: 'id',
      name: 'name',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      condition: 'string',
      eventBeginTime: 'number',
      eventCodes: 'string',
      eventEndTime: 'number',
      fieldName: 'string',
      fieldValue: 'string',
      id: 'number',
      name: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject extends $tea.Model {
  downloadFileUrl?: string;
  executeTime?: number;
  status?: string;
  static names(): { [key: string]: string } {
    return {
      downloadFileUrl: 'downloadFileUrl',
      executeTime: 'executeTime',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downloadFileUrl: 'string',
      executeTime: 'number',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiLimitResponseBodyResultObject extends $tea.Model {
  limit?: boolean;
  maxTotalItem?: number;
  totalItem?: number;
  static names(): { [key: string]: string } {
    return {
      limit: 'limit',
      maxTotalItem: 'maxTotalItem',
      totalItem: 'totalItem',
    };
  }

  static types(): { [key: string]: any } {
    return {
      limit: 'boolean',
      maxTotalItem: 'number',
      totalItem: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiNameListResponseBodyResultObject extends $tea.Model {
  apiId?: string;
  apiName?: string;
  static names(): { [key: string]: string } {
    return {
      apiId: 'apiId',
      apiName: 'apiName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      apiId: 'string',
      apiName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAppKeyPageResponseBodyResultObject extends $tea.Model {
  androidSdkUrl?: string;
  androidSdkVersion?: string;
  appKey?: string;
  gmtCreate?: number;
  iosSdkUrl?: string;
  iosSdkVersion?: string;
  memo?: string;
  sdkItems?: string;
  used?: string;
  static names(): { [key: string]: string } {
    return {
      androidSdkUrl: 'androidSdkUrl',
      androidSdkVersion: 'androidSdkVersion',
      appKey: 'appKey',
      gmtCreate: 'gmtCreate',
      iosSdkUrl: 'iosSdkUrl',
      iosSdkVersion: 'iosSdkVersion',
      memo: 'memo',
      sdkItems: 'sdkItems',
      used: 'used',
    };
  }

  static types(): { [key: string]: any } {
    return {
      androidSdkUrl: 'string',
      androidSdkVersion: 'string',
      appKey: 'string',
      gmtCreate: 'number',
      iosSdkUrl: 'string',
      iosSdkVersion: 'string',
      memo: 'string',
      sdkItems: 'string',
      used: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthRulePageListResponseBodyResultObject extends $tea.Model {
  consoleRuleId?: number;
  createType?: string;
  gmtModified?: number;
  id?: number;
  memo?: string;
  ruleId?: string;
  ruleName?: string;
  ruleVersionId?: number;
  status?: string;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      consoleRuleId: 'consoleRuleId',
      createType: 'createType',
      gmtModified: 'gmtModified',
      id: 'id',
      memo: 'memo',
      ruleId: 'ruleId',
      ruleName: 'ruleName',
      ruleVersionId: 'ruleVersionId',
      status: 'status',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleRuleId: 'number',
      createType: 'string',
      gmtModified: 'number',
      id: 'number',
      memo: 'string',
      ruleId: 'string',
      ruleName: 'string',
      ruleVersionId: 'number',
      status: 'string',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthSceneListResponseBodyResultObject extends $tea.Model {
  serviceCode?: string;
  static names(): { [key: string]: string } {
    return {
      serviceCode: 'serviceCode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      serviceCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAuthScenePageListResponseBodyResultObject extends $tea.Model {
  commonRuleCount?: number;
  customRuleCount?: number;
  eventCode?: string;
  sceneName?: string;
  serverName?: string;
  static names(): { [key: string]: string } {
    return {
      commonRuleCount: 'commonRuleCount',
      customRuleCount: 'customRuleCount',
      eventCode: 'eventCode',
      sceneName: 'sceneName',
      serverName: 'serverName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonRuleCount: 'number',
      customRuleCount: 'number',
      eventCode: 'string',
      sceneName: 'string',
      serverName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeAvgExecuteCostReportResponseBodyResultObject extends $tea.Model {
  ratio?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      ratio: 'ratio',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ratio: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBasicSearchPageListResponseBodyResultObjectHeader extends $tea.Model {
  fieldName?: string;
  fieldTitle?: string;
  isDefault?: boolean;
  static names(): { [key: string]: string } {
    return {
      fieldName: 'fieldName',
      fieldTitle: 'fieldTitle',
      isDefault: 'isDefault',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fieldName: 'string',
      fieldTitle: 'string',
      isDefault: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBasicSearchPageListResponseBodyResultObject extends $tea.Model {
  currentPage?: number;
  data?: { [key: string]: any }[];
  header?: DescribeBasicSearchPageListResponseBodyResultObjectHeader[];
  pageSize?: number;
  totalItem?: number;
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      currentPage: 'currentPage',
      data: 'data',
      header: 'header',
      pageSize: 'pageSize',
      totalItem: 'totalItem',
      totalPage: 'totalPage',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPage: 'number',
      data: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
      header: { 'type': 'array', 'itemType': DescribeBasicSearchPageListResponseBodyResultObjectHeader },
      pageSize: 'number',
      totalItem: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeByPassShuntEventResponseBodyResultObject extends $tea.Model {
  eventName?: string;
  static names(): { [key: string]: string } {
    return {
      eventName: 'eventName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      eventName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustVariableConfigListResponseBodyResultObject extends $tea.Model {
  configKey?: string;
  configValue?: string;
  static names(): { [key: string]: string } {
    return {
      configKey: 'configKey',
      configValue: 'configValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configKey: 'string',
      configValue: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustVariableDetailResponseBodyResultObject extends $tea.Model {
  condition?: string;
  dataVersion?: number;
  description?: string;
  eventCodes?: string;
  historyValueType?: string;
  id?: number;
  object?: string;
  outputs?: string;
  subject?: string;
  timeType?: string;
  title?: string;
  twCount?: string;
  velocityFC?: string;
  velocityTW?: string;
  static names(): { [key: string]: string } {
    return {
      condition: 'condition',
      dataVersion: 'dataVersion',
      description: 'description',
      eventCodes: 'eventCodes',
      historyValueType: 'historyValueType',
      id: 'id',
      object: 'object',
      outputs: 'outputs',
      subject: 'subject',
      timeType: 'timeType',
      title: 'title',
      twCount: 'twCount',
      velocityFC: 'velocityFC',
      velocityTW: 'velocityTW',
    };
  }

  static types(): { [key: string]: any } {
    return {
      condition: 'string',
      dataVersion: 'number',
      description: 'string',
      eventCodes: 'string',
      historyValueType: 'string',
      id: 'number',
      object: 'string',
      outputs: 'string',
      subject: 'string',
      timeType: 'string',
      title: 'string',
      twCount: 'string',
      velocityFC: 'string',
      velocityTW: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeCustVariablePageResponseBodyResultObject extends $tea.Model {
  dataVersion?: number;
  description?: string;
  gmtModified?: number;
  id?: number;
  name?: string;
  status?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      dataVersion: 'dataVersion',
      description: 'description',
      gmtModified: 'gmtModified',
      id: 'id',
      name: 'name',
      status: 'status',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataVersion: 'number',
      description: 'string',
      gmtModified: 'number',
      id: 'number',
      name: 'string',
      status: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDataSourceDataDownloadUrlResponseBodyResultObject extends $tea.Model {
  downloadFileUrl?: string;
  static names(): { [key: string]: string } {
    return {
      downloadFileUrl: 'downloadFileUrl',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downloadFileUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDataSourcePageListResponseBodyResultObject extends $tea.Model {
  creator?: string;
  description?: string;
  gmtCreate?: string;
  gmtModified?: string;
  id?: number;
  modifier?: string;
  name?: string;
  total?: number;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      creator: 'creator',
      description: 'description',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      modifier: 'modifier',
      name: 'name',
      total: 'total',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creator: 'string',
      description: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      id: 'number',
      modifier: 'string',
      name: 'string',
      total: 'number',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDecisionResultFluctuationResponseBodyResultObject extends $tea.Model {
  status?: string;
  todayNum?: number;
  withinSevenDayNum?: string;
  withinThirtyDayNum?: string;
  withinThreeDayNum?: string;
  yesterdayNum?: number;
  static names(): { [key: string]: string } {
    return {
      status: 'status',
      todayNum: 'todayNum',
      withinSevenDayNum: 'withinSevenDayNum',
      withinThirtyDayNum: 'withinThirtyDayNum',
      withinThreeDayNum: 'withinThreeDayNum',
      yesterdayNum: 'yesterdayNum',
    };
  }

  static types(): { [key: string]: any } {
    return {
      status: 'string',
      todayNum: 'number',
      withinSevenDayNum: 'string',
      withinThirtyDayNum: 'string',
      withinThreeDayNum: 'string',
      yesterdayNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDecisionResultTrendResponseBodyResultObjectSeriesData extends $tea.Model {
  num?: number;
  scale?: string;
  static names(): { [key: string]: string } {
    return {
      num: 'num',
      scale: 'scale',
    };
  }

  static types(): { [key: string]: any } {
    return {
      num: 'number',
      scale: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDecisionResultTrendResponseBodyResultObjectSeries extends $tea.Model {
  data?: DescribeDecisionResultTrendResponseBodyResultObjectSeriesData[];
  name?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': DescribeDecisionResultTrendResponseBodyResultObjectSeriesData },
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDecisionResultTrendResponseBodyResultObjectXaxis extends $tea.Model {
  data?: string[];
  static names(): { [key: string]: string } {
    return {
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDecisionResultTrendResponseBodyResultObject extends $tea.Model {
  series?: DescribeDecisionResultTrendResponseBodyResultObjectSeries[];
  xaxis?: DescribeDecisionResultTrendResponseBodyResultObjectXaxis;
  static names(): { [key: string]: string } {
    return {
      series: 'series',
      xaxis: 'xaxis',
    };
  }

  static types(): { [key: string]: any } {
    return {
      series: { 'type': 'array', 'itemType': DescribeDecisionResultTrendResponseBodyResultObjectSeries },
      xaxis: DescribeDecisionResultTrendResponseBodyResultObjectXaxis,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields extends $tea.Model {
  description?: string;
  fieldCode?: string;
  fieldRank?: string;
  fieldSource?: string;
  fieldType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'description',
      fieldCode: 'fieldCode',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      fieldCode: 'string',
      fieldRank: 'string',
      fieldSource: 'string',
      fieldType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails extends $tea.Model {
  logicExpression?: string;
  memo?: string;
  ruleActions?: string;
  ruleAuthType?: string;
  ruleExpressions?: string;
  ruleId?: string;
  ruleName?: string;
  ruleStatus?: string;
  static names(): { [key: string]: string } {
    return {
      logicExpression: 'logicExpression',
      memo: 'memo',
      ruleActions: 'ruleActions',
      ruleAuthType: 'ruleAuthType',
      ruleExpressions: 'ruleExpressions',
      ruleId: 'ruleId',
      ruleName: 'ruleName',
      ruleStatus: 'ruleStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logicExpression: 'string',
      memo: 'string',
      ruleActions: 'string',
      ruleAuthType: 'string',
      ruleExpressions: 'string',
      ruleId: 'string',
      ruleName: 'string',
      ruleStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventBaseInfoByEventCodeResponseBodyResultObject extends $tea.Model {
  bizVersion?: number;
  eventCode?: string;
  eventName?: string;
  eventStauts?: string;
  inputFields?: DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields[];
  memo?: string;
  ruleDetails?: DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails[];
  templateCode?: string;
  templateName?: string;
  templateType?: string;
  static names(): { [key: string]: string } {
    return {
      bizVersion: 'bizVersion',
      eventCode: 'eventCode',
      eventName: 'eventName',
      eventStauts: 'eventStauts',
      inputFields: 'inputFields',
      memo: 'memo',
      ruleDetails: 'ruleDetails',
      templateCode: 'templateCode',
      templateName: 'templateName',
      templateType: 'templateType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizVersion: 'number',
      eventCode: 'string',
      eventName: 'string',
      eventStauts: 'string',
      inputFields: { 'type': 'array', 'itemType': DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields },
      memo: 'string',
      ruleDetails: { 'type': 'array', 'itemType': DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails },
      templateCode: 'string',
      templateName: 'string',
      templateType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventCountResponseBodyResultObject extends $tea.Model {
  limit?: boolean;
  maxTotalItem?: number;
  totalItem?: number;
  static names(): { [key: string]: string } {
    return {
      limit: 'limit',
      maxTotalItem: 'maxTotalItem',
      totalItem: 'totalItem',
    };
  }

  static types(): { [key: string]: any } {
    return {
      limit: 'boolean',
      maxTotalItem: 'number',
      totalItem: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventLogPageResponseBodyResultObject extends $tea.Model {
  accountId?: string;
  email?: string;
  ip?: string;
  mobile?: string;
  nickName?: string;
  requestId?: string;
  score?: string;
  service?: string;
  tags?: string;
  timestamp?: string;
  umid?: string;
  static names(): { [key: string]: string } {
    return {
      accountId: 'accountId',
      email: 'email',
      ip: 'ip',
      mobile: 'mobile',
      nickName: 'nickName',
      requestId: 'requestId',
      score: 'score',
      service: 'service',
      tags: 'tags',
      timestamp: 'timestamp',
      umid: 'umid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accountId: 'string',
      email: 'string',
      ip: 'string',
      mobile: 'string',
      nickName: 'string',
      requestId: 'string',
      score: 'string',
      service: 'string',
      tags: 'string',
      timestamp: 'string',
      umid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventPageListResponseBodyResultObjectChildren extends $tea.Model {
  eventCode?: string;
  eventName?: string;
  eventStatus?: string;
  eventType?: string;
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  ruleCount?: number;
  static names(): { [key: string]: string } {
    return {
      eventCode: 'eventCode',
      eventName: 'eventName',
      eventStatus: 'eventStatus',
      eventType: 'eventType',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      ruleCount: 'ruleCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      eventCode: 'string',
      eventName: 'string',
      eventStatus: 'string',
      eventType: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      ruleCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventPageListResponseBodyResultObject extends $tea.Model {
  children?: DescribeEventPageListResponseBodyResultObjectChildren[];
  eventCode?: string;
  eventName?: string;
  eventStatus?: string;
  eventType?: string;
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  ruleCount?: number;
  templateCode?: string;
  templateName?: string;
  templateType?: string;
  userCount?: number;
  static names(): { [key: string]: string } {
    return {
      children: 'children',
      eventCode: 'eventCode',
      eventName: 'eventName',
      eventStatus: 'eventStatus',
      eventType: 'eventType',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      ruleCount: 'ruleCount',
      templateCode: 'templateCode',
      templateName: 'templateName',
      templateType: 'templateType',
      userCount: 'userCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      children: { 'type': 'array', 'itemType': DescribeEventPageListResponseBodyResultObjectChildren },
      eventCode: 'string',
      eventName: 'string',
      eventStatus: 'string',
      eventType: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      ruleCount: 'number',
      templateCode: 'string',
      templateName: 'string',
      templateType: 'string',
      userCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventResultBarChartResponseBodyResultObjectSeriesData extends $tea.Model {
  num?: number;
  scale?: string;
  static names(): { [key: string]: string } {
    return {
      num: 'num',
      scale: 'scale',
    };
  }

  static types(): { [key: string]: any } {
    return {
      num: 'number',
      scale: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventResultBarChartResponseBodyResultObjectSeries extends $tea.Model {
  data?: DescribeEventResultBarChartResponseBodyResultObjectSeriesData[];
  name?: string;
  stack?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
      stack: 'stack',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': DescribeEventResultBarChartResponseBodyResultObjectSeriesData },
      name: 'string',
      stack: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventResultBarChartResponseBodyResultObjectXaxis extends $tea.Model {
  data?: string[];
  static names(): { [key: string]: string } {
    return {
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventResultBarChartResponseBodyResultObject extends $tea.Model {
  series?: DescribeEventResultBarChartResponseBodyResultObjectSeries[];
  xaxis?: DescribeEventResultBarChartResponseBodyResultObjectXaxis;
  static names(): { [key: string]: string } {
    return {
      series: 'series',
      xaxis: 'xaxis',
    };
  }

  static types(): { [key: string]: any } {
    return {
      series: { 'type': 'array', 'itemType': DescribeEventResultBarChartResponseBodyResultObjectSeries },
      xaxis: DescribeEventResultBarChartResponseBodyResultObjectXaxis,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventResultListResponseBodyResultObject extends $tea.Model {
  eventCode?: string;
  eventName?: string;
  passNum?: number;
  pendingNum?: number;
  rejectNum?: number;
  totalNum?: number;
  static names(): { [key: string]: string } {
    return {
      eventCode: 'eventCode',
      eventName: 'eventName',
      passNum: 'passNum',
      pendingNum: 'pendingNum',
      rejectNum: 'rejectNum',
      totalNum: 'totalNum',
    };
  }

  static types(): { [key: string]: any } {
    return {
      eventCode: 'string',
      eventName: 'string',
      passNum: 'number',
      pendingNum: 'number',
      rejectNum: 'number',
      totalNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventTaskHistoryResponseBodyResultObject extends $tea.Model {
  taskCode?: string;
  taskName?: string;
  taskStatus?: string;
  url?: string;
  static names(): { [key: string]: string } {
    return {
      taskCode: 'taskCode',
      taskName: 'taskName',
      taskStatus: 'taskStatus',
      url: 'url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskCode: 'string',
      taskName: 'string',
      taskStatus: 'string',
      url: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventTotalCountReportResponseBodyResultObject extends $tea.Model {
  ratio?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      ratio: 'ratio',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ratio: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity extends $tea.Model {
  iv?: string;
  static names(): { [key: string]: string } {
    return {
      iv: 'iv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      iv: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectActions extends $tea.Model {
  code?: string;
  dataDisplay?: string;
  defineId?: string;
  description?: string;
  displayType?: string;
  expressionTitle?: string;
  favoriteFlag?: boolean;
  fieldDetail?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputRequired?: string;
  inputs?: string;
  name?: string;
  outlier?: string;
  outputThreshold?: DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  variableVelocity?: DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      dataDisplay: 'dataDisplay',
      defineId: 'defineId',
      description: 'description',
      displayType: 'displayType',
      expressionTitle: 'expressionTitle',
      favoriteFlag: 'favoriteFlag',
      fieldDetail: 'fieldDetail',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      name: 'name',
      outlier: 'outlier',
      outputThreshold: 'outputThreshold',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      variableVelocity: 'variableVelocity',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dataDisplay: 'string',
      defineId: 'string',
      description: 'string',
      displayType: 'string',
      expressionTitle: 'string',
      favoriteFlag: 'boolean',
      fieldDetail: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputRequired: 'string',
      inputs: 'string',
      name: 'string',
      outlier: 'string',
      outputThreshold: DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold,
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      variableVelocity: DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity,
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity extends $tea.Model {
  iv?: string;
  static names(): { [key: string]: string } {
    return {
      iv: 'iv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      iv: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectDeviceVariables extends $tea.Model {
  code?: string;
  dataDisplay?: string;
  defineId?: string;
  description?: string;
  displayType?: string;
  expressionTitle?: string;
  favoriteFlag?: boolean;
  fieldDetail?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputRequired?: string;
  inputs?: string;
  name?: string;
  outlier?: string;
  outputThreshold?: DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  variableVelocity?: DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      dataDisplay: 'dataDisplay',
      defineId: 'defineId',
      description: 'description',
      displayType: 'displayType',
      expressionTitle: 'expressionTitle',
      favoriteFlag: 'favoriteFlag',
      fieldDetail: 'fieldDetail',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      name: 'name',
      outlier: 'outlier',
      outputThreshold: 'outputThreshold',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      variableVelocity: 'variableVelocity',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dataDisplay: 'string',
      defineId: 'string',
      description: 'string',
      displayType: 'string',
      expressionTitle: 'string',
      favoriteFlag: 'boolean',
      fieldDetail: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputRequired: 'string',
      inputs: 'string',
      name: 'string',
      outlier: 'string',
      outputThreshold: DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold,
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      variableVelocity: DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity,
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity extends $tea.Model {
  iv?: string;
  static names(): { [key: string]: string } {
    return {
      iv: 'iv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      iv: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectExpressionVariables extends $tea.Model {
  code?: string;
  dataDisplay?: string;
  defineId?: string;
  description?: string;
  displayType?: string;
  expressionTitle?: string;
  favoriteFlag?: boolean;
  fieldDetail?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputRequired?: string;
  inputs?: string;
  name?: string;
  outlier?: string;
  outputThreshold?: DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  variableVelocity?: DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      dataDisplay: 'dataDisplay',
      defineId: 'defineId',
      description: 'description',
      displayType: 'displayType',
      expressionTitle: 'expressionTitle',
      favoriteFlag: 'favoriteFlag',
      fieldDetail: 'fieldDetail',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      name: 'name',
      outlier: 'outlier',
      outputThreshold: 'outputThreshold',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      variableVelocity: 'variableVelocity',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dataDisplay: 'string',
      defineId: 'string',
      description: 'string',
      displayType: 'string',
      expressionTitle: 'string',
      favoriteFlag: 'boolean',
      fieldDetail: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputRequired: 'string',
      inputs: 'string',
      name: 'string',
      outlier: 'string',
      outputThreshold: DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold,
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      variableVelocity: DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity,
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity extends $tea.Model {
  iv?: string;
  static names(): { [key: string]: string } {
    return {
      iv: 'iv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      iv: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectFavoriteVariables extends $tea.Model {
  code?: string;
  dataDisplay?: string;
  defineId?: string;
  description?: string;
  displayType?: string;
  expressionTitle?: string;
  favoriteFlag?: boolean;
  fieldDetail?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputRequired?: string;
  inputs?: string;
  name?: string;
  outlier?: string;
  outputThreshold?: DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  variableVelocity?: DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      dataDisplay: 'dataDisplay',
      defineId: 'defineId',
      description: 'description',
      displayType: 'displayType',
      expressionTitle: 'expressionTitle',
      favoriteFlag: 'favoriteFlag',
      fieldDetail: 'fieldDetail',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      name: 'name',
      outlier: 'outlier',
      outputThreshold: 'outputThreshold',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      variableVelocity: 'variableVelocity',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dataDisplay: 'string',
      defineId: 'string',
      description: 'string',
      displayType: 'string',
      expressionTitle: 'string',
      favoriteFlag: 'boolean',
      fieldDetail: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputRequired: 'string',
      inputs: 'string',
      name: 'string',
      outlier: 'string',
      outputThreshold: DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold,
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      variableVelocity: DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity,
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity extends $tea.Model {
  iv?: string;
  static names(): { [key: string]: string } {
    return {
      iv: 'iv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      iv: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectMiddleVariables extends $tea.Model {
  code?: string;
  dataDisplay?: string;
  defineId?: string;
  description?: string;
  displayType?: string;
  expressionTitle?: string;
  favoriteFlag?: boolean;
  fieldDetail?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputRequired?: string;
  inputs?: string;
  name?: string;
  outlier?: string;
  outputThreshold?: DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  variableVelocity?: DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      dataDisplay: 'dataDisplay',
      defineId: 'defineId',
      description: 'description',
      displayType: 'displayType',
      expressionTitle: 'expressionTitle',
      favoriteFlag: 'favoriteFlag',
      fieldDetail: 'fieldDetail',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      name: 'name',
      outlier: 'outlier',
      outputThreshold: 'outputThreshold',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      variableVelocity: 'variableVelocity',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dataDisplay: 'string',
      defineId: 'string',
      description: 'string',
      displayType: 'string',
      expressionTitle: 'string',
      favoriteFlag: 'boolean',
      fieldDetail: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputRequired: 'string',
      inputs: 'string',
      name: 'string',
      outlier: 'string',
      outputThreshold: DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold,
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      variableVelocity: DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity,
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity extends $tea.Model {
  iv?: string;
  static names(): { [key: string]: string } {
    return {
      iv: 'iv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      iv: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectModelVariables extends $tea.Model {
  code?: string;
  dataDisplay?: string;
  defineId?: string;
  description?: string;
  displayType?: string;
  expressionTitle?: string;
  favoriteFlag?: boolean;
  fieldDetail?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputRequired?: string;
  inputs?: string;
  name?: string;
  outlier?: string;
  outputThreshold?: DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  variableVelocity?: DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      dataDisplay: 'dataDisplay',
      defineId: 'defineId',
      description: 'description',
      displayType: 'displayType',
      expressionTitle: 'expressionTitle',
      favoriteFlag: 'favoriteFlag',
      fieldDetail: 'fieldDetail',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      name: 'name',
      outlier: 'outlier',
      outputThreshold: 'outputThreshold',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      variableVelocity: 'variableVelocity',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dataDisplay: 'string',
      defineId: 'string',
      description: 'string',
      displayType: 'string',
      expressionTitle: 'string',
      favoriteFlag: 'boolean',
      fieldDetail: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputRequired: 'string',
      inputs: 'string',
      name: 'string',
      outlier: 'string',
      outputThreshold: DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold,
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      variableVelocity: DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity,
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity extends $tea.Model {
  iv?: string;
  static names(): { [key: string]: string } {
    return {
      iv: 'iv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      iv: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectNameList extends $tea.Model {
  code?: string;
  dataDisplay?: string;
  defineId?: string;
  description?: string;
  displayType?: string;
  expressionTitle?: string;
  favoriteFlag?: boolean;
  fieldDetail?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputRequired?: string;
  inputs?: string;
  name?: string;
  outlier?: string;
  outputThreshold?: DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  variableVelocity?: DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      dataDisplay: 'dataDisplay',
      defineId: 'defineId',
      description: 'description',
      displayType: 'displayType',
      expressionTitle: 'expressionTitle',
      favoriteFlag: 'favoriteFlag',
      fieldDetail: 'fieldDetail',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      name: 'name',
      outlier: 'outlier',
      outputThreshold: 'outputThreshold',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      variableVelocity: 'variableVelocity',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dataDisplay: 'string',
      defineId: 'string',
      description: 'string',
      displayType: 'string',
      expressionTitle: 'string',
      favoriteFlag: 'boolean',
      fieldDetail: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputRequired: 'string',
      inputs: 'string',
      name: 'string',
      outlier: 'string',
      outputThreshold: DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold,
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      variableVelocity: DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity,
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity extends $tea.Model {
  iv?: string;
  static names(): { [key: string]: string } {
    return {
      iv: 'iv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      iv: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions extends $tea.Model {
  code?: string;
  dataDisplay?: string;
  defineId?: string;
  description?: string;
  displayType?: string;
  expressionTitle?: string;
  favoriteFlag?: boolean;
  fieldDetail?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputRequired?: string;
  inputs?: string;
  name?: string;
  outlier?: string;
  outputThreshold?: DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  variableVelocity?: DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      dataDisplay: 'dataDisplay',
      defineId: 'defineId',
      description: 'description',
      displayType: 'displayType',
      expressionTitle: 'expressionTitle',
      favoriteFlag: 'favoriteFlag',
      fieldDetail: 'fieldDetail',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      name: 'name',
      outlier: 'outlier',
      outputThreshold: 'outputThreshold',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      variableVelocity: 'variableVelocity',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dataDisplay: 'string',
      defineId: 'string',
      description: 'string',
      displayType: 'string',
      expressionTitle: 'string',
      favoriteFlag: 'boolean',
      fieldDetail: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputRequired: 'string',
      inputs: 'string',
      name: 'string',
      outlier: 'string',
      outputThreshold: DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold,
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      variableVelocity: DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity,
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity extends $tea.Model {
  iv?: string;
  static names(): { [key: string]: string } {
    return {
      iv: 'iv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      iv: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectNativeVariables extends $tea.Model {
  code?: string;
  dataDisplay?: string;
  defineId?: string;
  description?: string;
  displayType?: string;
  expressionTitle?: string;
  favoriteFlag?: boolean;
  fieldDetail?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputRequired?: string;
  inputs?: string;
  name?: string;
  outlier?: string;
  outputThreshold?: DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  variableVelocity?: DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      dataDisplay: 'dataDisplay',
      defineId: 'defineId',
      description: 'description',
      displayType: 'displayType',
      expressionTitle: 'expressionTitle',
      favoriteFlag: 'favoriteFlag',
      fieldDetail: 'fieldDetail',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      name: 'name',
      outlier: 'outlier',
      outputThreshold: 'outputThreshold',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      variableVelocity: 'variableVelocity',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dataDisplay: 'string',
      defineId: 'string',
      description: 'string',
      displayType: 'string',
      expressionTitle: 'string',
      favoriteFlag: 'boolean',
      fieldDetail: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputRequired: 'string',
      inputs: 'string',
      name: 'string',
      outlier: 'string',
      outputThreshold: DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold,
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      variableVelocity: DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity,
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity extends $tea.Model {
  iv?: string;
  static names(): { [key: string]: string } {
    return {
      iv: 'iv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      iv: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectQueryVariables extends $tea.Model {
  code?: string;
  dataDisplay?: string;
  defineId?: string;
  description?: string;
  displayType?: string;
  expressionTitle?: string;
  favoriteFlag?: boolean;
  fieldDetail?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputRequired?: string;
  inputs?: string;
  name?: string;
  outlier?: string;
  outputThreshold?: DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  variableVelocity?: DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      dataDisplay: 'dataDisplay',
      defineId: 'defineId',
      description: 'description',
      displayType: 'displayType',
      expressionTitle: 'expressionTitle',
      favoriteFlag: 'favoriteFlag',
      fieldDetail: 'fieldDetail',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      name: 'name',
      outlier: 'outlier',
      outputThreshold: 'outputThreshold',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      variableVelocity: 'variableVelocity',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dataDisplay: 'string',
      defineId: 'string',
      description: 'string',
      displayType: 'string',
      expressionTitle: 'string',
      favoriteFlag: 'boolean',
      fieldDetail: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputRequired: 'string',
      inputs: 'string',
      name: 'string',
      outlier: 'string',
      outputThreshold: DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold,
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      variableVelocity: DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity,
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity extends $tea.Model {
  iv?: string;
  static names(): { [key: string]: string } {
    return {
      iv: 'iv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      iv: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectSelfVariables extends $tea.Model {
  code?: string;
  dataDisplay?: string;
  defineId?: string;
  description?: string;
  displayType?: string;
  expressionTitle?: string;
  favoriteFlag?: boolean;
  fieldDetail?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputRequired?: string;
  inputs?: string;
  name?: string;
  outlier?: string;
  outputThreshold?: DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  variableVelocity?: DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      dataDisplay: 'dataDisplay',
      defineId: 'defineId',
      description: 'description',
      displayType: 'displayType',
      expressionTitle: 'expressionTitle',
      favoriteFlag: 'favoriteFlag',
      fieldDetail: 'fieldDetail',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      name: 'name',
      outlier: 'outlier',
      outputThreshold: 'outputThreshold',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      variableVelocity: 'variableVelocity',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dataDisplay: 'string',
      defineId: 'string',
      description: 'string',
      displayType: 'string',
      expressionTitle: 'string',
      favoriteFlag: 'boolean',
      fieldDetail: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputRequired: 'string',
      inputs: 'string',
      name: 'string',
      outlier: 'string',
      outputThreshold: DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold,
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      variableVelocity: DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity,
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity extends $tea.Model {
  iv?: string;
  static names(): { [key: string]: string } {
    return {
      iv: 'iv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      iv: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectSysVariables extends $tea.Model {
  code?: string;
  dataDisplay?: string;
  defineId?: string;
  description?: string;
  displayType?: string;
  expressionTitle?: string;
  favoriteFlag?: boolean;
  fieldDetail?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputRequired?: string;
  inputs?: string;
  name?: string;
  outlier?: string;
  outputThreshold?: DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  variableVelocity?: DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      dataDisplay: 'dataDisplay',
      defineId: 'defineId',
      description: 'description',
      displayType: 'displayType',
      expressionTitle: 'expressionTitle',
      favoriteFlag: 'favoriteFlag',
      fieldDetail: 'fieldDetail',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      name: 'name',
      outlier: 'outlier',
      outputThreshold: 'outputThreshold',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      variableVelocity: 'variableVelocity',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dataDisplay: 'string',
      defineId: 'string',
      description: 'string',
      displayType: 'string',
      expressionTitle: 'string',
      favoriteFlag: 'boolean',
      fieldDetail: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputRequired: 'string',
      inputs: 'string',
      name: 'string',
      outlier: 'string',
      outputThreshold: DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold,
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      variableVelocity: DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity,
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold extends $tea.Model {
  maxValue?: number;
  minValue?: number;
  static names(): { [key: string]: string } {
    return {
      maxValue: 'maxValue',
      minValue: 'minValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      maxValue: 'number',
      minValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity extends $tea.Model {
  iv?: string;
  static names(): { [key: string]: string } {
    return {
      iv: 'iv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      iv: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObjectVelocityVariables extends $tea.Model {
  code?: string;
  dataDisplay?: string;
  defineId?: string;
  description?: string;
  displayType?: string;
  expressionTitle?: string;
  favoriteFlag?: boolean;
  fieldDetail?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  id?: number;
  inputFieldType?: string;
  inputRequired?: string;
  inputs?: string;
  name?: string;
  outlier?: string;
  outputThreshold?: DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold;
  parentName?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  variableVelocity?: DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      dataDisplay: 'dataDisplay',
      defineId: 'defineId',
      description: 'description',
      displayType: 'displayType',
      expressionTitle: 'expressionTitle',
      favoriteFlag: 'favoriteFlag',
      fieldDetail: 'fieldDetail',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      id: 'id',
      inputFieldType: 'inputFieldType',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      name: 'name',
      outlier: 'outlier',
      outputThreshold: 'outputThreshold',
      parentName: 'parentName',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      variableVelocity: 'variableVelocity',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dataDisplay: 'string',
      defineId: 'string',
      description: 'string',
      displayType: 'string',
      expressionTitle: 'string',
      favoriteFlag: 'boolean',
      fieldDetail: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      id: 'number',
      inputFieldType: 'string',
      inputRequired: 'string',
      inputs: 'string',
      name: 'string',
      outlier: 'string',
      outputThreshold: DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold,
      parentName: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      variableVelocity: DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity,
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableListResponseBodyResultObject extends $tea.Model {
  actions?: DescribeEventVariableListResponseBodyResultObjectActions[];
  deviceVariables?: DescribeEventVariableListResponseBodyResultObjectDeviceVariables[];
  expressionVariables?: DescribeEventVariableListResponseBodyResultObjectExpressionVariables[];
  favoriteVariables?: DescribeEventVariableListResponseBodyResultObjectFavoriteVariables[];
  middleVariables?: DescribeEventVariableListResponseBodyResultObjectMiddleVariables[];
  modelVariables?: DescribeEventVariableListResponseBodyResultObjectModelVariables[];
  nameList?: DescribeEventVariableListResponseBodyResultObjectNameList[];
  nativeVariableFunctions?: DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions[];
  nativeVariables?: DescribeEventVariableListResponseBodyResultObjectNativeVariables[];
  queryVariables?: DescribeEventVariableListResponseBodyResultObjectQueryVariables[];
  selfVariables?: DescribeEventVariableListResponseBodyResultObjectSelfVariables[];
  sysVariables?: DescribeEventVariableListResponseBodyResultObjectSysVariables[];
  thirdVariables?: { [key: string]: any };
  velocityVariables?: DescribeEventVariableListResponseBodyResultObjectVelocityVariables[];
  static names(): { [key: string]: string } {
    return {
      actions: 'actions',
      deviceVariables: 'deviceVariables',
      expressionVariables: 'expressionVariables',
      favoriteVariables: 'favoriteVariables',
      middleVariables: 'middleVariables',
      modelVariables: 'modelVariables',
      nameList: 'nameList',
      nativeVariableFunctions: 'nativeVariableFunctions',
      nativeVariables: 'nativeVariables',
      queryVariables: 'queryVariables',
      selfVariables: 'selfVariables',
      sysVariables: 'sysVariables',
      thirdVariables: 'thirdVariables',
      velocityVariables: 'velocityVariables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actions: { 'type': 'array', 'itemType': DescribeEventVariableListResponseBodyResultObjectActions },
      deviceVariables: { 'type': 'array', 'itemType': DescribeEventVariableListResponseBodyResultObjectDeviceVariables },
      expressionVariables: { 'type': 'array', 'itemType': DescribeEventVariableListResponseBodyResultObjectExpressionVariables },
      favoriteVariables: { 'type': 'array', 'itemType': DescribeEventVariableListResponseBodyResultObjectFavoriteVariables },
      middleVariables: { 'type': 'array', 'itemType': DescribeEventVariableListResponseBodyResultObjectMiddleVariables },
      modelVariables: { 'type': 'array', 'itemType': DescribeEventVariableListResponseBodyResultObjectModelVariables },
      nameList: { 'type': 'array', 'itemType': DescribeEventVariableListResponseBodyResultObjectNameList },
      nativeVariableFunctions: { 'type': 'array', 'itemType': DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions },
      nativeVariables: { 'type': 'array', 'itemType': DescribeEventVariableListResponseBodyResultObjectNativeVariables },
      queryVariables: { 'type': 'array', 'itemType': DescribeEventVariableListResponseBodyResultObjectQueryVariables },
      selfVariables: { 'type': 'array', 'itemType': DescribeEventVariableListResponseBodyResultObjectSelfVariables },
      sysVariables: { 'type': 'array', 'itemType': DescribeEventVariableListResponseBodyResultObjectSysVariables },
      thirdVariables: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      velocityVariables: { 'type': 'array', 'itemType': DescribeEventVariableListResponseBodyResultObjectVelocityVariables },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables extends $tea.Model {
  code?: string;
  description?: string;
  fieldType?: string;
  id?: number;
  name?: string;
  title?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      description: 'description',
      fieldType: 'fieldType',
      id: 'id',
      name: 'name',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      description: 'string',
      fieldType: 'string',
      id: 'number',
      name: 'string',
      title: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables extends $tea.Model {
  code?: string;
  description?: string;
  fieldType?: string;
  id?: number;
  name?: string;
  title?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      description: 'description',
      fieldType: 'fieldType',
      id: 'id',
      name: 'name',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      description: 'string',
      fieldType: 'string',
      id: 'number',
      name: 'string',
      title: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableTemplateBindResponseBodyResultObject extends $tea.Model {
  chargeVariables?: DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables[];
  freeVariables?: DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables[];
  templateCode?: string;
  totalCount?: string;
  static names(): { [key: string]: string } {
    return {
      chargeVariables: 'chargeVariables',
      freeVariables: 'freeVariables',
      templateCode: 'templateCode',
      totalCount: 'totalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      chargeVariables: { 'type': 'array', 'itemType': DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables },
      freeVariables: { 'type': 'array', 'itemType': DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables },
      templateCode: 'string',
      totalCount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableTemplateListResponseBodyResultObjectVariables extends $tea.Model {
  code?: string;
  description?: string;
  fieldType?: string;
  id?: number;
  name?: string;
  title?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      description: 'description',
      fieldType: 'fieldType',
      id: 'id',
      name: 'name',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      description: 'string',
      fieldType: 'string',
      id: 'number',
      name: 'string',
      title: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeEventVariableTemplateListResponseBodyResultObject extends $tea.Model {
  templateCode?: string;
  templateName?: string;
  variables?: DescribeEventVariableTemplateListResponseBodyResultObjectVariables[];
  static names(): { [key: string]: string } {
    return {
      templateCode: 'templateCode',
      templateName: 'templateName',
      variables: 'variables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      templateCode: 'string',
      templateName: 'string',
      variables: { 'type': 'array', 'itemType': DescribeEventVariableTemplateListResponseBodyResultObjectVariables },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExpressionVariableFunctionListResponseBodyResultObject extends $tea.Model {
  description?: string;
  key?: string;
  maxParamSize?: number;
  minParamSize?: number;
  paramTypes?: string;
  redirect?: boolean;
  returnTypes?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'description',
      key: 'key',
      maxParamSize: 'maxParamSize',
      minParamSize: 'minParamSize',
      paramTypes: 'paramTypes',
      redirect: 'redirect',
      returnTypes: 'returnTypes',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      key: 'string',
      maxParamSize: 'number',
      minParamSize: 'number',
      paramTypes: 'string',
      redirect: 'boolean',
      returnTypes: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeExpressionVariablePageResponseBodyResultObject extends $tea.Model {
  description?: string;
  eventName?: string;
  gmtModified?: number;
  id?: number;
  outputs?: string;
  status?: string;
  title?: string;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      description: 'description',
      eventName: 'eventName',
      gmtModified: 'gmtModified',
      id: 'id',
      outputs: 'outputs',
      status: 'status',
      title: 'title',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      eventName: 'string',
      gmtModified: 'number',
      id: 'number',
      outputs: 'string',
      status: 'string',
      title: 'string',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFieldListResponseBodyResultObject extends $tea.Model {
  classify?: string;
  description?: string;
  enumData?: string;
  id?: number;
  name?: string;
  source?: string;
  status?: string;
  title?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      classify: 'classify',
      description: 'description',
      enumData: 'enumData',
      id: 'id',
      name: 'name',
      source: 'source',
      status: 'status',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      classify: 'string',
      description: 'string',
      enumData: 'string',
      id: 'number',
      name: 'string',
      source: 'string',
      status: 'string',
      title: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeFieldPageResponseBodyResultObject extends $tea.Model {
  classify?: string;
  description?: string;
  enumData?: string;
  id?: number;
  name?: string;
  source?: string;
  status?: string;
  title?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      classify: 'classify',
      description: 'description',
      enumData: 'enumData',
      id: 'id',
      name: 'name',
      source: 'source',
      status: 'status',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      classify: 'string',
      description: 'string',
      enumData: 'string',
      id: 'number',
      name: 'string',
      source: 'string',
      status: 'string',
      title: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupConditionListResponseBodyResultObject extends $tea.Model {
  fieldKey?: string;
  fieldValue?: string;
  static names(): { [key: string]: string } {
    return {
      fieldKey: 'fieldKey',
      fieldValue: 'fieldValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fieldKey: 'string',
      fieldValue: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupPageResponseBodyResultObject extends $tea.Model {
  communityNo?: string;
  createTime?: number;
  groupRisk?: string;
  groupScale?: string;
  id?: number;
  sceneName?: string;
  taskId?: number;
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      communityNo: 'communityNo',
      createTime: 'createTime',
      groupRisk: 'groupRisk',
      groupScale: 'groupScale',
      id: 'id',
      sceneName: 'sceneName',
      taskId: 'taskId',
      userId: 'userId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      communityNo: 'string',
      createTime: 'number',
      groupRisk: 'string',
      groupScale: 'string',
      id: 'number',
      sceneName: 'string',
      taskId: 'number',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid extends $tea.Model {
  show?: boolean;
  static names(): { [key: string]: string } {
    return {
      show: 'show',
    };
  }

  static types(): { [key: string]: any } {
    return {
      show: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData extends $tea.Model {
  name?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'name',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries extends $tea.Model {
  data?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData[];
  name?: string;
  roseType?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
      roseType: 'roseType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData },
      name: 'string',
      roseType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity extends $tea.Model {
  animation?: boolean;
  grid?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid;
  series?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries[];
  static names(): { [key: string]: string } {
    return {
      animation: 'animation',
      grid: 'grid',
      series: 'series',
    };
  }

  static types(): { [key: string]: any } {
    return {
      animation: 'boolean',
      grid: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid,
      series: { 'type': 'array', 'itemType': DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid extends $tea.Model {
  show?: boolean;
  static names(): { [key: string]: string } {
    return {
      show: 'show',
    };
  }

  static types(): { [key: string]: any } {
    return {
      show: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData extends $tea.Model {
  name?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'name',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries extends $tea.Model {
  data?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData[];
  name?: string;
  roseType?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
      roseType: 'roseType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData },
      name: 'string',
      roseType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince extends $tea.Model {
  animation?: boolean;
  grid?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid;
  series?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries[];
  static names(): { [key: string]: string } {
    return {
      animation: 'animation',
      grid: 'grid',
      series: 'series',
    };
  }

  static types(): { [key: string]: any } {
    return {
      animation: 'boolean',
      grid: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid,
      series: { 'type': 'array', 'itemType': DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid extends $tea.Model {
  show?: boolean;
  static names(): { [key: string]: string } {
    return {
      show: 'show',
    };
  }

  static types(): { [key: string]: any } {
    return {
      show: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData extends $tea.Model {
  name?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'name',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries extends $tea.Model {
  data?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData[];
  name?: string;
  roseType?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
      roseType: 'roseType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData },
      name: 'string',
      roseType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity extends $tea.Model {
  animation?: boolean;
  grid?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid;
  series?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries[];
  static names(): { [key: string]: string } {
    return {
      animation: 'animation',
      grid: 'grid',
      series: 'series',
    };
  }

  static types(): { [key: string]: any } {
    return {
      animation: 'boolean',
      grid: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid,
      series: { 'type': 'array', 'itemType': DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid extends $tea.Model {
  show?: boolean;
  static names(): { [key: string]: string } {
    return {
      show: 'show',
    };
  }

  static types(): { [key: string]: any } {
    return {
      show: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData extends $tea.Model {
  name?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'name',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries extends $tea.Model {
  data?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData[];
  name?: string;
  roseType?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
      roseType: 'roseType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData },
      name: 'string',
      roseType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince extends $tea.Model {
  animation?: boolean;
  grid?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid;
  series?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries[];
  static names(): { [key: string]: string } {
    return {
      animation: 'animation',
      grid: 'grid',
      series: 'series',
    };
  }

  static types(): { [key: string]: any } {
    return {
      animation: 'boolean',
      grid: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid,
      series: { 'type': 'array', 'itemType': DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHighRiskPieChartResponseBodyResultObject extends $tea.Model {
  highRiskIPCity?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity;
  highRiskIPProvince?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince;
  highRiskMobileCity?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity;
  highRiskMobileProvince?: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince;
  static names(): { [key: string]: string } {
    return {
      highRiskIPCity: 'highRiskIPCity',
      highRiskIPProvince: 'highRiskIPProvince',
      highRiskMobileCity: 'highRiskMobileCity',
      highRiskMobileProvince: 'highRiskMobileProvince',
    };
  }

  static types(): { [key: string]: any } {
    return {
      highRiskIPCity: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity,
      highRiskIPProvince: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince,
      highRiskMobileCity: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity,
      highRiskMobileProvince: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleFluctuationResponseBodyResultObject extends $tea.Model {
  ruleId?: string;
  ruleName?: string;
  todayNum?: number;
  withinSevenDayNum?: string;
  withinThirtyDayNum?: string;
  withinThreeDayNum?: string;
  yesterdayNum?: number;
  static names(): { [key: string]: string } {
    return {
      ruleId: 'ruleId',
      ruleName: 'ruleName',
      todayNum: 'todayNum',
      withinSevenDayNum: 'withinSevenDayNum',
      withinThirtyDayNum: 'withinThirtyDayNum',
      withinThreeDayNum: 'withinThreeDayNum',
      yesterdayNum: 'yesterdayNum',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ruleId: 'string',
      ruleName: 'string',
      todayNum: 'number',
      withinSevenDayNum: 'string',
      withinThirtyDayNum: 'string',
      withinThreeDayNum: 'string',
      yesterdayNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleListResponseBodyResultObject extends $tea.Model {
  hitCount?: number;
  ruleName?: string;
  static names(): { [key: string]: string } {
    return {
      hitCount: 'hitCount',
      ruleName: 'ruleName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hitCount: 'number',
      ruleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleTrendResponseBodyResultObjectSeriesData extends $tea.Model {
  num?: number;
  scale?: string;
  static names(): { [key: string]: string } {
    return {
      num: 'num',
      scale: 'scale',
    };
  }

  static types(): { [key: string]: any } {
    return {
      num: 'number',
      scale: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleTrendResponseBodyResultObjectSeries extends $tea.Model {
  data?: DescribeHitRuleTrendResponseBodyResultObjectSeriesData[];
  name?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': DescribeHitRuleTrendResponseBodyResultObjectSeriesData },
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleTrendResponseBodyResultObjectXaxis extends $tea.Model {
  data?: string[];
  static names(): { [key: string]: string } {
    return {
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeHitRuleTrendResponseBodyResultObject extends $tea.Model {
  series?: DescribeHitRuleTrendResponseBodyResultObjectSeries[];
  xaxis?: DescribeHitRuleTrendResponseBodyResultObjectXaxis;
  static names(): { [key: string]: string } {
    return {
      series: 'series',
      xaxis: 'xaxis',
    };
  }

  static types(): { [key: string]: any } {
    return {
      series: { 'type': 'array', 'itemType': DescribeHitRuleTrendResponseBodyResultObjectSeries },
      xaxis: DescribeHitRuleTrendResponseBodyResultObjectXaxis,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInputFeildCountByEventCodeResponseBodyResultObject extends $tea.Model {
  limit?: boolean;
  maxTotalItem?: number;
  totalItem?: number;
  static names(): { [key: string]: string } {
    return {
      limit: 'limit',
      maxTotalItem: 'maxTotalItem',
      totalItem: 'totalItem',
    };
  }

  static types(): { [key: string]: any } {
    return {
      limit: 'boolean',
      maxTotalItem: 'number',
      totalItem: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeMarkPageResponseBodyResultObject extends $tea.Model {
  fieldName?: string;
  fieldValue?: string;
  id?: number;
  markType?: string;
  static names(): { [key: string]: string } {
    return {
      fieldName: 'fieldName',
      fieldValue: 'fieldValue',
      id: 'id',
      markType: 'markType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fieldName: 'string',
      fieldValue: 'string',
      id: 'number',
      markType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeMonitorTaskLimitResponseBodyResultObject extends $tea.Model {
  limit?: boolean;
  maxTotalItem?: number;
  totalItem?: number;
  static names(): { [key: string]: string } {
    return {
      limit: 'limit',
      maxTotalItem: 'maxTotalItem',
      totalItem: 'totalItem',
    };
  }

  static types(): { [key: string]: any } {
    return {
      limit: 'boolean',
      maxTotalItem: 'number',
      totalItem: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListResponseBodyResultObject extends $tea.Model {
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  identifier?: string;
  title?: string;
  value?: string;
  variableId?: number;
  static names(): { [key: string]: string } {
    return {
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      identifier: 'identifier',
      title: 'title',
      value: 'value',
      variableId: 'variableId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      identifier: 'string',
      title: 'string',
      value: 'string',
      variableId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListDownloadUrlResponseBodyResultObject extends $tea.Model {
  downloadFileUrl?: string;
  static names(): { [key: string]: string } {
    return {
      downloadFileUrl: 'downloadFileUrl',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downloadFileUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListLimitResponseBodyResultObject extends $tea.Model {
  limit?: boolean;
  maxTotalItem?: number;
  totalItem?: number;
  static names(): { [key: string]: string } {
    return {
      limit: 'limit',
      maxTotalItem: 'maxTotalItem',
      totalItem: 'totalItem',
    };
  }

  static types(): { [key: string]: any } {
    return {
      limit: 'boolean',
      maxTotalItem: 'number',
      totalItem: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListPageListResponseBodyResultObject extends $tea.Model {
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  name?: string;
  nameListType?: string;
  title?: string;
  userId?: string;
  value?: string;
  variableId?: number;
  static names(): { [key: string]: string } {
    return {
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      name: 'name',
      nameListType: 'nameListType',
      title: 'title',
      userId: 'userId',
      value: 'value',
      variableId: 'variableId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      name: 'string',
      nameListType: 'string',
      title: 'string',
      userId: 'string',
      value: 'string',
      variableId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListTypeListResponseBodyResultObject extends $tea.Model {
  key?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'key',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNameListVariablePageListResponseBodyResultObject extends $tea.Model {
  capacity?: number;
  description?: string;
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  leftCapacity?: number;
  name?: string;
  nameListType?: string;
  refObjId?: string;
  refObjType?: number;
  sourceType?: string;
  title?: string;
  type?: string;
  userId?: number;
  static names(): { [key: string]: string } {
    return {
      capacity: 'capacity',
      description: 'description',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      leftCapacity: 'leftCapacity',
      name: 'name',
      nameListType: 'nameListType',
      refObjId: 'refObjId',
      refObjType: 'refObjType',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      userId: 'userId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      capacity: 'number',
      description: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      leftCapacity: 'number',
      name: 'string',
      nameListType: 'string',
      refObjId: 'string',
      refObjType: 'number',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      userId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperationLogPageListResponseBodyResultObject extends $tea.Model {
  clientIp?: string;
  gmtCreate?: number;
  newContent?: string;
  oldContent?: string;
  operationSummary?: string;
  operationType?: string;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      clientIp: 'clientIp',
      gmtCreate: 'gmtCreate',
      newContent: 'newContent',
      oldContent: 'oldContent',
      operationSummary: 'operationSummary',
      operationType: 'operationType',
      userName: 'userName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientIp: 'string',
      gmtCreate: 'number',
      newContent: 'string',
      oldContent: 'string',
      operationSummary: 'string',
      operationType: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables extends $tea.Model {
  fieldName?: string;
  fieldType?: string;
  fieldValue?: string;
  static names(): { [key: string]: string } {
    return {
      fieldName: 'fieldName',
      fieldType: 'fieldType',
      fieldValue: 'fieldValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fieldName: 'string',
      fieldType: 'string',
      fieldValue: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListResponseBodyResultObjectOperators extends $tea.Model {
  code?: string;
  hasRightVariable?: boolean;
  memo?: string;
  name?: string;
  rightVariables?: DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables[];
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      hasRightVariable: 'hasRightVariable',
      memo: 'memo',
      name: 'name',
      rightVariables: 'rightVariables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      hasRightVariable: 'boolean',
      memo: 'string',
      name: 'string',
      rightVariables: { 'type': 'array', 'itemType': DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListResponseBodyResultObject extends $tea.Model {
  fieldType?: string;
  operators?: DescribeOperatorListResponseBodyResultObjectOperators[];
  static names(): { [key: string]: string } {
    return {
      fieldType: 'fieldType',
      operators: 'operators',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fieldType: 'string',
      operators: { 'type': 'array', 'itemType': DescribeOperatorListResponseBodyResultObjectOperators },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables extends $tea.Model {
  fieldName?: string;
  fieldType?: string;
  fieldValue?: string;
  static names(): { [key: string]: string } {
    return {
      fieldName: 'fieldName',
      fieldType: 'fieldType',
      fieldValue: 'fieldValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fieldName: 'string',
      fieldType: 'string',
      fieldValue: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListBySceneResponseBodyResultObjectOperators extends $tea.Model {
  code?: string;
  hasRightVariable?: boolean;
  memo?: string;
  name?: string;
  rightVariables?: DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables[];
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      hasRightVariable: 'hasRightVariable',
      memo: 'memo',
      name: 'name',
      rightVariables: 'rightVariables',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      hasRightVariable: 'boolean',
      memo: 'string',
      name: 'string',
      rightVariables: { 'type': 'array', 'itemType': DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListBySceneResponseBodyResultObject extends $tea.Model {
  fieldType?: string;
  operators?: DescribeOperatorListBySceneResponseBodyResultObjectOperators[];
  static names(): { [key: string]: string } {
    return {
      fieldType: 'fieldType',
      operators: 'operators',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fieldType: 'string',
      operators: { 'type': 'array', 'itemType': DescribeOperatorListBySceneResponseBodyResultObjectOperators },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListByTypeResponseBodyResultObjectOperators extends $tea.Model {
  code?: string;
  hasRightVariable?: boolean;
  name?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      hasRightVariable: 'hasRightVariable',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      hasRightVariable: 'boolean',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeOperatorListByTypeResponseBodyResultObject extends $tea.Model {
  fieldType?: string;
  operators?: DescribeOperatorListByTypeResponseBodyResultObjectOperators[];
  static names(): { [key: string]: string } {
    return {
      fieldType: 'fieldType',
      operators: 'operators',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fieldType: 'string',
      operators: { 'type': 'array', 'itemType': DescribeOperatorListByTypeResponseBodyResultObjectOperators },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeParamByEventCodesResponseBodyResultObject extends $tea.Model {
  code?: string;
  name?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'code',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePocTaskListResponseBodyResultObject extends $tea.Model {
  createTime?: string;
  downloadUrl?: string;
  fileType?: string;
  serviceName?: string;
  status?: string;
  taskId?: string;
  taskName?: string;
  updateTime?: string;
  static names(): { [key: string]: string } {
    return {
      createTime: 'createTime',
      downloadUrl: 'downloadUrl',
      fileType: 'fileType',
      serviceName: 'serviceName',
      status: 'status',
      taskId: 'taskId',
      taskName: 'taskName',
      updateTime: 'updateTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'string',
      downloadUrl: 'string',
      fileType: 'string',
      serviceName: 'string',
      status: 'string',
      taskId: 'string',
      taskName: 'string',
      updateTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeQueryVariableDetailResponseBodyResultObject extends $tea.Model {
  dataSourceCode?: number;
  dataSourceName?: string;
  description?: string;
  eventCode?: string;
  expression?: string;
  expressionTitle?: string;
  expressionVariable?: string;
  id?: number;
  outlier?: string;
  outputs?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      dataSourceCode: 'dataSourceCode',
      dataSourceName: 'dataSourceName',
      description: 'description',
      eventCode: 'eventCode',
      expression: 'expression',
      expressionTitle: 'expressionTitle',
      expressionVariable: 'expressionVariable',
      id: 'id',
      outlier: 'outlier',
      outputs: 'outputs',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataSourceCode: 'number',
      dataSourceName: 'string',
      description: 'string',
      eventCode: 'string',
      expression: 'string',
      expressionTitle: 'string',
      expressionVariable: 'string',
      id: 'number',
      outlier: 'string',
      outputs: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeQueryVariablePageListResponseBodyResultObject extends $tea.Model {
  dataSourceCode?: number;
  dataSourceName?: string;
  description?: string;
  eventName?: string;
  fieldType?: string;
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  name?: string;
  status?: string;
  total?: number;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      dataSourceCode: 'dataSourceCode',
      dataSourceName: 'dataSourceName',
      description: 'description',
      eventName: 'eventName',
      fieldType: 'fieldType',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      name: 'name',
      status: 'status',
      total: 'total',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataSourceCode: 'number',
      dataSourceName: 'string',
      description: 'string',
      eventName: 'string',
      fieldType: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      name: 'string',
      status: 'string',
      total: 'number',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules extends $tea.Model {
  left?: string;
  operator?: string;
  right?: string;
  static names(): { [key: string]: string } {
    return {
      left: 'left',
      operator: 'operator',
      right: 'right',
    };
  }

  static types(): { [key: string]: any } {
    return {
      left: 'string',
      operator: 'string',
      right: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs extends $tea.Model {
  computeExpression?: string;
  hitSample?: number;
  id?: number;
  notHitSample?: number;
  recommendRules?: DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules[];
  ruleId?: string;
  ruleName?: string;
  status?: string;
  velocities?: string;
  static names(): { [key: string]: string } {
    return {
      computeExpression: 'computeExpression',
      hitSample: 'hitSample',
      id: 'id',
      notHitSample: 'notHitSample',
      recommendRules: 'recommendRules',
      ruleId: 'ruleId',
      ruleName: 'ruleName',
      status: 'status',
      velocities: 'velocities',
    };
  }

  static types(): { [key: string]: any } {
    return {
      computeExpression: 'string',
      hitSample: 'number',
      id: 'number',
      notHitSample: 'number',
      recommendRules: { 'type': 'array', 'itemType': DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules },
      ruleId: 'string',
      ruleName: 'string',
      status: 'string',
      velocities: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs extends $tea.Model {
  id?: number;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendTaskDetailResponseBodyResultObject extends $tea.Model {
  eventCode?: string;
  eventName?: string;
  expectVelocities?: string[];
  gmtCreate?: number;
  normalSize?: number;
  recommendRuleDTOs?: DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs[];
  recommendVariableDTOs?: DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs[];
  riskSize?: number;
  sampleName?: string;
  sampleScene?: string;
  sampleSceneName?: string;
  taskId?: number;
  taskName?: string;
  taskStatus?: string;
  static names(): { [key: string]: string } {
    return {
      eventCode: 'eventCode',
      eventName: 'eventName',
      expectVelocities: 'expectVelocities',
      gmtCreate: 'gmtCreate',
      normalSize: 'normalSize',
      recommendRuleDTOs: 'recommendRuleDTOs',
      recommendVariableDTOs: 'recommendVariableDTOs',
      riskSize: 'riskSize',
      sampleName: 'sampleName',
      sampleScene: 'sampleScene',
      sampleSceneName: 'sampleSceneName',
      taskId: 'taskId',
      taskName: 'taskName',
      taskStatus: 'taskStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      eventCode: 'string',
      eventName: 'string',
      expectVelocities: { 'type': 'array', 'itemType': 'string' },
      gmtCreate: 'number',
      normalSize: 'number',
      recommendRuleDTOs: { 'type': 'array', 'itemType': DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs },
      recommendVariableDTOs: { 'type': 'array', 'itemType': DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs },
      riskSize: 'number',
      sampleName: 'string',
      sampleScene: 'string',
      sampleSceneName: 'string',
      taskId: 'number',
      taskName: 'string',
      taskStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRecommendTaskPageListResponseBodyResultObject extends $tea.Model {
  expectVelocities?: string[];
  gmtCreate?: number;
  normalCount?: number;
  normalSize?: number;
  riskCount?: number;
  riskSize?: number;
  sampleName?: string;
  sampleScene?: string;
  taskId?: number;
  taskName?: string;
  taskStatus?: string;
  static names(): { [key: string]: string } {
    return {
      expectVelocities: 'expectVelocities',
      gmtCreate: 'gmtCreate',
      normalCount: 'normalCount',
      normalSize: 'normalSize',
      riskCount: 'riskCount',
      riskSize: 'riskSize',
      sampleName: 'sampleName',
      sampleScene: 'sampleScene',
      taskId: 'taskId',
      taskName: 'taskName',
      taskStatus: 'taskStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      expectVelocities: { 'type': 'array', 'itemType': 'string' },
      gmtCreate: 'number',
      normalCount: 'number',
      normalSize: 'number',
      riskCount: 'number',
      riskSize: 'number',
      sampleName: 'string',
      sampleScene: 'string',
      taskId: 'number',
      taskName: 'string',
      taskStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRequestHitResponseBodyResultObjectRuleHitRecords extends $tea.Model {
  cost?: number;
  hitSuccessful?: boolean;
  isShowDetail?: boolean;
  order?: number;
  ruleId?: string;
  ruleName?: string;
  ruleSnapshotId?: string;
  ruleStatus?: string;
  static names(): { [key: string]: string } {
    return {
      cost: 'cost',
      hitSuccessful: 'hitSuccessful',
      isShowDetail: 'isShowDetail',
      order: 'order',
      ruleId: 'ruleId',
      ruleName: 'ruleName',
      ruleSnapshotId: 'ruleSnapshotId',
      ruleStatus: 'ruleStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cost: 'number',
      hitSuccessful: 'boolean',
      isShowDetail: 'boolean',
      order: 'number',
      ruleId: 'string',
      ruleName: 'string',
      ruleSnapshotId: 'string',
      ruleStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRequestHitResponseBodyResultObject extends $tea.Model {
  eventCode?: string;
  eventName?: string;
  inputs?: string;
  outputs?: string;
  requestTime?: number;
  ruleHitRecords?: DescribeRequestHitResponseBodyResultObjectRuleHitRecords[];
  sRequestId?: string;
  totalCost?: number;
  static names(): { [key: string]: string } {
    return {
      eventCode: 'eventCode',
      eventName: 'eventName',
      inputs: 'inputs',
      outputs: 'outputs',
      requestTime: 'requestTime',
      ruleHitRecords: 'ruleHitRecords',
      sRequestId: 'sRequestId',
      totalCost: 'totalCost',
    };
  }

  static types(): { [key: string]: any } {
    return {
      eventCode: 'string',
      eventName: 'string',
      inputs: 'string',
      outputs: 'string',
      requestTime: 'number',
      ruleHitRecords: { 'type': 'array', 'itemType': DescribeRequestHitResponseBodyResultObjectRuleHitRecords },
      sRequestId: 'string',
      totalCost: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRequestPeakReportResponseBodyResultObject extends $tea.Model {
  ratio?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      ratio: 'ratio',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ratio: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeResultCountResponseBodyResultObject extends $tea.Model {
  result?: string;
  total?: string;
  static names(): { [key: string]: string } {
    return {
      result: 'result',
      total: 'total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      result: 'string',
      total: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRiskLineChartResponseBodyResultObjectSeries extends $tea.Model {
  data?: string[];
  name?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRiskLineChartResponseBodyResultObjectXaxis extends $tea.Model {
  data?: string[];
  static names(): { [key: string]: string } {
    return {
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRiskLineChartResponseBodyResultObject extends $tea.Model {
  series?: DescribeRiskLineChartResponseBodyResultObjectSeries[];
  xaxis?: DescribeRiskLineChartResponseBodyResultObjectXaxis;
  static names(): { [key: string]: string } {
    return {
      series: 'series',
      xaxis: 'xaxis',
    };
  }

  static types(): { [key: string]: any } {
    return {
      series: { 'type': 'array', 'itemType': DescribeRiskLineChartResponseBodyResultObjectSeries },
      xaxis: DescribeRiskLineChartResponseBodyResultObjectXaxis,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleBarChartResponseBodyResultObjectSeriesData extends $tea.Model {
  eventName?: string;
  num?: number;
  ruleName?: string;
  status?: string;
  static names(): { [key: string]: string } {
    return {
      eventName: 'eventName',
      num: 'num',
      ruleName: 'ruleName',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      eventName: 'string',
      num: 'number',
      ruleName: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleBarChartResponseBodyResultObjectSeries extends $tea.Model {
  data?: DescribeRuleBarChartResponseBodyResultObjectSeriesData[];
  type?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': DescribeRuleBarChartResponseBodyResultObjectSeriesData },
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleBarChartResponseBodyResultObjectYaxis extends $tea.Model {
  data?: string[];
  static names(): { [key: string]: string } {
    return {
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleBarChartResponseBodyResultObject extends $tea.Model {
  series?: DescribeRuleBarChartResponseBodyResultObjectSeries[];
  yaxis?: DescribeRuleBarChartResponseBodyResultObjectYaxis;
  static names(): { [key: string]: string } {
    return {
      series: 'series',
      yaxis: 'yaxis',
    };
  }

  static types(): { [key: string]: any } {
    return {
      series: { 'type': 'array', 'itemType': DescribeRuleBarChartResponseBodyResultObjectSeries },
      yaxis: DescribeRuleBarChartResponseBodyResultObjectYaxis,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleCountByUserIdResponseBodyResultObject extends $tea.Model {
  limit?: boolean;
  maxTotalItem?: number;
  totalItem?: number;
  static names(): { [key: string]: string } {
    return {
      limit: 'limit',
      maxTotalItem: 'maxTotalItem',
      totalItem: 'totalItem',
    };
  }

  static types(): { [key: string]: any } {
    return {
      limit: 'boolean',
      maxTotalItem: 'number',
      totalItem: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleDetailByRuleIdResponseBodyResultObject extends $tea.Model {
  bizVersion?: string;
  consoleRuleId?: number;
  eventCode?: string;
  eventName?: string;
  gmtCreate?: number;
  gmtModified?: number;
  logicExpression?: string;
  mainEventCode?: string;
  memo?: string;
  ruleActionMap?: { [key: string]: any };
  ruleActions?: string;
  ruleExpressions?: string;
  ruleId?: string;
  ruleName?: string;
  ruleStatus?: string;
  ruleVersionId?: number;
  static names(): { [key: string]: string } {
    return {
      bizVersion: 'bizVersion',
      consoleRuleId: 'consoleRuleId',
      eventCode: 'eventCode',
      eventName: 'eventName',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      logicExpression: 'logicExpression',
      mainEventCode: 'mainEventCode',
      memo: 'memo',
      ruleActionMap: 'ruleActionMap',
      ruleActions: 'ruleActions',
      ruleExpressions: 'ruleExpressions',
      ruleId: 'ruleId',
      ruleName: 'ruleName',
      ruleStatus: 'ruleStatus',
      ruleVersionId: 'ruleVersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizVersion: 'string',
      consoleRuleId: 'number',
      eventCode: 'string',
      eventName: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      logicExpression: 'string',
      mainEventCode: 'string',
      memo: 'string',
      ruleActionMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      ruleActions: 'string',
      ruleExpressions: 'string',
      ruleId: 'string',
      ruleName: 'string',
      ruleStatus: 'string',
      ruleVersionId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleListByEventCodesListResponseBodyResultObject extends $tea.Model {
  ruleId?: string;
  ruleName?: string;
  static names(): { [key: string]: string } {
    return {
      ruleId: 'ruleId',
      ruleName: 'ruleName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      ruleId: 'string',
      ruleName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRulePageListResponseBodyResultObjectConsoleAudit extends $tea.Model {
  applyUserId?: string;
  applyUserName?: string;
  auditMsg?: string;
  auditRealUserId?: string;
  auditRealUserName?: string;
  auditRemark?: string;
  auditStatus?: string;
  auditTime?: number;
  auditUserId?: string;
  auditUserName?: string;
  gmtCreate?: number;
  id?: number;
  relationExt?: string;
  relationId?: number;
  relationName?: string;
  relationType?: string;
  static names(): { [key: string]: string } {
    return {
      applyUserId: 'applyUserId',
      applyUserName: 'applyUserName',
      auditMsg: 'auditMsg',
      auditRealUserId: 'auditRealUserId',
      auditRealUserName: 'auditRealUserName',
      auditRemark: 'auditRemark',
      auditStatus: 'auditStatus',
      auditTime: 'auditTime',
      auditUserId: 'auditUserId',
      auditUserName: 'auditUserName',
      gmtCreate: 'gmtCreate',
      id: 'id',
      relationExt: 'relationExt',
      relationId: 'relationId',
      relationName: 'relationName',
      relationType: 'relationType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyUserId: 'string',
      applyUserName: 'string',
      auditMsg: 'string',
      auditRealUserId: 'string',
      auditRealUserName: 'string',
      auditRemark: 'string',
      auditStatus: 'string',
      auditTime: 'number',
      auditUserId: 'string',
      auditUserName: 'string',
      gmtCreate: 'number',
      id: 'number',
      relationExt: 'string',
      relationId: 'number',
      relationName: 'string',
      relationType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRulePageListResponseBodyResultObject extends $tea.Model {
  authType?: string;
  consoleAudit?: DescribeRulePageListResponseBodyResultObjectConsoleAudit;
  eventCode?: string;
  eventName?: string;
  eventType?: string;
  externalRuleName?: string;
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  mainRuleId?: string;
  priority?: number;
  ruleAuthType?: string;
  ruleId?: string;
  ruleMemo?: string;
  ruleName?: string;
  ruleStatus?: string;
  ruleVersionId?: number;
  templateId?: number;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      authType: 'authType',
      consoleAudit: 'consoleAudit',
      eventCode: 'eventCode',
      eventName: 'eventName',
      eventType: 'eventType',
      externalRuleName: 'externalRuleName',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      mainRuleId: 'mainRuleId',
      priority: 'priority',
      ruleAuthType: 'ruleAuthType',
      ruleId: 'ruleId',
      ruleMemo: 'ruleMemo',
      ruleName: 'ruleName',
      ruleStatus: 'ruleStatus',
      ruleVersionId: 'ruleVersionId',
      templateId: 'templateId',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authType: 'string',
      consoleAudit: DescribeRulePageListResponseBodyResultObjectConsoleAudit,
      eventCode: 'string',
      eventName: 'string',
      eventType: 'string',
      externalRuleName: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      mainRuleId: 'string',
      priority: 'number',
      ruleAuthType: 'string',
      ruleId: 'string',
      ruleMemo: 'string',
      ruleName: 'string',
      ruleStatus: 'string',
      ruleVersionId: 'number',
      templateId: 'number',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleSnapshotResponseBodyResultObject extends $tea.Model {
  bizVersion?: string;
  eventCode?: string;
  eventName?: string;
  gmtCreate?: number;
  gmtModified?: number;
  logicExpression?: string;
  memo?: string;
  ruleActions?: string;
  ruleExpressions?: string;
  ruleId?: string;
  ruleName?: string;
  ruleStatus?: string;
  static names(): { [key: string]: string } {
    return {
      bizVersion: 'bizVersion',
      eventCode: 'eventCode',
      eventName: 'eventName',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      logicExpression: 'logicExpression',
      memo: 'memo',
      ruleActions: 'ruleActions',
      ruleExpressions: 'ruleExpressions',
      ruleId: 'ruleId',
      ruleName: 'ruleName',
      ruleStatus: 'ruleStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizVersion: 'string',
      eventCode: 'string',
      eventName: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      logicExpression: 'string',
      memo: 'string',
      ruleActions: 'string',
      ruleExpressions: 'string',
      ruleId: 'string',
      ruleName: 'string',
      ruleStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleVersionListResponseBodyResultObjectConsoleAudit extends $tea.Model {
  applyUserId?: string;
  applyUserName?: string;
  auditMsg?: string;
  auditRealUserId?: string;
  auditRealUserName?: string;
  auditRemark?: string;
  auditStatus?: string;
  auditTime?: number;
  auditUserId?: string;
  auditUserName?: string;
  gmtCreate?: number;
  id?: number;
  relationExt?: string;
  relationId?: number;
  relationName?: string;
  relationType?: string;
  static names(): { [key: string]: string } {
    return {
      applyUserId: 'applyUserId',
      applyUserName: 'applyUserName',
      auditMsg: 'auditMsg',
      auditRealUserId: 'auditRealUserId',
      auditRealUserName: 'auditRealUserName',
      auditRemark: 'auditRemark',
      auditStatus: 'auditStatus',
      auditTime: 'auditTime',
      auditUserId: 'auditUserId',
      auditUserName: 'auditUserName',
      gmtCreate: 'gmtCreate',
      id: 'id',
      relationExt: 'relationExt',
      relationId: 'relationId',
      relationName: 'relationName',
      relationType: 'relationType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyUserId: 'string',
      applyUserName: 'string',
      auditMsg: 'string',
      auditRealUserId: 'string',
      auditRealUserName: 'string',
      auditRemark: 'string',
      auditStatus: 'string',
      auditTime: 'number',
      auditUserId: 'string',
      auditUserName: 'string',
      gmtCreate: 'number',
      id: 'number',
      relationExt: 'string',
      relationId: 'number',
      relationName: 'string',
      relationType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeRuleVersionListResponseBodyResultObject extends $tea.Model {
  consoleAudit?: DescribeRuleVersionListResponseBodyResultObjectConsoleAudit;
  consoleRuleId?: number;
  consoleRuleMemo?: string;
  consoleRuleName?: string;
  eventCode?: string;
  eventType?: string;
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  lastOperator?: string;
  priority?: number;
  ruleId?: string;
  ruleStatus?: string;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      consoleAudit: 'consoleAudit',
      consoleRuleId: 'consoleRuleId',
      consoleRuleMemo: 'consoleRuleMemo',
      consoleRuleName: 'consoleRuleName',
      eventCode: 'eventCode',
      eventType: 'eventType',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      lastOperator: 'lastOperator',
      priority: 'priority',
      ruleId: 'ruleId',
      ruleStatus: 'ruleStatus',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consoleAudit: DescribeRuleVersionListResponseBodyResultObjectConsoleAudit,
      consoleRuleId: 'number',
      consoleRuleMemo: 'string',
      consoleRuleName: 'string',
      eventCode: 'string',
      eventType: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      lastOperator: 'string',
      priority: 'number',
      ruleId: 'string',
      ruleStatus: 'string',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSDKDownloadListResponseBodyResultObject extends $tea.Model {
  description?: string;
  developer?: string;
  deviceType?: string;
  downloadUrl?: string;
  md5?: string;
  packageName?: string;
  privacyLink?: string;
  pushTime?: string;
  sdkVersion?: string;
  size?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'description',
      developer: 'developer',
      deviceType: 'deviceType',
      downloadUrl: 'downloadUrl',
      md5: 'md5',
      packageName: 'packageName',
      privacyLink: 'privacyLink',
      pushTime: 'pushTime',
      sdkVersion: 'sdkVersion',
      size: 'size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      developer: 'string',
      deviceType: 'string',
      downloadUrl: 'string',
      md5: 'string',
      packageName: 'string',
      privacyLink: 'string',
      pushTime: 'string',
      sdkVersion: 'string',
      size: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafDeOrderResponseBodyResultObject extends $tea.Model {
  expirationDate?: number;
  openUserType?: number;
  static names(): { [key: string]: string } {
    return {
      expirationDate: 'expirationDate',
      openUserType: 'openUserType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      expirationDate: 'number',
      openUserType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafOrderResponseBodyResultObject extends $tea.Model {
  expirationDate?: number;
  static names(): { [key: string]: string } {
    return {
      expirationDate: 'expirationDate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      expirationDate: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafStartConfigResponseBodyResultObject extends $tea.Model {
  deviceTypes?: string[];
  eventCodes?: string[];
  languages?: string[];
  serverRegions?: string[];
  static names(): { [key: string]: string } {
    return {
      deviceTypes: 'deviceTypes',
      eventCodes: 'eventCodes',
      languages: 'languages',
      serverRegions: 'serverRegions',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deviceTypes: { 'type': 'array', 'itemType': 'string' },
      eventCodes: { 'type': 'array', 'itemType': 'string' },
      languages: { 'type': 'array', 'itemType': 'string' },
      serverRegions: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafStartStepsResponseBodyResultObject extends $tea.Model {
  content?: string;
  id?: string;
  type?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      id: 'id',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      id: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSafTagListResponseBodyResultObject extends $tea.Model {
  tagDesc?: string;
  tagMean?: string;
  tagName?: string;
  tagState?: string;
  tagType?: string;
  tagUid?: string;
  updateTime?: string;
  static names(): { [key: string]: string } {
    return {
      tagDesc: 'tagDesc',
      tagMean: 'tagMean',
      tagName: 'tagName',
      tagState: 'tagState',
      tagType: 'tagType',
      tagUid: 'tagUid',
      updateTime: 'updateTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tagDesc: 'string',
      tagMean: 'string',
      tagName: 'string',
      tagState: 'string',
      tagType: 'string',
      tagUid: 'string',
      updateTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleDataListResponseBodyResultObject extends $tea.Model {
  classificationType?: string;
  dataDistributed?: string;
  dataTitle?: string;
  deleteTag?: string;
  description?: string;
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  name?: string;
  normalSize?: number;
  recallConfig?: string;
  riskSize?: number;
  riskValue?: string;
  sampleLabelDetail?: string;
  sampleSize?: number;
  scene?: string;
  status?: string;
  storePath?: string;
  storeType?: string;
  supportRecall?: string;
  userId?: number;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      classificationType: 'classificationType',
      dataDistributed: 'dataDistributed',
      dataTitle: 'dataTitle',
      deleteTag: 'deleteTag',
      description: 'description',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      name: 'name',
      normalSize: 'normalSize',
      recallConfig: 'recallConfig',
      riskSize: 'riskSize',
      riskValue: 'riskValue',
      sampleLabelDetail: 'sampleLabelDetail',
      sampleSize: 'sampleSize',
      scene: 'scene',
      status: 'status',
      storePath: 'storePath',
      storeType: 'storeType',
      supportRecall: 'supportRecall',
      userId: 'userId',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      classificationType: 'string',
      dataDistributed: 'string',
      dataTitle: 'string',
      deleteTag: 'string',
      description: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      name: 'string',
      normalSize: 'number',
      recallConfig: 'string',
      riskSize: 'number',
      riskValue: 'string',
      sampleLabelDetail: 'string',
      sampleSize: 'number',
      scene: 'string',
      status: 'string',
      storePath: 'string',
      storeType: 'string',
      supportRecall: 'string',
      userId: 'number',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleInfoResponseBodyResultObject extends $tea.Model {
  id?: number;
  sampleTags?: string;
  sampleType?: string;
  sampleValue?: string;
  updateTime?: string;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      sampleTags: 'sampleTags',
      sampleType: 'sampleType',
      sampleValue: 'sampleValue',
      updateTime: 'updateTime',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      sampleTags: 'string',
      sampleType: 'string',
      sampleValue: 'string',
      updateTime: 'string',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleListResponseBodyResultObject extends $tea.Model {
  id?: number;
  sampleTags?: string;
  sampleType?: number;
  sampleValue?: string;
  updateTime?: number;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      sampleTags: 'sampleTags',
      sampleType: 'sampleType',
      sampleValue: 'sampleValue',
      updateTime: 'updateTime',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      sampleTags: 'string',
      sampleType: 'number',
      sampleValue: 'string',
      updateTime: 'number',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSampleSceneListResponseBodyResultObject extends $tea.Model {
  bizType?: string;
  configKey?: string;
  configValue?: string;
  creator?: string;
  description?: string;
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  lastModifiedOperator?: string;
  status?: string;
  static names(): { [key: string]: string } {
    return {
      bizType: 'bizType',
      configKey: 'configKey',
      configValue: 'configValue',
      creator: 'creator',
      description: 'description',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      lastModifiedOperator: 'lastModifiedOperator',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizType: 'string',
      configKey: 'string',
      configValue: 'string',
      creator: 'string',
      description: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      lastModifiedOperator: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren extends $tea.Model {
  createType?: string;
  eventCode?: string;
  eventName?: string;
  eventType?: string;
  static names(): { [key: string]: string } {
    return {
      createType: 'createType',
      eventCode: 'eventCode',
      eventName: 'eventName',
      eventType: 'eventType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createType: 'string',
      eventCode: 'string',
      eventName: 'string',
      eventType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneAllEventNameCodeListResponseBodyResultObject extends $tea.Model {
  children?: DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren[];
  createType?: string;
  eventCode?: string;
  eventName?: string;
  eventType?: string;
  static names(): { [key: string]: string } {
    return {
      children: 'children',
      createType: 'createType',
      eventCode: 'eventCode',
      eventName: 'eventName',
      eventType: 'eventType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      children: { 'type': 'array', 'itemType': DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren },
      createType: 'string',
      eventCode: 'string',
      eventName: 'string',
      eventType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneEventPageListResponseBodyResultObject extends $tea.Model {
  commonRuleCount?: string;
  customRuleCount?: string;
  eventCode?: string;
  eventName?: string;
  gmtModified?: string;
  modifier?: string;
  normalRuleCount?: string;
  service?: string;
  useStatus?: string;
  whiteBoxRuleCount?: string;
  static names(): { [key: string]: string } {
    return {
      commonRuleCount: 'commonRuleCount',
      customRuleCount: 'customRuleCount',
      eventCode: 'eventCode',
      eventName: 'eventName',
      gmtModified: 'gmtModified',
      modifier: 'modifier',
      normalRuleCount: 'normalRuleCount',
      service: 'service',
      useStatus: 'useStatus',
      whiteBoxRuleCount: 'whiteBoxRuleCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      commonRuleCount: 'string',
      customRuleCount: 'string',
      eventCode: 'string',
      eventName: 'string',
      gmtModified: 'string',
      modifier: 'string',
      normalRuleCount: 'string',
      service: 'string',
      useStatus: 'string',
      whiteBoxRuleCount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit extends $tea.Model {
  applyUserId?: string;
  applyUserName?: string;
  auditMsg?: string;
  auditRealUserId?: string;
  auditRealUserName?: string;
  auditRemark?: string;
  auditStatus?: string;
  auditTime?: number;
  auditUserId?: string;
  auditUserName?: string;
  gmtCreate?: number;
  id?: number;
  relationExt?: string;
  relationId?: number;
  relationName?: string;
  relationType?: string;
  static names(): { [key: string]: string } {
    return {
      applyUserId: 'applyUserId',
      applyUserName: 'applyUserName',
      auditMsg: 'auditMsg',
      auditRealUserId: 'auditRealUserId',
      auditRealUserName: 'auditRealUserName',
      auditRemark: 'auditRemark',
      auditStatus: 'auditStatus',
      auditTime: 'auditTime',
      auditUserId: 'auditUserId',
      auditUserName: 'auditUserName',
      gmtCreate: 'gmtCreate',
      id: 'id',
      relationExt: 'relationExt',
      relationId: 'relationId',
      relationName: 'relationName',
      relationType: 'relationType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applyUserId: 'string',
      applyUserName: 'string',
      auditMsg: 'string',
      auditRealUserId: 'string',
      auditRealUserName: 'string',
      auditRemark: 'string',
      auditStatus: 'string',
      auditTime: 'number',
      auditUserId: 'string',
      auditUserName: 'string',
      gmtCreate: 'number',
      id: 'number',
      relationExt: 'string',
      relationId: 'number',
      relationName: 'string',
      relationType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSceneRulePageListResponseBodyResultObject extends $tea.Model {
  authType?: string;
  consoleAudit?: DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit;
  eventCode?: string;
  eventName?: string;
  eventType?: string;
  externalRuleName?: string;
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  mainRuleId?: string;
  priority?: number;
  ruleAuthType?: string;
  ruleId?: string;
  ruleMemo?: string;
  ruleName?: string;
  ruleStatus?: string;
  ruleVersionId?: number;
  templateId?: number;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      authType: 'authType',
      consoleAudit: 'consoleAudit',
      eventCode: 'eventCode',
      eventName: 'eventName',
      eventType: 'eventType',
      externalRuleName: 'externalRuleName',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      mainRuleId: 'mainRuleId',
      priority: 'priority',
      ruleAuthType: 'ruleAuthType',
      ruleId: 'ruleId',
      ruleMemo: 'ruleMemo',
      ruleName: 'ruleName',
      ruleStatus: 'ruleStatus',
      ruleVersionId: 'ruleVersionId',
      templateId: 'templateId',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authType: 'string',
      consoleAudit: DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit,
      eventCode: 'string',
      eventName: 'string',
      eventType: 'string',
      externalRuleName: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      mainRuleId: 'string',
      priority: 'number',
      ruleAuthType: 'string',
      ruleId: 'string',
      ruleMemo: 'string',
      ruleName: 'string',
      ruleStatus: 'string',
      ruleVersionId: 'number',
      templateId: 'number',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries extends $tea.Model {
  data?: string[];
  name?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis extends $tea.Model {
  data?: string[];
  static names(): { [key: string]: string } {
    return {
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionNumLineChartResponseBodyResultObject extends $tea.Model {
  series?: DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries[];
  xaxis?: DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis;
  static names(): { [key: string]: string } {
    return {
      series: 'series',
      xaxis: 'xaxis',
    };
  }

  static types(): { [key: string]: any } {
    return {
      series: { 'type': 'array', 'itemType': DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries },
      xaxis: DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionPieChartResponseBodyResultObjectGrid extends $tea.Model {
  show?: boolean;
  static names(): { [key: string]: string } {
    return {
      show: 'show',
    };
  }

  static types(): { [key: string]: any } {
    return {
      show: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData extends $tea.Model {
  name?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'name',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionPieChartResponseBodyResultObjectSeries extends $tea.Model {
  data?: DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData[];
  name?: string;
  roseType?: boolean;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
      roseType: 'roseType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData },
      name: 'string',
      roseType: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionPieChartResponseBodyResultObject extends $tea.Model {
  animation?: boolean;
  grid?: DescribeScoreSectionPieChartResponseBodyResultObjectGrid;
  series?: DescribeScoreSectionPieChartResponseBodyResultObjectSeries[];
  static names(): { [key: string]: string } {
    return {
      animation: 'animation',
      grid: 'grid',
      series: 'series',
    };
  }

  static types(): { [key: string]: any } {
    return {
      animation: 'boolean',
      grid: DescribeScoreSectionPieChartResponseBodyResultObjectGrid,
      series: { 'type': 'array', 'itemType': DescribeScoreSectionPieChartResponseBodyResultObjectSeries },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries extends $tea.Model {
  data?: string[];
  name?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis extends $tea.Model {
  data?: string[];
  static names(): { [key: string]: string } {
    return {
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScoreSectionRatioLineChartResponseBodyResultObject extends $tea.Model {
  series?: DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries[];
  xaxis?: DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis;
  static names(): { [key: string]: string } {
    return {
      series: 'series',
      xaxis: 'xaxis',
    };
  }

  static types(): { [key: string]: any } {
    return {
      series: { 'type': 'array', 'itemType': DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries },
      xaxis: DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSelectItemResponseBodyResultObject extends $tea.Model {
  monitorStatusList?: string[];
  taskIdList?: string[];
  static names(): { [key: string]: string } {
    return {
      monitorStatusList: 'monitorStatusList',
      taskIdList: 'taskIdList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      monitorStatusList: { 'type': 'array', 'itemType': 'string' },
      taskIdList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceConsumeResponseBodyConsumeRecordsRecords extends $tea.Model {
  count?: number;
  serviceCode?: string;
  static names(): { [key: string]: string } {
    return {
      count: 'count',
      serviceCode: 'serviceCode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: 'number',
      serviceCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceConsumeResponseBodyConsumeRecords extends $tea.Model {
  date?: string;
  records?: DescribeServiceConsumeResponseBodyConsumeRecordsRecords[];
  static names(): { [key: string]: string } {
    return {
      date: 'date',
      records: 'records',
    };
  }

  static types(): { [key: string]: any } {
    return {
      date: 'string',
      records: { 'type': 'array', 'itemType': DescribeServiceConsumeResponseBodyConsumeRecordsRecords },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeServiceListResponseBodyResultObject extends $tea.Model {
  serviceCode?: string;
  serviceName?: string;
  static names(): { [key: string]: string } {
    return {
      serviceCode: 'serviceCode',
      serviceName: 'serviceName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      serviceCode: 'string',
      serviceName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsBarChartResponseBodyResultObjectSeriesData extends $tea.Model {
  num?: number;
  scale?: string;
  static names(): { [key: string]: string } {
    return {
      num: 'num',
      scale: 'scale',
    };
  }

  static types(): { [key: string]: any } {
    return {
      num: 'number',
      scale: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsBarChartResponseBodyResultObjectSeries extends $tea.Model {
  data?: DescribeTagsBarChartResponseBodyResultObjectSeriesData[];
  name?: string;
  stack?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
      stack: 'stack',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': DescribeTagsBarChartResponseBodyResultObjectSeriesData },
      name: 'string',
      stack: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsBarChartResponseBodyResultObjectXaxis extends $tea.Model {
  data?: string[];
  static names(): { [key: string]: string } {
    return {
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsBarChartResponseBodyResultObject extends $tea.Model {
  series?: DescribeTagsBarChartResponseBodyResultObjectSeries[];
  xaxis?: DescribeTagsBarChartResponseBodyResultObjectXaxis;
  static names(): { [key: string]: string } {
    return {
      series: 'series',
      xaxis: 'xaxis',
    };
  }

  static types(): { [key: string]: any } {
    return {
      series: { 'type': 'array', 'itemType': DescribeTagsBarChartResponseBodyResultObjectSeries },
      xaxis: DescribeTagsBarChartResponseBodyResultObjectXaxis,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsFluctuationResponseBodyResultObject extends $tea.Model {
  tableName?: string;
  todayNum?: number;
  withinSevenDayNum?: string;
  withinThirtyDayNum?: string;
  withinThreeDayNum?: string;
  yesterdayNum?: number;
  static names(): { [key: string]: string } {
    return {
      tableName: 'tableName',
      todayNum: 'todayNum',
      withinSevenDayNum: 'withinSevenDayNum',
      withinThirtyDayNum: 'withinThirtyDayNum',
      withinThreeDayNum: 'withinThreeDayNum',
      yesterdayNum: 'yesterdayNum',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tableName: 'string',
      todayNum: 'number',
      withinSevenDayNum: 'string',
      withinThirtyDayNum: 'string',
      withinThreeDayNum: 'string',
      yesterdayNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsNumLineChartResponseBodyResultObjectSeries extends $tea.Model {
  data?: string[];
  name?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsNumLineChartResponseBodyResultObjectXaxis extends $tea.Model {
  data?: string[];
  static names(): { [key: string]: string } {
    return {
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsNumLineChartResponseBodyResultObject extends $tea.Model {
  series?: DescribeTagsNumLineChartResponseBodyResultObjectSeries[];
  xaxis?: DescribeTagsNumLineChartResponseBodyResultObjectXaxis;
  static names(): { [key: string]: string } {
    return {
      series: 'series',
      xaxis: 'xaxis',
    };
  }

  static types(): { [key: string]: any } {
    return {
      series: { 'type': 'array', 'itemType': DescribeTagsNumLineChartResponseBodyResultObjectSeries },
      xaxis: DescribeTagsNumLineChartResponseBodyResultObjectXaxis,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsRatioLineChartResponseBodyResultObjectSeries extends $tea.Model {
  data?: string[];
  name?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsRatioLineChartResponseBodyResultObjectXaxis extends $tea.Model {
  data?: string[];
  static names(): { [key: string]: string } {
    return {
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsRatioLineChartResponseBodyResultObject extends $tea.Model {
  series?: DescribeTagsRatioLineChartResponseBodyResultObjectSeries[];
  xaxis?: DescribeTagsRatioLineChartResponseBodyResultObjectXaxis;
  static names(): { [key: string]: string } {
    return {
      series: 'series',
      xaxis: 'xaxis',
    };
  }

  static types(): { [key: string]: any } {
    return {
      series: { 'type': 'array', 'itemType': DescribeTagsRatioLineChartResponseBodyResultObjectSeries },
      xaxis: DescribeTagsRatioLineChartResponseBodyResultObjectXaxis,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsTrendResponseBodyResultObjectSeriesData extends $tea.Model {
  num?: number;
  scale?: string;
  static names(): { [key: string]: string } {
    return {
      num: 'num',
      scale: 'scale',
    };
  }

  static types(): { [key: string]: any } {
    return {
      num: 'number',
      scale: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsTrendResponseBodyResultObjectSeries extends $tea.Model {
  data?: DescribeTagsTrendResponseBodyResultObjectSeriesData[];
  name?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': DescribeTagsTrendResponseBodyResultObjectSeriesData },
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsTrendResponseBodyResultObjectXaxis extends $tea.Model {
  data?: string[];
  static names(): { [key: string]: string } {
    return {
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagsTrendResponseBodyResultObject extends $tea.Model {
  series?: DescribeTagsTrendResponseBodyResultObjectSeries[];
  xaxis?: DescribeTagsTrendResponseBodyResultObjectXaxis;
  static names(): { [key: string]: string } {
    return {
      series: 'series',
      xaxis: 'xaxis',
    };
  }

  static types(): { [key: string]: any } {
    return {
      series: { 'type': 'array', 'itemType': DescribeTagsTrendResponseBodyResultObjectSeries },
      xaxis: DescribeTagsTrendResponseBodyResultObjectXaxis,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTaskListResponseBodyResultObject extends $tea.Model {
  completionTime?: number;
  createTime?: number;
  id?: number;
  mark?: number;
  remark?: string;
  sceneName?: string;
  status?: string;
  taskLogId?: number;
  taskType?: string;
  static names(): { [key: string]: string } {
    return {
      completionTime: 'completionTime',
      createTime: 'createTime',
      id: 'id',
      mark: 'mark',
      remark: 'remark',
      sceneName: 'sceneName',
      status: 'status',
      taskLogId: 'taskLogId',
      taskType: 'taskType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      completionTime: 'number',
      createTime: 'number',
      id: 'number',
      mark: 'number',
      remark: 'string',
      sceneName: 'string',
      status: 'string',
      taskLogId: 'number',
      taskType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTaskLogListResponseBodyResultObject extends $tea.Model {
  completionTime?: number;
  createTime?: number;
  id?: number;
  remark?: string;
  sceneName?: string;
  status?: string;
  taskType?: string;
  static names(): { [key: string]: string } {
    return {
      completionTime: 'completionTime',
      createTime: 'createTime',
      id: 'id',
      remark: 'remark',
      sceneName: 'sceneName',
      status: 'status',
      taskType: 'taskType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      completionTime: 'number',
      createTime: 'number',
      id: 'number',
      remark: 'string',
      sceneName: 'string',
      status: 'string',
      taskType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields extends $tea.Model {
  description?: string;
  fieldCode?: string;
  fieldRank?: string;
  fieldSource?: string;
  fieldType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'description',
      fieldCode: 'fieldCode',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      fieldCode: 'string',
      fieldRank: 'string',
      fieldSource: 'string',
      fieldType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails extends $tea.Model {
  logicExpression?: string;
  memo?: string;
  ruleActions?: string;
  ruleExpressions?: string;
  ruleId?: string;
  ruleName?: string;
  ruleStatus?: string;
  static names(): { [key: string]: string } {
    return {
      logicExpression: 'logicExpression',
      memo: 'memo',
      ruleActions: 'ruleActions',
      ruleExpressions: 'ruleExpressions',
      ruleId: 'ruleId',
      ruleName: 'ruleName',
      ruleStatus: 'ruleStatus',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logicExpression: 'string',
      memo: 'string',
      ruleActions: 'string',
      ruleExpressions: 'string',
      ruleId: 'string',
      ruleName: 'string',
      ruleStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject extends $tea.Model {
  description?: string;
  eventCode?: string;
  eventName?: string;
  eventStauts?: string;
  inputFields?: DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields[];
  ruleDetails?: DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails[];
  templateCode?: string;
  templateName?: string;
  templateType?: string;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      description: 'description',
      eventCode: 'eventCode',
      eventName: 'eventName',
      eventStauts: 'eventStauts',
      inputFields: 'inputFields',
      ruleDetails: 'ruleDetails',
      templateCode: 'templateCode',
      templateName: 'templateName',
      templateType: 'templateType',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      eventCode: 'string',
      eventName: 'string',
      eventStauts: 'string',
      inputFields: { 'type': 'array', 'itemType': DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields },
      ruleDetails: { 'type': 'array', 'itemType': DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails },
      templateCode: 'string',
      templateName: 'string',
      templateType: 'string',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplateCountResponseBodyResultObject extends $tea.Model {
  limit?: boolean;
  maxTotalItem?: number;
  totalItem?: number;
  static names(): { [key: string]: string } {
    return {
      limit: 'limit',
      maxTotalItem: 'maxTotalItem',
      totalItem: 'totalItem',
    };
  }

  static types(): { [key: string]: any } {
    return {
      limit: 'boolean',
      maxTotalItem: 'number',
      totalItem: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTemplatePageListResponseBodyResultObject extends $tea.Model {
  description?: string;
  eventCode?: string;
  eventName?: string;
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  ruleCount?: number;
  templateCode?: string;
  templateName?: string;
  templateStatus?: string;
  templateType?: string;
  userCount?: number;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      description: 'description',
      eventCode: 'eventCode',
      eventName: 'eventName',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      ruleCount: 'ruleCount',
      templateCode: 'templateCode',
      templateName: 'templateName',
      templateStatus: 'templateStatus',
      templateType: 'templateType',
      userCount: 'userCount',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      eventCode: 'string',
      eventName: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      ruleCount: 'number',
      templateCode: 'string',
      templateName: 'string',
      templateStatus: 'string',
      templateType: 'string',
      userCount: 'number',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUsedServiceResponseBodyRecords extends $tea.Model {
  enName?: string;
  name?: string;
  serviceCode?: string;
  static names(): { [key: string]: string } {
    return {
      enName: 'enName',
      name: 'name',
      serviceCode: 'serviceCode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      enName: 'string',
      name: 'string',
      serviceCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeUserInfoResponseBodyResultObject extends $tea.Model {
  clientIp?: string;
  subId?: string;
  userId?: number;
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      clientIp: 'clientIp',
      subId: 'subId',
      userId: 'userId',
      userName: 'userName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientIp: 'string',
      subId: 'string',
      userId: 'number',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableBindDetailResponseBodyResultObjectParams extends $tea.Model {
  eventFieldName?: string;
  required?: boolean;
  variableName?: string;
  static names(): { [key: string]: string } {
    return {
      eventFieldName: 'eventFieldName',
      required: 'required',
      variableName: 'variableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      eventFieldName: 'string',
      required: 'boolean',
      variableName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableBindDetailResponseBodyResultObjectRelationRules extends $tea.Model {
  key?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'key',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableBindDetailResponseBodyResultObject extends $tea.Model {
  allowModify?: boolean;
  defineId?: number;
  defineTitle?: string;
  description?: string;
  eventCode?: string;
  id?: number;
  params?: DescribeVariableBindDetailResponseBodyResultObjectParams[];
  relationRules?: DescribeVariableBindDetailResponseBodyResultObjectRelationRules[];
  title?: string;
  static names(): { [key: string]: string } {
    return {
      allowModify: 'allowModify',
      defineId: 'defineId',
      defineTitle: 'defineTitle',
      description: 'description',
      eventCode: 'eventCode',
      id: 'id',
      params: 'params',
      relationRules: 'relationRules',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allowModify: 'boolean',
      defineId: 'number',
      defineTitle: 'string',
      description: 'string',
      eventCode: 'string',
      id: 'number',
      params: { 'type': 'array', 'itemType': DescribeVariableBindDetailResponseBodyResultObjectParams },
      relationRules: { 'type': 'array', 'itemType': DescribeVariableBindDetailResponseBodyResultObjectRelationRules },
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableDetailResponseBodyResultObjectBaseInfo extends $tea.Model {
  allowBind?: string;
  chargingMode?: string;
  chargingModeDesc?: string;
  creator?: string;
  dataDisplay?: string;
  dataThreshold?: string;
  deductionFactor?: number;
  description?: string;
  frontAllowBind?: string;
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  inputRequired?: string;
  inputs?: string;
  inputsDesc?: string;
  invokeKey?: string;
  invokeRt?: number;
  invokeSuccessRate?: string;
  invokeTimes?: number;
  lastModifiedOperator?: string;
  name?: string;
  outputs?: string;
  outputsDesc?: string;
  scene?: string[];
  sceneDesc?: string[];
  showOrder?: string;
  source?: string;
  sourceDesc?: string;
  status?: string;
  supportRegions?: string[];
  title?: string;
  type?: string;
  typeDesc?: string;
  xLabel?: string;
  yLabel?: string;
  static names(): { [key: string]: string } {
    return {
      allowBind: 'allowBind',
      chargingMode: 'chargingMode',
      chargingModeDesc: 'chargingModeDesc',
      creator: 'creator',
      dataDisplay: 'dataDisplay',
      dataThreshold: 'dataThreshold',
      deductionFactor: 'deductionFactor',
      description: 'description',
      frontAllowBind: 'frontAllowBind',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      inputRequired: 'inputRequired',
      inputs: 'inputs',
      inputsDesc: 'inputsDesc',
      invokeKey: 'invokeKey',
      invokeRt: 'invokeRt',
      invokeSuccessRate: 'invokeSuccessRate',
      invokeTimes: 'invokeTimes',
      lastModifiedOperator: 'lastModifiedOperator',
      name: 'name',
      outputs: 'outputs',
      outputsDesc: 'outputsDesc',
      scene: 'scene',
      sceneDesc: 'sceneDesc',
      showOrder: 'showOrder',
      source: 'source',
      sourceDesc: 'sourceDesc',
      status: 'status',
      supportRegions: 'supportRegions',
      title: 'title',
      type: 'type',
      typeDesc: 'typeDesc',
      xLabel: 'xLabel',
      yLabel: 'yLabel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      allowBind: 'string',
      chargingMode: 'string',
      chargingModeDesc: 'string',
      creator: 'string',
      dataDisplay: 'string',
      dataThreshold: 'string',
      deductionFactor: 'number',
      description: 'string',
      frontAllowBind: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      inputRequired: 'string',
      inputs: 'string',
      inputsDesc: 'string',
      invokeKey: 'string',
      invokeRt: 'number',
      invokeSuccessRate: 'string',
      invokeTimes: 'number',
      lastModifiedOperator: 'string',
      name: 'string',
      outputs: 'string',
      outputsDesc: 'string',
      scene: { 'type': 'array', 'itemType': 'string' },
      sceneDesc: { 'type': 'array', 'itemType': 'string' },
      showOrder: 'string',
      source: 'string',
      sourceDesc: 'string',
      status: 'string',
      supportRegions: { 'type': 'array', 'itemType': 'string' },
      title: 'string',
      type: 'string',
      typeDesc: 'string',
      xLabel: 'string',
      yLabel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableDetailResponseBodyResultObject extends $tea.Model {
  baseInfo?: DescribeVariableDetailResponseBodyResultObjectBaseInfo;
  static names(): { [key: string]: string } {
    return {
      baseInfo: 'baseInfo',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baseInfo: DescribeVariableDetailResponseBodyResultObjectBaseInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableListResponseBodyResultObject extends $tea.Model {
  capacity?: number;
  defineId?: string;
  description?: string;
  extendInfo?: { [key: string]: any };
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  leftCapacity?: number;
  name?: string;
  outputsType?: string;
  refObjId?: string;
  refObjName?: string;
  refObjType?: string;
  sourceType?: string;
  title?: string;
  type?: string;
  userId?: number;
  static names(): { [key: string]: string } {
    return {
      capacity: 'capacity',
      defineId: 'defineId',
      description: 'description',
      extendInfo: 'extendInfo',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      leftCapacity: 'leftCapacity',
      name: 'name',
      outputsType: 'outputsType',
      refObjId: 'refObjId',
      refObjName: 'refObjName',
      refObjType: 'refObjType',
      sourceType: 'sourceType',
      title: 'title',
      type: 'type',
      userId: 'userId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      capacity: 'number',
      defineId: 'string',
      description: 'string',
      extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      leftCapacity: 'number',
      name: 'string',
      outputsType: 'string',
      refObjId: 'string',
      refObjName: 'string',
      refObjType: 'string',
      sourceType: 'string',
      title: 'string',
      type: 'string',
      userId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeVariableSceneListResponseBodyResultObject extends $tea.Model {
  bizType?: string;
  configKey?: string;
  configValue?: string;
  creator?: string;
  description?: string;
  gmtCreate?: number;
  gmtModified?: number;
  id?: number;
  lastModifiedOperator?: string;
  status?: string;
  static names(): { [key: string]: string } {
    return {
      bizType: 'bizType',
      configKey: 'configKey',
      configValue: 'configValue',
      creator: 'creator',
      description: 'description',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      id: 'id',
      lastModifiedOperator: 'lastModifiedOperator',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizType: 'string',
      configKey: 'string',
      configValue: 'string',
      creator: 'string',
      description: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      id: 'number',
      lastModifiedOperator: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyCustVariableResponseBodyResultObject extends $tea.Model {
  failType?: string;
  message?: string;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      failType: 'failType',
      message: 'message',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      failType: 'string',
      message: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTemplateRequestInputFields extends $tea.Model {
  description?: string;
  fieldCode?: string;
  fieldRank?: number;
  fieldSource?: string;
  fieldType?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'description',
      fieldCode: 'fieldCode',
      fieldRank: 'fieldRank',
      fieldSource: 'fieldSource',
      fieldType: 'fieldType',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      fieldCode: 'string',
      fieldRank: 'number',
      fieldSource: 'string',
      fieldType: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthRuleDetailByRuleIdResponseBodyResultObject extends $tea.Model {
  auditId?: number;
  authType?: string;
  authUsers?: string;
  consoleRuleId?: number;
  eventCode?: string;
  eventName?: string;
  gmtCreate?: number;
  gmtModified?: number;
  logicExpression?: string;
  memo?: string;
  priority?: number;
  ruleActionMap?: { [key: string]: string };
  ruleActions?: string;
  ruleAuthType?: string;
  ruleExpressions?: string;
  ruleId?: string;
  ruleName?: string;
  ruleStatus?: string;
  ruleVersionId?: number;
  templateType?: string;
  version?: number;
  static names(): { [key: string]: string } {
    return {
      auditId: 'auditId',
      authType: 'authType',
      authUsers: 'authUsers',
      consoleRuleId: 'consoleRuleId',
      eventCode: 'eventCode',
      eventName: 'eventName',
      gmtCreate: 'gmtCreate',
      gmtModified: 'gmtModified',
      logicExpression: 'logicExpression',
      memo: 'memo',
      priority: 'priority',
      ruleActionMap: 'ruleActionMap',
      ruleActions: 'ruleActions',
      ruleAuthType: 'ruleAuthType',
      ruleExpressions: 'ruleExpressions',
      ruleId: 'ruleId',
      ruleName: 'ruleName',
      ruleStatus: 'ruleStatus',
      ruleVersionId: 'ruleVersionId',
      templateType: 'templateType',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      auditId: 'number',
      authType: 'string',
      authUsers: 'string',
      consoleRuleId: 'number',
      eventCode: 'string',
      eventName: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      logicExpression: 'string',
      memo: 'string',
      priority: 'number',
      ruleActionMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      ruleActions: 'string',
      ruleAuthType: 'string',
      ruleExpressions: 'string',
      ruleId: 'string',
      ruleName: 'string',
      ruleStatus: 'string',
      ruleVersionId: 'number',
      templateType: 'string',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthUserNameResponseBodyResultObject extends $tea.Model {
  company?: string;
  userId?: number;
  static names(): { [key: string]: string } {
    return {
      company: 'company',
      userId: 'userId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      company: 'string',
      userId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthorizationUserListResponseBodyResultObject extends $tea.Model {
  company?: string;
  id?: number;
  uid?: string;
  userId?: number;
  static names(): { [key: string]: string } {
    return {
      company: 'company',
      id: 'id',
      uid: 'uid',
      userId: 'userId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      company: 'string',
      id: 'number',
      uid: 'string',
      userId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}


export default class Client extends OpenApi {

  constructor(config: $OpenApi.Config) {
    super(config);
    this._signatureAlgorithm = "v2";
    this._endpointRule = "";
    this.checkConfig(config);
    this._endpoint = this.getEndpoint("xtee", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
  }


  getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {[key: string ]: string}, endpoint: string): string {
    if (!Util.empty(endpoint)) {
      return endpoint;
    }

    if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
      return endpointMap[regionId];
    }

    return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
  }

  /**
   * @summary 变量绑定操作
   *
   * @param request BindVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return BindVariableResponse
   */
  async bindVariableWithOptions(request: BindVariableRequest, runtime: $Util.RuntimeOptions): Promise<BindVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.apiRegionId)) {
      query["apiRegionId"] = request.apiRegionId;
    }

    if (!Util.isUnset(request.apiType)) {
      query["apiType"] = request.apiType;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.defineId)) {
      query["defineId"] = request.defineId;
    }

    if (!Util.isUnset(request.defineIds)) {
      query["defineIds"] = request.defineIds;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.exceptionValue)) {
      query["exceptionValue"] = request.exceptionValue;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.outputField)) {
      query["outputField"] = request.outputField;
    }

    if (!Util.isUnset(request.outputType)) {
      query["outputType"] = request.outputType;
    }

    if (!Util.isUnset(request.params)) {
      query["params"] = request.params;
    }

    if (!Util.isUnset(request.paramsList)) {
      query["paramsList"] = request.paramsList;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.sourceType)) {
      query["sourceType"] = request.sourceType;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "BindVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<BindVariableResponse>(await this.callApi(params, req, runtime), new BindVariableResponse({}));
  }

  /**
   * @summary 变量绑定操作
   *
   * @param request BindVariableRequest
   * @return BindVariableResponse
   */
  async bindVariable(request: BindVariableRequest): Promise<BindVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.bindVariableWithOptions(request, runtime);
  }

  /**
   * @summary 校验累计变量数目是否超过限定值
   *
   * @param request CheckCustVariableLimitRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CheckCustVariableLimitResponse
   */
  async checkCustVariableLimitWithOptions(request: CheckCustVariableLimitRequest, runtime: $Util.RuntimeOptions): Promise<CheckCustVariableLimitResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CheckCustVariableLimit",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CheckCustVariableLimitResponse>(await this.callApi(params, req, runtime), new CheckCustVariableLimitResponse({}));
  }

  /**
   * @summary 校验累计变量数目是否超过限定值
   *
   * @param request CheckCustVariableLimitRequest
   * @return CheckCustVariableLimitResponse
   */
  async checkCustVariableLimit(request: CheckCustVariableLimitRequest): Promise<CheckCustVariableLimitResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.checkCustVariableLimitWithOptions(request, runtime);
  }

  /**
   * @summary 校验创建变量是否超过上限
   *
   * @param request CheckExpressionVariableLimitRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CheckExpressionVariableLimitResponse
   */
  async checkExpressionVariableLimitWithOptions(request: CheckExpressionVariableLimitRequest, runtime: $Util.RuntimeOptions): Promise<CheckExpressionVariableLimitResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CheckExpressionVariableLimit",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CheckExpressionVariableLimitResponse>(await this.callApi(params, req, runtime), new CheckExpressionVariableLimitResponse({}));
  }

  /**
   * @summary 校验创建变量是否超过上限
   *
   * @param request CheckExpressionVariableLimitRequest
   * @return CheckExpressionVariableLimitResponse
   */
  async checkExpressionVariableLimit(request: CheckExpressionVariableLimitRequest): Promise<CheckExpressionVariableLimitResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.checkExpressionVariableLimitWithOptions(request, runtime);
  }

  /**
   * @summary 校验字段数目是否操过限定值
   *
   * @param request CheckFieldLimitRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CheckFieldLimitResponse
   */
  async checkFieldLimitWithOptions(request: CheckFieldLimitRequest, runtime: $Util.RuntimeOptions): Promise<CheckFieldLimitResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.source)) {
      query["source"] = request.source;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CheckFieldLimit",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CheckFieldLimitResponse>(await this.callApi(params, req, runtime), new CheckFieldLimitResponse({}));
  }

  /**
   * @summary 校验字段数目是否操过限定值
   *
   * @param request CheckFieldLimitRequest
   * @return CheckFieldLimitResponse
   */
  async checkFieldLimit(request: CheckFieldLimitRequest): Promise<CheckFieldLimitResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.checkFieldLimitWithOptions(request, runtime);
  }

  /**
   * @summary 运营权限检查
   *
   * @param request CheckPermissionRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CheckPermissionResponse
   */
  async checkPermissionWithOptions(request: CheckPermissionRequest, runtime: $Util.RuntimeOptions): Promise<CheckPermissionResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CheckPermission",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CheckPermissionResponse>(await this.callApi(params, req, runtime), new CheckPermissionResponse({}));
  }

  /**
   * @summary 运营权限检查
   *
   * @param request CheckPermissionRequest
   * @return CheckPermissionResponse
   */
  async checkPermission(request: CheckPermissionRequest): Promise<CheckPermissionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.checkPermissionWithOptions(request, runtime);
  }

  /**
   * @summary 校验变量引用
   *
   * @param request CheckUsageVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CheckUsageVariableResponse
   */
  async checkUsageVariableWithOptions(request: CheckUsageVariableRequest, runtime: $Util.RuntimeOptions): Promise<CheckUsageVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CheckUsageVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CheckUsageVariableResponse>(await this.callApi(params, req, runtime), new CheckUsageVariableResponse({}));
  }

  /**
   * @summary 校验变量引用
   *
   * @param request CheckUsageVariableRequest
   * @return CheckUsageVariableResponse
   */
  async checkUsageVariable(request: CheckUsageVariableRequest): Promise<CheckUsageVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.checkUsageVariableWithOptions(request, runtime);
  }

  /**
   * @summary 清除名单
   *
   * @param request ClearNameListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ClearNameListResponse
   */
  async clearNameListWithOptions(request: ClearNameListRequest, runtime: $Util.RuntimeOptions): Promise<ClearNameListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.variableId)) {
      query["variableId"] = request.variableId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ClearNameList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ClearNameListResponse>(await this.callApi(params, req, runtime), new ClearNameListResponse({}));
  }

  /**
   * @summary 清除名单
   *
   * @param request ClearNameListRequest
   * @return ClearNameListResponse
   */
  async clearNameList(request: ClearNameListRequest): Promise<ClearNameListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.clearNameListWithOptions(request, runtime);
  }

  /**
   * @summary 新增查询条件
   *
   * @param request CreateAnalysisConditionFavoriteRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateAnalysisConditionFavoriteResponse
   */
  async createAnalysisConditionFavoriteWithOptions(request: CreateAnalysisConditionFavoriteRequest, runtime: $Util.RuntimeOptions): Promise<CreateAnalysisConditionFavoriteResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.condition)) {
      query["condition"] = request.condition;
    }

    if (!Util.isUnset(request.eventBeginTime)) {
      query["eventBeginTime"] = request.eventBeginTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.eventEndTime)) {
      query["eventEndTime"] = request.eventEndTime;
    }

    if (!Util.isUnset(request.fieldName)) {
      query["fieldName"] = request.fieldName;
    }

    if (!Util.isUnset(request.fieldValue)) {
      query["fieldValue"] = request.fieldValue;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateAnalysisConditionFavorite",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateAnalysisConditionFavoriteResponse>(await this.callApi(params, req, runtime), new CreateAnalysisConditionFavoriteResponse({}));
  }

  /**
   * @summary 新增查询条件
   *
   * @param request CreateAnalysisConditionFavoriteRequest
   * @return CreateAnalysisConditionFavoriteResponse
   */
  async createAnalysisConditionFavorite(request: CreateAnalysisConditionFavoriteRequest): Promise<CreateAnalysisConditionFavoriteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createAnalysisConditionFavoriteWithOptions(request, runtime);
  }

  /**
   * @summary 新建导出任务
   *
   * @param request CreateAnalysisExportTaskRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateAnalysisExportTaskResponse
   */
  async createAnalysisExportTaskWithOptions(request: CreateAnalysisExportTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateAnalysisExportTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.columns)) {
      query["columns"] = request.columns;
    }

    if (!Util.isUnset(request.conditions)) {
      query["conditions"] = request.conditions;
    }

    if (!Util.isUnset(request.eventBeginTime)) {
      query["eventBeginTime"] = request.eventBeginTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.eventEndTime)) {
      query["eventEndTime"] = request.eventEndTime;
    }

    if (!Util.isUnset(request.fieldName)) {
      query["fieldName"] = request.fieldName;
    }

    if (!Util.isUnset(request.fieldValue)) {
      query["fieldValue"] = request.fieldValue;
    }

    if (!Util.isUnset(request.fileFormat)) {
      query["fileFormat"] = request.fileFormat;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.scope)) {
      query["scope"] = request.scope;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateAnalysisExportTask",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateAnalysisExportTaskResponse>(await this.callApi(params, req, runtime), new CreateAnalysisExportTaskResponse({}));
  }

  /**
   * @summary 新建导出任务
   *
   * @param request CreateAnalysisExportTaskRequest
   * @return CreateAnalysisExportTaskResponse
   */
  async createAnalysisExportTask(request: CreateAnalysisExportTaskRequest): Promise<CreateAnalysisExportTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createAnalysisExportTaskWithOptions(request, runtime);
  }

  /**
   * @summary 创建appKey
   *
   * @param request CreateAppKeyRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateAppKeyResponse
   */
  async createAppKeyWithOptions(request: CreateAppKeyRequest, runtime: $Util.RuntimeOptions): Promise<CreateAppKeyResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateAppKey",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateAppKeyResponse>(await this.callApi(params, req, runtime), new CreateAppKeyResponse({}));
  }

  /**
   * @summary 创建appKey
   *
   * @param request CreateAppKeyRequest
   * @return CreateAppKeyResponse
   */
  async createAppKey(request: CreateAppKeyRequest): Promise<CreateAppKeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createAppKeyWithOptions(request, runtime);
  }

  /**
   * @summary 新增用户授权
   *
   * @param request CreateAuthorizationUserRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateAuthorizationUserResponse
   */
  async createAuthorizationUserWithOptions(request: CreateAuthorizationUserRequest, runtime: $Util.RuntimeOptions): Promise<CreateAuthorizationUserResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.bindId)) {
      query["bindId"] = request.bindId;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.eventTemplateId)) {
      query["eventTemplateId"] = request.eventTemplateId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateAuthorizationUser",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateAuthorizationUserResponse>(await this.callApi(params, req, runtime), new CreateAuthorizationUserResponse({}));
  }

  /**
   * @summary 新增用户授权
   *
   * @param request CreateAuthorizationUserRequest
   * @return CreateAuthorizationUserResponse
   */
  async createAuthorizationUser(request: CreateAuthorizationUserRequest): Promise<CreateAuthorizationUserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createAuthorizationUserWithOptions(request, runtime);
  }

  /**
   * @summary 创建累计变量
   *
   * @param request CreateCustVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateCustVariableResponse
   */
  async createCustVariableWithOptions(request: CreateCustVariableRequest, runtime: $Util.RuntimeOptions): Promise<CreateCustVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.condition)) {
      query["condition"] = request.condition;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.historyValueType)) {
      query["historyValueType"] = request.historyValueType;
    }

    if (!Util.isUnset(request.object)) {
      query["object"] = request.object;
    }

    if (!Util.isUnset(request.outputs)) {
      query["outputs"] = request.outputs;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.subject)) {
      query["subject"] = request.subject;
    }

    if (!Util.isUnset(request.timeType)) {
      query["timeType"] = request.timeType;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    if (!Util.isUnset(request.twCount)) {
      query["twCount"] = request.twCount;
    }

    if (!Util.isUnset(request.velocityFC)) {
      query["velocityFC"] = request.velocityFC;
    }

    if (!Util.isUnset(request.velocityTW)) {
      query["velocityTW"] = request.velocityTW;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateCustVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateCustVariableResponse>(await this.callApi(params, req, runtime), new CreateCustVariableResponse({}));
  }

  /**
   * @summary 创建累计变量
   *
   * @param request CreateCustVariableRequest
   * @return CreateCustVariableResponse
   */
  async createCustVariable(request: CreateCustVariableRequest): Promise<CreateCustVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createCustVariableWithOptions(request, runtime);
  }

  /**
   * @summary 新增数据源
   *
   * @param request CreateDataSourceRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateDataSourceResponse
   */
  async createDataSourceWithOptions(request: CreateDataSourceRequest, runtime: $Util.RuntimeOptions): Promise<CreateDataSourceResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.ossKey)) {
      query["ossKey"] = request.ossKey;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateDataSource",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateDataSourceResponse>(await this.callApi(params, req, runtime), new CreateDataSourceResponse({}));
  }

  /**
   * @summary 新增数据源
   *
   * @param request CreateDataSourceRequest
   * @return CreateDataSourceResponse
   */
  async createDataSource(request: CreateDataSourceRequest): Promise<CreateDataSourceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createDataSourceWithOptions(request, runtime);
  }

  /**
   * @summary 创建事件
   *
   * @param request CreateEventRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateEventResponse
   */
  async createEventWithOptions(request: CreateEventRequest, runtime: $Util.RuntimeOptions): Promise<CreateEventResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.eventName)) {
      query["eventName"] = request.eventName;
    }

    if (!Util.isUnset(request.inputFieldsStr)) {
      query["inputFieldsStr"] = request.inputFieldsStr;
    }

    if (!Util.isUnset(request.memo)) {
      query["memo"] = request.memo;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.templateCode)) {
      query["templateCode"] = request.templateCode;
    }

    if (!Util.isUnset(request.templateName)) {
      query["templateName"] = request.templateName;
    }

    if (!Util.isUnset(request.templateType)) {
      query["templateType"] = request.templateType;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateEvent",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateEventResponse>(await this.callApi(params, req, runtime), new CreateEventResponse({}));
  }

  /**
   * @summary 创建事件
   *
   * @param request CreateEventRequest
   * @return CreateEventResponse
   */
  async createEvent(request: CreateEventRequest): Promise<CreateEventResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createEventWithOptions(request, runtime);
  }

  /**
   * @summary 创建自定义变量
   *
   * @param request CreateExpressionVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateExpressionVariableResponse
   */
  async createExpressionVariableWithOptions(request: CreateExpressionVariableRequest, runtime: $Util.RuntimeOptions): Promise<CreateExpressionVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.expression)) {
      query["expression"] = request.expression;
    }

    if (!Util.isUnset(request.expressionTitle)) {
      query["expressionTitle"] = request.expressionTitle;
    }

    if (!Util.isUnset(request.expressionVariable)) {
      query["expressionVariable"] = request.expressionVariable;
    }

    if (!Util.isUnset(request.outlier)) {
      query["outlier"] = request.outlier;
    }

    if (!Util.isUnset(request.outputs)) {
      query["outputs"] = request.outputs;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateExpressionVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateExpressionVariableResponse>(await this.callApi(params, req, runtime), new CreateExpressionVariableResponse({}));
  }

  /**
   * @summary 创建自定义变量
   *
   * @param request CreateExpressionVariableRequest
   * @return CreateExpressionVariableResponse
   */
  async createExpressionVariable(request: CreateExpressionVariableRequest): Promise<CreateExpressionVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createExpressionVariableWithOptions(request, runtime);
  }

  /**
   * @summary 新增字段
   *
   * @param request CreateFieldRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateFieldResponse
   */
  async createFieldWithOptions(request: CreateFieldRequest, runtime: $Util.RuntimeOptions): Promise<CreateFieldResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.classify)) {
      query["classify"] = request.classify;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.enumData)) {
      query["enumData"] = request.enumData;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.source)) {
      query["source"] = request.source;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateField",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateFieldResponse>(await this.callApi(params, req, runtime), new CreateFieldResponse({}));
  }

  /**
   * @summary 新增字段
   *
   * @param request CreateFieldRequest
   * @return CreateFieldResponse
   */
  async createField(request: CreateFieldRequest): Promise<CreateFieldResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createFieldWithOptions(request, runtime);
  }

  /**
   * @summary 社群打标
   *
   * @param request CreateGroupSignRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateGroupSignResponse
   */
  async createGroupSignWithOptions(request: CreateGroupSignRequest, runtime: $Util.RuntimeOptions): Promise<CreateGroupSignResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.signList)) {
      query["SignList"] = request.signList;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateGroupSign",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateGroupSignResponse>(await this.callApi(params, req, runtime), new CreateGroupSignResponse({}));
  }

  /**
   * @summary 社群打标
   *
   * @param request CreateGroupSignRequest
   * @return CreateGroupSignResponse
   */
  async createGroupSign(request: CreateGroupSignRequest): Promise<CreateGroupSignResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createGroupSignWithOptions(request, runtime);
  }

  /**
   * @summary 创建监控任务
   *
   * @param request CreateMonitorTaskRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateMonitorTaskResponse
   */
  async createMonitorTaskWithOptions(request: CreateMonitorTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateMonitorTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.bizType)) {
      query["bizType"] = request.bizType;
    }

    if (!Util.isUnset(request.cycleType)) {
      query["cycleType"] = request.cycleType;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.filePath)) {
      query["filePath"] = request.filePath;
    }

    if (!Util.isUnset(request.listdayStr)) {
      query["listdayStr"] = request.listdayStr;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.startTime)) {
      query["startTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateMonitorTask",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateMonitorTaskResponse>(await this.callApi(params, req, runtime), new CreateMonitorTaskResponse({}));
  }

  /**
   * @summary 创建监控任务
   *
   * @param request CreateMonitorTaskRequest
   * @return CreateMonitorTaskResponse
   */
  async createMonitorTask(request: CreateMonitorTaskRequest): Promise<CreateMonitorTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createMonitorTaskWithOptions(request, runtime);
  }

  /**
   * @summary 创建poc
   *
   * @param request CreatePocRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreatePocResponse
   */
  async createPocWithOptions(request: CreatePocRequest, runtime: $Util.RuntimeOptions): Promise<CreatePocResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.configStr)) {
      query["configStr"] = request.configStr;
    }

    if (!Util.isUnset(request.fileName)) {
      query["fileName"] = request.fileName;
    }

    if (!Util.isUnset(request.fileType)) {
      query["fileType"] = request.fileType;
    }

    if (!Util.isUnset(request.fileUrl)) {
      query["fileUrl"] = request.fileUrl;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.serviceCode)) {
      query["serviceCode"] = request.serviceCode;
    }

    if (!Util.isUnset(request.serviceName)) {
      query["serviceName"] = request.serviceName;
    }

    if (!Util.isUnset(request.taskName)) {
      query["taskName"] = request.taskName;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreatePoc",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreatePocResponse>(await this.callApi(params, req, runtime), new CreatePocResponse({}));
  }

  /**
   * @summary 创建poc
   *
   * @param request CreatePocRequest
   * @return CreatePocResponse
   */
  async createPoc(request: CreatePocRequest): Promise<CreatePocResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createPocWithOptions(request, runtime);
  }

  /**
   * @summary 创建poc
   *
   * @param request CreatePocEvRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreatePocEvResponse
   */
  async createPocEvWithOptions(request: CreatePocEvRequest, runtime: $Util.RuntimeOptions): Promise<CreatePocEvResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.dateFormat)) {
      query["DateFormat"] = request.dateFormat;
    }

    if (!Util.isUnset(request.fileName)) {
      query["FileName"] = request.fileName;
    }

    if (!Util.isUnset(request.fileType)) {
      query["FileType"] = request.fileType;
    }

    if (!Util.isUnset(request.fileUrl)) {
      query["FileUrl"] = request.fileUrl;
    }

    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["RegId"] = request.regId;
    }

    if (!Util.isUnset(request.serviceCode)) {
      query["ServiceCode"] = request.serviceCode;
    }

    if (!Util.isUnset(request.serviceName)) {
      query["ServiceName"] = request.serviceName;
    }

    if (!Util.isUnset(request.tab)) {
      query["Tab"] = request.tab;
    }

    if (!Util.isUnset(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    if (!Util.isUnset(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreatePocEv",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreatePocEvResponse>(await this.callApi(params, req, runtime), new CreatePocEvResponse({}));
  }

  /**
   * @summary 创建poc
   *
   * @param request CreatePocEvRequest
   * @return CreatePocEvResponse
   */
  async createPocEv(request: CreatePocEvRequest): Promise<CreatePocEvResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createPocEvWithOptions(request, runtime);
  }

  /**
   * @summary 自定义查询变量新增
   *
   * @param request CreateQueryVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateQueryVariableResponse
   */
  async createQueryVariableWithOptions(request: CreateQueryVariableRequest, runtime: $Util.RuntimeOptions): Promise<CreateQueryVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.dataSourceCode)) {
      query["dataSourceCode"] = request.dataSourceCode;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.expression)) {
      query["expression"] = request.expression;
    }

    if (!Util.isUnset(request.expressionTitle)) {
      query["expressionTitle"] = request.expressionTitle;
    }

    if (!Util.isUnset(request.expressionVariable)) {
      query["expressionVariable"] = request.expressionVariable;
    }

    if (!Util.isUnset(request.outlier)) {
      query["outlier"] = request.outlier;
    }

    if (!Util.isUnset(request.outputs)) {
      query["outputs"] = request.outputs;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateQueryVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateQueryVariableResponse>(await this.callApi(params, req, runtime), new CreateQueryVariableResponse({}));
  }

  /**
   * @summary 自定义查询变量新增
   *
   * @param request CreateQueryVariableRequest
   * @return CreateQueryVariableResponse
   */
  async createQueryVariable(request: CreateQueryVariableRequest): Promise<CreateQueryVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createQueryVariableWithOptions(request, runtime);
  }

  /**
   * @summary 创建推荐事件策略
   *
   * @param request CreateRecommendEventRuleRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateRecommendEventRuleResponse
   */
  async createRecommendEventRuleWithOptions(request: CreateRecommendEventRuleRequest, runtime: $Util.RuntimeOptions): Promise<CreateRecommendEventRuleResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.eventName)) {
      query["eventName"] = request.eventName;
    }

    if (!Util.isUnset(request.recommendRuleIdsStr)) {
      query["recommendRuleIdsStr"] = request.recommendRuleIdsStr;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.taskId)) {
      query["taskId"] = request.taskId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateRecommendEventRule",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateRecommendEventRuleResponse>(await this.callApi(params, req, runtime), new CreateRecommendEventRuleResponse({}));
  }

  /**
   * @summary 创建推荐事件策略
   *
   * @param request CreateRecommendEventRuleRequest
   * @return CreateRecommendEventRuleResponse
   */
  async createRecommendEventRule(request: CreateRecommendEventRuleRequest): Promise<CreateRecommendEventRuleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createRecommendEventRuleWithOptions(request, runtime);
  }

  /**
   * @summary 创建推荐任务
   *
   * @param request CreateRecommendTaskRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateRecommendTaskResponse
   */
  async createRecommendTaskWithOptions(request: CreateRecommendTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateRecommendTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.sampleId)) {
      query["sampleId"] = request.sampleId;
    }

    if (!Util.isUnset(request.variablesStr)) {
      query["variablesStr"] = request.variablesStr;
    }

    if (!Util.isUnset(request.velocitiesStr)) {
      query["velocitiesStr"] = request.velocitiesStr;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateRecommendTask",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateRecommendTaskResponse>(await this.callApi(params, req, runtime), new CreateRecommendTaskResponse({}));
  }

  /**
   * @summary 创建推荐任务
   *
   * @param request CreateRecommendTaskRequest
   * @return CreateRecommendTaskResponse
   */
  async createRecommendTask(request: CreateRecommendTaskRequest): Promise<CreateRecommendTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createRecommendTaskWithOptions(request, runtime);
  }

  /**
   * @summary 补充上传
   *
   * @param request CreateReplenishTaskRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateReplenishTaskResponse
   */
  async createReplenishTaskWithOptions(request: CreateReplenishTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateReplenishTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.clientFileName)) {
      query["ClientFileName"] = request.clientFileName;
    }

    if (!Util.isUnset(request.clientPath)) {
      query["ClientPath"] = request.clientPath;
    }

    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateReplenishTask",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateReplenishTaskResponse>(await this.callApi(params, req, runtime), new CreateReplenishTaskResponse({}));
  }

  /**
   * @summary 补充上传
   *
   * @param request CreateReplenishTaskRequest
   * @return CreateReplenishTaskResponse
   */
  async createReplenishTask(request: CreateReplenishTaskRequest): Promise<CreateReplenishTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createReplenishTaskWithOptions(request, runtime);
  }

  /**
   * @summary 创建策略&版本
   *
   * @param request CreateRuleRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateRuleResponse
   */
  async createRuleWithOptions(request: CreateRuleRequest, runtime: $Util.RuntimeOptions): Promise<CreateRuleResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.consoleRuleId)) {
      query["consoleRuleId"] = request.consoleRuleId;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.eventName)) {
      query["eventName"] = request.eventName;
    }

    if (!Util.isUnset(request.logicExpression)) {
      query["logicExpression"] = request.logicExpression;
    }

    if (!Util.isUnset(request.memo)) {
      query["memo"] = request.memo;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleActions)) {
      query["ruleActions"] = request.ruleActions;
    }

    if (!Util.isUnset(request.ruleExpressions)) {
      query["ruleExpressions"] = request.ruleExpressions;
    }

    if (!Util.isUnset(request.ruleName)) {
      query["ruleName"] = request.ruleName;
    }

    if (!Util.isUnset(request.ruleStatus)) {
      query["ruleStatus"] = request.ruleStatus;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateRule",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateRuleResponse>(await this.callApi(params, req, runtime), new CreateRuleResponse({}));
  }

  /**
   * @summary 创建策略&版本
   *
   * @param request CreateRuleRequest
   * @return CreateRuleResponse
   */
  async createRule(request: CreateRuleRequest): Promise<CreateRuleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createRuleWithOptions(request, runtime);
  }

  /**
   * @summary 添加样本
   *
   * @param request CreateSampleRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateSampleResponse
   */
  async createSampleWithOptions(request: CreateSampleRequest, runtime: $Util.RuntimeOptions): Promise<CreateSampleResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.clientFileName)) {
      query["clientFileName"] = request.clientFileName;
    }

    if (!Util.isUnset(request.clientPath)) {
      query["clientPath"] = request.clientPath;
    }

    if (!Util.isUnset(request.fileType)) {
      query["fileType"] = request.fileType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.sampleTag)) {
      query["sampleTag"] = request.sampleTag;
    }

    if (!Util.isUnset(request.sampleType)) {
      query["sampleType"] = request.sampleType;
    }

    if (!Util.isUnset(request.sampleValues)) {
      query["sampleValues"] = request.sampleValues;
    }

    if (!Util.isUnset(request.uploadType)) {
      query["uploadType"] = request.uploadType;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateSample",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateSampleResponse>(await this.callApi(params, req, runtime), new CreateSampleResponse({}));
  }

  /**
   * @summary 添加样本
   *
   * @param request CreateSampleRequest
   * @return CreateSampleResponse
   */
  async createSample(request: CreateSampleRequest): Promise<CreateSampleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createSampleWithOptions(request, runtime);
  }

  /**
   * @summary 用户级别单API创建样本批
   *
   * @param request CreateSampleApiRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateSampleApiResponse
   */
  async createSampleApiWithOptions(request: CreateSampleApiRequest, runtime: $Util.RuntimeOptions): Promise<CreateSampleApiResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.dataType)) {
      query["DataType"] = request.dataType;
    }

    if (!Util.isUnset(request.dataValue)) {
      query["DataValue"] = request.dataValue;
    }

    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["RegId"] = request.regId;
    }

    if (!Util.isUnset(request.sampleBatchType)) {
      query["SampleBatchType"] = request.sampleBatchType;
    }

    if (!Util.isUnset(request.serviceList)) {
      query["ServiceList"] = request.serviceList;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateSampleApi",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateSampleApiResponse>(await this.callApi(params, req, runtime), new CreateSampleApiResponse({}));
  }

  /**
   * @summary 用户级别单API创建样本批
   *
   * @param request CreateSampleApiRequest
   * @return CreateSampleApiResponse
   */
  async createSampleApi(request: CreateSampleApiRequest): Promise<CreateSampleApiResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createSampleApiWithOptions(request, runtime);
  }

  /**
   * @summary 创建样本数据
   *
   * @param request CreateSampleDataRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateSampleDataResponse
   */
  async createSampleDataWithOptions(request: CreateSampleDataRequest, runtime: $Util.RuntimeOptions): Promise<CreateSampleDataResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.encryptType)) {
      query["encryptType"] = request.encryptType;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.riskValue)) {
      query["riskValue"] = request.riskValue;
    }

    if (!Util.isUnset(request.scene)) {
      query["scene"] = request.scene;
    }

    if (!Util.isUnset(request.storePath)) {
      query["storePath"] = request.storePath;
    }

    if (!Util.isUnset(request.storeType)) {
      query["storeType"] = request.storeType;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateSampleData",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateSampleDataResponse>(await this.callApi(params, req, runtime), new CreateSampleDataResponse({}));
  }

  /**
   * @summary 创建样本数据
   *
   * @param request CreateSampleDataRequest
   * @return CreateSampleDataResponse
   */
  async createSampleData(request: CreateSampleDataRequest): Promise<CreateSampleDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createSampleDataWithOptions(request, runtime);
  }

  /**
   * @summary 创建任务
   *
   * @param request CreateSimulationTaskRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateSimulationTaskResponse
   */
  async createSimulationTaskWithOptions(request: CreateSimulationTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateSimulationTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.dataSourceConfig)) {
      query["dataSourceConfig"] = request.dataSourceConfig;
    }

    if (!Util.isUnset(request.dataSourceType)) {
      query["dataSourceType"] = request.dataSourceType;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.filtersStr)) {
      query["filtersStr"] = request.filtersStr;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.rulesStr)) {
      query["rulesStr"] = request.rulesStr;
    }

    if (!Util.isUnset(request.runTask)) {
      query["runTask"] = request.runTask;
    }

    if (!Util.isUnset(request.startTime)) {
      query["startTime"] = request.startTime;
    }

    if (!Util.isUnset(request.taskName)) {
      query["taskName"] = request.taskName;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateSimulationTask",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateSimulationTaskResponse>(await this.callApi(params, req, runtime), new CreateSimulationTaskResponse({}));
  }

  /**
   * @summary 创建任务
   *
   * @param request CreateSimulationTaskRequest
   * @return CreateSimulationTaskResponse
   */
  async createSimulationTask(request: CreateSimulationTaskRequest): Promise<CreateSimulationTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createSimulationTaskWithOptions(request, runtime);
  }

  /**
   * @summary 创建任务
   *
   * @param request CreateTaskRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateTaskResponse
   */
  async createTaskWithOptions(request: CreateTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.clientFileName)) {
      query["ClientFileName"] = request.clientFileName;
    }

    if (!Util.isUnset(request.clientPath)) {
      query["ClientPath"] = request.clientPath;
    }

    if (!Util.isUnset(request.describe)) {
      query["Describe"] = request.describe;
    }

    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.sceneName)) {
      query["SceneName"] = request.sceneName;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateTask",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateTaskResponse>(await this.callApi(params, req, runtime), new CreateTaskResponse({}));
  }

  /**
   * @summary 创建任务
   *
   * @param request CreateTaskRequest
   * @return CreateTaskResponse
   */
  async createTask(request: CreateTaskRequest): Promise<CreateTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createTaskWithOptions(request, runtime);
  }

  /**
   * @summary 创建模版
   *
   * @param request CreateTemplateRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return CreateTemplateResponse
   */
  async createTemplateWithOptions(request: CreateTemplateRequest, runtime: $Util.RuntimeOptions): Promise<CreateTemplateResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.eventName)) {
      query["eventName"] = request.eventName;
    }

    if (!Util.isUnset(request.logicExpression)) {
      query["logicExpression"] = request.logicExpression;
    }

    if (!Util.isUnset(request.memo)) {
      query["memo"] = request.memo;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleActions)) {
      query["ruleActions"] = request.ruleActions;
    }

    if (!Util.isUnset(request.ruleExpressions)) {
      query["ruleExpressions"] = request.ruleExpressions;
    }

    if (!Util.isUnset(request.ruleName)) {
      query["ruleName"] = request.ruleName;
    }

    if (!Util.isUnset(request.ruleStatus)) {
      query["ruleStatus"] = request.ruleStatus;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "CreateTemplate",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<CreateTemplateResponse>(await this.callApi(params, req, runtime), new CreateTemplateResponse({}));
  }

  /**
   * @summary 创建模版
   *
   * @param request CreateTemplateRequest
   * @return CreateTemplateResponse
   */
  async createTemplate(request: CreateTemplateRequest): Promise<CreateTemplateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.createTemplateWithOptions(request, runtime);
  }

  /**
   * @summary 删除查询条件
   *
   * @param request DeleteAnalysisConditionFavoriteRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteAnalysisConditionFavoriteResponse
   */
  async deleteAnalysisConditionFavoriteWithOptions(request: DeleteAnalysisConditionFavoriteRequest, runtime: $Util.RuntimeOptions): Promise<DeleteAnalysisConditionFavoriteResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteAnalysisConditionFavorite",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteAnalysisConditionFavoriteResponse>(await this.callApi(params, req, runtime), new DeleteAnalysisConditionFavoriteResponse({}));
  }

  /**
   * @summary 删除查询条件
   *
   * @param request DeleteAnalysisConditionFavoriteRequest
   * @return DeleteAnalysisConditionFavoriteResponse
   */
  async deleteAnalysisConditionFavorite(request: DeleteAnalysisConditionFavoriteRequest): Promise<DeleteAnalysisConditionFavoriteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteAnalysisConditionFavoriteWithOptions(request, runtime);
  }

  /**
   * @summary 删除用户授权
   *
   * @param request DeleteAuthUserRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteAuthUserResponse
   */
  async deleteAuthUserWithOptions(request: DeleteAuthUserRequest, runtime: $Util.RuntimeOptions): Promise<DeleteAuthUserResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteAuthUser",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteAuthUserResponse>(await this.callApi(params, req, runtime), new DeleteAuthUserResponse({}));
  }

  /**
   * @summary 删除用户授权
   *
   * @param request DeleteAuthUserRequest
   * @return DeleteAuthUserResponse
   */
  async deleteAuthUser(request: DeleteAuthUserRequest): Promise<DeleteAuthUserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteAuthUserWithOptions(request, runtime);
  }

  /**
   * @summary 删除旁路事件
   *
   * @param request DeleteByPassShuntEventRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteByPassShuntEventResponse
   */
  async deleteByPassShuntEventWithOptions(request: DeleteByPassShuntEventRequest, runtime: $Util.RuntimeOptions): Promise<DeleteByPassShuntEventResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventId)) {
      query["eventId"] = request.eventId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteByPassShuntEvent",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteByPassShuntEventResponse>(await this.callApi(params, req, runtime), new DeleteByPassShuntEventResponse({}));
  }

  /**
   * @summary 删除旁路事件
   *
   * @param request DeleteByPassShuntEventRequest
   * @return DeleteByPassShuntEventResponse
   */
  async deleteByPassShuntEvent(request: DeleteByPassShuntEventRequest): Promise<DeleteByPassShuntEventResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteByPassShuntEventWithOptions(request, runtime);
  }

  /**
   * @summary 删除累计变量
   *
   * @param request DeleteCustVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteCustVariableResponse
   */
  async deleteCustVariableWithOptions(request: DeleteCustVariableRequest, runtime: $Util.RuntimeOptions): Promise<DeleteCustVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.dataVersion)) {
      query["dataVersion"] = request.dataVersion;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.variableId)) {
      query["variableId"] = request.variableId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteCustVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteCustVariableResponse>(await this.callApi(params, req, runtime), new DeleteCustVariableResponse({}));
  }

  /**
   * @summary 删除累计变量
   *
   * @param request DeleteCustVariableRequest
   * @return DeleteCustVariableResponse
   */
  async deleteCustVariable(request: DeleteCustVariableRequest): Promise<DeleteCustVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteCustVariableWithOptions(request, runtime);
  }

  /**
   * @summary 删除数据源
   *
   * @param request DeleteDataSourceRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteDataSourceResponse
   */
  async deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDataSourceResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteDataSource",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteDataSourceResponse>(await this.callApi(params, req, runtime), new DeleteDataSourceResponse({}));
  }

  /**
   * @summary 删除数据源
   *
   * @param request DeleteDataSourceRequest
   * @return DeleteDataSourceResponse
   */
  async deleteDataSource(request: DeleteDataSourceRequest): Promise<DeleteDataSourceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteDataSourceWithOptions(request, runtime);
  }

  /**
   * @summary 删除自定义变量
   *
   * @param request DeleteExpressionVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteExpressionVariableResponse
   */
  async deleteExpressionVariableWithOptions(request: DeleteExpressionVariableRequest, runtime: $Util.RuntimeOptions): Promise<DeleteExpressionVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.dataVersion)) {
      query["dataVersion"] = request.dataVersion;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteExpressionVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteExpressionVariableResponse>(await this.callApi(params, req, runtime), new DeleteExpressionVariableResponse({}));
  }

  /**
   * @summary 删除自定义变量
   *
   * @param request DeleteExpressionVariableRequest
   * @return DeleteExpressionVariableResponse
   */
  async deleteExpressionVariable(request: DeleteExpressionVariableRequest): Promise<DeleteExpressionVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteExpressionVariableWithOptions(request, runtime);
  }

  /**
   * @summary 删除字段
   *
   * @param request DeleteFieldRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteFieldResponse
   */
  async deleteFieldWithOptions(request: DeleteFieldRequest, runtime: $Util.RuntimeOptions): Promise<DeleteFieldResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteField",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteFieldResponse>(await this.callApi(params, req, runtime), new DeleteFieldResponse({}));
  }

  /**
   * @summary 删除字段
   *
   * @param request DeleteFieldRequest
   * @return DeleteFieldResponse
   */
  async deleteField(request: DeleteFieldRequest): Promise<DeleteFieldResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteFieldWithOptions(request, runtime);
  }

  /**
   * @summary 删除名单
   *
   * @param request DeleteNameListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteNameListResponse
   */
  async deleteNameListWithOptions(request: DeleteNameListRequest, runtime: $Util.RuntimeOptions): Promise<DeleteNameListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.ids)) {
      query["ids"] = request.ids;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteNameList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteNameListResponse>(await this.callApi(params, req, runtime), new DeleteNameListResponse({}));
  }

  /**
   * @summary 删除名单
   *
   * @param request DeleteNameListRequest
   * @return DeleteNameListResponse
   */
  async deleteNameList(request: DeleteNameListRequest): Promise<DeleteNameListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteNameListWithOptions(request, runtime);
  }

  /**
   * @summary 删除(伪)名单变量数据
   *
   * @param request DeleteNameListDataRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteNameListDataResponse
   */
  async deleteNameListDataWithOptions(request: DeleteNameListDataRequest, runtime: $Util.RuntimeOptions): Promise<DeleteNameListDataResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.variableId)) {
      query["variableId"] = request.variableId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteNameListData",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteNameListDataResponse>(await this.callApi(params, req, runtime), new DeleteNameListDataResponse({}));
  }

  /**
   * @summary 删除(伪)名单变量数据
   *
   * @param request DeleteNameListDataRequest
   * @return DeleteNameListDataResponse
   */
  async deleteNameListData(request: DeleteNameListDataRequest): Promise<DeleteNameListDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteNameListDataWithOptions(request, runtime);
  }

  /**
   * @summary 查询变量删除
   *
   * @param request DeleteQueryVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteQueryVariableResponse
   */
  async deleteQueryVariableWithOptions(request: DeleteQueryVariableRequest, runtime: $Util.RuntimeOptions): Promise<DeleteQueryVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteQueryVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteQueryVariableResponse>(await this.callApi(params, req, runtime), new DeleteQueryVariableResponse({}));
  }

  /**
   * @summary 查询变量删除
   *
   * @param request DeleteQueryVariableRequest
   * @return DeleteQueryVariableResponse
   */
  async deleteQueryVariable(request: DeleteQueryVariableRequest): Promise<DeleteQueryVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteQueryVariableWithOptions(request, runtime);
  }

  /**
   * @summary 删除策略版本
   *
   * @param request DeleteRuleRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteRuleResponse
   */
  async deleteRuleWithOptions(request: DeleteRuleRequest, runtime: $Util.RuntimeOptions): Promise<DeleteRuleResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.consoleRuleId)) {
      query["consoleRuleId"] = request.consoleRuleId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleId)) {
      query["ruleId"] = request.ruleId;
    }

    if (!Util.isUnset(request.ruleVersionId)) {
      query["ruleVersionId"] = request.ruleVersionId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteRule",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteRuleResponse>(await this.callApi(params, req, runtime), new DeleteRuleResponse({}));
  }

  /**
   * @summary 删除策略版本
   *
   * @param request DeleteRuleRequest
   * @return DeleteRuleResponse
   */
  async deleteRule(request: DeleteRuleRequest): Promise<DeleteRuleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteRuleWithOptions(request, runtime);
  }

  /**
   * @summary 批量删除样本
   *
   * @param request DeleteSampleBatchRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteSampleBatchResponse
   */
  async deleteSampleBatchWithOptions(request: DeleteSampleBatchRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSampleBatchResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.ids)) {
      query["ids"] = request.ids;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.versions)) {
      query["versions"] = request.versions;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteSampleBatch",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteSampleBatchResponse>(await this.callApi(params, req, runtime), new DeleteSampleBatchResponse({}));
  }

  /**
   * @summary 批量删除样本
   *
   * @param request DeleteSampleBatchRequest
   * @return DeleteSampleBatchResponse
   */
  async deleteSampleBatch(request: DeleteSampleBatchRequest): Promise<DeleteSampleBatchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteSampleBatchWithOptions(request, runtime);
  }

  /**
   * @summary 删除样本数据
   *
   * @param request DeleteSampleDataRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteSampleDataResponse
   */
  async deleteSampleDataWithOptions(request: DeleteSampleDataRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSampleDataResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteSampleData",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteSampleDataResponse>(await this.callApi(params, req, runtime), new DeleteSampleDataResponse({}));
  }

  /**
   * @summary 删除样本数据
   *
   * @param request DeleteSampleDataRequest
   * @return DeleteSampleDataResponse
   */
  async deleteSampleData(request: DeleteSampleDataRequest): Promise<DeleteSampleDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteSampleDataWithOptions(request, runtime);
  }

  /**
   * @summary 删除社群任务
   *
   * @param request DeleteTaskRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DeleteTaskResponse
   */
  async deleteTaskWithOptions(request: DeleteTaskRequest, runtime: $Util.RuntimeOptions): Promise<DeleteTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DeleteTask",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DeleteTaskResponse>(await this.callApi(params, req, runtime), new DeleteTaskResponse({}));
  }

  /**
   * @summary 删除社群任务
   *
   * @param request DeleteTaskRequest
   * @return DeleteTaskResponse
   */
  async deleteTask(request: DeleteTaskRequest): Promise<DeleteTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.deleteTaskWithOptions(request, runtime);
  }

  /**
   * @summary 高级查询获取左变量接口
   *
   * @param request DescribeAdvanceSearchLeftVariableListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAdvanceSearchLeftVariableListResponse
   */
  async describeAdvanceSearchLeftVariableListWithOptions(request: DescribeAdvanceSearchLeftVariableListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAdvanceSearchLeftVariableListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.scene)) {
      query["scene"] = request.scene;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAdvanceSearchLeftVariableList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAdvanceSearchLeftVariableListResponse>(await this.callApi(params, req, runtime), new DescribeAdvanceSearchLeftVariableListResponse({}));
  }

  /**
   * @summary 高级查询获取左变量接口
   *
   * @param request DescribeAdvanceSearchLeftVariableListRequest
   * @return DescribeAdvanceSearchLeftVariableListResponse
   */
  async describeAdvanceSearchLeftVariableList(request: DescribeAdvanceSearchLeftVariableListRequest): Promise<DescribeAdvanceSearchLeftVariableListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAdvanceSearchLeftVariableListWithOptions(request, runtime);
  }

  /**
   * @summary 高级查询
   *
   * @param request DescribeAdvanceSearchPageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAdvanceSearchPageListResponse
   */
  async describeAdvanceSearchPageListWithOptions(request: DescribeAdvanceSearchPageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAdvanceSearchPageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.condition)) {
      query["condition"] = request.condition;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.eventBeginTime)) {
      query["eventBeginTime"] = request.eventBeginTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.eventEndTime)) {
      query["eventEndTime"] = request.eventEndTime;
    }

    if (!Util.isUnset(request.fieldName)) {
      query["fieldName"] = request.fieldName;
    }

    if (!Util.isUnset(request.fieldValue)) {
      query["fieldValue"] = request.fieldValue;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAdvanceSearchPageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAdvanceSearchPageListResponse>(await this.callApi(params, req, runtime), new DescribeAdvanceSearchPageListResponse({}));
  }

  /**
   * @summary 高级查询
   *
   * @param request DescribeAdvanceSearchPageListRequest
   * @return DescribeAdvanceSearchPageListResponse
   */
  async describeAdvanceSearchPageList(request: DescribeAdvanceSearchPageListRequest): Promise<DescribeAdvanceSearchPageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAdvanceSearchPageListWithOptions(request, runtime);
  }

  /**
   * @summary 数据源列表
   *
   * @param request DescribeAllDataSourceRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAllDataSourceResponse
   */
  async describeAllDataSourceWithOptions(request: DescribeAllDataSourceRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAllDataSourceResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAllDataSource",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAllDataSourceResponse>(await this.callApi(params, req, runtime), new DescribeAllDataSourceResponse({}));
  }

  /**
   * @summary 数据源列表
   *
   * @param request DescribeAllDataSourceRequest
   * @return DescribeAllDataSourceResponse
   */
  async describeAllDataSource(request: DescribeAllDataSourceRequest): Promise<DescribeAllDataSourceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAllDataSourceWithOptions(request, runtime);
  }

  /**
   * @summary 事件列表查询
   *
   * @param request DescribeAllEventNameAndCodeRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAllEventNameAndCodeResponse
   */
  async describeAllEventNameAndCodeWithOptions(request: DescribeAllEventNameAndCodeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAllEventNameAndCodeResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAllEventNameAndCode",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAllEventNameAndCodeResponse>(await this.callApi(params, req, runtime), new DescribeAllEventNameAndCodeResponse({}));
  }

  /**
   * @summary 事件列表查询
   *
   * @param request DescribeAllEventNameAndCodeRequest
   * @return DescribeAllEventNameAndCodeResponse
   */
  async describeAllEventNameAndCode(request: DescribeAllEventNameAndCodeRequest): Promise<DescribeAllEventNameAndCodeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAllEventNameAndCodeWithOptions(request, runtime);
  }

  /**
   * @summary 自定义表达式测试时，展示所有的根变量
   *
   * @param request DescribeAllRootVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAllRootVariableResponse
   */
  async describeAllRootVariableWithOptions(request: DescribeAllRootVariableRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAllRootVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!Util.isUnset(request.deviceVariableIds)) {
      query["deviceVariableIds"] = request.deviceVariableIds;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.expressionVariableIds)) {
      query["expressionVariableIds"] = request.expressionVariableIds;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.nativeVariableIds)) {
      query["nativeVariableIds"] = request.nativeVariableIds;
    }

    if (!Util.isUnset(request.queryVariableIds)) {
      query["queryVariableIds"] = request.queryVariableIds;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.velocityVariableIds)) {
      query["velocityVariableIds"] = request.velocityVariableIds;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAllRootVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAllRootVariableResponse>(await this.callApi(params, req, runtime), new DescribeAllRootVariableResponse({}));
  }

  /**
   * @summary 自定义表达式测试时，展示所有的根变量
   *
   * @param request DescribeAllRootVariableRequest
   * @return DescribeAllRootVariableResponse
   */
  async describeAllRootVariable(request: DescribeAllRootVariableRequest): Promise<DescribeAllRootVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAllRootVariableWithOptions(request, runtime);
  }

  /**
   * @summary 展示所有字段
   *
   * @param request DescribeAnalysisColumnFieldListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAnalysisColumnFieldListResponse
   */
  async describeAnalysisColumnFieldListWithOptions(request: DescribeAnalysisColumnFieldListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAnalysisColumnFieldListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAnalysisColumnFieldList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAnalysisColumnFieldListResponse>(await this.callApi(params, req, runtime), new DescribeAnalysisColumnFieldListResponse({}));
  }

  /**
   * @summary 展示所有字段
   *
   * @param request DescribeAnalysisColumnFieldListRequest
   * @return DescribeAnalysisColumnFieldListResponse
   */
  async describeAnalysisColumnFieldList(request: DescribeAnalysisColumnFieldListRequest): Promise<DescribeAnalysisColumnFieldListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAnalysisColumnFieldListWithOptions(request, runtime);
  }

  /**
   * @summary 查询自定义列
   *
   * @param request DescribeAnalysisColumnListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAnalysisColumnListResponse
   */
  async describeAnalysisColumnListWithOptions(request: DescribeAnalysisColumnListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAnalysisColumnListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAnalysisColumnList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAnalysisColumnListResponse>(await this.callApi(params, req, runtime), new DescribeAnalysisColumnListResponse({}));
  }

  /**
   * @summary 查询自定义列
   *
   * @param request DescribeAnalysisColumnListRequest
   * @return DescribeAnalysisColumnListResponse
   */
  async describeAnalysisColumnList(request: DescribeAnalysisColumnListRequest): Promise<DescribeAnalysisColumnListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAnalysisColumnListWithOptions(request, runtime);
  }

  /**
   * @summary 查询条件列表
   *
   * @param request DescribeAnalysisConditionFavoriteListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAnalysisConditionFavoriteListResponse
   */
  async describeAnalysisConditionFavoriteListWithOptions(request: DescribeAnalysisConditionFavoriteListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAnalysisConditionFavoriteListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAnalysisConditionFavoriteList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAnalysisConditionFavoriteListResponse>(await this.callApi(params, req, runtime), new DescribeAnalysisConditionFavoriteListResponse({}));
  }

  /**
   * @summary 查询条件列表
   *
   * @param request DescribeAnalysisConditionFavoriteListRequest
   * @return DescribeAnalysisConditionFavoriteListResponse
   */
  async describeAnalysisConditionFavoriteList(request: DescribeAnalysisConditionFavoriteListRequest): Promise<DescribeAnalysisConditionFavoriteListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAnalysisConditionFavoriteListWithOptions(request, runtime);
  }

  /**
   * @summary 下载查询结果
   *
   * @param request DescribeAnalysisExportTaskDownloadUrlRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAnalysisExportTaskDownloadUrlResponse
   */
  async describeAnalysisExportTaskDownloadUrlWithOptions(request: DescribeAnalysisExportTaskDownloadUrlRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAnalysisExportTaskDownloadUrlResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAnalysisExportTaskDownloadUrl",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAnalysisExportTaskDownloadUrlResponse>(await this.callApi(params, req, runtime), new DescribeAnalysisExportTaskDownloadUrlResponse({}));
  }

  /**
   * @summary 下载查询结果
   *
   * @param request DescribeAnalysisExportTaskDownloadUrlRequest
   * @return DescribeAnalysisExportTaskDownloadUrlResponse
   */
  async describeAnalysisExportTaskDownloadUrl(request: DescribeAnalysisExportTaskDownloadUrlRequest): Promise<DescribeAnalysisExportTaskDownloadUrlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAnalysisExportTaskDownloadUrlWithOptions(request, runtime);
  }

  /**
   * @summary 得到api详情
   *
   * @param request DescribeApiRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeApiResponse
   */
  async describeApiWithOptions(request: DescribeApiRequest, runtime: $Util.RuntimeOptions): Promise<DescribeApiResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.apiId)) {
      query["apiId"] = request.apiId;
    }

    if (!Util.isUnset(request.apiRegionId)) {
      query["apiRegionId"] = request.apiRegionId;
    }

    if (!Util.isUnset(request.apiType)) {
      query["apiType"] = request.apiType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeApi",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeApiResponse>(await this.callApi(params, req, runtime), new DescribeApiResponse({}));
  }

  /**
   * @summary 得到api详情
   *
   * @param request DescribeApiRequest
   * @return DescribeApiResponse
   */
  async describeApi(request: DescribeApiRequest): Promise<DescribeApiResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeApiWithOptions(request, runtime);
  }

  /**
   * @summary 得到api分组包括用户购买的以及自定义的
   *
   * @param request DescribeApiGroupsRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeApiGroupsResponse
   */
  async describeApiGroupsWithOptions(request: DescribeApiGroupsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeApiGroupsResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.apiRegionId)) {
      query["apiRegionId"] = request.apiRegionId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeApiGroups",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeApiGroupsResponse>(await this.callApi(params, req, runtime), new DescribeApiGroupsResponse({}));
  }

  /**
   * @summary 得到api分组包括用户购买的以及自定义的
   *
   * @param request DescribeApiGroupsRequest
   * @return DescribeApiGroupsResponse
   */
  async describeApiGroups(request: DescribeApiGroupsRequest): Promise<DescribeApiGroupsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeApiGroupsWithOptions(request, runtime);
  }

  /**
   * @summary 查询创建api任务的limit信息
   *
   * @param request DescribeApiLimitRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeApiLimitResponse
   */
  async describeApiLimitWithOptions(request: DescribeApiLimitRequest, runtime: $Util.RuntimeOptions): Promise<DescribeApiLimitResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeApiLimit",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeApiLimitResponse>(await this.callApi(params, req, runtime), new DescribeApiLimitResponse({}));
  }

  /**
   * @summary 查询创建api任务的limit信息
   *
   * @param request DescribeApiLimitRequest
   * @return DescribeApiLimitResponse
   */
  async describeApiLimit(request: DescribeApiLimitRequest): Promise<DescribeApiLimitResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeApiLimitWithOptions(request, runtime);
  }

  /**
   * @summary 获取api服务名称
   *
   * @param request DescribeApiNameListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeApiNameListResponse
   */
  async describeApiNameListWithOptions(request: DescribeApiNameListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeApiNameListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeApiNameList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeApiNameListResponse>(await this.callApi(params, req, runtime), new DescribeApiNameListResponse({}));
  }

  /**
   * @summary 获取api服务名称
   *
   * @param request DescribeApiNameListRequest
   * @return DescribeApiNameListResponse
   */
  async describeApiNameList(request: DescribeApiNameListRequest): Promise<DescribeApiNameListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeApiNameListWithOptions(request, runtime);
  }

  /**
   * @summary 查询变量详情
   *
   * @param request DescribeApiVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeApiVariableResponse
   */
  async describeApiVariableWithOptions(request: DescribeApiVariableRequest, runtime: $Util.RuntimeOptions): Promise<DescribeApiVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeApiVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeApiVariableResponse>(await this.callApi(params, req, runtime), new DescribeApiVariableResponse({}));
  }

  /**
   * @summary 查询变量详情
   *
   * @param request DescribeApiVariableRequest
   * @return DescribeApiVariableResponse
   */
  async describeApiVariable(request: DescribeApiVariableRequest): Promise<DescribeApiVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeApiVariableWithOptions(request, runtime);
  }

  /**
   * @summary 得到api列表包括用户购买的以及自定义的
   *
   * @param request DescribeApisRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeApisResponse
   */
  async describeApisWithOptions(request: DescribeApisRequest, runtime: $Util.RuntimeOptions): Promise<DescribeApisResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.apiGroupId)) {
      query["apiGroupId"] = request.apiGroupId;
    }

    if (!Util.isUnset(request.apiRegionId)) {
      query["apiRegionId"] = request.apiRegionId;
    }

    if (!Util.isUnset(request.apiType)) {
      query["apiType"] = request.apiType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeApis",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeApisResponse>(await this.callApi(params, req, runtime), new DescribeApisResponse({}));
  }

  /**
   * @summary 得到api列表包括用户购买的以及自定义的
   *
   * @param request DescribeApisRequest
   * @return DescribeApisResponse
   */
  async describeApis(request: DescribeApisRequest): Promise<DescribeApisResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeApisWithOptions(request, runtime);
  }

  /**
   * @summary 查询appKey列表
   *
   * @param request DescribeAppKeyPageRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAppKeyPageResponse
   */
  async describeAppKeyPageWithOptions(request: DescribeAppKeyPageRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAppKeyPageResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAppKeyPage",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAppKeyPageResponse>(await this.callApi(params, req, runtime), new DescribeAppKeyPageResponse({}));
  }

  /**
   * @summary 查询appKey列表
   *
   * @param request DescribeAppKeyPageRequest
   * @return DescribeAppKeyPageResponse
   */
  async describeAppKeyPage(request: DescribeAppKeyPageRequest): Promise<DescribeAppKeyPageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAppKeyPageWithOptions(request, runtime);
  }

  /**
   * @summary 审批开关
   *
   * @param request DescribeAuditConfigRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAuditConfigResponse
   */
  async describeAuditConfigWithOptions(request: DescribeAuditConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAuditConfigResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.auditRelationType)) {
      query["auditRelationType"] = request.auditRelationType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAuditConfig",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAuditConfigResponse>(await this.callApi(params, req, runtime), new DescribeAuditConfigResponse({}));
  }

  /**
   * @summary 审批开关
   *
   * @param request DescribeAuditConfigRequest
   * @return DescribeAuditConfigResponse
   */
  async describeAuditConfig(request: DescribeAuditConfigRequest): Promise<DescribeAuditConfigResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAuditConfigWithOptions(request, runtime);
  }

  /**
   * @summary 审批详情
   *
   * @param request DescribeAuditDetailsRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAuditDetailsResponse
   */
  async describeAuditDetailsWithOptions(request: DescribeAuditDetailsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAuditDetailsResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAuditDetails",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAuditDetailsResponse>(await this.callApi(params, req, runtime), new DescribeAuditDetailsResponse({}));
  }

  /**
   * @summary 审批详情
   *
   * @param request DescribeAuditDetailsRequest
   * @return DescribeAuditDetailsResponse
   */
  async describeAuditDetails(request: DescribeAuditDetailsRequest): Promise<DescribeAuditDetailsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAuditDetailsWithOptions(request, runtime);
  }

  /**
   * @summary 审核列表展示、查询
   *
   * @param request DescribeAuditPageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAuditPageListResponse
   */
  async describeAuditPageListWithOptions(request: DescribeAuditPageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAuditPageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.auditStatus)) {
      query["auditStatus"] = request.auditStatus;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleName)) {
      query["ruleName"] = request.ruleName;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAuditPageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAuditPageListResponse>(await this.callApi(params, req, runtime), new DescribeAuditPageListResponse({}));
  }

  /**
   * @summary 审核列表展示、查询
   *
   * @param request DescribeAuditPageListRequest
   * @return DescribeAuditPageListResponse
   */
  async describeAuditPageList(request: DescribeAuditPageListRequest): Promise<DescribeAuditPageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAuditPageListWithOptions(request, runtime);
  }

  /**
   * @summary 查询当前用户的事件名列表
   *
   * @param request DescribeAuthEventNameListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAuthEventNameListResponse
   */
  async describeAuthEventNameListWithOptions(request: DescribeAuthEventNameListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAuthEventNameListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAuthEventNameList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAuthEventNameListResponse>(await this.callApi(params, req, runtime), new DescribeAuthEventNameListResponse({}));
  }

  /**
   * @summary 查询当前用户的事件名列表
   *
   * @param request DescribeAuthEventNameListRequest
   * @return DescribeAuthEventNameListResponse
   */
  async describeAuthEventNameList(request: DescribeAuthEventNameListRequest): Promise<DescribeAuthEventNameListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAuthEventNameListWithOptions(request, runtime);
  }

  /**
   * @summary 策略列表
   *
   * @param request DescribeAuthRulePageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAuthRulePageListResponse
   */
  async describeAuthRulePageListWithOptions(request: DescribeAuthRulePageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAuthRulePageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleName)) {
      query["ruleName"] = request.ruleName;
    }

    if (!Util.isUnset(request.status)) {
      query["status"] = request.status;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAuthRulePageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAuthRulePageListResponse>(await this.callApi(params, req, runtime), new DescribeAuthRulePageListResponse({}));
  }

  /**
   * @summary 策略列表
   *
   * @param request DescribeAuthRulePageListRequest
   * @return DescribeAuthRulePageListResponse
   */
  async describeAuthRulePageList(request: DescribeAuthRulePageListRequest): Promise<DescribeAuthRulePageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAuthRulePageListWithOptions(request, runtime);
  }

  /**
   * @summary 场景列表
   *
   * @param request DescribeAuthSceneListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAuthSceneListResponse
   */
  async describeAuthSceneListWithOptions(request: DescribeAuthSceneListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAuthSceneListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAuthSceneList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAuthSceneListResponse>(await this.callApi(params, req, runtime), new DescribeAuthSceneListResponse({}));
  }

  /**
   * @summary 场景列表
   *
   * @param request DescribeAuthSceneListRequest
   * @return DescribeAuthSceneListResponse
   */
  async describeAuthSceneList(request: DescribeAuthSceneListRequest): Promise<DescribeAuthSceneListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAuthSceneListWithOptions(request, runtime);
  }

  /**
   * @summary 场景列表
   *
   * @param request DescribeAuthScenePageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAuthScenePageListResponse
   */
  async describeAuthScenePageListWithOptions(request: DescribeAuthScenePageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAuthScenePageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.sceneName)) {
      query["sceneName"] = request.sceneName;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAuthScenePageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAuthScenePageListResponse>(await this.callApi(params, req, runtime), new DescribeAuthScenePageListResponse({}));
  }

  /**
   * @summary 场景列表
   *
   * @param request DescribeAuthScenePageListRequest
   * @return DescribeAuthScenePageListResponse
   */
  async describeAuthScenePageList(request: DescribeAuthScenePageListRequest): Promise<DescribeAuthScenePageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAuthScenePageListWithOptions(request, runtime);
  }

  /**
   * @summary 查看是否授权
   *
   * @param request DescribeAuthStatusRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAuthStatusResponse
   */
  async describeAuthStatusWithOptions(request: DescribeAuthStatusRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAuthStatusResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAuthStatus",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAuthStatusResponse>(await this.callApi(params, req, runtime), new DescribeAuthStatusResponse({}));
  }

  /**
   * @summary 查看是否授权
   *
   * @param request DescribeAuthStatusRequest
   * @return DescribeAuthStatusResponse
   */
  async describeAuthStatus(request: DescribeAuthStatusRequest): Promise<DescribeAuthStatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAuthStatusWithOptions(request, runtime);
  }

  /**
   * @summary 平均执行耗时
   *
   * @param request DescribeAvgExecuteCostReportRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeAvgExecuteCostReportResponse
   */
  async describeAvgExecuteCostReportWithOptions(request: DescribeAvgExecuteCostReportRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAvgExecuteCostReportResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeAvgExecuteCostReport",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeAvgExecuteCostReportResponse>(await this.callApi(params, req, runtime), new DescribeAvgExecuteCostReportResponse({}));
  }

  /**
   * @summary 平均执行耗时
   *
   * @param request DescribeAvgExecuteCostReportRequest
   * @return DescribeAvgExecuteCostReportResponse
   */
  async describeAvgExecuteCostReport(request: DescribeAvgExecuteCostReportRequest): Promise<DescribeAvgExecuteCostReportResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeAvgExecuteCostReportWithOptions(request, runtime);
  }

  /**
   * @summary 基础查询
   *
   * @param request DescribeBasicSearchPageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeBasicSearchPageListResponse
   */
  async describeBasicSearchPageListWithOptions(request: DescribeBasicSearchPageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeBasicSearchPageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.eventBeginTime)) {
      query["eventBeginTime"] = request.eventBeginTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.eventEndTime)) {
      query["eventEndTime"] = request.eventEndTime;
    }

    if (!Util.isUnset(request.fieldName)) {
      query["fieldName"] = request.fieldName;
    }

    if (!Util.isUnset(request.fieldValue)) {
      query["fieldValue"] = request.fieldValue;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeBasicSearchPageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeBasicSearchPageListResponse>(await this.callApi(params, req, runtime), new DescribeBasicSearchPageListResponse({}));
  }

  /**
   * @summary 基础查询
   *
   * @param request DescribeBasicSearchPageListRequest
   * @return DescribeBasicSearchPageListResponse
   */
  async describeBasicSearchPageList(request: DescribeBasicSearchPageListRequest): Promise<DescribeBasicSearchPageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeBasicSearchPageListWithOptions(request, runtime);
  }

  /**
   * @summary 基础统计
   *
   * @param request DescribeBasicStartRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeBasicStartResponse
   */
  async describeBasicStartWithOptions(request: DescribeBasicStartRequest, runtime: $Util.RuntimeOptions): Promise<DescribeBasicStartResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.appKey)) {
      query["appKey"] = request.appKey;
    }

    if (!Util.isUnset(request.endDs)) {
      query["endDs"] = request.endDs;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.service)) {
      query["service"] = request.service;
    }

    if (!Util.isUnset(request.startDs)) {
      query["startDs"] = request.startDs;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeBasicStart",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeBasicStartResponse>(await this.callApi(params, req, runtime), new DescribeBasicStartResponse({}));
  }

  /**
   * @summary 基础统计
   *
   * @param request DescribeBasicStartRequest
   * @return DescribeBasicStartResponse
   */
  async describeBasicStart(request: DescribeBasicStartRequest): Promise<DescribeBasicStartResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeBasicStartWithOptions(request, runtime);
  }

  /**
   * @summary 查看旁路事件
   *
   * @param request DescribeByPassShuntEventRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeByPassShuntEventResponse
   */
  async describeByPassShuntEventWithOptions(request: DescribeByPassShuntEventRequest, runtime: $Util.RuntimeOptions): Promise<DescribeByPassShuntEventResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventId)) {
      query["eventId"] = request.eventId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeByPassShuntEvent",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeByPassShuntEventResponse>(await this.callApi(params, req, runtime), new DescribeByPassShuntEventResponse({}));
  }

  /**
   * @summary 查看旁路事件
   *
   * @param request DescribeByPassShuntEventRequest
   * @return DescribeByPassShuntEventResponse
   */
  async describeByPassShuntEvent(request: DescribeByPassShuntEventRequest): Promise<DescribeByPassShuntEventResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeByPassShuntEventWithOptions(request, runtime);
  }

  /**
   * @summary 查询自定义累计变量的类型配置
   *
   * @param request DescribeCustVariableConfigListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeCustVariableConfigListResponse
   */
  async describeCustVariableConfigListWithOptions(request: DescribeCustVariableConfigListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCustVariableConfigListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.bizType)) {
      query["bizType"] = request.bizType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.timeType)) {
      query["timeType"] = request.timeType;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeCustVariableConfigList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeCustVariableConfigListResponse>(await this.callApi(params, req, runtime), new DescribeCustVariableConfigListResponse({}));
  }

  /**
   * @summary 查询自定义累计变量的类型配置
   *
   * @param request DescribeCustVariableConfigListRequest
   * @return DescribeCustVariableConfigListResponse
   */
  async describeCustVariableConfigList(request: DescribeCustVariableConfigListRequest): Promise<DescribeCustVariableConfigListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeCustVariableConfigListWithOptions(request, runtime);
  }

  /**
   * @summary 累计变量详情
   *
   * @param request DescribeCustVariableDetailRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeCustVariableDetailResponse
   */
  async describeCustVariableDetailWithOptions(request: DescribeCustVariableDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCustVariableDetailResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeCustVariableDetail",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeCustVariableDetailResponse>(await this.callApi(params, req, runtime), new DescribeCustVariableDetailResponse({}));
  }

  /**
   * @summary 累计变量详情
   *
   * @param request DescribeCustVariableDetailRequest
   * @return DescribeCustVariableDetailResponse
   */
  async describeCustVariableDetail(request: DescribeCustVariableDetailRequest): Promise<DescribeCustVariableDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeCustVariableDetailWithOptions(request, runtime);
  }

  /**
   * @summary 查询自定义累计变量列表
   *
   * @param request DescribeCustVariablePageRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeCustVariablePageResponse
   */
  async describeCustVariablePageWithOptions(request: DescribeCustVariablePageRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCustVariablePageResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeCustVariablePage",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeCustVariablePageResponse>(await this.callApi(params, req, runtime), new DescribeCustVariablePageResponse({}));
  }

  /**
   * @summary 查询自定义累计变量列表
   *
   * @param request DescribeCustVariablePageRequest
   * @return DescribeCustVariablePageResponse
   */
  async describeCustVariablePage(request: DescribeCustVariablePageRequest): Promise<DescribeCustVariablePageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeCustVariablePageWithOptions(request, runtime);
  }

  /**
   * @summary 获取数据源数据下载链接
   *
   * @param request DescribeDataSourceDataDownloadUrlRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeDataSourceDataDownloadUrlResponse
   */
  async describeDataSourceDataDownloadUrlWithOptions(request: DescribeDataSourceDataDownloadUrlRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDataSourceDataDownloadUrlResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.dataSourceId)) {
      query["dataSourceId"] = request.dataSourceId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeDataSourceDataDownloadUrl",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeDataSourceDataDownloadUrlResponse>(await this.callApi(params, req, runtime), new DescribeDataSourceDataDownloadUrlResponse({}));
  }

  /**
   * @summary 获取数据源数据下载链接
   *
   * @param request DescribeDataSourceDataDownloadUrlRequest
   * @return DescribeDataSourceDataDownloadUrlResponse
   */
  async describeDataSourceDataDownloadUrl(request: DescribeDataSourceDataDownloadUrlRequest): Promise<DescribeDataSourceDataDownloadUrlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeDataSourceDataDownloadUrlWithOptions(request, runtime);
  }

  /**
   * @summary 获取数据源所有字段
   *
   * @param request DescribeDataSourceFieldsRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeDataSourceFieldsResponse
   */
  async describeDataSourceFieldsWithOptions(request: DescribeDataSourceFieldsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDataSourceFieldsResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.dataSourceCode)) {
      query["dataSourceCode"] = request.dataSourceCode;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeDataSourceFields",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeDataSourceFieldsResponse>(await this.callApi(params, req, runtime), new DescribeDataSourceFieldsResponse({}));
  }

  /**
   * @summary 获取数据源所有字段
   *
   * @param request DescribeDataSourceFieldsRequest
   * @return DescribeDataSourceFieldsResponse
   */
  async describeDataSourceFields(request: DescribeDataSourceFieldsRequest): Promise<DescribeDataSourceFieldsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeDataSourceFieldsWithOptions(request, runtime);
  }

  /**
   * @summary 数据源列表接口
   *
   * @param request DescribeDataSourcePageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeDataSourcePageListResponse
   */
  async describeDataSourcePageListWithOptions(request: DescribeDataSourcePageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDataSourcePageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeDataSourcePageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeDataSourcePageListResponse>(await this.callApi(params, req, runtime), new DescribeDataSourcePageListResponse({}));
  }

  /**
   * @summary 数据源列表接口
   *
   * @param request DescribeDataSourcePageListRequest
   * @return DescribeDataSourcePageListResponse
   */
  async describeDataSourcePageList(request: DescribeDataSourcePageListRequest): Promise<DescribeDataSourcePageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeDataSourcePageListWithOptions(request, runtime);
  }

  /**
   * @summary 决策结果波动检测
   *
   * @param request DescribeDecisionResultFluctuationRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeDecisionResultFluctuationResponse
   */
  async describeDecisionResultFluctuationWithOptions(request: DescribeDecisionResultFluctuationRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDecisionResultFluctuationResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeDecisionResultFluctuation",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeDecisionResultFluctuationResponse>(await this.callApi(params, req, runtime), new DescribeDecisionResultFluctuationResponse({}));
  }

  /**
   * @summary 决策结果波动检测
   *
   * @param request DescribeDecisionResultFluctuationRequest
   * @return DescribeDecisionResultFluctuationResponse
   */
  async describeDecisionResultFluctuation(request: DescribeDecisionResultFluctuationRequest): Promise<DescribeDecisionResultFluctuationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeDecisionResultFluctuationWithOptions(request, runtime);
  }

  /**
   * @summary 决策结果波动趋势
   *
   * @param request DescribeDecisionResultTrendRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeDecisionResultTrendResponse
   */
  async describeDecisionResultTrendWithOptions(request: DescribeDecisionResultTrendRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDecisionResultTrendResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeDecisionResultTrend",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeDecisionResultTrendResponse>(await this.callApi(params, req, runtime), new DescribeDecisionResultTrendResponse({}));
  }

  /**
   * @summary 决策结果波动趋势
   *
   * @param request DescribeDecisionResultTrendRequest
   * @return DescribeDecisionResultTrendResponse
   */
  async describeDecisionResultTrend(request: DescribeDecisionResultTrendRequest): Promise<DescribeDecisionResultTrendResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeDecisionResultTrendWithOptions(request, runtime);
  }

  /**
   * @summary 详细统计
   *
   * @param request DescribeDetailStartRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeDetailStartResponse
   */
  async describeDetailStartWithOptions(request: DescribeDetailStartRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDetailStartResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.appKey)) {
      query["appKey"] = request.appKey;
    }

    if (!Util.isUnset(request.endDs)) {
      query["endDs"] = request.endDs;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.service)) {
      query["service"] = request.service;
    }

    if (!Util.isUnset(request.startDs)) {
      query["startDs"] = request.startDs;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeDetailStart",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeDetailStartResponse>(await this.callApi(params, req, runtime), new DescribeDetailStartResponse({}));
  }

  /**
   * @summary 详细统计
   *
   * @param request DescribeDetailStartRequest
   * @return DescribeDetailStartResponse
   */
  async describeDetailStart(request: DescribeDetailStartRequest): Promise<DescribeDetailStartResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeDetailStartWithOptions(request, runtime);
  }

  /**
   * @summary 下载
   *
   * @param request DescribeDownloadUrlRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeDownloadUrlResponse
   */
  async describeDownloadUrlWithOptions(request: DescribeDownloadUrlRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDownloadUrlResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.fileType)) {
      query["FileType"] = request.fileType;
    }

    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["RegId"] = request.regId;
    }

    if (!Util.isUnset(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!Util.isUnset(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeDownloadUrl",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeDownloadUrlResponse>(await this.callApi(params, req, runtime), new DescribeDownloadUrlResponse({}));
  }

  /**
   * @summary 下载
   *
   * @param request DescribeDownloadUrlRequest
   * @return DescribeDownloadUrlResponse
   */
  async describeDownloadUrl(request: DescribeDownloadUrlRequest): Promise<DescribeDownloadUrlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeDownloadUrlWithOptions(request, runtime);
  }

  /**
   * @summary 查询事件详情
   *
   * @param request DescribeEventBaseInfoByEventCodeRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventBaseInfoByEventCodeResponse
   */
  async describeEventBaseInfoByEventCodeWithOptions(request: DescribeEventBaseInfoByEventCodeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventBaseInfoByEventCodeResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventBaseInfoByEventCode",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventBaseInfoByEventCodeResponse>(await this.callApi(params, req, runtime), new DescribeEventBaseInfoByEventCodeResponse({}));
  }

  /**
   * @summary 查询事件详情
   *
   * @param request DescribeEventBaseInfoByEventCodeRequest
   * @return DescribeEventBaseInfoByEventCodeResponse
   */
  async describeEventBaseInfoByEventCode(request: DescribeEventBaseInfoByEventCodeRequest): Promise<DescribeEventBaseInfoByEventCodeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventBaseInfoByEventCodeWithOptions(request, runtime);
  }

  /**
   * @summary 查询事件总数量
   *
   * @param request DescribeEventCountRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventCountResponse
   */
  async describeEventCountWithOptions(request: DescribeEventCountRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventCountResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventCount",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventCountResponse>(await this.callApi(params, req, runtime), new DescribeEventCountResponse({}));
  }

  /**
   * @summary 查询事件总数量
   *
   * @param request DescribeEventCountRequest
   * @return DescribeEventCountResponse
   */
  async describeEventCount(request: DescribeEventCountRequest): Promise<DescribeEventCountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventCountWithOptions(request, runtime);
  }

  /**
   * @summary 根据requestId查询事件详情
   *
   * @param request DescribeEventDetailByRequestIdRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventDetailByRequestIdResponse
   */
  async describeEventDetailByRequestIdWithOptions(request: DescribeEventDetailByRequestIdRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventDetailByRequestIdResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.eventTime)) {
      query["eventTime"] = request.eventTime;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.sRequestId)) {
      query["sRequestId"] = request.sRequestId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventDetailByRequestId",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventDetailByRequestIdResponse>(await this.callApi(params, req, runtime), new DescribeEventDetailByRequestIdResponse({}));
  }

  /**
   * @summary 根据requestId查询事件详情
   *
   * @param request DescribeEventDetailByRequestIdRequest
   * @return DescribeEventDetailByRequestIdResponse
   */
  async describeEventDetailByRequestId(request: DescribeEventDetailByRequestIdRequest): Promise<DescribeEventDetailByRequestIdResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventDetailByRequestIdWithOptions(request, runtime);
  }

  /**
   * @summary 查询事件历史详情
   *
   * @param request DescribeEventLogDetailRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventLogDetailResponse
   */
  async describeEventLogDetailWithOptions(request: DescribeEventLogDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventLogDetailResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.reqIdByLog)) {
      query["reqIdByLog"] = request.reqIdByLog;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventLogDetail",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventLogDetailResponse>(await this.callApi(params, req, runtime), new DescribeEventLogDetailResponse({}));
  }

  /**
   * @summary 查询事件历史详情
   *
   * @param request DescribeEventLogDetailRequest
   * @return DescribeEventLogDetailResponse
   */
  async describeEventLogDetail(request: DescribeEventLogDetailRequest): Promise<DescribeEventLogDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventLogDetailWithOptions(request, runtime);
  }

  /**
   * @summary 查询事件历史列表
   *
   * @param request DescribeEventLogPageRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventLogPageResponse
   */
  async describeEventLogPageWithOptions(request: DescribeEventLogPageRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventLogPageResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.accountIdPRP)) {
      query["accountIdPRP"] = request.accountIdPRP;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.condition1AL)) {
      query["condition1AL"] = request.condition1AL;
    }

    if (!Util.isUnset(request.condition2AL)) {
      query["condition2AL"] = request.condition2AL;
    }

    if (!Util.isUnset(request.condition3AL)) {
      query["condition3AL"] = request.condition3AL;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.deviceTypeLRP)) {
      query["deviceTypeLRP"] = request.deviceTypeLRP;
    }

    if (!Util.isUnset(request.emailPRP)) {
      query["emailPRP"] = request.emailPRP;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.failReasonLRP)) {
      query["failReasonLRP"] = request.failReasonLRP;
    }

    if (!Util.isUnset(request.ipPRP)) {
      query["ipPRP"] = request.ipPRP;
    }

    if (!Util.isUnset(request.loginResultARP)) {
      query["loginResultARP"] = request.loginResultARP;
    }

    if (!Util.isUnset(request.loginTypeLRP)) {
      query["loginTypeLRP"] = request.loginTypeLRP;
    }

    if (!Util.isUnset(request.macPRP)) {
      query["macPRP"] = request.macPRP;
    }

    if (!Util.isUnset(request.mobilePRP)) {
      query["mobilePRP"] = request.mobilePRP;
    }

    if (!Util.isUnset(request.nickNamePRP)) {
      query["nickNamePRP"] = request.nickNamePRP;
    }

    if (!Util.isUnset(request.operateSourceLRP)) {
      query["operateSourceLRP"] = request.operateSourceLRP;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.referPRP)) {
      query["referPRP"] = request.referPRP;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.registerIpPRP)) {
      query["registerIpPRP"] = request.registerIpPRP;
    }

    if (!Util.isUnset(request.reqIdPBS)) {
      query["reqIdPBS"] = request.reqIdPBS;
    }

    if (!Util.isUnset(request.scoreEBS)) {
      query["scoreEBS"] = request.scoreEBS;
    }

    if (!Util.isUnset(request.scoreSBS)) {
      query["scoreSBS"] = request.scoreSBS;
    }

    if (!Util.isUnset(request.serviceABS)) {
      query["serviceABS"] = request.serviceABS;
    }

    if (!Util.isUnset(request.tagsLBS)) {
      query["tagsLBS"] = request.tagsLBS;
    }

    if (!Util.isUnset(request.umidPDI)) {
      query["umidPDI"] = request.umidPDI;
    }

    if (!Util.isUnset(request.userAgentPRP)) {
      query["userAgentPRP"] = request.userAgentPRP;
    }

    if (!Util.isUnset(request.userNameTypeLRP)) {
      query["userNameTypeLRP"] = request.userNameTypeLRP;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventLogPage",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventLogPageResponse>(await this.callApi(params, req, runtime), new DescribeEventLogPageResponse({}));
  }

  /**
   * @summary 查询事件历史列表
   *
   * @param request DescribeEventLogPageRequest
   * @return DescribeEventLogPageResponse
   */
  async describeEventLogPage(request: DescribeEventLogPageRequest): Promise<DescribeEventLogPageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventLogPageWithOptions(request, runtime);
  }

  /**
   * @summary 事件分页查询
   *
   * @param request DescribeEventPageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventPageListResponse
   */
  async describeEventPageListWithOptions(request: DescribeEventPageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventPageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.eventName)) {
      query["eventName"] = request.eventName;
    }

    if (!Util.isUnset(request.eventStatus)) {
      query["eventStatus"] = request.eventStatus;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventPageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventPageListResponse>(await this.callApi(params, req, runtime), new DescribeEventPageListResponse({}));
  }

  /**
   * @summary 事件分页查询
   *
   * @param request DescribeEventPageListRequest
   * @return DescribeEventPageListResponse
   */
  async describeEventPageList(request: DescribeEventPageListRequest): Promise<DescribeEventPageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventPageListWithOptions(request, runtime);
  }

  /**
   * @summary 风险大盘
   *
   * @param request DescribeEventResultBarChartRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventResultBarChartResponse
   */
  async describeEventResultBarChartWithOptions(request: DescribeEventResultBarChartRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventResultBarChartResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventResultBarChart",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventResultBarChartResponse>(await this.callApi(params, req, runtime), new DescribeEventResultBarChartResponse({}));
  }

  /**
   * @summary 风险大盘
   *
   * @param request DescribeEventResultBarChartRequest
   * @return DescribeEventResultBarChartResponse
   */
  async describeEventResultBarChart(request: DescribeEventResultBarChartRequest): Promise<DescribeEventResultBarChartResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventResultBarChartWithOptions(request, runtime);
  }

  /**
   * @summary 事件概览列表
   *
   * @param request DescribeEventResultListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventResultListResponse
   */
  async describeEventResultListWithOptions(request: DescribeEventResultListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventResultListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventResultList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventResultListResponse>(await this.callApi(params, req, runtime), new DescribeEventResultListResponse({}));
  }

  /**
   * @summary 事件概览列表
   *
   * @param request DescribeEventResultListRequest
   * @return DescribeEventResultListResponse
   */
  async describeEventResultList(request: DescribeEventResultListRequest): Promise<DescribeEventResultListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventResultListWithOptions(request, runtime);
  }

  /**
   * @summary 查询策略下载列表
   *
   * @param request DescribeEventTaskHistoryRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventTaskHistoryResponse
   */
  async describeEventTaskHistoryWithOptions(request: DescribeEventTaskHistoryRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventTaskHistoryResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventTaskHistory",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventTaskHistoryResponse>(await this.callApi(params, req, runtime), new DescribeEventTaskHistoryResponse({}));
  }

  /**
   * @summary 查询策略下载列表
   *
   * @param request DescribeEventTaskHistoryRequest
   * @return DescribeEventTaskHistoryResponse
   */
  async describeEventTaskHistory(request: DescribeEventTaskHistoryRequest): Promise<DescribeEventTaskHistoryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventTaskHistoryWithOptions(request, runtime);
  }

  /**
   * @summary 调用事件次数
   *
   * @param request DescribeEventTotalCountReportRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventTotalCountReportResponse
   */
  async describeEventTotalCountReportWithOptions(request: DescribeEventTotalCountReportRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventTotalCountReportResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventTotalCountReport",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventTotalCountReportResponse>(await this.callApi(params, req, runtime), new DescribeEventTotalCountReportResponse({}));
  }

  /**
   * @summary 调用事件次数
   *
   * @param request DescribeEventTotalCountReportRequest
   * @return DescribeEventTotalCountReportResponse
   */
  async describeEventTotalCountReport(request: DescribeEventTotalCountReportRequest): Promise<DescribeEventTotalCountReportResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventTotalCountReportWithOptions(request, runtime);
  }

  /**
   * @summary 批量导入策略
   *
   * @param request DescribeEventUploadPolicyRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventUploadPolicyResponse
   */
  async describeEventUploadPolicyWithOptions(request: DescribeEventUploadPolicyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventUploadPolicyResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventUploadPolicy",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventUploadPolicyResponse>(await this.callApi(params, req, runtime), new DescribeEventUploadPolicyResponse({}));
  }

  /**
   * @summary 批量导入策略
   *
   * @param request DescribeEventUploadPolicyRequest
   * @return DescribeEventUploadPolicyResponse
   */
  async describeEventUploadPolicy(request: DescribeEventUploadPolicyRequest): Promise<DescribeEventUploadPolicyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventUploadPolicyWithOptions(request, runtime);
  }

  /**
   * @summary 查询事件变量
   *
   * @param request DescribeEventVariableListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventVariableListResponse
   */
  async describeEventVariableListWithOptions(request: DescribeEventVariableListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventVariableListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.filterDTO)) {
      query["filterDTO"] = request.filterDTO;
    }

    if (!Util.isUnset(request.refObjId)) {
      query["refObjId"] = request.refObjId;
    }

    if (!Util.isUnset(request.refObjType)) {
      query["refObjType"] = request.refObjType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventVariableList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventVariableListResponse>(await this.callApi(params, req, runtime), new DescribeEventVariableListResponse({}));
  }

  /**
   * @summary 查询事件变量
   *
   * @param request DescribeEventVariableListRequest
   * @return DescribeEventVariableListResponse
   */
  async describeEventVariableList(request: DescribeEventVariableListRequest): Promise<DescribeEventVariableListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventVariableListWithOptions(request, runtime);
  }

  /**
   * @summary 查询事件模版
   *
   * @param request DescribeEventVariableTemplateBindRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventVariableTemplateBindResponse
   */
  async describeEventVariableTemplateBindWithOptions(request: DescribeEventVariableTemplateBindRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventVariableTemplateBindResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.inputs)) {
      query["inputs"] = request.inputs;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.templateCode)) {
      query["templateCode"] = request.templateCode;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventVariableTemplateBind",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventVariableTemplateBindResponse>(await this.callApi(params, req, runtime), new DescribeEventVariableTemplateBindResponse({}));
  }

  /**
   * @summary 查询事件模版
   *
   * @param request DescribeEventVariableTemplateBindRequest
   * @return DescribeEventVariableTemplateBindResponse
   */
  async describeEventVariableTemplateBind(request: DescribeEventVariableTemplateBindRequest): Promise<DescribeEventVariableTemplateBindResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventVariableTemplateBindWithOptions(request, runtime);
  }

  /**
   * @summary 查询事件模版
   *
   * @param request DescribeEventVariableTemplateListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventVariableTemplateListResponse
   */
  async describeEventVariableTemplateListWithOptions(request: DescribeEventVariableTemplateListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventVariableTemplateListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.inputs)) {
      query["inputs"] = request.inputs;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.templateCode)) {
      query["templateCode"] = request.templateCode;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventVariableTemplateList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventVariableTemplateListResponse>(await this.callApi(params, req, runtime), new DescribeEventVariableTemplateListResponse({}));
  }

  /**
   * @summary 查询事件模版
   *
   * @param request DescribeEventVariableTemplateListRequest
   * @return DescribeEventVariableTemplateListResponse
   */
  async describeEventVariableTemplateList(request: DescribeEventVariableTemplateListRequest): Promise<DescribeEventVariableTemplateListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventVariableTemplateListWithOptions(request, runtime);
  }

  /**
   * @summary 查询事件变量
   *
   * @param request DescribeEventsVariableListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeEventsVariableListResponse
   */
  async describeEventsVariableListWithOptions(request: DescribeEventsVariableListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventsVariableListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.filterDTO)) {
      query["filterDTO"] = request.filterDTO;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.scene)) {
      query["scene"] = request.scene;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeEventsVariableList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeEventsVariableListResponse>(await this.callApi(params, req, runtime), new DescribeEventsVariableListResponse({}));
  }

  /**
   * @summary 查询事件变量
   *
   * @param request DescribeEventsVariableListRequest
   * @return DescribeEventsVariableListResponse
   */
  async describeEventsVariableList(request: DescribeEventsVariableListRequest): Promise<DescribeEventsVariableListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeEventsVariableListWithOptions(request, runtime);
  }

  /**
   * @param request DescribeExcuteNumRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeExcuteNumResponse
   */
  async describeExcuteNumWithOptions(request: DescribeExcuteNumRequest, runtime: $Util.RuntimeOptions): Promise<DescribeExcuteNumResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.code)) {
      query["Code"] = request.code;
    }

    if (!Util.isUnset(request.degree)) {
      query["Degree"] = request.degree;
    }

    if (!Util.isUnset(request.endDate)) {
      query["EndDate"] = request.endDate;
    }

    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!Util.isUnset(request.startDate)) {
      query["StartDate"] = request.startDate;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeExcuteNum",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeExcuteNumResponse>(await this.callApi(params, req, runtime), new DescribeExcuteNumResponse({}));
  }

  /**
   * @param request DescribeExcuteNumRequest
   * @return DescribeExcuteNumResponse
   */
  async describeExcuteNum(request: DescribeExcuteNumRequest): Promise<DescribeExcuteNumResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeExcuteNumWithOptions(request, runtime);
  }

  /**
   * @summary 校验字段名是否重复(基于用户单位)
   *
   * @param request DescribeExistNameRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeExistNameResponse
   */
  async describeExistNameWithOptions(request: DescribeExistNameRequest, runtime: $Util.RuntimeOptions): Promise<DescribeExistNameResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeExistName",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeExistNameResponse>(await this.callApi(params, req, runtime), new DescribeExistNameResponse({}));
  }

  /**
   * @summary 校验字段名是否重复(基于用户单位)
   *
   * @param request DescribeExistNameRequest
   * @return DescribeExistNameResponse
   */
  async describeExistName(request: DescribeExistNameRequest): Promise<DescribeExistNameResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeExistNameWithOptions(request, runtime);
  }

  /**
   * @summary 场景是否存在
   *
   * @param request DescribeExistSceneRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeExistSceneResponse
   */
  async describeExistSceneWithOptions(request: DescribeExistSceneRequest, runtime: $Util.RuntimeOptions): Promise<DescribeExistSceneResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.sceneName)) {
      query["SceneName"] = request.sceneName;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeExistScene",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeExistSceneResponse>(await this.callApi(params, req, runtime), new DescribeExistSceneResponse({}));
  }

  /**
   * @summary 场景是否存在
   *
   * @param request DescribeExistSceneRequest
   * @return DescribeExistSceneResponse
   */
  async describeExistScene(request: DescribeExistSceneRequest): Promise<DescribeExistSceneResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeExistSceneWithOptions(request, runtime);
  }

  /**
   * @summary 自定义变量详情
   *
   * @param request DescribeExpressionVariableDetailRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeExpressionVariableDetailResponse
   */
  async describeExpressionVariableDetailWithOptions(request: DescribeExpressionVariableDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribeExpressionVariableDetailResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeExpressionVariableDetail",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeExpressionVariableDetailResponse>(await this.callApi(params, req, runtime), new DescribeExpressionVariableDetailResponse({}));
  }

  /**
   * @summary 自定义变量详情
   *
   * @param request DescribeExpressionVariableDetailRequest
   * @return DescribeExpressionVariableDetailResponse
   */
  async describeExpressionVariableDetail(request: DescribeExpressionVariableDetailRequest): Promise<DescribeExpressionVariableDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeExpressionVariableDetailWithOptions(request, runtime);
  }

  /**
   * @summary 函数列表
   *
   * @param request DescribeExpressionVariableFunctionListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeExpressionVariableFunctionListResponse
   */
  async describeExpressionVariableFunctionListWithOptions(request: DescribeExpressionVariableFunctionListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeExpressionVariableFunctionListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeExpressionVariableFunctionList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeExpressionVariableFunctionListResponse>(await this.callApi(params, req, runtime), new DescribeExpressionVariableFunctionListResponse({}));
  }

  /**
   * @summary 函数列表
   *
   * @param request DescribeExpressionVariableFunctionListRequest
   * @return DescribeExpressionVariableFunctionListResponse
   */
  async describeExpressionVariableFunctionList(request: DescribeExpressionVariableFunctionListRequest): Promise<DescribeExpressionVariableFunctionListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeExpressionVariableFunctionListWithOptions(request, runtime);
  }

  /**
   * @summary 自定义变量分页查询
   *
   * @param request DescribeExpressionVariablePageRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeExpressionVariablePageResponse
   */
  async describeExpressionVariablePageWithOptions(request: DescribeExpressionVariablePageRequest, runtime: $Util.RuntimeOptions): Promise<DescribeExpressionVariablePageResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.outputs)) {
      query["outputs"] = request.outputs;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.status)) {
      query["status"] = request.status;
    }

    if (!Util.isUnset(request.value)) {
      query["value"] = request.value;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeExpressionVariablePage",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeExpressionVariablePageResponse>(await this.callApi(params, req, runtime), new DescribeExpressionVariablePageResponse({}));
  }

  /**
   * @summary 自定义变量分页查询
   *
   * @param request DescribeExpressionVariablePageRequest
   * @return DescribeExpressionVariablePageResponse
   */
  async describeExpressionVariablePage(request: DescribeExpressionVariablePageRequest): Promise<DescribeExpressionVariablePageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeExpressionVariablePageWithOptions(request, runtime);
  }

  /**
   * @summary 获取字段详情
   *
   * @param request DescribeFieldByIdRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeFieldByIdResponse
   */
  async describeFieldByIdWithOptions(request: DescribeFieldByIdRequest, runtime: $Util.RuntimeOptions): Promise<DescribeFieldByIdResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeFieldById",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeFieldByIdResponse>(await this.callApi(params, req, runtime), new DescribeFieldByIdResponse({}));
  }

  /**
   * @summary 获取字段详情
   *
   * @param request DescribeFieldByIdRequest
   * @return DescribeFieldByIdResponse
   */
  async describeFieldById(request: DescribeFieldByIdRequest): Promise<DescribeFieldByIdResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeFieldByIdWithOptions(request, runtime);
  }

  /**
   * @summary 查询字段列表
   *
   * @param request DescribeFieldListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeFieldListResponse
   */
  async describeFieldListWithOptions(request: DescribeFieldListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeFieldListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.condition)) {
      query["condition"] = request.condition;
    }

    if (!Util.isUnset(request.inputs)) {
      query["inputs"] = request.inputs;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeFieldList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeFieldListResponse>(await this.callApi(params, req, runtime), new DescribeFieldListResponse({}));
  }

  /**
   * @summary 查询字段列表
   *
   * @param request DescribeFieldListRequest
   * @return DescribeFieldListResponse
   */
  async describeFieldList(request: DescribeFieldListRequest): Promise<DescribeFieldListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeFieldListWithOptions(request, runtime);
  }

  /**
   * @summary 查询字段分页列表
   *
   * @param request DescribeFieldPageRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeFieldPageResponse
   */
  async describeFieldPageWithOptions(request: DescribeFieldPageRequest, runtime: $Util.RuntimeOptions): Promise<DescribeFieldPageResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.classify)) {
      query["classify"] = request.classify;
    }

    if (!Util.isUnset(request.condition)) {
      query["condition"] = request.condition;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.source)) {
      query["source"] = request.source;
    }

    if (!Util.isUnset(request.status)) {
      query["status"] = request.status;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeFieldPage",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeFieldPageResponse>(await this.callApi(params, req, runtime), new DescribeFieldPageResponse({}));
  }

  /**
   * @summary 查询字段分页列表
   *
   * @param request DescribeFieldPageRequest
   * @return DescribeFieldPageResponse
   */
  async describeFieldPage(request: DescribeFieldPageRequest): Promise<DescribeFieldPageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeFieldPageWithOptions(request, runtime);
  }

  /**
   * @summary 社群账户列表
   *
   * @param request DescribeGroupAccountPageRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeGroupAccountPageResponse
   */
  async describeGroupAccountPageWithOptions(request: DescribeGroupAccountPageRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGroupAccountPageResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.communityNo)) {
      query["communityNo"] = request.communityNo;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.direction)) {
      query["direction"] = request.direction;
    }

    if (!Util.isUnset(request.fieldKey)) {
      query["fieldKey"] = request.fieldKey;
    }

    if (!Util.isUnset(request.fieldVal)) {
      query["fieldVal"] = request.fieldVal;
    }

    if (!Util.isUnset(request.isPage)) {
      query["isPage"] = request.isPage;
    }

    if (!Util.isUnset(request.order)) {
      query["order"] = request.order;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.taskId)) {
      query["taskId"] = request.taskId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeGroupAccountPage",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeGroupAccountPageResponse>(await this.callApi(params, req, runtime), new DescribeGroupAccountPageResponse({}));
  }

  /**
   * @summary 社群账户列表
   *
   * @param request DescribeGroupAccountPageRequest
   * @return DescribeGroupAccountPageResponse
   */
  async describeGroupAccountPage(request: DescribeGroupAccountPageRequest): Promise<DescribeGroupAccountPageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeGroupAccountPageWithOptions(request, runtime);
  }

  /**
   * @summary 社群列表查询条件
   *
   * @param request DescribeGroupConditionListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeGroupConditionListResponse
   */
  async describeGroupConditionListWithOptions(request: DescribeGroupConditionListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGroupConditionListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeGroupConditionList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeGroupConditionListResponse>(await this.callApi(params, req, runtime), new DescribeGroupConditionListResponse({}));
  }

  /**
   * @summary 社群列表查询条件
   *
   * @param request DescribeGroupConditionListRequest
   * @return DescribeGroupConditionListResponse
   */
  async describeGroupConditionList(request: DescribeGroupConditionListRequest): Promise<DescribeGroupConditionListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeGroupConditionListWithOptions(request, runtime);
  }

  /**
   * @summary 社群列表
   *
   * @param request DescribeGroupPageRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeGroupPageResponse
   */
  async describeGroupPageWithOptions(request: DescribeGroupPageRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGroupPageResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.direction)) {
      query["direction"] = request.direction;
    }

    if (!Util.isUnset(request.order)) {
      query["order"] = request.order;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.taskId)) {
      query["taskId"] = request.taskId;
    }

    if (!Util.isUnset(request.timeType)) {
      query["timeType"] = request.timeType;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeGroupPage",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeGroupPageResponse>(await this.callApi(params, req, runtime), new DescribeGroupPageResponse({}));
  }

  /**
   * @summary 社群列表
   *
   * @param request DescribeGroupPageRequest
   * @return DescribeGroupPageResponse
   */
  async describeGroupPage(request: DescribeGroupPageRequest): Promise<DescribeGroupPageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeGroupPageWithOptions(request, runtime);
  }

  /**
   * @summary 当日发现的风险社群
   *
   * @param request DescribeGroupStatisticsByTodayRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeGroupStatisticsByTodayResponse
   */
  async describeGroupStatisticsByTodayWithOptions(request: DescribeGroupStatisticsByTodayRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGroupStatisticsByTodayResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeGroupStatisticsByToday",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeGroupStatisticsByTodayResponse>(await this.callApi(params, req, runtime), new DescribeGroupStatisticsByTodayResponse({}));
  }

  /**
   * @summary 当日发现的风险社群
   *
   * @param request DescribeGroupStatisticsByTodayRequest
   * @return DescribeGroupStatisticsByTodayResponse
   */
  async describeGroupStatisticsByToday(request: DescribeGroupStatisticsByTodayRequest): Promise<DescribeGroupStatisticsByTodayResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeGroupStatisticsByTodayWithOptions(request, runtime);
  }

  /**
   * @summary 风险社群的近期趋势
   *
   * @param request DescribeGroupTrendRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeGroupTrendResponse
   */
  async describeGroupTrendWithOptions(request: DescribeGroupTrendRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGroupTrendResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.day)) {
      query["day"] = request.day;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeGroupTrend",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeGroupTrendResponse>(await this.callApi(params, req, runtime), new DescribeGroupTrendResponse({}));
  }

  /**
   * @summary 风险社群的近期趋势
   *
   * @param request DescribeGroupTrendRequest
   * @return DescribeGroupTrendResponse
   */
  async describeGroupTrend(request: DescribeGroupTrendRequest): Promise<DescribeGroupTrendResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeGroupTrendWithOptions(request, runtime);
  }

  /**
   * @summary 查询事件名下的策略名是否存在
   *
   * @param request DescribeHasRuleNameByEventCodeRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeHasRuleNameByEventCodeResponse
   */
  async describeHasRuleNameByEventCodeWithOptions(request: DescribeHasRuleNameByEventCodeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHasRuleNameByEventCodeResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.excludeRuleId)) {
      query["excludeRuleId"] = request.excludeRuleId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleName)) {
      query["ruleName"] = request.ruleName;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeHasRuleNameByEventCode",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeHasRuleNameByEventCodeResponse>(await this.callApi(params, req, runtime), new DescribeHasRuleNameByEventCodeResponse({}));
  }

  /**
   * @summary 查询事件名下的策略名是否存在
   *
   * @param request DescribeHasRuleNameByEventCodeRequest
   * @return DescribeHasRuleNameByEventCodeResponse
   */
  async describeHasRuleNameByEventCode(request: DescribeHasRuleNameByEventCodeRequest): Promise<DescribeHasRuleNameByEventCodeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeHasRuleNameByEventCodeWithOptions(request, runtime);
  }

  /**
   * @summary 风险地图概览图表(饼图)
   *
   * @param request DescribeHighRiskPieChartRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeHighRiskPieChartResponse
   */
  async describeHighRiskPieChartWithOptions(request: DescribeHighRiskPieChartRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHighRiskPieChartResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeHighRiskPieChart",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeHighRiskPieChartResponse>(await this.callApi(params, req, runtime), new DescribeHighRiskPieChartResponse({}));
  }

  /**
   * @summary 风险地图概览图表(饼图)
   *
   * @param request DescribeHighRiskPieChartRequest
   * @return DescribeHighRiskPieChartResponse
   */
  async describeHighRiskPieChart(request: DescribeHighRiskPieChartRequest): Promise<DescribeHighRiskPieChartResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeHighRiskPieChartWithOptions(request, runtime);
  }

  /**
   * @summary 策略命中波动检测
   *
   * @param request DescribeHitRuleFluctuationRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeHitRuleFluctuationResponse
   */
  async describeHitRuleFluctuationWithOptions(request: DescribeHitRuleFluctuationRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHitRuleFluctuationResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleStatus)) {
      query["ruleStatus"] = request.ruleStatus;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeHitRuleFluctuation",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeHitRuleFluctuationResponse>(await this.callApi(params, req, runtime), new DescribeHitRuleFluctuationResponse({}));
  }

  /**
   * @summary 策略命中波动检测
   *
   * @param request DescribeHitRuleFluctuationRequest
   * @return DescribeHitRuleFluctuationResponse
   */
  async describeHitRuleFluctuation(request: DescribeHitRuleFluctuationRequest): Promise<DescribeHitRuleFluctuationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeHitRuleFluctuationWithOptions(request, runtime);
  }

  /**
   * @summary 主事件/旁路/分流策略命中TOP20
   *
   * @param request DescribeHitRuleListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeHitRuleListResponse
   */
  async describeHitRuleListWithOptions(request: DescribeHitRuleListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHitRuleListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.eventType)) {
      query["eventType"] = request.eventType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeHitRuleList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeHitRuleListResponse>(await this.callApi(params, req, runtime), new DescribeHitRuleListResponse({}));
  }

  /**
   * @summary 主事件/旁路/分流策略命中TOP20
   *
   * @param request DescribeHitRuleListRequest
   * @return DescribeHitRuleListResponse
   */
  async describeHitRuleList(request: DescribeHitRuleListRequest): Promise<DescribeHitRuleListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeHitRuleListWithOptions(request, runtime);
  }

  /**
   * @summary 策略命中趋势
   *
   * @param request DescribeHitRuleTrendRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeHitRuleTrendResponse
   */
  async describeHitRuleTrendWithOptions(request: DescribeHitRuleTrendRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHitRuleTrendResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleStatus)) {
      query["ruleStatus"] = request.ruleStatus;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeHitRuleTrend",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeHitRuleTrendResponse>(await this.callApi(params, req, runtime), new DescribeHitRuleTrendResponse({}));
  }

  /**
   * @summary 策略命中趋势
   *
   * @param request DescribeHitRuleTrendRequest
   * @return DescribeHitRuleTrendResponse
   */
  async describeHitRuleTrend(request: DescribeHitRuleTrendRequest): Promise<DescribeHitRuleTrendResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeHitRuleTrendWithOptions(request, runtime);
  }

  /**
   * @summary 查询事件总数量
   *
   * @param request DescribeInputFeildCountByEventCodeRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeInputFeildCountByEventCodeResponse
   */
  async describeInputFeildCountByEventCodeWithOptions(request: DescribeInputFeildCountByEventCodeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInputFeildCountByEventCodeResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeInputFeildCountByEventCode",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeInputFeildCountByEventCodeResponse>(await this.callApi(params, req, runtime), new DescribeInputFeildCountByEventCodeResponse({}));
  }

  /**
   * @summary 查询事件总数量
   *
   * @param request DescribeInputFeildCountByEventCodeRequest
   * @return DescribeInputFeildCountByEventCodeResponse
   */
  async describeInputFeildCountByEventCode(request: DescribeInputFeildCountByEventCodeRequest): Promise<DescribeInputFeildCountByEventCodeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeInputFeildCountByEventCodeWithOptions(request, runtime);
  }

  /**
   * @summary 任务列表
   *
   * @param request DescribeListPocRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeListPocResponse
   */
  async describeListPocWithOptions(request: DescribeListPocRequest, runtime: $Util.RuntimeOptions): Promise<DescribeListPocResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["RegId"] = request.regId;
    }

    if (!Util.isUnset(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeListPoc",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeListPocResponse>(await this.callApi(params, req, runtime), new DescribeListPocResponse({}));
  }

  /**
   * @summary 任务列表
   *
   * @param request DescribeListPocRequest
   * @return DescribeListPocResponse
   */
  async describeListPoc(request: DescribeListPocRequest): Promise<DescribeListPocResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeListPocWithOptions(request, runtime);
  }

  /**
   * @summary 获取监控对象列表
   *
   * @param request DescribeLoanExecListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeLoanExecListResponse
   */
  async describeLoanExecListWithOptions(request: DescribeLoanExecListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeLoanExecListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.batchNo)) {
      query["batchNo"] = request.batchNo;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.monitorObj)) {
      query["monitorObj"] = request.monitorObj;
    }

    if (!Util.isUnset(request.monitorStatus)) {
      query["monitorStatus"] = request.monitorStatus;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeLoanExecList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeLoanExecListResponse>(await this.callApi(params, req, runtime), new DescribeLoanExecListResponse({}));
  }

  /**
   * @summary 获取监控对象列表
   *
   * @param request DescribeLoanExecListRequest
   * @return DescribeLoanExecListResponse
   */
  async describeLoanExecList(request: DescribeLoanExecListRequest): Promise<DescribeLoanExecListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeLoanExecListWithOptions(request, runtime);
  }

  /**
   * @summary 获取贷中监控任务列表
   *
   * @param request DescribeLoanTaskListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeLoanTaskListResponse
   */
  async describeLoanTaskListWithOptions(request: DescribeLoanTaskListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeLoanTaskListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.batchNo)) {
      query["batchNo"] = request.batchNo;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.monitorStatus)) {
      query["monitorStatus"] = request.monitorStatus;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeLoanTaskList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeLoanTaskListResponse>(await this.callApi(params, req, runtime), new DescribeLoanTaskListResponse({}));
  }

  /**
   * @summary 获取贷中监控任务列表
   *
   * @param request DescribeLoanTaskListRequest
   * @return DescribeLoanTaskListResponse
   */
  async describeLoanTaskList(request: DescribeLoanTaskListRequest): Promise<DescribeLoanTaskListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeLoanTaskListWithOptions(request, runtime);
  }

  /**
   * @summary 打标列表
   *
   * @param request DescribeMarkPageRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeMarkPageResponse
   */
  async describeMarkPageWithOptions(request: DescribeMarkPageRequest, runtime: $Util.RuntimeOptions): Promise<DescribeMarkPageResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.direction)) {
      query["direction"] = request.direction;
    }

    if (!Util.isUnset(request.isPage)) {
      query["isPage"] = request.isPage;
    }

    if (!Util.isUnset(request.order)) {
      query["order"] = request.order;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.taskLogId)) {
      query["taskLogId"] = request.taskLogId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeMarkPage",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeMarkPageResponse>(await this.callApi(params, req, runtime), new DescribeMarkPageResponse({}));
  }

  /**
   * @summary 打标列表
   *
   * @param request DescribeMarkPageRequest
   * @return DescribeMarkPageResponse
   */
  async describeMarkPage(request: DescribeMarkPageRequest): Promise<DescribeMarkPageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeMarkPageWithOptions(request, runtime);
  }

  /**
   * @summary 查询是否有权限
   *
   * @param request DescribeMenuPermissionRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeMenuPermissionResponse
   */
  async describeMenuPermissionWithOptions(request: DescribeMenuPermissionRequest, runtime: $Util.RuntimeOptions): Promise<DescribeMenuPermissionResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.permissionType)) {
      query["permissionType"] = request.permissionType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeMenuPermission",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeMenuPermissionResponse>(await this.callApi(params, req, runtime), new DescribeMenuPermissionResponse({}));
  }

  /**
   * @summary 查询是否有权限
   *
   * @param request DescribeMenuPermissionRequest
   * @return DescribeMenuPermissionResponse
   */
  async describeMenuPermission(request: DescribeMenuPermissionRequest): Promise<DescribeMenuPermissionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeMenuPermissionWithOptions(request, runtime);
  }

  /**
   * @summary 查询任务的限制
   *
   * @param request DescribeMonitorTaskLimitRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeMonitorTaskLimitResponse
   */
  async describeMonitorTaskLimitWithOptions(request: DescribeMonitorTaskLimitRequest, runtime: $Util.RuntimeOptions): Promise<DescribeMonitorTaskLimitResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeMonitorTaskLimit",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeMonitorTaskLimitResponse>(await this.callApi(params, req, runtime), new DescribeMonitorTaskLimitResponse({}));
  }

  /**
   * @summary 查询任务的限制
   *
   * @param request DescribeMonitorTaskLimitRequest
   * @return DescribeMonitorTaskLimitResponse
   */
  async describeMonitorTaskLimit(request: DescribeMonitorTaskLimitRequest): Promise<DescribeMonitorTaskLimitResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeMonitorTaskLimitWithOptions(request, runtime);
  }

  /**
   * @summary 查询名单分页
   *
   * @param request DescribeNameListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeNameListResponse
   */
  async describeNameListWithOptions(request: DescribeNameListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeNameListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.value)) {
      query["value"] = request.value;
    }

    if (!Util.isUnset(request.variableId)) {
      query["variableId"] = request.variableId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeNameList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeNameListResponse>(await this.callApi(params, req, runtime), new DescribeNameListResponse({}));
  }

  /**
   * @summary 查询名单分页
   *
   * @param request DescribeNameListRequest
   * @return DescribeNameListResponse
   */
  async describeNameList(request: DescribeNameListRequest): Promise<DescribeNameListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeNameListWithOptions(request, runtime);
  }

  /**
   * @summary 下载名单列表
   *
   * @param request DescribeNameListDownloadUrlRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeNameListDownloadUrlResponse
   */
  async describeNameListDownloadUrlWithOptions(request: DescribeNameListDownloadUrlRequest, runtime: $Util.RuntimeOptions): Promise<DescribeNameListDownloadUrlResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.variableId)) {
      query["variableId"] = request.variableId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeNameListDownloadUrl",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeNameListDownloadUrlResponse>(await this.callApi(params, req, runtime), new DescribeNameListDownloadUrlResponse({}));
  }

  /**
   * @summary 下载名单列表
   *
   * @param request DescribeNameListDownloadUrlRequest
   * @return DescribeNameListDownloadUrlResponse
   */
  async describeNameListDownloadUrl(request: DescribeNameListDownloadUrlRequest): Promise<DescribeNameListDownloadUrlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeNameListDownloadUrlWithOptions(request, runtime);
  }

  /**
   * @summary 查询名单限制数
   *
   * @param request DescribeNameListLimitRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeNameListLimitResponse
   */
  async describeNameListLimitWithOptions(request: DescribeNameListLimitRequest, runtime: $Util.RuntimeOptions): Promise<DescribeNameListLimitResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeNameListLimit",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeNameListLimitResponse>(await this.callApi(params, req, runtime), new DescribeNameListLimitResponse({}));
  }

  /**
   * @summary 查询名单限制数
   *
   * @param request DescribeNameListLimitRequest
   * @return DescribeNameListLimitResponse
   */
  async describeNameListLimit(request: DescribeNameListLimitRequest): Promise<DescribeNameListLimitResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeNameListLimitWithOptions(request, runtime);
  }

  /**
   * @summary 名单内容查询
   *
   * @param request DescribeNameListPageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeNameListPageListResponse
   */
  async describeNameListPageListWithOptions(request: DescribeNameListPageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeNameListPageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.updateBeginTime)) {
      query["updateBeginTime"] = request.updateBeginTime;
    }

    if (!Util.isUnset(request.updateEndTime)) {
      query["updateEndTime"] = request.updateEndTime;
    }

    if (!Util.isUnset(request.value)) {
      query["value"] = request.value;
    }

    if (!Util.isUnset(request.variableId)) {
      query["variableId"] = request.variableId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeNameListPageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeNameListPageListResponse>(await this.callApi(params, req, runtime), new DescribeNameListPageListResponse({}));
  }

  /**
   * @summary 名单内容查询
   *
   * @param request DescribeNameListPageListRequest
   * @return DescribeNameListPageListResponse
   */
  async describeNameListPageList(request: DescribeNameListPageListRequest): Promise<DescribeNameListPageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeNameListPageListWithOptions(request, runtime);
  }

  /**
   * @summary 名单类型列表
   *
   * @param request DescribeNameListTypeListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeNameListTypeListResponse
   */
  async describeNameListTypeListWithOptions(request: DescribeNameListTypeListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeNameListTypeListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeNameListTypeList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeNameListTypeListResponse>(await this.callApi(params, req, runtime), new DescribeNameListTypeListResponse({}));
  }

  /**
   * @summary 名单类型列表
   *
   * @param request DescribeNameListTypeListRequest
   * @return DescribeNameListTypeListResponse
   */
  async describeNameListTypeList(request: DescribeNameListTypeListRequest): Promise<DescribeNameListTypeListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeNameListTypeListWithOptions(request, runtime);
  }

  /**
   * @summary 名单列表
   *
   * @param request DescribeNameListVariablePageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeNameListVariablePageListResponse
   */
  async describeNameListVariablePageListWithOptions(request: DescribeNameListVariablePageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeNameListVariablePageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.nameListType)) {
      query["nameListType"] = request.nameListType;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.value)) {
      query["value"] = request.value;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeNameListVariablePageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeNameListVariablePageListResponse>(await this.callApi(params, req, runtime), new DescribeNameListVariablePageListResponse({}));
  }

  /**
   * @summary 名单列表
   *
   * @param request DescribeNameListVariablePageListRequest
   * @return DescribeNameListVariablePageListResponse
   */
  async describeNameListVariablePageList(request: DescribeNameListVariablePageListRequest): Promise<DescribeNameListVariablePageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeNameListVariablePageListWithOptions(request, runtime);
  }

  /**
   * @summary 根据事件名称查询事件列表
   *
   * @param request DescribeOperationLogPageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeOperationLogPageListResponse
   */
  async describeOperationLogPageListWithOptions(request: DescribeOperationLogPageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeOperationLogPageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.endDate)) {
      query["endDate"] = request.endDate;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.startDate)) {
      query["startDate"] = request.startDate;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeOperationLogPageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeOperationLogPageListResponse>(await this.callApi(params, req, runtime), new DescribeOperationLogPageListResponse({}));
  }

  /**
   * @summary 根据事件名称查询事件列表
   *
   * @param request DescribeOperationLogPageListRequest
   * @return DescribeOperationLogPageListResponse
   */
  async describeOperationLogPageList(request: DescribeOperationLogPageListRequest): Promise<DescribeOperationLogPageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeOperationLogPageListWithOptions(request, runtime);
  }

  /**
   * @summary 根据客户ID查询操作符映射列表
   *
   * @param request DescribeOperatorListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeOperatorListResponse
   */
  async describeOperatorListWithOptions(request: DescribeOperatorListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeOperatorListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeOperatorList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeOperatorListResponse>(await this.callApi(params, req, runtime), new DescribeOperatorListResponse({}));
  }

  /**
   * @summary 根据客户ID查询操作符映射列表
   *
   * @param request DescribeOperatorListRequest
   * @return DescribeOperatorListResponse
   */
  async describeOperatorList(request: DescribeOperatorListRequest): Promise<DescribeOperatorListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeOperatorListWithOptions(request, runtime);
  }

  /**
   * @summary 查询操作符映射列表
   *
   * @param request DescribeOperatorListBySceneRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeOperatorListBySceneResponse
   */
  async describeOperatorListBySceneWithOptions(request: DescribeOperatorListBySceneRequest, runtime: $Util.RuntimeOptions): Promise<DescribeOperatorListBySceneResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.scene)) {
      query["scene"] = request.scene;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeOperatorListByScene",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeOperatorListBySceneResponse>(await this.callApi(params, req, runtime), new DescribeOperatorListBySceneResponse({}));
  }

  /**
   * @summary 查询操作符映射列表
   *
   * @param request DescribeOperatorListBySceneRequest
   * @return DescribeOperatorListBySceneResponse
   */
  async describeOperatorListByScene(request: DescribeOperatorListBySceneRequest): Promise<DescribeOperatorListBySceneResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeOperatorListBySceneWithOptions(request, runtime);
  }

  /**
   * @summary 查询操作符映射列表
   *
   * @param request DescribeOperatorListByTypeRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeOperatorListByTypeResponse
   */
  async describeOperatorListByTypeWithOptions(request: DescribeOperatorListByTypeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeOperatorListByTypeResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeOperatorListByType",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeOperatorListByTypeResponse>(await this.callApi(params, req, runtime), new DescribeOperatorListByTypeResponse({}));
  }

  /**
   * @summary 查询操作符映射列表
   *
   * @param request DescribeOperatorListByTypeRequest
   * @return DescribeOperatorListByTypeResponse
   */
  async describeOperatorListByType(request: DescribeOperatorListByTypeRequest): Promise<DescribeOperatorListByTypeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeOperatorListByTypeWithOptions(request, runtime);
  }

  /**
   * @summary 查看是否授权Oss
   *
   * @param request DescribeOssAuthStatusRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeOssAuthStatusResponse
   */
  async describeOssAuthStatusWithOptions(request: DescribeOssAuthStatusRequest, runtime: $Util.RuntimeOptions): Promise<DescribeOssAuthStatusResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeOssAuthStatus",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeOssAuthStatusResponse>(await this.callApi(params, req, runtime), new DescribeOssAuthStatusResponse({}));
  }

  /**
   * @summary 查看是否授权Oss
   *
   * @param request DescribeOssAuthStatusRequest
   * @return DescribeOssAuthStatusResponse
   */
  async describeOssAuthStatus(request: DescribeOssAuthStatusRequest): Promise<DescribeOssAuthStatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeOssAuthStatusWithOptions(request, runtime);
  }

  /**
   * @summary 获取OSS Policy
   *
   * @param request DescribeOssPolicyRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeOssPolicyResponse
   */
  async describeOssPolicyWithOptions(request: DescribeOssPolicyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeOssPolicyResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.scene)) {
      query["scene"] = request.scene;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeOssPolicy",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeOssPolicyResponse>(await this.callApi(params, req, runtime), new DescribeOssPolicyResponse({}));
  }

  /**
   * @summary 获取OSS Policy
   *
   * @param request DescribeOssPolicyRequest
   * @return DescribeOssPolicyResponse
   */
  async describeOssPolicy(request: DescribeOssPolicyRequest): Promise<DescribeOssPolicyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeOssPolicyWithOptions(request, runtime);
  }

  /**
   * @summary 获取文件上传凭证
   *
   * @param request DescribeOssTokenRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeOssTokenResponse
   */
  async describeOssTokenWithOptions(request: DescribeOssTokenRequest, runtime: $Util.RuntimeOptions): Promise<DescribeOssTokenResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.fileName)) {
      query["fileName"] = request.fileName;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.uploadType)) {
      query["uploadType"] = request.uploadType;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeOssToken",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeOssTokenResponse>(await this.callApi(params, req, runtime), new DescribeOssTokenResponse({}));
  }

  /**
   * @summary 获取文件上传凭证
   *
   * @param request DescribeOssTokenRequest
   * @return DescribeOssTokenResponse
   */
  async describeOssToken(request: DescribeOssTokenRequest): Promise<DescribeOssTokenResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeOssTokenWithOptions(request, runtime);
  }

  /**
   * @summary 查询事件属性列表
   *
   * @param request DescribeParamByEventCodesRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeParamByEventCodesResponse
   */
  async describeParamByEventCodesWithOptions(request: DescribeParamByEventCodesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeParamByEventCodesResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.parma)) {
      query["parma"] = request.parma;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeParamByEventCodes",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeParamByEventCodesResponse>(await this.callApi(params, req, runtime), new DescribeParamByEventCodesResponse({}));
  }

  /**
   * @summary 查询事件属性列表
   *
   * @param request DescribeParamByEventCodesRequest
   * @return DescribeParamByEventCodesResponse
   */
  async describeParamByEventCodes(request: DescribeParamByEventCodesRequest): Promise<DescribeParamByEventCodesResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeParamByEventCodesWithOptions(request, runtime);
  }

  /**
   * @summary 获取映射关系
   *
   * @param request DescribeParamListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeParamListResponse
   */
  async describeParamListWithOptions(request: DescribeParamListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeParamListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.fileUrl)) {
      query["fileUrl"] = request.fileUrl;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.serviceCode)) {
      query["serviceCode"] = request.serviceCode;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeParamList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeParamListResponse>(await this.callApi(params, req, runtime), new DescribeParamListResponse({}));
  }

  /**
   * @summary 获取映射关系
   *
   * @param request DescribeParamListRequest
   * @return DescribeParamListResponse
   */
  async describeParamList(request: DescribeParamListRequest): Promise<DescribeParamListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeParamListWithOptions(request, runtime);
  }

  /**
   * @summary 获取任务详情
   *
   * @param request DescribePocDetailRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribePocDetailResponse
   */
  async describePocDetailWithOptions(request: DescribePocDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribePocDetailResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.taskId)) {
      query["taskId"] = request.taskId;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribePocDetail",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribePocDetailResponse>(await this.callApi(params, req, runtime), new DescribePocDetailResponse({}));
  }

  /**
   * @summary 获取任务详情
   *
   * @param request DescribePocDetailRequest
   * @return DescribePocDetailResponse
   */
  async describePocDetail(request: DescribePocDetailRequest): Promise<DescribePocDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describePocDetailWithOptions(request, runtime);
  }

  /**
   * @summary 获取文件上传凭证
   *
   * @param request DescribePocOssTokenRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribePocOssTokenResponse
   */
  async describePocOssTokenWithOptions(request: DescribePocOssTokenRequest, runtime: $Util.RuntimeOptions): Promise<DescribePocOssTokenResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribePocOssToken",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribePocOssTokenResponse>(await this.callApi(params, req, runtime), new DescribePocOssTokenResponse({}));
  }

  /**
   * @summary 获取文件上传凭证
   *
   * @param request DescribePocOssTokenRequest
   * @return DescribePocOssTokenResponse
   */
  async describePocOssToken(request: DescribePocOssTokenRequest): Promise<DescribePocOssTokenResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describePocOssTokenWithOptions(request, runtime);
  }

  /**
   * @summary 获取poc任务列表
   *
   * @param request DescribePocTaskListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribePocTaskListResponse
   */
  async describePocTaskListWithOptions(request: DescribePocTaskListRequest, runtime: $Util.RuntimeOptions): Promise<DescribePocTaskListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribePocTaskList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribePocTaskListResponse>(await this.callApi(params, req, runtime), new DescribePocTaskListResponse({}));
  }

  /**
   * @summary 获取poc任务列表
   *
   * @param request DescribePocTaskListRequest
   * @return DescribePocTaskListResponse
   */
  async describePocTaskList(request: DescribePocTaskListRequest): Promise<DescribePocTaskListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describePocTaskListWithOptions(request, runtime);
  }

  /**
   * @summary 判断是否开通Stack私域模式
   *
   * @param request DescribePrivateStackRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribePrivateStackResponse
   */
  async describePrivateStackWithOptions(request: DescribePrivateStackRequest, runtime: $Util.RuntimeOptions): Promise<DescribePrivateStackResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribePrivateStack",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribePrivateStackResponse>(await this.callApi(params, req, runtime), new DescribePrivateStackResponse({}));
  }

  /**
   * @summary 判断是否开通Stack私域模式
   *
   * @param request DescribePrivateStackRequest
   * @return DescribePrivateStackResponse
   */
  async describePrivateStack(request: DescribePrivateStackRequest): Promise<DescribePrivateStackResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describePrivateStackWithOptions(request, runtime);
  }

  /**
   * @summary 查询变量详情查询
   *
   * @param request DescribeQueryVariableDetailRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeQueryVariableDetailResponse
   */
  async describeQueryVariableDetailWithOptions(request: DescribeQueryVariableDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribeQueryVariableDetailResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeQueryVariableDetail",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeQueryVariableDetailResponse>(await this.callApi(params, req, runtime), new DescribeQueryVariableDetailResponse({}));
  }

  /**
   * @summary 查询变量详情查询
   *
   * @param request DescribeQueryVariableDetailRequest
   * @return DescribeQueryVariableDetailResponse
   */
  async describeQueryVariableDetail(request: DescribeQueryVariableDetailRequest): Promise<DescribeQueryVariableDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeQueryVariableDetailWithOptions(request, runtime);
  }

  /**
   * @summary 查询变量列表查询
   *
   * @param request DescribeQueryVariablePageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeQueryVariablePageListResponse
   */
  async describeQueryVariablePageListWithOptions(request: DescribeQueryVariablePageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeQueryVariablePageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.dataSourceCode)) {
      query["dataSourceCode"] = request.dataSourceCode;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeQueryVariablePageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeQueryVariablePageListResponse>(await this.callApi(params, req, runtime), new DescribeQueryVariablePageListResponse({}));
  }

  /**
   * @summary 查询变量列表查询
   *
   * @param request DescribeQueryVariablePageListRequest
   * @return DescribeQueryVariablePageListResponse
   */
  async describeQueryVariablePageList(request: DescribeQueryVariablePageListRequest): Promise<DescribeQueryVariablePageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeQueryVariablePageListWithOptions(request, runtime);
  }

  /**
   * @summary 查询样本&场景下的变量列表
   *
   * @param request DescribeRecommendSceneVariablesRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRecommendSceneVariablesResponse
   */
  async describeRecommendSceneVariablesWithOptions(request: DescribeRecommendSceneVariablesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRecommendSceneVariablesResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.sampleId)) {
      query["sampleId"] = request.sampleId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRecommendSceneVariables",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRecommendSceneVariablesResponse>(await this.callApi(params, req, runtime), new DescribeRecommendSceneVariablesResponse({}));
  }

  /**
   * @summary 查询样本&场景下的变量列表
   *
   * @param request DescribeRecommendSceneVariablesRequest
   * @return DescribeRecommendSceneVariablesResponse
   */
  async describeRecommendSceneVariables(request: DescribeRecommendSceneVariablesRequest): Promise<DescribeRecommendSceneVariablesResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRecommendSceneVariablesWithOptions(request, runtime);
  }

  /**
   * @summary 变量推荐详情查询接口
   *
   * @param request DescribeRecommendTaskDetailRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRecommendTaskDetailResponse
   */
  async describeRecommendTaskDetailWithOptions(request: DescribeRecommendTaskDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRecommendTaskDetailResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.taskId)) {
      query["taskId"] = request.taskId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRecommendTaskDetail",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRecommendTaskDetailResponse>(await this.callApi(params, req, runtime), new DescribeRecommendTaskDetailResponse({}));
  }

  /**
   * @summary 变量推荐详情查询接口
   *
   * @param request DescribeRecommendTaskDetailRequest
   * @return DescribeRecommendTaskDetailResponse
   */
  async describeRecommendTaskDetail(request: DescribeRecommendTaskDetailRequest): Promise<DescribeRecommendTaskDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRecommendTaskDetailWithOptions(request, runtime);
  }

  /**
   * @summary 变量推荐列表查询接口
   *
   * @param request DescribeRecommendTaskPageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRecommendTaskPageListResponse
   */
  async describeRecommendTaskPageListWithOptions(request: DescribeRecommendTaskPageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRecommendTaskPageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.taskName)) {
      query["taskName"] = request.taskName;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRecommendTaskPageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRecommendTaskPageListResponse>(await this.callApi(params, req, runtime), new DescribeRecommendTaskPageListResponse({}));
  }

  /**
   * @summary 变量推荐列表查询接口
   *
   * @param request DescribeRecommendTaskPageListRequest
   * @return DescribeRecommendTaskPageListResponse
   */
  async describeRecommendTaskPageList(request: DescribeRecommendTaskPageListRequest): Promise<DescribeRecommendTaskPageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRecommendTaskPageListWithOptions(request, runtime);
  }

  /**
   * @summary 查询变量下的指标信息
   *
   * @param request DescribeRecommendVariablesVelocityRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRecommendVariablesVelocityResponse
   */
  async describeRecommendVariablesVelocityWithOptions(request: DescribeRecommendVariablesVelocityRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRecommendVariablesVelocityResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.taskId)) {
      query["taskId"] = request.taskId;
    }

    if (!Util.isUnset(request.variableIdsStr)) {
      query["variableIdsStr"] = request.variableIdsStr;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRecommendVariablesVelocity",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRecommendVariablesVelocityResponse>(await this.callApi(params, req, runtime), new DescribeRecommendVariablesVelocityResponse({}));
  }

  /**
   * @summary 查询变量下的指标信息
   *
   * @param request DescribeRecommendVariablesVelocityRequest
   * @return DescribeRecommendVariablesVelocityResponse
   */
  async describeRecommendVariablesVelocity(request: DescribeRecommendVariablesVelocityRequest): Promise<DescribeRecommendVariablesVelocityResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRecommendVariablesVelocityWithOptions(request, runtime);
  }

  /**
   * @summary 查询支持的指标列表
   *
   * @param request DescribeRecommendVelocitiesRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRecommendVelocitiesResponse
   */
  async describeRecommendVelocitiesWithOptions(request: DescribeRecommendVelocitiesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRecommendVelocitiesResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.code)) {
      query["code"] = request.code;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRecommendVelocities",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRecommendVelocitiesResponse>(await this.callApi(params, req, runtime), new DescribeRecommendVelocitiesResponse({}));
  }

  /**
   * @summary 查询支持的指标列表
   *
   * @param request DescribeRecommendVelocitiesRequest
   * @return DescribeRecommendVelocitiesResponse
   */
  async describeRecommendVelocities(request: DescribeRecommendVelocitiesRequest): Promise<DescribeRecommendVelocitiesResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRecommendVelocitiesWithOptions(request, runtime);
  }

  /**
   * @summary 查询ApiGateway支持的region列表
   *
   * @param request DescribeRegionsRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRegionsResponse
   */
  async describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRegionsResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRegions",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRegionsResponse>(await this.callApi(params, req, runtime), new DescribeRegionsResponse({}));
  }

  /**
   * @summary 查询ApiGateway支持的region列表
   *
   * @param request DescribeRegionsRequest
   * @return DescribeRegionsResponse
   */
  async describeRegions(request: DescribeRegionsRequest): Promise<DescribeRegionsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRegionsWithOptions(request, runtime);
  }

  /**
   * @summary 查询请求命中详情
   *
   * @param request DescribeRequestHitRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRequestHitResponse
   */
  async describeRequestHitWithOptions(request: DescribeRequestHitRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRequestHitResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.sRequestId)) {
      query["sRequestId"] = request.sRequestId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRequestHit",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRequestHitResponse>(await this.callApi(params, req, runtime), new DescribeRequestHitResponse({}));
  }

  /**
   * @summary 查询请求命中详情
   *
   * @param request DescribeRequestHitRequest
   * @return DescribeRequestHitResponse
   */
  async describeRequestHit(request: DescribeRequestHitRequest): Promise<DescribeRequestHitResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRequestHitWithOptions(request, runtime);
  }

  /**
   * @summary 请求峰值
   *
   * @param request DescribeRequestPeakReportRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRequestPeakReportResponse
   */
  async describeRequestPeakReportWithOptions(request: DescribeRequestPeakReportRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRequestPeakReportResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRequestPeakReport",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRequestPeakReportResponse>(await this.callApi(params, req, runtime), new DescribeRequestPeakReportResponse({}));
  }

  /**
   * @summary 请求峰值
   *
   * @param request DescribeRequestPeakReportRequest
   * @return DescribeRequestPeakReportResponse
   */
  async describeRequestPeakReport(request: DescribeRequestPeakReportRequest): Promise<DescribeRequestPeakReportResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRequestPeakReportWithOptions(request, runtime);
  }

  /**
   * @summary 下钻分析
   *
   * @param request DescribeResultCountRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeResultCountResponse
   */
  async describeResultCountWithOptions(request: DescribeResultCountRequest, runtime: $Util.RuntimeOptions): Promise<DescribeResultCountResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeResultCount",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeResultCountResponse>(await this.callApi(params, req, runtime), new DescribeResultCountResponse({}));
  }

  /**
   * @summary 下钻分析
   *
   * @param request DescribeResultCountRequest
   * @return DescribeResultCountResponse
   */
  async describeResultCount(request: DescribeResultCountRequest): Promise<DescribeResultCountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeResultCountWithOptions(request, runtime);
  }

  /**
   * @summary 风险地图概览图表(折线图)
   *
   * @param request DescribeRiskLineChartRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRiskLineChartResponse
   */
  async describeRiskLineChartWithOptions(request: DescribeRiskLineChartRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRiskLineChartResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRiskLineChart",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRiskLineChartResponse>(await this.callApi(params, req, runtime), new DescribeRiskLineChartResponse({}));
  }

  /**
   * @summary 风险地图概览图表(折线图)
   *
   * @param request DescribeRiskLineChartRequest
   * @return DescribeRiskLineChartResponse
   */
  async describeRiskLineChart(request: DescribeRiskLineChartRequest): Promise<DescribeRiskLineChartResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRiskLineChartWithOptions(request, runtime);
  }

  /**
   * @summary 策略概览列表
   *
   * @param request DescribeRuleBarChartRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRuleBarChartResponse
   */
  async describeRuleBarChartWithOptions(request: DescribeRuleBarChartRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRuleBarChartResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRuleBarChart",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRuleBarChartResponse>(await this.callApi(params, req, runtime), new DescribeRuleBarChartResponse({}));
  }

  /**
   * @summary 策略概览列表
   *
   * @param request DescribeRuleBarChartRequest
   * @return DescribeRuleBarChartResponse
   */
  async describeRuleBarChart(request: DescribeRuleBarChartRequest): Promise<DescribeRuleBarChartResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRuleBarChartWithOptions(request, runtime);
  }

  /**
   * @summary 根据用户Id查询策略数
   *
   * @param request DescribeRuleCountByUserIdRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRuleCountByUserIdResponse
   */
  async describeRuleCountByUserIdWithOptions(request: DescribeRuleCountByUserIdRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRuleCountByUserIdResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRuleCountByUserId",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRuleCountByUserIdResponse>(await this.callApi(params, req, runtime), new DescribeRuleCountByUserIdResponse({}));
  }

  /**
   * @summary 根据用户Id查询策略数
   *
   * @param request DescribeRuleCountByUserIdRequest
   * @return DescribeRuleCountByUserIdResponse
   */
  async describeRuleCountByUserId(request: DescribeRuleCountByUserIdRequest): Promise<DescribeRuleCountByUserIdResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRuleCountByUserIdWithOptions(request, runtime);
  }

  /**
   * @summary 查询策略/版本详情
   *
   * @param request DescribeRuleDetailByRuleIdRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRuleDetailByRuleIdResponse
   */
  async describeRuleDetailByRuleIdWithOptions(request: DescribeRuleDetailByRuleIdRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRuleDetailByRuleIdResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.consoleRuleId)) {
      query["consoleRuleId"] = request.consoleRuleId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleId)) {
      query["ruleId"] = request.ruleId;
    }

    if (!Util.isUnset(request.ruleVersionId)) {
      query["ruleVersionId"] = request.ruleVersionId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRuleDetailByRuleId",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRuleDetailByRuleIdResponse>(await this.callApi(params, req, runtime), new DescribeRuleDetailByRuleIdResponse({}));
  }

  /**
   * @summary 查询策略/版本详情
   *
   * @param request DescribeRuleDetailByRuleIdRequest
   * @return DescribeRuleDetailByRuleIdResponse
   */
  async describeRuleDetailByRuleId(request: DescribeRuleDetailByRuleIdRequest): Promise<DescribeRuleDetailByRuleIdResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRuleDetailByRuleIdWithOptions(request, runtime);
  }

  /**
   * @summary 查询策略命中详情
   *
   * @param request DescribeRuleHitRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRuleHitResponse
   */
  async describeRuleHitWithOptions(request: DescribeRuleHitRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRuleHitResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleId)) {
      query["ruleId"] = request.ruleId;
    }

    if (!Util.isUnset(request.ruleSnapshotId)) {
      query["ruleSnapshotId"] = request.ruleSnapshotId;
    }

    if (!Util.isUnset(request.sRequestId)) {
      query["sRequestId"] = request.sRequestId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRuleHit",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRuleHitResponse>(await this.callApi(params, req, runtime), new DescribeRuleHitResponse({}));
  }

  /**
   * @summary 查询策略命中详情
   *
   * @param request DescribeRuleHitRequest
   * @return DescribeRuleHitResponse
   */
  async describeRuleHit(request: DescribeRuleHitRequest): Promise<DescribeRuleHitResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRuleHitWithOptions(request, runtime);
  }

  /**
   * @summary 查询策略列表
   *
   * @param request DescribeRuleListByEventCodesListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRuleListByEventCodesListResponse
   */
  async describeRuleListByEventCodesListWithOptions(request: DescribeRuleListByEventCodesListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRuleListByEventCodesListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRuleListByEventCodesList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRuleListByEventCodesListResponse>(await this.callApi(params, req, runtime), new DescribeRuleListByEventCodesListResponse({}));
  }

  /**
   * @summary 查询策略列表
   *
   * @param request DescribeRuleListByEventCodesListRequest
   * @return DescribeRuleListByEventCodesListResponse
   */
  async describeRuleListByEventCodesList(request: DescribeRuleListByEventCodesListRequest): Promise<DescribeRuleListByEventCodesListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRuleListByEventCodesListWithOptions(request, runtime);
  }

  /**
   * @summary 查询策略列表
   *
   * @param request DescribeRulePageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRulePageListResponse
   */
  async describeRulePageListWithOptions(request: DescribeRulePageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRulePageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleAuthType)) {
      query["ruleAuthType"] = request.ruleAuthType;
    }

    if (!Util.isUnset(request.ruleName)) {
      query["ruleName"] = request.ruleName;
    }

    if (!Util.isUnset(request.ruleStatus)) {
      query["ruleStatus"] = request.ruleStatus;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRulePageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRulePageListResponse>(await this.callApi(params, req, runtime), new DescribeRulePageListResponse({}));
  }

  /**
   * @summary 查询策略列表
   *
   * @param request DescribeRulePageListRequest
   * @return DescribeRulePageListResponse
   */
  async describeRulePageList(request: DescribeRulePageListRequest): Promise<DescribeRulePageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRulePageListWithOptions(request, runtime);
  }

  /**
   * @summary 根据ruleId+version查询历史快照
   *
   * @param request DescribeRuleSnapshotRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRuleSnapshotResponse
   */
  async describeRuleSnapshotWithOptions(request: DescribeRuleSnapshotRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRuleSnapshotResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleId)) {
      query["ruleId"] = request.ruleId;
    }

    if (!Util.isUnset(request.snapshotVersion)) {
      query["snapshotVersion"] = request.snapshotVersion;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRuleSnapshot",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRuleSnapshotResponse>(await this.callApi(params, req, runtime), new DescribeRuleSnapshotResponse({}));
  }

  /**
   * @summary 根据ruleId+version查询历史快照
   *
   * @param request DescribeRuleSnapshotRequest
   * @return DescribeRuleSnapshotResponse
   */
  async describeRuleSnapshot(request: DescribeRuleSnapshotRequest): Promise<DescribeRuleSnapshotResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRuleSnapshotWithOptions(request, runtime);
  }

  /**
   * @summary 查询策略版本列表
   *
   * @param request DescribeRuleVersionListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeRuleVersionListResponse
   */
  async describeRuleVersionListWithOptions(request: DescribeRuleVersionListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRuleVersionListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.consoleRuleId)) {
      query["consoleRuleId"] = request.consoleRuleId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleId)) {
      query["ruleId"] = request.ruleId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeRuleVersionList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeRuleVersionListResponse>(await this.callApi(params, req, runtime), new DescribeRuleVersionListResponse({}));
  }

  /**
   * @summary 查询策略版本列表
   *
   * @param request DescribeRuleVersionListRequest
   * @return DescribeRuleVersionListResponse
   */
  async describeRuleVersionList(request: DescribeRuleVersionListRequest): Promise<DescribeRuleVersionListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeRuleVersionListWithOptions(request, runtime);
  }

  /**
   * @summary 获取老旧版本sdk下载列表
   *
   * @param request DescribeSDKDownloadListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSDKDownloadListResponse
   */
  async describeSDKDownloadListWithOptions(request: DescribeSDKDownloadListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSDKDownloadListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.deviceType)) {
      query["deviceType"] = request.deviceType;
    }

    if (!Util.isUnset(request.listType)) {
      query["listType"] = request.listType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSDKDownloadList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSDKDownloadListResponse>(await this.callApi(params, req, runtime), new DescribeSDKDownloadListResponse({}));
  }

  /**
   * @summary 获取老旧版本sdk下载列表
   *
   * @param request DescribeSDKDownloadListRequest
   * @return DescribeSDKDownloadListResponse
   */
  async describeSDKDownloadList(request: DescribeSDKDownloadListRequest): Promise<DescribeSDKDownloadListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSDKDownloadListWithOptions(request, runtime);
  }

  /**
   * @param request DescribeSafConsoleRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSafConsoleResponse
   */
  async describeSafConsoleWithOptions(request: DescribeSafConsoleRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSafConsoleResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.content)) {
      query["content"] = request.content;
    }

    if (!Util.isUnset(request.service)) {
      query["service"] = request.service;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSafConsole",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSafConsoleResponse>(await this.callApi(params, req, runtime), new DescribeSafConsoleResponse({}));
  }

  /**
   * @param request DescribeSafConsoleRequest
   * @return DescribeSafConsoleResponse
   */
  async describeSafConsole(request: DescribeSafConsoleRequest): Promise<DescribeSafConsoleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSafConsoleWithOptions(request, runtime);
  }

  /**
   * @summary 查询saf_de订单
   *
   * @param request DescribeSafDeOrderRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSafDeOrderResponse
   */
  async describeSafDeOrderWithOptions(request: DescribeSafDeOrderRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSafDeOrderResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.endDate)) {
      query["endDate"] = request.endDate;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.startDate)) {
      query["startDate"] = request.startDate;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSafDeOrder",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSafDeOrderResponse>(await this.callApi(params, req, runtime), new DescribeSafDeOrderResponse({}));
  }

  /**
   * @summary 查询saf_de订单
   *
   * @param request DescribeSafDeOrderRequest
   * @return DescribeSafDeOrderResponse
   */
  async describeSafDeOrder(request: DescribeSafDeOrderRequest): Promise<DescribeSafDeOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSafDeOrderWithOptions(request, runtime);
  }

  /**
   * @summary 查询订单信息
   *
   * @param request DescribeSafOrderRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSafOrderResponse
   */
  async describeSafOrderWithOptions(request: DescribeSafOrderRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSafOrderResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.endDate)) {
      query["endDate"] = request.endDate;
    }

    if (!Util.isUnset(request.exactProductCode)) {
      query["exactProductCode"] = request.exactProductCode;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.startDate)) {
      query["startDate"] = request.startDate;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSafOrder",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSafOrderResponse>(await this.callApi(params, req, runtime), new DescribeSafOrderResponse({}));
  }

  /**
   * @summary 查询订单信息
   *
   * @param request DescribeSafOrderRequest
   * @return DescribeSafOrderResponse
   */
  async describeSafOrder(request: DescribeSafOrderRequest): Promise<DescribeSafOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSafOrderWithOptions(request, runtime);
  }

  /**
   * @summary 查询接入配置
   *
   * @param request DescribeSafStartConfigRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSafStartConfigResponse
   */
  async describeSafStartConfigWithOptions(request: DescribeSafStartConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSafStartConfigResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSafStartConfig",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSafStartConfigResponse>(await this.callApi(params, req, runtime), new DescribeSafStartConfigResponse({}));
  }

  /**
   * @summary 查询接入配置
   *
   * @param request DescribeSafStartConfigRequest
   * @return DescribeSafStartConfigResponse
   */
  async describeSafStartConfig(request: DescribeSafStartConfigRequest): Promise<DescribeSafStartConfigResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSafStartConfigWithOptions(request, runtime);
  }

  /**
   * @summary 查询接入配置
   *
   * @param request DescribeSafStartStepsRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSafStartStepsResponse
   */
  async describeSafStartStepsWithOptions(request: DescribeSafStartStepsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSafStartStepsResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.aliyunServer)) {
      query["aliyunServer"] = request.aliyunServer;
    }

    if (!Util.isUnset(request.deviceTypesStr)) {
      query["deviceTypesStr"] = request.deviceTypesStr;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.language)) {
      query["language"] = request.language;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.serverRegion)) {
      query["serverRegion"] = request.serverRegion;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSafStartSteps",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSafStartStepsResponse>(await this.callApi(params, req, runtime), new DescribeSafStartStepsResponse({}));
  }

  /**
   * @summary 查询接入配置
   *
   * @param request DescribeSafStartStepsRequest
   * @return DescribeSafStartStepsResponse
   */
  async describeSafStartSteps(request: DescribeSafStartStepsRequest): Promise<DescribeSafStartStepsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSafStartStepsWithOptions(request, runtime);
  }

  /**
   * @summary 获取风险标签列表
   *
   * @param request DescribeSafTagListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSafTagListResponse
   */
  async describeSafTagListWithOptions(request: DescribeSafTagListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSafTagListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.apiId)) {
      query["apiId"] = request.apiId;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSafTagList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSafTagListResponse>(await this.callApi(params, req, runtime), new DescribeSafTagListResponse({}));
  }

  /**
   * @summary 获取风险标签列表
   *
   * @param request DescribeSafTagListRequest
   * @return DescribeSafTagListResponse
   */
  async describeSafTagList(request: DescribeSafTagListRequest): Promise<DescribeSafTagListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSafTagListWithOptions(request, runtime);
  }

  /**
   * @summary 样本列表分页查询
   *
   * @param request DescribeSampleDataListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSampleDataListResponse
   */
  async describeSampleDataListWithOptions(request: DescribeSampleDataListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSampleDataListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.deleteTag)) {
      query["deleteTag"] = request.deleteTag;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.queryContent)) {
      query["queryContent"] = request.queryContent;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.sampleId)) {
      query["sampleId"] = request.sampleId;
    }

    if (!Util.isUnset(request.scene)) {
      query["scene"] = request.scene;
    }

    if (!Util.isUnset(request.status)) {
      query["status"] = request.status;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSampleDataList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSampleDataListResponse>(await this.callApi(params, req, runtime), new DescribeSampleDataListResponse({}));
  }

  /**
   * @summary 样本列表分页查询
   *
   * @param request DescribeSampleDataListRequest
   * @return DescribeSampleDataListResponse
   */
  async describeSampleDataList(request: DescribeSampleDataListRequest): Promise<DescribeSampleDataListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSampleDataListWithOptions(request, runtime);
  }

  /**
   * @summary 查询样本示例授权
   *
   * @param request DescribeSampleDemoDownloadUrlRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSampleDemoDownloadUrlResponse
   */
  async describeSampleDemoDownloadUrlWithOptions(request: DescribeSampleDemoDownloadUrlRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSampleDemoDownloadUrlResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.scene)) {
      query["scene"] = request.scene;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSampleDemoDownloadUrl",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSampleDemoDownloadUrlResponse>(await this.callApi(params, req, runtime), new DescribeSampleDemoDownloadUrlResponse({}));
  }

  /**
   * @summary 查询样本示例授权
   *
   * @param request DescribeSampleDemoDownloadUrlRequest
   * @return DescribeSampleDemoDownloadUrlResponse
   */
  async describeSampleDemoDownloadUrl(request: DescribeSampleDemoDownloadUrlRequest): Promise<DescribeSampleDemoDownloadUrlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSampleDemoDownloadUrlWithOptions(request, runtime);
  }

  /**
   * @summary 查询样本下载授权信息
   *
   * @param request DescribeSampleDownloadUrlRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSampleDownloadUrlResponse
   */
  async describeSampleDownloadUrlWithOptions(request: DescribeSampleDownloadUrlRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSampleDownloadUrlResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.sampleId)) {
      query["sampleId"] = request.sampleId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSampleDownloadUrl",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSampleDownloadUrlResponse>(await this.callApi(params, req, runtime), new DescribeSampleDownloadUrlResponse({}));
  }

  /**
   * @summary 查询样本下载授权信息
   *
   * @param request DescribeSampleDownloadUrlRequest
   * @return DescribeSampleDownloadUrlResponse
   */
  async describeSampleDownloadUrl(request: DescribeSampleDownloadUrlRequest): Promise<DescribeSampleDownloadUrlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSampleDownloadUrlWithOptions(request, runtime);
  }

  /**
   * @summary 查询样本详情
   *
   * @param request DescribeSampleInfoRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSampleInfoResponse
   */
  async describeSampleInfoWithOptions(request: DescribeSampleInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSampleInfoResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.versions)) {
      query["versions"] = request.versions;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSampleInfo",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSampleInfoResponse>(await this.callApi(params, req, runtime), new DescribeSampleInfoResponse({}));
  }

  /**
   * @summary 查询样本详情
   *
   * @param request DescribeSampleInfoRequest
   * @return DescribeSampleInfoResponse
   */
  async describeSampleInfo(request: DescribeSampleInfoRequest): Promise<DescribeSampleInfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSampleInfoWithOptions(request, runtime);
  }

  /**
   * @summary 查询样本列表
   *
   * @param request DescribeSampleListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSampleListResponse
   */
  async describeSampleListWithOptions(request: DescribeSampleListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSampleListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.sampleType)) {
      query["sampleType"] = request.sampleType;
    }

    if (!Util.isUnset(request.sampleValue)) {
      query["sampleValue"] = request.sampleValue;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSampleList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSampleListResponse>(await this.callApi(params, req, runtime), new DescribeSampleListResponse({}));
  }

  /**
   * @summary 查询样本列表
   *
   * @param request DescribeSampleListRequest
   * @return DescribeSampleListResponse
   */
  async describeSampleList(request: DescribeSampleListRequest): Promise<DescribeSampleListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSampleListWithOptions(request, runtime);
  }

  /**
   * @summary 查询场景列表
   *
   * @param request DescribeSampleSceneListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSampleSceneListResponse
   */
  async describeSampleSceneListWithOptions(request: DescribeSampleSceneListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSampleSceneListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSampleSceneList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSampleSceneListResponse>(await this.callApi(params, req, runtime), new DescribeSampleSceneListResponse({}));
  }

  /**
   * @summary 查询场景列表
   *
   * @param request DescribeSampleSceneListRequest
   * @return DescribeSampleSceneListResponse
   */
  async describeSampleSceneList(request: DescribeSampleSceneListRequest): Promise<DescribeSampleSceneListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSampleSceneListWithOptions(request, runtime);
  }

  /**
   * @summary 获取标签列表
   *
   * @param request DescribeSampleTagListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSampleTagListResponse
   */
  async describeSampleTagListWithOptions(request: DescribeSampleTagListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSampleTagListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSampleTagList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSampleTagListResponse>(await this.callApi(params, req, runtime), new DescribeSampleTagListResponse({}));
  }

  /**
   * @summary 获取标签列表
   *
   * @param request DescribeSampleTagListRequest
   * @return DescribeSampleTagListResponse
   */
  async describeSampleTagList(request: DescribeSampleTagListRequest): Promise<DescribeSampleTagListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSampleTagListWithOptions(request, runtime);
  }

  /**
   * @summary 查询样本上传授权信息
   *
   * @param request DescribeSampleUploadPolicyRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSampleUploadPolicyResponse
   */
  async describeSampleUploadPolicyWithOptions(request: DescribeSampleUploadPolicyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSampleUploadPolicyResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSampleUploadPolicy",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSampleUploadPolicyResponse>(await this.callApi(params, req, runtime), new DescribeSampleUploadPolicyResponse({}));
  }

  /**
   * @summary 查询样本上传授权信息
   *
   * @param request DescribeSampleUploadPolicyRequest
   * @return DescribeSampleUploadPolicyResponse
   */
  async describeSampleUploadPolicy(request: DescribeSampleUploadPolicyRequest): Promise<DescribeSampleUploadPolicyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSampleUploadPolicyWithOptions(request, runtime);
  }

  /**
   * @summary 场景化服务事件下拉列表
   *
   * @param request DescribeSceneAllEventNameCodeListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSceneAllEventNameCodeListResponse
   */
  async describeSceneAllEventNameCodeListWithOptions(request: DescribeSceneAllEventNameCodeListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSceneAllEventNameCodeListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSceneAllEventNameCodeList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSceneAllEventNameCodeListResponse>(await this.callApi(params, req, runtime), new DescribeSceneAllEventNameCodeListResponse({}));
  }

  /**
   * @summary 场景化服务事件下拉列表
   *
   * @param request DescribeSceneAllEventNameCodeListRequest
   * @return DescribeSceneAllEventNameCodeListResponse
   */
  async describeSceneAllEventNameCodeList(request: DescribeSceneAllEventNameCodeListRequest): Promise<DescribeSceneAllEventNameCodeListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSceneAllEventNameCodeListWithOptions(request, runtime);
  }

  /**
   * @summary 场景化风控事件列表
   *
   * @param request DescribeSceneEventPageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSceneEventPageListResponse
   */
  async describeSceneEventPageListWithOptions(request: DescribeSceneEventPageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSceneEventPageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.nameOrCode)) {
      query["nameOrCode"] = request.nameOrCode;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSceneEventPageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSceneEventPageListResponse>(await this.callApi(params, req, runtime), new DescribeSceneEventPageListResponse({}));
  }

  /**
   * @summary 场景化风控事件列表
   *
   * @param request DescribeSceneEventPageListRequest
   * @return DescribeSceneEventPageListResponse
   */
  async describeSceneEventPageList(request: DescribeSceneEventPageListRequest): Promise<DescribeSceneEventPageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSceneEventPageListWithOptions(request, runtime);
  }

  /**
   * @summary 风控服务白盒化策略列表
   *
   * @param request DescribeSceneRulePageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSceneRulePageListResponse
   */
  async describeSceneRulePageListWithOptions(request: DescribeSceneRulePageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSceneRulePageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleAuthType)) {
      query["ruleAuthType"] = request.ruleAuthType;
    }

    if (!Util.isUnset(request.ruleName)) {
      query["ruleName"] = request.ruleName;
    }

    if (!Util.isUnset(request.ruleStatus)) {
      query["ruleStatus"] = request.ruleStatus;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSceneRulePageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSceneRulePageListResponse>(await this.callApi(params, req, runtime), new DescribeSceneRulePageListResponse({}));
  }

  /**
   * @summary 风控服务白盒化策略列表
   *
   * @param request DescribeSceneRulePageListRequest
   * @return DescribeSceneRulePageListResponse
   */
  async describeSceneRulePageList(request: DescribeSceneRulePageListRequest): Promise<DescribeSceneRulePageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSceneRulePageListWithOptions(request, runtime);
  }

  /**
   * @summary 分值区间数量分析
   *
   * @param request DescribeScoreSectionNumLineChartRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeScoreSectionNumLineChartResponse
   */
  async describeScoreSectionNumLineChartWithOptions(request: DescribeScoreSectionNumLineChartRequest, runtime: $Util.RuntimeOptions): Promise<DescribeScoreSectionNumLineChartResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.byPassEventCodes)) {
      query["byPassEventCodes"] = request.byPassEventCodes;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.mainEventCodes)) {
      query["mainEventCodes"] = request.mainEventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.shuntEventCodes)) {
      query["shuntEventCodes"] = request.shuntEventCodes;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeScoreSectionNumLineChart",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeScoreSectionNumLineChartResponse>(await this.callApi(params, req, runtime), new DescribeScoreSectionNumLineChartResponse({}));
  }

  /**
   * @summary 分值区间数量分析
   *
   * @param request DescribeScoreSectionNumLineChartRequest
   * @return DescribeScoreSectionNumLineChartResponse
   */
  async describeScoreSectionNumLineChart(request: DescribeScoreSectionNumLineChartRequest): Promise<DescribeScoreSectionNumLineChartResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeScoreSectionNumLineChartWithOptions(request, runtime);
  }

  /**
   * @summary 主事件/旁路事件/分流事件分值区间占比
   *
   * @param request DescribeScoreSectionPieChartRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeScoreSectionPieChartResponse
   */
  async describeScoreSectionPieChartWithOptions(request: DescribeScoreSectionPieChartRequest, runtime: $Util.RuntimeOptions): Promise<DescribeScoreSectionPieChartResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.eventType)) {
      query["eventType"] = request.eventType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeScoreSectionPieChart",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeScoreSectionPieChartResponse>(await this.callApi(params, req, runtime), new DescribeScoreSectionPieChartResponse({}));
  }

  /**
   * @summary 主事件/旁路事件/分流事件分值区间占比
   *
   * @param request DescribeScoreSectionPieChartRequest
   * @return DescribeScoreSectionPieChartResponse
   */
  async describeScoreSectionPieChart(request: DescribeScoreSectionPieChartRequest): Promise<DescribeScoreSectionPieChartResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeScoreSectionPieChartWithOptions(request, runtime);
  }

  /**
   * @summary 分值区间占比分析
   *
   * @param request DescribeScoreSectionRatioLineChartRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeScoreSectionRatioLineChartResponse
   */
  async describeScoreSectionRatioLineChartWithOptions(request: DescribeScoreSectionRatioLineChartRequest, runtime: $Util.RuntimeOptions): Promise<DescribeScoreSectionRatioLineChartResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.byPassEventCodes)) {
      query["byPassEventCodes"] = request.byPassEventCodes;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.mainEventCodes)) {
      query["mainEventCodes"] = request.mainEventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.shuntEventCodes)) {
      query["shuntEventCodes"] = request.shuntEventCodes;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeScoreSectionRatioLineChart",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeScoreSectionRatioLineChartResponse>(await this.callApi(params, req, runtime), new DescribeScoreSectionRatioLineChartResponse({}));
  }

  /**
   * @summary 分值区间占比分析
   *
   * @param request DescribeScoreSectionRatioLineChartRequest
   * @return DescribeScoreSectionRatioLineChartResponse
   */
  async describeScoreSectionRatioLineChart(request: DescribeScoreSectionRatioLineChartRequest): Promise<DescribeScoreSectionRatioLineChartResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeScoreSectionRatioLineChartWithOptions(request, runtime);
  }

  /**
   * @summary 查询任务ID列表
   *
   * @param request DescribeSelectItemRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSelectItemResponse
   */
  async describeSelectItemWithOptions(request: DescribeSelectItemRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSelectItemResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSelectItem",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSelectItemResponse>(await this.callApi(params, req, runtime), new DescribeSelectItemResponse({}));
  }

  /**
   * @summary 查询任务ID列表
   *
   * @param request DescribeSelectItemRequest
   * @return DescribeSelectItemResponse
   */
  async describeSelectItem(request: DescribeSelectItemRequest): Promise<DescribeSelectItemResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSelectItemWithOptions(request, runtime);
  }

  /**
   * @summary ServiceAppkey下拉
   *
   * @param request DescribeServiceAppKeyRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeServiceAppKeyResponse
   */
  async describeServiceAppKeyWithOptions(request: DescribeServiceAppKeyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeServiceAppKeyResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeServiceAppKey",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeServiceAppKeyResponse>(await this.callApi(params, req, runtime), new DescribeServiceAppKeyResponse({}));
  }

  /**
   * @summary ServiceAppkey下拉
   *
   * @param request DescribeServiceAppKeyRequest
   * @return DescribeServiceAppKeyResponse
   */
  async describeServiceAppKey(request: DescribeServiceAppKeyRequest): Promise<DescribeServiceAppKeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeServiceAppKeyWithOptions(request, runtime);
  }

  /**
   * @summary 获取服务调用量
   *
   * @param request DescribeServiceConsumeRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeServiceConsumeResponse
   */
  async describeServiceConsumeWithOptions(request: DescribeServiceConsumeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeServiceConsumeResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.endDate)) {
      query["endDate"] = request.endDate;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.serviceCode)) {
      query["serviceCode"] = request.serviceCode;
    }

    if (!Util.isUnset(request.startDate)) {
      query["startDate"] = request.startDate;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeServiceConsume",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeServiceConsumeResponse>(await this.callApi(params, req, runtime), new DescribeServiceConsumeResponse({}));
  }

  /**
   * @summary 获取服务调用量
   *
   * @param request DescribeServiceConsumeRequest
   * @return DescribeServiceConsumeResponse
   */
  async describeServiceConsume(request: DescribeServiceConsumeRequest): Promise<DescribeServiceConsumeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeServiceConsumeWithOptions(request, runtime);
  }

  /**
   * @summary 下载服务调用量数据文件URL
   *
   * @param request DescribeServiceConsumeDownloadUrlRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeServiceConsumeDownloadUrlResponse
   */
  async describeServiceConsumeDownloadUrlWithOptions(request: DescribeServiceConsumeDownloadUrlRequest, runtime: $Util.RuntimeOptions): Promise<DescribeServiceConsumeDownloadUrlResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.endDate)) {
      query["endDate"] = request.endDate;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.serviceCode)) {
      query["serviceCode"] = request.serviceCode;
    }

    if (!Util.isUnset(request.startDate)) {
      query["startDate"] = request.startDate;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeServiceConsumeDownloadUrl",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeServiceConsumeDownloadUrlResponse>(await this.callApi(params, req, runtime), new DescribeServiceConsumeDownloadUrlResponse({}));
  }

  /**
   * @summary 下载服务调用量数据文件URL
   *
   * @param request DescribeServiceConsumeDownloadUrlRequest
   * @return DescribeServiceConsumeDownloadUrlResponse
   */
  async describeServiceConsumeDownloadUrl(request: DescribeServiceConsumeDownloadUrlRequest): Promise<DescribeServiceConsumeDownloadUrlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeServiceConsumeDownloadUrlWithOptions(request, runtime);
  }

  /**
   * @summary 获取服务列表
   *
   * @param request DescribeServiceListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeServiceListResponse
   */
  async describeServiceListWithOptions(request: DescribeServiceListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeServiceListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeServiceList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeServiceListResponse>(await this.callApi(params, req, runtime), new DescribeServiceListResponse({}));
  }

  /**
   * @summary 获取服务列表
   *
   * @param request DescribeServiceListRequest
   * @return DescribeServiceListResponse
   */
  async describeServiceList(request: DescribeServiceListRequest): Promise<DescribeServiceListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeServiceListWithOptions(request, runtime);
  }

  /**
   * @summary 预估调用信息
   *
   * @param request DescribeSimulationPreditInfoRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSimulationPreditInfoResponse
   */
  async describeSimulationPreditInfoWithOptions(request: DescribeSimulationPreditInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSimulationPreditInfoResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.rulesStr)) {
      query["rulesStr"] = request.rulesStr;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSimulationPreditInfo",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSimulationPreditInfoResponse>(await this.callApi(params, req, runtime), new DescribeSimulationPreditInfoResponse({}));
  }

  /**
   * @summary 预估调用信息
   *
   * @param request DescribeSimulationPreditInfoRequest
   * @return DescribeSimulationPreditInfoResponse
   */
  async describeSimulationPreditInfo(request: DescribeSimulationPreditInfoRequest): Promise<DescribeSimulationPreditInfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSimulationPreditInfoWithOptions(request, runtime);
  }

  /**
   * @summary 查询任务记录数
   *
   * @param request DescribeSimulationTaskCountRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSimulationTaskCountResponse
   */
  async describeSimulationTaskCountWithOptions(request: DescribeSimulationTaskCountRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSimulationTaskCountResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.dataSourceConfig)) {
      query["dataSourceConfig"] = request.dataSourceConfig;
    }

    if (!Util.isUnset(request.dataSourceType)) {
      query["dataSourceType"] = request.dataSourceType;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.filtersStr)) {
      query["filtersStr"] = request.filtersStr;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.startTime)) {
      query["startTime"] = request.startTime;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSimulationTaskCount",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSimulationTaskCountResponse>(await this.callApi(params, req, runtime), new DescribeSimulationTaskCountResponse({}));
  }

  /**
   * @summary 查询任务记录数
   *
   * @param request DescribeSimulationTaskCountRequest
   * @return DescribeSimulationTaskCountResponse
   */
  async describeSimulationTaskCount(request: DescribeSimulationTaskCountRequest): Promise<DescribeSimulationTaskCountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSimulationTaskCountWithOptions(request, runtime);
  }

  /**
   * @summary 任务列表
   *
   * @param request DescribeSimulationTaskListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSimulationTaskListResponse
   */
  async describeSimulationTaskListWithOptions(request: DescribeSimulationTaskListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSimulationTaskListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSimulationTaskList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSimulationTaskListResponse>(await this.callApi(params, req, runtime), new DescribeSimulationTaskListResponse({}));
  }

  /**
   * @summary 任务列表
   *
   * @param request DescribeSimulationTaskListRequest
   * @return DescribeSimulationTaskListResponse
   */
  async describeSimulationTaskList(request: DescribeSimulationTaskListRequest): Promise<DescribeSimulationTaskListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSimulationTaskListWithOptions(request, runtime);
  }

  /**
   * @summary 获取project配置
   *
   * @param request DescribeSlsUrlConfigRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSlsUrlConfigResponse
   */
  async describeSlsUrlConfigWithOptions(request: DescribeSlsUrlConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSlsUrlConfigResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSlsUrlConfig",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSlsUrlConfigResponse>(await this.callApi(params, req, runtime), new DescribeSlsUrlConfigResponse({}));
  }

  /**
   * @summary 获取project配置
   *
   * @param request DescribeSlsUrlConfigRequest
   * @return DescribeSlsUrlConfigResponse
   */
  async describeSlsUrlConfig(request: DescribeSlsUrlConfigRequest): Promise<DescribeSlsUrlConfigResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSlsUrlConfigWithOptions(request, runtime);
  }

  /**
   * @summary 查询支持仿真的策略列表
   *
   * @param request DescribeSupportRuleListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeSupportRuleListResponse
   */
  async describeSupportRuleListWithOptions(request: DescribeSupportRuleListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSupportRuleListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeSupportRuleList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeSupportRuleListResponse>(await this.callApi(params, req, runtime), new DescribeSupportRuleListResponse({}));
  }

  /**
   * @summary 查询支持仿真的策略列表
   *
   * @param request DescribeSupportRuleListRequest
   * @return DescribeSupportRuleListResponse
   */
  async describeSupportRuleList(request: DescribeSupportRuleListRequest): Promise<DescribeSupportRuleListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeSupportRuleListWithOptions(request, runtime);
  }

  /**
   * @summary 标签列表
   *
   * @param request DescribeTagListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeTagListResponse
   */
  async describeTagListWithOptions(request: DescribeTagListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTagListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.id)) {
      query["Id"] = request.id;
    }

    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["RegId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTagList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTagListResponse>(await this.callApi(params, req, runtime), new DescribeTagListResponse({}));
  }

  /**
   * @summary 标签列表
   *
   * @param request DescribeTagListRequest
   * @return DescribeTagListResponse
   */
  async describeTagList(request: DescribeTagListRequest): Promise<DescribeTagListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTagListWithOptions(request, runtime);
  }

  /**
   * @summary 标签概览列表
   *
   * @param request DescribeTagsBarChartRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeTagsBarChartResponse
   */
  async describeTagsBarChartWithOptions(request: DescribeTagsBarChartRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTagsBarChartResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.result)) {
      query["result"] = request.result;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTagsBarChart",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTagsBarChartResponse>(await this.callApi(params, req, runtime), new DescribeTagsBarChartResponse({}));
  }

  /**
   * @summary 标签概览列表
   *
   * @param request DescribeTagsBarChartRequest
   * @return DescribeTagsBarChartResponse
   */
  async describeTagsBarChart(request: DescribeTagsBarChartRequest): Promise<DescribeTagsBarChartResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTagsBarChartWithOptions(request, runtime);
  }

  /**
   * @summary 标签波动检测
   *
   * @param request DescribeTagsFluctuationRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeTagsFluctuationResponse
   */
  async describeTagsFluctuationWithOptions(request: DescribeTagsFluctuationRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTagsFluctuationResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTagsFluctuation",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTagsFluctuationResponse>(await this.callApi(params, req, runtime), new DescribeTagsFluctuationResponse({}));
  }

  /**
   * @summary 标签波动检测
   *
   * @param request DescribeTagsFluctuationRequest
   * @return DescribeTagsFluctuationResponse
   */
  async describeTagsFluctuation(request: DescribeTagsFluctuationRequest): Promise<DescribeTagsFluctuationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTagsFluctuationWithOptions(request, runtime);
  }

  /**
   * @summary 获取标签列表
   *
   * @param request DescribeTagsListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeTagsListResponse
   */
  async describeTagsListWithOptions(request: DescribeTagsListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTagsListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTagsList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTagsListResponse>(await this.callApi(params, req, runtime), new DescribeTagsListResponse({}));
  }

  /**
   * @summary 获取标签列表
   *
   * @param request DescribeTagsListRequest
   * @return DescribeTagsListResponse
   */
  async describeTagsList(request: DescribeTagsListRequest): Promise<DescribeTagsListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTagsListWithOptions(request, runtime);
  }

  /**
   * @summary 标签命中数量分析
   *
   * @param request DescribeTagsNumLineChartRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeTagsNumLineChartResponse
   */
  async describeTagsNumLineChartWithOptions(request: DescribeTagsNumLineChartRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTagsNumLineChartResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.byPassEventCodes)) {
      query["byPassEventCodes"] = request.byPassEventCodes;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.mainEventCodes)) {
      query["mainEventCodes"] = request.mainEventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.shuntEventCodes)) {
      query["shuntEventCodes"] = request.shuntEventCodes;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTagsNumLineChart",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTagsNumLineChartResponse>(await this.callApi(params, req, runtime), new DescribeTagsNumLineChartResponse({}));
  }

  /**
   * @summary 标签命中数量分析
   *
   * @param request DescribeTagsNumLineChartRequest
   * @return DescribeTagsNumLineChartResponse
   */
  async describeTagsNumLineChart(request: DescribeTagsNumLineChartRequest): Promise<DescribeTagsNumLineChartResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTagsNumLineChartWithOptions(request, runtime);
  }

  /**
   * @summary 标签命中占比分析
   *
   * @param request DescribeTagsRatioLineChartRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeTagsRatioLineChartResponse
   */
  async describeTagsRatioLineChartWithOptions(request: DescribeTagsRatioLineChartRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTagsRatioLineChartResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.byPassEventCodes)) {
      query["byPassEventCodes"] = request.byPassEventCodes;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.mainEventCodes)) {
      query["mainEventCodes"] = request.mainEventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.shuntEventCodes)) {
      query["shuntEventCodes"] = request.shuntEventCodes;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTagsRatioLineChart",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTagsRatioLineChartResponse>(await this.callApi(params, req, runtime), new DescribeTagsRatioLineChartResponse({}));
  }

  /**
   * @summary 标签命中占比分析
   *
   * @param request DescribeTagsRatioLineChartRequest
   * @return DescribeTagsRatioLineChartResponse
   */
  async describeTagsRatioLineChart(request: DescribeTagsRatioLineChartRequest): Promise<DescribeTagsRatioLineChartResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTagsRatioLineChartWithOptions(request, runtime);
  }

  /**
   * @summary 标签命中趋势
   *
   * @param request DescribeTagsTrendRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeTagsTrendResponse
   */
  async describeTagsTrendWithOptions(request: DescribeTagsTrendRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTagsTrendResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.beginTime)) {
      query["beginTime"] = request.beginTime;
    }

    if (!Util.isUnset(request.endTime)) {
      query["endTime"] = request.endTime;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.result)) {
      query["result"] = request.result;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTagsTrend",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTagsTrendResponse>(await this.callApi(params, req, runtime), new DescribeTagsTrendResponse({}));
  }

  /**
   * @summary 标签命中趋势
   *
   * @param request DescribeTagsTrendRequest
   * @return DescribeTagsTrendResponse
   */
  async describeTagsTrend(request: DescribeTagsTrendRequest): Promise<DescribeTagsTrendResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTagsTrendWithOptions(request, runtime);
  }

  /**
   * @summary 任务列表
   *
   * @param request DescribeTaskListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeTaskListResponse
   */
  async describeTaskListWithOptions(request: DescribeTaskListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTaskListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.isPage)) {
      query["IsPage"] = request.isPage;
    }

    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTaskList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTaskListResponse>(await this.callApi(params, req, runtime), new DescribeTaskListResponse({}));
  }

  /**
   * @summary 任务列表
   *
   * @param request DescribeTaskListRequest
   * @return DescribeTaskListResponse
   */
  async describeTaskList(request: DescribeTaskListRequest): Promise<DescribeTaskListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTaskListWithOptions(request, runtime);
  }

  /**
   * @summary 任务日志列表
   *
   * @param request DescribeTaskLogListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeTaskLogListResponse
   */
  async describeTaskLogListWithOptions(request: DescribeTaskLogListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTaskLogListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.isPage)) {
      query["IsPage"] = request.isPage;
    }

    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!Util.isUnset(request.taskLogId)) {
      query["TaskLogId"] = request.taskLogId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTaskLogList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTaskLogListResponse>(await this.callApi(params, req, runtime), new DescribeTaskLogListResponse({}));
  }

  /**
   * @summary 任务日志列表
   *
   * @param request DescribeTaskLogListRequest
   * @return DescribeTaskLogListResponse
   */
  async describeTaskLogList(request: DescribeTaskLogListRequest): Promise<DescribeTaskLogListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTaskLogListWithOptions(request, runtime);
  }

  /**
   * @summary 查询事件模版详情
   *
   * @param request DescribeTemplateBaseInfoByTemplateIdRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeTemplateBaseInfoByTemplateIdResponse
   */
  async describeTemplateBaseInfoByTemplateIdWithOptions(request: DescribeTemplateBaseInfoByTemplateIdRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTemplateBaseInfoByTemplateIdResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.templateId)) {
      query["templateId"] = request.templateId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTemplateBaseInfoByTemplateId",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTemplateBaseInfoByTemplateIdResponse>(await this.callApi(params, req, runtime), new DescribeTemplateBaseInfoByTemplateIdResponse({}));
  }

  /**
   * @summary 查询事件模版详情
   *
   * @param request DescribeTemplateBaseInfoByTemplateIdRequest
   * @return DescribeTemplateBaseInfoByTemplateIdResponse
   */
  async describeTemplateBaseInfoByTemplateId(request: DescribeTemplateBaseInfoByTemplateIdRequest): Promise<DescribeTemplateBaseInfoByTemplateIdResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTemplateBaseInfoByTemplateIdWithOptions(request, runtime);
  }

  /**
   * @summary 查询事件总数量
   *
   * @param request DescribeTemplateCountRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeTemplateCountResponse
   */
  async describeTemplateCountWithOptions(request: DescribeTemplateCountRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTemplateCountResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTemplateCount",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTemplateCountResponse>(await this.callApi(params, req, runtime), new DescribeTemplateCountResponse({}));
  }

  /**
   * @summary 查询事件总数量
   *
   * @param request DescribeTemplateCountRequest
   * @return DescribeTemplateCountResponse
   */
  async describeTemplateCount(request: DescribeTemplateCountRequest): Promise<DescribeTemplateCountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTemplateCountWithOptions(request, runtime);
  }

  /**
   * @summary 模版下载
   *
   * @param request DescribeTemplateDownloadRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeTemplateDownloadResponse
   */
  async describeTemplateDownloadWithOptions(request: DescribeTemplateDownloadRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTemplateDownloadResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTemplateDownload",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTemplateDownloadResponse>(await this.callApi(params, req, runtime), new DescribeTemplateDownloadResponse({}));
  }

  /**
   * @summary 模版下载
   *
   * @param request DescribeTemplateDownloadRequest
   * @return DescribeTemplateDownloadResponse
   */
  async describeTemplateDownload(request: DescribeTemplateDownloadRequest): Promise<DescribeTemplateDownloadResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTemplateDownloadWithOptions(request, runtime);
  }

  /**
   * @summary 根据事件名称查询事件列表
   *
   * @param request DescribeTemplatePageListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeTemplatePageListResponse
   */
  async describeTemplatePageListWithOptions(request: DescribeTemplatePageListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTemplatePageListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.templateName)) {
      query["templateName"] = request.templateName;
    }

    if (!Util.isUnset(request.templateSearchItem)) {
      query["templateSearchItem"] = request.templateSearchItem;
    }

    if (!Util.isUnset(request.templateStatus)) {
      query["templateStatus"] = request.templateStatus;
    }

    if (!Util.isUnset(request.templateType)) {
      query["templateType"] = request.templateType;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeTemplatePageList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeTemplatePageListResponse>(await this.callApi(params, req, runtime), new DescribeTemplatePageListResponse({}));
  }

  /**
   * @summary 根据事件名称查询事件列表
   *
   * @param request DescribeTemplatePageListRequest
   * @return DescribeTemplatePageListResponse
   */
  async describeTemplatePageList(request: DescribeTemplatePageListRequest): Promise<DescribeTemplatePageListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeTemplatePageListWithOptions(request, runtime);
  }

  /**
   * @summary 获取用户使用过服务列表
   *
   * @param request DescribeUsedServiceRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeUsedServiceResponse
   */
  async describeUsedServiceWithOptions(request: DescribeUsedServiceRequest, runtime: $Util.RuntimeOptions): Promise<DescribeUsedServiceResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeUsedService",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeUsedServiceResponse>(await this.callApi(params, req, runtime), new DescribeUsedServiceResponse({}));
  }

  /**
   * @summary 获取用户使用过服务列表
   *
   * @param request DescribeUsedServiceRequest
   * @return DescribeUsedServiceResponse
   */
  async describeUsedService(request: DescribeUsedServiceRequest): Promise<DescribeUsedServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeUsedServiceWithOptions(request, runtime);
  }

  /**
   * @summary 获取当前登录用户信息
   *
   * @param request DescribeUserInfoRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeUserInfoResponse
   */
  async describeUserInfoWithOptions(request: DescribeUserInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeUserInfoResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeUserInfo",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeUserInfoResponse>(await this.callApi(params, req, runtime), new DescribeUserInfoResponse({}));
  }

  /**
   * @summary 获取当前登录用户信息
   *
   * @param request DescribeUserInfoRequest
   * @return DescribeUserInfoResponse
   */
  async describeUserInfo(request: DescribeUserInfoRequest): Promise<DescribeUserInfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeUserInfoWithOptions(request, runtime);
  }

  /**
   * @summary 查询变量绑定信息
   *
   * @param request DescribeVariableBindDetailRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeVariableBindDetailResponse
   */
  async describeVariableBindDetailWithOptions(request: DescribeVariableBindDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribeVariableBindDetailResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.defineId)) {
      query["defineId"] = request.defineId;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeVariableBindDetail",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeVariableBindDetailResponse>(await this.callApi(params, req, runtime), new DescribeVariableBindDetailResponse({}));
  }

  /**
   * @summary 查询变量绑定信息
   *
   * @param request DescribeVariableBindDetailRequest
   * @return DescribeVariableBindDetailResponse
   */
  async describeVariableBindDetail(request: DescribeVariableBindDetailRequest): Promise<DescribeVariableBindDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeVariableBindDetailWithOptions(request, runtime);
  }

  /**
   * @summary 查询变量详情
   *
   * @param request DescribeVariableDetailRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeVariableDetailResponse
   */
  async describeVariableDetailWithOptions(request: DescribeVariableDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribeVariableDetailResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeVariableDetail",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeVariableDetailResponse>(await this.callApi(params, req, runtime), new DescribeVariableDetailResponse({}));
  }

  /**
   * @summary 查询变量详情
   *
   * @param request DescribeVariableDetailRequest
   * @return DescribeVariableDetailResponse
   */
  async describeVariableDetail(request: DescribeVariableDetailRequest): Promise<DescribeVariableDetailResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeVariableDetailWithOptions(request, runtime);
  }

  /**
   * @summary 查询变量收费信息
   *
   * @param request DescribeVariableFeeRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeVariableFeeResponse
   */
  async describeVariableFeeWithOptions(request: DescribeVariableFeeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeVariableFeeResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.ids)) {
      query["ids"] = request.ids;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeVariableFee",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeVariableFeeResponse>(await this.callApi(params, req, runtime), new DescribeVariableFeeResponse({}));
  }

  /**
   * @summary 查询变量收费信息
   *
   * @param request DescribeVariableFeeRequest
   * @return DescribeVariableFeeResponse
   */
  async describeVariableFee(request: DescribeVariableFeeRequest): Promise<DescribeVariableFeeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeVariableFeeWithOptions(request, runtime);
  }

  /**
   * @summary 查询变量详情
   *
   * @param request DescribeVariableListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeVariableListResponse
   */
  async describeVariableListWithOptions(request: DescribeVariableListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeVariableListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.refObjId)) {
      query["refObjId"] = request.refObjId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.sourceType)) {
      query["sourceType"] = request.sourceType;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    if (!Util.isUnset(request.typesStr)) {
      query["typesStr"] = request.typesStr;
    }

    if (!Util.isUnset(request.value)) {
      query["value"] = request.value;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeVariableList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeVariableListResponse>(await this.callApi(params, req, runtime), new DescribeVariableListResponse({}));
  }

  /**
   * @summary 查询变量详情
   *
   * @param request DescribeVariableListRequest
   * @return DescribeVariableListResponse
   */
  async describeVariableList(request: DescribeVariableListRequest): Promise<DescribeVariableListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeVariableListWithOptions(request, runtime);
  }

  /**
   * @summary 查询变量定义
   *
   * @param request DescribeVariableMarketListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeVariableMarketListResponse
   */
  async describeVariableMarketListWithOptions(request: DescribeVariableMarketListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeVariableMarketListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.chargingMode)) {
      query["chargingMode"] = request.chargingMode;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.paging)) {
      query["paging"] = request.paging;
    }

    if (!Util.isUnset(request.queryContent)) {
      query["queryContent"] = request.queryContent;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.scenesStr)) {
      query["scenesStr"] = request.scenesStr;
    }

    if (!Util.isUnset(request.source)) {
      query["source"] = request.source;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeVariableMarketList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeVariableMarketListResponse>(await this.callApi(params, req, runtime), new DescribeVariableMarketListResponse({}));
  }

  /**
   * @summary 查询变量定义
   *
   * @param request DescribeVariableMarketListRequest
   * @return DescribeVariableMarketListResponse
   */
  async describeVariableMarketList(request: DescribeVariableMarketListRequest): Promise<DescribeVariableMarketListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeVariableMarketListWithOptions(request, runtime);
  }

  /**
   * @summary 查询配置信息
   *
   * @param request DescribeVariableSceneListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return DescribeVariableSceneListResponse
   */
  async describeVariableSceneListWithOptions(request: DescribeVariableSceneListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeVariableSceneListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.bizType)) {
      query["bizType"] = request.bizType;
    }

    if (!Util.isUnset(request.configKey)) {
      query["configKey"] = request.configKey;
    }

    if (!Util.isUnset(request.currentPage)) {
      query["currentPage"] = request.currentPage;
    }

    if (!Util.isUnset(request.pageSize)) {
      query["pageSize"] = request.pageSize;
    }

    if (!Util.isUnset(request.paging)) {
      query["paging"] = request.paging;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "DescribeVariableSceneList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<DescribeVariableSceneListResponse>(await this.callApi(params, req, runtime), new DescribeVariableSceneListResponse({}));
  }

  /**
   * @summary 查询配置信息
   *
   * @param request DescribeVariableSceneListRequest
   * @return DescribeVariableSceneListResponse
   */
  async describeVariableSceneList(request: DescribeVariableSceneListRequest): Promise<DescribeVariableSceneListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.describeVariableSceneListWithOptions(request, runtime);
  }

  /**
   * @summary 自定义变量测试
   *
   * @param request ExpressionTestRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ExpressionTestResponse
   */
  async expressionTestWithOptions(request: ExpressionTestRequest, runtime: $Util.RuntimeOptions): Promise<ExpressionTestResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.expression)) {
      query["expression"] = request.expression;
    }

    if (!Util.isUnset(request.expressionVariable)) {
      query["expressionVariable"] = request.expressionVariable;
    }

    if (!Util.isUnset(request.expressionVariableIds)) {
      query["expressionVariableIds"] = request.expressionVariableIds;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.scene)) {
      query["scene"] = request.scene;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ExpressionTest",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ExpressionTestResponse>(await this.callApi(params, req, runtime), new ExpressionTestResponse({}));
  }

  /**
   * @summary 自定义变量测试
   *
   * @param request ExpressionTestRequest
   * @return ExpressionTestResponse
   */
  async expressionTest(request: ExpressionTestRequest): Promise<ExpressionTestResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.expressionTestWithOptions(request, runtime);
  }

  /**
   * @summary 文件上传
   *
   * @param request FileUploadRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return FileUploadResponse
   */
  async fileUploadWithOptions(request: FileUploadRequest, runtime: $Util.RuntimeOptions): Promise<FileUploadResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.fileName)) {
      query["FileName"] = request.fileName;
    }

    if (!Util.isUnset(request.fileUrl)) {
      query["FileUrl"] = request.fileUrl;
    }

    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.tab)) {
      query["Tab"] = request.tab;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "FileUpload",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<FileUploadResponse>(await this.callApi(params, req, runtime), new FileUploadResponse({}));
  }

  /**
   * @summary 文件上传
   *
   * @param request FileUploadRequest
   * @return FileUploadResponse
   */
  async fileUpload(request: FileUploadRequest): Promise<FileUploadResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.fileUploadWithOptions(request, runtime);
  }

  /**
   * @summary 创建或导入名单
   *
   * @param request ImportNameListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ImportNameListResponse
   */
  async importNameListWithOptions(request: ImportNameListRequest, runtime: $Util.RuntimeOptions): Promise<ImportNameListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.data)) {
      query["data"] = request.data;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.importType)) {
      query["importType"] = request.importType;
    }

    if (!Util.isUnset(request.nameListType)) {
      query["nameListType"] = request.nameListType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    if (!Util.isUnset(request.variableId)) {
      query["variableId"] = request.variableId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ImportNameList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ImportNameListResponse>(await this.callApi(params, req, runtime), new ImportNameListResponse({}));
  }

  /**
   * @summary 创建或导入名单
   *
   * @param request ImportNameListRequest
   * @return ImportNameListResponse
   */
  async importNameList(request: ImportNameListRequest): Promise<ImportNameListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.importNameListWithOptions(request, runtime);
  }

  /**
   * @summary 导入模板事件
   *
   * @param request ImportTemplateEventRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ImportTemplateEventResponse
   */
  async importTemplateEventWithOptions(request: ImportTemplateEventRequest, runtime: $Util.RuntimeOptions): Promise<ImportTemplateEventResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventTemplateIds)) {
      query["eventTemplateIds"] = request.eventTemplateIds;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ImportTemplateEvent",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ImportTemplateEventResponse>(await this.callApi(params, req, runtime), new ImportTemplateEventResponse({}));
  }

  /**
   * @summary 导入模板事件
   *
   * @param request ImportTemplateEventRequest
   * @return ImportTemplateEventResponse
   */
  async importTemplateEvent(request: ImportTemplateEventRequest): Promise<ImportTemplateEventResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.importTemplateEventWithOptions(request, runtime);
  }

  /**
   * @summary 更新备注
   *
   * @param request ModifyAppKeyRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ModifyAppKeyResponse
   */
  async modifyAppKeyWithOptions(request: ModifyAppKeyRequest, runtime: $Util.RuntimeOptions): Promise<ModifyAppKeyResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.appKey)) {
      query["appKey"] = request.appKey;
    }

    if (!Util.isUnset(request.memo)) {
      query["memo"] = request.memo;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ModifyAppKey",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifyAppKeyResponse>(await this.callApi(params, req, runtime), new ModifyAppKeyResponse({}));
  }

  /**
   * @summary 更新备注
   *
   * @param request ModifyAppKeyRequest
   * @return ModifyAppKeyResponse
   */
  async modifyAppKey(request: ModifyAppKeyRequest): Promise<ModifyAppKeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifyAppKeyWithOptions(request, runtime);
  }

  /**
   * @summary 编辑累计变量
   *
   * @param request ModifyCustVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ModifyCustVariableResponse
   */
  async modifyCustVariableWithOptions(request: ModifyCustVariableRequest, runtime: $Util.RuntimeOptions): Promise<ModifyCustVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.condition)) {
      query["condition"] = request.condition;
    }

    if (!Util.isUnset(request.dataVersion)) {
      query["dataVersion"] = request.dataVersion;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.eventCodes)) {
      query["eventCodes"] = request.eventCodes;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.outputs)) {
      query["outputs"] = request.outputs;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ModifyCustVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifyCustVariableResponse>(await this.callApi(params, req, runtime), new ModifyCustVariableResponse({}));
  }

  /**
   * @summary 编辑累计变量
   *
   * @param request ModifyCustVariableRequest
   * @return ModifyCustVariableResponse
   */
  async modifyCustVariable(request: ModifyCustVariableRequest): Promise<ModifyCustVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifyCustVariableWithOptions(request, runtime);
  }

  /**
   * @summary 编辑事件
   *
   * @param request ModifyEventRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ModifyEventResponse
   */
  async modifyEventWithOptions(request: ModifyEventRequest, runtime: $Util.RuntimeOptions): Promise<ModifyEventResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.bizVersion)) {
      query["bizVersion"] = request.bizVersion;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.inputFieldsStr)) {
      query["inputFieldsStr"] = request.inputFieldsStr;
    }

    if (!Util.isUnset(request.memo)) {
      query["memo"] = request.memo;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.templateType)) {
      query["templateType"] = request.templateType;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ModifyEvent",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifyEventResponse>(await this.callApi(params, req, runtime), new ModifyEventResponse({}));
  }

  /**
   * @summary 编辑事件
   *
   * @param request ModifyEventRequest
   * @return ModifyEventResponse
   */
  async modifyEvent(request: ModifyEventRequest): Promise<ModifyEventResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifyEventWithOptions(request, runtime);
  }

  /**
   * @summary 修改事件状态
   *
   * @param request ModifyEventStatusRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ModifyEventStatusResponse
   */
  async modifyEventStatusWithOptions(request: ModifyEventStatusRequest, runtime: $Util.RuntimeOptions): Promise<ModifyEventStatusResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.fromEventSatus)) {
      query["fromEventSatus"] = request.fromEventSatus;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.toEventSatus)) {
      query["toEventSatus"] = request.toEventSatus;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ModifyEventStatus",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifyEventStatusResponse>(await this.callApi(params, req, runtime), new ModifyEventStatusResponse({}));
  }

  /**
   * @summary 修改事件状态
   *
   * @param request ModifyEventStatusRequest
   * @return ModifyEventStatusResponse
   */
  async modifyEventStatus(request: ModifyEventStatusRequest): Promise<ModifyEventStatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifyEventStatusWithOptions(request, runtime);
  }

  /**
   * @summary 编辑自定义变量
   *
   * @param request ModifyExpressionVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ModifyExpressionVariableResponse
   */
  async modifyExpressionVariableWithOptions(request: ModifyExpressionVariableRequest, runtime: $Util.RuntimeOptions): Promise<ModifyExpressionVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.dataVersion)) {
      query["dataVersion"] = request.dataVersion;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.expression)) {
      query["expression"] = request.expression;
    }

    if (!Util.isUnset(request.expressionTitle)) {
      query["expressionTitle"] = request.expressionTitle;
    }

    if (!Util.isUnset(request.expressionVariable)) {
      query["expressionVariable"] = request.expressionVariable;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.outlier)) {
      query["outlier"] = request.outlier;
    }

    if (!Util.isUnset(request.outputs)) {
      query["outputs"] = request.outputs;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ModifyExpressionVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifyExpressionVariableResponse>(await this.callApi(params, req, runtime), new ModifyExpressionVariableResponse({}));
  }

  /**
   * @summary 编辑自定义变量
   *
   * @param request ModifyExpressionVariableRequest
   * @return ModifyExpressionVariableResponse
   */
  async modifyExpressionVariable(request: ModifyExpressionVariableRequest): Promise<ModifyExpressionVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifyExpressionVariableWithOptions(request, runtime);
  }

  /**
   * @summary 修改字段
   *
   * @param request ModifyFieldRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ModifyFieldResponse
   */
  async modifyFieldWithOptions(request: ModifyFieldRequest, runtime: $Util.RuntimeOptions): Promise<ModifyFieldResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.classify)) {
      query["classify"] = request.classify;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.enumData)) {
      query["enumData"] = request.enumData;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ModifyField",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifyFieldResponse>(await this.callApi(params, req, runtime), new ModifyFieldResponse({}));
  }

  /**
   * @summary 修改字段
   *
   * @param request ModifyFieldRequest
   * @return ModifyFieldResponse
   */
  async modifyField(request: ModifyFieldRequest): Promise<ModifyFieldResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifyFieldWithOptions(request, runtime);
  }

  /**
   * @summary 修改poc任务
   *
   * @param request ModifyPocTaskRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ModifyPocTaskResponse
   */
  async modifyPocTaskWithOptions(request: ModifyPocTaskRequest, runtime: $Util.RuntimeOptions): Promise<ModifyPocTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.accessType)) {
      query["accessType"] = request.accessType;
    }

    if (!Util.isUnset(request.config)) {
      query["config"] = request.config;
    }

    if (!Util.isUnset(request.fileName)) {
      query["fileName"] = request.fileName;
    }

    if (!Util.isUnset(request.fileType)) {
      query["fileType"] = request.fileType;
    }

    if (!Util.isUnset(request.fileUrl)) {
      query["fileUrl"] = request.fileUrl;
    }

    if (!Util.isUnset(request.reason)) {
      query["reason"] = request.reason;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.serviceCode)) {
      query["serviceCode"] = request.serviceCode;
    }

    if (!Util.isUnset(request.serviceName)) {
      query["serviceName"] = request.serviceName;
    }

    if (!Util.isUnset(request.taskId)) {
      query["taskId"] = request.taskId;
    }

    if (!Util.isUnset(request.taskName)) {
      query["taskName"] = request.taskName;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ModifyPocTask",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifyPocTaskResponse>(await this.callApi(params, req, runtime), new ModifyPocTaskResponse({}));
  }

  /**
   * @summary 修改poc任务
   *
   * @param request ModifyPocTaskRequest
   * @return ModifyPocTaskResponse
   */
  async modifyPocTask(request: ModifyPocTaskRequest): Promise<ModifyPocTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifyPocTaskWithOptions(request, runtime);
  }

  /**
   * @summary 策略修改优先级
   *
   * @param request ModifyRulePriorityRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ModifyRulePriorityResponse
   */
  async modifyRulePriorityWithOptions(request: ModifyRulePriorityRequest, runtime: $Util.RuntimeOptions): Promise<ModifyRulePriorityResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.consoleRuleId)) {
      query["consoleRuleId"] = request.consoleRuleId;
    }

    if (!Util.isUnset(request.priority)) {
      query["priority"] = request.priority;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleId)) {
      query["ruleId"] = request.ruleId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ModifyRulePriority",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifyRulePriorityResponse>(await this.callApi(params, req, runtime), new ModifyRulePriorityResponse({}));
  }

  /**
   * @summary 策略修改优先级
   *
   * @param request ModifyRulePriorityRequest
   * @return ModifyRulePriorityResponse
   */
  async modifyRulePriority(request: ModifyRulePriorityRequest): Promise<ModifyRulePriorityResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifyRulePriorityWithOptions(request, runtime);
  }

  /**
   * @summary 策略版本申请状态变更
   *
   * @param request ModifyRuleStatusRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ModifyRuleStatusResponse
   */
  async modifyRuleStatusWithOptions(request: ModifyRuleStatusRequest, runtime: $Util.RuntimeOptions): Promise<ModifyRuleStatusResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.applyUserId)) {
      query["applyUserId"] = request.applyUserId;
    }

    if (!Util.isUnset(request.applyUserName)) {
      query["applyUserName"] = request.applyUserName;
    }

    if (!Util.isUnset(request.auditRemark)) {
      query["auditRemark"] = request.auditRemark;
    }

    if (!Util.isUnset(request.auditUserId)) {
      query["auditUserId"] = request.auditUserId;
    }

    if (!Util.isUnset(request.auditUserName)) {
      query["auditUserName"] = request.auditUserName;
    }

    if (!Util.isUnset(request.consoleRuleId)) {
      query["consoleRuleId"] = request.consoleRuleId;
    }

    if (!Util.isUnset(request.eventType)) {
      query["eventType"] = request.eventType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleAuditType)) {
      query["ruleAuditType"] = request.ruleAuditType;
    }

    if (!Util.isUnset(request.ruleId)) {
      query["ruleId"] = request.ruleId;
    }

    if (!Util.isUnset(request.ruleVersionId)) {
      query["ruleVersionId"] = request.ruleVersionId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ModifyRuleStatus",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifyRuleStatusResponse>(await this.callApi(params, req, runtime), new ModifyRuleStatusResponse({}));
  }

  /**
   * @summary 策略版本申请状态变更
   *
   * @param request ModifyRuleStatusRequest
   * @return ModifyRuleStatusResponse
   */
  async modifyRuleStatus(request: ModifyRuleStatusRequest): Promise<ModifyRuleStatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifyRuleStatusWithOptions(request, runtime);
  }

  /**
   * @summary 修改模版
   *
   * @param request ModifyTemplateRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ModifyTemplateResponse
   */
  async modifyTemplateWithOptions(request: ModifyTemplateRequest, runtime: $Util.RuntimeOptions): Promise<ModifyTemplateResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.inputFields)) {
      query["inputFields"] = request.inputFields;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.templateId)) {
      query["templateId"] = request.templateId;
    }

    if (!Util.isUnset(request.templateType)) {
      query["templateType"] = request.templateType;
    }

    if (!Util.isUnset(request.version)) {
      query["version"] = request.version;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ModifyTemplate",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifyTemplateResponse>(await this.callApi(params, req, runtime), new ModifyTemplateResponse({}));
  }

  /**
   * @summary 修改模版
   *
   * @param request ModifyTemplateRequest
   * @return ModifyTemplateResponse
   */
  async modifyTemplate(request: ModifyTemplateRequest): Promise<ModifyTemplateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifyTemplateWithOptions(request, runtime);
  }

  /**
   * @summary 更新模版状态
   *
   * @param request ModifyTemplateStatusRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ModifyTemplateStatusResponse
   */
  async modifyTemplateStatusWithOptions(request: ModifyTemplateStatusRequest, runtime: $Util.RuntimeOptions): Promise<ModifyTemplateStatusResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.fromTemplateSatus)) {
      query["fromTemplateSatus"] = request.fromTemplateSatus;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.templateId)) {
      query["templateId"] = request.templateId;
    }

    if (!Util.isUnset(request.toTemplateSatus)) {
      query["toTemplateSatus"] = request.toTemplateSatus;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ModifyTemplateStatus",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifyTemplateStatusResponse>(await this.callApi(params, req, runtime), new ModifyTemplateStatusResponse({}));
  }

  /**
   * @summary 更新模版状态
   *
   * @param request ModifyTemplateStatusRequest
   * @return ModifyTemplateStatusResponse
   */
  async modifyTemplateStatus(request: ModifyTemplateStatusRequest): Promise<ModifyTemplateStatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifyTemplateStatusWithOptions(request, runtime);
  }

  /**
   * @summary 修改变量信息
   *
   * @param request ModifyVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return ModifyVariableResponse
   */
  async modifyVariableWithOptions(request: ModifyVariableRequest, runtime: $Util.RuntimeOptions): Promise<ModifyVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "ModifyVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<ModifyVariableResponse>(await this.callApi(params, req, runtime), new ModifyVariableResponse({}));
  }

  /**
   * @summary 修改变量信息
   *
   * @param request ModifyVariableRequest
   * @return ModifyVariableResponse
   */
  async modifyVariable(request: ModifyVariableRequest): Promise<ModifyVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.modifyVariableWithOptions(request, runtime);
  }

  /**
   * @summary 开通服务
   *
   * @param request OpenConsoleSlsRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return OpenConsoleSlsResponse
   */
  async openConsoleSlsWithOptions(request: OpenConsoleSlsRequest, runtime: $Util.RuntimeOptions): Promise<OpenConsoleSlsResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.scene)) {
      query["scene"] = request.scene;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "OpenConsoleSls",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<OpenConsoleSlsResponse>(await this.callApi(params, req, runtime), new OpenConsoleSlsResponse({}));
  }

  /**
   * @summary 开通服务
   *
   * @param request OpenConsoleSlsRequest
   * @return OpenConsoleSlsResponse
   */
  async openConsoleSls(request: OpenConsoleSlsRequest): Promise<OpenConsoleSlsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.openConsoleSlsWithOptions(request, runtime);
  }

  /**
   * @summary 操作收藏
   *
   * @param request OperateFavoriteVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return OperateFavoriteVariableResponse
   */
  async operateFavoriteVariableWithOptions(request: OperateFavoriteVariableRequest, runtime: $Util.RuntimeOptions): Promise<OperateFavoriteVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.operate)) {
      query["operate"] = request.operate;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "OperateFavoriteVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<OperateFavoriteVariableResponse>(await this.callApi(params, req, runtime), new OperateFavoriteVariableResponse({}));
  }

  /**
   * @summary 操作收藏
   *
   * @param request OperateFavoriteVariableRequest
   * @return OperateFavoriteVariableResponse
   */
  async operateFavoriteVariable(request: OperateFavoriteVariableRequest): Promise<OperateFavoriteVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.operateFavoriteVariableWithOptions(request, runtime);
  }

  /**
   * @summary 企业认证
   *
   * @param request PermissionCheckRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return PermissionCheckResponse
   */
  async permissionCheckWithOptions(request: PermissionCheckRequest, runtime: $Util.RuntimeOptions): Promise<PermissionCheckResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["RegId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "PermissionCheck",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<PermissionCheckResponse>(await this.callApi(params, req, runtime), new PermissionCheckResponse({}));
  }

  /**
   * @summary 企业认证
   *
   * @param request PermissionCheckRequest
   * @return PermissionCheckResponse
   */
  async permissionCheck(request: PermissionCheckRequest): Promise<PermissionCheckResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.permissionCheckWithOptions(request, runtime);
  }

  /**
   * @summary 白盒化策略详情查询
   *
   * @param request QueryAuthRuleDetailByRuleIdRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return QueryAuthRuleDetailByRuleIdResponse
   */
  async queryAuthRuleDetailByRuleIdWithOptions(request: QueryAuthRuleDetailByRuleIdRequest, runtime: $Util.RuntimeOptions): Promise<QueryAuthRuleDetailByRuleIdResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.consoleRuleId)) {
      query["consoleRuleId"] = request.consoleRuleId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleId)) {
      query["ruleId"] = request.ruleId;
    }

    if (!Util.isUnset(request.ruleVersionId)) {
      query["ruleVersionId"] = request.ruleVersionId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "QueryAuthRuleDetailByRuleId",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<QueryAuthRuleDetailByRuleIdResponse>(await this.callApi(params, req, runtime), new QueryAuthRuleDetailByRuleIdResponse({}));
  }

  /**
   * @summary 白盒化策略详情查询
   *
   * @param request QueryAuthRuleDetailByRuleIdRequest
   * @return QueryAuthRuleDetailByRuleIdResponse
   */
  async queryAuthRuleDetailByRuleId(request: QueryAuthRuleDetailByRuleIdRequest): Promise<QueryAuthRuleDetailByRuleIdResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.queryAuthRuleDetailByRuleIdWithOptions(request, runtime);
  }

  /**
   * @summary 获取授权用户名
   *
   * @param request QueryAuthUserNameRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return QueryAuthUserNameResponse
   */
  async queryAuthUserNameWithOptions(request: QueryAuthUserNameRequest, runtime: $Util.RuntimeOptions): Promise<QueryAuthUserNameResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.bindId)) {
      query["bindId"] = request.bindId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "QueryAuthUserName",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<QueryAuthUserNameResponse>(await this.callApi(params, req, runtime), new QueryAuthUserNameResponse({}));
  }

  /**
   * @summary 获取授权用户名
   *
   * @param request QueryAuthUserNameRequest
   * @return QueryAuthUserNameResponse
   */
  async queryAuthUserName(request: QueryAuthUserNameRequest): Promise<QueryAuthUserNameResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.queryAuthUserNameWithOptions(request, runtime);
  }

  /**
   * @summary 事件模版授权用户列表
   *
   * @param request QueryAuthorizationUserListRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return QueryAuthorizationUserListResponse
   */
  async queryAuthorizationUserListWithOptions(request: QueryAuthorizationUserListRequest, runtime: $Util.RuntimeOptions): Promise<QueryAuthorizationUserListResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "QueryAuthorizationUserList",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<QueryAuthorizationUserListResponse>(await this.callApi(params, req, runtime), new QueryAuthorizationUserListResponse({}));
  }

  /**
   * @summary 事件模版授权用户列表
   *
   * @param request QueryAuthorizationUserListRequest
   * @return QueryAuthorizationUserListResponse
   */
  async queryAuthorizationUserList(request: QueryAuthorizationUserListRequest): Promise<QueryAuthorizationUserListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.queryAuthorizationUserListWithOptions(request, runtime);
  }

  /**
   * @summary 撤回
   *
   * @param request RecallRuleAuditRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return RecallRuleAuditResponse
   */
  async recallRuleAuditWithOptions(request: RecallRuleAuditRequest, runtime: $Util.RuntimeOptions): Promise<RecallRuleAuditResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "RecallRuleAudit",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<RecallRuleAuditResponse>(await this.callApi(params, req, runtime), new RecallRuleAuditResponse({}));
  }

  /**
   * @summary 撤回
   *
   * @param request RecallRuleAuditRequest
   * @return RecallRuleAuditResponse
   */
  async recallRuleAudit(request: RecallRuleAuditRequest): Promise<RecallRuleAuditResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.recallRuleAuditWithOptions(request, runtime);
  }

  /**
   * @summary 删除事件
   *
   * @param request RemoveEventRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return RemoveEventResponse
   */
  async removeEventWithOptions(request: RemoveEventRequest, runtime: $Util.RuntimeOptions): Promise<RemoveEventResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.createType)) {
      query["createType"] = request.createType;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.templateCode)) {
      query["templateCode"] = request.templateCode;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "RemoveEvent",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<RemoveEventResponse>(await this.callApi(params, req, runtime), new RemoveEventResponse({}));
  }

  /**
   * @summary 删除事件
   *
   * @param request RemoveEventRequest
   * @return RemoveEventResponse
   */
  async removeEvent(request: RemoveEventRequest): Promise<RemoveEventResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.removeEventWithOptions(request, runtime);
  }

  /**
   * @summary 删除模版事件
   *
   * @param request RemoveTemplateRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return RemoveTemplateResponse
   */
  async removeTemplateWithOptions(request: RemoveTemplateRequest, runtime: $Util.RuntimeOptions): Promise<RemoveTemplateResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.templateId)) {
      query["templateId"] = request.templateId;
    }

    if (!Util.isUnset(request.version)) {
      query["version"] = request.version;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "RemoveTemplate",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<RemoveTemplateResponse>(await this.callApi(params, req, runtime), new RemoveTemplateResponse({}));
  }

  /**
   * @summary 删除模版事件
   *
   * @param request RemoveTemplateRequest
   * @return RemoveTemplateResponse
   */
  async removeTemplate(request: RemoveTemplateRequest): Promise<RemoveTemplateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.removeTemplateWithOptions(request, runtime);
  }

  /**
   * @summary 模板下载
   *
   * @param request SampleFileDownloadRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return SampleFileDownloadResponse
   */
  async sampleFileDownloadWithOptions(request: SampleFileDownloadRequest, runtime: $Util.RuntimeOptions): Promise<SampleFileDownloadResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["RegId"] = request.regId;
    }

    if (!Util.isUnset(request.tab)) {
      query["Tab"] = request.tab;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "SampleFileDownload",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<SampleFileDownloadResponse>(await this.callApi(params, req, runtime), new SampleFileDownloadResponse({}));
  }

  /**
   * @summary 模板下载
   *
   * @param request SampleFileDownloadRequest
   * @return SampleFileDownloadResponse
   */
  async sampleFileDownload(request: SampleFileDownloadRequest): Promise<SampleFileDownloadResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.sampleFileDownloadWithOptions(request, runtime);
  }

  /**
   * @summary 保存自定义列
   *
   * @param request SaveAnalysisColumnRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return SaveAnalysisColumnResponse
   */
  async saveAnalysisColumnWithOptions(request: SaveAnalysisColumnRequest, runtime: $Util.RuntimeOptions): Promise<SaveAnalysisColumnResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.columns)) {
      query["columns"] = request.columns;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "SaveAnalysisColumn",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<SaveAnalysisColumnResponse>(await this.callApi(params, req, runtime), new SaveAnalysisColumnResponse({}));
  }

  /**
   * @summary 保存自定义列
   *
   * @param request SaveAnalysisColumnRequest
   * @return SaveAnalysisColumnResponse
   */
  async saveAnalysisColumn(request: SaveAnalysisColumnRequest): Promise<SaveAnalysisColumnResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.saveAnalysisColumnWithOptions(request, runtime);
  }

  /**
   * @summary 旁路/分流配置
   *
   * @param request SaveByPassOrShuntEventRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return SaveByPassOrShuntEventResponse
   */
  async saveByPassOrShuntEventWithOptions(request: SaveByPassOrShuntEventRequest, runtime: $Util.RuntimeOptions): Promise<SaveByPassOrShuntEventResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventId)) {
      query["eventId"] = request.eventId;
    }

    if (!Util.isUnset(request.eventName)) {
      query["eventName"] = request.eventName;
    }

    if (!Util.isUnset(request.eventType)) {
      query["eventType"] = request.eventType;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "SaveByPassOrShuntEvent",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<SaveByPassOrShuntEventResponse>(await this.callApi(params, req, runtime), new SaveByPassOrShuntEventResponse({}));
  }

  /**
   * @summary 旁路/分流配置
   *
   * @param request SaveByPassOrShuntEventRequest
   * @return SaveByPassOrShuntEventResponse
   */
  async saveByPassOrShuntEvent(request: SaveByPassOrShuntEventRequest): Promise<SaveByPassOrShuntEventResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.saveByPassOrShuntEventWithOptions(request, runtime);
  }

  /**
   * @summary 开启/停止旁路事件
   *
   * @param request StartOrStopByPassShuntEventRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return StartOrStopByPassShuntEventResponse
   */
  async startOrStopByPassShuntEventWithOptions(request: StartOrStopByPassShuntEventRequest, runtime: $Util.RuntimeOptions): Promise<StartOrStopByPassShuntEventResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventId)) {
      query["eventId"] = request.eventId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.status)) {
      query["status"] = request.status;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "StartOrStopByPassShuntEvent",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<StartOrStopByPassShuntEventResponse>(await this.callApi(params, req, runtime), new StartOrStopByPassShuntEventResponse({}));
  }

  /**
   * @summary 开启/停止旁路事件
   *
   * @param request StartOrStopByPassShuntEventRequest
   * @return StartOrStopByPassShuntEventResponse
   */
  async startOrStopByPassShuntEvent(request: StartOrStopByPassShuntEventRequest): Promise<StartOrStopByPassShuntEventResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.startOrStopByPassShuntEventWithOptions(request, runtime);
  }

  /**
   * @summary 开始执行任务
   *
   * @param request StartSimulationTaskRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return StartSimulationTaskResponse
   */
  async startSimulationTaskWithOptions(request: StartSimulationTaskRequest, runtime: $Util.RuntimeOptions): Promise<StartSimulationTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "StartSimulationTask",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<StartSimulationTaskResponse>(await this.callApi(params, req, runtime), new StartSimulationTaskResponse({}));
  }

  /**
   * @summary 开始执行任务
   *
   * @param request StartSimulationTaskRequest
   * @return StartSimulationTaskResponse
   */
  async startSimulationTask(request: StartSimulationTaskRequest): Promise<StartSimulationTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.startSimulationTaskWithOptions(request, runtime);
  }

  /**
   * @summary 停止任务
   *
   * @param request StopSimulationTaskRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return StopSimulationTaskResponse
   */
  async stopSimulationTaskWithOptions(request: StopSimulationTaskRequest, runtime: $Util.RuntimeOptions): Promise<StopSimulationTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "StopSimulationTask",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<StopSimulationTaskResponse>(await this.callApi(params, req, runtime), new StopSimulationTaskResponse({}));
  }

  /**
   * @summary 停止任务
   *
   * @param request StopSimulationTaskRequest
   * @return StopSimulationTaskResponse
   */
  async stopSimulationTask(request: StopSimulationTaskRequest): Promise<StopSimulationTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.stopSimulationTaskWithOptions(request, runtime);
  }

  /**
   * @summary 批量创建策略
   *
   * @param request SubmitImportTaskRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return SubmitImportTaskResponse
   */
  async submitImportTaskWithOptions(request: SubmitImportTaskRequest, runtime: $Util.RuntimeOptions): Promise<SubmitImportTaskResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.fileName)) {
      query["fileName"] = request.fileName;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.url)) {
      query["url"] = request.url;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "SubmitImportTask",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<SubmitImportTaskResponse>(await this.callApi(params, req, runtime), new SubmitImportTaskResponse({}));
  }

  /**
   * @summary 批量创建策略
   *
   * @param request SubmitImportTaskRequest
   * @return SubmitImportTaskResponse
   */
  async submitImportTask(request: SubmitImportTaskRequest): Promise<SubmitImportTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.submitImportTaskWithOptions(request, runtime);
  }

  /**
   * @summary 自定义变量开关
   *
   * @param request SwitchExpressionVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return SwitchExpressionVariableResponse
   */
  async switchExpressionVariableWithOptions(request: SwitchExpressionVariableRequest, runtime: $Util.RuntimeOptions): Promise<SwitchExpressionVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.dataVersion)) {
      query["dataVersion"] = request.dataVersion;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.status)) {
      query["status"] = request.status;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "SwitchExpressionVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<SwitchExpressionVariableResponse>(await this.callApi(params, req, runtime), new SwitchExpressionVariableResponse({}));
  }

  /**
   * @summary 自定义变量开关
   *
   * @param request SwitchExpressionVariableRequest
   * @return SwitchExpressionVariableResponse
   */
  async switchExpressionVariable(request: SwitchExpressionVariableRequest): Promise<SwitchExpressionVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.switchExpressionVariableWithOptions(request, runtime);
  }

  /**
   * @summary 字段开关
   *
   * @param request SwitchFieldRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return SwitchFieldResponse
   */
  async switchFieldWithOptions(request: SwitchFieldRequest, runtime: $Util.RuntimeOptions): Promise<SwitchFieldResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.source)) {
      query["source"] = request.source;
    }

    if (!Util.isUnset(request.status)) {
      query["status"] = request.status;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "SwitchField",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<SwitchFieldResponse>(await this.callApi(params, req, runtime), new SwitchFieldResponse({}));
  }

  /**
   * @summary 字段开关
   *
   * @param request SwitchFieldRequest
   * @return SwitchFieldResponse
   */
  async switchField(request: SwitchFieldRequest): Promise<SwitchFieldResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.switchFieldWithOptions(request, runtime);
  }

  /**
   * @summary 查询变量启用/禁用
   *
   * @param request SwitchQueryVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return SwitchQueryVariableResponse
   */
  async switchQueryVariableWithOptions(request: SwitchQueryVariableRequest, runtime: $Util.RuntimeOptions): Promise<SwitchQueryVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.status)) {
      query["status"] = request.status;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "SwitchQueryVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<SwitchQueryVariableResponse>(await this.callApi(params, req, runtime), new SwitchQueryVariableResponse({}));
  }

  /**
   * @summary 查询变量启用/禁用
   *
   * @param request SwitchQueryVariableRequest
   * @return SwitchQueryVariableResponse
   */
  async switchQueryVariable(request: SwitchQueryVariableRequest): Promise<SwitchQueryVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.switchQueryVariableWithOptions(request, runtime);
  }

  /**
   * @summary 一键切换上线
   *
   * @param request SwitchToOnlineRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return SwitchToOnlineResponse
   */
  async switchToOnlineWithOptions(request: SwitchToOnlineRequest, runtime: $Util.RuntimeOptions): Promise<SwitchToOnlineResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventId)) {
      query["eventId"] = request.eventId;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "SwitchToOnline",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<SwitchToOnlineResponse>(await this.callApi(params, req, runtime), new SwitchToOnlineResponse({}));
  }

  /**
   * @summary 一键切换上线
   *
   * @param request SwitchToOnlineRequest
   * @return SwitchToOnlineResponse
   */
  async switchToOnline(request: SwitchToOnlineRequest): Promise<SwitchToOnlineResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.switchToOnlineWithOptions(request, runtime);
  }

  /**
   * @summary 累计变量开关
   *
   * @param request SwitchVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return SwitchVariableResponse
   */
  async switchVariableWithOptions(request: SwitchVariableRequest, runtime: $Util.RuntimeOptions): Promise<SwitchVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.dataVersion)) {
      query["dataVersion"] = request.dataVersion;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.status)) {
      query["status"] = request.status;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "SwitchVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<SwitchVariableResponse>(await this.callApi(params, req, runtime), new SwitchVariableResponse({}));
  }

  /**
   * @summary 累计变量开关
   *
   * @param request SwitchVariableRequest
   * @return SwitchVariableResponse
   */
  async switchVariable(request: SwitchVariableRequest): Promise<SwitchVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.switchVariableWithOptions(request, runtime);
  }

  /**
   * @summary 判断任务名是否重复
   *
   * @param request TaskNameByUserIdRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return TaskNameByUserIdResponse
   */
  async taskNameByUserIdWithOptions(request: TaskNameByUserIdRequest, runtime: $Util.RuntimeOptions): Promise<TaskNameByUserIdResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.regId)) {
      query["RegId"] = request.regId;
    }

    if (!Util.isUnset(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "TaskNameByUserId",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<TaskNameByUserIdResponse>(await this.callApi(params, req, runtime), new TaskNameByUserIdResponse({}));
  }

  /**
   * @summary 判断任务名是否重复
   *
   * @param request TaskNameByUserIdRequest
   * @return TaskNameByUserIdResponse
   */
  async taskNameByUserId(request: TaskNameByUserIdRequest): Promise<TaskNameByUserIdResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.taskNameByUserIdWithOptions(request, runtime);
  }

  /**
   * @summary 修改查询条件
   *
   * @param request UpdateAnalysisConditionFavoriteRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return UpdateAnalysisConditionFavoriteResponse
   */
  async updateAnalysisConditionFavoriteWithOptions(request: UpdateAnalysisConditionFavoriteRequest, runtime: $Util.RuntimeOptions): Promise<UpdateAnalysisConditionFavoriteResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.condition)) {
      query["condition"] = request.condition;
    }

    if (!Util.isUnset(request.eventBeginTime)) {
      query["eventBeginTime"] = request.eventBeginTime;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.eventEndTime)) {
      query["eventEndTime"] = request.eventEndTime;
    }

    if (!Util.isUnset(request.fieldName)) {
      query["fieldName"] = request.fieldName;
    }

    if (!Util.isUnset(request.fieldValue)) {
      query["fieldValue"] = request.fieldValue;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UpdateAnalysisConditionFavorite",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateAnalysisConditionFavoriteResponse>(await this.callApi(params, req, runtime), new UpdateAnalysisConditionFavoriteResponse({}));
  }

  /**
   * @summary 修改查询条件
   *
   * @param request UpdateAnalysisConditionFavoriteRequest
   * @return UpdateAnalysisConditionFavoriteResponse
   */
  async updateAnalysisConditionFavorite(request: UpdateAnalysisConditionFavoriteRequest): Promise<UpdateAnalysisConditionFavoriteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.updateAnalysisConditionFavoriteWithOptions(request, runtime);
  }

  /**
   * @summary 审批
   *
   * @param request UpdateAuditRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return UpdateAuditResponse
   */
  async updateAuditWithOptions(request: UpdateAuditRequest, runtime: $Util.RuntimeOptions): Promise<UpdateAuditResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.auditMsg)) {
      query["auditMsg"] = request.auditMsg;
    }

    if (!Util.isUnset(request.auditRelationType)) {
      query["auditRelationType"] = request.auditRelationType;
    }

    if (!Util.isUnset(request.auditStatus)) {
      query["auditStatus"] = request.auditStatus;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UpdateAudit",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateAuditResponse>(await this.callApi(params, req, runtime), new UpdateAuditResponse({}));
  }

  /**
   * @summary 审批
   *
   * @param request UpdateAuditRequest
   * @return UpdateAuditResponse
   */
  async updateAudit(request: UpdateAuditRequest): Promise<UpdateAuditResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.updateAuditWithOptions(request, runtime);
  }

  /**
   * @summary 修改授权策略
   *
   * @param request UpdateAuthRuleRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return UpdateAuthRuleResponse
   */
  async updateAuthRuleWithOptions(request: UpdateAuthRuleRequest, runtime: $Util.RuntimeOptions): Promise<UpdateAuthRuleResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.consoleRuleId)) {
      query["consoleRuleId"] = request.consoleRuleId;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleActions)) {
      query["ruleActions"] = request.ruleActions;
    }

    if (!Util.isUnset(request.ruleExpressions)) {
      query["ruleExpressions"] = request.ruleExpressions;
    }

    if (!Util.isUnset(request.ruleId)) {
      query["ruleId"] = request.ruleId;
    }

    if (!Util.isUnset(request.ruleVersionId)) {
      query["ruleVersionId"] = request.ruleVersionId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UpdateAuthRule",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateAuthRuleResponse>(await this.callApi(params, req, runtime), new UpdateAuthRuleResponse({}));
  }

  /**
   * @summary 修改授权策略
   *
   * @param request UpdateAuthRuleRequest
   * @return UpdateAuthRuleResponse
   */
  async updateAuthRule(request: UpdateAuthRuleRequest): Promise<UpdateAuthRuleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.updateAuthRuleWithOptions(request, runtime);
  }

  /**
   * @summary 编辑旁路事件
   *
   * @param request UpdateByPassShuntEventRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return UpdateByPassShuntEventResponse
   */
  async updateByPassShuntEventWithOptions(request: UpdateByPassShuntEventRequest, runtime: $Util.RuntimeOptions): Promise<UpdateByPassShuntEventResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.eventId)) {
      query["eventId"] = request.eventId;
    }

    if (!Util.isUnset(request.eventName)) {
      query["eventName"] = request.eventName;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UpdateByPassShuntEvent",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateByPassShuntEventResponse>(await this.callApi(params, req, runtime), new UpdateByPassShuntEventResponse({}));
  }

  /**
   * @summary 编辑旁路事件
   *
   * @param request UpdateByPassShuntEventRequest
   * @return UpdateByPassShuntEventResponse
   */
  async updateByPassShuntEvent(request: UpdateByPassShuntEventRequest): Promise<UpdateByPassShuntEventResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.updateByPassShuntEventWithOptions(request, runtime);
  }

  /**
   * @summary 修改数据源
   *
   * @param request UpdateDataSourceRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return UpdateDataSourceResponse
   */
  async updateDataSourceWithOptions(request: UpdateDataSourceRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDataSourceResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.name)) {
      query["name"] = request.name;
    }

    if (!Util.isUnset(request.ossKey)) {
      query["ossKey"] = request.ossKey;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.type)) {
      query["type"] = request.type;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UpdateDataSource",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateDataSourceResponse>(await this.callApi(params, req, runtime), new UpdateDataSourceResponse({}));
  }

  /**
   * @summary 修改数据源
   *
   * @param request UpdateDataSourceRequest
   * @return UpdateDataSourceResponse
   */
  async updateDataSource(request: UpdateDataSourceRequest): Promise<UpdateDataSourceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.updateDataSourceWithOptions(request, runtime);
  }

  /**
   * @summary 自定义查询变量修改
   *
   * @param request UpdateQueryVariableRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return UpdateQueryVariableResponse
   */
  async updateQueryVariableWithOptions(request: UpdateQueryVariableRequest, runtime: $Util.RuntimeOptions): Promise<UpdateQueryVariableResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.dataSourceCode)) {
      query["dataSourceCode"] = request.dataSourceCode;
    }

    if (!Util.isUnset(request.description)) {
      query["description"] = request.description;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.expression)) {
      query["expression"] = request.expression;
    }

    if (!Util.isUnset(request.expressionTitle)) {
      query["expressionTitle"] = request.expressionTitle;
    }

    if (!Util.isUnset(request.expressionVariable)) {
      query["expressionVariable"] = request.expressionVariable;
    }

    if (!Util.isUnset(request.id)) {
      query["id"] = request.id;
    }

    if (!Util.isUnset(request.outlier)) {
      query["outlier"] = request.outlier;
    }

    if (!Util.isUnset(request.outputs)) {
      query["outputs"] = request.outputs;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.title)) {
      query["title"] = request.title;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UpdateQueryVariable",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateQueryVariableResponse>(await this.callApi(params, req, runtime), new UpdateQueryVariableResponse({}));
  }

  /**
   * @summary 自定义查询变量修改
   *
   * @param request UpdateQueryVariableRequest
   * @return UpdateQueryVariableResponse
   */
  async updateQueryVariable(request: UpdateQueryVariableRequest): Promise<UpdateQueryVariableResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.updateQueryVariableWithOptions(request, runtime);
  }

  /**
   * @summary 更新策略
   *
   * @param request UpdateRuleRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return UpdateRuleResponse
   */
  async updateRuleWithOptions(request: UpdateRuleRequest, runtime: $Util.RuntimeOptions): Promise<UpdateRuleResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.consoleRuleId)) {
      query["consoleRuleId"] = request.consoleRuleId;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.logicExpression)) {
      query["logicExpression"] = request.logicExpression;
    }

    if (!Util.isUnset(request.memo)) {
      query["memo"] = request.memo;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleActions)) {
      query["ruleActions"] = request.ruleActions;
    }

    if (!Util.isUnset(request.ruleExpressions)) {
      query["ruleExpressions"] = request.ruleExpressions;
    }

    if (!Util.isUnset(request.ruleId)) {
      query["ruleId"] = request.ruleId;
    }

    if (!Util.isUnset(request.ruleName)) {
      query["ruleName"] = request.ruleName;
    }

    if (!Util.isUnset(request.ruleStatus)) {
      query["ruleStatus"] = request.ruleStatus;
    }

    if (!Util.isUnset(request.ruleVersionId)) {
      query["ruleVersionId"] = request.ruleVersionId;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UpdateRule",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateRuleResponse>(await this.callApi(params, req, runtime), new UpdateRuleResponse({}));
  }

  /**
   * @summary 更新策略
   *
   * @param request UpdateRuleRequest
   * @return UpdateRuleResponse
   */
  async updateRule(request: UpdateRuleRequest): Promise<UpdateRuleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.updateRuleWithOptions(request, runtime);
  }

  /**
   * @summary 更新策略基础信息
   *
   * @param request UpdateRuleBaseRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return UpdateRuleBaseResponse
   */
  async updateRuleBaseWithOptions(request: UpdateRuleBaseRequest, runtime: $Util.RuntimeOptions): Promise<UpdateRuleBaseResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.consoleRuleId)) {
      query["consoleRuleId"] = request.consoleRuleId;
    }

    if (!Util.isUnset(request.eventCode)) {
      query["eventCode"] = request.eventCode;
    }

    if (!Util.isUnset(request.memo)) {
      query["memo"] = request.memo;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.ruleId)) {
      query["ruleId"] = request.ruleId;
    }

    if (!Util.isUnset(request.ruleName)) {
      query["ruleName"] = request.ruleName;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UpdateRuleBase",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateRuleBaseResponse>(await this.callApi(params, req, runtime), new UpdateRuleBaseResponse({}));
  }

  /**
   * @summary 更新策略基础信息
   *
   * @param request UpdateRuleBaseRequest
   * @return UpdateRuleBaseResponse
   */
  async updateRuleBase(request: UpdateRuleBaseRequest): Promise<UpdateRuleBaseResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.updateRuleBaseWithOptions(request, runtime);
  }

  /**
   * @summary 批量修改样本
   *
   * @param request UpdateSampleBatchRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return UpdateSampleBatchResponse
   */
  async updateSampleBatchWithOptions(request: UpdateSampleBatchRequest, runtime: $Util.RuntimeOptions): Promise<UpdateSampleBatchResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!Util.isUnset(request.ids)) {
      query["ids"] = request.ids;
    }

    if (!Util.isUnset(request.regId)) {
      query["regId"] = request.regId;
    }

    if (!Util.isUnset(request.tags)) {
      query["tags"] = request.tags;
    }

    if (!Util.isUnset(request.versions)) {
      query["versions"] = request.versions;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UpdateSampleBatch",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UpdateSampleBatchResponse>(await this.callApi(params, req, runtime), new UpdateSampleBatchResponse({}));
  }

  /**
   * @summary 批量修改样本
   *
   * @param request UpdateSampleBatchRequest
   * @return UpdateSampleBatchResponse
   */
  async updateSampleBatch(request: UpdateSampleBatchRequest): Promise<UpdateSampleBatchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.updateSampleBatchWithOptions(request, runtime);
  }

  /**
   * @summary 单用户API创建样本
   *
   * @param request UploadSampleApiRequest
   * @param runtime runtime options for this request RuntimeOptions
   * @return UploadSampleApiResponse
   */
  async uploadSampleApiWithOptions(request: UploadSampleApiRequest, runtime: $Util.RuntimeOptions): Promise<UploadSampleApiResponse> {
    Util.validateModel(request);
    let query = { };
    if (!Util.isUnset(request.dataType)) {
      query["DataType"] = request.dataType;
    }

    if (!Util.isUnset(request.dataValue)) {
      query["DataValue"] = request.dataValue;
    }

    if (!Util.isUnset(request.sampleType)) {
      query["SampleType"] = request.sampleType;
    }

    if (!Util.isUnset(request.service)) {
      query["Service"] = request.service;
    }

    let req = new $OpenApi.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApi.Params({
      action: "UploadSampleApi",
      version: "2021-09-10",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $tea.cast<UploadSampleApiResponse>(await this.callApi(params, req, runtime), new UploadSampleApiResponse({}));
  }

  /**
   * @summary 单用户API创建样本
   *
   * @param request UploadSampleApiRequest
   * @return UploadSampleApiResponse
   */
  async uploadSampleApi(request: UploadSampleApiRequest): Promise<UploadSampleApiResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    return await this.uploadSampleApiWithOptions(request, runtime);
  }

}
