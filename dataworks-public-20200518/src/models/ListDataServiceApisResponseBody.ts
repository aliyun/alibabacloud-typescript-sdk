// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes extends $dara.Model {
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * 1001
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * fail to call
   */
  errorMessage?: string;
  /**
   * @remarks
   * The solution used to fix the error.
   * 
   * @example
   * retry
   */
  errorSolution?: string;
  static names(): { [key: string]: string } {
    return {
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      errorSolution: 'ErrorSolution',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCode: 'string',
      errorMessage: 'string',
      errorSolution: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters extends $dara.Model {
  /**
   * @remarks
   * The name of the associated field. This parameter is supported only if the API is generated in wizard mode.
   * 
   * @example
   * column1
   */
  columnName?: string;
  /**
   * @remarks
   * The default value.
   * 
   * @example
   * default1
   */
  defaultValue?: string;
  /**
   * @remarks
   * The sample value.
   * 
   * @example
   * example1
   */
  exampleValue?: string;
  /**
   * @remarks
   * Indicates whether the parameter is required.
   * 
   * @example
   * true
   */
  isRequiredParameter?: boolean;
  /**
   * @remarks
   * The data type of the parameter. Valid values:
   * 
   * *   0: String
   * *   1: Int
   * *   2: Long
   * *   3: Float
   * *   4: Double
   * *   5: Boolean
   * *   6: StringList
   * *   7: IntList
   * *   8: LongList
   * *   9: FloatList
   * *   10: DoubleList
   * *   11: BooleanList
   * 
   * @example
   * 0
   */
  parameterDataType?: number;
  /**
   * @remarks
   * The description.
   * 
   * @example
   * description1
   */
  parameterDescription?: string;
  /**
   * @remarks
   * The name of the parameter.
   * 
   * @example
   * name1
   */
  parameterName?: string;
  /**
   * @remarks
   * The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates the Equal operator. The value 1 indicates the Like operator. The value 2 indicates the Const operator. The value 3 indicates the In operator. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.
   * 
   * @example
   * 0
   */
  parameterOperator?: number;
  /**
   * @remarks
   * The position of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the parameter is in the URL path of the request. The value 1 indicates that the parameter is in the Query parameter of the request URL. The value 2 indicates that the parameter is in the request header. The value 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.
   * 
   * @example
   * 0
   */
  parameterPosition?: number;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      defaultValue: 'DefaultValue',
      exampleValue: 'ExampleValue',
      isRequiredParameter: 'IsRequiredParameter',
      parameterDataType: 'ParameterDataType',
      parameterDescription: 'ParameterDescription',
      parameterName: 'ParameterName',
      parameterOperator: 'ParameterOperator',
      parameterPosition: 'ParameterPosition',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      defaultValue: 'string',
      exampleValue: 'string',
      isRequiredParameter: 'boolean',
      parameterDataType: 'number',
      parameterDescription: 'string',
      parameterName: 'string',
      parameterOperator: 'number',
      parameterPosition: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataServiceApisResponseBodyDataApisRegistrationDetails extends $dara.Model {
  /**
   * @remarks
   * The sample error response of the API.
   * 
   * @example
   * {"success": false}
   */
  failedResultSample?: string;
  /**
   * @remarks
   * The error codes returned for the API generated by registration.
   */
  registrationErrorCodes?: ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes[];
  /**
   * @remarks
   * The request parameters of the API generated by registration.
   */
  registrationRequestParameters?: ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters[];
  /**
   * @remarks
   * The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.
   * 
   * @example
   * 0
   */
  serviceContentType?: number;
  /**
   * @remarks
   * The URL of the backend service.
   * 
   * @example
   * http://example.aliyundoc.com
   */
  serviceHost?: string;
  /**
   * @remarks
   * The path of the backend service.
   * 
   * @example
   * /index
   */
  servicePath?: string;
  /**
   * @remarks
   * The description of the request body initiated to call the backend service.
   * 
   * @example
   * {"abc":1}
   */
  serviceRequestBodyDescription?: string;
  /**
   * @remarks
   * The sample success response of the API.
   * 
   * @example
   * {"success": true}
   */
  successfulResultSample?: string;
  static names(): { [key: string]: string } {
    return {
      failedResultSample: 'FailedResultSample',
      registrationErrorCodes: 'RegistrationErrorCodes',
      registrationRequestParameters: 'RegistrationRequestParameters',
      serviceContentType: 'ServiceContentType',
      serviceHost: 'ServiceHost',
      servicePath: 'ServicePath',
      serviceRequestBodyDescription: 'ServiceRequestBodyDescription',
      successfulResultSample: 'SuccessfulResultSample',
    };
  }

  static types(): { [key: string]: any } {
    return {
      failedResultSample: 'string',
      registrationErrorCodes: { 'type': 'array', 'itemType': ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes },
      registrationRequestParameters: { 'type': 'array', 'itemType': ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters },
      serviceContentType: 'number',
      serviceHost: 'string',
      servicePath: 'string',
      serviceRequestBodyDescription: 'string',
      successfulResultSample: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.registrationErrorCodes)) {
      $dara.Model.validateArray(this.registrationErrorCodes);
    }
    if(Array.isArray(this.registrationRequestParameters)) {
      $dara.Model.validateArray(this.registrationRequestParameters);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataServiceApisResponseBodyDataApisScriptDetailsScriptConnection extends $dara.Model {
  /**
   * @remarks
   * The data source ID.
   * 
   * @example
   * 123
   */
  connectionId?: number;
  /**
   * @remarks
   * The name of the table in the data source.
   * 
   * @example
   * t
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      connectionId: 'ConnectionId',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      connectionId: 'number',
      tableName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters extends $dara.Model {
  /**
   * @remarks
   * The name of the associated field. This parameter is supported only if the API is generated in wizard mode.
   * 
   * @example
   * column1
   */
  columnName?: string;
  /**
   * @remarks
   * The default value.
   * 
   * @example
   * default1
   */
  defaultValue?: string;
  /**
   * @remarks
   * The sample value.
   * 
   * @example
   * example1
   */
  exampleValue?: string;
  /**
   * @remarks
   * Indicates whether the parameter is required.
   * 
   * @example
   * true
   */
  isRequiredParameter?: boolean;
  /**
   * @remarks
   * The data type of the parameter. Valid values:
   * 
   * *   0: String
   * *   1: Int
   * *   2: Long
   * *   3: Float
   * *   4: Double
   * *   5: Boolean
   * *   6: StringList
   * *   7: IntList
   * *   8: LongList
   * *   9: FloatList
   * *   10: DoubleList
   * *   11: BooleanList
   * 
   * @example
   * 0
   */
  parameterDataType?: number;
  /**
   * @remarks
   * The description.
   * 
   * @example
   * description1
   */
  parameterDescription?: string;
  /**
   * @remarks
   * The name of the parameter.
   * 
   * @example
   * param1
   */
  parameterName?: string;
  /**
   * @remarks
   * The operator used for the value of the parameter. Valid values:
   * 
   * *   0: Equal
   * *   1: Like
   * *   2: Const
   * *   3: In
   * 
   * APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.
   * 
   * @example
   * 0
   */
  parameterOperator?: number;
  /**
   * @remarks
   * The position of the parameter. Valid values:
   * 
   * *   0: indicates that the parameter is in the URL path of the request.
   * *   1: indicates that the parameter is in the Query parameter of the request URL.
   * *   2: indicates that the parameter is in the request header.
   * *   3: indicates that the parameter is in the request body.
   * 
   * APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.
   * 
   * @example
   * 0
   */
  parameterPosition?: number;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      defaultValue: 'DefaultValue',
      exampleValue: 'ExampleValue',
      isRequiredParameter: 'IsRequiredParameter',
      parameterDataType: 'ParameterDataType',
      parameterDescription: 'ParameterDescription',
      parameterName: 'ParameterName',
      parameterOperator: 'ParameterOperator',
      parameterPosition: 'ParameterPosition',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      defaultValue: 'string',
      exampleValue: 'string',
      isRequiredParameter: 'boolean',
      parameterDataType: 'number',
      parameterDescription: 'string',
      parameterName: 'string',
      parameterOperator: 'number',
      parameterPosition: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters extends $dara.Model {
  /**
   * @remarks
   * The name of the associated field. This parameter is supported only if the API is generated in wizard mode.
   * 
   * @example
   * column2
   */
  columnName?: string;
  /**
   * @remarks
   * The sample value.
   * 
   * @example
   * example2
   */
  exampleValue?: string;
  /**
   * @remarks
   * The data type of the parameter. Valid values:
   * 
   * *   0: String
   * *   1: Int
   * *   2: Long
   * *   3: Float
   * *   4: Double
   * *   5: Boolean
   * *   6: StringList
   * *   7: IntList
   * *   8: LongList
   * *   9: FloatList
   * *   10: DoubleList
   * *   11: BooleanList
   * 
   * @example
   * 0
   */
  parameterDataType?: number;
  /**
   * @remarks
   * The description.
   * 
   * @example
   * description2
   */
  parameterDescription?: string;
  /**
   * @remarks
   * The name of the parameter.
   * 
   * @example
   * param2
   */
  parameterName?: string;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      exampleValue: 'ExampleValue',
      parameterDataType: 'ParameterDataType',
      parameterDescription: 'ParameterDescription',
      parameterName: 'ParameterName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      exampleValue: 'string',
      parameterDataType: 'number',
      parameterDescription: 'string',
      parameterName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataServiceApisResponseBodyDataApisScriptDetails extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the entries are returned by page.
   * 
   * @example
   * true
   */
  isPagedResponse?: boolean;
  /**
   * @remarks
   * The SQL script.
   * 
   * @example
   * select a from t
   */
  script?: string;
  /**
   * @remarks
   * The data source information about the API generated in script mode.
   */
  scriptConnection?: ListDataServiceApisResponseBodyDataApisScriptDetailsScriptConnection;
  /**
   * @remarks
   * The request parameters of the API generated in script mode.
   */
  scriptRequestParameters?: ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters[];
  /**
   * @remarks
   * The response parameters of the API generated in script mode.
   */
  scriptResponseParameters?: ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters[];
  static names(): { [key: string]: string } {
    return {
      isPagedResponse: 'IsPagedResponse',
      script: 'Script',
      scriptConnection: 'ScriptConnection',
      scriptRequestParameters: 'ScriptRequestParameters',
      scriptResponseParameters: 'ScriptResponseParameters',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isPagedResponse: 'boolean',
      script: 'string',
      scriptConnection: ListDataServiceApisResponseBodyDataApisScriptDetailsScriptConnection,
      scriptRequestParameters: { 'type': 'array', 'itemType': ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters },
      scriptResponseParameters: { 'type': 'array', 'itemType': ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters },
    };
  }

  validate() {
    if(this.scriptConnection && typeof (this.scriptConnection as any).validate === 'function') {
      (this.scriptConnection as any).validate();
    }
    if(Array.isArray(this.scriptRequestParameters)) {
      $dara.Model.validateArray(this.scriptRequestParameters);
    }
    if(Array.isArray(this.scriptResponseParameters)) {
      $dara.Model.validateArray(this.scriptResponseParameters);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataServiceApisResponseBodyDataApisWizardDetailsWizardConnection extends $dara.Model {
  /**
   * @remarks
   * The data source ID.
   * 
   * @example
   * 123
   */
  connectionId?: number;
  /**
   * @remarks
   * The name of the table in the data source.
   * 
   * @example
   * t
   */
  tableName?: string;
  static names(): { [key: string]: string } {
    return {
      connectionId: 'ConnectionId',
      tableName: 'TableName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      connectionId: 'number',
      tableName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters extends $dara.Model {
  /**
   * @remarks
   * The name of the associated field. This parameter is supported only if the API is generated in wizard mode.
   * 
   * @example
   * column1
   */
  columnName?: string;
  /**
   * @remarks
   * The default value.
   * 
   * @example
   * default1
   */
  defaultValue?: string;
  /**
   * @remarks
   * The sample value.
   * 
   * @example
   * example1
   */
  exampleValue?: string;
  /**
   * @remarks
   * Indicates whether the parameter is required.
   * 
   * @example
   * true
   */
  isRequiredParameter?: boolean;
  /**
   * @remarks
   * The data type of the parameter. Valid values:
   * 
   * *   0: String
   * *   1: Int
   * *   2: Long
   * *   3: Float
   * *   4: Double
   * *   5: Boolean
   * *   6: StringList
   * *   7: IntList
   * *   8: LongList
   * *   9: FloatList
   * *   10: DoubleList
   * *   11: BooleanList
   * 
   * @example
   * 0
   */
  parameterDataType?: number;
  /**
   * @remarks
   * The description.
   * 
   * @example
   * description1
   */
  parameterDescription?: string;
  /**
   * @remarks
   * The name of the parameter.
   * 
   * @example
   * param1
   */
  parameterName?: string;
  /**
   * @remarks
   * The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates the Equal operator. The value 1 indicates the Like operator. The value 2 indicates the Const operator. The value 3 indicates the In operator. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.
   * 
   * @example
   * 0
   */
  parameterOperator?: number;
  /**
   * @remarks
   * The position of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the parameter is in the URL path of the request. The value 1 indicates that the parameter is in the Query parameter of the request URL. The value 2 indicates that the parameter is in the request header. The value 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.
   * 
   * @example
   * 0
   */
  parameterPosition?: number;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      defaultValue: 'DefaultValue',
      exampleValue: 'ExampleValue',
      isRequiredParameter: 'IsRequiredParameter',
      parameterDataType: 'ParameterDataType',
      parameterDescription: 'ParameterDescription',
      parameterName: 'ParameterName',
      parameterOperator: 'ParameterOperator',
      parameterPosition: 'ParameterPosition',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      defaultValue: 'string',
      exampleValue: 'string',
      isRequiredParameter: 'boolean',
      parameterDataType: 'number',
      parameterDescription: 'string',
      parameterName: 'string',
      parameterOperator: 'number',
      parameterPosition: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters extends $dara.Model {
  /**
   * @remarks
   * The name of the associated field. This parameter is supported only if the API is generated in wizard mode.
   * 
   * @example
   * column2
   */
  columnName?: string;
  /**
   * @remarks
   * The sample value.
   * 
   * @example
   * example2
   */
  exampleValue?: string;
  /**
   * @remarks
   * The data type of the parameter. Valid values:
   * 
   * *   0: String
   * *   1: Int
   * *   2: Long
   * *   3: Float
   * *   4: Double
   * *   5: Boolean
   * *   6: StringList
   * *   7: IntList
   * *   8: LongList
   * *   9: FloatList
   * *   10: DoubleList
   * *   11: BooleanList
   * 
   * @example
   * 0
   */
  parameterDataType?: number;
  /**
   * @remarks
   * The description.
   * 
   * @example
   * description2
   */
  parameterDescription?: string;
  /**
   * @remarks
   * The name of the parameter.
   * 
   * @example
   * param2
   */
  parameterName?: string;
  static names(): { [key: string]: string } {
    return {
      columnName: 'ColumnName',
      exampleValue: 'ExampleValue',
      parameterDataType: 'ParameterDataType',
      parameterDescription: 'ParameterDescription',
      parameterName: 'ParameterName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      columnName: 'string',
      exampleValue: 'string',
      parameterDataType: 'number',
      parameterDescription: 'string',
      parameterName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataServiceApisResponseBodyDataApisWizardDetails extends $dara.Model {
  /**
   * @remarks
   * Indicates whether the entries are returned by page.
   * 
   * @example
   * true
   */
  isPagedResponse?: boolean;
  /**
   * @remarks
   * The data source information about the API generated in wizard mode.
   */
  wizardConnection?: ListDataServiceApisResponseBodyDataApisWizardDetailsWizardConnection;
  /**
   * @remarks
   * The request parameters of the API generated in wizard mode.
   */
  wizardRequestParameters?: ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters[];
  /**
   * @remarks
   * The response parameters of the API generated in wizard mode.
   */
  wizardResponseParameters?: ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters[];
  static names(): { [key: string]: string } {
    return {
      isPagedResponse: 'IsPagedResponse',
      wizardConnection: 'WizardConnection',
      wizardRequestParameters: 'WizardRequestParameters',
      wizardResponseParameters: 'WizardResponseParameters',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isPagedResponse: 'boolean',
      wizardConnection: ListDataServiceApisResponseBodyDataApisWizardDetailsWizardConnection,
      wizardRequestParameters: { 'type': 'array', 'itemType': ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters },
      wizardResponseParameters: { 'type': 'array', 'itemType': ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters },
    };
  }

  validate() {
    if(this.wizardConnection && typeof (this.wizardConnection as any).validate === 'function') {
      (this.wizardConnection as any).validate();
    }
    if(Array.isArray(this.wizardRequestParameters)) {
      $dara.Model.validateArray(this.wizardRequestParameters);
    }
    if(Array.isArray(this.wizardResponseParameters)) {
      $dara.Model.validateArray(this.wizardResponseParameters);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataServiceApisResponseBodyDataApis extends $dara.Model {
  /**
   * @remarks
   * The API ID.
   * 
   * @example
   * 10002
   */
  apiId?: number;
  /**
   * @remarks
   * The type of the API. Valid values: 0, 1, and 2. The value 0 indicates that the API is generated in wizard mode. The value 1 indicates that the API is generated in script mode. The value 2 indicates that the API is generated by registration.
   * 
   * @example
   * 0
   */
  apiMode?: number;
  /**
   * @remarks
   * The name of the API.
   * 
   * @example
   * My API name
   */
  apiName?: string;
  /**
   * @remarks
   * The path of the API.
   * 
   * @example
   * /test/1
   */
  apiPath?: string;
  /**
   * @remarks
   * The time when the API was created.
   * 
   * @example
   * 2020-06-23T00:21:01+0800
   */
  createdTime?: string;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account used by the creator of the API.
   * 
   * @example
   * 1234567
   */
  creatorId?: string;
  /**
   * @remarks
   * The description of the API.
   * 
   * @example
   * Test API description
   */
  description?: string;
  /**
   * @remarks
   * The folder ID.
   * 
   * @example
   * 0
   */
  folderId?: number;
  /**
   * @remarks
   * The group ID.
   * 
   * @example
   * abcde123456789
   */
  groupId?: string;
  /**
   * @remarks
   * The time when the API was last modified.
   * 
   * @example
   * 2020-06-23T00:21:01+0800
   */
  modifiedTime?: string;
  /**
   * @remarks
   * The ID of the Alibaba Cloud account used by the user who last modified the API.
   * 
   * @example
   * 2345678
   */
  operatorId?: string;
  /**
   * @remarks
   * The workspace ID.
   * 
   * @example
   * 10000
   */
  projectId?: number;
  /**
   * @remarks
   * The list of fields.
   */
  protocols?: number[];
  /**
   * @remarks
   * The details of the API generated by registration. This parameter is returned only if the API is generated by registration.
   */
  registrationDetails?: ListDataServiceApisResponseBodyDataApisRegistrationDetails;
  /**
   * @remarks
   * The request method of the API. Valid values: 0, 1, 2, and 3. The value 0 indicates the GET method. The value 1 indicates the POST method. The value 2 indicates the PUT method. The value 3 indicates the DELETE method. APIs generated in wizard or script mode support the GET and POST methods. APIs generated by registration support the GET, POST, PUT, and DELETE methods.
   * 
   * @example
   * 0
   */
  requestMethod?: number;
  /**
   * @remarks
   * The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.
   * 
   * @example
   * 0
   */
  responseContentType?: number;
  /**
   * @remarks
   * The details of the API generated in script mode. This parameter is returned only if the API is generated in script mode.
   */
  scriptDetails?: ListDataServiceApisResponseBodyDataApisScriptDetails;
  /**
   * @remarks
   * The status of the API. Valid values: 0 and 1. The value 0 indicates that the API is not published. The value 1 indicates that the API is published.
   * 
   * @example
   * 0
   */
  status?: number;
  /**
   * @remarks
   * The tenant ID.
   * 
   * @example
   * 10000
   */
  tenantId?: number;
  /**
   * @remarks
   * The timeout period of the API request. Unit: milliseconds.
   * 
   * @example
   * 10000
   */
  timeout?: number;
  /**
   * @remarks
   * The scope in which the API is visible. Valid values: 0 and 1. The value 0 indicates that the API is visible within the workspace. The value 1 indicates that the API is visible only to its owner.
   * 
   * @example
   * 0
   */
  visibleRange?: number;
  /**
   * @remarks
   * The details of the API generated in wizard mode. This parameter is returned only if the API is generated in wizard mode.
   */
  wizardDetails?: ListDataServiceApisResponseBodyDataApisWizardDetails;
  static names(): { [key: string]: string } {
    return {
      apiId: 'ApiId',
      apiMode: 'ApiMode',
      apiName: 'ApiName',
      apiPath: 'ApiPath',
      createdTime: 'CreatedTime',
      creatorId: 'CreatorId',
      description: 'Description',
      folderId: 'FolderId',
      groupId: 'GroupId',
      modifiedTime: 'ModifiedTime',
      operatorId: 'OperatorId',
      projectId: 'ProjectId',
      protocols: 'Protocols',
      registrationDetails: 'RegistrationDetails',
      requestMethod: 'RequestMethod',
      responseContentType: 'ResponseContentType',
      scriptDetails: 'ScriptDetails',
      status: 'Status',
      tenantId: 'TenantId',
      timeout: 'Timeout',
      visibleRange: 'VisibleRange',
      wizardDetails: 'WizardDetails',
    };
  }

  static types(): { [key: string]: any } {
    return {
      apiId: 'number',
      apiMode: 'number',
      apiName: 'string',
      apiPath: 'string',
      createdTime: 'string',
      creatorId: 'string',
      description: 'string',
      folderId: 'number',
      groupId: 'string',
      modifiedTime: 'string',
      operatorId: 'string',
      projectId: 'number',
      protocols: { 'type': 'array', 'itemType': 'number' },
      registrationDetails: ListDataServiceApisResponseBodyDataApisRegistrationDetails,
      requestMethod: 'number',
      responseContentType: 'number',
      scriptDetails: ListDataServiceApisResponseBodyDataApisScriptDetails,
      status: 'number',
      tenantId: 'number',
      timeout: 'number',
      visibleRange: 'number',
      wizardDetails: ListDataServiceApisResponseBodyDataApisWizardDetails,
    };
  }

  validate() {
    if(Array.isArray(this.protocols)) {
      $dara.Model.validateArray(this.protocols);
    }
    if(this.registrationDetails && typeof (this.registrationDetails as any).validate === 'function') {
      (this.registrationDetails as any).validate();
    }
    if(this.scriptDetails && typeof (this.scriptDetails as any).validate === 'function') {
      (this.scriptDetails as any).validate();
    }
    if(this.wizardDetails && typeof (this.wizardDetails as any).validate === 'function') {
      (this.wizardDetails as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataServiceApisResponseBodyData extends $dara.Model {
  /**
   * @remarks
   * The list of APIs in the development state.
   */
  apis?: ListDataServiceApisResponseBodyDataApis[];
  /**
   * @remarks
   * The page number. The value of this parameter is the same as that of the PageNumber parameter in the request.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries per page. Valid values: 1 to 50. Default value: 10.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 100
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      apis: 'Apis',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      apis: { 'type': 'array', 'itemType': ListDataServiceApisResponseBodyDataApis },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.apis)) {
      $dara.Model.validateArray(this.apis);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataServiceApisResponseBody extends $dara.Model {
  /**
   * @remarks
   * The data returned.
   */
  data?: ListDataServiceApisResponseBodyData;
  /**
   * @remarks
   * The error code.
   * 
   * @example
   * Invalid.Tenant.ConnectionNotExists
   */
  errorCode?: string;
  /**
   * @remarks
   * The error message.
   * 
   * @example
   * The connection does not exist.
   */
  errorMessage?: string;
  /**
   * @remarks
   * The HTTP status code.
   * 
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 0000-ABCD-EFG****
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      errorCode: 'ErrorCode',
      errorMessage: 'ErrorMessage',
      httpStatusCode: 'HttpStatusCode',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: ListDataServiceApisResponseBodyData,
      errorCode: 'string',
      errorMessage: 'string',
      httpStatusCode: 'number',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

