// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class UpdateUdfFileRequest extends $dara.Model {
  /**
   * @remarks
   * The name of the class in which the function is defined. This parameter corresponds to the Class Name parameter in the Register Function section of the configuration tab of the function in the DataWorks console.
   * 
   * This parameter is required.
   * 
   * @example
   * com.alibaba.DataWorks.api.udf.StringConcat
   */
  className?: string;
  /**
   * @remarks
   * The syntax used for calling the function. This parameter corresponds to the Expression Syntax parameter in the Register Function section of the configuration tab of the function in the DataWorks console.
   * 
   * @example
   * StringConcat(String... substrs)
   */
  cmdDescription?: string;
  /**
   * @remarks
   * The example for calling the function. This parameter corresponds to the Example parameter in the Register Function section of the configuration tab of the function in the DataWorks console.
   * 
   * @example
   * StringConcat(\\"a\\", \\"b\\", \\"c\\")
   */
  example?: string;
  /**
   * @remarks
   * The path of the folder in which the function file is stored.
   * 
   * @example
   * Business_process/First_Business_Process/function/string_processing_function
   */
  fileFolderPath?: string;
  /**
   * @remarks
   * The file ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 10000001
   */
  fileId?: string;
  /**
   * @remarks
   * The type of the function. Valid values: MATH, AGGREGATE, STRING, DATE, ANALYTIC, and OTHER. This parameter corresponds to the Function Type parameter in the Register Function section of the configuration tab of the function on the DataStudio page.
   * 
   * This parameter is required.
   * 
   * @example
   * STRING
   */
  functionType?: string;
  /**
   * @remarks
   * The description of the input parameters of the function. This parameter corresponds to the Parameter Description parameter in the Register Function section of the configuration tab of the function on the DataStudio page.
   * 
   * Valid values:
   * 
   * *   ALL_ALLOWD
   * *   FAILURE_ALLOWED
   * *   ALL_DENIED
   * 
   * @example
   * List of strings to be connected
   */
  parameterDescription?: string;
  /**
   * @remarks
   * The ID of the DataWorks workspace. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace Management page and view the workspace ID.
   * 
   * @example
   * 10000
   */
  projectId?: number;
  /**
   * @remarks
   * The unique identifier of the DataWorks workspace. You can click the identifier in the upper-left corner of the DataStudio page to switch to another workspace.
   * 
   * You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.
   * 
   * @example
   * dw_project
   */
  projectIdentifier?: string;
  /**
   * @remarks
   * The names of the resources that are referenced by the function. This parameter corresponds to the Resources parameter in the Register Function section of the configuration tab of the function in the DataWorks console. Separate multiple resource names with commas (,).
   * 
   * This parameter is required.
   * 
   * @example
   * string-concat-1.0.0.jar,commons-lang-2.6.jar
   */
  resources?: string;
  /**
   * @remarks
   * The description of the return value of the function. This parameter corresponds to the Return Value parameter in the Register Function section of the configuration tab of the function on the DataStudio page.
   * 
   * @example
   * New strings generated by concatenating all strings before and after the input order
   */
  returnValue?: string;
  /**
   * @remarks
   * The description of the function. This parameter corresponds to the Description parameter in the Register Function section of the configuration tab of the function on the DataStudio page.
   * 
   * @example
   * Concatenate several strings to generate a new string
   */
  udfDescription?: string;
  static names(): { [key: string]: string } {
    return {
      className: 'ClassName',
      cmdDescription: 'CmdDescription',
      example: 'Example',
      fileFolderPath: 'FileFolderPath',
      fileId: 'FileId',
      functionType: 'FunctionType',
      parameterDescription: 'ParameterDescription',
      projectId: 'ProjectId',
      projectIdentifier: 'ProjectIdentifier',
      resources: 'Resources',
      returnValue: 'ReturnValue',
      udfDescription: 'UdfDescription',
    };
  }

  static types(): { [key: string]: any } {
    return {
      className: 'string',
      cmdDescription: 'string',
      example: 'string',
      fileFolderPath: 'string',
      fileId: 'string',
      functionType: 'string',
      parameterDescription: 'string',
      projectId: 'number',
      projectIdentifier: 'string',
      resources: 'string',
      returnValue: 'string',
      udfDescription: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

