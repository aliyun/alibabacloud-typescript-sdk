// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class SaveDataServiceApiTestResultRequest extends $dara.Model {
  /**
   * @remarks
   * The API ID. You can call the [ListDataServiceApis](https://help.aliyun.com/document_detail/174012.html) operation to obtain the ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 417381955954827
   */
  apiId?: number;
  /**
   * @remarks
   * Specifies whether to use the test results generated by the system. If you do not configure the resultSample or failResultSample parameter, the test results generated by the system are used.
   * 
   * @example
   * false
   */
  autoGenerate?: boolean;
  /**
   * @remarks
   * The sample failure response of the API. This parameter is optional.
   * 
   * @example
   * {"apiLog": null, "data": null, "errCode": 1108110622, "errMsg": "data Source query failed", "requestId": "0 bc14a **** 5902762031 ****"}
   */
  failResultSample?: string;
  /**
   * @remarks
   * The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.
   * 
   * This parameter is required.
   * 
   * @example
   * 10001
   */
  projectId?: number;
  /**
   * @remarks
   * The sample success response of the API. This parameter is optional.
   * 
   * @example
   * {  "data": {    "totalNum": 0,    "pageSize": 10,    "rows": [],    "pageNum": 1  },  "errCode": 0,  "requestId": "0bc14a561678159140664515*****",  "errMsg": "success",  "apiLog": null}
   */
  resultSample?: string;
  static names(): { [key: string]: string } {
    return {
      apiId: 'ApiId',
      autoGenerate: 'AutoGenerate',
      failResultSample: 'FailResultSample',
      projectId: 'ProjectId',
      resultSample: 'ResultSample',
    };
  }

  static types(): { [key: string]: any } {
    return {
      apiId: 'number',
      autoGenerate: 'boolean',
      failResultSample: 'string',
      projectId: 'number',
      resultSample: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

