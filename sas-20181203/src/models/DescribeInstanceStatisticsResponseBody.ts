// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DescribeInstanceStatisticsResponseBodyData extends $dara.Model {
  /**
   * @remarks
   * The number of unusual logons to the asset.
   * 
   * @example
   * 0
   */
  account?: number;
  /**
   * @remarks
   * The number of alerts generated by the agentless detection feature.
   * 
   * @example
   * 13
   */
  agentlessAll?: number;
  /**
   * @remarks
   * The number of baseline risks detected by the agentless detection feature.
   * 
   * @example
   * 2
   */
  agentlessBaseline?: number;
  /**
   * @remarks
   * The number of malicious samples detected by the agentless detection feature.
   * 
   * @example
   * 3
   */
  agentlessMalicious?: number;
  /**
   * @remarks
   * The number of sensitive file alerts generated by the agentless detection feature.
   * 
   * @example
   * 1
   */
  agentlessSensitiveFile?: number;
  /**
   * @remarks
   * The number of system vulnerabilities detected by the agentless detection feature.
   * 
   * @example
   * 1
   */
  agentlessVulCve?: number;
  /**
   * @remarks
   * The number of application vulnerabilities detected by the agentless detection feature.
   * 
   * @example
   * 1
   */
  agentlessVulSca?: number;
  /**
   * @remarks
   * The number of Windows vulnerabilities detected by using agentless detection.
   * 
   * @example
   * 1
   */
  agentlessVulSys?: number;
  /**
   * @remarks
   * The number of application vulnerabilities detected on the asset.
   * 
   * @example
   * 1
   */
  appNum?: number;
  /**
   * @remarks
   * The number of Web-CMS vulnerabilities detected on the asset.
   * 
   * @example
   * 5
   */
  cmsNum?: number;
  /**
   * @remarks
   * Number of high-risk CSPM issues in the system
   * 
   * @example
   * 1
   */
  cspmHighRiskNum?: string;
  /**
   * @remarks
   * The number of configuration risks detected on the asset.
   * 
   * @example
   * 1
   */
  cspmNum?: number;
  /**
   * @remarks
   * The number of common vulnerabilities detected on the asset.
   * 
   * @example
   * 1
   */
  cveNum?: number;
  /**
   * @remarks
   * The number of urgent vulnerabilities detected on the asset.
   * 
   * @example
   * 6
   */
  emgNum?: number;
  /**
   * @remarks
   * The number of baseline risks detected on the asset.
   * 
   * @example
   * 2
   */
  health?: number;
  /**
   * @remarks
   * Number of security alerts for asset existence reminders.
   * 
   * @example
   * 1
   */
  remindSuspiciousNum?: string;
  /**
   * @remarks
   * The number of middleware vulnerabilities detected on the asset.
   * 
   * @example
   * 1
   */
  scaNum?: number;
  /**
   * @remarks
   * Number of high-risk security alerts for the asset.
   * 
   * @example
   * 2
   */
  seriousSuspiciousNum?: string;
  /**
   * @remarks
   * Number of suspicious security alerts for the asset.
   * 
   * @example
   * 1
   */
  suspectSuspiciousNum?: string;
  /**
   * @remarks
   * The number of alerts generated for the asset.
   * 
   * @example
   * 2
   */
  suspicious?: number;
  /**
   * @remarks
   * Number of system vulnerabilities in the asset.
   * 
   * @example
   * 1
   */
  sysAsapVulCount?: string;
  /**
   * @remarks
   * The number of Windows system vulnerabilities detected on the asset.
   * 
   * @example
   * 3
   */
  sysNum?: number;
  /**
   * @remarks
   * The number of trojans detected on the asset.
   * 
   * @example
   * 1
   */
  trojan?: number;
  /**
   * @remarks
   * The UUID of the asset.
   * 
   * @example
   * 6690a46c-0edb-4663-a641-3629d1a9****
   */
  uuid?: string;
  /**
   * @remarks
   * The total number of vulnerabilities detected on the asset.
   * 
   * @example
   * 17
   */
  vul?: number;
  /**
   * @remarks
   * The number of weak passwords.
   * 
   * @example
   * 22
   */
  weakPWNum?: number;
  static names(): { [key: string]: string } {
    return {
      account: 'Account',
      agentlessAll: 'AgentlessAll',
      agentlessBaseline: 'AgentlessBaseline',
      agentlessMalicious: 'AgentlessMalicious',
      agentlessSensitiveFile: 'AgentlessSensitiveFile',
      agentlessVulCve: 'AgentlessVulCve',
      agentlessVulSca: 'AgentlessVulSca',
      agentlessVulSys: 'AgentlessVulSys',
      appNum: 'AppNum',
      cmsNum: 'CmsNum',
      cspmHighRiskNum: 'CspmHighRiskNum',
      cspmNum: 'CspmNum',
      cveNum: 'CveNum',
      emgNum: 'EmgNum',
      health: 'Health',
      remindSuspiciousNum: 'RemindSuspiciousNum',
      scaNum: 'ScaNum',
      seriousSuspiciousNum: 'SeriousSuspiciousNum',
      suspectSuspiciousNum: 'SuspectSuspiciousNum',
      suspicious: 'Suspicious',
      sysAsapVulCount: 'SysAsapVulCount',
      sysNum: 'SysNum',
      trojan: 'Trojan',
      uuid: 'Uuid',
      vul: 'Vul',
      weakPWNum: 'WeakPWNum',
    };
  }

  static types(): { [key: string]: any } {
    return {
      account: 'number',
      agentlessAll: 'number',
      agentlessBaseline: 'number',
      agentlessMalicious: 'number',
      agentlessSensitiveFile: 'number',
      agentlessVulCve: 'number',
      agentlessVulSca: 'number',
      agentlessVulSys: 'number',
      appNum: 'number',
      cmsNum: 'number',
      cspmHighRiskNum: 'string',
      cspmNum: 'number',
      cveNum: 'number',
      emgNum: 'number',
      health: 'number',
      remindSuspiciousNum: 'string',
      scaNum: 'number',
      seriousSuspiciousNum: 'string',
      suspectSuspiciousNum: 'string',
      suspicious: 'number',
      sysAsapVulCount: 'string',
      sysNum: 'number',
      trojan: 'number',
      uuid: 'string',
      vul: 'number',
      weakPWNum: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInstanceStatisticsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The risk information about assets.
   */
  data?: DescribeInstanceStatisticsResponseBodyData[];
  /**
   * @remarks
   * The ID of the request, which is used to locate and troubleshoot issues.
   * 
   * @example
   * 8F035A9D-D19F-5430-8CA5-1497991B7C61
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: { 'type': 'array', 'itemType': DescribeInstanceStatisticsResponseBodyData },
      requestId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.data)) {
      $dara.Model.validateArray(this.data);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

