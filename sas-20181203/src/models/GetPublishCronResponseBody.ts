// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class GetPublishCronResponseBodyData extends $dara.Model {
  /**
   * @remarks
   * Cron expression for the start time of the upgrade.
   * 
   * @example
   * 0 0 7 * * ?
   */
  cron?: string;
  /**
   * @remarks
   * The day of the week for the upgrade. The values are as follows:
   * - **MON**: Monday
   * - **TUE**: Tuesday
   * - **WED**: Wednesday
   * - **THU**: Thursday
   * - **FRI**: Friday
   * - **SAT**: Saturday
   * - **SUN**: Sunday
   * 
   * @example
   * MON
   */
  cronDay?: string;
  /**
   * @remarks
   * Timestamp for the start of the publish, in milliseconds.
   * 
   * @example
   * 1724522400000
   */
  cronTime?: number;
  /**
   * @remarks
   * Upgrade start cycle type. The values are as follows:
   * - **day**: Daily
   * - **week**: Weekly
   * 
   * @example
   * day
   */
  cronType?: string;
  /**
   * @remarks
   * Duration of the upgrade in hours.
   * 
   * @example
   * 24
   */
  duration?: number;
  static names(): { [key: string]: string } {
    return {
      cron: 'Cron',
      cronDay: 'CronDay',
      cronTime: 'CronTime',
      cronType: 'CronType',
      duration: 'Duration',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cron: 'string',
      cronDay: 'string',
      cronTime: 'number',
      cronType: 'string',
      duration: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetPublishCronResponseBody extends $dara.Model {
  /**
   * @remarks
   * Publish scheduling configuration information.
   */
  data?: GetPublishCronResponseBodyData;
  /**
   * @remarks
   * The ID of this request, which is a unique identifier generated by Alibaba Cloud for the request and can be used to troubleshoot and locate issues.
   * 
   * @example
   * 30CBF632-109F-596F-97F2-451C8B2A****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      data: 'Data',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: GetPublishCronResponseBodyData,
      requestId: 'string',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

