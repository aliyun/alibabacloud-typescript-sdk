// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class ListTargetByBatchResponseBodyPageInfo extends $dara.Model {
  /**
   * @remarks
   * The page number of the current page in a paginated query.
   * 
   * @example
   * 1
   */
  currentPage?: number;
  /**
   * @remarks
   * The maximum number of items to return per page in a paginated query.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of items found in the query.
   * 
   * @example
   * 30
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      currentPage: 'CurrentPage',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentPage: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTargetByBatchResponseBody extends $dara.Model {
  /**
   * @remarks
   * Pagination information.
   */
  pageInfo?: ListTargetByBatchResponseBodyPageInfo;
  /**
   * @remarks
   * The ID of the request, which is a unique identifier generated by Alibaba Cloud for this request and can be used for troubleshooting and problem localization.
   * 
   * @example
   * 6EBB8614-746D-555D-AB69-C801AEC7DCE0
   */
  requestId?: string;
  /**
   * @remarks
   * The returned list.
   */
  targetList?: string[];
  static names(): { [key: string]: string } {
    return {
      pageInfo: 'PageInfo',
      requestId: 'RequestId',
      targetList: 'TargetList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageInfo: ListTargetByBatchResponseBodyPageInfo,
      requestId: 'string',
      targetList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(this.pageInfo && typeof (this.pageInfo as any).validate === 'function') {
      (this.pageInfo as any).validate();
    }
    if(Array.isArray(this.targetList)) {
      $dara.Model.validateArray(this.targetList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

