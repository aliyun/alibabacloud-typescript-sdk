// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DescribeSnapshotsResponseBodyPageInfo extends $dara.Model {
  /**
   * @remarks
   * The number of entries returned on the current page.
   * 
   * @example
   * 20
   */
  count?: number;
  /**
   * @remarks
   * The page number of the returned page.
   * 
   * @example
   * 1
   */
  currentPage?: number;
  /**
   * @remarks
   * The token that is used to initiate the next call.
   * 
   * @example
   * CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAGYXFWIAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM1Mzc3Njc4MzA2ODY5NmI2YTY1Nzg2NTcxNjE2NDc4****
   */
  nextToken?: string;
  /**
   * @remarks
   * The number of entries returned per page.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * The total number of entries returned.
   * 
   * @example
   * 149
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      count: 'Count',
      currentPage: 'CurrentPage',
      nextToken: 'NextToken',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: 'number',
      currentPage: 'number',
      nextToken: 'string',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSnapshotsResponseBodySnapshots extends $dara.Model {
  /**
   * @remarks
   * The actual data amount of backup snapshots after duplicates are removed. Unit: bytes.
   * 
   * @example
   * 686188****
   */
  actualBytes?: number;
  /**
   * @remarks
   * The actual number of backup objects.
   * 
   * >  This parameter is available only for file backup.
   * 
   * @example
   * 123
   */
  actualItems?: number;
  /**
   * @remarks
   * The actual amount of data that is generated by incremental backup. Unit: bytes.
   * 
   * @example
   * 800
   */
  bytesDone?: number;
  /**
   * @remarks
   * The total data amount of the data source. Unit: bytes.
   * 
   * @example
   * 3484541815****
   */
  bytesTotal?: number;
  /**
   * @remarks
   * This parameter is returned only if the value of the **SourceType** parameter is **ECS_FILE**. This parameter indicates the ID of the Hybrid Backup Recovery (HBR) agent.
   * 
   * @example
   * c-000dbefaw9f7gnbw****
   */
  clientId?: string;
  /**
   * @remarks
   * The version of the anti-ransomware agent.
   * 
   * @example
   * 2.10.0
   */
  clientVersion?: string;
  /**
   * @remarks
   * The time when the backup snapshot was created. The value is a UNIX timestamp. Unit: seconds.
   * 
   * @example
   * 1646793988
   */
  createdTime?: number;
  /**
   * @remarks
   * The file that records the information about backup failures, including the information about partially completed backup tasks.
   * 
   * @example
   * s-0008ndhgrflh55i5****.csv
   */
  errorFile?: string;
  /**
   * @remarks
   * The ID of the ECS instance.
   * 
   * @example
   * i-2ze78zfakirgh1yl****
   */
  instanceId?: string;
  /**
   * @remarks
   * The number of backup objects.
   * 
   * >  This parameter is available only for file backup.
   * 
   * @example
   * 6
   */
  itemsDone?: number;
  /**
   * @remarks
   * The total number of objects in the data source.
   * 
   * >  This parameter is available only for file backup.
   * 
   * @example
   * 7
   */
  itemsTotal?: number;
  /**
   * @remarks
   * The ID of the backup task.
   * 
   * @example
   * job-000a2q5vg6awgo01****
   */
  jobId?: string;
  /**
   * @remarks
   * The hash value of the parent backup snapshot.
   * 
   * @example
   * a0181606689c9562f092b3190bddb8a62bb5a24784424ba2102bc7fe92ae****
   */
  parentSnapshotHash?: string;
  /**
   * @remarks
   * This parameter is returned only if the value of the **SourceType** parameter is **ECS_FILE**. This parameter indicates the path to the backup files.
   * 
   * @example
   * ["/home"]
   */
  path?: string;
  /**
   * @remarks
   * This parameter is returned only if the value of the **SourceType** parameter is **NAS**. This parameter indicates the path to the backup files.
   */
  paths?: string[];
  /**
   * @remarks
   * The ID of the backup plan.
   * 
   * @example
   * plan-000ee8gh2ljelsnb****
   */
  planId?: string;
  /**
   * @remarks
   * The ID of the region in which backup snapshot is stored.
   * 
   * @example
   * us-east-1
   */
  regionId?: string;
  /**
   * @remarks
   * The retention period of the backup snapshot.
   * 
   * @example
   * 7
   */
  retention?: number;
  /**
   * @remarks
   * The hash value of the backup snapshot.
   * 
   * @example
   * 9ee47cf12351e4ddecce8c12f4957d3946cd96fbe24cd4ab264c7200839d****
   */
  snapshotHash?: string;
  /**
   * @remarks
   * The ID of the backup snapshot.
   * 
   * @example
   * s-0003ahfuqpjdztsg****
   */
  snapshotId?: string;
  /**
   * @remarks
   * The type of the data source. Valid values:
   * 
   * *   **ECS_FILE**: ECS files
   * *   **OSS**: Object Storage Service (OSS) buckets
   * *   **NAS**: File Storage NAS file systems
   * *   **OTS_TABLE**: Tablestore instances
   * 
   * @example
   * ECS_FILE
   */
  sourceType?: string;
  /**
   * @remarks
   * The status of backup tasks. Valid values:
   * 
   * *   **COMPLETE**: complete
   * *   **PARTIAL_COMPLETE**: partial complete
   * *   **FAILED**: failed
   * 
   * @example
   * COMPLETE
   */
  status?: string;
  /**
   * @remarks
   * The UUID of the server.
   * 
   * @example
   * d332af48-1269-4a55-a6db-8543a80f****
   */
  uuid?: string;
  /**
   * @remarks
   * The ID of the backup vault that stores the backup snapshot.
   * 
   * @example
   * v-000ccok3zmw7fbzz****
   */
  vaultId?: string;
  static names(): { [key: string]: string } {
    return {
      actualBytes: 'ActualBytes',
      actualItems: 'ActualItems',
      bytesDone: 'BytesDone',
      bytesTotal: 'BytesTotal',
      clientId: 'ClientId',
      clientVersion: 'ClientVersion',
      createdTime: 'CreatedTime',
      errorFile: 'ErrorFile',
      instanceId: 'InstanceId',
      itemsDone: 'ItemsDone',
      itemsTotal: 'ItemsTotal',
      jobId: 'JobId',
      parentSnapshotHash: 'ParentSnapshotHash',
      path: 'Path',
      paths: 'Paths',
      planId: 'PlanId',
      regionId: 'RegionId',
      retention: 'Retention',
      snapshotHash: 'SnapshotHash',
      snapshotId: 'SnapshotId',
      sourceType: 'SourceType',
      status: 'Status',
      uuid: 'Uuid',
      vaultId: 'VaultId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualBytes: 'number',
      actualItems: 'number',
      bytesDone: 'number',
      bytesTotal: 'number',
      clientId: 'string',
      clientVersion: 'string',
      createdTime: 'number',
      errorFile: 'string',
      instanceId: 'string',
      itemsDone: 'number',
      itemsTotal: 'number',
      jobId: 'string',
      parentSnapshotHash: 'string',
      path: 'string',
      paths: { 'type': 'array', 'itemType': 'string' },
      planId: 'string',
      regionId: 'string',
      retention: 'number',
      snapshotHash: 'string',
      snapshotId: 'string',
      sourceType: 'string',
      status: 'string',
      uuid: 'string',
      vaultId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.paths)) {
      $dara.Model.validateArray(this.paths);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSnapshotsResponseBody extends $dara.Model {
  /**
   * @remarks
   * The pagination information.
   */
  pageInfo?: DescribeSnapshotsResponseBodyPageInfo;
  /**
   * @remarks
   * The ID of the request, which is used to locate and troubleshoot issues.
   * 
   * @example
   * A4EB8B1C-1DEC-5E18-BCD0-D1BBB393****
   */
  requestId?: string;
  /**
   * @remarks
   * An array that consists of the backup snapshots.
   */
  snapshots?: DescribeSnapshotsResponseBodySnapshots[];
  static names(): { [key: string]: string } {
    return {
      pageInfo: 'PageInfo',
      requestId: 'RequestId',
      snapshots: 'Snapshots',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageInfo: DescribeSnapshotsResponseBodyPageInfo,
      requestId: 'string',
      snapshots: { 'type': 'array', 'itemType': DescribeSnapshotsResponseBodySnapshots },
    };
  }

  validate() {
    if(this.pageInfo && typeof (this.pageInfo as any).validate === 'function') {
      (this.pageInfo as any).validate();
    }
    if(Array.isArray(this.snapshots)) {
      $dara.Model.validateArray(this.snapshots);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

