// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DescribeSoarPlaybookTaskDetailResponseBodyTaskDetail extends $dara.Model {
  /**
   * @remarks
   * Log information of the task.
   * 
   * @example
   * {"status":1, "errMsg":"paramError"}
   */
  logInfo?: string;
  /**
   * @remarks
   * Parameters for invoking the playbook.
   * 
   * @example
   * params1
   */
  params?: string;
  /**
   * @remarks
   * Process information corresponding to the strategy.
   * 
   * @example
   * {"edges":[{"level":0,"removeFlag":0,"source":1,"target":8}]}
   */
  processInfo?: string;
  /**
   * @remarks
   * Task name.
   * 
   * @example
   * task1
   */
  taskName?: string;
  static names(): { [key: string]: string } {
    return {
      logInfo: 'LogInfo',
      params: 'Params',
      processInfo: 'ProcessInfo',
      taskName: 'TaskName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      logInfo: 'string',
      params: 'string',
      processInfo: 'string',
      taskName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSoarPlaybookTaskDetailResponseBody extends $dara.Model {
  /**
   * @remarks
   * The ID of the current call request, which is a unique identifier generated by Alibaba Cloud for this request, and can be used to troubleshoot and locate issues.
   * 
   * @example
   * 0B48AB3C-84FC-424D-A01D-B9270EF4****
   */
  requestId?: string;
  /**
   * @remarks
   * Task details.
   */
  taskDetail?: DescribeSoarPlaybookTaskDetailResponseBodyTaskDetail;
  static names(): { [key: string]: string } {
    return {
      requestId: 'RequestId',
      taskDetail: 'TaskDetail',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      taskDetail: DescribeSoarPlaybookTaskDetailResponseBodyTaskDetail,
    };
  }

  validate() {
    if(this.taskDetail && typeof (this.taskDetail as any).validate === 'function') {
      (this.taskDetail as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

