// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class GetAttackPathSensitiveAssetConfigResponseBodyAttackPathSensitiveAssetConfigAttackPathAssetList extends $dara.Model {
  /**
   * @remarks
   * Subtype of the cloud product asset.
   * 
   * @example
   * 0
   */
  assetSubType?: number;
  /**
   * @remarks
   * Type of the cloud product asset.
   * 
   * @example
   * 17
   */
  assetType?: number;
  /**
   * @remarks
   * Instance ID of the cloud product asset.
   * 
   * @example
   * i-bp174zui735kvf3v****
   */
  instanceId?: string;
  /**
   * @remarks
   * Instance name of the cloud product asset.
   * 
   * @example
   * test
   */
  instanceName?: string;
  /**
   * @remarks
   * Region ID of the cloud product asset instance.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * Vendor of the cloud product asset.
   * 
   * @example
   * 4
   */
  vendor?: number;
  static names(): { [key: string]: string } {
    return {
      assetSubType: 'AssetSubType',
      assetType: 'AssetType',
      instanceId: 'InstanceId',
      instanceName: 'InstanceName',
      regionId: 'RegionId',
      vendor: 'Vendor',
    };
  }

  static types(): { [key: string]: any } {
    return {
      assetSubType: 'number',
      assetType: 'number',
      instanceId: 'string',
      instanceName: 'string',
      regionId: 'string',
      vendor: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAttackPathSensitiveAssetConfigResponseBodyAttackPathSensitiveAssetConfig extends $dara.Model {
  /**
   * @remarks
   * List of cloud product assets in the attack path.
   */
  attackPathAssetList?: GetAttackPathSensitiveAssetConfigResponseBodyAttackPathSensitiveAssetConfigAttackPathAssetList[];
  /**
   * @remarks
   * ID of the attack path sensitive asset setting.
   * 
   * @example
   * apsac-123
   */
  attackPathSensitiveAssetConfigId?: string;
  /**
   * @remarks
   * Configuration type. Value range: - asset_instance: Asset.
   * 
   * @example
   * asset_instance
   */
  configType?: string;
  static names(): { [key: string]: string } {
    return {
      attackPathAssetList: 'AttackPathAssetList',
      attackPathSensitiveAssetConfigId: 'AttackPathSensitiveAssetConfigId',
      configType: 'ConfigType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attackPathAssetList: { 'type': 'array', 'itemType': GetAttackPathSensitiveAssetConfigResponseBodyAttackPathSensitiveAssetConfigAttackPathAssetList },
      attackPathSensitiveAssetConfigId: 'string',
      configType: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.attackPathAssetList)) {
      $dara.Model.validateArray(this.attackPathAssetList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAttackPathSensitiveAssetConfigResponseBody extends $dara.Model {
  /**
   * @remarks
   * Data of the attack path sensitive asset configuration.
   */
  attackPathSensitiveAssetConfig?: GetAttackPathSensitiveAssetConfigResponseBodyAttackPathSensitiveAssetConfig;
  /**
   * @remarks
   * The ID of this request, which is a unique identifier generated by Alibaba Cloud for this request and can be used to troubleshoot and locate issues.
   * 
   * @example
   * 3956048F-9D73-5EDB-834B-4827BB48****
   */
  requestId?: string;
  static names(): { [key: string]: string } {
    return {
      attackPathSensitiveAssetConfig: 'AttackPathSensitiveAssetConfig',
      requestId: 'RequestId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      attackPathSensitiveAssetConfig: GetAttackPathSensitiveAssetConfigResponseBodyAttackPathSensitiveAssetConfig,
      requestId: 'string',
    };
  }

  validate() {
    if(this.attackPathSensitiveAssetConfig && typeof (this.attackPathSensitiveAssetConfig as any).validate === 'function') {
      (this.attackPathSensitiveAssetConfig as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

