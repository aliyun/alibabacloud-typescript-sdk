// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';
import OpenApi from '@alicloud/openapi-core';
import { OpenApiUtil, $OpenApiUtil }from '@alicloud/openapi-core';


import * as $_model from './models/model';
export * from './models/model';

export default class Client extends OpenApi {

  constructor(config: $OpenApiUtil.Config) {
    super(config);
    this._endpointRule = "regional";
    this._endpointMap = {
      'cn-qingdao': "tds.cn-shanghai.aliyuncs.com",
      'cn-beijing': "tds.cn-shanghai.aliyuncs.com",
      'cn-zhangjiakou': "tds.cn-shanghai.aliyuncs.com",
      'cn-huhehaote': "tds.cn-shanghai.aliyuncs.com",
      'cn-wulanchabu': "tds.cn-shanghai.aliyuncs.com",
      'cn-hangzhou': "tds.cn-shanghai.aliyuncs.com",
      'cn-shanghai': "tds.cn-shanghai.aliyuncs.com",
      'cn-nanjing': "tds.cn-shanghai.aliyuncs.com",
      'cn-fuzhou': "tds.cn-shanghai.aliyuncs.com",
      'cn-shenzhen': "tds.cn-shanghai.aliyuncs.com",
      'cn-heyuan': "tds.cn-shanghai.aliyuncs.com",
      'cn-guangzhou': "tds.cn-shanghai.aliyuncs.com",
      'ap-southeast-2': "tds.ap-southeast-1.aliyuncs.com",
      'ap-southeast-6': "tds.ap-southeast-1.aliyuncs.com",
      'ap-northeast-2': "tds.ap-southeast-1.aliyuncs.com",
      'ap-southeast-3': "tds.ap-southeast-1.aliyuncs.com",
      'ap-northeast-1': "tds.ap-southeast-1.aliyuncs.com",
      'ap-southeast-7': "tds.ap-southeast-1.aliyuncs.com",
      'cn-chengdu': "tds.cn-shanghai.aliyuncs.com",
      'ap-southeast-1': "tds.ap-southeast-1.aliyuncs.com",
      'ap-southeast-5': "tds.ap-southeast-1.aliyuncs.com",
      'cn-hongkong': "tds.cn-shanghai.aliyuncs.com",
      'eu-central-1': "tds.ap-southeast-1.aliyuncs.com",
      'us-east-1': "tds.ap-southeast-1.aliyuncs.com",
      'us-west-1': "tds.ap-southeast-1.aliyuncs.com",
      'eu-west-1': "tds.ap-southeast-1.aliyuncs.com",
      'me-east-1': "tds.ap-southeast-1.aliyuncs.com",
      'me-central-1': "tds.ap-southeast-1.aliyuncs.com",
      'ap-south-1': "tds.ap-southeast-1.aliyuncs.com",
      'cn-beijing-finance-1': "tds.cn-shanghai.aliyuncs.com",
      'cn-hangzhou-finance': "tds.cn-shanghai.aliyuncs.com",
      'cn-shanghai-finance-1': "tds.cn-shanghai.aliyuncs.com",
      'cn-shenzhen-finance-1': "tds.cn-shanghai.aliyuncs.com",
      'cn-heyuan-acdr-1': "tds.cn-shanghai.aliyuncs.com",
      'cn-north-2-gov-1': "tds.cn-shanghai.aliyuncs.com",
      'cn-qingdao-acdr-ut-1': "tds.cn-shanghai.aliyuncs.com",
      'cn-shanghai-mybk': "tds.cn-shanghai.aliyuncs.com",
      'cn-wuhan-lr': "tds.cn-shanghai.aliyuncs.com",
      'cn-zhengzhou-jva': "tds.cn-shanghai.aliyuncs.com",
    };
    this.checkConfig(config);
    this._endpoint = this.getEndpoint("sas", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
  }


  getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {[key: string ]: string}, endpoint: string): string {
    if (!$dara.isNull(endpoint)) {
      return endpoint;
    }

    if (!$dara.isNull(endpointMap) && !$dara.isNull(endpointMap[regionId])) {
      return endpointMap[regionId];
    }

    return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
  }

  /**
   * Select an operation for assets.
   * 
   * @param request - AddAssetSelectionCriteriaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddAssetSelectionCriteriaResponse
   */
  async addAssetSelectionCriteriaWithOptions(request: $_model.AddAssetSelectionCriteriaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddAssetSelectionCriteriaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.criteriaOperation)) {
      query["CriteriaOperation"] = request.criteriaOperation;
    }

    if (!$dara.isNull(request.selectionKey)) {
      query["SelectionKey"] = request.selectionKey;
    }

    if (!$dara.isNull(request.targetOperationList)) {
      query["TargetOperationList"] = request.targetOperationList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddAssetSelectionCriteria",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddAssetSelectionCriteriaResponse>(await this.callApi(params, req, runtime), new $_model.AddAssetSelectionCriteriaResponse({}));
  }

  /**
   * Select an operation for assets.
   * 
   * @param request - AddAssetSelectionCriteriaRequest
   * @returns AddAssetSelectionCriteriaResponse
   */
  async addAssetSelectionCriteria(request: $_model.AddAssetSelectionCriteriaRequest): Promise<$_model.AddAssetSelectionCriteriaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addAssetSelectionCriteriaWithOptions(request, runtime);
  }

  /**
   * Creates a whitelist rule for a baseline check item.
   * 
   * @param request - AddBaselineCheckWhiteRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddBaselineCheckWhiteRecordResponse
   */
  async addBaselineCheckWhiteRecordWithOptions(request: $_model.AddBaselineCheckWhiteRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddBaselineCheckWhiteRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.reason)) {
      query["Reason"] = request.reason;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddBaselineCheckWhiteRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddBaselineCheckWhiteRecordResponse>(await this.callApi(params, req, runtime), new $_model.AddBaselineCheckWhiteRecordResponse({}));
  }

  /**
   * Creates a whitelist rule for a baseline check item.
   * 
   * @param request - AddBaselineCheckWhiteRecordRequest
   * @returns AddBaselineCheckWhiteRecordResponse
   */
  async addBaselineCheckWhiteRecord(request: $_model.AddBaselineCheckWhiteRecordRequest): Promise<$_model.AddBaselineCheckWhiteRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addBaselineCheckWhiteRecordWithOptions(request, runtime);
  }

  /**
   * Adds instances on which risks are detected based on check items of the configuration assessment feature to a whitelist.
   * 
   * @param request - AddCheckInstanceResultWhiteListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddCheckInstanceResultWhiteListResponse
   */
  async addCheckInstanceResultWhiteListWithOptions(request: $_model.AddCheckInstanceResultWhiteListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddCheckInstanceResultWhiteListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkGroupId)) {
      query["CheckGroupId"] = request.checkGroupId;
    }

    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!$dara.isNull(request.instanceList)) {
      query["InstanceList"] = request.instanceList;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddCheckInstanceResultWhiteList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddCheckInstanceResultWhiteListResponse>(await this.callApi(params, req, runtime), new $_model.AddCheckInstanceResultWhiteListResponse({}));
  }

  /**
   * Adds instances on which risks are detected based on check items of the configuration assessment feature to a whitelist.
   * 
   * @param request - AddCheckInstanceResultWhiteListRequest
   * @returns AddCheckInstanceResultWhiteListResponse
   */
  async addCheckInstanceResultWhiteList(request: $_model.AddCheckInstanceResultWhiteListRequest): Promise<$_model.AddCheckInstanceResultWhiteListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addCheckInstanceResultWhiteListWithOptions(request, runtime);
  }

  /**
   * Adds the check items of the configuration assessment feature to the whitelist.
   * 
   * @param request - AddCheckResultWhiteListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddCheckResultWhiteListResponse
   */
  async addCheckResultWhiteListWithOptions(request: $_model.AddCheckResultWhiteListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddCheckResultWhiteListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkIds)) {
      query["CheckIds"] = request.checkIds;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddCheckResultWhiteList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddCheckResultWhiteListResponse>(await this.callApi(params, req, runtime), new $_model.AddCheckResultWhiteListResponse({}));
  }

  /**
   * Adds the check items of the configuration assessment feature to the whitelist.
   * 
   * @param request - AddCheckResultWhiteListRequest
   * @returns AddCheckResultWhiteListResponse
   */
  async addCheckResultWhiteList(request: $_model.AddCheckResultWhiteListRequest): Promise<$_model.AddCheckResultWhiteListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addCheckResultWhiteListWithOptions(request, runtime);
  }

  /**
   * Creates a custom defense rule.
   * 
   * @param request - AddClientUserDefineRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddClientUserDefineRuleResponse
   */
  async addClientUserDefineRuleWithOptions(request: $_model.AddClientUserDefineRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddClientUserDefineRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.actionType)) {
      query["ActionType"] = request.actionType;
    }

    if (!$dara.isNull(request.cmdline)) {
      query["Cmdline"] = request.cmdline;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.filePath)) {
      query["FilePath"] = request.filePath;
    }

    if (!$dara.isNull(request.IP)) {
      query["IP"] = request.IP;
    }

    if (!$dara.isNull(request.md5List)) {
      query["Md5List"] = request.md5List;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.newFilePath)) {
      query["NewFilePath"] = request.newFilePath;
    }

    if (!$dara.isNull(request.parentCmdline)) {
      query["ParentCmdline"] = request.parentCmdline;
    }

    if (!$dara.isNull(request.parentProcPath)) {
      query["ParentProcPath"] = request.parentProcPath;
    }

    if (!$dara.isNull(request.platform)) {
      query["Platform"] = request.platform;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.portStr)) {
      query["PortStr"] = request.portStr;
    }

    if (!$dara.isNull(request.procPath)) {
      query["ProcPath"] = request.procPath;
    }

    if (!$dara.isNull(request.registryContent)) {
      query["RegistryContent"] = request.registryContent;
    }

    if (!$dara.isNull(request.registryKey)) {
      query["RegistryKey"] = request.registryKey;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddClientUserDefineRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddClientUserDefineRuleResponse>(await this.callApi(params, req, runtime), new $_model.AddClientUserDefineRuleResponse({}));
  }

  /**
   * Creates a custom defense rule.
   * 
   * @param request - AddClientUserDefineRuleRequest
   * @returns AddClientUserDefineRuleResponse
   */
  async addClientUserDefineRule(request: $_model.AddClientUserDefineRuleRequest): Promise<$_model.AddClientUserDefineRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addClientUserDefineRuleWithOptions(request, runtime);
  }

  /**
   * Adds the configuration information of multi-cloud assets.
   * 
   * @param request - AddCloudVendorAccountAKRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddCloudVendorAccountAKResponse
   */
  async addCloudVendorAccountAKWithOptions(request: $_model.AddCloudVendorAccountAKRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddCloudVendorAccountAKResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.akType)) {
      query["AkType"] = request.akType;
    }

    if (!$dara.isNull(request.authModules)) {
      query["AuthModules"] = request.authModules;
    }

    if (!$dara.isNull(request.ctdrCloudUserId)) {
      query["CtdrCloudUserId"] = request.ctdrCloudUserId;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.extendInfo)) {
      query["ExtendInfo"] = request.extendInfo;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.regions)) {
      query["Regions"] = request.regions;
    }

    if (!$dara.isNull(request.secretId)) {
      query["SecretId"] = request.secretId;
    }

    if (!$dara.isNull(request.secretKey)) {
      query["SecretKey"] = request.secretKey;
    }

    if (!$dara.isNull(request.subscriptionIds)) {
      query["SubscriptionIds"] = request.subscriptionIds;
    }

    if (!$dara.isNull(request.tenantId)) {
      query["TenantId"] = request.tenantId;
    }

    if (!$dara.isNull(request.vendor)) {
      query["Vendor"] = request.vendor;
    }

    if (!$dara.isNull(request.vendorAuthAlias)) {
      query["VendorAuthAlias"] = request.vendorAuthAlias;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddCloudVendorAccountAK",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddCloudVendorAccountAKResponse>(await this.callApi(params, req, runtime), new $_model.AddCloudVendorAccountAKResponse({}));
  }

  /**
   * Adds the configuration information of multi-cloud assets.
   * 
   * @param request - AddCloudVendorAccountAKRequest
   * @returns AddCloudVendorAccountAKResponse
   */
  async addCloudVendorAccountAK(request: $_model.AddCloudVendorAccountAKRequest): Promise<$_model.AddCloudVendorAccountAKResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addCloudVendorAccountAKWithOptions(request, runtime);
  }

  /**
   * Adds configurations of connecting the audit logs of a third-party cloud asset.
   * 
   * @param request - AddCloudVendorTrialConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddCloudVendorTrialConfigResponse
   */
  async addCloudVendorTrialConfigWithOptions(request: $_model.AddCloudVendorTrialConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddCloudVendorTrialConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.authId)) {
      query["AuthId"] = request.authId;
    }

    if (!$dara.isNull(request.authInfo)) {
      query["AuthInfo"] = request.authInfo;
    }

    if (!$dara.isNull(request.vendor)) {
      query["Vendor"] = request.vendor;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddCloudVendorTrialConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddCloudVendorTrialConfigResponse>(await this.callApi(params, req, runtime), new $_model.AddCloudVendorTrialConfigResponse({}));
  }

  /**
   * Adds configurations of connecting the audit logs of a third-party cloud asset.
   * 
   * @param request - AddCloudVendorTrialConfigRequest
   * @returns AddCloudVendorTrialConfigResponse
   */
  async addCloudVendorTrialConfig(request: $_model.AddCloudVendorTrialConfigRequest): Promise<$_model.AddCloudVendorTrialConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addCloudVendorTrialConfigWithOptions(request, runtime);
  }

  /**
   * Creates a rule for non-image program defense.
   * 
   * @param tmpReq - AddContainerDefenseRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddContainerDefenseRuleResponse
   */
  async addContainerDefenseRuleWithOptions(tmpReq: $_model.AddContainerDefenseRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddContainerDefenseRuleResponse> {
    tmpReq.validate();
    let request = new $_model.AddContainerDefenseRuleShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.whitelist)) {
      request.whitelistShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.whitelist, "Whitelist", "json");
    }

    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.ruleAction)) {
      query["RuleAction"] = request.ruleAction;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    if (!$dara.isNull(request.ruleSwitch)) {
      query["RuleSwitch"] = request.ruleSwitch;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    if (!$dara.isNull(request.scope)) {
      query["Scope"] = request.scope;
    }

    if (!$dara.isNull(request.whitelistShrink)) {
      query["Whitelist"] = request.whitelistShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddContainerDefenseRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddContainerDefenseRuleResponse>(await this.callApi(params, req, runtime), new $_model.AddContainerDefenseRuleResponse({}));
  }

  /**
   * Creates a rule for non-image program defense.
   * 
   * @param request - AddContainerDefenseRuleRequest
   * @returns AddContainerDefenseRuleResponse
   */
  async addContainerDefenseRule(request: $_model.AddContainerDefenseRuleRequest): Promise<$_model.AddContainerDefenseRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addContainerDefenseRuleWithOptions(request, runtime);
  }

  /**
   * Creates a defense rule against container escapes.
   * 
   * @param request - AddContainerPluginRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddContainerPluginRuleResponse
   */
  async addContainerPluginRuleWithOptions(request: $_model.AddContainerPluginRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddContainerPluginRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.mode)) {
      query["Mode"] = request.mode;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    if (!$dara.isNull(request.ruleTemplateId)) {
      query["RuleTemplateId"] = request.ruleTemplateId;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    if (!$dara.isNull(request.selectedPolicy)) {
      query["SelectedPolicy"] = request.selectedPolicy;
    }

    if (!$dara.isNull(request.whiteImages)) {
      query["WhiteImages"] = request.whiteImages;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddContainerPluginRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddContainerPluginRuleResponse>(await this.callApi(params, req, runtime), new $_model.AddContainerPluginRuleResponse({}));
  }

  /**
   * Creates a defense rule against container escapes.
   * 
   * @param request - AddContainerPluginRuleRequest
   * @returns AddContainerPluginRuleResponse
   */
  async addContainerPluginRule(request: $_model.AddContainerPluginRuleRequest): Promise<$_model.AddContainerPluginRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addContainerPluginRuleWithOptions(request, runtime);
  }

  /**
   * Creates an IDC probe to add assets in a data center to Security Center and manage the assets by using the Security Center console.
   * 
   * @remarks
   * Security Center allows you to create an IDC probe only on servers on which the Security Center agent is installed.
   * 
   * @param request - AddIdcProbeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddIdcProbeResponse
   */
  async addIdcProbeWithOptions(request: $_model.AddIdcProbeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddIdcProbeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.idcName)) {
      query["IdcName"] = request.idcName;
    }

    if (!$dara.isNull(request.idcRegion)) {
      query["IdcRegion"] = request.idcRegion;
    }

    if (!$dara.isNull(request.intervalPeriod)) {
      query["IntervalPeriod"] = request.intervalPeriod;
    }

    if (!$dara.isNull(request.ipSegments)) {
      query["IpSegments"] = request.ipSegments;
    }

    if (!$dara.isNull(request.linuxPort)) {
      query["LinuxPort"] = request.linuxPort;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    if (!$dara.isNull(request.winPort)) {
      query["WinPort"] = request.winPort;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddIdcProbe",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddIdcProbeResponse>(await this.callApi(params, req, runtime), new $_model.AddIdcProbeResponse({}));
  }

  /**
   * Creates an IDC probe to add assets in a data center to Security Center and manage the assets by using the Security Center console.
   * 
   * @remarks
   * Security Center allows you to create an IDC probe only on servers on which the Security Center agent is installed.
   * 
   * @param request - AddIdcProbeRequest
   * @returns AddIdcProbeResponse
   */
  async addIdcProbe(request: $_model.AddIdcProbeRequest): Promise<$_model.AddIdcProbeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addIdcProbeWithOptions(request, runtime);
  }

  /**
   * Creates an alert handling rule.
   * 
   * @param request - AddImageEventOperationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddImageEventOperationResponse
   */
  async addImageEventOperationWithOptions(request: $_model.AddImageEventOperationRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddImageEventOperationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.conditions)) {
      query["Conditions"] = request.conditions;
    }

    if (!$dara.isNull(request.eventKey)) {
      query["EventKey"] = request.eventKey;
    }

    if (!$dara.isNull(request.eventName)) {
      query["EventName"] = request.eventName;
    }

    if (!$dara.isNull(request.eventType)) {
      query["EventType"] = request.eventType;
    }

    if (!$dara.isNull(request.note)) {
      query["Note"] = request.note;
    }

    if (!$dara.isNull(request.operationCode)) {
      query["OperationCode"] = request.operationCode;
    }

    if (!$dara.isNull(request.scenarios)) {
      query["Scenarios"] = request.scenarios;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddImageEventOperation",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddImageEventOperationResponse>(await this.callApi(params, req, runtime), new $_model.AddImageEventOperationResponse({}));
  }

  /**
   * Creates an alert handling rule.
   * 
   * @param request - AddImageEventOperationRequest
   * @returns AddImageEventOperationResponse
   */
  async addImageEventOperation(request: $_model.AddImageEventOperationRequest): Promise<$_model.AddImageEventOperationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addImageEventOperationWithOptions(request, runtime);
  }

  /**
   * Adds image vulnerabilities to the whitelist.
   * 
   * @param request - AddImageVulWhiteListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddImageVulWhiteListResponse
   */
  async addImageVulWhiteListWithOptions(request: $_model.AddImageVulWhiteListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddImageVulWhiteListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.reason)) {
      query["Reason"] = request.reason;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.target)) {
      query["Target"] = request.target;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.whitelist)) {
      query["Whitelist"] = request.whitelist;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddImageVulWhiteList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddImageVulWhiteListResponse>(await this.callApi(params, req, runtime), new $_model.AddImageVulWhiteListResponse({}));
  }

  /**
   * Adds image vulnerabilities to the whitelist.
   * 
   * @param request - AddImageVulWhiteListRequest
   * @returns AddImageVulWhiteListResponse
   */
  async addImageVulWhiteList(request: $_model.AddImageVulWhiteListRequest): Promise<$_model.AddImageVulWhiteListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addImageVulWhiteListWithOptions(request, runtime);
  }

  /**
   * Creates a command that is used to install the Security Center agent.
   * 
   * @param request - AddInstallCodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddInstallCodeResponse
   */
  async addInstallCodeWithOptions(request: $_model.AddInstallCodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddInstallCodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.expiredDate)) {
      query["ExpiredDate"] = request.expiredDate;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.onlyImage)) {
      query["OnlyImage"] = request.onlyImage;
    }

    if (!$dara.isNull(request.os)) {
      query["Os"] = request.os;
    }

    if (!$dara.isNull(request.privateLinkId)) {
      query["PrivateLinkId"] = request.privateLinkId;
    }

    if (!$dara.isNull(request.proxyCluster)) {
      query["ProxyCluster"] = request.proxyCluster;
    }

    if (!$dara.isNull(request.vendorName)) {
      query["VendorName"] = request.vendorName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddInstallCode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddInstallCodeResponse>(await this.callApi(params, req, runtime), new $_model.AddInstallCodeResponse({}));
  }

  /**
   * Creates a command that is used to install the Security Center agent.
   * 
   * @param request - AddInstallCodeRequest
   * @returns AddInstallCodeResponse
   */
  async addInstallCode(request: $_model.AddInstallCodeRequest): Promise<$_model.AddInstallCodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addInstallCodeWithOptions(request, runtime);
  }

  /**
   * Adds a self-managed image repository.
   * 
   * @param request - AddPrivateRegistryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddPrivateRegistryResponse
   */
  async addPrivateRegistryWithOptions(request: $_model.AddPrivateRegistryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddPrivateRegistryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.extraParam)) {
      query["ExtraParam"] = request.extraParam;
    }

    if (!$dara.isNull(request.netType)) {
      query["NetType"] = request.netType;
    }

    if (!$dara.isNull(request.password)) {
      query["Password"] = request.password;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.protocolType)) {
      query["ProtocolType"] = request.protocolType;
    }

    if (!$dara.isNull(request.registryHostIp)) {
      query["RegistryHostIp"] = request.registryHostIp;
    }

    if (!$dara.isNull(request.registryRegionId)) {
      query["RegistryRegionId"] = request.registryRegionId;
    }

    if (!$dara.isNull(request.registryType)) {
      query["RegistryType"] = request.registryType;
    }

    if (!$dara.isNull(request.registryVersion)) {
      query["RegistryVersion"] = request.registryVersion;
    }

    if (!$dara.isNull(request.transPerHour)) {
      query["TransPerHour"] = request.transPerHour;
    }

    if (!$dara.isNull(request.userName)) {
      query["UserName"] = request.userName;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddPrivateRegistry",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddPrivateRegistryResponse>(await this.callApi(params, req, runtime), new $_model.AddPrivateRegistryResponse({}));
  }

  /**
   * Adds a self-managed image repository.
   * 
   * @param request - AddPrivateRegistryRequest
   * @returns AddPrivateRegistryResponse
   */
  async addPrivateRegistry(request: $_model.AddPrivateRegistryRequest): Promise<$_model.AddPrivateRegistryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addPrivateRegistryWithOptions(request, runtime);
  }

  /**
   * Add or update the whitelist for VPC purchases
   * 
   * @param request - AddProtectVpcListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddProtectVpcListResponse
   */
  async addProtectVpcListWithOptions(request: $_model.AddProtectVpcListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddProtectVpcListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.addVpcInstanceIdList)) {
      query["AddVpcInstanceIdList"] = request.addVpcInstanceIdList;
    }

    if (!$dara.isNull(request.delVpcInstanceIdList)) {
      query["DelVpcInstanceIdList"] = request.delVpcInstanceIdList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddProtectVpcList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddProtectVpcListResponse>(await this.callApi(params, req, runtime), new $_model.AddProtectVpcListResponse({}));
  }

  /**
   * Add or update the whitelist for VPC purchases
   * 
   * @param request - AddProtectVpcListRequest
   * @returns AddProtectVpcListResponse
   */
  async addProtectVpcList(request: $_model.AddProtectVpcListRequest): Promise<$_model.AddProtectVpcListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addProtectVpcListWithOptions(request, runtime);
  }

  /**
   * Upgrades the Security Center agent in batches.
   * 
   * @param request - AddPublishBatchRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddPublishBatchResponse
   */
  async addPublishBatchWithOptions(request: $_model.AddPublishBatchRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddPublishBatchResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.batchName)) {
      query["BatchName"] = request.batchName;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.operationBase)) {
      query["OperationBase"] = request.operationBase;
    }

    if (!$dara.isNull(request.upgradeVersion)) {
      query["UpgradeVersion"] = request.upgradeVersion;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddPublishBatch",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddPublishBatchResponse>(await this.callApi(params, req, runtime), new $_model.AddPublishBatchResponse({}));
  }

  /**
   * Upgrades the Security Center agent in batches.
   * 
   * @param request - AddPublishBatchRequest
   * @returns AddPublishBatchResponse
   */
  async addPublishBatch(request: $_model.AddPublishBatchRequest): Promise<$_model.AddPublishBatchResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addPublishBatchWithOptions(request, runtime);
  }

  /**
   * Creates a rule for container tamper-proofing.
   * 
   * @param request - AddSasContainerWebDefenseRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddSasContainerWebDefenseRuleResponse
   */
  async addSasContainerWebDefenseRuleWithOptions(request: $_model.AddSasContainerWebDefenseRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddSasContainerWebDefenseRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pathConfDTOList)) {
      query["PathConfDTOList"] = request.pathConfDTOList;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddSasContainerWebDefenseRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddSasContainerWebDefenseRuleResponse>(await this.callApi(params, req, runtime), new $_model.AddSasContainerWebDefenseRuleResponse({}));
  }

  /**
   * Creates a rule for container tamper-proofing.
   * 
   * @param request - AddSasContainerWebDefenseRuleRequest
   * @returns AddSasContainerWebDefenseRuleResponse
   */
  async addSasContainerWebDefenseRule(request: $_model.AddSasContainerWebDefenseRuleRequest): Promise<$_model.AddSasContainerWebDefenseRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addSasContainerWebDefenseRuleWithOptions(request, runtime);
  }

  /**
   * Enables the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
   * 
   * @param request - AddSasModuleTrialRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddSasModuleTrialResponse
   */
  async addSasModuleTrialWithOptions(request: $_model.AddSasModuleTrialRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddSasModuleTrialResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.moduleCode)) {
      query["ModuleCode"] = request.moduleCode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddSasModuleTrial",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddSasModuleTrialResponse>(await this.callApi(params, req, runtime), new $_model.AddSasModuleTrialResponse({}));
  }

  /**
   * Enables the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
   * 
   * @param request - AddSasModuleTrialRequest
   * @returns AddSasModuleTrialResponse
   */
  async addSasModuleTrial(request: $_model.AddSasModuleTrialRequest): Promise<$_model.AddSasModuleTrialResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addSasModuleTrialWithOptions(request, runtime);
  }

  /**
   * Adds a tag to assets.
   * 
   * @remarks
   * Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.
   * 
   * @param request - AddTagWithUuidRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddTagWithUuidResponse
   */
  async addTagWithUuidWithOptions(request: $_model.AddTagWithUuidRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddTagWithUuidResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tagName)) {
      query["TagName"] = request.tagName;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddTagWithUuid",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddTagWithUuidResponse>(await this.callApi(params, req, runtime), new $_model.AddTagWithUuidResponse({}));
  }

  /**
   * Adds a tag to assets.
   * 
   * @remarks
   * Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.
   * 
   * @param request - AddTagWithUuidRequest
   * @returns AddTagWithUuidResponse
   */
  async addTagWithUuid(request: $_model.AddTagWithUuidRequest): Promise<$_model.AddTagWithUuidResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addTagWithUuidWithOptions(request, runtime);
  }

  /**
   * Adds servers from which you want to uninstall the Security Center agent.
   * 
   * @param request - AddUninstallClientsByUuidsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddUninstallClientsByUuidsResponse
   */
  async addUninstallClientsByUuidsWithOptions(request: $_model.AddUninstallClientsByUuidsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddUninstallClientsByUuidsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callMethod)) {
      query["CallMethod"] = request.callMethod;
    }

    if (!$dara.isNull(request.feedback)) {
      query["Feedback"] = request.feedback;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddUninstallClientsByUuids",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddUninstallClientsByUuidsResponse>(await this.callApi(params, req, runtime), new $_model.AddUninstallClientsByUuidsResponse({}));
  }

  /**
   * Adds servers from which you want to uninstall the Security Center agent.
   * 
   * @param request - AddUninstallClientsByUuidsRequest
   * @returns AddUninstallClientsByUuidsResponse
   */
  async addUninstallClientsByUuids(request: $_model.AddUninstallClientsByUuidsRequest): Promise<$_model.AddUninstallClientsByUuidsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addUninstallClientsByUuidsWithOptions(request, runtime);
  }

  /**
   * Creates a honeypot.
   * 
   * @param request - AddVpcHoneyPotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddVpcHoneyPotResponse
   */
  async addVpcHoneyPotWithOptions(request: $_model.AddVpcHoneyPotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddVpcHoneyPotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddVpcHoneyPot",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddVpcHoneyPotResponse>(await this.callApi(params, req, runtime), new $_model.AddVpcHoneyPotResponse({}));
  }

  /**
   * Creates a honeypot.
   * 
   * @param request - AddVpcHoneyPotRequest
   * @returns AddVpcHoneyPotResponse
   */
  async addVpcHoneyPot(request: $_model.AddVpcHoneyPotRequest): Promise<$_model.AddVpcHoneyPotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addVpcHoneyPotWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of an advanced whitelist rule.
   * 
   * @param request - AdvanceSecurityEventOperationsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AdvanceSecurityEventOperationsResponse
   */
  async advanceSecurityEventOperationsWithOptions(request: $_model.AdvanceSecurityEventOperationsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AdvanceSecurityEventOperationsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eventName)) {
      query["EventName"] = request.eventName;
    }

    if (!$dara.isNull(request.eventType)) {
      query["EventType"] = request.eventType;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AdvanceSecurityEventOperations",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AdvanceSecurityEventOperationsResponse>(await this.callApi(params, req, runtime), new $_model.AdvanceSecurityEventOperationsResponse({}));
  }

  /**
   * Queries the configurations of an advanced whitelist rule.
   * 
   * @param request - AdvanceSecurityEventOperationsRequest
   * @returns AdvanceSecurityEventOperationsResponse
   */
  async advanceSecurityEventOperations(request: $_model.AdvanceSecurityEventOperationsRequest): Promise<$_model.AdvanceSecurityEventOperationsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.advanceSecurityEventOperationsWithOptions(request, runtime);
  }

  /**
   * Adds alert description in batches.
   * 
   * @param request - BatchCreateMaliciousNoteRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BatchCreateMaliciousNoteResponse
   */
  async batchCreateMaliciousNoteWithOptions(request: $_model.BatchCreateMaliciousNoteRequest, runtime: $dara.RuntimeOptions): Promise<$_model.BatchCreateMaliciousNoteResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.imageMaliciousFileList)) {
      query["ImageMaliciousFileList"] = request.imageMaliciousFileList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "BatchCreateMaliciousNote",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.BatchCreateMaliciousNoteResponse>(await this.callApi(params, req, runtime), new $_model.BatchCreateMaliciousNoteResponse({}));
  }

  /**
   * Adds alert description in batches.
   * 
   * @param request - BatchCreateMaliciousNoteRequest
   * @returns BatchCreateMaliciousNoteResponse
   */
  async batchCreateMaliciousNote(request: $_model.BatchCreateMaliciousNoteRequest): Promise<$_model.BatchCreateMaliciousNoteResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.batchCreateMaliciousNoteWithOptions(request, runtime);
  }

  /**
   * Deletes whitelist rules for alerts generated for sensitive files that are detected by using the agentless detection feature in batches.
   * 
   * @param request - BatchDeleteMaliciousFileWhitelistConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BatchDeleteMaliciousFileWhitelistConfigResponse
   */
  async batchDeleteMaliciousFileWhitelistConfigWithOptions(request: $_model.BatchDeleteMaliciousFileWhitelistConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.BatchDeleteMaliciousFileWhitelistConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configIdList)) {
      query["ConfigIdList"] = request.configIdList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "BatchDeleteMaliciousFileWhitelistConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.BatchDeleteMaliciousFileWhitelistConfigResponse>(await this.callApi(params, req, runtime), new $_model.BatchDeleteMaliciousFileWhitelistConfigResponse({}));
  }

  /**
   * Deletes whitelist rules for alerts generated for sensitive files that are detected by using the agentless detection feature in batches.
   * 
   * @param request - BatchDeleteMaliciousFileWhitelistConfigRequest
   * @returns BatchDeleteMaliciousFileWhitelistConfigResponse
   */
  async batchDeleteMaliciousFileWhitelistConfig(request: $_model.BatchDeleteMaliciousFileWhitelistConfigRequest): Promise<$_model.BatchDeleteMaliciousFileWhitelistConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.batchDeleteMaliciousFileWhitelistConfigWithOptions(request, runtime);
  }

  /**
   * Enables or disables multiple features in proactive defense at a time.
   * 
   * @param request - BatchOperateCommonOverallConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BatchOperateCommonOverallConfigResponse
   */
  async batchOperateCommonOverallConfigWithOptions(request: $_model.BatchOperateCommonOverallConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.BatchOperateCommonOverallConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    if (!$dara.isNull(request.typeList)) {
      query["TypeList"] = request.typeList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "BatchOperateCommonOverallConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.BatchOperateCommonOverallConfigResponse>(await this.callApi(params, req, runtime), new $_model.BatchOperateCommonOverallConfigResponse({}));
  }

  /**
   * Enables or disables multiple features in proactive defense at a time.
   * 
   * @param request - BatchOperateCommonOverallConfigRequest
   * @returns BatchOperateCommonOverallConfigResponse
   */
  async batchOperateCommonOverallConfig(request: $_model.BatchOperateCommonOverallConfigRequest): Promise<$_model.BatchOperateCommonOverallConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.batchOperateCommonOverallConfigWithOptions(request, runtime);
  }

  /**
   * Modifies multiple alert whitelist rules of sensitive files that are detected by using the agentless detection feature at a time.
   * 
   * @param request - BatchUpdateMaliciousFileWhitelistConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BatchUpdateMaliciousFileWhitelistConfigResponse
   */
  async batchUpdateMaliciousFileWhitelistConfigWithOptions(request: $_model.BatchUpdateMaliciousFileWhitelistConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.BatchUpdateMaliciousFileWhitelistConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configList)) {
      query["ConfigList"] = request.configList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "BatchUpdateMaliciousFileWhitelistConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.BatchUpdateMaliciousFileWhitelistConfigResponse>(await this.callApi(params, req, runtime), new $_model.BatchUpdateMaliciousFileWhitelistConfigResponse({}));
  }

  /**
   * Modifies multiple alert whitelist rules of sensitive files that are detected by using the agentless detection feature at a time.
   * 
   * @param request - BatchUpdateMaliciousFileWhitelistConfigRequest
   * @returns BatchUpdateMaliciousFileWhitelistConfigResponse
   */
  async batchUpdateMaliciousFileWhitelistConfig(request: $_model.BatchUpdateMaliciousFileWhitelistConfigRequest): Promise<$_model.BatchUpdateMaliciousFileWhitelistConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.batchUpdateMaliciousFileWhitelistConfigWithOptions(request, runtime);
  }

  /**
   * Binds servers to Security Center or unbinds servers from Security Center.
   * 
   * @param request - BindAuthToMachineRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BindAuthToMachineResponse
   */
  async bindAuthToMachineWithOptions(request: $_model.BindAuthToMachineRequest, runtime: $dara.RuntimeOptions): Promise<$_model.BindAuthToMachineResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.authVersion)) {
      query["AuthVersion"] = request.authVersion;
    }

    if (!$dara.isNull(request.autoBind)) {
      query["AutoBind"] = request.autoBind;
    }

    if (!$dara.isNull(request.bind)) {
      query["Bind"] = request.bind;
    }

    if (!$dara.isNull(request.bindAll)) {
      query["BindAll"] = request.bindAll;
    }

    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.isPreBind)) {
      query["IsPreBind"] = request.isPreBind;
    }

    if (!$dara.isNull(request.logicalExp)) {
      query["LogicalExp"] = request.logicalExp;
    }

    if (!$dara.isNull(request.ntmVersion)) {
      query["NtmVersion"] = request.ntmVersion;
    }

    if (!$dara.isNull(request.preBindOrderId)) {
      query["PreBindOrderId"] = request.preBindOrderId;
    }

    if (!$dara.isNull(request.unBind)) {
      query["UnBind"] = request.unBind;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "BindAuthToMachine",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.BindAuthToMachineResponse>(await this.callApi(params, req, runtime), new $_model.BindAuthToMachineResponse({}));
  }

  /**
   * Binds servers to Security Center or unbinds servers from Security Center.
   * 
   * @param request - BindAuthToMachineRequest
   * @returns BindAuthToMachineResponse
   */
  async bindAuthToMachine(request: $_model.BindAuthToMachineRequest): Promise<$_model.BindAuthToMachineResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.bindAuthToMachineWithOptions(request, runtime);
  }

  /**
   * Adds servers to Security Center over a proxy server. After you create a proxy cluster and deploy a proxy server, you can connect a server to the proxy cluster as a client. This way, the server is added to Security Center over the proxy server and is protected.
   * 
   * @param request - BindHybridProxyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns BindHybridProxyResponse
   */
  async bindHybridProxyWithOptions(request: $_model.BindHybridProxyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.BindHybridProxyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.yundunUuids)) {
      query["YundunUuids"] = request.yundunUuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "BindHybridProxy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.BindHybridProxyResponse>(await this.callApi(params, req, runtime), new $_model.BindHybridProxyResponse({}));
  }

  /**
   * Adds servers to Security Center over a proxy server. After you create a proxy cluster and deploy a proxy server, you can connect a server to the proxy cluster as a client. This way, the server is added to Security Center over the proxy server and is protected.
   * 
   * @param request - BindHybridProxyRequest
   * @returns BindHybridProxyResponse
   */
  async bindHybridProxy(request: $_model.BindHybridProxyRequest): Promise<$_model.BindHybridProxyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.bindHybridProxyWithOptions(request, runtime);
  }

  /**
   * Cancels the main task.
   * 
   * @param request - CancelOnceTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CancelOnceTaskResponse
   */
  async cancelOnceTaskWithOptions(request: $_model.CancelOnceTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CancelOnceTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CancelOnceTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CancelOnceTaskResponse>(await this.callApi(params, req, runtime), new $_model.CancelOnceTaskResponse({}));
  }

  /**
   * Cancels the main task.
   * 
   * @param request - CancelOnceTaskRequest
   * @returns CancelOnceTaskResponse
   */
  async cancelOnceTask(request: $_model.CancelOnceTaskRequest): Promise<$_model.CancelOnceTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.cancelOnceTaskWithOptions(request, runtime);
  }

  /**
   * Modifies the interval of asset synchronization configurations.
   * 
   * @param request - ChangeAssetRefreshTaskConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ChangeAssetRefreshTaskConfigResponse
   */
  async changeAssetRefreshTaskConfigWithOptions(request: $_model.ChangeAssetRefreshTaskConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ChangeAssetRefreshTaskConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.assetRefreshConfigs)) {
      query["AssetRefreshConfigs"] = request.assetRefreshConfigs;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ChangeAssetRefreshTaskConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ChangeAssetRefreshTaskConfigResponse>(await this.callApi(params, req, runtime), new $_model.ChangeAssetRefreshTaskConfigResponse({}));
  }

  /**
   * Modifies the interval of asset synchronization configurations.
   * 
   * @param request - ChangeAssetRefreshTaskConfigRequest
   * @returns ChangeAssetRefreshTaskConfigResponse
   */
  async changeAssetRefreshTaskConfig(request: $_model.ChangeAssetRefreshTaskConfigRequest): Promise<$_model.ChangeAssetRefreshTaskConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.changeAssetRefreshTaskConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the configuration items of the configuration assessment feature.
   * 
   * @param tmpReq - ChangeCheckConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ChangeCheckConfigResponse
   */
  async changeCheckConfigWithOptions(tmpReq: $_model.ChangeCheckConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ChangeCheckConfigResponse> {
    tmpReq.validate();
    let request = new $_model.ChangeCheckConfigShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.configRequirementIds)) {
      request.configRequirementIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configRequirementIds, "ConfigRequirementIds", "json");
    }

    if (!$dara.isNull(tmpReq.configStandardIds)) {
      request.configStandardIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configStandardIds, "ConfigStandardIds", "json");
    }

    let query = { };
    if (!$dara.isNull(request.addedCheck)) {
      query["AddedCheck"] = request.addedCheck;
    }

    if (!$dara.isNull(request.configRequirementIdsShrink)) {
      query["ConfigRequirementIds"] = request.configRequirementIdsShrink;
    }

    if (!$dara.isNull(request.configStandardIdsShrink)) {
      query["ConfigStandardIds"] = request.configStandardIdsShrink;
    }

    if (!$dara.isNull(request.configure)) {
      query["Configure"] = request.configure;
    }

    if (!$dara.isNull(request.cycleDays)) {
      query["CycleDays"] = request.cycleDays;
    }

    if (!$dara.isNull(request.enableAddCheck)) {
      query["EnableAddCheck"] = request.enableAddCheck;
    }

    if (!$dara.isNull(request.enableAutoCheck)) {
      query["EnableAutoCheck"] = request.enableAutoCheck;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.removedCheck)) {
      query["RemovedCheck"] = request.removedCheck;
    }

    if (!$dara.isNull(request.standardIds)) {
      query["StandardIds"] = request.standardIds;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.systemConfig)) {
      query["SystemConfig"] = request.systemConfig;
    }

    if (!$dara.isNull(request.vendors)) {
      query["Vendors"] = request.vendors;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ChangeCheckConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ChangeCheckConfigResponse>(await this.callApi(params, req, runtime), new $_model.ChangeCheckConfigResponse({}));
  }

  /**
   * Modifies the configuration items of the configuration assessment feature.
   * 
   * @param request - ChangeCheckConfigRequest
   * @returns ChangeCheckConfigResponse
   */
  async changeCheckConfig(request: $_model.ChangeCheckConfigRequest): Promise<$_model.ChangeCheckConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.changeCheckConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the custom configuration items of a check item.
   * 
   * @param request - ChangeCheckCustomConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ChangeCheckCustomConfigResponse
   */
  async changeCheckCustomConfigWithOptions(request: $_model.ChangeCheckCustomConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ChangeCheckCustomConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.customConfigs)) {
      query["CustomConfigs"] = request.customConfigs;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.repairConfigs)) {
      query["RepairConfigs"] = request.repairConfigs;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ChangeCheckCustomConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ChangeCheckCustomConfigResponse>(await this.callApi(params, req, runtime), new $_model.ChangeCheckCustomConfigResponse({}));
  }

  /**
   * Modifies the custom configuration items of a check item.
   * 
   * @param request - ChangeCheckCustomConfigRequest
   * @returns ChangeCheckCustomConfigResponse
   */
  async changeCheckCustomConfig(request: $_model.ChangeCheckCustomConfigRequest): Promise<$_model.ChangeCheckCustomConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.changeCheckCustomConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the details of the deduction modules of the security score feature, including custom settings.
   * 
   * @param request - ChangeSecurityScoreRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ChangeSecurityScoreRuleResponse
   */
  async changeSecurityScoreRuleWithOptions(request: $_model.ChangeSecurityScoreRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ChangeSecurityScoreRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.calType)) {
      query["CalType"] = request.calType;
    }

    if (!$dara.isNull(request.resetSecurityScoreRule)) {
      query["ResetSecurityScoreRule"] = request.resetSecurityScoreRule;
    }

    if (!$dara.isNull(request.securityScoreCategoryList)) {
      query["SecurityScoreCategoryList"] = request.securityScoreCategoryList;
    }

    if (!$dara.isNull(request.securityScoreRuleList)) {
      query["SecurityScoreRuleList"] = request.securityScoreRuleList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ChangeSecurityScoreRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ChangeSecurityScoreRuleResponse>(await this.callApi(params, req, runtime), new $_model.ChangeSecurityScoreRuleResponse({}));
  }

  /**
   * Modifies the details of the deduction modules of the security score feature, including custom settings.
   * 
   * @param request - ChangeSecurityScoreRuleRequest
   * @returns ChangeSecurityScoreRuleResponse
   */
  async changeSecurityScoreRule(request: $_model.ChangeSecurityScoreRuleRequest): Promise<$_model.ChangeSecurityScoreRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.changeSecurityScoreRuleWithOptions(request, runtime);
  }

  /**
   * Modifies the language settings of log analysis. The modification on the language settings takes effect within 12 hours and affects only the language of the descriptions for security events in security logs.
   * 
   * @param request - ChangeUserLangRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ChangeUserLangResponse
   */
  async changeUserLangWithOptions(request: $_model.ChangeUserLangRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ChangeUserLangResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.userLang)) {
      query["UserLang"] = request.userLang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ChangeUserLang",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ChangeUserLangResponse>(await this.callApi(params, req, runtime), new $_model.ChangeUserLangResponse({}));
  }

  /**
   * Modifies the language settings of log analysis. The modification on the language settings takes effect within 12 hours and affects only the language of the descriptions for security events in security logs.
   * 
   * @param request - ChangeUserLangRequest
   * @returns ChangeUserLangResponse
   */
  async changeUserLang(request: $_model.ChangeUserLangRequest): Promise<$_model.ChangeUserLangResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.changeUserLangWithOptions(request, runtime);
  }

  /**
   * Checks whether one or more alert events are generated on a specified server based on the IDs of the alert events.
   * 
   * @param request - CheckSecurityEventIdRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CheckSecurityEventIdResponse
   */
  async checkSecurityEventIdWithOptions(request: $_model.CheckSecurityEventIdRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CheckSecurityEventIdResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.securityEventIds)) {
      query["SecurityEventIds"] = request.securityEventIds;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CheckSecurityEventId",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CheckSecurityEventIdResponse>(await this.callApi(params, req, runtime), new $_model.CheckSecurityEventIdResponse({}));
  }

  /**
   * Checks whether one or more alert events are generated on a specified server based on the IDs of the alert events.
   * 
   * @param request - CheckSecurityEventIdRequest
   * @returns CheckSecurityEventIdResponse
   */
  async checkSecurityEventId(request: $_model.CheckSecurityEventIdRequest): Promise<$_model.CheckSecurityEventIdResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.checkSecurityEventIdWithOptions(request, runtime);
  }

  /**
   * Checks a Security Token Service (STS) token and returns the ID of the Alibaba Cloud account.
   * 
   * @param request - CheckStsTokenAuthRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CheckStsTokenAuthResponse
   */
  async checkStsTokenAuthWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.CheckStsTokenAuthResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "CheckStsTokenAuth",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CheckStsTokenAuthResponse>(await this.callApi(params, req, runtime), new $_model.CheckStsTokenAuthResponse({}));
  }

  /**
   * Checks a Security Token Service (STS) token and returns the ID of the Alibaba Cloud account.
   * @returns CheckStsTokenAuthResponse
   */
  async checkStsTokenAuth(): Promise<$_model.CheckStsTokenAuthResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.checkStsTokenAuthWithOptions(runtime);
  }

  /**
   * Checks whether the remaining quota of the vulnerability fixing feature is sufficient for a free trial user of Security Center and queries the quota usage required for the current fix operation.
   * 
   * @remarks
   * You can call this operation to check whether the remaining quota of the vulnerability fixing feature is sufficient in free trial scenarios. This operation does not trigger vulnerability fixing.
   * 
   * @param request - CheckTrialFixCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CheckTrialFixCountResponse
   */
  async checkTrialFixCountWithOptions(request: $_model.CheckTrialFixCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CheckTrialFixCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.info)) {
      query["Info"] = request.info;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    if (!$dara.isNull(request.vulNames)) {
      query["VulNames"] = request.vulNames;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CheckTrialFixCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CheckTrialFixCountResponse>(await this.callApi(params, req, runtime), new $_model.CheckTrialFixCountResponse({}));
  }

  /**
   * Checks whether the remaining quota of the vulnerability fixing feature is sufficient for a free trial user of Security Center and queries the quota usage required for the current fix operation.
   * 
   * @remarks
   * You can call this operation to check whether the remaining quota of the vulnerability fixing feature is sufficient in free trial scenarios. This operation does not trigger vulnerability fixing.
   * 
   * @param request - CheckTrialFixCountRequest
   * @returns CheckTrialFixCountResponse
   */
  async checkTrialFixCount(request: $_model.CheckTrialFixCountRequest): Promise<$_model.CheckTrialFixCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.checkTrialFixCountWithOptions(request, runtime);
  }

  /**
   * Checks whether Elastic Compute Service (ECS) instances exist.
   * 
   * @param request - CheckUserHasEcsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CheckUserHasEcsResponse
   */
  async checkUserHasEcsWithOptions(request: $_model.CheckUserHasEcsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CheckUserHasEcsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CheckUserHasEcs",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CheckUserHasEcsResponse>(await this.callApi(params, req, runtime), new $_model.CheckUserHasEcsResponse({}));
  }

  /**
   * Checks whether Elastic Compute Service (ECS) instances exist.
   * 
   * @param request - CheckUserHasEcsRequest
   * @returns CheckUserHasEcsResponse
   */
  async checkUserHasEcs(request: $_model.CheckUserHasEcsRequest): Promise<$_model.CheckUserHasEcsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.checkUserHasEcsWithOptions(request, runtime);
  }

  /**
   * Confirms the alert events that you want to handle.
   * 
   * @param request - ConfirmVirusEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ConfirmVirusEventsResponse
   */
  async confirmVirusEventsWithOptions(request: $_model.ConfirmVirusEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ConfirmVirusEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.operationAll)) {
      query["OperationAll"] = request.operationAll;
    }

    if (!$dara.isNull(request.operationCode)) {
      query["OperationCode"] = request.operationCode;
    }

    if (!$dara.isNull(request.operationRange)) {
      query["OperationRange"] = request.operationRange;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ConfirmVirusEvents",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ConfirmVirusEventsResponse>(await this.callApi(params, req, runtime), new $_model.ConfirmVirusEventsResponse({}));
  }

  /**
   * Confirms the alert events that you want to handle.
   * 
   * @param request - ConfirmVirusEventsRequest
   * @returns ConfirmVirusEventsResponse
   */
  async confirmVirusEvents(request: $_model.ConfirmVirusEventsRequest): Promise<$_model.ConfirmVirusEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.confirmVirusEventsWithOptions(request, runtime);
  }

  /**
   * Clones an existing security report. The new security report has the same configuration as the existing security report.
   * 
   * @param request - CopyCustomizeReportConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CopyCustomizeReportConfigResponse
   */
  async copyCustomizeReportConfigWithOptions(request: $_model.CopyCustomizeReportConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CopyCustomizeReportConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.reportId)) {
      query["ReportId"] = request.reportId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CopyCustomizeReportConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CopyCustomizeReportConfigResponse>(await this.callApi(params, req, runtime), new $_model.CopyCustomizeReportConfigResponse({}));
  }

  /**
   * Clones an existing security report. The new security report has the same configuration as the existing security report.
   * 
   * @param request - CopyCustomizeReportConfigRequest
   * @returns CopyCustomizeReportConfigResponse
   */
  async copyCustomizeReportConfig(request: $_model.CopyCustomizeReportConfigRequest): Promise<$_model.CopyCustomizeReportConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.copyCustomizeReportConfigWithOptions(request, runtime);
  }

  /**
   * Creates an agentless detection task.
   * 
   * @param request - CreateAgentlessScanTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAgentlessScanTaskResponse
   */
  async createAgentlessScanTaskWithOptions(request: $_model.CreateAgentlessScanTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateAgentlessScanTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.assetSelectionType)) {
      query["AssetSelectionType"] = request.assetSelectionType;
    }

    if (!$dara.isNull(request.autoDeleteDays)) {
      query["AutoDeleteDays"] = request.autoDeleteDays;
    }

    if (!$dara.isNull(request.releaseAfterScan)) {
      query["ReleaseAfterScan"] = request.releaseAfterScan;
    }

    if (!$dara.isNull(request.scanDataDisk)) {
      query["ScanDataDisk"] = request.scanDataDisk;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAgentlessScanTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateAgentlessScanTaskResponse>(await this.callApi(params, req, runtime), new $_model.CreateAgentlessScanTaskResponse({}));
  }

  /**
   * Creates an agentless detection task.
   * 
   * @param request - CreateAgentlessScanTaskRequest
   * @returns CreateAgentlessScanTaskResponse
   */
  async createAgentlessScanTask(request: $_model.CreateAgentlessScanTaskRequest): Promise<$_model.CreateAgentlessScanTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAgentlessScanTaskWithOptions(request, runtime);
  }

  /**
   * Creates a defense rule against brute-force attacks.
   * 
   * @param tmpReq - CreateAntiBruteForceRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAntiBruteForceRuleResponse
   */
  async createAntiBruteForceRuleWithOptions(tmpReq: $_model.CreateAntiBruteForceRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateAntiBruteForceRuleResponse> {
    tmpReq.validate();
    let request = new $_model.CreateAntiBruteForceRuleShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.protocolType)) {
      request.protocolTypeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.protocolType, "ProtocolType", "json");
    }

    let query = { };
    if (!$dara.isNull(request.defaultRule)) {
      query["DefaultRule"] = request.defaultRule;
    }

    if (!$dara.isNull(request.failCount)) {
      query["FailCount"] = request.failCount;
    }

    if (!$dara.isNull(request.forbiddenTime)) {
      query["ForbiddenTime"] = request.forbiddenTime;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.protocolTypeShrink)) {
      query["ProtocolType"] = request.protocolTypeShrink;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.span)) {
      query["Span"] = request.span;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAntiBruteForceRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateAntiBruteForceRuleResponse>(await this.callApi(params, req, runtime), new $_model.CreateAntiBruteForceRuleResponse({}));
  }

  /**
   * Creates a defense rule against brute-force attacks.
   * 
   * @param request - CreateAntiBruteForceRuleRequest
   * @returns CreateAntiBruteForceRuleResponse
   */
  async createAntiBruteForceRule(request: $_model.CreateAntiBruteForceRuleRequest): Promise<$_model.CreateAntiBruteForceRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAntiBruteForceRuleWithOptions(request, runtime);
  }

  /**
   * Create asset selection configurations.
   * 
   * @param request - CreateAssetSelectionConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAssetSelectionConfigResponse
   */
  async createAssetSelectionConfigWithOptions(request: $_model.CreateAssetSelectionConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateAssetSelectionConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.businessType)) {
      query["BusinessType"] = request.businessType;
    }

    if (!$dara.isNull(request.platform)) {
      query["Platform"] = request.platform;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAssetSelectionConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateAssetSelectionConfigResponse>(await this.callApi(params, req, runtime), new $_model.CreateAssetSelectionConfigResponse({}));
  }

  /**
   * Create asset selection configurations.
   * 
   * @param request - CreateAssetSelectionConfigRequest
   * @returns CreateAssetSelectionConfigResponse
   */
  async createAssetSelectionConfig(request: $_model.CreateAssetSelectionConfigRequest): Promise<$_model.CreateAssetSelectionConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAssetSelectionConfigWithOptions(request, runtime);
  }

  /**
   * Create attack path sensitive asset configuration.
   * 
   * @param request - CreateAttackPathSensitiveAssetConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAttackPathSensitiveAssetConfigResponse
   */
  async createAttackPathSensitiveAssetConfigWithOptions(request: $_model.CreateAttackPathSensitiveAssetConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateAttackPathSensitiveAssetConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.attackPathAssetList)) {
      query["AttackPathAssetList"] = request.attackPathAssetList;
    }

    if (!$dara.isNull(request.configType)) {
      query["ConfigType"] = request.configType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAttackPathSensitiveAssetConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateAttackPathSensitiveAssetConfigResponse>(await this.callApi(params, req, runtime), new $_model.CreateAttackPathSensitiveAssetConfigResponse({}));
  }

  /**
   * Create attack path sensitive asset configuration.
   * 
   * @param request - CreateAttackPathSensitiveAssetConfigRequest
   * @returns CreateAttackPathSensitiveAssetConfigResponse
   */
  async createAttackPathSensitiveAssetConfig(request: $_model.CreateAttackPathSensitiveAssetConfigRequest): Promise<$_model.CreateAttackPathSensitiveAssetConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAttackPathSensitiveAssetConfigWithOptions(request, runtime);
  }

  /**
   * Create Attack Path Whitelist.
   * 
   * @param request - CreateAttackPathWhitelistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAttackPathWhitelistResponse
   */
  async createAttackPathWhitelistWithOptions(request: $_model.CreateAttackPathWhitelistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateAttackPathWhitelistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.attackPathAssetList)) {
      query["AttackPathAssetList"] = request.attackPathAssetList;
    }

    if (!$dara.isNull(request.pathName)) {
      query["PathName"] = request.pathName;
    }

    if (!$dara.isNull(request.pathType)) {
      query["PathType"] = request.pathType;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.whitelistName)) {
      query["WhitelistName"] = request.whitelistName;
    }

    if (!$dara.isNull(request.whitelistType)) {
      query["WhitelistType"] = request.whitelistType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAttackPathWhitelist",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateAttackPathWhitelistResponse>(await this.callApi(params, req, runtime), new $_model.CreateAttackPathWhitelistResponse({}));
  }

  /**
   * Create Attack Path Whitelist.
   * 
   * @param request - CreateAttackPathWhitelistRequest
   * @returns CreateAttackPathWhitelistResponse
   */
  async createAttackPathWhitelist(request: $_model.CreateAttackPathWhitelistRequest): Promise<$_model.CreateAttackPathWhitelistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAttackPathWhitelistWithOptions(request, runtime);
  }

  /**
   * Creates a witness.
   * 
   * @param request - CreateAttestorRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAttestorResponse
   */
  async createAttestorWithOptions(request: $_model.CreateAttestorRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateAttestorResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.keyId)) {
      query["KeyId"] = request.keyId;
    }

    if (!$dara.isNull(request.keyRegionId)) {
      query["KeyRegionId"] = request.keyRegionId;
    }

    if (!$dara.isNull(request.keyVersionId)) {
      query["KeyVersionId"] = request.keyVersionId;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAttestor",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateAttestorResponse>(await this.callApi(params, req, runtime), new $_model.CreateAttestorResponse({}));
  }

  /**
   * Creates a witness.
   * 
   * @param request - CreateAttestorRequest
   * @returns CreateAttestorResponse
   */
  async createAttestor(request: $_model.CreateAttestorRequest): Promise<$_model.CreateAttestorResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAttestorWithOptions(request, runtime);
  }

  /**
   * Creates an anti-ransomware policy for servers.
   * 
   * @param tmpReq - CreateBackupPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateBackupPolicyResponse
   */
  async createBackupPolicyWithOptions(tmpReq: $_model.CreateBackupPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateBackupPolicyResponse> {
    tmpReq.validate();
    let request = new $_model.CreateBackupPolicyShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.policy)) {
      request.policyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policy, "Policy", "json");
    }

    let query = { };
    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.policyShrink)) {
      query["Policy"] = request.policyShrink;
    }

    if (!$dara.isNull(request.policyRegionId)) {
      query["PolicyRegionId"] = request.policyRegionId;
    }

    if (!$dara.isNull(request.policyVersion)) {
      query["PolicyVersion"] = request.policyVersion;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateBackupPolicy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateBackupPolicyResponse>(await this.callApi(params, req, runtime), new $_model.CreateBackupPolicyResponse({}));
  }

  /**
   * Creates an anti-ransomware policy for servers.
   * 
   * @param request - CreateBackupPolicyRequest
   * @returns CreateBackupPolicyResponse
   */
  async createBackupPolicy(request: $_model.CreateBackupPolicyRequest): Promise<$_model.CreateBackupPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createBackupPolicyWithOptions(request, runtime);
  }

  /**
   * Queries the parameters that are required to upload a file for detection.
   * 
   * @param request - CreateBatchUploadUrlRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateBatchUploadUrlResponse
   */
  async createBatchUploadUrlWithOptions(request: $_model.CreateBatchUploadUrlRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateBatchUploadUrlResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.md5List)) {
      query["Md5List"] = request.md5List;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateBatchUploadUrl",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateBatchUploadUrlResponse>(await this.callApi(params, req, runtime), new $_model.CreateBatchUploadUrlResponse({}));
  }

  /**
   * Queries the parameters that are required to upload a file for detection.
   * 
   * @param request - CreateBatchUploadUrlRequest
   * @returns CreateBatchUploadUrlResponse
   */
  async createBatchUploadUrl(request: $_model.CreateBatchUploadUrlRequest): Promise<$_model.CreateBatchUploadUrlResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createBatchUploadUrlWithOptions(request, runtime);
  }

  /**
   * Creates a binary security policy.
   * 
   * @param request - CreateBinarySecurityPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateBinarySecurityPolicyResponse
   */
  async createBinarySecurityPolicyWithOptions(request: $_model.CreateBinarySecurityPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateBinarySecurityPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusters)) {
      query["Clusters"] = request.clusters;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.policy)) {
      query["Policy"] = request.policy;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateBinarySecurityPolicy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateBinarySecurityPolicyResponse>(await this.callApi(params, req, runtime), new $_model.CreateBinarySecurityPolicyResponse({}));
  }

  /**
   * Creates a binary security policy.
   * 
   * @param request - CreateBinarySecurityPolicyRequest
   * @returns CreateBinarySecurityPolicyResponse
   */
  async createBinarySecurityPolicy(request: $_model.CreateBinarySecurityPolicyRequest): Promise<$_model.CreateBinarySecurityPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createBinarySecurityPolicyWithOptions(request, runtime);
  }

  /**
   * Creates a container scan task.
   * 
   * @param request - CreateContainerScanTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateContainerScanTaskResponse
   */
  async createContainerScanTaskWithOptions(request: $_model.CreateContainerScanTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateContainerScanTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.containerIds)) {
      query["ContainerIds"] = request.containerIds;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateContainerScanTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateContainerScanTaskResponse>(await this.callApi(params, req, runtime), new $_model.CreateContainerScanTaskResponse({}));
  }

  /**
   * Creates a container scan task.
   * 
   * @param request - CreateContainerScanTaskRequest
   * @returns CreateContainerScanTaskResponse
   */
  async createContainerScanTask(request: $_model.CreateContainerScanTaskRequest): Promise<$_model.CreateContainerScanTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createContainerScanTaskWithOptions(request, runtime);
  }

  /**
   * Creates a scan task for a running container application based on the application name.
   * 
   * @param request - CreateContainerScanTaskByAppNameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateContainerScanTaskByAppNameResponse
   */
  async createContainerScanTaskByAppNameWithOptions(request: $_model.CreateContainerScanTaskByAppNameRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateContainerScanTaskByAppNameResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appNames)) {
      query["AppNames"] = request.appNames;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateContainerScanTaskByAppName",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateContainerScanTaskByAppNameResponse>(await this.callApi(params, req, runtime), new $_model.CreateContainerScanTaskByAppNameResponse({}));
  }

  /**
   * Creates a scan task for a running container application based on the application name.
   * 
   * @param request - CreateContainerScanTaskByAppNameRequest
   * @returns CreateContainerScanTaskByAppNameResponse
   */
  async createContainerScanTaskByAppName(request: $_model.CreateContainerScanTaskByAppNameRequest): Promise<$_model.CreateContainerScanTaskByAppNameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createContainerScanTaskByAppNameWithOptions(request, runtime);
  }

  /**
   * Creates an IP address blocking policy for one or more servers.
   * 
   * @param request - CreateCustomBlockRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCustomBlockRecordResponse
   */
  async createCustomBlockRecordWithOptions(request: $_model.CreateCustomBlockRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateCustomBlockRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.blockIp)) {
      query["BlockIp"] = request.blockIp;
    }

    if (!$dara.isNull(request.bound)) {
      query["Bound"] = request.bound;
    }

    if (!$dara.isNull(request.expireTime)) {
      query["ExpireTime"] = request.expireTime;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateCustomBlockRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateCustomBlockRecordResponse>(await this.callApi(params, req, runtime), new $_model.CreateCustomBlockRecordResponse({}));
  }

  /**
   * Creates an IP address blocking policy for one or more servers.
   * 
   * @param request - CreateCustomBlockRecordRequest
   * @returns CreateCustomBlockRecordResponse
   */
  async createCustomBlockRecord(request: $_model.CreateCustomBlockRecordRequest): Promise<$_model.CreateCustomBlockRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createCustomBlockRecordWithOptions(request, runtime);
  }

  /**
   * Creates custom weak password rules.
   * 
   * @param request - CreateCustomizedDictRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCustomizedDictResponse
   */
  async createCustomizedDictWithOptions(request: $_model.CreateCustomizedDictRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateCustomizedDictResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.override)) {
      query["Override"] = request.override;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateCustomizedDict",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateCustomizedDictResponse>(await this.callApi(params, req, runtime), new $_model.CreateCustomizedDictResponse({}));
  }

  /**
   * Creates custom weak password rules.
   * 
   * @param request - CreateCustomizedDictRequest
   * @returns CreateCustomizedDictResponse
   */
  async createCustomizedDict(request: $_model.CreateCustomizedDictRequest): Promise<$_model.CreateCustomizedDictResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createCustomizedDictWithOptions(request, runtime);
  }

  /**
   * Creates a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
   * 
   * @param request - CreateCycleTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCycleTaskResponse
   */
  async createCycleTaskWithOptions(request: $_model.CreateCycleTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateCycleTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.enable)) {
      query["Enable"] = request.enable;
    }

    if (!$dara.isNull(request.firstDateStr)) {
      query["FirstDateStr"] = request.firstDateStr;
    }

    if (!$dara.isNull(request.intervalPeriod)) {
      query["IntervalPeriod"] = request.intervalPeriod;
    }

    if (!$dara.isNull(request.param)) {
      query["Param"] = request.param;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.targetEndTime)) {
      query["TargetEndTime"] = request.targetEndTime;
    }

    if (!$dara.isNull(request.targetStartTime)) {
      query["TargetStartTime"] = request.targetStartTime;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateCycleTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateCycleTaskResponse>(await this.callApi(params, req, runtime), new $_model.CreateCycleTaskResponse({}));
  }

  /**
   * Creates a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
   * 
   * @param request - CreateCycleTaskRequest
   * @returns CreateCycleTaskResponse
   */
  async createCycleTask(request: $_model.CreateCycleTaskRequest): Promise<$_model.CreateCycleTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createCycleTaskWithOptions(request, runtime);
  }

  /**
   * Creates a dynamic dictionary of weak passwords.
   * 
   * @deprecated OpenAPI CreateDynamicDict is deprecated, please use Sas::2018-12-03::CreateCustomizedDict instead.
   * 
   * @param request - CreateDynamicDictRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDynamicDictResponse
   */
  async createDynamicDictWithOptions(request: $_model.CreateDynamicDictRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateDynamicDictResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.override)) {
      query["Override"] = request.override;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDynamicDict",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateDynamicDictResponse>(await this.callApi(params, req, runtime), new $_model.CreateDynamicDictResponse({}));
  }

  /**
   * Creates a dynamic dictionary of weak passwords.
   * 
   * @deprecated OpenAPI CreateDynamicDict is deprecated, please use Sas::2018-12-03::CreateCustomizedDict instead.
   * 
   * @param request - CreateDynamicDictRequest
   * @returns CreateDynamicDictResponse
   */
  // Deprecated
  async createDynamicDict(request: $_model.CreateDynamicDictRequest): Promise<$_model.CreateDynamicDictResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDynamicDictWithOptions(request, runtime);
  }

  /**
   * Pushes a file to the cloud for detection.
   * 
   * @remarks
   * You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
   * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
   * 
   * @param request - CreateFileDetectRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateFileDetectResponse
   */
  async createFileDetectWithOptions(request: $_model.CreateFileDetectRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateFileDetectResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.decompress)) {
      query["Decompress"] = request.decompress;
    }

    if (!$dara.isNull(request.decompressMaxFileCount)) {
      query["DecompressMaxFileCount"] = request.decompressMaxFileCount;
    }

    if (!$dara.isNull(request.decompressMaxLayer)) {
      query["DecompressMaxLayer"] = request.decompressMaxLayer;
    }

    if (!$dara.isNull(request.downloadUrl)) {
      query["DownloadUrl"] = request.downloadUrl;
    }

    if (!$dara.isNull(request.hashKey)) {
      query["HashKey"] = request.hashKey;
    }

    if (!$dara.isNull(request.ossKey)) {
      query["OssKey"] = request.ossKey;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateFileDetect",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateFileDetectResponse>(await this.callApi(params, req, runtime), new $_model.CreateFileDetectResponse({}));
  }

  /**
   * Pushes a file to the cloud for detection.
   * 
   * @remarks
   * You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
   * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
   * 
   * @param request - CreateFileDetectRequest
   * @returns CreateFileDetectResponse
   */
  async createFileDetect(request: $_model.CreateFileDetectRequest): Promise<$_model.CreateFileDetectResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createFileDetectWithOptions(request, runtime);
  }

  /**
   * Queries the parameters that are required to upload a file for detection.
   * 
   * @remarks
   * You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
   * The form upload method is provided by OSS. For more information, see [Form upload](https://help.aliyun.com/document_detail/84788.html).
   * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
   * 
   * @param request - CreateFileDetectUploadUrlRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateFileDetectUploadUrlResponse
   */
  async createFileDetectUploadUrlWithOptions(request: $_model.CreateFileDetectUploadUrlRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateFileDetectUploadUrlResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.hashKeyContextList)) {
      query["HashKeyContextList"] = request.hashKeyContextList;
    }

    if (!$dara.isNull(request.hashKeyList)) {
      query["HashKeyList"] = request.hashKeyList;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateFileDetectUploadUrl",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateFileDetectUploadUrlResponse>(await this.callApi(params, req, runtime), new $_model.CreateFileDetectUploadUrlResponse({}));
  }

  /**
   * Queries the parameters that are required to upload a file for detection.
   * 
   * @remarks
   * You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
   * The form upload method is provided by OSS. For more information, see [Form upload](https://help.aliyun.com/document_detail/84788.html).
   * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
   * 
   * @param request - CreateFileDetectUploadUrlRequest
   * @returns CreateFileDetectUploadUrlResponse
   */
  async createFileDetectUploadUrl(request: $_model.CreateFileDetectUploadUrlRequest): Promise<$_model.CreateFileDetectUploadUrlResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createFileDetectUploadUrlWithOptions(request, runtime);
  }

  /**
   * Creates a core file monitoring rule.
   * 
   * @param request - CreateFileProtectRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateFileProtectRuleResponse
   */
  async createFileProtectRuleWithOptions(request: $_model.CreateFileProtectRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateFileProtectRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.alertLevel)) {
      query["AlertLevel"] = request.alertLevel;
    }

    if (!$dara.isNull(request.fileOps)) {
      query["FileOps"] = request.fileOps;
    }

    if (!$dara.isNull(request.filePaths)) {
      query["FilePaths"] = request.filePaths;
    }

    if (!$dara.isNull(request.platform)) {
      query["Platform"] = request.platform;
    }

    if (!$dara.isNull(request.procPaths)) {
      query["ProcPaths"] = request.procPaths;
    }

    if (!$dara.isNull(request.ruleAction)) {
      query["RuleAction"] = request.ruleAction;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.switchId)) {
      query["SwitchId"] = request.switchId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateFileProtectRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateFileProtectRuleResponse>(await this.callApi(params, req, runtime), new $_model.CreateFileProtectRuleResponse({}));
  }

  /**
   * Creates a core file monitoring rule.
   * 
   * @param request - CreateFileProtectRuleRequest
   * @returns CreateFileProtectRuleResponse
   */
  async createFileProtectRule(request: $_model.CreateFileProtectRuleRequest): Promise<$_model.CreateFileProtectRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createFileProtectRuleWithOptions(request, runtime);
  }

  /**
   * Specifies the queries per second (QPS) limit on the files uploaded from the client.
   * 
   * @param request - CreateFileUploadLimitRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateFileUploadLimitResponse
   */
  async createFileUploadLimitWithOptions(request: $_model.CreateFileUploadLimitRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateFileUploadLimitResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.limit)) {
      query["Limit"] = request.limit;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateFileUploadLimit",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateFileUploadLimitResponse>(await this.callApi(params, req, runtime), new $_model.CreateFileUploadLimitResponse({}));
  }

  /**
   * Specifies the queries per second (QPS) limit on the files uploaded from the client.
   * 
   * @param request - CreateFileUploadLimitRequest
   * @returns CreateFileUploadLimitResponse
   */
  async createFileUploadLimit(request: $_model.CreateFileUploadLimitRequest): Promise<$_model.CreateFileUploadLimitResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createFileUploadLimitWithOptions(request, runtime);
  }

  /**
   * Creates a honeypot.
   * 
   * @param request - CreateHoneypotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateHoneypotResponse
   */
  async createHoneypotWithOptions(request: $_model.CreateHoneypotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateHoneypotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.honeypotImageId)) {
      query["HoneypotImageId"] = request.honeypotImageId;
    }

    if (!$dara.isNull(request.honeypotImageName)) {
      query["HoneypotImageName"] = request.honeypotImageName;
    }

    if (!$dara.isNull(request.honeypotName)) {
      query["HoneypotName"] = request.honeypotName;
    }

    if (!$dara.isNull(request.meta)) {
      query["Meta"] = request.meta;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateHoneypot",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateHoneypotResponse>(await this.callApi(params, req, runtime), new $_model.CreateHoneypotResponse({}));
  }

  /**
   * Creates a honeypot.
   * 
   * @param request - CreateHoneypotRequest
   * @returns CreateHoneypotResponse
   */
  async createHoneypot(request: $_model.CreateHoneypotRequest): Promise<$_model.CreateHoneypotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createHoneypotWithOptions(request, runtime);
  }

  /**
   * Creates a management node.
   * 
   * @param request - CreateHoneypotNodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateHoneypotNodeResponse
   */
  async createHoneypotNodeWithOptions(request: $_model.CreateHoneypotNodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateHoneypotNodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.allowHoneypotAccessInternet)) {
      query["AllowHoneypotAccessInternet"] = request.allowHoneypotAccessInternet;
    }

    if (!$dara.isNull(request.availableProbeNum)) {
      query["AvailableProbeNum"] = request.availableProbeNum;
    }

    if (!$dara.isNull(request.nodeName)) {
      query["NodeName"] = request.nodeName;
    }

    if (!$dara.isNull(request.securityGroupProbeIpList)) {
      query["SecurityGroupProbeIpList"] = request.securityGroupProbeIpList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateHoneypotNode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateHoneypotNodeResponse>(await this.callApi(params, req, runtime), new $_model.CreateHoneypotNodeResponse({}));
  }

  /**
   * Creates a management node.
   * 
   * @param request - CreateHoneypotNodeRequest
   * @returns CreateHoneypotNodeResponse
   */
  async createHoneypotNode(request: $_model.CreateHoneypotNodeRequest): Promise<$_model.CreateHoneypotNodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createHoneypotNodeWithOptions(request, runtime);
  }

  /**
   * Creates a honeypot template.
   * 
   * @param request - CreateHoneypotPresetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateHoneypotPresetResponse
   */
  async createHoneypotPresetWithOptions(request: $_model.CreateHoneypotPresetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateHoneypotPresetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.honeypotImageName)) {
      query["HoneypotImageName"] = request.honeypotImageName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.meta)) {
      query["Meta"] = request.meta;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.presetName)) {
      query["PresetName"] = request.presetName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateHoneypotPreset",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateHoneypotPresetResponse>(await this.callApi(params, req, runtime), new $_model.CreateHoneypotPresetResponse({}));
  }

  /**
   * Creates a honeypot template.
   * 
   * @param request - CreateHoneypotPresetRequest
   * @returns CreateHoneypotPresetResponse
   */
  async createHoneypotPreset(request: $_model.CreateHoneypotPresetRequest): Promise<$_model.CreateHoneypotPresetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createHoneypotPresetWithOptions(request, runtime);
  }

  /**
   * Creates a probe.
   * 
   * @param request - CreateHoneypotProbeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateHoneypotProbeResponse
   */
  async createHoneypotProbeWithOptions(request: $_model.CreateHoneypotProbeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateHoneypotProbeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.arp)) {
      query["Arp"] = request.arp;
    }

    if (!$dara.isNull(request.businessGroupId)) {
      query["BusinessGroupId"] = request.businessGroupId;
    }

    if (!$dara.isNull(request.controlNodeId)) {
      query["ControlNodeId"] = request.controlNodeId;
    }

    if (!$dara.isNull(request.displayName)) {
      query["DisplayName"] = request.displayName;
    }

    if (!$dara.isNull(request.honeypotBindList)) {
      query["HoneypotBindList"] = request.honeypotBindList;
    }

    if (!$dara.isNull(request.ping)) {
      query["Ping"] = request.ping;
    }

    if (!$dara.isNull(request.probeType)) {
      query["ProbeType"] = request.probeType;
    }

    if (!$dara.isNull(request.probeVersion)) {
      query["ProbeVersion"] = request.probeVersion;
    }

    if (!$dara.isNull(request.proxyIp)) {
      query["ProxyIp"] = request.proxyIp;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateHoneypotProbe",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateHoneypotProbeResponse>(await this.callApi(params, req, runtime), new $_model.CreateHoneypotProbeResponse({}));
  }

  /**
   * Creates a probe.
   * 
   * @param request - CreateHoneypotProbeRequest
   * @returns CreateHoneypotProbeResponse
   */
  async createHoneypotProbe(request: $_model.CreateHoneypotProbeRequest): Promise<$_model.CreateHoneypotProbeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createHoneypotProbeWithOptions(request, runtime);
  }

  /**
   * Creates a monitoring or forwarding service for a probe.
   * 
   * @param request - CreateHoneypotProbeBindRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateHoneypotProbeBindResponse
   */
  async createHoneypotProbeBindWithOptions(request: $_model.CreateHoneypotProbeBindRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateHoneypotProbeBindResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bindPortList)) {
      query["BindPortList"] = request.bindPortList;
    }

    if (!$dara.isNull(request.honeypotId)) {
      query["HoneypotId"] = request.honeypotId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.probeId)) {
      query["ProbeId"] = request.probeId;
    }

    if (!$dara.isNull(request.serviceIpList)) {
      query["ServiceIpList"] = request.serviceIpList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateHoneypotProbeBind",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateHoneypotProbeBindResponse>(await this.callApi(params, req, runtime), new $_model.CreateHoneypotProbeBindResponse({}));
  }

  /**
   * Creates a monitoring or forwarding service for a probe.
   * 
   * @param request - CreateHoneypotProbeBindRequest
   * @returns CreateHoneypotProbeBindResponse
   */
  async createHoneypotProbeBind(request: $_model.CreateHoneypotProbeBindRequest): Promise<$_model.CreateHoneypotProbeBindResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createHoneypotProbeBindWithOptions(request, runtime);
  }

  /**
   * Creates a hybrid-cloud proxy cluster.
   * 
   * @param request - CreateHybridProxyClusterRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateHybridProxyClusterResponse
   */
  async createHybridProxyClusterWithOptions(request: $_model.CreateHybridProxyClusterRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateHybridProxyClusterResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.ip)) {
      query["Ip"] = request.ip;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateHybridProxyCluster",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateHybridProxyClusterResponse>(await this.callApi(params, req, runtime), new $_model.CreateHybridProxyClusterResponse({}));
  }

  /**
   * Creates a hybrid-cloud proxy cluster.
   * 
   * @param request - CreateHybridProxyClusterRequest
   * @returns CreateHybridProxyClusterResponse
   */
  async createHybridProxyCluster(request: $_model.CreateHybridProxyClusterRequest): Promise<$_model.CreateHybridProxyClusterResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createHybridProxyClusterWithOptions(request, runtime);
  }

  /**
   * Creates a defense rule in the container firewall module.
   * 
   * @param tmpReq - CreateInterceptionRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateInterceptionRuleResponse
   */
  async createInterceptionRuleWithOptions(tmpReq: $_model.CreateInterceptionRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateInterceptionRuleResponse> {
    tmpReq.validate();
    let request = new $_model.CreateInterceptionRuleShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.dstTargetList)) {
      request.dstTargetListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dstTargetList, "DstTargetList", "json");
    }

    if (!$dara.isNull(tmpReq.srcTarget)) {
      request.srcTargetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.srcTarget, "SrcTarget", "json");
    }

    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.dstTargetListShrink)) {
      query["DstTargetList"] = request.dstTargetListShrink;
    }

    if (!$dara.isNull(request.interceptType)) {
      query["InterceptType"] = request.interceptType;
    }

    if (!$dara.isNull(request.orderIndex)) {
      query["OrderIndex"] = request.orderIndex;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    if (!$dara.isNull(request.ruleSwitch)) {
      query["RuleSwitch"] = request.ruleSwitch;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    if (!$dara.isNull(request.srcTargetShrink)) {
      query["SrcTarget"] = request.srcTargetShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateInterceptionRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateInterceptionRuleResponse>(await this.callApi(params, req, runtime), new $_model.CreateInterceptionRuleResponse({}));
  }

  /**
   * Creates a defense rule in the container firewall module.
   * 
   * @param request - CreateInterceptionRuleRequest
   * @returns CreateInterceptionRuleResponse
   */
  async createInterceptionRule(request: $_model.CreateInterceptionRuleRequest): Promise<$_model.CreateInterceptionRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createInterceptionRuleWithOptions(request, runtime);
  }

  /**
   * Creates a defense object.
   * 
   * @param request - CreateInterceptionTargetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateInterceptionTargetResponse
   */
  async createInterceptionTargetWithOptions(request: $_model.CreateInterceptionTargetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateInterceptionTargetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.imageList)) {
      query["ImageList"] = request.imageList;
    }

    if (!$dara.isNull(request.namespace)) {
      query["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.tagList)) {
      query["TagList"] = request.tagList;
    }

    if (!$dara.isNull(request.targetName)) {
      query["TargetName"] = request.targetName;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateInterceptionTarget",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateInterceptionTargetResponse>(await this.callApi(params, req, runtime), new $_model.CreateInterceptionTargetResponse({}));
  }

  /**
   * Creates a defense object.
   * 
   * @param request - CreateInterceptionTargetRequest
   * @returns CreateInterceptionTargetResponse
   */
  async createInterceptionTarget(request: $_model.CreateInterceptionTargetRequest): Promise<$_model.CreateInterceptionTargetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createInterceptionTargetWithOptions(request, runtime);
  }

  /**
   * Creates a Jenkins image repository.
   * 
   * @param request - CreateJenkinsImageRegistryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateJenkinsImageRegistryResponse
   */
  async createJenkinsImageRegistryWithOptions(request: $_model.CreateJenkinsImageRegistryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateJenkinsImageRegistryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.domainName)) {
      body["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.extraParam)) {
      body["ExtraParam"] = request.extraParam;
    }

    if (!$dara.isNull(request.netType)) {
      body["NetType"] = request.netType;
    }

    if (!$dara.isNull(request.password)) {
      body["Password"] = request.password;
    }

    if (!$dara.isNull(request.persistenceDay)) {
      body["PersistenceDay"] = request.persistenceDay;
    }

    if (!$dara.isNull(request.protocolType)) {
      body["ProtocolType"] = request.protocolType;
    }

    if (!$dara.isNull(request.regionId)) {
      body["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.registryHostIp)) {
      body["RegistryHostIp"] = request.registryHostIp;
    }

    if (!$dara.isNull(request.registryName)) {
      body["RegistryName"] = request.registryName;
    }

    if (!$dara.isNull(request.registryType)) {
      body["RegistryType"] = request.registryType;
    }

    if (!$dara.isNull(request.registryVersion)) {
      body["RegistryVersion"] = request.registryVersion;
    }

    if (!$dara.isNull(request.transPerHour)) {
      body["TransPerHour"] = request.transPerHour;
    }

    if (!$dara.isNull(request.userName)) {
      body["UserName"] = request.userName;
    }

    if (!$dara.isNull(request.vpcId)) {
      body["VpcId"] = request.vpcId;
    }

    if (!$dara.isNull(request.whiteList)) {
      body["WhiteList"] = request.whiteList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateJenkinsImageRegistry",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateJenkinsImageRegistryResponse>(await this.callApi(params, req, runtime), new $_model.CreateJenkinsImageRegistryResponse({}));
  }

  /**
   * Creates a Jenkins image repository.
   * 
   * @param request - CreateJenkinsImageRegistryRequest
   * @returns CreateJenkinsImageRegistryResponse
   */
  async createJenkinsImageRegistry(request: $_model.CreateJenkinsImageRegistryRequest): Promise<$_model.CreateJenkinsImageRegistryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createJenkinsImageRegistryWithOptions(request, runtime);
  }

  /**
   * Creates a Jenkins scan task.
   * 
   * @param request - CreateJenkinsImageScanTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateJenkinsImageScanTaskResponse
   */
  async createJenkinsImageScanTaskWithOptions(request: $_model.CreateJenkinsImageScanTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateJenkinsImageScanTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.jenkinsEnv)) {
      query["JenkinsEnv"] = request.jenkinsEnv;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.digest)) {
      body["Digest"] = request.digest;
    }

    if (!$dara.isNull(request.imageCreate)) {
      body["ImageCreate"] = request.imageCreate;
    }

    if (!$dara.isNull(request.imageId)) {
      body["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.imageSize)) {
      body["ImageSize"] = request.imageSize;
    }

    if (!$dara.isNull(request.imageUpdate)) {
      body["ImageUpdate"] = request.imageUpdate;
    }

    if (!$dara.isNull(request.namespace)) {
      body["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.repoName)) {
      body["RepoName"] = request.repoName;
    }

    if (!$dara.isNull(request.tag)) {
      body["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.token)) {
      body["Token"] = request.token;
    }

    if (!$dara.isNull(request.uuid)) {
      body["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateJenkinsImageScanTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateJenkinsImageScanTaskResponse>(await this.callApi(params, req, runtime), new $_model.CreateJenkinsImageScanTaskResponse({}));
  }

  /**
   * Creates a Jenkins scan task.
   * 
   * @param request - CreateJenkinsImageScanTaskRequest
   * @returns CreateJenkinsImageScanTaskResponse
   */
  async createJenkinsImageScanTask(request: $_model.CreateJenkinsImageScanTaskRequest): Promise<$_model.CreateJenkinsImageScanTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createJenkinsImageScanTaskWithOptions(request, runtime);
  }

  /**
   * Creates an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
   * 
   * @param request - CreateMaliciousFileWhitelistConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateMaliciousFileWhitelistConfigResponse
   */
  async createMaliciousFileWhitelistConfigWithOptions(request: $_model.CreateMaliciousFileWhitelistConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateMaliciousFileWhitelistConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eventName)) {
      query["EventName"] = request.eventName;
    }

    if (!$dara.isNull(request.field)) {
      query["Field"] = request.field;
    }

    if (!$dara.isNull(request.fieldValue)) {
      query["FieldValue"] = request.fieldValue;
    }

    if (!$dara.isNull(request.operator)) {
      query["Operator"] = request.operator;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.targetValue)) {
      query["TargetValue"] = request.targetValue;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateMaliciousFileWhitelistConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateMaliciousFileWhitelistConfigResponse>(await this.callApi(params, req, runtime), new $_model.CreateMaliciousFileWhitelistConfigResponse({}));
  }

  /**
   * Creates an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
   * 
   * @param request - CreateMaliciousFileWhitelistConfigRequest
   * @returns CreateMaliciousFileWhitelistConfigResponse
   */
  async createMaliciousFileWhitelistConfig(request: $_model.CreateMaliciousFileWhitelistConfigRequest): Promise<$_model.CreateMaliciousFileWhitelistConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createMaliciousFileWhitelistConfigWithOptions(request, runtime);
  }

  /**
   * Adds remarks to alert events for agentless detection.
   * 
   * @param request - CreateMaliciousNoteRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateMaliciousNoteResponse
   */
  async createMaliciousNoteWithOptions(request: $_model.CreateMaliciousNoteRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateMaliciousNoteResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eventId)) {
      query["EventId"] = request.eventId;
    }

    if (!$dara.isNull(request.note)) {
      query["Note"] = request.note;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateMaliciousNote",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateMaliciousNoteResponse>(await this.callApi(params, req, runtime), new $_model.CreateMaliciousNoteResponse({}));
  }

  /**
   * Adds remarks to alert events for agentless detection.
   * 
   * @param request - CreateMaliciousNoteRequest
   * @returns CreateMaliciousNoteResponse
   */
  async createMaliciousNote(request: $_model.CreateMaliciousNoteRequest): Promise<$_model.CreateMaliciousNoteResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createMaliciousNoteWithOptions(request, runtime);
  }

  /**
   * Creates a list of members of the account monitored by Security Center type by using the multi-account management feature.
   * 
   * @remarks
   * You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
   * 
   * @param request - CreateMonitorAccountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateMonitorAccountResponse
   */
  async createMonitorAccountWithOptions(request: $_model.CreateMonitorAccountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateMonitorAccountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountIds)) {
      query["AccountIds"] = request.accountIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateMonitorAccount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateMonitorAccountResponse>(await this.callApi(params, req, runtime), new $_model.CreateMonitorAccountResponse({}));
  }

  /**
   * Creates a list of members of the account monitored by Security Center type by using the multi-account management feature.
   * 
   * @remarks
   * You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
   * 
   * @param request - CreateMonitorAccountRequest
   * @returns CreateMonitorAccountResponse
   */
  async createMonitorAccount(request: $_model.CreateMonitorAccountRequest): Promise<$_model.CreateMonitorAccountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createMonitorAccountWithOptions(request, runtime);
  }

  /**
   * Installs the components that are required by at-risk image blocking. The components are policy-template-controller, gatekeeper, and logtail-ds.
   * 
   * @param request - CreateOpaClusterPluginRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateOpaClusterPluginResponse
   */
  async createOpaClusterPluginWithOptions(request: $_model.CreateOpaClusterPluginRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateOpaClusterPluginResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterIds)) {
      query["ClusterIds"] = request.clusterIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateOpaClusterPlugin",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateOpaClusterPluginResponse>(await this.callApi(params, req, runtime), new $_model.CreateOpaClusterPluginResponse({}));
  }

  /**
   * Installs the components that are required by at-risk image blocking. The components are policy-template-controller, gatekeeper, and logtail-ds.
   * 
   * @param request - CreateOpaClusterPluginRequest
   * @returns CreateOpaClusterPluginResponse
   */
  async createOpaClusterPlugin(request: $_model.CreateOpaClusterPluginRequest): Promise<$_model.CreateOpaClusterPluginResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createOpaClusterPluginWithOptions(request, runtime);
  }

  /**
   * Creates a rule to block at-risk images.
   * 
   * @param tmpReq - CreateOpaStrategyNewRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateOpaStrategyNewResponse
   */
  async createOpaStrategyNewWithOptions(tmpReq: $_model.CreateOpaStrategyNewRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateOpaStrategyNewResponse> {
    tmpReq.validate();
    let request = new $_model.CreateOpaStrategyNewShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.alarmDetail)) {
      request.alarmDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.alarmDetail, "AlarmDetail", "json");
    }

    let query = { };
    if (!$dara.isNull(request.alarmDetailShrink)) {
      query["AlarmDetail"] = request.alarmDetailShrink;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.imageName)) {
      query["ImageName"] = request.imageName;
    }

    if (!$dara.isNull(request.label)) {
      query["Label"] = request.label;
    }

    if (!$dara.isNull(request.maliciousImage)) {
      query["MaliciousImage"] = request.maliciousImage;
    }

    if (!$dara.isNull(request.ruleAction)) {
      query["RuleAction"] = request.ruleAction;
    }

    if (!$dara.isNull(request.scopes)) {
      query["Scopes"] = request.scopes;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    if (!$dara.isNull(request.strategyName)) {
      query["StrategyName"] = request.strategyName;
    }

    if (!$dara.isNull(request.strategyTemplateId)) {
      query["StrategyTemplateId"] = request.strategyTemplateId;
    }

    if (!$dara.isNull(request.unScanedImage)) {
      query["UnScanedImage"] = request.unScanedImage;
    }

    if (!$dara.isNull(request.whiteList)) {
      query["WhiteList"] = request.whiteList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateOpaStrategyNew",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateOpaStrategyNewResponse>(await this.callApi(params, req, runtime), new $_model.CreateOpaStrategyNewResponse({}));
  }

  /**
   * Creates a rule to block at-risk images.
   * 
   * @param request - CreateOpaStrategyNewRequest
   * @returns CreateOpaStrategyNewResponse
   */
  async createOpaStrategyNew(request: $_model.CreateOpaStrategyNewRequest): Promise<$_model.CreateOpaStrategyNewResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createOpaStrategyNewWithOptions(request, runtime);
  }

  /**
   * Modifies the mapping between an asset and an asset group. For example, you can call this operation to modify the server group to which the asset belongs or the asset list of the asset group.
   * 
   * @remarks
   * A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
   * 
   * @param request - CreateOrUpdateAssetGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateOrUpdateAssetGroupResponse
   */
  async createOrUpdateAssetGroupWithOptions(request: $_model.CreateOrUpdateAssetGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateOrUpdateAssetGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.groupName)) {
      query["GroupName"] = request.groupName;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateOrUpdateAssetGroup",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateOrUpdateAssetGroupResponse>(await this.callApi(params, req, runtime), new $_model.CreateOrUpdateAssetGroupResponse({}));
  }

  /**
   * Modifies the mapping between an asset and an asset group. For example, you can call this operation to modify the server group to which the asset belongs or the asset list of the asset group.
   * 
   * @remarks
   * A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
   * 
   * @param request - CreateOrUpdateAssetGroupRequest
   * @returns CreateOrUpdateAssetGroupResponse
   */
  async createOrUpdateAssetGroup(request: $_model.CreateOrUpdateAssetGroupRequest): Promise<$_model.CreateOrUpdateAssetGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createOrUpdateAssetGroupWithOptions(request, runtime);
  }

  /**
   * Creates an asset auto-tagging rule or modifies an asset auto-tagging rule that is created on the Asset Management Rule tab.
   * 
   * @param request - CreateOrUpdateAutoTagRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateOrUpdateAutoTagRuleResponse
   */
  async createOrUpdateAutoTagRuleWithOptions(request: $_model.CreateOrUpdateAutoTagRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateOrUpdateAutoTagRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkAll)) {
      query["CheckAll"] = request.checkAll;
    }

    if (!$dara.isNull(request.expression)) {
      query["Expression"] = request.expression;
    }

    if (!$dara.isNull(request.ruleDesc)) {
      query["RuleDesc"] = request.ruleDesc;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    if (!$dara.isNull(request.tagContext)) {
      query["TagContext"] = request.tagContext;
    }

    if (!$dara.isNull(request.tagType)) {
      query["TagType"] = request.tagType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateOrUpdateAutoTagRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateOrUpdateAutoTagRuleResponse>(await this.callApi(params, req, runtime), new $_model.CreateOrUpdateAutoTagRuleResponse({}));
  }

  /**
   * Creates an asset auto-tagging rule or modifies an asset auto-tagging rule that is created on the Asset Management Rule tab.
   * 
   * @param request - CreateOrUpdateAutoTagRuleRequest
   * @returns CreateOrUpdateAutoTagRuleResponse
   */
  async createOrUpdateAutoTagRule(request: $_model.CreateOrUpdateAutoTagRuleRequest): Promise<$_model.CreateOrUpdateAutoTagRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createOrUpdateAutoTagRuleWithOptions(request, runtime);
  }

  /**
   * Creates or modifies a DingTalk chatbot that sends notifications.
   * 
   * @param request - CreateOrUpdateDingTalkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateOrUpdateDingTalkResponse
   */
  async createOrUpdateDingTalkWithOptions(request: $_model.CreateOrUpdateDingTalkRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateOrUpdateDingTalkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configList)) {
      query["ConfigList"] = request.configList;
    }

    if (!$dara.isNull(request.dingTalkLang)) {
      query["DingTalkLang"] = request.dingTalkLang;
    }

    if (!$dara.isNull(request.groupIdList)) {
      query["GroupIdList"] = request.groupIdList;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.intervalTime)) {
      query["IntervalTime"] = request.intervalTime;
    }

    if (!$dara.isNull(request.ruleActionName)) {
      query["RuleActionName"] = request.ruleActionName;
    }

    if (!$dara.isNull(request.sendUrl)) {
      query["SendUrl"] = request.sendUrl;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateOrUpdateDingTalk",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateOrUpdateDingTalkResponse>(await this.callApi(params, req, runtime), new $_model.CreateOrUpdateDingTalkResponse({}));
  }

  /**
   * Creates or modifies a DingTalk chatbot that sends notifications.
   * 
   * @param request - CreateOrUpdateDingTalkRequest
   * @returns CreateOrUpdateDingTalkResponse
   */
  async createOrUpdateDingTalk(request: $_model.CreateOrUpdateDingTalkRequest): Promise<$_model.CreateOrUpdateDingTalkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createOrUpdateDingTalkWithOptions(request, runtime);
  }

  /**
   * Creates a bucket check task.
   * 
   * @param request - CreateOssBucketScanTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateOssBucketScanTaskResponse
   */
  async createOssBucketScanTaskWithOptions(request: $_model.CreateOssBucketScanTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateOssBucketScanTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.allKeyPrefix)) {
      query["AllKeyPrefix"] = request.allKeyPrefix;
    }

    if (!$dara.isNull(request.bucketNameList)) {
      query["BucketNameList"] = request.bucketNameList;
    }

    if (!$dara.isNull(request.decompressMaxFileCount)) {
      query["DecompressMaxFileCount"] = request.decompressMaxFileCount;
    }

    if (!$dara.isNull(request.decompressMaxLayer)) {
      query["DecompressMaxLayer"] = request.decompressMaxLayer;
    }

    if (!$dara.isNull(request.decryptionList)) {
      query["DecryptionList"] = request.decryptionList;
    }

    if (!$dara.isNull(request.excludeKeySuffixList)) {
      query["ExcludeKeySuffixList"] = request.excludeKeySuffixList;
    }

    if (!$dara.isNull(request.keyPrefixList)) {
      query["KeyPrefixList"] = request.keyPrefixList;
    }

    if (!$dara.isNull(request.keySuffixList)) {
      query["KeySuffixList"] = request.keySuffixList;
    }

    if (!$dara.isNull(request.lastModifiedStartTime)) {
      query["LastModifiedStartTime"] = request.lastModifiedStartTime;
    }

    if (!$dara.isNull(request.scanMode)) {
      query["ScanMode"] = request.scanMode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateOssBucketScanTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateOssBucketScanTaskResponse>(await this.callApi(params, req, runtime), new $_model.CreateOssBucketScanTaskResponse({}));
  }

  /**
   * Creates a bucket check task.
   * 
   * @param request - CreateOssBucketScanTaskRequest
   * @returns CreateOssBucketScanTaskResponse
   */
  async createOssBucketScanTask(request: $_model.CreateOssBucketScanTaskRequest): Promise<$_model.CreateOssBucketScanTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createOssBucketScanTaskWithOptions(request, runtime);
  }

  /**
   * Creates a policy for detecting malicious Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
   * 
   * @param request - CreateOssScanConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateOssScanConfigResponse
   */
  async createOssScanConfigWithOptions(request: $_model.CreateOssScanConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateOssScanConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.allKeyPrefix)) {
      query["AllKeyPrefix"] = request.allKeyPrefix;
    }

    if (!$dara.isNull(request.bucketNameList)) {
      query["BucketNameList"] = request.bucketNameList;
    }

    if (!$dara.isNull(request.decompressMaxFileCount)) {
      query["DecompressMaxFileCount"] = request.decompressMaxFileCount;
    }

    if (!$dara.isNull(request.decompressMaxLayer)) {
      query["DecompressMaxLayer"] = request.decompressMaxLayer;
    }

    if (!$dara.isNull(request.decryptionList)) {
      query["DecryptionList"] = request.decryptionList;
    }

    if (!$dara.isNull(request.enable)) {
      query["Enable"] = request.enable;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.keyPrefixList)) {
      query["KeyPrefixList"] = request.keyPrefixList;
    }

    if (!$dara.isNull(request.keySuffixList)) {
      query["KeySuffixList"] = request.keySuffixList;
    }

    if (!$dara.isNull(request.lastModifiedStartTime)) {
      query["LastModifiedStartTime"] = request.lastModifiedStartTime;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.realTimeIncr)) {
      query["RealTimeIncr"] = request.realTimeIncr;
    }

    if (!$dara.isNull(request.scanDayList)) {
      query["ScanDayList"] = request.scanDayList;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateOssScanConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateOssScanConfigResponse>(await this.callApi(params, req, runtime), new $_model.CreateOssScanConfigResponse({}));
  }

  /**
   * Creates a policy for detecting malicious Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
   * 
   * @param request - CreateOssScanConfigRequest
   * @returns CreateOssScanConfigResponse
   */
  async createOssScanConfig(request: $_model.CreateOssScanConfigRequest): Promise<$_model.CreateOssScanConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createOssScanConfigWithOptions(request, runtime);
  }

  /**
   * Creates an automatic account management policy for members of the account monitored by Security Center type by using the multi-account management feature. After the policy is created, the members that are newly added to the specified resource directory are automatically added to the list of members of the account monitored by Security Center type.
   * 
   * @remarks
   * You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
   * 
   * @param request - CreateRdDefaultSyncListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateRdDefaultSyncListResponse
   */
  async createRdDefaultSyncListWithOptions(request: $_model.CreateRdDefaultSyncListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateRdDefaultSyncListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.folderIds)) {
      query["FolderIds"] = request.folderIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateRdDefaultSyncList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateRdDefaultSyncListResponse>(await this.callApi(params, req, runtime), new $_model.CreateRdDefaultSyncListResponse({}));
  }

  /**
   * Creates an automatic account management policy for members of the account monitored by Security Center type by using the multi-account management feature. After the policy is created, the members that are newly added to the specified resource directory are automatically added to the list of members of the account monitored by Security Center type.
   * 
   * @remarks
   * You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
   * 
   * @param request - CreateRdDefaultSyncListRequest
   * @returns CreateRdDefaultSyncListResponse
   */
  async createRdDefaultSyncList(request: $_model.CreateRdDefaultSyncListRequest): Promise<$_model.CreateRdDefaultSyncListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createRdDefaultSyncListWithOptions(request, runtime);
  }

  /**
   * Creates a restoration task.
   * 
   * @param request - CreateRestoreJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateRestoreJobResponse
   */
  async createRestoreJobWithOptions(request: $_model.CreateRestoreJobRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateRestoreJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.includes)) {
      query["Includes"] = request.includes;
    }

    if (!$dara.isNull(request.snapshotHash)) {
      query["SnapshotHash"] = request.snapshotHash;
    }

    if (!$dara.isNull(request.snapshotId)) {
      query["SnapshotId"] = request.snapshotId;
    }

    if (!$dara.isNull(request.snapshotVersion)) {
      query["SnapshotVersion"] = request.snapshotVersion;
    }

    if (!$dara.isNull(request.sourceType)) {
      query["SourceType"] = request.sourceType;
    }

    if (!$dara.isNull(request.target)) {
      query["Target"] = request.target;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    if (!$dara.isNull(request.vaultId)) {
      query["VaultId"] = request.vaultId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateRestoreJob",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateRestoreJobResponse>(await this.callApi(params, req, runtime), new $_model.CreateRestoreJobResponse({}));
  }

  /**
   * Creates a restoration task.
   * 
   * @param request - CreateRestoreJobRequest
   * @returns CreateRestoreJobResponse
   */
  async createRestoreJob(request: $_model.CreateRestoreJobRequest): Promise<$_model.CreateRestoreJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createRestoreJobWithOptions(request, runtime);
  }

  /**
   * Applies for a trial of Security Center.
   * 
   * @param tmpReq - CreateSasTrialRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateSasTrialResponse
   */
  async createSasTrialWithOptions(tmpReq: $_model.CreateSasTrialRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateSasTrialResponse> {
    tmpReq.validate();
    let request = new $_model.CreateSasTrialShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.requestForm)) {
      request.requestFormShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.requestForm, "RequestForm", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.fromEcs)) {
      body["FromEcs"] = request.fromEcs;
    }

    if (!$dara.isNull(request.lang)) {
      body["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.requestFormShrink)) {
      body["RequestForm"] = request.requestFormShrink;
    }

    if (!$dara.isNull(request.tryType)) {
      body["TryType"] = request.tryType;
    }

    if (!$dara.isNull(request.tryVersion)) {
      body["TryVersion"] = request.tryVersion;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateSasTrial",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateSasTrialResponse>(await this.callApi(params, req, runtime), new $_model.CreateSasTrialResponse({}));
  }

  /**
   * Applies for a trial of Security Center.
   * 
   * @param request - CreateSasTrialRequest
   * @returns CreateSasTrialResponse
   */
  async createSasTrial(request: $_model.CreateSasTrialRequest): Promise<$_model.CreateSasTrialResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createSasTrialWithOptions(request, runtime);
  }

  /**
   * Creates a service-linked role and authorizes Security Center to access cloud resources.
   * 
   * @remarks
   * For more information about service-linked roles, see [Service-linked roles](https://help.aliyun.com/document_detail/160674.html).
   * 
   * @param request - CreateServiceLinkedRoleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateServiceLinkedRoleResponse
   */
  async createServiceLinkedRoleWithOptions(request: $_model.CreateServiceLinkedRoleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateServiceLinkedRoleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.serviceLinkedRole)) {
      query["ServiceLinkedRole"] = request.serviceLinkedRole;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateServiceLinkedRole",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateServiceLinkedRoleResponse>(await this.callApi(params, req, runtime), new $_model.CreateServiceLinkedRoleResponse({}));
  }

  /**
   * Creates a service-linked role and authorizes Security Center to access cloud resources.
   * 
   * @remarks
   * For more information about service-linked roles, see [Service-linked roles](https://help.aliyun.com/document_detail/160674.html).
   * 
   * @param request - CreateServiceLinkedRoleRequest
   * @returns CreateServiceLinkedRoleResponse
   */
  async createServiceLinkedRole(request: $_model.CreateServiceLinkedRoleRequest): Promise<$_model.CreateServiceLinkedRoleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createServiceLinkedRoleWithOptions(request, runtime);
  }

  /**
   * Create a service trail.
   * 
   * @param request - CreateServiceTrailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateServiceTrailResponse
   */
  async createServiceTrailWithOptions(request: $_model.CreateServiceTrailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateServiceTrailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateServiceTrail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateServiceTrailResponse>(await this.callApi(params, req, runtime), new $_model.CreateServiceTrailResponse({}));
  }

  /**
   * Create a service trail.
   * 
   * @param request - CreateServiceTrailRequest
   * @returns CreateServiceTrailResponse
   */
  async createServiceTrail(request: $_model.CreateServiceTrailRequest): Promise<$_model.CreateServiceTrailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createServiceTrailWithOptions(request, runtime);
  }

  /**
   * Creates a task to query alert events that are triggered by the same rule or of the same alert type.
   * 
   * @param request - CreateSimilarSecurityEventsQueryTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateSimilarSecurityEventsQueryTaskResponse
   */
  async createSimilarSecurityEventsQueryTaskWithOptions(request: $_model.CreateSimilarSecurityEventsQueryTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateSimilarSecurityEventsQueryTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityEventId)) {
      query["SecurityEventId"] = request.securityEventId;
    }

    if (!$dara.isNull(request.similarEventScenarioCode)) {
      query["SimilarEventScenarioCode"] = request.similarEventScenarioCode;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateSimilarSecurityEventsQueryTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateSimilarSecurityEventsQueryTaskResponse>(await this.callApi(params, req, runtime), new $_model.CreateSimilarSecurityEventsQueryTaskResponse({}));
  }

  /**
   * Creates a task to query alert events that are triggered by the same rule or of the same alert type.
   * 
   * @param request - CreateSimilarSecurityEventsQueryTaskRequest
   * @returns CreateSimilarSecurityEventsQueryTaskResponse
   */
  async createSimilarSecurityEventsQueryTask(request: $_model.CreateSimilarSecurityEventsQueryTaskRequest): Promise<$_model.CreateSimilarSecurityEventsQueryTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createSimilarSecurityEventsQueryTaskWithOptions(request, runtime);
  }

  /**
   * Creates a task on the My Policies tab of the Playbook page.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - CreateSoarStrategyTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateSoarStrategyTaskResponse
   */
  async createSoarStrategyTaskWithOptions(request: $_model.CreateSoarStrategyTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateSoarStrategyTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    if (!$dara.isNull(request.strategyName)) {
      query["StrategyName"] = request.strategyName;
    }

    if (!$dara.isNull(request.strategyTaskName)) {
      query["StrategyTaskName"] = request.strategyTaskName;
    }

    if (!$dara.isNull(request.strategyTaskParams)) {
      query["StrategyTaskParams"] = request.strategyTaskParams;
    }

    if (!$dara.isNull(request.strategyTaskPlanExeTime)) {
      query["StrategyTaskPlanExeTime"] = request.strategyTaskPlanExeTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateSoarStrategyTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateSoarStrategyTaskResponse>(await this.callApi(params, req, runtime), new $_model.CreateSoarStrategyTaskResponse({}));
  }

  /**
   * Creates a task on the My Policies tab of the Playbook page.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - CreateSoarStrategyTaskRequest
   * @returns CreateSoarStrategyTaskResponse
   */
  async createSoarStrategyTask(request: $_model.CreateSoarStrategyTaskRequest): Promise<$_model.CreateSoarStrategyTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createSoarStrategyTaskWithOptions(request, runtime);
  }

  /**
   * Adds remarks to an alert event.
   * 
   * @param request - CreateSuspEventNoteRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateSuspEventNoteResponse
   */
  async createSuspEventNoteWithOptions(request: $_model.CreateSuspEventNoteRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateSuspEventNoteResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eventId)) {
      query["EventId"] = request.eventId;
    }

    if (!$dara.isNull(request.note)) {
      query["Note"] = request.note;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateSuspEventNote",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateSuspEventNoteResponse>(await this.callApi(params, req, runtime), new $_model.CreateSuspEventNoteResponse({}));
  }

  /**
   * Adds remarks to an alert event.
   * 
   * @param request - CreateSuspEventNoteRequest
   * @returns CreateSuspEventNoteResponse
   */
  async createSuspEventNote(request: $_model.CreateSuspEventNoteRequest): Promise<$_model.CreateSuspEventNoteResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createSuspEventNoteWithOptions(request, runtime);
  }

  /**
   * Creates an anti-ransomware policy for a database.
   * 
   * @param tmpReq - CreateUniBackupPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateUniBackupPolicyResponse
   */
  async createUniBackupPolicyWithOptions(tmpReq: $_model.CreateUniBackupPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateUniBackupPolicyResponse> {
    tmpReq.validate();
    let request = new $_model.CreateUniBackupPolicyShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.fullPlan)) {
      request.fullPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fullPlan, "FullPlan", "json");
    }

    if (!$dara.isNull(tmpReq.incPlan)) {
      request.incPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.incPlan, "IncPlan", "json");
    }

    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.accountPassword)) {
      query["AccountPassword"] = request.accountPassword;
    }

    if (!$dara.isNull(request.databaseAddByUser)) {
      query["DatabaseAddByUser"] = request.databaseAddByUser;
    }

    if (!$dara.isNull(request.databaseType)) {
      query["DatabaseType"] = request.databaseType;
    }

    if (!$dara.isNull(request.fullPlanShrink)) {
      query["FullPlan"] = request.fullPlanShrink;
    }

    if (!$dara.isNull(request.incPlanShrink)) {
      query["IncPlan"] = request.incPlanShrink;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.policyName)) {
      query["PolicyName"] = request.policyName;
    }

    if (!$dara.isNull(request.retention)) {
      query["Retention"] = request.retention;
    }

    if (!$dara.isNull(request.speedLimiter)) {
      query["SpeedLimiter"] = request.speedLimiter;
    }

    if (!$dara.isNull(request.uniRegionId)) {
      query["UniRegionId"] = request.uniRegionId;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateUniBackupPolicy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateUniBackupPolicyResponse>(await this.callApi(params, req, runtime), new $_model.CreateUniBackupPolicyResponse({}));
  }

  /**
   * Creates an anti-ransomware policy for a database.
   * 
   * @param request - CreateUniBackupPolicyRequest
   * @returns CreateUniBackupPolicyResponse
   */
  async createUniBackupPolicy(request: $_model.CreateUniBackupPolicyRequest): Promise<$_model.CreateUniBackupPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createUniBackupPolicyWithOptions(request, runtime);
  }

  /**
   * Creates a restoration task for a database.
   * 
   * @param request - CreateUniRestorePlanRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateUniRestorePlanResponse
   */
  async createUniRestorePlanWithOptions(request: $_model.CreateUniRestorePlanRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateUniRestorePlanResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.database)) {
      query["Database"] = request.database;
    }

    if (!$dara.isNull(request.instanceUuid)) {
      query["InstanceUuid"] = request.instanceUuid;
    }

    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    if (!$dara.isNull(request.resetScn)) {
      query["ResetScn"] = request.resetScn;
    }

    if (!$dara.isNull(request.resetTime)) {
      query["ResetTime"] = request.resetTime;
    }

    if (!$dara.isNull(request.restoreInfo)) {
      query["RestoreInfo"] = request.restoreInfo;
    }

    if (!$dara.isNull(request.timePoint)) {
      query["TimePoint"] = request.timePoint;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateUniRestorePlan",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateUniRestorePlanResponse>(await this.callApi(params, req, runtime), new $_model.CreateUniRestorePlanResponse({}));
  }

  /**
   * Creates a restoration task for a database.
   * 
   * @param request - CreateUniRestorePlanRequest
   * @returns CreateUniRestorePlanResponse
   */
  async createUniRestorePlan(request: $_model.CreateUniRestorePlanRequest): Promise<$_model.CreateUniRestorePlanResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createUniRestorePlanWithOptions(request, runtime);
  }

  /**
   * Creates the risk level settings for baseline check items.
   * 
   * @param request - CreateUserSettingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateUserSettingResponse
   */
  async createUserSettingWithOptions(request: $_model.CreateUserSettingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateUserSettingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.alertLevels)) {
      query["AlertLevels"] = request.alertLevels;
    }

    if (!$dara.isNull(request.invalidWarningKeepDays)) {
      query["InvalidWarningKeepDays"] = request.invalidWarningKeepDays;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateUserSetting",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateUserSettingResponse>(await this.callApi(params, req, runtime), new $_model.CreateUserSettingResponse({}));
  }

  /**
   * Creates the risk level settings for baseline check items.
   * 
   * @param request - CreateUserSettingRequest
   * @returns CreateUserSettingResponse
   */
  async createUserSetting(request: $_model.CreateUserSettingRequest): Promise<$_model.CreateUserSettingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createUserSettingWithOptions(request, runtime);
  }

  /**
   * Creates a one-time virus scan task that is immediately executed.
   * 
   * @param request - CreateVirusScanOnceTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateVirusScanOnceTaskResponse
   */
  async createVirusScanOnceTaskWithOptions(request: $_model.CreateVirusScanOnceTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateVirusScanOnceTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.param)) {
      query["Param"] = request.param;
    }

    if (!$dara.isNull(request.scanPath)) {
      query["ScanPath"] = request.scanPath;
    }

    if (!$dara.isNull(request.scanType)) {
      query["ScanType"] = request.scanType;
    }

    if (!$dara.isNull(request.selectionKey)) {
      query["SelectionKey"] = request.selectionKey;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateVirusScanOnceTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateVirusScanOnceTaskResponse>(await this.callApi(params, req, runtime), new $_model.CreateVirusScanOnceTaskResponse({}));
  }

  /**
   * Creates a one-time virus scan task that is immediately executed.
   * 
   * @param request - CreateVirusScanOnceTaskRequest
   * @returns CreateVirusScanOnceTaskResponse
   */
  async createVirusScanOnceTask(request: $_model.CreateVirusScanOnceTaskRequest): Promise<$_model.CreateVirusScanOnceTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createVirusScanOnceTaskWithOptions(request, runtime);
  }

  /**
   * Creates a list of vulnerabilities that can be automatically fixed. After the list is created, you can select the list when you create a vulnerability fixing task on the Playbook page.
   * 
   * @param request - CreateVulAutoRepairConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateVulAutoRepairConfigResponse
   */
  async createVulAutoRepairConfigWithOptions(request: $_model.CreateVulAutoRepairConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateVulAutoRepairConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.reason)) {
      query["Reason"] = request.reason;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.vulAutoRepairConfigList)) {
      query["VulAutoRepairConfigList"] = request.vulAutoRepairConfigList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateVulAutoRepairConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateVulAutoRepairConfigResponse>(await this.callApi(params, req, runtime), new $_model.CreateVulAutoRepairConfigResponse({}));
  }

  /**
   * Creates a list of vulnerabilities that can be automatically fixed. After the list is created, you can select the list when you create a vulnerability fixing task on the Playbook page.
   * 
   * @param request - CreateVulAutoRepairConfigRequest
   * @returns CreateVulAutoRepairConfigResponse
   */
  async createVulAutoRepairConfig(request: $_model.CreateVulAutoRepairConfigRequest): Promise<$_model.CreateVulAutoRepairConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createVulAutoRepairConfigWithOptions(request, runtime);
  }

  /**
   * Deletes the specified defense rules against brute-force attacks.
   * 
   * @param request - DeleteAntiBruteForceRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteAntiBruteForceRuleResponse
   */
  async deleteAntiBruteForceRuleWithOptions(request: $_model.DeleteAntiBruteForceRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteAntiBruteForceRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ids)) {
      query["Ids"] = request.ids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteAntiBruteForceRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteAntiBruteForceRuleResponse>(await this.callApi(params, req, runtime), new $_model.DeleteAntiBruteForceRuleResponse({}));
  }

  /**
   * Deletes the specified defense rules against brute-force attacks.
   * 
   * @param request - DeleteAntiBruteForceRuleRequest
   * @returns DeleteAntiBruteForceRuleResponse
   */
  async deleteAntiBruteForceRule(request: $_model.DeleteAntiBruteForceRuleRequest): Promise<$_model.DeleteAntiBruteForceRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteAntiBruteForceRuleWithOptions(request, runtime);
  }

  /**
   * Delete attack path sensitive asset.
   * 
   * @param request - DeleteAttackPathSensitiveAssetConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteAttackPathSensitiveAssetConfigResponse
   */
  async deleteAttackPathSensitiveAssetConfigWithOptions(request: $_model.DeleteAttackPathSensitiveAssetConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteAttackPathSensitiveAssetConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.attackPathSensitiveAssetConfigId)) {
      query["AttackPathSensitiveAssetConfigId"] = request.attackPathSensitiveAssetConfigId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteAttackPathSensitiveAssetConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteAttackPathSensitiveAssetConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteAttackPathSensitiveAssetConfigResponse({}));
  }

  /**
   * Delete attack path sensitive asset.
   * 
   * @param request - DeleteAttackPathSensitiveAssetConfigRequest
   * @returns DeleteAttackPathSensitiveAssetConfigResponse
   */
  async deleteAttackPathSensitiveAssetConfig(request: $_model.DeleteAttackPathSensitiveAssetConfigRequest): Promise<$_model.DeleteAttackPathSensitiveAssetConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteAttackPathSensitiveAssetConfigWithOptions(request, runtime);
  }

  /**
   * Delete Attack Path Whitelist.
   * 
   * @param request - DeleteAttackPathWhitelistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteAttackPathWhitelistResponse
   */
  async deleteAttackPathWhitelistWithOptions(request: $_model.DeleteAttackPathWhitelistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteAttackPathWhitelistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.attackPathWhitelistId)) {
      query["AttackPathWhitelistId"] = request.attackPathWhitelistId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteAttackPathWhitelist",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteAttackPathWhitelistResponse>(await this.callApi(params, req, runtime), new $_model.DeleteAttackPathWhitelistResponse({}));
  }

  /**
   * Delete Attack Path Whitelist.
   * 
   * @param request - DeleteAttackPathWhitelistRequest
   * @returns DeleteAttackPathWhitelistResponse
   */
  async deleteAttackPathWhitelist(request: $_model.DeleteAttackPathWhitelistRequest): Promise<$_model.DeleteAttackPathWhitelistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteAttackPathWhitelistWithOptions(request, runtime);
  }

  /**
   * Deletes a witness.
   * 
   * @param request - DeleteAttestorRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteAttestorResponse
   */
  async deleteAttestorWithOptions(request: $_model.DeleteAttestorRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteAttestorResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteAttestor",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteAttestorResponse>(await this.callApi(params, req, runtime), new $_model.DeleteAttestorResponse({}));
  }

  /**
   * Deletes a witness.
   * 
   * @param request - DeleteAttestorRequest
   * @returns DeleteAttestorResponse
   */
  async deleteAttestor(request: $_model.DeleteAttestorRequest): Promise<$_model.DeleteAttestorResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteAttestorWithOptions(request, runtime);
  }

  /**
   * Deletes asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
   * 
   * @param request - DeleteAutoTagRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteAutoTagRulesResponse
   */
  async deleteAutoTagRulesWithOptions(request: $_model.DeleteAutoTagRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteAutoTagRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ruleIdList)) {
      query["RuleIdList"] = request.ruleIdList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteAutoTagRules",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteAutoTagRulesResponse>(await this.callApi(params, req, runtime), new $_model.DeleteAutoTagRulesResponse({}));
  }

  /**
   * Deletes asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
   * 
   * @param request - DeleteAutoTagRulesRequest
   * @returns DeleteAutoTagRulesResponse
   */
  async deleteAutoTagRules(request: $_model.DeleteAutoTagRulesRequest): Promise<$_model.DeleteAutoTagRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteAutoTagRulesWithOptions(request, runtime);
  }

  /**
   * Deletes an anti-ransomware policy.
   * 
   * @param request - DeleteBackupPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteBackupPolicyResponse
   */
  async deleteBackupPolicyWithOptions(request: $_model.DeleteBackupPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteBackupPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.policyVersion)) {
      query["PolicyVersion"] = request.policyVersion;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteBackupPolicy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteBackupPolicyResponse>(await this.callApi(params, req, runtime), new $_model.DeleteBackupPolicyResponse({}));
  }

  /**
   * Deletes an anti-ransomware policy.
   * 
   * @param request - DeleteBackupPolicyRequest
   * @returns DeleteBackupPolicyResponse
   */
  async deleteBackupPolicy(request: $_model.DeleteBackupPolicyRequest): Promise<$_model.DeleteBackupPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteBackupPolicyWithOptions(request, runtime);
  }

  /**
   * Disables a specified anti-ransomware policy that is applied to specified servers and uninstalls the anti-ransomware agent from the servers. If the backup vaults of the servers contain only backup data of the servers, the backup vaults are deleted.
   * 
   * @param request - DeleteBackupPolicyMachineRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteBackupPolicyMachineResponse
   */
  async deleteBackupPolicyMachineWithOptions(request: $_model.DeleteBackupPolicyMachineRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteBackupPolicyMachineResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    if (!$dara.isNull(request.policyVersion)) {
      query["PolicyVersion"] = request.policyVersion;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteBackupPolicyMachine",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteBackupPolicyMachineResponse>(await this.callApi(params, req, runtime), new $_model.DeleteBackupPolicyMachineResponse({}));
  }

  /**
   * Disables a specified anti-ransomware policy that is applied to specified servers and uninstalls the anti-ransomware agent from the servers. If the backup vaults of the servers contain only backup data of the servers, the backup vaults are deleted.
   * 
   * @param request - DeleteBackupPolicyMachineRequest
   * @returns DeleteBackupPolicyMachineResponse
   */
  async deleteBackupPolicyMachine(request: $_model.DeleteBackupPolicyMachineRequest): Promise<$_model.DeleteBackupPolicyMachineResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteBackupPolicyMachineWithOptions(request, runtime);
  }

  /**
   * Deletes a backup snapshot that is created for anti-ransomware.
   * 
   * @param request - DeleteBackupSnapshotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteBackupSnapshotResponse
   */
  async deleteBackupSnapshotWithOptions(request: $_model.DeleteBackupSnapshotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteBackupSnapshotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupRegionIdList)) {
      query["BackupRegionIdList"] = request.backupRegionIdList;
    }

    if (!$dara.isNull(request.backupSnapshotList)) {
      query["BackupSnapshotList"] = request.backupSnapshotList;
    }

    if (!$dara.isNull(request.retainLatestSnapshot)) {
      query["RetainLatestSnapshot"] = request.retainLatestSnapshot;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteBackupSnapshot",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteBackupSnapshotResponse>(await this.callApi(params, req, runtime), new $_model.DeleteBackupSnapshotResponse({}));
  }

  /**
   * Deletes a backup snapshot that is created for anti-ransomware.
   * 
   * @param request - DeleteBackupSnapshotRequest
   * @returns DeleteBackupSnapshotResponse
   */
  async deleteBackupSnapshot(request: $_model.DeleteBackupSnapshotRequest): Promise<$_model.DeleteBackupSnapshotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteBackupSnapshotWithOptions(request, runtime);
  }

  /**
   * Deletes the whitelist record for a baseline check item.
   * 
   * @param request - DeleteBaselineCheckWhiteRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteBaselineCheckWhiteRecordResponse
   */
  async deleteBaselineCheckWhiteRecordWithOptions(request: $_model.DeleteBaselineCheckWhiteRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteBaselineCheckWhiteRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkIds)) {
      query["CheckIds"] = request.checkIds;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.recordIds)) {
      query["RecordIds"] = request.recordIds;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteBaselineCheckWhiteRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteBaselineCheckWhiteRecordResponse>(await this.callApi(params, req, runtime), new $_model.DeleteBaselineCheckWhiteRecordResponse({}));
  }

  /**
   * Deletes the whitelist record for a baseline check item.
   * 
   * @param request - DeleteBaselineCheckWhiteRecordRequest
   * @returns DeleteBaselineCheckWhiteRecordResponse
   */
  async deleteBaselineCheckWhiteRecord(request: $_model.DeleteBaselineCheckWhiteRecordRequest): Promise<$_model.DeleteBaselineCheckWhiteRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteBaselineCheckWhiteRecordWithOptions(request, runtime);
  }

  /**
   * Deletes a binary security policy from the container signature feature.
   * 
   * @param request - DeleteBinarySecurityPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteBinarySecurityPolicyResponse
   */
  async deleteBinarySecurityPolicyWithOptions(request: $_model.DeleteBinarySecurityPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteBinarySecurityPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteBinarySecurityPolicy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteBinarySecurityPolicyResponse>(await this.callApi(params, req, runtime), new $_model.DeleteBinarySecurityPolicyResponse({}));
  }

  /**
   * Deletes a binary security policy from the container signature feature.
   * 
   * @param request - DeleteBinarySecurityPolicyRequest
   * @returns DeleteBinarySecurityPolicyResponse
   */
  async deleteBinarySecurityPolicy(request: $_model.DeleteBinarySecurityPolicyRequest): Promise<$_model.DeleteBinarySecurityPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteBinarySecurityPolicyWithOptions(request, runtime);
  }

  /**
   * 删除自定义策略
   * 
   * @param request - DeleteCheckPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCheckPolicyResponse
   */
  async deleteCheckPolicyWithOptions(request: $_model.DeleteCheckPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCheckPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.policyIds)) {
      query["PolicyIds"] = request.policyIds;
    }

    if (!$dara.isNull(request.policyType)) {
      query["PolicyType"] = request.policyType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCheckPolicy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCheckPolicyResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCheckPolicyResponse({}));
  }

  /**
   * 删除自定义策略
   * 
   * @param request - DeleteCheckPolicyRequest
   * @returns DeleteCheckPolicyResponse
   */
  async deleteCheckPolicy(request: $_model.DeleteCheckPolicyRequest): Promise<$_model.DeleteCheckPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCheckPolicyWithOptions(request, runtime);
  }

  /**
   * Deletes specified custom defense rules.
   * 
   * @param request - DeleteClientUserDefineRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteClientUserDefineRuleResponse
   */
  async deleteClientUserDefineRuleWithOptions(request: $_model.DeleteClientUserDefineRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteClientUserDefineRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.idList)) {
      query["IdList"] = request.idList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteClientUserDefineRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteClientUserDefineRuleResponse>(await this.callApi(params, req, runtime), new $_model.DeleteClientUserDefineRuleResponse({}));
  }

  /**
   * Deletes specified custom defense rules.
   * 
   * @param request - DeleteClientUserDefineRuleRequest
   * @returns DeleteClientUserDefineRuleResponse
   */
  async deleteClientUserDefineRule(request: $_model.DeleteClientUserDefineRuleRequest): Promise<$_model.DeleteClientUserDefineRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteClientUserDefineRuleWithOptions(request, runtime);
  }

  /**
   * Delete multi-cloud asset synchronization configuration.
   * 
   * @param request - DeleteCloudVendorAccountAKRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCloudVendorAccountAKResponse
   */
  async deleteCloudVendorAccountAKWithOptions(request: $_model.DeleteCloudVendorAccountAKRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCloudVendorAccountAKResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.authId)) {
      query["AuthId"] = request.authId;
    }

    if (!$dara.isNull(request.authModules)) {
      query["AuthModules"] = request.authModules;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCloudVendorAccountAK",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCloudVendorAccountAKResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCloudVendorAccountAKResponse({}));
  }

  /**
   * Delete multi-cloud asset synchronization configuration.
   * 
   * @param request - DeleteCloudVendorAccountAKRequest
   * @returns DeleteCloudVendorAccountAKResponse
   */
  async deleteCloudVendorAccountAK(request: $_model.DeleteCloudVendorAccountAKRequest): Promise<$_model.DeleteCloudVendorAccountAKResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCloudVendorAccountAKWithOptions(request, runtime);
  }

  /**
   * Deletes a rule for non-image program defense.
   * 
   * @param request - DeleteContainerDefenseRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteContainerDefenseRuleResponse
   */
  async deleteContainerDefenseRuleWithOptions(request: $_model.DeleteContainerDefenseRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteContainerDefenseRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ruleIds)) {
      query["RuleIds"] = request.ruleIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteContainerDefenseRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteContainerDefenseRuleResponse>(await this.callApi(params, req, runtime), new $_model.DeleteContainerDefenseRuleResponse({}));
  }

  /**
   * Deletes a rule for non-image program defense.
   * 
   * @param request - DeleteContainerDefenseRuleRequest
   * @returns DeleteContainerDefenseRuleResponse
   */
  async deleteContainerDefenseRule(request: $_model.DeleteContainerDefenseRuleRequest): Promise<$_model.DeleteContainerDefenseRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteContainerDefenseRuleWithOptions(request, runtime);
  }

  /**
   * Deletes a defense rule against container escapes.
   * 
   * @param request - DeleteContainerPluginRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteContainerPluginRuleResponse
   */
  async deleteContainerPluginRuleWithOptions(request: $_model.DeleteContainerPluginRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteContainerPluginRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteContainerPluginRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteContainerPluginRuleResponse>(await this.callApi(params, req, runtime), new $_model.DeleteContainerPluginRuleResponse({}));
  }

  /**
   * Deletes a defense rule against container escapes.
   * 
   * @param request - DeleteContainerPluginRuleRequest
   * @returns DeleteContainerPluginRuleResponse
   */
  async deleteContainerPluginRule(request: $_model.DeleteContainerPluginRuleRequest): Promise<$_model.DeleteContainerPluginRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteContainerPluginRuleWithOptions(request, runtime);
  }

  /**
   * Deletes a specified IP address blocking policy from one or more servers.
   * 
   * @param request - DeleteCustomBlockRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCustomBlockRecordResponse
   */
  async deleteCustomBlockRecordWithOptions(request: $_model.DeleteCustomBlockRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCustomBlockRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCustomBlockRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCustomBlockRecordResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCustomBlockRecordResponse({}));
  }

  /**
   * Deletes a specified IP address blocking policy from one or more servers.
   * 
   * @param request - DeleteCustomBlockRecordRequest
   * @returns DeleteCustomBlockRecordResponse
   */
  async deleteCustomBlockRecord(request: $_model.DeleteCustomBlockRecordRequest): Promise<$_model.DeleteCustomBlockRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCustomBlockRecordWithOptions(request, runtime);
  }

  /**
   * Deletes a custom security report.
   * 
   * @param request - DeleteCustomizeReportRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCustomizeReportResponse
   */
  async deleteCustomizeReportWithOptions(request: $_model.DeleteCustomizeReportRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCustomizeReportResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.reportId)) {
      query["ReportId"] = request.reportId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCustomizeReport",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCustomizeReportResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCustomizeReportResponse({}));
  }

  /**
   * Deletes a custom security report.
   * 
   * @param request - DeleteCustomizeReportRequest
   * @returns DeleteCustomizeReportResponse
   */
  async deleteCustomizeReport(request: $_model.DeleteCustomizeReportRequest): Promise<$_model.DeleteCustomizeReportResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCustomizeReportWithOptions(request, runtime);
  }

  /**
   * Deletes the file that is uploaded to create custom weak password rules.
   * 
   * @param request - DeleteCustomizedDictRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCustomizedDictResponse
   */
  async deleteCustomizedDictWithOptions(request: $_model.DeleteCustomizedDictRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCustomizedDictResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCustomizedDict",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCustomizedDictResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCustomizedDictResponse({}));
  }

  /**
   * Deletes the file that is uploaded to create custom weak password rules.
   * 
   * @param request - DeleteCustomizedDictRequest
   * @returns DeleteCustomizedDictResponse
   */
  async deleteCustomizedDict(request: $_model.DeleteCustomizedDictRequest): Promise<$_model.DeleteCustomizedDictResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCustomizedDictWithOptions(request, runtime);
  }

  /**
   * Deletes a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
   * 
   * @param request - DeleteCycleTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteCycleTaskResponse
   */
  async deleteCycleTaskWithOptions(request: $_model.DeleteCycleTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteCycleTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configId)) {
      query["ConfigId"] = request.configId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteCycleTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteCycleTaskResponse>(await this.callApi(params, req, runtime), new $_model.DeleteCycleTaskResponse({}));
  }

  /**
   * Deletes a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
   * 
   * @param request - DeleteCycleTaskRequest
   * @returns DeleteCycleTaskResponse
   */
  async deleteCycleTask(request: $_model.DeleteCycleTaskRequest): Promise<$_model.DeleteCycleTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteCycleTaskWithOptions(request, runtime);
  }

  /**
   * Deletes a DingTalk chatbot on the DingTalk Chatbot tab of the Notification Settings page.
   * 
   * @param request - DeleteDingTalkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDingTalkResponse
   */
  async deleteDingTalkWithOptions(request: $_model.DeleteDingTalkRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteDingTalkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ids)) {
      query["Ids"] = request.ids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDingTalk",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteDingTalkResponse>(await this.callApi(params, req, runtime), new $_model.DeleteDingTalkResponse({}));
  }

  /**
   * Deletes a DingTalk chatbot on the DingTalk Chatbot tab of the Notification Settings page.
   * 
   * @param request - DeleteDingTalkRequest
   * @returns DeleteDingTalkResponse
   */
  async deleteDingTalk(request: $_model.DeleteDingTalkRequest): Promise<$_model.DeleteDingTalkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDingTalkWithOptions(request, runtime);
  }

  /**
   * Deletes core file monitoring rules.
   * 
   * @param request - DeleteFileProtectRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteFileProtectRuleResponse
   */
  async deleteFileProtectRuleWithOptions(request: $_model.DeleteFileProtectRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteFileProtectRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteFileProtectRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteFileProtectRuleResponse>(await this.callApi(params, req, runtime), new $_model.DeleteFileProtectRuleResponse({}));
  }

  /**
   * Deletes core file monitoring rules.
   * 
   * @param request - DeleteFileProtectRuleRequest
   * @returns DeleteFileProtectRuleResponse
   */
  async deleteFileProtectRule(request: $_model.DeleteFileProtectRuleRequest): Promise<$_model.DeleteFileProtectRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteFileProtectRuleWithOptions(request, runtime);
  }

  /**
   * Deletes a server group.
   * 
   * @remarks
   * The **Default** server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default** group.
   * 
   * @param request - DeleteGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteGroupResponse
   */
  async deleteGroupWithOptions(request: $_model.DeleteGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteGroup",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteGroupResponse>(await this.callApi(params, req, runtime), new $_model.DeleteGroupResponse({}));
  }

  /**
   * Deletes a server group.
   * 
   * @remarks
   * The **Default** server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default** group.
   * 
   * @param request - DeleteGroupRequest
   * @returns DeleteGroupResponse
   */
  async deleteGroup(request: $_model.DeleteGroupRequest): Promise<$_model.DeleteGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteGroupWithOptions(request, runtime);
  }

  /**
   * Deletes a specified honeypot.
   * 
   * @param request - DeleteHoneypotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteHoneypotResponse
   */
  async deleteHoneypotWithOptions(request: $_model.DeleteHoneypotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteHoneypotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.honeypotId)) {
      query["HoneypotId"] = request.honeypotId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteHoneypot",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteHoneypotResponse>(await this.callApi(params, req, runtime), new $_model.DeleteHoneypotResponse({}));
  }

  /**
   * Deletes a specified honeypot.
   * 
   * @param request - DeleteHoneypotRequest
   * @returns DeleteHoneypotResponse
   */
  async deleteHoneypot(request: $_model.DeleteHoneypotRequest): Promise<$_model.DeleteHoneypotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteHoneypotWithOptions(request, runtime);
  }

  /**
   * Deletes a specified management node.
   * 
   * @param request - DeleteHoneypotNodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteHoneypotNodeResponse
   */
  async deleteHoneypotNodeWithOptions(request: $_model.DeleteHoneypotNodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteHoneypotNodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteHoneypotNode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteHoneypotNodeResponse>(await this.callApi(params, req, runtime), new $_model.DeleteHoneypotNodeResponse({}));
  }

  /**
   * Deletes a specified management node.
   * 
   * @param request - DeleteHoneypotNodeRequest
   * @returns DeleteHoneypotNodeResponse
   */
  async deleteHoneypotNode(request: $_model.DeleteHoneypotNodeRequest): Promise<$_model.DeleteHoneypotNodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteHoneypotNodeWithOptions(request, runtime);
  }

  /**
   * Deletes a specified honeypot template.
   * 
   * @param request - DeleteHoneypotPresetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteHoneypotPresetResponse
   */
  async deleteHoneypotPresetWithOptions(request: $_model.DeleteHoneypotPresetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteHoneypotPresetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.honeypotPresetId)) {
      query["HoneypotPresetId"] = request.honeypotPresetId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteHoneypotPreset",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteHoneypotPresetResponse>(await this.callApi(params, req, runtime), new $_model.DeleteHoneypotPresetResponse({}));
  }

  /**
   * Deletes a specified honeypot template.
   * 
   * @param request - DeleteHoneypotPresetRequest
   * @returns DeleteHoneypotPresetResponse
   */
  async deleteHoneypotPreset(request: $_model.DeleteHoneypotPresetRequest): Promise<$_model.DeleteHoneypotPresetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteHoneypotPresetWithOptions(request, runtime);
  }

  /**
   * Deletes a specified probe.
   * 
   * @param request - DeleteHoneypotProbeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteHoneypotProbeResponse
   */
  async deleteHoneypotProbeWithOptions(request: $_model.DeleteHoneypotProbeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteHoneypotProbeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.probeId)) {
      query["ProbeId"] = request.probeId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteHoneypotProbe",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteHoneypotProbeResponse>(await this.callApi(params, req, runtime), new $_model.DeleteHoneypotProbeResponse({}));
  }

  /**
   * Deletes a specified probe.
   * 
   * @param request - DeleteHoneypotProbeRequest
   * @returns DeleteHoneypotProbeResponse
   */
  async deleteHoneypotProbe(request: $_model.DeleteHoneypotProbeRequest): Promise<$_model.DeleteHoneypotProbeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteHoneypotProbeWithOptions(request, runtime);
  }

  /**
   * Delete the probe service.
   * 
   * @param request - DeleteHoneypotProbeBindRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteHoneypotProbeBindResponse
   */
  async deleteHoneypotProbeBindWithOptions(request: $_model.DeleteHoneypotProbeBindRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteHoneypotProbeBindResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bindId)) {
      query["BindId"] = request.bindId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.probeId)) {
      query["ProbeId"] = request.probeId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteHoneypotProbeBind",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteHoneypotProbeBindResponse>(await this.callApi(params, req, runtime), new $_model.DeleteHoneypotProbeBindResponse({}));
  }

  /**
   * Delete the probe service.
   * 
   * @param request - DeleteHoneypotProbeBindRequest
   * @returns DeleteHoneypotProbeBindResponse
   */
  async deleteHoneypotProbeBind(request: $_model.DeleteHoneypotProbeBindRequest): Promise<$_model.DeleteHoneypotProbeBindResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteHoneypotProbeBindWithOptions(request, runtime);
  }

  /**
   * Removes a proxy node from a specified proxy cluster.
   * 
   * @param request - DeleteHybridProxyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteHybridProxyResponse
   */
  async deleteHybridProxyWithOptions(request: $_model.DeleteHybridProxyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteHybridProxyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteHybridProxy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteHybridProxyResponse>(await this.callApi(params, req, runtime), new $_model.DeleteHybridProxyResponse({}));
  }

  /**
   * Removes a proxy node from a specified proxy cluster.
   * 
   * @param request - DeleteHybridProxyRequest
   * @returns DeleteHybridProxyResponse
   */
  async deleteHybridProxy(request: $_model.DeleteHybridProxyRequest): Promise<$_model.DeleteHybridProxyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteHybridProxyWithOptions(request, runtime);
  }

  /**
   * Deletes a proxy cluster based on the name of the proxy cluster.
   * 
   * @param request - DeleteHybridProxyClusterRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteHybridProxyClusterResponse
   */
  async deleteHybridProxyClusterWithOptions(request: $_model.DeleteHybridProxyClusterRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteHybridProxyClusterResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteHybridProxyCluster",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteHybridProxyClusterResponse>(await this.callApi(params, req, runtime), new $_model.DeleteHybridProxyClusterResponse({}));
  }

  /**
   * Deletes a proxy cluster based on the name of the proxy cluster.
   * 
   * @param request - DeleteHybridProxyClusterRequest
   * @returns DeleteHybridProxyClusterResponse
   */
  async deleteHybridProxyCluster(request: $_model.DeleteHybridProxyClusterRequest): Promise<$_model.DeleteHybridProxyClusterResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteHybridProxyClusterWithOptions(request, runtime);
  }

  /**
   * Deletes an IDC probe that is created in Security Center.
   * 
   * @param request - DeleteIdcProbeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteIdcProbeResponse
   */
  async deleteIdcProbeWithOptions(request: $_model.DeleteIdcProbeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteIdcProbeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteIdcProbe",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteIdcProbeResponse>(await this.callApi(params, req, runtime), new $_model.DeleteIdcProbeResponse({}));
  }

  /**
   * Deletes an IDC probe that is created in Security Center.
   * 
   * @param request - DeleteIdcProbeRequest
   * @returns DeleteIdcProbeResponse
   */
  async deleteIdcProbe(request: $_model.DeleteIdcProbeRequest): Promise<$_model.DeleteIdcProbeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteIdcProbeWithOptions(request, runtime);
  }

  /**
   * Deletes an alert handling rule.
   * 
   * @param request - DeleteImageEventOperationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteImageEventOperationResponse
   */
  async deleteImageEventOperationWithOptions(request: $_model.DeleteImageEventOperationRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteImageEventOperationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteImageEventOperation",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteImageEventOperationResponse>(await this.callApi(params, req, runtime), new $_model.DeleteImageEventOperationResponse({}));
  }

  /**
   * Deletes an alert handling rule.
   * 
   * @param request - DeleteImageEventOperationRequest
   * @returns DeleteImageEventOperationResponse
   */
  async deleteImageEventOperation(request: $_model.DeleteImageEventOperationRequest): Promise<$_model.DeleteImageEventOperationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteImageEventOperationWithOptions(request, runtime);
  }

  /**
   * Deletes an image vulnerability whitelist.
   * 
   * @param request - DeleteImageVulWhitelistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteImageVulWhitelistResponse
   */
  async deleteImageVulWhitelistWithOptions(request: $_model.DeleteImageVulWhitelistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteImageVulWhitelistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ids)) {
      query["Ids"] = request.ids;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteImageVulWhitelist",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteImageVulWhitelistResponse>(await this.callApi(params, req, runtime), new $_model.DeleteImageVulWhitelistResponse({}));
  }

  /**
   * Deletes an image vulnerability whitelist.
   * 
   * @param request - DeleteImageVulWhitelistRequest
   * @returns DeleteImageVulWhitelistResponse
   */
  async deleteImageVulWhitelist(request: $_model.DeleteImageVulWhitelistRequest): Promise<$_model.DeleteImageVulWhitelistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteImageVulWhitelistWithOptions(request, runtime);
  }

  /**
   * Deletes the command that is used to install the Security Center agent.
   * 
   * @param request - DeleteInstallCodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteInstallCodeResponse
   */
  async deleteInstallCodeWithOptions(request: $_model.DeleteInstallCodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteInstallCodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.captchaCode)) {
      query["CaptchaCode"] = request.captchaCode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteInstallCode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteInstallCodeResponse>(await this.callApi(params, req, runtime), new $_model.DeleteInstallCodeResponse({}));
  }

  /**
   * Deletes the command that is used to install the Security Center agent.
   * 
   * @param request - DeleteInstallCodeRequest
   * @returns DeleteInstallCodeResponse
   */
  async deleteInstallCode(request: $_model.DeleteInstallCodeRequest): Promise<$_model.DeleteInstallCodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteInstallCodeWithOptions(request, runtime);
  }

  /**
   * Deletes a defense rule in the container firewall module.
   * 
   * @param request - DeleteInterceptionRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteInterceptionRuleResponse
   */
  async deleteInterceptionRuleWithOptions(request: $_model.DeleteInterceptionRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteInterceptionRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.ruleIds)) {
      query["RuleIds"] = request.ruleIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteInterceptionRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteInterceptionRuleResponse>(await this.callApi(params, req, runtime), new $_model.DeleteInterceptionRuleResponse({}));
  }

  /**
   * Deletes a defense rule in the container firewall module.
   * 
   * @param request - DeleteInterceptionRuleRequest
   * @returns DeleteInterceptionRuleResponse
   */
  async deleteInterceptionRule(request: $_model.DeleteInterceptionRuleRequest): Promise<$_model.DeleteInterceptionRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteInterceptionRuleWithOptions(request, runtime);
  }

  /**
   * Removes the network objects that are in effect in the container firewall.
   * 
   * @param request - DeleteInterceptionTargetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteInterceptionTargetResponse
   */
  async deleteInterceptionTargetWithOptions(request: $_model.DeleteInterceptionTargetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteInterceptionTargetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.targetIds)) {
      query["TargetIds"] = request.targetIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteInterceptionTarget",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteInterceptionTargetResponse>(await this.callApi(params, req, runtime), new $_model.DeleteInterceptionTargetResponse({}));
  }

  /**
   * Removes the network objects that are in effect in the container firewall.
   * 
   * @param request - DeleteInterceptionTargetRequest
   * @returns DeleteInterceptionTargetResponse
   */
  async deleteInterceptionTarget(request: $_model.DeleteInterceptionTargetRequest): Promise<$_model.DeleteInterceptionTargetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteInterceptionTargetWithOptions(request, runtime);
  }

  /**
   * Deletes the Kubernetes access information.
   * 
   * @param request - DeleteK8sAccessInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteK8sAccessInfoResponse
   */
  async deleteK8sAccessInfoWithOptions(request: $_model.DeleteK8sAccessInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteK8sAccessInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliyunYundunGatewayApiName)) {
      query["AliyunYundunGatewayApiName"] = request.aliyunYundunGatewayApiName;
    }

    if (!$dara.isNull(request.aliyunYundunGatewayPopName)) {
      query["AliyunYundunGatewayPopName"] = request.aliyunYundunGatewayPopName;
    }

    if (!$dara.isNull(request.aliyunYundunGatewayProjectName)) {
      query["AliyunYundunGatewayProjectName"] = request.aliyunYundunGatewayProjectName;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteK8sAccessInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteK8sAccessInfoResponse>(await this.callApi(params, req, runtime), new $_model.DeleteK8sAccessInfoResponse({}));
  }

  /**
   * Deletes the Kubernetes access information.
   * 
   * @param request - DeleteK8sAccessInfoRequest
   * @returns DeleteK8sAccessInfoResponse
   */
  async deleteK8sAccessInfo(request: $_model.DeleteK8sAccessInfoRequest): Promise<$_model.DeleteK8sAccessInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteK8sAccessInfoWithOptions(request, runtime);
  }

  /**
   * Deletes the basic configuration information from the logon security configurations for a specific asset.
   * 
   * @param request - DeleteLoginBaseConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteLoginBaseConfigResponse
   */
  async deleteLoginBaseConfigWithOptions(request: $_model.DeleteLoginBaseConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteLoginBaseConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    if (!$dara.isNull(request.target)) {
      query["Target"] = request.target;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteLoginBaseConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteLoginBaseConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteLoginBaseConfigResponse({}));
  }

  /**
   * Deletes the basic configuration information from the logon security configurations for a specific asset.
   * 
   * @param request - DeleteLoginBaseConfigRequest
   * @returns DeleteLoginBaseConfigResponse
   */
  async deleteLoginBaseConfig(request: $_model.DeleteLoginBaseConfigRequest): Promise<$_model.DeleteLoginBaseConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteLoginBaseConfigWithOptions(request, runtime);
  }

  /**
   * Deletes a whitelist rule for alerts generated for sensitive files that are detected by using the agentless detection feature.
   * 
   * @param request - DeleteMaliciousFileWhitelistConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteMaliciousFileWhitelistConfigResponse
   */
  async deleteMaliciousFileWhitelistConfigWithOptions(request: $_model.DeleteMaliciousFileWhitelistConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteMaliciousFileWhitelistConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configId)) {
      query["ConfigId"] = request.configId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteMaliciousFileWhitelistConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteMaliciousFileWhitelistConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteMaliciousFileWhitelistConfigResponse({}));
  }

  /**
   * Deletes a whitelist rule for alerts generated for sensitive files that are detected by using the agentless detection feature.
   * 
   * @param request - DeleteMaliciousFileWhitelistConfigRequest
   * @returns DeleteMaliciousFileWhitelistConfigResponse
   */
  async deleteMaliciousFileWhitelistConfig(request: $_model.DeleteMaliciousFileWhitelistConfigRequest): Promise<$_model.DeleteMaliciousFileWhitelistConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteMaliciousFileWhitelistConfigWithOptions(request, runtime);
  }

  /**
   * Removes the remarks added to alert events that are generated by the agentless detection feature.
   * 
   * @param request - DeleteMaliciousNoteRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteMaliciousNoteResponse
   */
  async deleteMaliciousNoteWithOptions(request: $_model.DeleteMaliciousNoteRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteMaliciousNoteResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.noteId)) {
      query["NoteId"] = request.noteId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteMaliciousNote",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteMaliciousNoteResponse>(await this.callApi(params, req, runtime), new $_model.DeleteMaliciousNoteResponse({}));
  }

  /**
   * Removes the remarks added to alert events that are generated by the agentless detection feature.
   * 
   * @param request - DeleteMaliciousNoteRequest
   * @returns DeleteMaliciousNoteResponse
   */
  async deleteMaliciousNote(request: $_model.DeleteMaliciousNoteRequest): Promise<$_model.DeleteMaliciousNoteResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteMaliciousNoteWithOptions(request, runtime);
  }

  /**
   * Deletes a member of the account managed by Security Center type of the multi-account management feature.
   * 
   * @remarks
   * You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
   * 
   * @param request - DeleteMonitorAccountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteMonitorAccountResponse
   */
  async deleteMonitorAccountWithOptions(request: $_model.DeleteMonitorAccountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteMonitorAccountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountId)) {
      query["AccountId"] = request.accountId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteMonitorAccount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteMonitorAccountResponse>(await this.callApi(params, req, runtime), new $_model.DeleteMonitorAccountResponse({}));
  }

  /**
   * Deletes a member of the account managed by Security Center type of the multi-account management feature.
   * 
   * @remarks
   * You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
   * 
   * @param request - DeleteMonitorAccountRequest
   * @returns DeleteMonitorAccountResponse
   */
  async deleteMonitorAccount(request: $_model.DeleteMonitorAccountRequest): Promise<$_model.DeleteMonitorAccountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteMonitorAccountWithOptions(request, runtime);
  }

  /**
   * Deletes rules of the at-risk image blocking type.
   * 
   * @param request - DeleteOpaStrategyNewRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteOpaStrategyNewResponse
   */
  async deleteOpaStrategyNewWithOptions(request: $_model.DeleteOpaStrategyNewRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteOpaStrategyNewResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.strategyIds)) {
      query["StrategyIds"] = request.strategyIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteOpaStrategyNew",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteOpaStrategyNewResponse>(await this.callApi(params, req, runtime), new $_model.DeleteOpaStrategyNewResponse({}));
  }

  /**
   * Deletes rules of the at-risk image blocking type.
   * 
   * @param request - DeleteOpaStrategyNewRequest
   * @returns DeleteOpaStrategyNewResponse
   */
  async deleteOpaStrategyNew(request: $_model.DeleteOpaStrategyNewRequest): Promise<$_model.DeleteOpaStrategyNewResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteOpaStrategyNewWithOptions(request, runtime);
  }

  /**
   * Deletes the configuration of an Object Storage Service (OSS) file detection policy.
   * 
   * @param request - DeleteOssScanConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteOssScanConfigResponse
   */
  async deleteOssScanConfigWithOptions(request: $_model.DeleteOssScanConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteOssScanConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteOssScanConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteOssScanConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteOssScanConfigResponse({}));
  }

  /**
   * Deletes the configuration of an Object Storage Service (OSS) file detection policy.
   * 
   * @param request - DeleteOssScanConfigRequest
   * @returns DeleteOssScanConfigResponse
   */
  async deleteOssScanConfig(request: $_model.DeleteOssScanConfigRequest): Promise<$_model.DeleteOssScanConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteOssScanConfigWithOptions(request, runtime);
  }

  /**
   * Deletes a private image repository by using the ID of the image repository.
   * 
   * @param request - DeletePrivateRegistryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeletePrivateRegistryResponse
   */
  async deletePrivateRegistryWithOptions(request: $_model.DeletePrivateRegistryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeletePrivateRegistryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.registryId)) {
      query["RegistryId"] = request.registryId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeletePrivateRegistry",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeletePrivateRegistryResponse>(await this.callApi(params, req, runtime), new $_model.DeletePrivateRegistryResponse({}));
  }

  /**
   * Deletes a private image repository by using the ID of the image repository.
   * 
   * @param request - DeletePrivateRegistryRequest
   * @returns DeletePrivateRegistryResponse
   */
  async deletePrivateRegistry(request: $_model.DeletePrivateRegistryRequest): Promise<$_model.DeletePrivateRegistryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deletePrivateRegistryWithOptions(request, runtime);
  }

  /**
   * Deletes a rule for container tamper-proofing.
   * 
   * @param request - DeleteSasContainerWebDefenseRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteSasContainerWebDefenseRuleResponse
   */
  async deleteSasContainerWebDefenseRuleWithOptions(request: $_model.DeleteSasContainerWebDefenseRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteSasContainerWebDefenseRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteSasContainerWebDefenseRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteSasContainerWebDefenseRuleResponse>(await this.callApi(params, req, runtime), new $_model.DeleteSasContainerWebDefenseRuleResponse({}));
  }

  /**
   * Deletes a rule for container tamper-proofing.
   * 
   * @param request - DeleteSasContainerWebDefenseRuleRequest
   * @returns DeleteSasContainerWebDefenseRuleResponse
   */
  async deleteSasContainerWebDefenseRule(request: $_model.DeleteSasContainerWebDefenseRuleRequest): Promise<$_model.DeleteSasContainerWebDefenseRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteSasContainerWebDefenseRuleWithOptions(request, runtime);
  }

  /**
   * Deletes a frequently used search condition by using the asset management feature of the Assets module in the Security Center console.
   * 
   * @param request - DeleteSearchConditionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteSearchConditionResponse
   */
  async deleteSearchConditionWithOptions(request: $_model.DeleteSearchConditionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteSearchConditionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteSearchCondition",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteSearchConditionResponse>(await this.callApi(params, req, runtime), new $_model.DeleteSearchConditionResponse({}));
  }

  /**
   * Deletes a frequently used search condition by using the asset management feature of the Assets module in the Security Center console.
   * 
   * @param request - DeleteSearchConditionRequest
   * @returns DeleteSearchConditionResponse
   */
  async deleteSearchCondition(request: $_model.DeleteSearchConditionRequest): Promise<$_model.DeleteSearchConditionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteSearchConditionWithOptions(request, runtime);
  }

  /**
   * Deletes multiple custom defense rules at a time. The custom defense rules are used to add false positive alerts to the whitelist.
   * 
   * @deprecated OpenAPI DeleteSecurityEventMarkMissList is deprecated, please use Sas::2018-12-03::ModifySecurityEventMarkMissIndividually instead.
   * 
   * @param request - DeleteSecurityEventMarkMissListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteSecurityEventMarkMissListResponse
   */
  async deleteSecurityEventMarkMissListWithOptions(request: $_model.DeleteSecurityEventMarkMissListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteSecurityEventMarkMissListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ids)) {
      query["Ids"] = request.ids;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteSecurityEventMarkMissList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteSecurityEventMarkMissListResponse>(await this.callApi(params, req, runtime), new $_model.DeleteSecurityEventMarkMissListResponse({}));
  }

  /**
   * Deletes multiple custom defense rules at a time. The custom defense rules are used to add false positive alerts to the whitelist.
   * 
   * @deprecated OpenAPI DeleteSecurityEventMarkMissList is deprecated, please use Sas::2018-12-03::ModifySecurityEventMarkMissIndividually instead.
   * 
   * @param request - DeleteSecurityEventMarkMissListRequest
   * @returns DeleteSecurityEventMarkMissListResponse
   */
  // Deprecated
  async deleteSecurityEventMarkMissList(request: $_model.DeleteSecurityEventMarkMissListRequest): Promise<$_model.DeleteSecurityEventMarkMissListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteSecurityEventMarkMissListWithOptions(request, runtime);
  }

  /**
   * Deletes a service trail.
   * 
   * @param request - DeleteServiceTrailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteServiceTrailResponse
   */
  async deleteServiceTrailWithOptions(request: $_model.DeleteServiceTrailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteServiceTrailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteServiceTrail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteServiceTrailResponse>(await this.callApi(params, req, runtime), new $_model.DeleteServiceTrailResponse({}));
  }

  /**
   * Deletes a service trail.
   * 
   * @param request - DeleteServiceTrailRequest
   * @returns DeleteServiceTrailResponse
   */
  async deleteServiceTrail(request: $_model.DeleteServiceTrailRequest): Promise<$_model.DeleteServiceTrailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteServiceTrailWithOptions(request, runtime);
  }

  /**
   * Deletes a policy task that is in the waiting state on the Playbook page.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - DeleteSoarStrategyTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteSoarStrategyTaskResponse
   */
  async deleteSoarStrategyTaskWithOptions(request: $_model.DeleteSoarStrategyTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteSoarStrategyTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.strategyTaskId)) {
      query["StrategyTaskId"] = request.strategyTaskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteSoarStrategyTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteSoarStrategyTaskResponse>(await this.callApi(params, req, runtime), new $_model.DeleteSoarStrategyTaskResponse({}));
  }

  /**
   * Deletes a policy task that is in the waiting state on the Playbook page.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - DeleteSoarStrategyTaskRequest
   * @returns DeleteSoarStrategyTaskResponse
   */
  async deleteSoarStrategyTask(request: $_model.DeleteSoarStrategyTaskRequest): Promise<$_model.DeleteSoarStrategyTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteSoarStrategyTaskWithOptions(request, runtime);
  }

  /**
   * Deletes a baseline check policy.
   * 
   * @param request - DeleteStrategyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteStrategyResponse
   */
  async deleteStrategyWithOptions(request: $_model.DeleteStrategyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteStrategyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteStrategy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteStrategyResponse>(await this.callApi(params, req, runtime), new $_model.DeleteStrategyResponse({}));
  }

  /**
   * Deletes a baseline check policy.
   * 
   * @param request - DeleteStrategyRequest
   * @returns DeleteStrategyResponse
   */
  async deleteStrategy(request: $_model.DeleteStrategyRequest): Promise<$_model.DeleteStrategyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteStrategyWithOptions(request, runtime);
  }

  /**
   * Deletes the description of an alert.
   * 
   * @param request - DeleteSuspEventNodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteSuspEventNodeResponse
   */
  async deleteSuspEventNodeWithOptions(request: $_model.DeleteSuspEventNodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteSuspEventNodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.noteId)) {
      query["NoteId"] = request.noteId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteSuspEventNode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteSuspEventNodeResponse>(await this.callApi(params, req, runtime), new $_model.DeleteSuspEventNodeResponse({}));
  }

  /**
   * Deletes the description of an alert.
   * 
   * @param request - DeleteSuspEventNodeRequest
   * @returns DeleteSuspEventNodeResponse
   */
  async deleteSuspEventNode(request: $_model.DeleteSuspEventNodeRequest): Promise<$_model.DeleteSuspEventNodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteSuspEventNodeWithOptions(request, runtime);
  }

  /**
   * Removes custom tags from assets.
   * 
   * @remarks
   * Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
   * 
   * @param request - DeleteTagWithUuidRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteTagWithUuidResponse
   */
  async deleteTagWithUuidWithOptions(request: $_model.DeleteTagWithUuidRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteTagWithUuidResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tagName)) {
      query["TagName"] = request.tagName;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteTagWithUuid",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteTagWithUuidResponse>(await this.callApi(params, req, runtime), new $_model.DeleteTagWithUuidResponse({}));
  }

  /**
   * Removes custom tags from assets.
   * 
   * @remarks
   * Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
   * 
   * @param request - DeleteTagWithUuidRequest
   * @returns DeleteTagWithUuidResponse
   */
  async deleteTagWithUuid(request: $_model.DeleteTagWithUuidRequest): Promise<$_model.DeleteTagWithUuidResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteTagWithUuidWithOptions(request, runtime);
  }

  /**
   * Deletes anti-ransomware policies that are created for databases.
   * 
   * @param request - DeleteUniBackupPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteUniBackupPolicyResponse
   */
  async deleteUniBackupPolicyWithOptions(request: $_model.DeleteUniBackupPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteUniBackupPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    if (!$dara.isNull(request.policyIds)) {
      query["PolicyIds"] = request.policyIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteUniBackupPolicy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteUniBackupPolicyResponse>(await this.callApi(params, req, runtime), new $_model.DeleteUniBackupPolicyResponse({}));
  }

  /**
   * Deletes anti-ransomware policies that are created for databases.
   * 
   * @param request - DeleteUniBackupPolicyRequest
   * @returns DeleteUniBackupPolicyResponse
   */
  async deleteUniBackupPolicy(request: $_model.DeleteUniBackupPolicyRequest): Promise<$_model.DeleteUniBackupPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteUniBackupPolicyWithOptions(request, runtime);
  }

  /**
   * Deletes a honeypot.
   * 
   * @param request - DeleteVpcHoneyPotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteVpcHoneyPotResponse
   */
  async deleteVpcHoneyPotWithOptions(request: $_model.DeleteVpcHoneyPotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteVpcHoneyPotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteVpcHoneyPot",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteVpcHoneyPotResponse>(await this.callApi(params, req, runtime), new $_model.DeleteVpcHoneyPotResponse({}));
  }

  /**
   * Deletes a honeypot.
   * 
   * @param request - DeleteVpcHoneyPotRequest
   * @returns DeleteVpcHoneyPotResponse
   */
  async deleteVpcHoneyPot(request: $_model.DeleteVpcHoneyPotRequest): Promise<$_model.DeleteVpcHoneyPotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteVpcHoneyPotWithOptions(request, runtime);
  }

  /**
   * Deletes configurations of of an automatic vulnerability fixing task at a time on the Playbook page.
   * 
   * @param request - DeleteVulAutoRepairConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteVulAutoRepairConfigResponse
   */
  async deleteVulAutoRepairConfigWithOptions(request: $_model.DeleteVulAutoRepairConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteVulAutoRepairConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliasName)) {
      query["AliasName"] = request.aliasName;
    }

    if (!$dara.isNull(request.configIdList)) {
      query["ConfigIdList"] = request.configIdList;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteVulAutoRepairConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteVulAutoRepairConfigResponse>(await this.callApi(params, req, runtime), new $_model.DeleteVulAutoRepairConfigResponse({}));
  }

  /**
   * Deletes configurations of of an automatic vulnerability fixing task at a time on the Playbook page.
   * 
   * @param request - DeleteVulAutoRepairConfigRequest
   * @returns DeleteVulAutoRepairConfigResponse
   */
  async deleteVulAutoRepairConfig(request: $_model.DeleteVulAutoRepairConfigRequest): Promise<$_model.DeleteVulAutoRepairConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteVulAutoRepairConfigWithOptions(request, runtime);
  }

  /**
   * Deletes a specified vulnerability whitelist.
   * 
   * @param request - DeleteVulWhitelistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteVulWhitelistResponse
   */
  async deleteVulWhitelistWithOptions(request: $_model.DeleteVulWhitelistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteVulWhitelistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.whitelist)) {
      query["Whitelist"] = request.whitelist;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteVulWhitelist",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteVulWhitelistResponse>(await this.callApi(params, req, runtime), new $_model.DeleteVulWhitelistResponse({}));
  }

  /**
   * Deletes a specified vulnerability whitelist.
   * 
   * @param request - DeleteVulWhitelistRequest
   * @returns DeleteVulWhitelistResponse
   */
  async deleteVulWhitelist(request: $_model.DeleteVulWhitelistRequest): Promise<$_model.DeleteVulWhitelistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteVulWhitelistWithOptions(request, runtime);
  }

  /**
   * Queries the overview of user AI assets.
   * 
   * @param request - DescribeAIAssetSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAIAssetSummaryResponse
   */
  async describeAIAssetSummaryWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAIAssetSummaryResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAIAssetSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAIAssetSummaryResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAIAssetSummaryResponse({}));
  }

  /**
   * Queries the overview of user AI assets.
   * @returns DescribeAIAssetSummaryResponse
   */
  async describeAIAssetSummary(): Promise<$_model.DescribeAIAssetSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAIAssetSummaryWithOptions(runtime);
  }

  /**
   * Queries the details of AccessKey pair leaks.
   * 
   * @param request - DescribeAccessKeyLeakDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAccessKeyLeakDetailResponse
   */
  async describeAccessKeyLeakDetailWithOptions(request: $_model.DescribeAccessKeyLeakDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAccessKeyLeakDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAccessKeyLeakDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAccessKeyLeakDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAccessKeyLeakDetailResponse({}));
  }

  /**
   * Queries the details of AccessKey pair leaks.
   * 
   * @param request - DescribeAccessKeyLeakDetailRequest
   * @returns DescribeAccessKeyLeakDetailResponse
   */
  async describeAccessKeyLeakDetail(request: $_model.DescribeAccessKeyLeakDetailRequest): Promise<$_model.DescribeAccessKeyLeakDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAccessKeyLeakDetailWithOptions(request, runtime);
  }

  /**
   * Queries the AccessKey pair leaks that are detected on your assets.
   * 
   * @param request - DescribeAccesskeyLeakListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAccesskeyLeakListResponse
   */
  async describeAccesskeyLeakListWithOptions(request: $_model.DescribeAccesskeyLeakListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAccesskeyLeakListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.query)) {
      query["Query"] = request.query;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.startTs)) {
      query["StartTs"] = request.startTs;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAccesskeyLeakList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAccesskeyLeakListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAccesskeyLeakListResponse({}));
  }

  /**
   * Queries the AccessKey pair leaks that are detected on your assets.
   * 
   * @param request - DescribeAccesskeyLeakListRequest
   * @returns DescribeAccesskeyLeakListResponse
   */
  async describeAccesskeyLeakList(request: $_model.DescribeAccesskeyLeakListRequest): Promise<$_model.DescribeAccesskeyLeakListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAccesskeyLeakListWithOptions(request, runtime);
  }

  /**
   * Queries the affected servers in the result of a virus scan task.
   * 
   * @param request - DescribeAffectedAssetsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAffectedAssetsResponse
   */
  async describeAffectedAssetsWithOptions(request: $_model.DescribeAffectedAssetsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAffectedAssetsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.current)) {
      query["Current"] = request.current;
    }

    if (!$dara.isNull(request.levels)) {
      query["Levels"] = request.levels;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAffectedAssets",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAffectedAssetsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAffectedAssetsResponse({}));
  }

  /**
   * Queries the affected servers in the result of a virus scan task.
   * 
   * @param request - DescribeAffectedAssetsRequest
   * @returns DescribeAffectedAssetsResponse
   */
  async describeAffectedAssets(request: $_model.DescribeAffectedAssetsRequest): Promise<$_model.DescribeAffectedAssetsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAffectedAssetsWithOptions(request, runtime);
  }

  /**
   * Queries the details of malicious image samples.
   * 
   * @param request - DescribeAffectedMaliciousFileImagesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAffectedMaliciousFileImagesResponse
   */
  async describeAffectedMaliciousFileImagesWithOptions(request: $_model.DescribeAffectedMaliciousFileImagesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAffectedMaliciousFileImagesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.containerId)) {
      query["ContainerId"] = request.containerId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.image)) {
      query["Image"] = request.image;
    }

    if (!$dara.isNull(request.imageDigest)) {
      query["ImageDigest"] = request.imageDigest;
    }

    if (!$dara.isNull(request.imageLayer)) {
      query["ImageLayer"] = request.imageLayer;
    }

    if (!$dara.isNull(request.imageTag)) {
      query["ImageTag"] = request.imageTag;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.levels)) {
      query["Levels"] = request.levels;
    }

    if (!$dara.isNull(request.maliciousMd5)) {
      query["MaliciousMd5"] = request.maliciousMd5;
    }

    if (!$dara.isNull(request.namespace)) {
      query["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.pod)) {
      query["Pod"] = request.pod;
    }

    if (!$dara.isNull(request.repoId)) {
      query["RepoId"] = request.repoId;
    }

    if (!$dara.isNull(request.repoInstanceId)) {
      query["RepoInstanceId"] = request.repoInstanceId;
    }

    if (!$dara.isNull(request.repoName)) {
      query["RepoName"] = request.repoName;
    }

    if (!$dara.isNull(request.repoNamespace)) {
      query["RepoNamespace"] = request.repoNamespace;
    }

    if (!$dara.isNull(request.repoRegionId)) {
      query["RepoRegionId"] = request.repoRegionId;
    }

    if (!$dara.isNull(request.scanRange)) {
      query["ScanRange"] = request.scanRange;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAffectedMaliciousFileImages",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAffectedMaliciousFileImagesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAffectedMaliciousFileImagesResponse({}));
  }

  /**
   * Queries the details of malicious image samples.
   * 
   * @param request - DescribeAffectedMaliciousFileImagesRequest
   * @returns DescribeAffectedMaliciousFileImagesResponse
   */
  async describeAffectedMaliciousFileImages(request: $_model.DescribeAffectedMaliciousFileImagesRequest): Promise<$_model.DescribeAffectedMaliciousFileImagesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAffectedMaliciousFileImagesWithOptions(request, runtime);
  }

  /**
   * Queries the installation status of the Security Center agent after you run an installation command by using Cloud Assistant. You can call this operation to query the installation status only if the installation request is initiated within 2 minutes.
   * 
   * @param request - DescribeAgentInstallStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAgentInstallStatusResponse
   */
  async describeAgentInstallStatusWithOptions(request: $_model.DescribeAgentInstallStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAgentInstallStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAgentInstallStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAgentInstallStatusResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAgentInstallStatusResponse({}));
  }

  /**
   * Queries the installation status of the Security Center agent after you run an installation command by using Cloud Assistant. You can call this operation to query the installation status only if the installation request is initiated within 2 minutes.
   * 
   * @param request - DescribeAgentInstallStatusRequest
   * @returns DescribeAgentInstallStatusResponse
   */
  async describeAgentInstallStatus(request: $_model.DescribeAgentInstallStatusRequest): Promise<$_model.DescribeAgentInstallStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAgentInstallStatusWithOptions(request, runtime);
  }

  /**
   * Queries the list of assets on which a specific type of sensitive files are detected by using the agentless detection feature.
   * 
   * @remarks
   * You can call this operation only when the agentless detection feature is purchased by using the pay-as-you-go billing method within your Alibaba Cloud account.
   * 
   * @param tmpReq - DescribeAgentlessSensitiveFileByKeyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAgentlessSensitiveFileByKeyResponse
   */
  async describeAgentlessSensitiveFileByKeyWithOptions(tmpReq: $_model.DescribeAgentlessSensitiveFileByKeyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAgentlessSensitiveFileByKeyResponse> {
    tmpReq.validate();
    let request = new $_model.DescribeAgentlessSensitiveFileByKeyShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.scanRange)) {
      request.scanRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, "ScanRange", "json");
    }

    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAgentlessSensitiveFileByKey",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAgentlessSensitiveFileByKeyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAgentlessSensitiveFileByKeyResponse({}));
  }

  /**
   * Queries the list of assets on which a specific type of sensitive files are detected by using the agentless detection feature.
   * 
   * @remarks
   * You can call this operation only when the agentless detection feature is purchased by using the pay-as-you-go billing method within your Alibaba Cloud account.
   * 
   * @param request - DescribeAgentlessSensitiveFileByKeyRequest
   * @returns DescribeAgentlessSensitiveFileByKeyResponse
   */
  async describeAgentlessSensitiveFileByKey(request: $_model.DescribeAgentlessSensitiveFileByKeyRequest): Promise<$_model.DescribeAgentlessSensitiveFileByKeyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAgentlessSensitiveFileByKeyWithOptions(request, runtime);
  }

  /**
   * Queries the details of an alert event. An alert event consists of alerts and exceptions. Each alert event is associated with multiple exceptions.
   * 
   * @param request - DescribeAlarmEventDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAlarmEventDetailResponse
   */
  async describeAlarmEventDetailWithOptions(request: $_model.DescribeAlarmEventDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAlarmEventDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.alarmUniqueInfo)) {
      query["AlarmUniqueInfo"] = request.alarmUniqueInfo;
    }

    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAlarmEventDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAlarmEventDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAlarmEventDetailResponse({}));
  }

  /**
   * Queries the details of an alert event. An alert event consists of alerts and exceptions. Each alert event is associated with multiple exceptions.
   * 
   * @param request - DescribeAlarmEventDetailRequest
   * @returns DescribeAlarmEventDetailResponse
   */
  async describeAlarmEventDetail(request: $_model.DescribeAlarmEventDetailRequest): Promise<$_model.DescribeAlarmEventDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAlarmEventDetailWithOptions(request, runtime);
  }

  /**
   * Queries the stack information about an alert event.
   * 
   * @deprecated OpenAPI DescribeAlarmEventStackInfo is deprecated
   * 
   * @param request - DescribeAlarmEventStackInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAlarmEventStackInfoResponse
   */
  async describeAlarmEventStackInfoWithOptions(request: $_model.DescribeAlarmEventStackInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAlarmEventStackInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eventName)) {
      query["EventName"] = request.eventName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uniqueInfo)) {
      query["UniqueInfo"] = request.uniqueInfo;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAlarmEventStackInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAlarmEventStackInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAlarmEventStackInfoResponse({}));
  }

  /**
   * Queries the stack information about an alert event.
   * 
   * @deprecated OpenAPI DescribeAlarmEventStackInfo is deprecated
   * 
   * @param request - DescribeAlarmEventStackInfoRequest
   * @returns DescribeAlarmEventStackInfoResponse
   */
  // Deprecated
  async describeAlarmEventStackInfo(request: $_model.DescribeAlarmEventStackInfoRequest): Promise<$_model.DescribeAlarmEventStackInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAlarmEventStackInfoWithOptions(request, runtime);
  }

  /**
   * Queries the information about all server assets, including the asset group IDs and asset names.
   * 
   * @param request - DescribeAllEntityRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAllEntityResponse
   */
  async describeAllEntityWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAllEntityResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAllEntity",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAllEntityResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAllEntityResponse({}));
  }

  /**
   * Queries the information about all server assets, including the asset group IDs and asset names.
   * @returns DescribeAllEntityResponse
   */
  async describeAllEntity(): Promise<$_model.DescribeAllEntityResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAllEntityWithOptions(runtime);
  }

  /**
   * Queries the information about all server groups.
   * 
   * @param request - DescribeAllGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAllGroupsResponse
   */
  async describeAllGroupsWithOptions(request: $_model.DescribeAllGroupsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAllGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAllGroups",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAllGroupsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAllGroupsResponse({}));
  }

  /**
   * Queries the information about all server groups.
   * 
   * @param request - DescribeAllGroupsRequest
   * @returns DescribeAllGroupsResponse
   */
  async describeAllGroups(request: $_model.DescribeAllGroupsRequest): Promise<$_model.DescribeAllGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAllGroupsWithOptions(request, runtime);
  }

  /**
   * Queries baselines that are used in image baseline checks.
   * 
   * @param request - DescribeAllImageBaselineRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAllImageBaselineResponse
   */
  async describeAllImageBaselineWithOptions(request: $_model.DescribeAllImageBaselineRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAllImageBaselineResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAllImageBaseline",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAllImageBaselineResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAllImageBaselineResponse({}));
  }

  /**
   * Queries baselines that are used in image baseline checks.
   * 
   * @param request - DescribeAllImageBaselineRequest
   * @returns DescribeAllImageBaselineResponse
   */
  async describeAllImageBaseline(request: $_model.DescribeAllImageBaselineRequest): Promise<$_model.DescribeAllImageBaselineResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAllImageBaselineWithOptions(request, runtime);
  }

  /**
   * Queries the statistics on global security events, including the numbers of unfixed vulnerabilities, baseline risks, and alerts.
   * 
   * @param request - DescribeAllRegionsStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAllRegionsStatisticsResponse
   */
  async describeAllRegionsStatisticsWithOptions(request: $_model.DescribeAllRegionsStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAllRegionsStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAllRegionsStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAllRegionsStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAllRegionsStatisticsResponse({}));
  }

  /**
   * Queries the statistics on global security events, including the numbers of unfixed vulnerabilities, baseline risks, and alerts.
   * 
   * @param request - DescribeAllRegionsStatisticsRequest
   * @returns DescribeAllRegionsStatisticsResponse
   */
  async describeAllRegionsStatistics(request: $_model.DescribeAllRegionsStatisticsRequest): Promise<$_model.DescribeAllRegionsStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAllRegionsStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries created defense rules against brute-force attacks.
   * 
   * @param request - DescribeAntiBruteForceRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAntiBruteForceRulesResponse
   */
  async describeAntiBruteForceRulesWithOptions(request: $_model.DescribeAntiBruteForceRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAntiBruteForceRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAntiBruteForceRules",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAntiBruteForceRulesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAntiBruteForceRulesResponse({}));
  }

  /**
   * Queries created defense rules against brute-force attacks.
   * 
   * @param request - DescribeAntiBruteForceRulesRequest
   * @returns DescribeAntiBruteForceRulesResponse
   */
  async describeAntiBruteForceRules(request: $_model.DescribeAntiBruteForceRulesRequest): Promise<$_model.DescribeAntiBruteForceRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAntiBruteForceRulesWithOptions(request, runtime);
  }

  /**
   * Queries the scan cycle for application vulnerabilities.
   * 
   * @param request - DescribeAppVulScanCycleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAppVulScanCycleResponse
   */
  async describeAppVulScanCycleWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAppVulScanCycleResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAppVulScanCycle",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAppVulScanCycleResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAppVulScanCycleResponse({}));
  }

  /**
   * Queries the scan cycle for application vulnerabilities.
   * @returns DescribeAppVulScanCycleResponse
   */
  async describeAppVulScanCycle(): Promise<$_model.DescribeAppVulScanCycleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAppVulScanCycleWithOptions(runtime);
  }

  /**
   * Queries the details of a server and the extended information about the server by using the UUID of the server.
   * 
   * @remarks
   * This operation will be discontinued soon. You must call the [GetAssetDetailByUuid](~~GetAssetDetailByUuid~~) operation to query the details of the server.
   * 
   * @deprecated OpenAPI DescribeAssetDetailByUuid is deprecated, please use Sas::2018-12-03::GetAssetDetailByUuid instead.
   * 
   * @param request - DescribeAssetDetailByUuidRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAssetDetailByUuidResponse
   */
  async describeAssetDetailByUuidWithOptions(request: $_model.DescribeAssetDetailByUuidRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAssetDetailByUuidResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAssetDetailByUuid",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAssetDetailByUuidResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAssetDetailByUuidResponse({}));
  }

  /**
   * Queries the details of a server and the extended information about the server by using the UUID of the server.
   * 
   * @remarks
   * This operation will be discontinued soon. You must call the [GetAssetDetailByUuid](~~GetAssetDetailByUuid~~) operation to query the details of the server.
   * 
   * @deprecated OpenAPI DescribeAssetDetailByUuid is deprecated, please use Sas::2018-12-03::GetAssetDetailByUuid instead.
   * 
   * @param request - DescribeAssetDetailByUuidRequest
   * @returns DescribeAssetDetailByUuidResponse
   */
  // Deprecated
  async describeAssetDetailByUuid(request: $_model.DescribeAssetDetailByUuidRequest): Promise<$_model.DescribeAssetDetailByUuidResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAssetDetailByUuidWithOptions(request, runtime);
  }

  /**
   * Queries the details of Elastic Compute Service (ECS) instances.
   * 
   * @param request - DescribeAssetDetailByUuidsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAssetDetailByUuidsResponse
   */
  async describeAssetDetailByUuidsWithOptions(request: $_model.DescribeAssetDetailByUuidsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAssetDetailByUuidsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAssetDetailByUuids",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAssetDetailByUuidsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAssetDetailByUuidsResponse({}));
  }

  /**
   * Queries the details of Elastic Compute Service (ECS) instances.
   * 
   * @param request - DescribeAssetDetailByUuidsRequest
   * @returns DescribeAssetDetailByUuidsResponse
   */
  async describeAssetDetailByUuids(request: $_model.DescribeAssetDetailByUuidsRequest): Promise<$_model.DescribeAssetDetailByUuidsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAssetDetailByUuidsWithOptions(request, runtime);
  }

  /**
   * The ID of the request, which is used to locate and troubleshoot issues.
   * 
   * @param request - DescribeAssetSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAssetSummaryResponse
   */
  async describeAssetSummaryWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAssetSummaryResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAssetSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAssetSummaryResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAssetSummaryResponse({}));
  }

  /**
   * The ID of the request, which is used to locate and troubleshoot issues.
   * @returns DescribeAssetSummaryResponse
   */
  async describeAssetSummary(): Promise<$_model.DescribeAssetSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAssetSummaryWithOptions(runtime);
  }

  /**
   * Queries the number of Java processes in an asset by using the asset fingerprints feature of Security Center.
   * 
   * @param request - DescribeAssetsScaProcessNumRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAssetsScaProcessNumResponse
   */
  async describeAssetsScaProcessNumWithOptions(request: $_model.DescribeAssetsScaProcessNumRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAssetsScaProcessNumResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bizType)) {
      query["BizType"] = request.bizType;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAssetsScaProcessNum",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAssetsScaProcessNumResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAssetsScaProcessNumResponse({}));
  }

  /**
   * Queries the number of Java processes in an asset by using the asset fingerprints feature of Security Center.
   * 
   * @param request - DescribeAssetsScaProcessNumRequest
   * @returns DescribeAssetsScaProcessNumResponse
   */
  async describeAssetsScaProcessNum(request: $_model.DescribeAssetsScaProcessNumRequest): Promise<$_model.DescribeAssetsScaProcessNumResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAssetsScaProcessNumWithOptions(request, runtime);
  }

  /**
   * Queries the risk information about containers.
   * 
   * @param request - DescribeAssetsSecurityEventSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAssetsSecurityEventSummaryResponse
   */
  async describeAssetsSecurityEventSummaryWithOptions(request: $_model.DescribeAssetsSecurityEventSummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAssetsSecurityEventSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.containerFieldName)) {
      query["ContainerFieldName"] = request.containerFieldName;
    }

    if (!$dara.isNull(request.containerFieldValue)) {
      query["ContainerFieldValue"] = request.containerFieldValue;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAssetsSecurityEventSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAssetsSecurityEventSummaryResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAssetsSecurityEventSummaryResponse({}));
  }

  /**
   * Queries the risk information about containers.
   * 
   * @param request - DescribeAssetsSecurityEventSummaryRequest
   * @returns DescribeAssetsSecurityEventSummaryResponse
   */
  async describeAssetsSecurityEventSummary(request: $_model.DescribeAssetsSecurityEventSummaryRequest): Promise<$_model.DescribeAssetsSecurityEventSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAssetsSecurityEventSummaryWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of attack analysis.
   * 
   * @param request - DescribeAttackAnalysisDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAttackAnalysisDataResponse
   */
  async describeAttackAnalysisDataWithOptions(request: $_model.DescribeAttackAnalysisDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAttackAnalysisDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.base64)) {
      query["Base64"] = request.base64;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.data)) {
      query["Data"] = request.data;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAttackAnalysisData",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAttackAnalysisDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAttackAnalysisDataResponse({}));
  }

  /**
   * Queries the statistics of attack analysis.
   * 
   * @param request - DescribeAttackAnalysisDataRequest
   * @returns DescribeAttackAnalysisDataResponse
   */
  async describeAttackAnalysisData(request: $_model.DescribeAttackAnalysisDataRequest): Promise<$_model.DescribeAttackAnalysisDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAttackAnalysisDataWithOptions(request, runtime);
  }

  /**
   * Queries a list of witnesses.
   * 
   * @param request - DescribeAttestorsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAttestorsResponse
   */
  async describeAttestorsWithOptions(request: $_model.DescribeAttestorsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAttestorsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAttestors",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAttestorsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAttestorsResponse({}));
  }

  /**
   * Queries a list of witnesses.
   * 
   * @param request - DescribeAttestorsRequest
   * @returns DescribeAttestorsResponse
   */
  async describeAttestors(request: $_model.DescribeAttestorsRequest): Promise<$_model.DescribeAttestorsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAttestorsWithOptions(request, runtime);
  }

  /**
   * Queries the number of days during which a detected vulnerability is retained before the vulnerability is automatically deleted.
   * 
   * @param request - DescribeAutoDelConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAutoDelConfigResponse
   */
  async describeAutoDelConfigWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAutoDelConfigResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAutoDelConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAutoDelConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAutoDelConfigResponse({}));
  }

  /**
   * Queries the number of days during which a detected vulnerability is retained before the vulnerability is automatically deleted.
   * @returns DescribeAutoDelConfigResponse
   */
  async describeAutoDelConfig(): Promise<$_model.DescribeAutoDelConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAutoDelConfigWithOptions(runtime);
  }

  /**
   * Queries the information about a file to which archived alert events are exported.
   * 
   * @param request - DescribeBackUpExportInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBackUpExportInfoResponse
   */
  async describeBackUpExportInfoWithOptions(request: $_model.DescribeBackUpExportInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBackUpExportInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.exportType)) {
      query["ExportType"] = request.exportType;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBackUpExportInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBackUpExportInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBackUpExportInfoResponse({}));
  }

  /**
   * Queries the information about a file to which archived alert events are exported.
   * 
   * @param request - DescribeBackUpExportInfoRequest
   * @returns DescribeBackUpExportInfoResponse
   */
  async describeBackUpExportInfo(request: $_model.DescribeBackUpExportInfoRequest): Promise<$_model.DescribeBackUpExportInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBackUpExportInfoWithOptions(request, runtime);
  }

  /**
   * Queries the servers on which the anti-ransomware agent is installed in a specified region.
   * 
   * @remarks
   * You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
   * 
   * @param request - DescribeBackupClientsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBackupClientsResponse
   */
  async describeBackupClientsWithOptions(request: $_model.DescribeBackupClientsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBackupClientsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.supportRegionId)) {
      query["SupportRegionId"] = request.supportRegionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBackupClients",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBackupClientsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBackupClientsResponse({}));
  }

  /**
   * Queries the servers on which the anti-ransomware agent is installed in a specified region.
   * 
   * @remarks
   * You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
   * 
   * @param request - DescribeBackupClientsRequest
   * @returns DescribeBackupClientsResponse
   */
  async describeBackupClients(request: $_model.DescribeBackupClientsRequest): Promise<$_model.DescribeBackupClientsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBackupClientsWithOptions(request, runtime);
  }

  /**
   * Queries backup files.
   * 
   * @param request - DescribeBackupFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBackupFilesResponse
   */
  async describeBackupFilesWithOptions(request: $_model.DescribeBackupFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBackupFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.path)) {
      query["Path"] = request.path;
    }

    if (!$dara.isNull(request.snapshotHash)) {
      query["SnapshotHash"] = request.snapshotHash;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBackupFiles",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBackupFilesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBackupFilesResponse({}));
  }

  /**
   * Queries backup files.
   * 
   * @param request - DescribeBackupFilesRequest
   * @returns DescribeBackupFilesResponse
   */
  async describeBackupFiles(request: $_model.DescribeBackupFilesRequest): Promise<$_model.DescribeBackupFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBackupFilesWithOptions(request, runtime);
  }

  /**
   * Queries the backup status of a sever to which an anti-ransomware policy is applied.
   * 
   * @param request - DescribeBackupMachineStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBackupMachineStatusResponse
   */
  async describeBackupMachineStatusWithOptions(request: $_model.DescribeBackupMachineStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBackupMachineStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    if (!$dara.isNull(request.policyVersion)) {
      query["PolicyVersion"] = request.policyVersion;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBackupMachineStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBackupMachineStatusResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBackupMachineStatusResponse({}));
  }

  /**
   * Queries the backup status of a sever to which an anti-ransomware policy is applied.
   * 
   * @param request - DescribeBackupMachineStatusRequest
   * @returns DescribeBackupMachineStatusResponse
   */
  async describeBackupMachineStatus(request: $_model.DescribeBackupMachineStatusRequest): Promise<$_model.DescribeBackupMachineStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBackupMachineStatusWithOptions(request, runtime);
  }

  /**
   * Queries anti-ransomware policies.
   * 
   * @param request - DescribeBackupPoliciesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBackupPoliciesResponse
   */
  async describeBackupPoliciesWithOptions(request: $_model.DescribeBackupPoliciesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBackupPoliciesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.machineRemark)) {
      query["MachineRemark"] = request.machineRemark;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBackupPolicies",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBackupPoliciesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBackupPoliciesResponse({}));
  }

  /**
   * Queries anti-ransomware policies.
   * 
   * @param request - DescribeBackupPoliciesRequest
   * @returns DescribeBackupPoliciesResponse
   */
  async describeBackupPolicies(request: $_model.DescribeBackupPoliciesRequest): Promise<$_model.DescribeBackupPoliciesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBackupPoliciesWithOptions(request, runtime);
  }

  /**
   * Queries the details of an anti-ransomware policy for servers.
   * 
   * @param request - DescribeBackupPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBackupPolicyResponse
   */
  async describeBackupPolicyWithOptions(request: $_model.DescribeBackupPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBackupPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBackupPolicy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBackupPolicyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBackupPolicyResponse({}));
  }

  /**
   * Queries the details of an anti-ransomware policy for servers.
   * 
   * @param request - DescribeBackupPolicyRequest
   * @returns DescribeBackupPolicyResponse
   */
  async describeBackupPolicy(request: $_model.DescribeBackupPolicyRequest): Promise<$_model.DescribeBackupPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBackupPolicyWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of restoration tasks.
   * 
   * @remarks
   * If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the **restored** or **being restored** state.
   * 
   * @param request - DescribeBackupRestoreCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBackupRestoreCountResponse
   */
  async describeBackupRestoreCountWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBackupRestoreCountResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBackupRestoreCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBackupRestoreCountResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBackupRestoreCountResponse({}));
  }

  /**
   * Queries the statistics of restoration tasks.
   * 
   * @remarks
   * If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the **restored** or **being restored** state.
   * @returns DescribeBackupRestoreCountResponse
   */
  async describeBackupRestoreCount(): Promise<$_model.DescribeBackupRestoreCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBackupRestoreCountWithOptions(runtime);
  }

  /**
   * Queries binary security policies.
   * 
   * @param request - DescribeBinarySecurityPoliciesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBinarySecurityPoliciesResponse
   */
  async describeBinarySecurityPoliciesWithOptions(request: $_model.DescribeBinarySecurityPoliciesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBinarySecurityPoliciesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBinarySecurityPolicies",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBinarySecurityPoliciesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBinarySecurityPoliciesResponse({}));
  }

  /**
   * Queries binary security policies.
   * 
   * @param request - DescribeBinarySecurityPoliciesRequest
   * @returns DescribeBinarySecurityPoliciesResponse
   */
  async describeBinarySecurityPolicies(request: $_model.DescribeBinarySecurityPoliciesRequest): Promise<$_model.DescribeBinarySecurityPoliciesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBinarySecurityPoliciesWithOptions(request, runtime);
  }

  /**
   * Queries the IP addresses that are blocked by a defense rule against brute-force attacks.
   * 
   * @param request - DescribeBruteForceRecordsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBruteForceRecordsResponse
   */
  async describeBruteForceRecordsWithOptions(request: $_model.DescribeBruteForceRecordsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBruteForceRecordsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.blockIp)) {
      query["BlockIp"] = request.blockIp;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBruteForceRecords",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBruteForceRecordsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBruteForceRecordsResponse({}));
  }

  /**
   * Queries the IP addresses that are blocked by a defense rule against brute-force attacks.
   * 
   * @param request - DescribeBruteForceRecordsRequest
   * @returns DescribeBruteForceRecordsResponse
   */
  async describeBruteForceRecords(request: $_model.DescribeBruteForceRecordsRequest): Promise<$_model.DescribeBruteForceRecordsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBruteForceRecordsWithOptions(request, runtime);
  }

  /**
   * The source IP address of the request.
   * 
   * @param request - DescribeBruteForceSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBruteForceSummaryResponse
   */
  async describeBruteForceSummaryWithOptions(request: $_model.DescribeBruteForceSummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBruteForceSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBruteForceSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBruteForceSummaryResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBruteForceSummaryResponse({}));
  }

  /**
   * The source IP address of the request.
   * 
   * @param request - DescribeBruteForceSummaryRequest
   * @returns DescribeBruteForceSummaryResponse
   */
  async describeBruteForceSummary(request: $_model.DescribeBruteForceSummaryRequest): Promise<$_model.DescribeBruteForceSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBruteForceSummaryWithOptions(request, runtime);
  }

  /**
   * Check if the asset can be sold by VPC
   * 
   * @param request - DescribeCanAccessVpcSaleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCanAccessVpcSaleResponse
   */
  async describeCanAccessVpcSaleWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCanAccessVpcSaleResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCanAccessVpcSale",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCanAccessVpcSaleResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCanAccessVpcSaleResponse({}));
  }

  /**
   * Check if the asset can be sold by VPC
   * @returns DescribeCanAccessVpcSaleResponse
   */
  async describeCanAccessVpcSale(): Promise<$_model.DescribeCanAccessVpcSaleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCanAccessVpcSaleWithOptions(runtime);
  }

  /**
   * Queries the list of fixable vulnerabilities.
   * 
   * @param request - DescribeCanFixVulListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCanFixVulListResponse
   */
  async describeCanFixVulListWithOptions(request: $_model.DescribeCanFixVulListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCanFixVulListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliasName)) {
      query["AliasName"] = request.aliasName;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.containerId)) {
      query["ContainerId"] = request.containerId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.dealed)) {
      query["Dealed"] = request.dealed;
    }

    if (!$dara.isNull(request.digest)) {
      query["Digest"] = request.digest;
    }

    if (!$dara.isNull(request.image)) {
      query["Image"] = request.image;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.namespace)) {
      query["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.necessity)) {
      query["Necessity"] = request.necessity;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.pod)) {
      query["Pod"] = request.pod;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.repoId)) {
      query["RepoId"] = request.repoId;
    }

    if (!$dara.isNull(request.repoId)) {
      query["RepoId"] = request.repoId;
    }

    if (!$dara.isNull(request.repoInstanceId)) {
      query["RepoInstanceId"] = request.repoInstanceId;
    }

    if (!$dara.isNull(request.repoName)) {
      query["RepoName"] = request.repoName;
    }

    if (!$dara.isNull(request.repoName)) {
      query["RepoName"] = request.repoName;
    }

    if (!$dara.isNull(request.repoNamespace)) {
      query["RepoNamespace"] = request.repoNamespace;
    }

    if (!$dara.isNull(request.repoRegionId)) {
      query["RepoRegionId"] = request.repoRegionId;
    }

    if (!$dara.isNull(request.scanRange)) {
      query["ScanRange"] = request.scanRange;
    }

    if (!$dara.isNull(request.statusList)) {
      query["StatusList"] = request.statusList;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCanFixVulList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCanFixVulListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCanFixVulListResponse({}));
  }

  /**
   * Queries the list of fixable vulnerabilities.
   * 
   * @param request - DescribeCanFixVulListRequest
   * @returns DescribeCanFixVulListResponse
   */
  async describeCanFixVulList(request: $_model.DescribeCanFixVulListRequest): Promise<$_model.DescribeCanFixVulListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCanFixVulListWithOptions(request, runtime);
  }

  /**
   * Checks the permissions on the trial use of Security Center.
   * 
   * @param request - DescribeCanTrySasRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCanTrySasResponse
   */
  async describeCanTrySasWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCanTrySasResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCanTrySas",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCanTrySasResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCanTrySasResponse({}));
  }

  /**
   * Checks the permissions on the trial use of Security Center.
   * @returns DescribeCanTrySasResponse
   */
  async describeCanTrySas(): Promise<$_model.DescribeCanTrySasResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCanTrySasWithOptions(runtime);
  }

  /**
   * Queries the chart data of a security report.
   * 
   * @param request - DescribeChartDataRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeChartDataResponse
   */
  async describeChartDataWithOptions(request: $_model.DescribeChartDataRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeChartDataResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.charId)) {
      query["CharId"] = request.charId;
    }

    if (!$dara.isNull(request.chartId)) {
      query["ChartId"] = request.chartId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.reportId)) {
      query["ReportId"] = request.reportId;
    }

    if (!$dara.isNull(request.timeEnd)) {
      query["TimeEnd"] = request.timeEnd;
    }

    if (!$dara.isNull(request.timeStart)) {
      query["TimeStart"] = request.timeStart;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeChartData",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeChartDataResponse>(await this.callApi(params, req, runtime), new $_model.DescribeChartDataResponse({}));
  }

  /**
   * Queries the chart data of a security report.
   * 
   * @param request - DescribeChartDataRequest
   * @returns DescribeChartDataResponse
   */
  async describeChartData(request: $_model.DescribeChartDataRequest): Promise<$_model.DescribeChartDataResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeChartDataWithOptions(request, runtime);
  }

  /**
   * Queries the charts that are supported by using the security report feature of Security Center.
   * 
   * @param request - DescribeChartListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeChartListResponse
   */
  async describeChartListWithOptions(request: $_model.DescribeChartListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeChartListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.projectCode)) {
      query["ProjectCode"] = request.projectCode;
    }

    if (!$dara.isNull(request.reportId)) {
      query["ReportId"] = request.reportId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeChartList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeChartListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeChartListResponse({}));
  }

  /**
   * Queries the charts that are supported by using the security report feature of Security Center.
   * 
   * @param request - DescribeChartListRequest
   * @returns DescribeChartListResponse
   */
  async describeChartList(request: $_model.DescribeChartListRequest): Promise<$_model.DescribeChartListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeChartListWithOptions(request, runtime);
  }

  /**
   * Queries the number of weak passwords that can cause high risks to your assets.
   * 
   * @param request - DescribeCheckEcsWarningsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCheckEcsWarningsResponse
   */
  async describeCheckEcsWarningsWithOptions(request: $_model.DescribeCheckEcsWarningsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCheckEcsWarningsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCheckEcsWarnings",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCheckEcsWarningsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCheckEcsWarningsResponse({}));
  }

  /**
   * Queries the number of weak passwords that can cause high risks to your assets.
   * 
   * @param request - DescribeCheckEcsWarningsRequest
   * @returns DescribeCheckEcsWarningsResponse
   */
  async describeCheckEcsWarnings(request: $_model.DescribeCheckEcsWarningsRequest): Promise<$_model.DescribeCheckEcsWarningsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCheckEcsWarningsWithOptions(request, runtime);
  }

  /**
   * Queries the parameters that you can configure to fix specified risk items.
   * 
   * @param request - DescribeCheckFixDetailsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCheckFixDetailsResponse
   */
  async describeCheckFixDetailsWithOptions(request: $_model.DescribeCheckFixDetailsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCheckFixDetailsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkIds)) {
      query["CheckIds"] = request.checkIds;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.riskId)) {
      query["RiskId"] = request.riskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCheckFixDetails",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCheckFixDetailsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCheckFixDetailsResponse({}));
  }

  /**
   * Queries the parameters that you can configure to fix specified risk items.
   * 
   * @param request - DescribeCheckFixDetailsRequest
   * @returns DescribeCheckFixDetailsResponse
   */
  async describeCheckFixDetails(request: $_model.DescribeCheckFixDetailsRequest): Promise<$_model.DescribeCheckFixDetailsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCheckFixDetailsWithOptions(request, runtime);
  }

  /**
   * Queries the result of the ISO 27001 compliance check.
   * 
   * @param request - DescribeCheckResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCheckResultResponse
   */
  async describeCheckResultWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCheckResultResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCheckResult",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCheckResultResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCheckResultResponse({}));
  }

  /**
   * Queries the result of the ISO 27001 compliance check.
   * @returns DescribeCheckResultResponse
   */
  async describeCheckResult(): Promise<$_model.DescribeCheckResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCheckResultWithOptions(runtime);
  }

  /**
   * Queries the number of alerts that are triggered by a check item.
   * 
   * @param request - DescribeCheckWarningCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCheckWarningCountResponse
   */
  async describeCheckWarningCountWithOptions(request: $_model.DescribeCheckWarningCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCheckWarningCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliUid)) {
      query["AliUid"] = request.aliUid;
    }

    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.riskId)) {
      query["RiskId"] = request.riskId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCheckWarningCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCheckWarningCountResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCheckWarningCountResponse({}));
  }

  /**
   * Queries the number of alerts that are triggered by a check item.
   * 
   * @param request - DescribeCheckWarningCountRequest
   * @returns DescribeCheckWarningCountResponse
   */
  async describeCheckWarningCount(request: $_model.DescribeCheckWarningCountRequest): Promise<$_model.DescribeCheckWarningCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCheckWarningCountWithOptions(request, runtime);
  }

  /**
   * Queries the details about a specified check item.
   * 
   * @param request - DescribeCheckWarningDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCheckWarningDetailResponse
   */
  async describeCheckWarningDetailWithOptions(request: $_model.DescribeCheckWarningDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCheckWarningDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.checkWarningId)) {
      query["CheckWarningId"] = request.checkWarningId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCheckWarningDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCheckWarningDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCheckWarningDetailResponse({}));
  }

  /**
   * Queries the details about a specified check item.
   * 
   * @param request - DescribeCheckWarningDetailRequest
   * @returns DescribeCheckWarningDetailResponse
   */
  async describeCheckWarningDetail(request: $_model.DescribeCheckWarningDetailRequest): Promise<$_model.DescribeCheckWarningDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCheckWarningDetailWithOptions(request, runtime);
  }

  /**
   * Queries the servers on which the same risk item is detected by specifying a baseline and a check item.
   * 
   * @param request - DescribeCheckWarningMachinesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCheckWarningMachinesResponse
   */
  async describeCheckWarningMachinesWithOptions(request: $_model.DescribeCheckWarningMachinesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCheckWarningMachinesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.filterUuid)) {
      query["FilterUuid"] = request.filterUuid;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.riskId)) {
      query["RiskId"] = request.riskId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCheckWarningMachines",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCheckWarningMachinesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCheckWarningMachinesResponse({}));
  }

  /**
   * Queries the servers on which the same risk item is detected by specifying a baseline and a check item.
   * 
   * @param request - DescribeCheckWarningMachinesRequest
   * @returns DescribeCheckWarningMachinesResponse
   */
  async describeCheckWarningMachines(request: $_model.DescribeCheckWarningMachinesRequest): Promise<$_model.DescribeCheckWarningMachinesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCheckWarningMachinesWithOptions(request, runtime);
  }

  /**
   * Queries the statistical information about baseline check results. The information includes the number of servers on which a baseline check is performed, the number of baseline check items, and the pass rate of check items in the last baseline check.
   * 
   * @param request - DescribeCheckWarningSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCheckWarningSummaryResponse
   */
  async describeCheckWarningSummaryWithOptions(request: $_model.DescribeCheckWarningSummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCheckWarningSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.containerFieldName)) {
      query["ContainerFieldName"] = request.containerFieldName;
    }

    if (!$dara.isNull(request.containerFieldValue)) {
      query["ContainerFieldValue"] = request.containerFieldValue;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.riskName)) {
      query["RiskName"] = request.riskName;
    }

    if (!$dara.isNull(request.riskStatus)) {
      query["RiskStatus"] = request.riskStatus;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.typeName)) {
      query["TypeName"] = request.typeName;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCheckWarningSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCheckWarningSummaryResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCheckWarningSummaryResponse({}));
  }

  /**
   * Queries the statistical information about baseline check results. The information includes the number of servers on which a baseline check is performed, the number of baseline check items, and the pass rate of check items in the last baseline check.
   * 
   * @param request - DescribeCheckWarningSummaryRequest
   * @returns DescribeCheckWarningSummaryResponse
   */
  async describeCheckWarningSummary(request: $_model.DescribeCheckWarningSummaryRequest): Promise<$_model.DescribeCheckWarningSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCheckWarningSummaryWithOptions(request, runtime);
  }

  /**
   * Queries information about specified risk items and the check items of a specified server.
   * 
   * @param request - DescribeCheckWarningsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCheckWarningsResponse
   */
  async describeCheckWarningsWithOptions(request: $_model.DescribeCheckWarningsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCheckWarningsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.checkType)) {
      query["CheckType"] = request.checkType;
    }

    if (!$dara.isNull(request.containerName)) {
      query["ContainerName"] = request.containerName;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.riskId)) {
      query["RiskId"] = request.riskId;
    }

    if (!$dara.isNull(request.riskStatus)) {
      query["RiskStatus"] = request.riskStatus;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCheckWarnings",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCheckWarningsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCheckWarningsResponse({}));
  }

  /**
   * Queries information about specified risk items and the check items of a specified server.
   * 
   * @param request - DescribeCheckWarningsRequest
   * @returns DescribeCheckWarningsResponse
   */
  async describeCheckWarnings(request: $_model.DescribeCheckWarningsRequest): Promise<$_model.DescribeCheckWarningsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCheckWarningsWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of the Security Center agent.
   * 
   * @param request - DescribeClientConfSetupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeClientConfSetupResponse
   */
  async describeClientConfSetupWithOptions(request: $_model.DescribeClientConfSetupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeClientConfSetupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.strategyTag)) {
      query["StrategyTag"] = request.strategyTag;
    }

    if (!$dara.isNull(request.strategyTagValue)) {
      query["StrategyTagValue"] = request.strategyTagValue;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeClientConfSetup",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeClientConfSetupResponse>(await this.callApi(params, req, runtime), new $_model.DescribeClientConfSetupResponse({}));
  }

  /**
   * Queries the configurations of the Security Center agent.
   * 
   * @param request - DescribeClientConfSetupRequest
   * @returns DescribeClientConfSetupResponse
   */
  async describeClientConfSetup(request: $_model.DescribeClientConfSetupRequest): Promise<$_model.DescribeClientConfSetupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeClientConfSetupWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of servers to which different tags are added.
   * 
   * @param request - DescribeClientConfStrategyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeClientConfStrategyResponse
   */
  async describeClientConfStrategyWithOptions(request: $_model.DescribeClientConfStrategyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeClientConfStrategyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.tagValue)) {
      query["TagValue"] = request.tagValue;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeClientConfStrategy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeClientConfStrategyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeClientConfStrategyResponse({}));
  }

  /**
   * Queries the configurations of servers to which different tags are added.
   * 
   * @param request - DescribeClientConfStrategyRequest
   * @returns DescribeClientConfStrategyResponse
   */
  async describeClientConfStrategy(request: $_model.DescribeClientConfStrategyRequest): Promise<$_model.DescribeClientConfStrategyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeClientConfStrategyWithOptions(request, runtime);
  }

  /**
   * Queries a list of agent issue types.
   * 
   * @param request - DescribeClientProblemTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeClientProblemTypeResponse
   */
  async describeClientProblemTypeWithOptions(request: $_model.DescribeClientProblemTypeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeClientProblemTypeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeClientProblemType",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeClientProblemTypeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeClientProblemTypeResponse({}));
  }

  /**
   * Queries a list of agent issue types.
   * 
   * @param request - DescribeClientProblemTypeRequest
   * @returns DescribeClientProblemTypeResponse
   */
  async describeClientProblemType(request: $_model.DescribeClientProblemTypeRequest): Promise<$_model.DescribeClientProblemTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeClientProblemTypeWithOptions(request, runtime);
  }

  /**
   * Queries the information about assets that meet specific search conditions. For example, you can search for assets by the instance name or region of the asset.
   * 
   * @remarks
   * You can search for an asset by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
   * 
   * @param request - DescribeCloudCenterInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCloudCenterInstancesResponse
   */
  async describeCloudCenterInstancesWithOptions(request: $_model.DescribeCloudCenterInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCloudCenterInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.flags)) {
      query["Flags"] = request.flags;
    }

    if (!$dara.isNull(request.importance)) {
      query["Importance"] = request.importance;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.logicalExp)) {
      query["LogicalExp"] = request.logicalExp;
    }

    if (!$dara.isNull(request.machineTypes)) {
      query["MachineTypes"] = request.machineTypes;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.noGroupTrace)) {
      query["NoGroupTrace"] = request.noGroupTrace;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.useNextToken)) {
      query["UseNextToken"] = request.useNextToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCloudCenterInstances",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCloudCenterInstancesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCloudCenterInstancesResponse({}));
  }

  /**
   * Queries the information about assets that meet specific search conditions. For example, you can search for assets by the instance name or region of the asset.
   * 
   * @remarks
   * You can search for an asset by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
   * 
   * @param request - DescribeCloudCenterInstancesRequest
   * @returns DescribeCloudCenterInstancesResponse
   */
  async describeCloudCenterInstances(request: $_model.DescribeCloudCenterInstancesRequest): Promise<$_model.DescribeCloudCenterInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCloudCenterInstancesWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of cloud services.
   * 
   * @deprecated OpenAPI DescribeCloudProductFieldStatistics is deprecated, please use Sas::2018-12-03::GetCloudAssetSummary instead.
   * 
   * @param request - DescribeCloudProductFieldStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCloudProductFieldStatisticsResponse
   */
  // Deprecated
  async describeCloudProductFieldStatisticsWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCloudProductFieldStatisticsResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCloudProductFieldStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCloudProductFieldStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCloudProductFieldStatisticsResponse({}));
  }

  /**
   * Queries the statistics of cloud services.
   * 
   * @deprecated OpenAPI DescribeCloudProductFieldStatistics is deprecated, please use Sas::2018-12-03::GetCloudAssetSummary instead.
   * @returns DescribeCloudProductFieldStatisticsResponse
   */
  // Deprecated
  async describeCloudProductFieldStatistics(): Promise<$_model.DescribeCloudProductFieldStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCloudProductFieldStatisticsWithOptions(runtime);
  }

  /**
   * Queries the multi-cloud assets added to Security Center.
   * 
   * @param request - DescribeCloudVendorAccountAKListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCloudVendorAccountAKListResponse
   */
  async describeCloudVendorAccountAKListWithOptions(request: $_model.DescribeCloudVendorAccountAKListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCloudVendorAccountAKListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.authIds)) {
      query["AuthIds"] = request.authIds;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.subAccountName)) {
      query["SubAccountName"] = request.subAccountName;
    }

    if (!$dara.isNull(request.vendorAuthAlias)) {
      query["VendorAuthAlias"] = request.vendorAuthAlias;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCloudVendorAccountAKList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCloudVendorAccountAKListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCloudVendorAccountAKListResponse({}));
  }

  /**
   * Queries the multi-cloud assets added to Security Center.
   * 
   * @param request - DescribeCloudVendorAccountAKListRequest
   * @returns DescribeCloudVendorAccountAKListResponse
   */
  async describeCloudVendorAccountAKList(request: $_model.DescribeCloudVendorAccountAKListRequest): Promise<$_model.DescribeCloudVendorAccountAKListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCloudVendorAccountAKListWithOptions(request, runtime);
  }

  /**
   * Query the trail configuration attributes of the corresponding AK configuration
   * 
   * @param request - DescribeCloudVendorTrialConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCloudVendorTrialConfigResponse
   */
  async describeCloudVendorTrialConfigWithOptions(request: $_model.DescribeCloudVendorTrialConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCloudVendorTrialConfigResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCloudVendorTrialConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCloudVendorTrialConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCloudVendorTrialConfigResponse({}));
  }

  /**
   * Query the trail configuration attributes of the corresponding AK configuration
   * 
   * @param request - DescribeCloudVendorTrialConfigRequest
   * @returns DescribeCloudVendorTrialConfigResponse
   */
  async describeCloudVendorTrialConfig(request: $_model.DescribeCloudVendorTrialConfigRequest): Promise<$_model.DescribeCloudVendorTrialConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCloudVendorTrialConfigWithOptions(request, runtime);
  }

  /**
   * Queries the information about an cluster based on the cluster ID.
   * 
   * @param request - DescribeClusterBasicInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeClusterBasicInfoResponse
   */
  async describeClusterBasicInfoWithOptions(request: $_model.DescribeClusterBasicInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeClusterBasicInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeClusterBasicInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeClusterBasicInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeClusterBasicInfoResponse({}));
  }

  /**
   * Queries the information about an cluster based on the cluster ID.
   * 
   * @param request - DescribeClusterBasicInfoRequest
   * @returns DescribeClusterBasicInfoResponse
   */
  async describeClusterBasicInfo(request: $_model.DescribeClusterBasicInfoRequest): Promise<$_model.DescribeClusterBasicInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeClusterBasicInfoWithOptions(request, runtime);
  }

  /**
   * Queries the statistical information about host security.
   * 
   * @param request - DescribeClusterHostSecuritySummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeClusterHostSecuritySummaryResponse
   */
  async describeClusterHostSecuritySummaryWithOptions(request: $_model.DescribeClusterHostSecuritySummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeClusterHostSecuritySummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.containerFieldName)) {
      query["ContainerFieldName"] = request.containerFieldName;
    }

    if (!$dara.isNull(request.containerFieldValue)) {
      query["ContainerFieldValue"] = request.containerFieldValue;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeClusterHostSecuritySummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeClusterHostSecuritySummaryResponse>(await this.callApi(params, req, runtime), new $_model.DescribeClusterHostSecuritySummaryResponse({}));
  }

  /**
   * Queries the statistical information about host security.
   * 
   * @param request - DescribeClusterHostSecuritySummaryRequest
   * @returns DescribeClusterHostSecuritySummaryResponse
   */
  async describeClusterHostSecuritySummary(request: $_model.DescribeClusterHostSecuritySummaryRequest): Promise<$_model.DescribeClusterHostSecuritySummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeClusterHostSecuritySummaryWithOptions(request, runtime);
  }

  /**
   * Queries the statistical information about image security.
   * 
   * @param request - DescribeClusterImageSecuritySummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeClusterImageSecuritySummaryResponse
   */
  async describeClusterImageSecuritySummaryWithOptions(request: $_model.DescribeClusterImageSecuritySummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeClusterImageSecuritySummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.containerFieldName)) {
      query["ContainerFieldName"] = request.containerFieldName;
    }

    if (!$dara.isNull(request.containerFieldValue)) {
      query["ContainerFieldValue"] = request.containerFieldValue;
    }

    if (!$dara.isNull(request.imageDigest)) {
      query["ImageDigest"] = request.imageDigest;
    }

    if (!$dara.isNull(request.imageRepoName)) {
      query["ImageRepoName"] = request.imageRepoName;
    }

    if (!$dara.isNull(request.imageRepoNamespace)) {
      query["ImageRepoNamespace"] = request.imageRepoNamespace;
    }

    if (!$dara.isNull(request.imageTag)) {
      query["ImageTag"] = request.imageTag;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeClusterImageSecuritySummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeClusterImageSecuritySummaryResponse>(await this.callApi(params, req, runtime), new $_model.DescribeClusterImageSecuritySummaryResponse({}));
  }

  /**
   * Queries the statistical information about image security.
   * 
   * @param request - DescribeClusterImageSecuritySummaryRequest
   * @returns DescribeClusterImageSecuritySummaryResponse
   */
  async describeClusterImageSecuritySummary(request: $_model.DescribeClusterImageSecuritySummaryRequest): Promise<$_model.DescribeClusterImageSecuritySummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeClusterImageSecuritySummaryWithOptions(request, runtime);
  }

  /**
   * Queries the information about a cluster.
   * 
   * @param request - DescribeClusterInfoListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeClusterInfoListResponse
   */
  async describeClusterInfoListWithOptions(request: $_model.DescribeClusterInfoListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeClusterInfoListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.target)) {
      query["Target"] = request.target;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeClusterInfoList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeClusterInfoListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeClusterInfoListResponse({}));
  }

  /**
   * Queries the information about a cluster.
   * 
   * @param request - DescribeClusterInfoListRequest
   * @returns DescribeClusterInfoListResponse
   */
  async describeClusterInfoList(request: $_model.DescribeClusterInfoListRequest): Promise<$_model.DescribeClusterInfoListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeClusterInfoListWithOptions(request, runtime);
  }

  /**
   * Queries information about the network topology edge by cluster.
   * 
   * @param request - DescribeClusterNetworkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeClusterNetworkResponse
   */
  async describeClusterNetworkWithOptions(request: $_model.DescribeClusterNetworkRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeClusterNetworkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeClusterNetwork",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeClusterNetworkResponse>(await this.callApi(params, req, runtime), new $_model.DescribeClusterNetworkResponse({}));
  }

  /**
   * Queries information about the network topology edge by cluster.
   * 
   * @param request - DescribeClusterNetworkRequest
   * @returns DescribeClusterNetworkResponse
   */
  async describeClusterNetwork(request: $_model.DescribeClusterNetworkRequest): Promise<$_model.DescribeClusterNetworkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeClusterNetworkWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of vulnerabilities that are detected on a cluster.
   * 
   * @param request - DescribeClusterVulStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeClusterVulStatisticsResponse
   */
  async describeClusterVulStatisticsWithOptions(request: $_model.DescribeClusterVulStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeClusterVulStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.types)) {
      query["Types"] = request.types;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeClusterVulStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeClusterVulStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeClusterVulStatisticsResponse({}));
  }

  /**
   * Queries the statistics of vulnerabilities that are detected on a cluster.
   * 
   * @param request - DescribeClusterVulStatisticsRequest
   * @returns DescribeClusterVulStatisticsResponse
   */
  async describeClusterVulStatistics(request: $_model.DescribeClusterVulStatisticsRequest): Promise<$_model.DescribeClusterVulStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeClusterVulStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the information about a specified feature.
   * 
   * @param request - DescribeCommonOverallConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCommonOverallConfigResponse
   */
  async describeCommonOverallConfigWithOptions(request: $_model.DescribeCommonOverallConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCommonOverallConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCommonOverallConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCommonOverallConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCommonOverallConfigResponse({}));
  }

  /**
   * Queries the information about a specified feature.
   * 
   * @param request - DescribeCommonOverallConfigRequest
   * @returns DescribeCommonOverallConfigResponse
   */
  async describeCommonOverallConfig(request: $_model.DescribeCommonOverallConfigRequest): Promise<$_model.DescribeCommonOverallConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCommonOverallConfigWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of features in proactive defense.
   * 
   * @param request - DescribeCommonOverallConfigListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCommonOverallConfigListResponse
   */
  async describeCommonOverallConfigListWithOptions(request: $_model.DescribeCommonOverallConfigListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCommonOverallConfigListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.typeList)) {
      query["TypeList"] = request.typeList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCommonOverallConfigList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCommonOverallConfigListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCommonOverallConfigListResponse({}));
  }

  /**
   * Queries the configurations of features in proactive defense.
   * 
   * @param request - DescribeCommonOverallConfigListRequest
   * @returns DescribeCommonOverallConfigListResponse
   */
  async describeCommonOverallConfigList(request: $_model.DescribeCommonOverallConfigListRequest): Promise<$_model.DescribeCommonOverallConfigListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCommonOverallConfigListWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of the proactive defense feature.
   * 
   * @param request - DescribeCommonTargetConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCommonTargetConfigResponse
   */
  async describeCommonTargetConfigWithOptions(request: $_model.DescribeCommonTargetConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCommonTargetConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCommonTargetConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCommonTargetConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCommonTargetConfigResponse({}));
  }

  /**
   * Queries the configurations of the proactive defense feature.
   * 
   * @param request - DescribeCommonTargetConfigRequest
   * @returns DescribeCommonTargetConfigResponse
   */
  async describeCommonTargetConfig(request: $_model.DescribeCommonTargetConfigRequest): Promise<$_model.DescribeCommonTargetConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCommonTargetConfigWithOptions(request, runtime);
  }

  /**
   * Queries the information about the servers based on the specified configuration item.
   * 
   * @param request - DescribeCommonTargetResultListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCommonTargetResultListResponse
   */
  async describeCommonTargetResultListWithOptions(request: $_model.DescribeCommonTargetResultListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCommonTargetResultListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCommonTargetResultList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCommonTargetResultListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCommonTargetResultListResponse({}));
  }

  /**
   * Queries the information about the servers based on the specified configuration item.
   * 
   * @param request - DescribeCommonTargetResultListRequest
   * @returns DescribeCommonTargetResultListResponse
   */
  async describeCommonTargetResultList(request: $_model.DescribeCommonTargetResultListRequest): Promise<$_model.DescribeCommonTargetResultListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCommonTargetResultListWithOptions(request, runtime);
  }

  /**
   * Queries the priorities to fix vulnerabilities.
   * 
   * @param request - DescribeConcernNecessityRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeConcernNecessityResponse
   */
  async describeConcernNecessityWithOptions(request: $_model.DescribeConcernNecessityRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeConcernNecessityResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeConcernNecessity",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeConcernNecessityResponse>(await this.callApi(params, req, runtime), new $_model.DescribeConcernNecessityResponse({}));
  }

  /**
   * Queries the priorities to fix vulnerabilities.
   * 
   * @param request - DescribeConcernNecessityRequest
   * @returns DescribeConcernNecessityResponse
   */
  async describeConcernNecessity(request: $_model.DescribeConcernNecessityRequest): Promise<$_model.DescribeConcernNecessityResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeConcernNecessityWithOptions(request, runtime);
  }

  /**
   * Queries the information about a containerized application.
   * 
   * @param request - DescribeContainerAppsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeContainerAppsResponse
   */
  async describeContainerAppsWithOptions(request: $_model.DescribeContainerAppsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeContainerAppsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.fieldValue)) {
      query["FieldValue"] = request.fieldValue;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeContainerApps",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeContainerAppsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeContainerAppsResponse({}));
  }

  /**
   * Queries the information about a containerized application.
   * 
   * @param request - DescribeContainerAppsRequest
   * @returns DescribeContainerAppsResponse
   */
  async describeContainerApps(request: $_model.DescribeContainerAppsRequest): Promise<$_model.DescribeContainerAppsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeContainerAppsWithOptions(request, runtime);
  }

  /**
   * Obtains the filter conditions that you can use to filter the containers.
   * 
   * @param request - DescribeContainerCriteriaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeContainerCriteriaResponse
   */
  async describeContainerCriteriaWithOptions(request: $_model.DescribeContainerCriteriaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeContainerCriteriaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupField)) {
      query["GroupField"] = request.groupField;
    }

    if (!$dara.isNull(request.value)) {
      query["Value"] = request.value;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeContainerCriteria",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeContainerCriteriaResponse>(await this.callApi(params, req, runtime), new $_model.DescribeContainerCriteriaResponse({}));
  }

  /**
   * Obtains the filter conditions that you can use to filter the containers.
   * 
   * @param request - DescribeContainerCriteriaRequest
   * @returns DescribeContainerCriteriaResponse
   */
  async describeContainerCriteria(request: $_model.DescribeContainerCriteriaRequest): Promise<$_model.DescribeContainerCriteriaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeContainerCriteriaWithOptions(request, runtime);
  }

  /**
   * Queries the statistical information about containers.
   * 
   * @param request - DescribeContainerFieldStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeContainerFieldStatisticsResponse
   */
  async describeContainerFieldStatisticsWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeContainerFieldStatisticsResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeContainerFieldStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeContainerFieldStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeContainerFieldStatisticsResponse({}));
  }

  /**
   * Queries the statistical information about containers.
   * @returns DescribeContainerFieldStatisticsResponse
   */
  async describeContainerFieldStatistics(): Promise<$_model.DescribeContainerFieldStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeContainerFieldStatisticsWithOptions(runtime);
  }

  /**
   * Queries the attribute details of containers.
   * 
   * @param request - DescribeContainerGroupedFieldDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeContainerGroupedFieldDetailResponse
   */
  async describeContainerGroupedFieldDetailWithOptions(request: $_model.DescribeContainerGroupedFieldDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeContainerGroupedFieldDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.groupField)) {
      query["GroupField"] = request.groupField;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeContainerGroupedFieldDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeContainerGroupedFieldDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeContainerGroupedFieldDetailResponse({}));
  }

  /**
   * Queries the attribute details of containers.
   * 
   * @param request - DescribeContainerGroupedFieldDetailRequest
   * @returns DescribeContainerGroupedFieldDetailResponse
   */
  async describeContainerGroupedFieldDetail(request: $_model.DescribeContainerGroupedFieldDetailRequest): Promise<$_model.DescribeContainerGroupedFieldDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeContainerGroupedFieldDetailWithOptions(request, runtime);
  }

  /**
   * Queries the information about containers.
   * 
   * @param request - DescribeContainerInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeContainerInstancesResponse
   */
  async describeContainerInstancesWithOptions(request: $_model.DescribeContainerInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeContainerInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.logicalExp)) {
      query["LogicalExp"] = request.logicalExp;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeContainerInstances",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeContainerInstancesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeContainerInstancesResponse({}));
  }

  /**
   * Queries the information about containers.
   * 
   * @param request - DescribeContainerInstancesRequest
   * @returns DescribeContainerInstancesResponse
   */
  async describeContainerInstances(request: $_model.DescribeContainerInstancesRequest): Promise<$_model.DescribeContainerInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeContainerInstancesWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of the vulnerability scan of one or more running container applications.
   * 
   * @param request - DescribeContainerScanConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeContainerScanConfigResponse
   */
  async describeContainerScanConfigWithOptions(request: $_model.DescribeContainerScanConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeContainerScanConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeContainerScanConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeContainerScanConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeContainerScanConfigResponse({}));
  }

  /**
   * Queries the configurations of the vulnerability scan of one or more running container applications.
   * 
   * @param request - DescribeContainerScanConfigRequest
   * @returns DescribeContainerScanConfigResponse
   */
  async describeContainerScanConfig(request: $_model.DescribeContainerScanConfigRequest): Promise<$_model.DescribeContainerScanConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeContainerScanConfigWithOptions(request, runtime);
  }

  /**
   * Queries the Kritis status of a Container Service for Kubernetes (ACK) cluster.
   * 
   * @param request - DescribeContainerServiceK8sClusterKritisStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeContainerServiceK8sClusterKritisStatusResponse
   */
  async describeContainerServiceK8sClusterKritisStatusWithOptions(request: $_model.DescribeContainerServiceK8sClusterKritisStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeContainerServiceK8sClusterKritisStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeContainerServiceK8sClusterKritisStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeContainerServiceK8sClusterKritisStatusResponse>(await this.callApi(params, req, runtime), new $_model.DescribeContainerServiceK8sClusterKritisStatusResponse({}));
  }

  /**
   * Queries the Kritis status of a Container Service for Kubernetes (ACK) cluster.
   * 
   * @param request - DescribeContainerServiceK8sClusterKritisStatusRequest
   * @returns DescribeContainerServiceK8sClusterKritisStatusResponse
   */
  async describeContainerServiceK8sClusterKritisStatus(request: $_model.DescribeContainerServiceK8sClusterKritisStatusRequest): Promise<$_model.DescribeContainerServiceK8sClusterKritisStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeContainerServiceK8sClusterKritisStatusWithOptions(request, runtime);
  }

  /**
   * Queries the namespace of a Container Service for Kubernetes (ACK) cluster.
   * 
   * @param request - DescribeContainerServiceK8sClusterNamespacesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeContainerServiceK8sClusterNamespacesResponse
   */
  async describeContainerServiceK8sClusterNamespacesWithOptions(request: $_model.DescribeContainerServiceK8sClusterNamespacesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeContainerServiceK8sClusterNamespacesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeContainerServiceK8sClusterNamespaces",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeContainerServiceK8sClusterNamespacesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeContainerServiceK8sClusterNamespacesResponse({}));
  }

  /**
   * Queries the namespace of a Container Service for Kubernetes (ACK) cluster.
   * 
   * @param request - DescribeContainerServiceK8sClusterNamespacesRequest
   * @returns DescribeContainerServiceK8sClusterNamespacesResponse
   */
  async describeContainerServiceK8sClusterNamespaces(request: $_model.DescribeContainerServiceK8sClusterNamespacesRequest): Promise<$_model.DescribeContainerServiceK8sClusterNamespacesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeContainerServiceK8sClusterNamespacesWithOptions(request, runtime);
  }

  /**
   * Queries a list of Container Service for Kubernetes (ACK) clusters.
   * 
   * @param request - DescribeContainerServiceK8sClustersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeContainerServiceK8sClustersResponse
   */
  async describeContainerServiceK8sClustersWithOptions(request: $_model.DescribeContainerServiceK8sClustersRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeContainerServiceK8sClustersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeContainerServiceK8sClusters",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeContainerServiceK8sClustersResponse>(await this.callApi(params, req, runtime), new $_model.DescribeContainerServiceK8sClustersResponse({}));
  }

  /**
   * Queries a list of Container Service for Kubernetes (ACK) clusters.
   * 
   * @param request - DescribeContainerServiceK8sClustersRequest
   * @returns DescribeContainerServiceK8sClustersResponse
   */
  async describeContainerServiceK8sClusters(request: $_model.DescribeContainerServiceK8sClustersRequest): Promise<$_model.DescribeContainerServiceK8sClustersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeContainerServiceK8sClustersWithOptions(request, runtime);
  }

  /**
   * Queries the alert statistics on container assets.
   * 
   * @remarks
   * Only users who created a Container Registry Enterprise Edition instance can call this operation.
   * 
   * @param request - DescribeContainerStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeContainerStatisticsResponse
   */
  async describeContainerStatisticsWithOptions(request: $_model.DescribeContainerStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeContainerStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeContainerStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeContainerStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeContainerStatisticsResponse({}));
  }

  /**
   * Queries the alert statistics on container assets.
   * 
   * @remarks
   * Only users who created a Container Registry Enterprise Edition instance can call this operation.
   * 
   * @param request - DescribeContainerStatisticsRequest
   * @returns DescribeContainerStatisticsResponse
   */
  async describeContainerStatistics(request: $_model.DescribeContainerStatisticsRequest): Promise<$_model.DescribeContainerStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeContainerStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the details of container assets by using an attribute.
   * 
   * @param request - DescribeContainerTagsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeContainerTagsResponse
   */
  async describeContainerTagsWithOptions(request: $_model.DescribeContainerTagsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeContainerTagsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.fieldName)) {
      query["FieldName"] = request.fieldName;
    }

    if (!$dara.isNull(request.fieldValue)) {
      query["FieldValue"] = request.fieldValue;
    }

    if (!$dara.isNull(request.namespace)) {
      query["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeContainerTags",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeContainerTagsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeContainerTagsResponse({}));
  }

  /**
   * Queries the details of container assets by using an attribute.
   * 
   * @param request - DescribeContainerTagsRequest
   * @returns DescribeContainerTagsResponse
   */
  async describeContainerTags(request: $_model.DescribeContainerTagsRequest): Promise<$_model.DescribeContainerTagsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeContainerTagsWithOptions(request, runtime);
  }

  /**
   * Queries the number of images that are not scanned.
   * 
   * @param request - DescribeCountNotScannedImageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCountNotScannedImageResponse
   */
  async describeCountNotScannedImageWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCountNotScannedImageResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCountNotScannedImage",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCountNotScannedImageResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCountNotScannedImageResponse({}));
  }

  /**
   * Queries the number of images that are not scanned.
   * @returns DescribeCountNotScannedImageResponse
   */
  async describeCountNotScannedImage(): Promise<$_model.DescribeCountNotScannedImageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCountNotScannedImageWithOptions(runtime);
  }

  /**
   * Queries the number of images that are scanned.
   * 
   * @param request - DescribeCountScannedImageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCountScannedImageResponse
   */
  async describeCountScannedImageWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCountScannedImageResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCountScannedImage",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCountScannedImageResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCountScannedImageResponse({}));
  }

  /**
   * Queries the number of images that are scanned.
   * @returns DescribeCountScannedImageResponse
   */
  async describeCountScannedImage(): Promise<$_model.DescribeCountScannedImageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCountScannedImageWithOptions(runtime);
  }

  /**
   * Queries the filter conditions that are used to search for assets in fuzzy match mode.
   * 
   * @param request - DescribeCriteriaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCriteriaResponse
   */
  async describeCriteriaWithOptions(request: $_model.DescribeCriteriaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCriteriaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.machineTypes)) {
      query["MachineTypes"] = request.machineTypes;
    }

    if (!$dara.isNull(request.supportAutoTag)) {
      query["SupportAutoTag"] = request.supportAutoTag;
    }

    if (!$dara.isNull(request.value)) {
      query["Value"] = request.value;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCriteria",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCriteriaResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCriteriaResponse({}));
  }

  /**
   * Queries the filter conditions that are used to search for assets in fuzzy match mode.
   * 
   * @param request - DescribeCriteriaRequest
   * @returns DescribeCriteriaResponse
   */
  async describeCriteria(request: $_model.DescribeCriteriaRequest): Promise<$_model.DescribeCriteriaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCriteriaWithOptions(request, runtime);
  }

  /**
   * Queries the list of servers on which the custom defense rule against brute-force attacks takes effect.
   * 
   * @param request - DescribeCustomBlockInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCustomBlockInstancesResponse
   */
  async describeCustomBlockInstancesWithOptions(request: $_model.DescribeCustomBlockInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCustomBlockInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.blockIp)) {
      query["BlockIp"] = request.blockIp;
    }

    if (!$dara.isNull(request.bound)) {
      query["Bound"] = request.bound;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCustomBlockInstances",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCustomBlockInstancesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCustomBlockInstancesResponse({}));
  }

  /**
   * Queries the list of servers on which the custom defense rule against brute-force attacks takes effect.
   * 
   * @param request - DescribeCustomBlockInstancesRequest
   * @returns DescribeCustomBlockInstancesResponse
   */
  async describeCustomBlockInstances(request: $_model.DescribeCustomBlockInstancesRequest): Promise<$_model.DescribeCustomBlockInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCustomBlockInstancesWithOptions(request, runtime);
  }

  /**
   * Queries the defense rules against brute-force attacks that are applied to one or more servers.
   * 
   * @param request - DescribeCustomBlockRecordsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCustomBlockRecordsResponse
   */
  async describeCustomBlockRecordsWithOptions(request: $_model.DescribeCustomBlockRecordsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCustomBlockRecordsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.blockIp)) {
      query["BlockIp"] = request.blockIp;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCustomBlockRecords",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCustomBlockRecordsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCustomBlockRecordsResponse({}));
  }

  /**
   * Queries the defense rules against brute-force attacks that are applied to one or more servers.
   * 
   * @param request - DescribeCustomBlockRecordsRequest
   * @returns DescribeCustomBlockRecordsResponse
   */
  async describeCustomBlockRecords(request: $_model.DescribeCustomBlockRecordsRequest): Promise<$_model.DescribeCustomBlockRecordsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCustomBlockRecordsWithOptions(request, runtime);
  }

  /**
   * Obtains the configurations of a security report.
   * 
   * @param request - DescribeCustomizeReportConfigDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCustomizeReportConfigDetailResponse
   */
  async describeCustomizeReportConfigDetailWithOptions(request: $_model.DescribeCustomizeReportConfigDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCustomizeReportConfigDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.reportId)) {
      query["ReportId"] = request.reportId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCustomizeReportConfigDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCustomizeReportConfigDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCustomizeReportConfigDetailResponse({}));
  }

  /**
   * Obtains the configurations of a security report.
   * 
   * @param request - DescribeCustomizeReportConfigDetailRequest
   * @returns DescribeCustomizeReportConfigDetailResponse
   */
  async describeCustomizeReportConfigDetail(request: $_model.DescribeCustomizeReportConfigDetailRequest): Promise<$_model.DescribeCustomizeReportConfigDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCustomizeReportConfigDetailWithOptions(request, runtime);
  }

  /**
   * Queries security reports.
   * 
   * @param request - DescribeCustomizeReportListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCustomizeReportListResponse
   */
  async describeCustomizeReportListWithOptions(request: $_model.DescribeCustomizeReportListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCustomizeReportListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pinned)) {
      query["Pinned"] = request.pinned;
    }

    if (!$dara.isNull(request.reportStatus)) {
      query["ReportStatus"] = request.reportStatus;
    }

    if (!$dara.isNull(request.reportType)) {
      query["ReportType"] = request.reportType;
    }

    if (!$dara.isNull(request.reportVersion)) {
      query["ReportVersion"] = request.reportVersion;
    }

    if (!$dara.isNull(request.title)) {
      query["Title"] = request.title;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCustomizeReportList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCustomizeReportListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCustomizeReportListResponse({}));
  }

  /**
   * Queries security reports.
   * 
   * @param request - DescribeCustomizeReportListRequest
   * @returns DescribeCustomizeReportListResponse
   */
  async describeCustomizeReportList(request: $_model.DescribeCustomizeReportListRequest): Promise<$_model.DescribeCustomizeReportListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCustomizeReportListWithOptions(request, runtime);
  }

  /**
   * Queries the Object Storage Service (OSS) information of the file that is uploaded to create custom weak password rules.
   * 
   * @param request - DescribeCustomizedDictUploadInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCustomizedDictUploadInfoResponse
   */
  async describeCustomizedDictUploadInfoWithOptions(request: $_model.DescribeCustomizedDictUploadInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCustomizedDictUploadInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCustomizedDictUploadInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCustomizedDictUploadInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCustomizedDictUploadInfoResponse({}));
  }

  /**
   * Queries the Object Storage Service (OSS) information of the file that is uploaded to create custom weak password rules.
   * 
   * @param request - DescribeCustomizedDictUploadInfoRequest
   * @returns DescribeCustomizedDictUploadInfoResponse
   */
  async describeCustomizedDictUploadInfo(request: $_model.DescribeCustomizedDictUploadInfoRequest): Promise<$_model.DescribeCustomizedDictUploadInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCustomizedDictUploadInfoWithOptions(request, runtime);
  }

  /**
   * Queries the servers to which custom policies are applied.
   * 
   * @param request - DescribeCustomizedStrategyTargetsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCustomizedStrategyTargetsResponse
   */
  async describeCustomizedStrategyTargetsWithOptions(request: $_model.DescribeCustomizedStrategyTargetsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCustomizedStrategyTargetsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCustomizedStrategyTargets",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCustomizedStrategyTargetsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCustomizedStrategyTargetsResponse({}));
  }

  /**
   * Queries the servers to which custom policies are applied.
   * 
   * @param request - DescribeCustomizedStrategyTargetsRequest
   * @returns DescribeCustomizedStrategyTargetsResponse
   */
  async describeCustomizedStrategyTargets(request: $_model.DescribeCustomizedStrategyTargetsRequest): Promise<$_model.DescribeCustomizedStrategyTargetsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCustomizedStrategyTargetsWithOptions(request, runtime);
  }

  /**
   * Queries periodic scan tasks. The tasks include image scan tasks, urgent vulnerability scan tasks, and virus scan tasks.
   * 
   * @param request - DescribeCycleTaskListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCycleTaskListResponse
   */
  async describeCycleTaskListWithOptions(request: $_model.DescribeCycleTaskListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCycleTaskListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configId)) {
      query["ConfigId"] = request.configId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCycleTaskList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCycleTaskListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCycleTaskListResponse({}));
  }

  /**
   * Queries periodic scan tasks. The tasks include image scan tasks, urgent vulnerability scan tasks, and virus scan tasks.
   * 
   * @param request - DescribeCycleTaskListRequest
   * @returns DescribeCycleTaskListResponse
   */
  async describeCycleTaskList(request: $_model.DescribeCycleTaskListRequest): Promise<$_model.DescribeCycleTaskListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCycleTaskListWithOptions(request, runtime);
  }

  /**
   * Queries data sources for DingTalk notifications. You can configure the types of alerts for which you want to use a DingTalk chatbot to send notifications based on the data sources.
   * 
   * @param request - DescribeDataSourceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDataSourceResponse
   */
  async describeDataSourceWithOptions(request: $_model.DescribeDataSourceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDataSourceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configType)) {
      query["ConfigType"] = request.configType;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDataSource",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDataSourceResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDataSourceResponse({}));
  }

  /**
   * Queries data sources for DingTalk notifications. You can configure the types of alerts for which you want to use a DingTalk chatbot to send notifications based on the data sources.
   * 
   * @param request - DescribeDataSourceRequest
   * @returns DescribeDataSourceResponse
   */
  async describeDataSource(request: $_model.DescribeDataSourceRequest): Promise<$_model.DescribeDataSourceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDataSourceWithOptions(request, runtime);
  }

  /**
   * Queries the keywords of a custom dictionary that is generated by using weak passwords.
   * 
   * @param request - DescribeDefaultKeyInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDefaultKeyInfoResponse
   */
  async describeDefaultKeyInfoWithOptions(request: $_model.DescribeDefaultKeyInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDefaultKeyInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDefaultKeyInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDefaultKeyInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDefaultKeyInfoResponse({}));
  }

  /**
   * Queries the keywords of a custom dictionary that is generated by using weak passwords.
   * 
   * @param request - DescribeDefaultKeyInfoRequest
   * @returns DescribeDefaultKeyInfoResponse
   */
  async describeDefaultKeyInfo(request: $_model.DescribeDefaultKeyInfoRequest): Promise<$_model.DescribeDefaultKeyInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDefaultKeyInfoWithOptions(request, runtime);
  }

  /**
   * Queries the default installation version of the proxy that is used in hybrid-cloud scenarios.
   * 
   * @param request - DescribeDefaultProxyInstallVersionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDefaultProxyInstallVersionResponse
   */
  async describeDefaultProxyInstallVersionWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDefaultProxyInstallVersionResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDefaultProxyInstallVersion",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDefaultProxyInstallVersionResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDefaultProxyInstallVersionResponse({}));
  }

  /**
   * Queries the default installation version of the proxy that is used in hybrid-cloud scenarios.
   * @returns DescribeDefaultProxyInstallVersionResponse
   */
  async describeDefaultProxyInstallVersion(): Promise<$_model.DescribeDefaultProxyInstallVersionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDefaultProxyInstallVersionWithOptions(runtime);
  }

  /**
   * Obtains DingTalk notifications.
   * 
   * @param request - DescribeDingTalkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDingTalkResponse
   */
  async describeDingTalkWithOptions(request: $_model.DescribeDingTalkRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDingTalkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.ruleActionName)) {
      query["RuleActionName"] = request.ruleActionName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDingTalk",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDingTalkResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDingTalkResponse({}));
  }

  /**
   * Obtains DingTalk notifications.
   * 
   * @param request - DescribeDingTalkRequest
   * @returns DescribeDingTalkResponse
   */
  async describeDingTalk(request: $_model.DescribeDingTalkRequest): Promise<$_model.DescribeDingTalkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDingTalkWithOptions(request, runtime);
  }

  /**
   * Queries the number of domain assets within your Alibaba Cloud account.
   * 
   * @param request - DescribeDomainCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDomainCountResponse
   */
  async describeDomainCountWithOptions(request: $_model.DescribeDomainCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDomainCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDomainCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDomainCountResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDomainCountResponse({}));
  }

  /**
   * Queries the number of domain assets within your Alibaba Cloud account.
   * 
   * @param request - DescribeDomainCountRequest
   * @returns DescribeDomainCountResponse
   */
  async describeDomainCount(request: $_model.DescribeDomainCountRequest): Promise<$_model.DescribeDomainCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDomainCountWithOptions(request, runtime);
  }

  /**
   * Queries the details of domain assets within your Alibaba Cloud account.
   * 
   * @param request - DescribeDomainDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDomainDetailResponse
   */
  async describeDomainDetailWithOptions(request: $_model.DescribeDomainDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDomainDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.domainName)) {
      query["DomainName"] = request.domainName;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDomainDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDomainDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDomainDetailResponse({}));
  }

  /**
   * Queries the details of domain assets within your Alibaba Cloud account.
   * 
   * @param request - DescribeDomainDetailRequest
   * @returns DescribeDomainDetailResponse
   */
  async describeDomainDetail(request: $_model.DescribeDomainDetailRequest): Promise<$_model.DescribeDomainDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDomainDetailWithOptions(request, runtime);
  }

  /**
   * Queries the information about the domain assets within your Alibaba Cloud account.
   * 
   * @param request - DescribeDomainListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDomainListResponse
   */
  async describeDomainListWithOptions(request: $_model.DescribeDomainListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDomainListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.domainType)) {
      query["DomainType"] = request.domainType;
    }

    if (!$dara.isNull(request.fuzzyDomain)) {
      query["FuzzyDomain"] = request.fuzzyDomain;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDomainList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDomainListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDomainListResponse({}));
  }

  /**
   * Queries the information about the domain assets within your Alibaba Cloud account.
   * 
   * @param request - DescribeDomainListRequest
   * @returns DescribeDomainListResponse
   */
  async describeDomainList(request: $_model.DescribeDomainListRequest): Promise<$_model.DescribeDomainListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDomainListWithOptions(request, runtime);
  }

  /**
   * Queries the security alert data of a website security report.
   * 
   * @param request - DescribeDomainSecureAlarmListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDomainSecureAlarmListResponse
   */
  async describeDomainSecureAlarmListWithOptions(request: $_model.DescribeDomainSecureAlarmListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDomainSecureAlarmListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDomainSecureAlarmList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDomainSecureAlarmListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDomainSecureAlarmListResponse({}));
  }

  /**
   * Queries the security alert data of a website security report.
   * 
   * @param request - DescribeDomainSecureAlarmListRequest
   * @returns DescribeDomainSecureAlarmListResponse
   */
  async describeDomainSecureAlarmList(request: $_model.DescribeDomainSecureAlarmListRequest): Promise<$_model.DescribeDomainSecureAlarmListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDomainSecureAlarmListWithOptions(request, runtime);
  }

  /**
   * Queries a list of risky websites in your website security report and the security information about the websites, including the number of vulnerabilities and the number of alerts.
   * 
   * @param request - DescribeDomainSecureRiskListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDomainSecureRiskListResponse
   */
  async describeDomainSecureRiskListWithOptions(request: $_model.DescribeDomainSecureRiskListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDomainSecureRiskListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDomainSecureRiskList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDomainSecureRiskListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDomainSecureRiskListResponse({}));
  }

  /**
   * Queries a list of risky websites in your website security report and the security information about the websites, including the number of vulnerabilities and the number of alerts.
   * 
   * @param request - DescribeDomainSecureRiskListRequest
   * @returns DescribeDomainSecureRiskListResponse
   */
  async describeDomainSecureRiskList(request: $_model.DescribeDomainSecureRiskListRequest): Promise<$_model.DescribeDomainSecureRiskListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDomainSecureRiskListWithOptions(request, runtime);
  }

  /**
   * Queries the security score in your website security report. The full score is 100.
   * 
   * @param request - DescribeDomainSecureScoreRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDomainSecureScoreResponse
   */
  async describeDomainSecureScoreWithOptions(request: $_model.DescribeDomainSecureScoreRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDomainSecureScoreResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDomainSecureScore",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDomainSecureScoreResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDomainSecureScoreResponse({}));
  }

  /**
   * Queries the security score in your website security report. The full score is 100.
   * 
   * @param request - DescribeDomainSecureScoreRequest
   * @returns DescribeDomainSecureScoreResponse
   */
  async describeDomainSecureScore(request: $_model.DescribeDomainSecureScoreRequest): Promise<$_model.DescribeDomainSecureScoreResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDomainSecureScoreWithOptions(request, runtime);
  }

  /**
   * Queries the statistics in your website security report, including the number of websites and the number of security events.
   * 
   * @param request - DescribeDomainSecureStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDomainSecureStatisticsResponse
   */
  async describeDomainSecureStatisticsWithOptions(request: $_model.DescribeDomainSecureStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDomainSecureStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDomainSecureStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDomainSecureStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDomainSecureStatisticsResponse({}));
  }

  /**
   * Queries the statistics in your website security report, including the number of websites and the number of security events.
   * 
   * @param request - DescribeDomainSecureStatisticsRequest
   * @returns DescribeDomainSecureStatisticsResponse
   */
  async describeDomainSecureStatistics(request: $_model.DescribeDomainSecureStatisticsRequest): Promise<$_model.DescribeDomainSecureStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDomainSecureStatisticsWithOptions(request, runtime);
  }

  /**
   * Query Network Security Report - Security Suggestions
   * 
   * @param request - DescribeDomainSecureSuggestsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDomainSecureSuggestsResponse
   */
  async describeDomainSecureSuggestsWithOptions(request: $_model.DescribeDomainSecureSuggestsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDomainSecureSuggestsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDomainSecureSuggests",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDomainSecureSuggestsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDomainSecureSuggestsResponse({}));
  }

  /**
   * Query Network Security Report - Security Suggestions
   * 
   * @param request - DescribeDomainSecureSuggestsRequest
   * @returns DescribeDomainSecureSuggestsResponse
   */
  async describeDomainSecureSuggests(request: $_model.DescribeDomainSecureSuggestsRequest): Promise<$_model.DescribeDomainSecureSuggestsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDomainSecureSuggestsWithOptions(request, runtime);
  }

  /**
   * Queries a list of vulnerabilities in your website security report.
   * 
   * @param request - DescribeDomainSecureVulListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDomainSecureVulListResponse
   */
  async describeDomainSecureVulListWithOptions(request: $_model.DescribeDomainSecureVulListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDomainSecureVulListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDomainSecureVulList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDomainSecureVulListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDomainSecureVulListResponse({}));
  }

  /**
   * Queries a list of vulnerabilities in your website security report.
   * 
   * @param request - DescribeDomainSecureVulListRequest
   * @returns DescribeDomainSecureVulListResponse
   */
  async describeDomainSecureVulList(request: $_model.DescribeDomainSecureVulListRequest): Promise<$_model.DescribeDomainSecureVulListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDomainSecureVulListWithOptions(request, runtime);
  }

  /**
   * Queries custom weak password rules for the baseline check feature.
   * 
   * @deprecated OpenAPI DescribeDynamicDict is deprecated, please use Sas::2018-12-03::DescribeCustomizedDict instead.
   * 
   * @param request - DescribeDynamicDictRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDynamicDictResponse
   */
  async describeDynamicDictWithOptions(request: $_model.DescribeDynamicDictRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDynamicDictResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDynamicDict",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDynamicDictResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDynamicDictResponse({}));
  }

  /**
   * Queries custom weak password rules for the baseline check feature.
   * 
   * @deprecated OpenAPI DescribeDynamicDict is deprecated, please use Sas::2018-12-03::DescribeCustomizedDict instead.
   * 
   * @param request - DescribeDynamicDictRequest
   * @returns DescribeDynamicDictResponse
   */
  // Deprecated
  async describeDynamicDict(request: $_model.DescribeDynamicDictRequest): Promise<$_model.DescribeDynamicDictResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDynamicDictWithOptions(request, runtime);
  }

  /**
   * Queries the information about an uploaded Object Storage Service (OSS) object that contains custom weak passwords and is used for baseline checks.
   * 
   * @deprecated OpenAPI DescribeDynamicDictUploadInfo is deprecated, please use Sas::2018-12-03::DescribeCustomizedDictUploadInfo instead.
   * 
   * @param request - DescribeDynamicDictUploadInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDynamicDictUploadInfoResponse
   */
  async describeDynamicDictUploadInfoWithOptions(request: $_model.DescribeDynamicDictUploadInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDynamicDictUploadInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDynamicDictUploadInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDynamicDictUploadInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDynamicDictUploadInfoResponse({}));
  }

  /**
   * Queries the information about an uploaded Object Storage Service (OSS) object that contains custom weak passwords and is used for baseline checks.
   * 
   * @deprecated OpenAPI DescribeDynamicDictUploadInfo is deprecated, please use Sas::2018-12-03::DescribeCustomizedDictUploadInfo instead.
   * 
   * @param request - DescribeDynamicDictUploadInfoRequest
   * @returns DescribeDynamicDictUploadInfoResponse
   */
  // Deprecated
  async describeDynamicDictUploadInfo(request: $_model.DescribeDynamicDictUploadInfoRequest): Promise<$_model.DescribeDynamicDictUploadInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDynamicDictUploadInfoWithOptions(request, runtime);
  }

  /**
   * Queries whether Security Center is authorized to scan for urgent vulnerabilities.
   * 
   * @param request - DescribeEmgUserAgreementRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeEmgUserAgreementResponse
   */
  async describeEmgUserAgreementWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeEmgUserAgreementResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeEmgUserAgreement",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeEmgUserAgreementResponse>(await this.callApi(params, req, runtime), new $_model.DescribeEmgUserAgreementResponse({}));
  }

  /**
   * Queries whether Security Center is authorized to scan for urgent vulnerabilities.
   * @returns DescribeEmgUserAgreementResponse
   */
  async describeEmgUserAgreement(): Promise<$_model.DescribeEmgUserAgreementResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeEmgUserAgreementWithOptions(runtime);
  }

  /**
   * Queries the details of urgent vulnerabilities.
   * 
   * @param request - DescribeEmgVulItemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeEmgVulItemResponse
   */
  async describeEmgVulItemWithOptions(request: $_model.DescribeEmgVulItemRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeEmgVulItemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkType)) {
      query["CheckType"] = request.checkType;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.riskStatus)) {
      query["RiskStatus"] = request.riskStatus;
    }

    if (!$dara.isNull(request.scanType)) {
      query["ScanType"] = request.scanType;
    }

    if (!$dara.isNull(request.vulName)) {
      query["VulName"] = request.vulName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeEmgVulItem",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeEmgVulItemResponse>(await this.callApi(params, req, runtime), new $_model.DescribeEmgVulItemResponse({}));
  }

  /**
   * Queries the details of urgent vulnerabilities.
   * 
   * @param request - DescribeEmgVulItemRequest
   * @returns DescribeEmgVulItemResponse
   */
  async describeEmgVulItem(request: $_model.DescribeEmgVulItemRequest): Promise<$_model.DescribeEmgVulItemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeEmgVulItemWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of alert events by risk level.
   * 
   * @param request - DescribeEventLevelCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeEventLevelCountResponse
   */
  async describeEventLevelCountWithOptions(request: $_model.DescribeEventLevelCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeEventLevelCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.containerFieldName)) {
      query["ContainerFieldName"] = request.containerFieldName;
    }

    if (!$dara.isNull(request.containerFieldValue)) {
      query["ContainerFieldValue"] = request.containerFieldValue;
    }

    if (!$dara.isNull(request.containerIds)) {
      query["ContainerIds"] = request.containerIds;
    }

    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.multiAccountActionType)) {
      query["MultiAccountActionType"] = request.multiAccountActionType;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeEventLevelCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeEventLevelCountResponse>(await this.callApi(params, req, runtime), new $_model.DescribeEventLevelCountResponse({}));
  }

  /**
   * Queries the statistics of alert events by risk level.
   * 
   * @param request - DescribeEventLevelCountRequest
   * @returns DescribeEventLevelCountResponse
   */
  async describeEventLevelCount(request: $_model.DescribeEventLevelCountRequest): Promise<$_model.DescribeEventLevelCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeEventLevelCountWithOptions(request, runtime);
  }

  /**
   * Queries the platforms that are supported by the feature of container threat detection.
   * 
   * @param request - DescribeEventOnStageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeEventOnStageResponse
   */
  async describeEventOnStageWithOptions(request: $_model.DescribeEventOnStageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeEventOnStageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeEventOnStage",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeEventOnStageResponse>(await this.callApi(params, req, runtime), new $_model.DescribeEventOnStageResponse({}));
  }

  /**
   * Queries the platforms that are supported by the feature of container threat detection.
   * 
   * @param request - DescribeEventOnStageRequest
   * @returns DescribeEventOnStageResponse
   */
  async describeEventOnStage(request: $_model.DescribeEventOnStageRequest): Promise<$_model.DescribeEventOnStageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeEventOnStageWithOptions(request, runtime);
  }

  /**
   * Queries the directories that are excluded from anti-ransomware.
   * 
   * @param request - DescribeExcludeSystemPathRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeExcludeSystemPathResponse
   */
  async describeExcludeSystemPathWithOptions(request: $_model.DescribeExcludeSystemPathRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeExcludeSystemPathResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeExcludeSystemPath",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeExcludeSystemPathResponse>(await this.callApi(params, req, runtime), new $_model.DescribeExcludeSystemPathResponse({}));
  }

  /**
   * Queries the directories that are excluded from anti-ransomware.
   * 
   * @param request - DescribeExcludeSystemPathRequest
   * @returns DescribeExcludeSystemPathResponse
   */
  async describeExcludeSystemPath(request: $_model.DescribeExcludeSystemPathRequest): Promise<$_model.DescribeExcludeSystemPathResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeExcludeSystemPathWithOptions(request, runtime);
  }

  /**
   * Queries the progress of a task that exports your assets to an Excel file.
   * 
   * @param request - DescribeExportInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeExportInfoResponse
   */
  async describeExportInfoWithOptions(request: $_model.DescribeExportInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeExportInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.exportId)) {
      query["ExportId"] = request.exportId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeExportInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeExportInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeExportInfoResponse({}));
  }

  /**
   * Queries the progress of a task that exports your assets to an Excel file.
   * 
   * @param request - DescribeExportInfoRequest
   * @returns DescribeExportInfoResponse
   */
  async describeExportInfo(request: $_model.DescribeExportInfoRequest): Promise<$_model.DescribeExportInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeExportInfoWithOptions(request, runtime);
  }

  /**
   * Queries the weak password-related risks of a specified server that is exposed on the Internet.
   * 
   * @param request - DescribeExposedCheckWarningRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeExposedCheckWarningResponse
   */
  async describeExposedCheckWarningWithOptions(request: $_model.DescribeExposedCheckWarningRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeExposedCheckWarningResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.typeName)) {
      query["TypeName"] = request.typeName;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeExposedCheckWarning",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeExposedCheckWarningResponse>(await this.callApi(params, req, runtime), new $_model.DescribeExposedCheckWarningResponse({}));
  }

  /**
   * Queries the weak password-related risks of a specified server that is exposed on the Internet.
   * 
   * @param request - DescribeExposedCheckWarningRequest
   * @returns DescribeExposedCheckWarningResponse
   */
  async describeExposedCheckWarning(request: $_model.DescribeExposedCheckWarningRequest): Promise<$_model.DescribeExposedCheckWarningResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeExposedCheckWarningWithOptions(request, runtime);
  }

  /**
   * Queries the search conditions that are used to search for exposed assets.
   * 
   * @param request - DescribeExposedInstanceCriteriaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeExposedInstanceCriteriaResponse
   */
  async describeExposedInstanceCriteriaWithOptions(request: $_model.DescribeExposedInstanceCriteriaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeExposedInstanceCriteriaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.value)) {
      query["Value"] = request.value;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeExposedInstanceCriteria",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeExposedInstanceCriteriaResponse>(await this.callApi(params, req, runtime), new $_model.DescribeExposedInstanceCriteriaResponse({}));
  }

  /**
   * Queries the search conditions that are used to search for exposed assets.
   * 
   * @param request - DescribeExposedInstanceCriteriaRequest
   * @returns DescribeExposedInstanceCriteriaResponse
   */
  async describeExposedInstanceCriteria(request: $_model.DescribeExposedInstanceCriteriaRequest): Promise<$_model.DescribeExposedInstanceCriteriaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeExposedInstanceCriteriaWithOptions(request, runtime);
  }

  /**
   * Queries the details of a specified server that is exposed on the Internet.
   * 
   * @param request - DescribeExposedInstanceDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeExposedInstanceDetailResponse
   */
  async describeExposedInstanceDetailWithOptions(request: $_model.DescribeExposedInstanceDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeExposedInstanceDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeExposedInstanceDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeExposedInstanceDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeExposedInstanceDetailResponse({}));
  }

  /**
   * Queries the details of a specified server that is exposed on the Internet.
   * 
   * @param request - DescribeExposedInstanceDetailRequest
   * @returns DescribeExposedInstanceDetailResponse
   */
  async describeExposedInstanceDetail(request: $_model.DescribeExposedInstanceDetailRequest): Promise<$_model.DescribeExposedInstanceDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeExposedInstanceDetailWithOptions(request, runtime);
  }

  /**
   * Queries the information about the assets that are exposed on the Internet.
   * 
   * @param request - DescribeExposedInstanceListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeExposedInstanceListResponse
   */
  async describeExposedInstanceListWithOptions(request: $_model.DescribeExposedInstanceListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeExposedInstanceListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.assetType)) {
      query["AssetType"] = request.assetType;
    }

    if (!$dara.isNull(request.cspmStatus)) {
      query["CspmStatus"] = request.cspmStatus;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.exposureComponent)) {
      query["ExposureComponent"] = request.exposureComponent;
    }

    if (!$dara.isNull(request.exposureComponentBizType)) {
      query["ExposureComponentBizType"] = request.exposureComponentBizType;
    }

    if (!$dara.isNull(request.exposureIp)) {
      query["ExposureIp"] = request.exposureIp;
    }

    if (!$dara.isNull(request.exposurePort)) {
      query["ExposurePort"] = request.exposurePort;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.healthStatus)) {
      query["HealthStatus"] = request.healthStatus;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceName)) {
      query["InstanceName"] = request.instanceName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.vulStatus)) {
      query["VulStatus"] = request.vulStatus;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeExposedInstanceList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeExposedInstanceListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeExposedInstanceListResponse({}));
  }

  /**
   * Queries the information about the assets that are exposed on the Internet.
   * 
   * @param request - DescribeExposedInstanceListRequest
   * @returns DescribeExposedInstanceListResponse
   */
  async describeExposedInstanceList(request: $_model.DescribeExposedInstanceListRequest): Promise<$_model.DescribeExposedInstanceListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeExposedInstanceListWithOptions(request, runtime);
  }

  /**
   * Queries the exposure statistics of the assets on the Internet.
   * 
   * @param request - DescribeExposedStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeExposedStatisticsResponse
   */
  async describeExposedStatisticsWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeExposedStatisticsResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeExposedStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeExposedStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeExposedStatisticsResponse({}));
  }

  /**
   * Queries the exposure statistics of the assets on the Internet.
   * @returns DescribeExposedStatisticsResponse
   */
  async describeExposedStatistics(): Promise<$_model.DescribeExposedStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeExposedStatisticsWithOptions(runtime);
  }

  /**
   * Queries the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet.
   * 
   * @param request - DescribeExposedStatisticsDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeExposedStatisticsDetailResponse
   */
  async describeExposedStatisticsDetailWithOptions(request: $_model.DescribeExposedStatisticsDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeExposedStatisticsDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.statisticsType)) {
      query["StatisticsType"] = request.statisticsType;
    }

    if (!$dara.isNull(request.statisticsTypeGatewayType)) {
      query["StatisticsTypeGatewayType"] = request.statisticsTypeGatewayType;
    }

    if (!$dara.isNull(request.statisticsTypeInstanceValue)) {
      query["StatisticsTypeInstanceValue"] = request.statisticsTypeInstanceValue;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeExposedStatisticsDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeExposedStatisticsDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeExposedStatisticsDetailResponse({}));
  }

  /**
   * Queries the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet.
   * 
   * @param request - DescribeExposedStatisticsDetailRequest
   * @returns DescribeExposedStatisticsDetailResponse
   */
  async describeExposedStatisticsDetail(request: $_model.DescribeExposedStatisticsDetailRequest): Promise<$_model.DescribeExposedStatisticsDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeExposedStatisticsDetailWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of servers.
   * 
   * @param request - DescribeFieldStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeFieldStatisticsResponse
   */
  async describeFieldStatisticsWithOptions(request: $_model.DescribeFieldStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeFieldStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.machineTypes)) {
      query["MachineTypes"] = request.machineTypes;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeFieldStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeFieldStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeFieldStatisticsResponse({}));
  }

  /**
   * Queries the statistics of servers.
   * 
   * @param request - DescribeFieldStatisticsRequest
   * @returns DescribeFieldStatisticsResponse
   */
  async describeFieldStatistics(request: $_model.DescribeFieldStatisticsRequest): Promise<$_model.DescribeFieldStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeFieldStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the number of vulnerabilities that are fixed by the pay-as-you-go vulnerability fixing feature.
   * 
   * @param request - DescribeFixUsedCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeFixUsedCountResponse
   */
  async describeFixUsedCountWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeFixUsedCountResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeFixUsedCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeFixUsedCountResponse>(await this.callApi(params, req, runtime), new $_model.DescribeFixUsedCountResponse({}));
  }

  /**
   * Queries the number of vulnerabilities that are fixed by the pay-as-you-go vulnerability fixing feature.
   * @returns DescribeFixUsedCountResponse
   */
  async describeFixUsedCount(): Promise<$_model.DescribeFixUsedCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeFixUsedCountWithOptions(runtime);
  }

  /**
   * Queries the pre-patches that are required to fix a specified Windows system vulnerability.
   * 
   * @param request - DescribeFrontVulPatchListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeFrontVulPatchListResponse
   */
  async describeFrontVulPatchListWithOptions(request: $_model.DescribeFrontVulPatchListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeFrontVulPatchListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.info)) {
      query["Info"] = request.info;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.operateType)) {
      query["OperateType"] = request.operateType;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeFrontVulPatchList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeFrontVulPatchListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeFrontVulPatchListResponse({}));
  }

  /**
   * Queries the pre-patches that are required to fix a specified Windows system vulnerability.
   * 
   * @param request - DescribeFrontVulPatchListRequest
   * @returns DescribeFrontVulPatchListResponse
   */
  async describeFrontVulPatchList(request: $_model.DescribeFrontVulPatchListRequest): Promise<$_model.DescribeFrontVulPatchListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeFrontVulPatchListWithOptions(request, runtime);
  }

  /**
   * Alert Event Investigation
   * 
   * @param request - DescribeGraph4InvestigationOnlineRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeGraph4InvestigationOnlineResponse
   */
  async describeGraph4InvestigationOnlineWithOptions(request: $_model.DescribeGraph4InvestigationOnlineRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeGraph4InvestigationOnlineResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.anomalyId)) {
      query["AnomalyId"] = request.anomalyId;
    }

    if (!$dara.isNull(request.anomalyUuid)) {
      query["AnomalyUuid"] = request.anomalyUuid;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.namespace)) {
      query["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.vertexId)) {
      query["VertexId"] = request.vertexId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeGraph4InvestigationOnline",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeGraph4InvestigationOnlineResponse>(await this.callApi(params, req, runtime), new $_model.DescribeGraph4InvestigationOnlineResponse({}));
  }

  /**
   * Alert Event Investigation
   * 
   * @param request - DescribeGraph4InvestigationOnlineRequest
   * @returns DescribeGraph4InvestigationOnlineResponse
   */
  async describeGraph4InvestigationOnline(request: $_model.DescribeGraph4InvestigationOnlineRequest): Promise<$_model.DescribeGraph4InvestigationOnlineResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeGraph4InvestigationOnlineWithOptions(request, runtime);
  }

  /**
   * Queries the structure of a group.
   * 
   * @param request - DescribeGroupStructRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeGroupStructResponse
   */
  async describeGroupStructWithOptions(request: $_model.DescribeGroupStructRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeGroupStructResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeGroupStruct",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeGroupStructResponse>(await this.callApi(params, req, runtime), new $_model.DescribeGroupStructResponse({}));
  }

  /**
   * Queries the structure of a group.
   * 
   * @param request - DescribeGroupStructRequest
   * @returns DescribeGroupStructResponse
   */
  async describeGroupStruct(request: $_model.DescribeGroupStructRequest): Promise<$_model.DescribeGroupStructResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeGroupStructWithOptions(request, runtime);
  }

  /**
   * Queries containers by group type.
   * 
   * @param request - DescribeGroupedContainerInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeGroupedContainerInstancesResponse
   */
  async describeGroupedContainerInstancesWithOptions(request: $_model.DescribeGroupedContainerInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeGroupedContainerInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.fieldValue)) {
      query["FieldValue"] = request.fieldValue;
    }

    if (!$dara.isNull(request.groupField)) {
      query["GroupField"] = request.groupField;
    }

    if (!$dara.isNull(request.logicalExp)) {
      query["LogicalExp"] = request.logicalExp;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeGroupedContainerInstances",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeGroupedContainerInstancesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeGroupedContainerInstancesResponse({}));
  }

  /**
   * Queries containers by group type.
   * 
   * @param request - DescribeGroupedContainerInstancesRequest
   * @returns DescribeGroupedContainerInstancesResponse
   */
  async describeGroupedContainerInstances(request: $_model.DescribeGroupedContainerInstancesRequest): Promise<$_model.DescribeGroupedContainerInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeGroupedContainerInstancesWithOptions(request, runtime);
  }

  /**
   * Queries the statistical information about assets based on a specified filter condition.
   * 
   * @param request - DescribeGroupedInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeGroupedInstancesResponse
   */
  async describeGroupedInstancesWithOptions(request: $_model.DescribeGroupedInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeGroupedInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.fieldValue)) {
      query["FieldValue"] = request.fieldValue;
    }

    if (!$dara.isNull(request.groupField)) {
      query["GroupField"] = request.groupField;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.machineTypes)) {
      query["MachineTypes"] = request.machineTypes;
    }

    if (!$dara.isNull(request.noPage)) {
      query["NoPage"] = request.noPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.saleVersionCheckCode)) {
      query["SaleVersionCheckCode"] = request.saleVersionCheckCode;
    }

    if (!$dara.isNull(request.vendor)) {
      query["Vendor"] = request.vendor;
    }

    if (!$dara.isNull(request.vendors)) {
      query["Vendors"] = request.vendors;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeGroupedInstances",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeGroupedInstancesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeGroupedInstancesResponse({}));
  }

  /**
   * Queries the statistical information about assets based on a specified filter condition.
   * 
   * @param request - DescribeGroupedInstancesRequest
   * @returns DescribeGroupedInstancesResponse
   */
  async describeGroupedInstances(request: $_model.DescribeGroupedInstancesRequest): Promise<$_model.DescribeGroupedInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeGroupedInstancesWithOptions(request, runtime);
  }

  /**
   * Queries a list of malicious image samples.
   * 
   * @param request - DescribeGroupedMaliciousFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeGroupedMaliciousFilesResponse
   */
  async describeGroupedMaliciousFilesWithOptions(request: $_model.DescribeGroupedMaliciousFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeGroupedMaliciousFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.fuzzyMaliciousName)) {
      query["FuzzyMaliciousName"] = request.fuzzyMaliciousName;
    }

    if (!$dara.isNull(request.imageDigest)) {
      query["ImageDigest"] = request.imageDigest;
    }

    if (!$dara.isNull(request.imageLayer)) {
      query["ImageLayer"] = request.imageLayer;
    }

    if (!$dara.isNull(request.imageTag)) {
      query["ImageTag"] = request.imageTag;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.levels)) {
      query["Levels"] = request.levels;
    }

    if (!$dara.isNull(request.maliciousMd5)) {
      query["MaliciousMd5"] = request.maliciousMd5;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.repoId)) {
      query["RepoId"] = request.repoId;
    }

    if (!$dara.isNull(request.repoInstanceId)) {
      query["RepoInstanceId"] = request.repoInstanceId;
    }

    if (!$dara.isNull(request.repoName)) {
      query["RepoName"] = request.repoName;
    }

    if (!$dara.isNull(request.repoNamespace)) {
      query["RepoNamespace"] = request.repoNamespace;
    }

    if (!$dara.isNull(request.repoRegionId)) {
      query["RepoRegionId"] = request.repoRegionId;
    }

    if (!$dara.isNull(request.scanRange)) {
      query["ScanRange"] = request.scanRange;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeGroupedMaliciousFiles",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeGroupedMaliciousFilesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeGroupedMaliciousFilesResponse({}));
  }

  /**
   * Queries a list of malicious image samples.
   * 
   * @param request - DescribeGroupedMaliciousFilesRequest
   * @returns DescribeGroupedMaliciousFilesResponse
   */
  async describeGroupedMaliciousFiles(request: $_model.DescribeGroupedMaliciousFilesRequest): Promise<$_model.DescribeGroupedMaliciousFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeGroupedMaliciousFilesWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of asset tags.
   * 
   * @param request - DescribeGroupedTagsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeGroupedTagsResponse
   */
  async describeGroupedTagsWithOptions(request: $_model.DescribeGroupedTagsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeGroupedTagsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.machineTypes)) {
      query["MachineTypes"] = request.machineTypes;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeGroupedTags",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeGroupedTagsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeGroupedTagsResponse({}));
  }

  /**
   * Queries the statistics of asset tags.
   * 
   * @param request - DescribeGroupedTagsRequest
   * @returns DescribeGroupedTagsResponse
   */
  async describeGroupedTags(request: $_model.DescribeGroupedTagsRequest): Promise<$_model.DescribeGroupedTagsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeGroupedTagsWithOptions(request, runtime);
  }

  /**
   * Queries vulnerabilities by group.
   * 
   * @param request - DescribeGroupedVulRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeGroupedVulResponse
   */
  async describeGroupedVulWithOptions(request: $_model.DescribeGroupedVulRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeGroupedVulResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliasName)) {
      query["AliasName"] = request.aliasName;
    }

    if (!$dara.isNull(request.assetType)) {
      query["AssetType"] = request.assetType;
    }

    if (!$dara.isNull(request.attachTypes)) {
      query["AttachTypes"] = request.attachTypes;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.containerFieldName)) {
      query["ContainerFieldName"] = request.containerFieldName;
    }

    if (!$dara.isNull(request.containerFieldValue)) {
      query["ContainerFieldValue"] = request.containerFieldValue;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.cveId)) {
      query["CveId"] = request.cveId;
    }

    if (!$dara.isNull(request.dealed)) {
      query["Dealed"] = request.dealed;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.necessity)) {
      query["Necessity"] = request.necessity;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.raspDefend)) {
      query["RaspDefend"] = request.raspDefend;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.searchTags)) {
      query["SearchTags"] = request.searchTags;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeGroupedVul",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeGroupedVulResponse>(await this.callApi(params, req, runtime), new $_model.DescribeGroupedVulResponse({}));
  }

  /**
   * Queries vulnerabilities by group.
   * 
   * @param request - DescribeGroupedVulRequest
   * @returns DescribeGroupedVulResponse
   */
  async describeGroupedVul(request: $_model.DescribeGroupedVulRequest): Promise<$_model.DescribeGroupedVulResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeGroupedVulWithOptions(request, runtime);
  }

  /**
   * Queries the information about baseline export, including the name of the file to which baselines are exported and the download URL for the file.
   * 
   * @param request - DescribeHcExportInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHcExportInfoResponse
   */
  async describeHcExportInfoWithOptions(request: $_model.DescribeHcExportInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHcExportInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.exportId)) {
      query["ExportId"] = request.exportId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHcExportInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHcExportInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHcExportInfoResponse({}));
  }

  /**
   * Queries the information about baseline export, including the name of the file to which baselines are exported and the download URL for the file.
   * 
   * @param request - DescribeHcExportInfoRequest
   * @returns DescribeHcExportInfoResponse
   */
  async describeHcExportInfo(request: $_model.DescribeHcExportInfoRequest): Promise<$_model.DescribeHcExportInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHcExportInfoWithOptions(request, runtime);
  }

  /**
   * Queries statistics on the quota of honeypots.
   * 
   * @param request - DescribeHoneyPotAuthRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHoneyPotAuthResponse
   */
  async describeHoneyPotAuthWithOptions(request: $_model.DescribeHoneyPotAuthRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHoneyPotAuthResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHoneyPotAuth",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHoneyPotAuthResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHoneyPotAuthResponse({}));
  }

  /**
   * Queries statistics on the quota of honeypots.
   * 
   * @param request - DescribeHoneyPotAuthRequest
   * @returns DescribeHoneyPotAuthResponse
   */
  async describeHoneyPotAuth(request: $_model.DescribeHoneyPotAuthRequest): Promise<$_model.DescribeHoneyPotAuthResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHoneyPotAuthWithOptions(request, runtime);
  }

  /**
   * Queries the top five virtual private clouds (VPCs) or assets for which alerts are most frequently generated.
   * 
   * @param request - DescribeHoneyPotSuspStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHoneyPotSuspStatisticsResponse
   */
  async describeHoneyPotSuspStatisticsWithOptions(request: $_model.DescribeHoneyPotSuspStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHoneyPotSuspStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.statisticsDays)) {
      query["StatisticsDays"] = request.statisticsDays;
    }

    if (!$dara.isNull(request.statisticsKeyType)) {
      query["StatisticsKeyType"] = request.statisticsKeyType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHoneyPotSuspStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHoneyPotSuspStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHoneyPotSuspStatisticsResponse({}));
  }

  /**
   * Queries the top five virtual private clouds (VPCs) or assets for which alerts are most frequently generated.
   * 
   * @param request - DescribeHoneyPotSuspStatisticsRequest
   * @returns DescribeHoneyPotSuspStatisticsResponse
   */
  async describeHoneyPotSuspStatistics(request: $_model.DescribeHoneyPotSuspStatisticsRequest): Promise<$_model.DescribeHoneyPotSuspStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHoneyPotSuspStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries proxy clusters by page.
   * 
   * @param request - DescribeHybridProxyClusterListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHybridProxyClusterListResponse
   */
  async describeHybridProxyClusterListWithOptions(request: $_model.DescribeHybridProxyClusterListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHybridProxyClusterListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHybridProxyClusterList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHybridProxyClusterListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHybridProxyClusterListResponse({}));
  }

  /**
   * Queries proxy clusters by page.
   * 
   * @param request - DescribeHybridProxyClusterListRequest
   * @returns DescribeHybridProxyClusterListResponse
   */
  async describeHybridProxyClusterList(request: $_model.DescribeHybridProxyClusterListRequest): Promise<$_model.DescribeHybridProxyClusterListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHybridProxyClusterListWithOptions(request, runtime);
  }

  /**
   * Queries the servers that are connected to a proxy in a hybrid cloud by page.
   * 
   * @param request - DescribeHybridProxyLinkedClientListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHybridProxyLinkedClientListResponse
   */
  async describeHybridProxyLinkedClientListWithOptions(request: $_model.DescribeHybridProxyLinkedClientListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHybridProxyLinkedClientListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.proxyUuid)) {
      query["ProxyUuid"] = request.proxyUuid;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHybridProxyLinkedClientList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHybridProxyLinkedClientListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHybridProxyLinkedClientListResponse({}));
  }

  /**
   * Queries the servers that are connected to a proxy in a hybrid cloud by page.
   * 
   * @param request - DescribeHybridProxyLinkedClientListRequest
   * @returns DescribeHybridProxyLinkedClientListResponse
   */
  async describeHybridProxyLinkedClientList(request: $_model.DescribeHybridProxyLinkedClientListRequest): Promise<$_model.DescribeHybridProxyLinkedClientListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHybridProxyLinkedClientListWithOptions(request, runtime);
  }

  /**
   * Queries the proxy nodes that are deployed in a proxy cluster by page.
   * 
   * @param request - DescribeHybridProxyListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHybridProxyListResponse
   */
  async describeHybridProxyListWithOptions(request: $_model.DescribeHybridProxyListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHybridProxyListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHybridProxyList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHybridProxyListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHybridProxyListResponse({}));
  }

  /**
   * Queries the proxy nodes that are deployed in a proxy cluster by page.
   * 
   * @param request - DescribeHybridProxyListRequest
   * @returns DescribeHybridProxyListResponse
   */
  async describeHybridProxyList(request: $_model.DescribeHybridProxyListRequest): Promise<$_model.DescribeHybridProxyListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHybridProxyListWithOptions(request, runtime);
  }

  /**
   * Queries the data collection configurations of a proxy cluster.
   * 
   * @param request - DescribeHybridProxyPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHybridProxyPolicyResponse
   */
  async describeHybridProxyPolicyWithOptions(request: $_model.DescribeHybridProxyPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHybridProxyPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHybridProxyPolicy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHybridProxyPolicyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHybridProxyPolicyResponse({}));
  }

  /**
   * Queries the data collection configurations of a proxy cluster.
   * 
   * @param request - DescribeHybridProxyPolicyRequest
   * @returns DescribeHybridProxyPolicyResponse
   */
  async describeHybridProxyPolicy(request: $_model.DescribeHybridProxyPolicyRequest): Promise<$_model.DescribeHybridProxyPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHybridProxyPolicyWithOptions(request, runtime);
  }

  /**
   * Queries the search conditions that can be used to query data center assets found after scanning in fuzzy match mode.
   * 
   * @param request - DescribeIdcAssetCriteriaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeIdcAssetCriteriaResponse
   */
  async describeIdcAssetCriteriaWithOptions(request: $_model.DescribeIdcAssetCriteriaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeIdcAssetCriteriaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.value)) {
      query["Value"] = request.value;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeIdcAssetCriteria",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeIdcAssetCriteriaResponse>(await this.callApi(params, req, runtime), new $_model.DescribeIdcAssetCriteriaResponse({}));
  }

  /**
   * Queries the search conditions that can be used to query data center assets found after scanning in fuzzy match mode.
   * 
   * @param request - DescribeIdcAssetCriteriaRequest
   * @returns DescribeIdcAssetCriteriaResponse
   */
  async describeIdcAssetCriteria(request: $_model.DescribeIdcAssetCriteriaRequest): Promise<$_model.DescribeIdcAssetCriteriaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeIdcAssetCriteriaWithOptions(request, runtime);
  }

  /**
   * Query IDC probe list
   * 
   * @param request - DescribeIdcProbeListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeIdcProbeListResponse
   */
  async describeIdcProbeListWithOptions(request: $_model.DescribeIdcProbeListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeIdcProbeListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.idcName)) {
      query["IdcName"] = request.idcName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeIdcProbeList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeIdcProbeListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeIdcProbeListResponse({}));
  }

  /**
   * Query IDC probe list
   * 
   * @param request - DescribeIdcProbeListRequest
   * @returns DescribeIdcProbeListResponse
   */
  async describeIdcProbeList(request: $_model.DescribeIdcProbeListRequest): Promise<$_model.DescribeIdcProbeListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeIdcProbeListWithOptions(request, runtime);
  }

  /**
   * Queries assets that are identified by Internet Data Center (IDC) probes.
   * 
   * @param request - DescribeIdcProbeScanResultListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeIdcProbeScanResultListResponse
   */
  async describeIdcProbeScanResultListWithOptions(request: $_model.DescribeIdcProbeScanResultListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeIdcProbeScanResultListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.foundEndTime)) {
      query["FoundEndTime"] = request.foundEndTime;
    }

    if (!$dara.isNull(request.foundStartTime)) {
      query["FoundStartTime"] = request.foundStartTime;
    }

    if (!$dara.isNull(request.logicalExp)) {
      query["LogicalExp"] = request.logicalExp;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeIdcProbeScanResultList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeIdcProbeScanResultListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeIdcProbeScanResultListResponse({}));
  }

  /**
   * Queries assets that are identified by Internet Data Center (IDC) probes.
   * 
   * @param request - DescribeIdcProbeScanResultListRequest
   * @returns DescribeIdcProbeScanResultListResponse
   */
  async describeIdcProbeScanResultList(request: $_model.DescribeIdcProbeScanResultListRequest): Promise<$_model.DescribeIdcProbeScanResultListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeIdcProbeScanResultListWithOptions(request, runtime);
  }

  /**
   * Queries an image digest.
   * 
   * @param request - DescribeImageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageResponse
   */
  async describeImageWithOptions(request: $_model.DescribeImageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.imageInstanceId)) {
      query["ImageInstanceId"] = request.imageInstanceId;
    }

    if (!$dara.isNull(request.imageRegionId)) {
      query["ImageRegionId"] = request.imageRegionId;
    }

    if (!$dara.isNull(request.imageRepoId)) {
      query["ImageRepoId"] = request.imageRepoId;
    }

    if (!$dara.isNull(request.imageTag)) {
      query["ImageTag"] = request.imageTag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImage",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageResponse({}));
  }

  /**
   * Queries an image digest.
   * 
   * @param request - DescribeImageRequest
   * @returns DescribeImageResponse
   */
  async describeImage(request: $_model.DescribeImageRequest): Promise<$_model.DescribeImageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageWithOptions(request, runtime);
  }

  /**
   * Queries the security scan results of images.
   * 
   * @param request - DescribeImageBaselineCheckResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageBaselineCheckResultResponse
   */
  async describeImageBaselineCheckResultWithOptions(request: $_model.DescribeImageBaselineCheckResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageBaselineCheckResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.criteriaType)) {
      query["CriteriaType"] = request.criteriaType;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.imageUuid)) {
      query["ImageUuid"] = request.imageUuid;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.riskLevel)) {
      query["RiskLevel"] = request.riskLevel;
    }

    if (!$dara.isNull(request.scanRange)) {
      query["ScanRange"] = request.scanRange;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageBaselineCheckResult",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageBaselineCheckResultResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageBaselineCheckResultResponse({}));
  }

  /**
   * Queries the security scan results of images.
   * 
   * @param request - DescribeImageBaselineCheckResultRequest
   * @returns DescribeImageBaselineCheckResultResponse
   */
  async describeImageBaselineCheckResult(request: $_model.DescribeImageBaselineCheckResultRequest): Promise<$_model.DescribeImageBaselineCheckResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageBaselineCheckResultWithOptions(request, runtime);
  }

  /**
   * Queries the check results of image baselines that are included in an image scan task.
   * 
   * @param request - DescribeImageBaselineCheckSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageBaselineCheckSummaryResponse
   */
  async describeImageBaselineCheckSummaryWithOptions(request: $_model.DescribeImageBaselineCheckSummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageBaselineCheckSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.criteriaType)) {
      query["CriteriaType"] = request.criteriaType;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.riskLevel)) {
      query["RiskLevel"] = request.riskLevel;
    }

    if (!$dara.isNull(request.scanRange)) {
      query["ScanRange"] = request.scanRange;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageBaselineCheckSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageBaselineCheckSummaryResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageBaselineCheckSummaryResponse({}));
  }

  /**
   * Queries the check results of image baselines that are included in an image scan task.
   * 
   * @param request - DescribeImageBaselineCheckSummaryRequest
   * @returns DescribeImageBaselineCheckSummaryResponse
   */
  async describeImageBaselineCheckSummary(request: $_model.DescribeImageBaselineCheckSummaryRequest): Promise<$_model.DescribeImageBaselineCheckSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageBaselineCheckSummaryWithOptions(request, runtime);
  }

  /**
   * Queries the details about the baseline check result for an image.
   * 
   * @param request - DescribeImageBaselineDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageBaselineDetailResponse
   */
  async describeImageBaselineDetailWithOptions(request: $_model.DescribeImageBaselineDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageBaselineDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.baselineItemKey)) {
      query["BaselineItemKey"] = request.baselineItemKey;
    }

    if (!$dara.isNull(request.imageUuid)) {
      query["ImageUuid"] = request.imageUuid;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageBaselineDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageBaselineDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageBaselineDetailResponse({}));
  }

  /**
   * Queries the details about the baseline check result for an image.
   * 
   * @param request - DescribeImageBaselineDetailRequest
   * @returns DescribeImageBaselineDetailResponse
   */
  async describeImageBaselineDetail(request: $_model.DescribeImageBaselineDetailRequest): Promise<$_model.DescribeImageBaselineDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageBaselineDetailWithOptions(request, runtime);
  }

  /**
   * Queries baseline check results based on images.
   * 
   * @param request - DescribeImageBaselineItemListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageBaselineItemListResponse
   */
  async describeImageBaselineItemListWithOptions(request: $_model.DescribeImageBaselineItemListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageBaselineItemListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.baselineClassKey)) {
      query["BaselineClassKey"] = request.baselineClassKey;
    }

    if (!$dara.isNull(request.baselineNameKey)) {
      query["BaselineNameKey"] = request.baselineNameKey;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.imageUuid)) {
      query["ImageUuid"] = request.imageUuid;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scanRange)) {
      query["ScanRange"] = request.scanRange;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageBaselineItemList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageBaselineItemListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageBaselineItemListResponse({}));
  }

  /**
   * Queries baseline check results based on images.
   * 
   * @param request - DescribeImageBaselineItemListRequest
   * @returns DescribeImageBaselineItemListResponse
   */
  async describeImageBaselineItemList(request: $_model.DescribeImageBaselineItemListRequest): Promise<$_model.DescribeImageBaselineItemListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageBaselineItemListWithOptions(request, runtime);
  }

  /**
   * Queries the information about a baseline check policy for images.
   * 
   * @param request - DescribeImageBaselineStrategyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageBaselineStrategyResponse
   */
  async describeImageBaselineStrategyWithOptions(request: $_model.DescribeImageBaselineStrategyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageBaselineStrategyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageBaselineStrategy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageBaselineStrategyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageBaselineStrategyResponse({}));
  }

  /**
   * Queries the information about a baseline check policy for images.
   * 
   * @param request - DescribeImageBaselineStrategyRequest
   * @returns DescribeImageBaselineStrategyResponse
   */
  async describeImageBaselineStrategy(request: $_model.DescribeImageBaselineStrategyRequest): Promise<$_model.DescribeImageBaselineStrategyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageBaselineStrategyWithOptions(request, runtime);
  }

  /**
   * Queries image build command risks by page.
   * 
   * @param request - DescribeImageBuildRiskByKeyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageBuildRiskByKeyResponse
   */
  async describeImageBuildRiskByKeyWithOptions(request: $_model.DescribeImageBuildRiskByKeyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageBuildRiskByKeyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.imageUuid)) {
      query["ImageUuid"] = request.imageUuid;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.riskKey)) {
      query["RiskKey"] = request.riskKey;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageBuildRiskByKey",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageBuildRiskByKeyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageBuildRiskByKeyResponse({}));
  }

  /**
   * Queries image build command risks by page.
   * 
   * @param request - DescribeImageBuildRiskByKeyRequest
   * @returns DescribeImageBuildRiskByKeyResponse
   */
  async describeImageBuildRiskByKey(request: $_model.DescribeImageBuildRiskByKeyRequest): Promise<$_model.DescribeImageBuildRiskByKeyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageBuildRiskByKeyWithOptions(request, runtime);
  }

  /**
   * Queries a list of image build command risks by page.
   * 
   * @param request - DescribeImageBuildRiskListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageBuildRiskListResponse
   */
  async describeImageBuildRiskListWithOptions(request: $_model.DescribeImageBuildRiskListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageBuildRiskListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.criteriaType)) {
      query["CriteriaType"] = request.criteriaType;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.riskLevel)) {
      query["RiskLevel"] = request.riskLevel;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageBuildRiskList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageBuildRiskListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageBuildRiskListResponse({}));
  }

  /**
   * Queries a list of image build command risks by page.
   * 
   * @param request - DescribeImageBuildRiskListRequest
   * @returns DescribeImageBuildRiskListResponse
   */
  async describeImageBuildRiskList(request: $_model.DescribeImageBuildRiskListRequest): Promise<$_model.DescribeImageBuildRiskListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageBuildRiskListWithOptions(request, runtime);
  }

  /**
   * Queries the search conditions that are used to query images.
   * 
   * @param request - DescribeImageCriteriaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageCriteriaResponse
   */
  async describeImageCriteriaWithOptions(request: $_model.DescribeImageCriteriaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageCriteriaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.value)) {
      query["Value"] = request.value;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageCriteria",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageCriteriaResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageCriteriaResponse({}));
  }

  /**
   * Queries the search conditions that are used to query images.
   * 
   * @param request - DescribeImageCriteriaRequest
   * @returns DescribeImageCriteriaResponse
   */
  async describeImageCriteria(request: $_model.DescribeImageCriteriaRequest): Promise<$_model.DescribeImageCriteriaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageCriteriaWithOptions(request, runtime);
  }

  /**
   * Queries the conditions for handling alert events in an image.
   * 
   * @param request - DescribeImageEventOperationConditionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageEventOperationConditionResponse
   */
  async describeImageEventOperationConditionWithOptions(request: $_model.DescribeImageEventOperationConditionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageEventOperationConditionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eventType)) {
      query["EventType"] = request.eventType;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageEventOperationCondition",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageEventOperationConditionResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageEventOperationConditionResponse({}));
  }

  /**
   * Queries the conditions for handling alert events in an image.
   * 
   * @param request - DescribeImageEventOperationConditionRequest
   * @returns DescribeImageEventOperationConditionResponse
   */
  async describeImageEventOperationCondition(request: $_model.DescribeImageEventOperationConditionRequest): Promise<$_model.DescribeImageEventOperationConditionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageEventOperationConditionWithOptions(request, runtime);
  }

  /**
   * Queries alert handling rules by page.
   * 
   * @param request - DescribeImageEventOperationPageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageEventOperationPageResponse
   */
  async describeImageEventOperationPageWithOptions(request: $_model.DescribeImageEventOperationPageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageEventOperationPageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.eventKey)) {
      query["EventKey"] = request.eventKey;
    }

    if (!$dara.isNull(request.eventName)) {
      query["EventName"] = request.eventName;
    }

    if (!$dara.isNull(request.eventType)) {
      query["EventType"] = request.eventType;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageEventOperationPage",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageEventOperationPageResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageEventOperationPageResponse({}));
  }

  /**
   * Queries alert handling rules by page.
   * 
   * @param request - DescribeImageEventOperationPageRequest
   * @returns DescribeImageEventOperationPageResponse
   */
  async describeImageEventOperationPage(request: $_model.DescribeImageEventOperationPageRequest): Promise<$_model.DescribeImageEventOperationPageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageEventOperationPageWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of the scheduled fix of image risks.
   * 
   * @param request - DescribeImageFixCycleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageFixCycleConfigResponse
   */
  async describeImageFixCycleConfigWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageFixCycleConfigResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageFixCycleConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageFixCycleConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageFixCycleConfigResponse({}));
  }

  /**
   * Queries the configurations of the scheduled fix of image risks.
   * @returns DescribeImageFixCycleConfigResponse
   */
  async describeImageFixCycleConfig(): Promise<$_model.DescribeImageFixCycleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageFixCycleConfigWithOptions(runtime);
  }

  /**
   * Queries the tasks that you create to fix image risks.
   * 
   * @param request - DescribeImageFixTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageFixTaskResponse
   */
  async describeImageFixTaskWithOptions(request: $_model.DescribeImageFixTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageFixTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageFixTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageFixTaskResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageFixTaskResponse({}));
  }

  /**
   * Queries the tasks that you create to fix image risks.
   * 
   * @param request - DescribeImageFixTaskRequest
   * @returns DescribeImageFixTaskResponse
   */
  async describeImageFixTask(request: $_model.DescribeImageFixTaskRequest): Promise<$_model.DescribeImageFixTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageFixTaskWithOptions(request, runtime);
  }

  /**
   * Queries image vulnerabilities.
   * 
   * @param request - DescribeImageGroupedVulListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageGroupedVulListResponse
   */
  async describeImageGroupedVulListWithOptions(request: $_model.DescribeImageGroupedVulListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageGroupedVulListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliasName)) {
      query["AliasName"] = request.aliasName;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.cveId)) {
      query["CveId"] = request.cveId;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.imageDigest)) {
      query["ImageDigest"] = request.imageDigest;
    }

    if (!$dara.isNull(request.imageLayer)) {
      query["ImageLayer"] = request.imageLayer;
    }

    if (!$dara.isNull(request.imageTag)) {
      query["ImageTag"] = request.imageTag;
    }

    if (!$dara.isNull(request.isLatest)) {
      query["IsLatest"] = request.isLatest;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.necessity)) {
      query["Necessity"] = request.necessity;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.patchId)) {
      query["PatchId"] = request.patchId;
    }

    if (!$dara.isNull(request.repoId)) {
      query["RepoId"] = request.repoId;
    }

    if (!$dara.isNull(request.repoInstanceId)) {
      query["RepoInstanceId"] = request.repoInstanceId;
    }

    if (!$dara.isNull(request.repoName)) {
      query["RepoName"] = request.repoName;
    }

    if (!$dara.isNull(request.repoNamespace)) {
      query["RepoNamespace"] = request.repoNamespace;
    }

    if (!$dara.isNull(request.repoRegionId)) {
      query["RepoRegionId"] = request.repoRegionId;
    }

    if (!$dara.isNull(request.ruleTag)) {
      query["RuleTag"] = request.ruleTag;
    }

    if (!$dara.isNull(request.scanRange)) {
      query["ScanRange"] = request.scanRange;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageGroupedVulList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageGroupedVulListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageGroupedVulListResponse({}));
  }

  /**
   * Queries image vulnerabilities.
   * 
   * @param request - DescribeImageGroupedVulListRequest
   * @returns DescribeImageGroupedVulListResponse
   */
  async describeImageGroupedVulList(request: $_model.DescribeImageGroupedVulListRequest): Promise<$_model.DescribeImageGroupedVulListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageGroupedVulListWithOptions(request, runtime);
  }

  /**
   * Queries images.
   * 
   * @param request - DescribeImageInfoListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageInfoListResponse
   */
  async describeImageInfoListWithOptions(request: $_model.DescribeImageInfoListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageInfoListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageInfoList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageInfoListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageInfoListResponse({}));
  }

  /**
   * Queries images.
   * 
   * @param request - DescribeImageInfoListRequest
   * @returns DescribeImageInfoListResponse
   */
  async describeImageInfoList(request: $_model.DescribeImageInfoListRequest): Promise<$_model.DescribeImageInfoListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageInfoListWithOptions(request, runtime);
  }

  /**
   * Queries information about images.
   * 
   * @param request - DescribeImageInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageInstancesResponse
   */
  async describeImageInstancesWithOptions(request: $_model.DescribeImageInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.logicalExp)) {
      query["LogicalExp"] = request.logicalExp;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scanned)) {
      query["Scanned"] = request.scanned;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageInstances",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageInstancesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageInstancesResponse({}));
  }

  /**
   * Queries information about images.
   * 
   * @param request - DescribeImageInstancesRequest
   * @returns DescribeImageInstancesResponse
   */
  async describeImageInstances(request: $_model.DescribeImageInstancesRequest): Promise<$_model.DescribeImageInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageInstancesWithOptions(request, runtime);
  }

  /**
   * Queries the most recent scan task that is created for an image.
   * 
   * @param request - DescribeImageLatestScanTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageLatestScanTaskResponse
   */
  async describeImageLatestScanTaskWithOptions(request: $_model.DescribeImageLatestScanTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageLatestScanTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.digest)) {
      query["Digest"] = request.digest;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageLatestScanTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageLatestScanTaskResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageLatestScanTaskResponse({}));
  }

  /**
   * Queries the most recent scan task that is created for an image.
   * 
   * @param request - DescribeImageLatestScanTaskRequest
   * @returns DescribeImageLatestScanTaskResponse
   */
  async describeImageLatestScanTask(request: $_model.DescribeImageLatestScanTaskRequest): Promise<$_model.DescribeImageLatestScanTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageLatestScanTaskWithOptions(request, runtime);
  }

  /**
   * Queries a list of images that are affected by image build command risks by page.
   * 
   * @param request - DescribeImageListByBuildRiskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageListByBuildRiskResponse
   */
  async describeImageListByBuildRiskWithOptions(request: $_model.DescribeImageListByBuildRiskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageListByBuildRiskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.riskKey)) {
      query["RiskKey"] = request.riskKey;
    }

    if (!$dara.isNull(request.riskLevel)) {
      query["RiskLevel"] = request.riskLevel;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageListByBuildRisk",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageListByBuildRiskResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageListByBuildRiskResponse({}));
  }

  /**
   * Queries a list of images that are affected by image build command risks by page.
   * 
   * @param request - DescribeImageListByBuildRiskRequest
   * @returns DescribeImageListByBuildRiskResponse
   */
  async describeImageListByBuildRisk(request: $_model.DescribeImageListByBuildRiskRequest): Promise<$_model.DescribeImageListByBuildRiskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageListByBuildRiskWithOptions(request, runtime);
  }

  /**
   * Queries information about images that are affected by sensitive files.
   * 
   * @param tmpReq - DescribeImageListBySensitiveFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageListBySensitiveFileResponse
   */
  async describeImageListBySensitiveFileWithOptions(tmpReq: $_model.DescribeImageListBySensitiveFileRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageListBySensitiveFileResponse> {
    tmpReq.validate();
    let request = new $_model.DescribeImageListBySensitiveFileShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.scanRange)) {
      request.scanRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, "ScanRange", "json");
    }

    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.imageDigest)) {
      query["ImageDigest"] = request.imageDigest;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.repoInstanceId)) {
      query["RepoInstanceId"] = request.repoInstanceId;
    }

    if (!$dara.isNull(request.repoName)) {
      query["RepoName"] = request.repoName;
    }

    if (!$dara.isNull(request.repoNamespace)) {
      query["RepoNamespace"] = request.repoNamespace;
    }

    if (!$dara.isNull(request.riskLevel)) {
      query["RiskLevel"] = request.riskLevel;
    }

    if (!$dara.isNull(request.scanRangeShrink)) {
      query["ScanRange"] = request.scanRangeShrink;
    }

    if (!$dara.isNull(request.sensitiveFileKey)) {
      query["SensitiveFileKey"] = request.sensitiveFileKey;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageListBySensitiveFile",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageListBySensitiveFileResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageListBySensitiveFileResponse({}));
  }

  /**
   * Queries information about images that are affected by sensitive files.
   * 
   * @param request - DescribeImageListBySensitiveFileRequest
   * @returns DescribeImageListBySensitiveFileResponse
   */
  async describeImageListBySensitiveFile(request: $_model.DescribeImageListBySensitiveFileRequest): Promise<$_model.DescribeImageListBySensitiveFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageListBySensitiveFileWithOptions(request, runtime);
  }

  /**
   * Queries the details about images in the results of image baseline checks.
   * 
   * @param request - DescribeImageListWithBaselineNameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageListWithBaselineNameResponse
   */
  async describeImageListWithBaselineNameWithOptions(request: $_model.DescribeImageListWithBaselineNameRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageListWithBaselineNameResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.baselineNameKey)) {
      query["BaselineNameKey"] = request.baselineNameKey;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.containerId)) {
      query["ContainerId"] = request.containerId;
    }

    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.criteriaType)) {
      query["CriteriaType"] = request.criteriaType;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.image)) {
      query["Image"] = request.image;
    }

    if (!$dara.isNull(request.imageDigest)) {
      query["ImageDigest"] = request.imageDigest;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.namespace)) {
      query["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.pod)) {
      query["Pod"] = request.pod;
    }

    if (!$dara.isNull(request.repoInstanceId)) {
      query["RepoInstanceId"] = request.repoInstanceId;
    }

    if (!$dara.isNull(request.repoName)) {
      query["RepoName"] = request.repoName;
    }

    if (!$dara.isNull(request.repoNamespace)) {
      query["RepoNamespace"] = request.repoNamespace;
    }

    if (!$dara.isNull(request.scanRange)) {
      query["ScanRange"] = request.scanRange;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageListWithBaselineName",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageListWithBaselineNameResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageListWithBaselineNameResponse({}));
  }

  /**
   * Queries the details about images in the results of image baseline checks.
   * 
   * @param request - DescribeImageListWithBaselineNameRequest
   * @returns DescribeImageListWithBaselineNameResponse
   */
  async describeImageListWithBaselineName(request: $_model.DescribeImageListWithBaselineNameRequest): Promise<$_model.DescribeImageListWithBaselineNameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageListWithBaselineNameWithOptions(request, runtime);
  }

  /**
   * Obtains the filter conditions that are supported by the image repository.
   * 
   * @param request - DescribeImageRepoCriteriaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageRepoCriteriaResponse
   */
  async describeImageRepoCriteriaWithOptions(request: $_model.DescribeImageRepoCriteriaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageRepoCriteriaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.value)) {
      query["Value"] = request.value;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageRepoCriteria",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageRepoCriteriaResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageRepoCriteriaResponse({}));
  }

  /**
   * Obtains the filter conditions that are supported by the image repository.
   * 
   * @param request - DescribeImageRepoCriteriaRequest
   * @returns DescribeImageRepoCriteriaResponse
   */
  async describeImageRepoCriteria(request: $_model.DescribeImageRepoCriteriaRequest): Promise<$_model.DescribeImageRepoCriteriaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageRepoCriteriaWithOptions(request, runtime);
  }

  /**
   * Queries the information about image repositories.
   * 
   * @param request - DescribeImageRepoDetailListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageRepoDetailListResponse
   */
  async describeImageRepoDetailListWithOptions(request: $_model.DescribeImageRepoDetailListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageRepoDetailListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.logicalExp)) {
      query["LogicalExp"] = request.logicalExp;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageRepoDetailList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageRepoDetailListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageRepoDetailListResponse({}));
  }

  /**
   * Queries the information about image repositories.
   * 
   * @param request - DescribeImageRepoDetailListRequest
   * @returns DescribeImageRepoDetailListResponse
   */
  async describeImageRepoDetailList(request: $_model.DescribeImageRepoDetailListRequest): Promise<$_model.DescribeImageRepoDetailListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageRepoDetailListWithOptions(request, runtime);
  }

  /**
   * Queries the statistics and configurations of the feature that protects images.
   * 
   * @param request - DescribeImageRepoListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageRepoListResponse
   */
  async describeImageRepoListWithOptions(request: $_model.DescribeImageRepoListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageRepoListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.fieldName)) {
      query["FieldName"] = request.fieldName;
    }

    if (!$dara.isNull(request.fieldValue)) {
      query["FieldValue"] = request.fieldValue;
    }

    if (!$dara.isNull(request.operateType)) {
      query["OperateType"] = request.operateType;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.repoName)) {
      query["RepoName"] = request.repoName;
    }

    if (!$dara.isNull(request.repoNamespace)) {
      query["RepoNamespace"] = request.repoNamespace;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageRepoList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageRepoListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageRepoListResponse({}));
  }

  /**
   * Queries the statistics and configurations of the feature that protects images.
   * 
   * @param request - DescribeImageRepoListRequest
   * @returns DescribeImageRepoListResponse
   */
  async describeImageRepoList(request: $_model.DescribeImageRepoListRequest): Promise<$_model.DescribeImageRepoListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageRepoListWithOptions(request, runtime);
  }

  /**
   * Queries the number of images on which security alerts are generated. Security alerts are generated for risks such as vulnerabilities, baselines risks, and malicious samples.
   * 
   * @param request - DescribeImageRiskLevelStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageRiskLevelStatisticResponse
   */
  async describeImageRiskLevelStatisticWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageRiskLevelStatisticResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageRiskLevelStatistic",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageRiskLevelStatisticResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageRiskLevelStatisticResponse({}));
  }

  /**
   * Queries the number of images on which security alerts are generated. Security alerts are generated for risks such as vulnerabilities, baselines risks, and malicious samples.
   * @returns DescribeImageRiskLevelStatisticResponse
   */
  async describeImageRiskLevelStatistic(): Promise<$_model.DescribeImageRiskLevelStatisticResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageRiskLevelStatisticWithOptions(runtime);
  }

  /**
   * Queries the details of the quota for container image scan.
   * 
   * @param request - DescribeImageScanAuthCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageScanAuthCountResponse
   */
  async describeImageScanAuthCountWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageScanAuthCountResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageScanAuthCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageScanAuthCountResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageScanAuthCountResponse({}));
  }

  /**
   * Queries the details of the quota for container image scan.
   * @returns DescribeImageScanAuthCountResponse
   */
  async describeImageScanAuthCount(): Promise<$_model.DescribeImageScanAuthCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageScanAuthCountWithOptions(runtime);
  }

  /**
   * Queries the number of security events detected on an image.
   * 
   * @param request - DescribeImageSecurityScanCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageSecurityScanCountResponse
   */
  async describeImageSecurityScanCountWithOptions(request: $_model.DescribeImageSecurityScanCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageSecurityScanCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.dealed)) {
      query["Dealed"] = request.dealed;
    }

    if (!$dara.isNull(request.imageDigest)) {
      query["ImageDigest"] = request.imageDigest;
    }

    if (!$dara.isNull(request.imageTag)) {
      query["ImageTag"] = request.imageTag;
    }

    if (!$dara.isNull(request.imageUuid)) {
      query["ImageUuid"] = request.imageUuid;
    }

    if (!$dara.isNull(request.repoId)) {
      query["RepoId"] = request.repoId;
    }

    if (!$dara.isNull(request.repoInstanceId)) {
      query["RepoInstanceId"] = request.repoInstanceId;
    }

    if (!$dara.isNull(request.repoRegionId)) {
      query["RepoRegionId"] = request.repoRegionId;
    }

    if (!$dara.isNull(request.scanRange)) {
      query["ScanRange"] = request.scanRange;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageSecurityScanCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageSecurityScanCountResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageSecurityScanCountResponse({}));
  }

  /**
   * Queries the number of security events detected on an image.
   * 
   * @param request - DescribeImageSecurityScanCountRequest
   * @returns DescribeImageSecurityScanCountResponse
   */
  async describeImageSecurityScanCount(request: $_model.DescribeImageSecurityScanCountRequest): Promise<$_model.DescribeImageSecurityScanCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageSecurityScanCountWithOptions(request, runtime);
  }

  /**
   * Queries the sensitive files in an image.
   * 
   * @param tmpReq - DescribeImageSensitiveFileByKeyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageSensitiveFileByKeyResponse
   */
  async describeImageSensitiveFileByKeyWithOptions(tmpReq: $_model.DescribeImageSensitiveFileByKeyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageSensitiveFileByKeyResponse> {
    tmpReq.validate();
    let request = new $_model.DescribeImageSensitiveFileByKeyShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.scanRange)) {
      request.scanRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, "ScanRange", "json");
    }

    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.imageUuid)) {
      query["ImageUuid"] = request.imageUuid;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scanRangeShrink)) {
      query["ScanRange"] = request.scanRangeShrink;
    }

    if (!$dara.isNull(request.sensitiveFileKey)) {
      query["SensitiveFileKey"] = request.sensitiveFileKey;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageSensitiveFileByKey",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageSensitiveFileByKeyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageSensitiveFileByKeyResponse({}));
  }

  /**
   * Queries the sensitive files in an image.
   * 
   * @param request - DescribeImageSensitiveFileByKeyRequest
   * @returns DescribeImageSensitiveFileByKeyResponse
   */
  async describeImageSensitiveFileByKey(request: $_model.DescribeImageSensitiveFileByKeyRequest): Promise<$_model.DescribeImageSensitiveFileByKeyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageSensitiveFileByKeyWithOptions(request, runtime);
  }

  /**
   * Queries information about sensitive files.
   * 
   * @param tmpReq - DescribeImageSensitiveFileListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageSensitiveFileListResponse
   */
  async describeImageSensitiveFileListWithOptions(tmpReq: $_model.DescribeImageSensitiveFileListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageSensitiveFileListResponse> {
    tmpReq.validate();
    let request = new $_model.DescribeImageSensitiveFileListShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.scanRange)) {
      request.scanRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, "ScanRange", "json");
    }

    let query = { };
    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.criteriaType)) {
      query["CriteriaType"] = request.criteriaType;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.imageUuid)) {
      query["ImageUuid"] = request.imageUuid;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.riskLevel)) {
      query["RiskLevel"] = request.riskLevel;
    }

    if (!$dara.isNull(request.scanRangeShrink)) {
      query["ScanRange"] = request.scanRangeShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageSensitiveFileList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageSensitiveFileListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageSensitiveFileListResponse({}));
  }

  /**
   * Queries information about sensitive files.
   * 
   * @param request - DescribeImageSensitiveFileListRequest
   * @returns DescribeImageSensitiveFileListResponse
   */
  async describeImageSensitiveFileList(request: $_model.DescribeImageSensitiveFileListRequest): Promise<$_model.DescribeImageSensitiveFileListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageSensitiveFileListWithOptions(request, runtime);
  }

  /**
   * Queries the risk statistics on container images.
   * 
   * @remarks
   * Security Center can scan for security risks and collect statistics only for **Container Registry Enterprise Edition instances**.
   * >  Security Center cannot scan for security risks or collect statistics for **default** Container Registry instances.
   * 
   * @param request - DescribeImageStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageStatisticsResponse
   */
  async describeImageStatisticsWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageStatisticsResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageStatisticsResponse({}));
  }

  /**
   * Queries the risk statistics on container images.
   * 
   * @remarks
   * Security Center can scan for security risks and collect statistics only for **Container Registry Enterprise Edition instances**.
   * >  Security Center cannot scan for security risks or collect statistics for **default** Container Registry instances.
   * @returns DescribeImageStatisticsResponse
   */
  async describeImageStatistics(): Promise<$_model.DescribeImageStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageStatisticsWithOptions(runtime);
  }

  /**
   * Queries the details of vulnerabilities that are detected by using container image scan and the affected images.
   * 
   * @remarks
   * To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](https://help.aliyun.com/document_detail/411723.html) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
   * 
   * @param request - DescribeImageVulListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageVulListResponse
   */
  async describeImageVulListWithOptions(request: $_model.DescribeImageVulListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageVulListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliasName)) {
      query["AliasName"] = request.aliasName;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.containerId)) {
      query["ContainerId"] = request.containerId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.dealed)) {
      query["Dealed"] = request.dealed;
    }

    if (!$dara.isNull(request.digest)) {
      query["Digest"] = request.digest;
    }

    if (!$dara.isNull(request.image)) {
      query["Image"] = request.image;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.namespace)) {
      query["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.necessity)) {
      query["Necessity"] = request.necessity;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.pod)) {
      query["Pod"] = request.pod;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.repoId)) {
      query["RepoId"] = request.repoId;
    }

    if (!$dara.isNull(request.repoId)) {
      query["RepoId"] = request.repoId;
    }

    if (!$dara.isNull(request.repoInstanceId)) {
      query["RepoInstanceId"] = request.repoInstanceId;
    }

    if (!$dara.isNull(request.repoName)) {
      query["RepoName"] = request.repoName;
    }

    if (!$dara.isNull(request.repoName)) {
      query["RepoName"] = request.repoName;
    }

    if (!$dara.isNull(request.repoNamespace)) {
      query["RepoNamespace"] = request.repoNamespace;
    }

    if (!$dara.isNull(request.repoRegionId)) {
      query["RepoRegionId"] = request.repoRegionId;
    }

    if (!$dara.isNull(request.ruleTag)) {
      query["RuleTag"] = request.ruleTag;
    }

    if (!$dara.isNull(request.scanRange)) {
      query["ScanRange"] = request.scanRange;
    }

    if (!$dara.isNull(request.statusList)) {
      query["StatusList"] = request.statusList;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageVulList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageVulListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageVulListResponse({}));
  }

  /**
   * Queries the details of vulnerabilities that are detected by using container image scan and the affected images.
   * 
   * @remarks
   * To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](https://help.aliyun.com/document_detail/411723.html) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
   * 
   * @param request - DescribeImageVulListRequest
   * @returns DescribeImageVulListResponse
   */
  async describeImageVulList(request: $_model.DescribeImageVulListRequest): Promise<$_model.DescribeImageVulListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageVulListWithOptions(request, runtime);
  }

  /**
   * Queries the whitelist of image vulnerabilities.
   * 
   * @param request - DescribeImageVulWhiteListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeImageVulWhiteListResponse
   */
  async describeImageVulWhiteListWithOptions(request: $_model.DescribeImageVulWhiteListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeImageVulWhiteListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliasName)) {
      query["AliasName"] = request.aliasName;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeImageVulWhiteList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeImageVulWhiteListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeImageVulWhiteListResponse({}));
  }

  /**
   * Queries the whitelist of image vulnerabilities.
   * 
   * @param request - DescribeImageVulWhiteListRequest
   * @returns DescribeImageVulWhiteListResponse
   */
  async describeImageVulWhiteList(request: $_model.DescribeImageVulWhiteListRequest): Promise<$_model.DescribeImageVulWhiteListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeImageVulWhiteListWithOptions(request, runtime);
  }

  /**
   * Queries the verification codes that are used to manually install the Security Center agent.
   * 
   * @param request - DescribeInstallCaptchaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInstallCaptchaResponse
   */
  async describeInstallCaptchaWithOptions(request: $_model.DescribeInstallCaptchaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeInstallCaptchaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.deadline)) {
      query["Deadline"] = request.deadline;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeInstallCaptcha",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeInstallCaptchaResponse>(await this.callApi(params, req, runtime), new $_model.DescribeInstallCaptchaResponse({}));
  }

  /**
   * Queries the verification codes that are used to manually install the Security Center agent.
   * 
   * @param request - DescribeInstallCaptchaRequest
   * @returns DescribeInstallCaptchaResponse
   */
  async describeInstallCaptcha(request: $_model.DescribeInstallCaptchaRequest): Promise<$_model.DescribeInstallCaptchaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeInstallCaptchaWithOptions(request, runtime);
  }

  /**
   * Queries the installation verification code that is used to run the installation command of the Security Center agent.
   * 
   * @param request - DescribeInstallCodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInstallCodeResponse
   */
  async describeInstallCodeWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeInstallCodeResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeInstallCode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeInstallCodeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeInstallCodeResponse({}));
  }

  /**
   * Queries the installation verification code that is used to run the installation command of the Security Center agent.
   * @returns DescribeInstallCodeResponse
   */
  async describeInstallCode(): Promise<$_model.DescribeInstallCodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeInstallCodeWithOptions(runtime);
  }

  /**
   * Queries the commands that are used to manually install the Security Center Agent.
   * 
   * @remarks
   * You can call this operation to query the commands that are used to manually install the Security Center agent on the server. The return result contains the installation verification code and the server information. If you want to manually install the Security Center agent on your server, you can call this operation to query installation commands.
   * ### QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * 
   * @param request - DescribeInstallCodesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInstallCodesResponse
   */
  async describeInstallCodesWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeInstallCodesResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeInstallCodes",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeInstallCodesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeInstallCodesResponse({}));
  }

  /**
   * Queries the commands that are used to manually install the Security Center Agent.
   * 
   * @remarks
   * You can call this operation to query the commands that are used to manually install the Security Center agent on the server. The return result contains the installation verification code and the server information. If you want to manually install the Security Center agent on your server, you can call this operation to query installation commands.
   * ### QPS limit
   * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
   * @returns DescribeInstallCodesResponse
   */
  async describeInstallCodes(): Promise<$_model.DescribeInstallCodesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeInstallCodesWithOptions(runtime);
  }

  /**
   * Queries the information about servers to which a defense rule against brute-force attacks is applied.
   * 
   * @param request - DescribeInstanceAntiBruteForceRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInstanceAntiBruteForceRulesResponse
   */
  async describeInstanceAntiBruteForceRulesWithOptions(request: $_model.DescribeInstanceAntiBruteForceRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeInstanceAntiBruteForceRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeInstanceAntiBruteForceRules",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeInstanceAntiBruteForceRulesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeInstanceAntiBruteForceRulesResponse({}));
  }

  /**
   * Queries the information about servers to which a defense rule against brute-force attacks is applied.
   * 
   * @param request - DescribeInstanceAntiBruteForceRulesRequest
   * @returns DescribeInstanceAntiBruteForceRulesResponse
   */
  async describeInstanceAntiBruteForceRules(request: $_model.DescribeInstanceAntiBruteForceRulesRequest): Promise<$_model.DescribeInstanceAntiBruteForceRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeInstanceAntiBruteForceRulesWithOptions(request, runtime);
  }

  /**
   * Queries the status of the instance that you restart.
   * 
   * @param request - DescribeInstanceRebootStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInstanceRebootStatusResponse
   */
  async describeInstanceRebootStatusWithOptions(request: $_model.DescribeInstanceRebootStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeInstanceRebootStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeInstanceRebootStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeInstanceRebootStatusResponse>(await this.callApi(params, req, runtime), new $_model.DescribeInstanceRebootStatusResponse({}));
  }

  /**
   * Queries the status of the instance that you restart.
   * 
   * @param request - DescribeInstanceRebootStatusRequest
   * @returns DescribeInstanceRebootStatusResponse
   */
  async describeInstanceRebootStatus(request: $_model.DescribeInstanceRebootStatusRequest): Promise<$_model.DescribeInstanceRebootStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeInstanceRebootStatusWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of assets that are protected by Security Center.
   * 
   * @param request - DescribeInstanceStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInstanceStatisticsResponse
   */
  async describeInstanceStatisticsWithOptions(request: $_model.DescribeInstanceStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeInstanceStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeInstanceStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeInstanceStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeInstanceStatisticsResponse({}));
  }

  /**
   * Queries the statistics of assets that are protected by Security Center.
   * 
   * @param request - DescribeInstanceStatisticsRequest
   * @returns DescribeInstanceStatisticsResponse
   */
  async describeInstanceStatistics(request: $_model.DescribeInstanceStatisticsRequest): Promise<$_model.DescribeInstanceStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeInstanceStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of vulnerabilities that are detected on a cluster.
   * 
   * @param request - DescribeInstanceVulStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInstanceVulStatisticsResponse
   */
  async describeInstanceVulStatisticsWithOptions(request: $_model.DescribeInstanceVulStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeInstanceVulStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.types)) {
      query["Types"] = request.types;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeInstanceVulStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeInstanceVulStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeInstanceVulStatisticsResponse({}));
  }

  /**
   * Queries the statistics of vulnerabilities that are detected on a cluster.
   * 
   * @param request - DescribeInstanceVulStatisticsRequest
   * @returns DescribeInstanceVulStatisticsResponse
   */
  async describeInstanceVulStatistics(request: $_model.DescribeInstanceVulStatisticsRequest): Promise<$_model.DescribeInstanceVulStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeInstanceVulStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the progress of the last virus scan task.
   * 
   * @param request - DescribeLatestScanTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLatestScanTaskResponse
   */
  async describeLatestScanTaskWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLatestScanTaskResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLatestScanTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLatestScanTaskResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLatestScanTaskResponse({}));
  }

  /**
   * Queries the progress of the last virus scan task.
   * @returns DescribeLatestScanTaskResponse
   */
  async describeLatestScanTask(): Promise<$_model.DescribeLatestScanTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLatestScanTaskWithOptions(runtime);
  }

  /**
   * Queries the configurations of the log analysis feature provided by Security Center.
   * 
   * @param request - DescribeLogMetaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLogMetaResponse
   */
  async describeLogMetaWithOptions(request: $_model.DescribeLogMetaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLogMetaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLogMeta",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLogMetaResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLogMetaResponse({}));
  }

  /**
   * Queries the configurations of the log analysis feature provided by Security Center.
   * 
   * @param request - DescribeLogMetaRequest
   * @returns DescribeLogMetaResponse
   */
  async describeLogMeta(request: $_model.DescribeLogMetaRequest): Promise<$_model.DescribeLogMetaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLogMetaWithOptions(request, runtime);
  }

  /**
   * Queries the status information about the log analysis feature.
   * 
   * @param request - DescribeLogShipperStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLogShipperStatusResponse
   */
  async describeLogShipperStatusWithOptions(request: $_model.DescribeLogShipperStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLogShipperStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLogShipperStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLogShipperStatusResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLogShipperStatusResponse({}));
  }

  /**
   * Queries the status information about the log analysis feature.
   * 
   * @param request - DescribeLogShipperStatusRequest
   * @returns DescribeLogShipperStatusResponse
   */
  async describeLogShipperStatus(request: $_model.DescribeLogShipperStatusRequest): Promise<$_model.DescribeLogShipperStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLogShipperStatusWithOptions(request, runtime);
  }

  /**
   * Queries the information about the configurations that are used to detect unusual logons to your servers.
   * 
   * @param request - DescribeLoginBaseConfigsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLoginBaseConfigsResponse
   */
  async describeLoginBaseConfigsWithOptions(request: $_model.DescribeLoginBaseConfigsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLoginBaseConfigsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.target)) {
      query["Target"] = request.target;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLoginBaseConfigs",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLoginBaseConfigsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLoginBaseConfigsResponse({}));
  }

  /**
   * Queries the information about the configurations that are used to detect unusual logons to your servers.
   * 
   * @param request - DescribeLoginBaseConfigsRequest
   * @returns DescribeLoginBaseConfigsResponse
   */
  async describeLoginBaseConfigs(request: $_model.DescribeLoginBaseConfigsRequest): Promise<$_model.DescribeLoginBaseConfigsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLoginBaseConfigsWithOptions(request, runtime);
  }

  /**
   * Queries the alerting status for unapproved logon IP addresses, unapproved logon time ranges, or unapproved logon accounts.
   * 
   * @param request - DescribeLoginSwitchConfigsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLoginSwitchConfigsResponse
   */
  async describeLoginSwitchConfigsWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLoginSwitchConfigsResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLoginSwitchConfigs",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLoginSwitchConfigsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLoginSwitchConfigsResponse({}));
  }

  /**
   * Queries the alerting status for unapproved logon IP addresses, unapproved logon time ranges, or unapproved logon accounts.
   * @returns DescribeLoginSwitchConfigsResponse
   */
  async describeLoginSwitchConfigs(): Promise<$_model.DescribeLoginSwitchConfigsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLoginSwitchConfigsWithOptions(runtime);
  }

  /**
   * Queries the purchased log storage capacity.
   * 
   * @param request - DescribeLogstoreStorageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLogstoreStorageResponse
   */
  async describeLogstoreStorageWithOptions(request: $_model.DescribeLogstoreStorageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLogstoreStorageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLogstoreStorage",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLogstoreStorageResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLogstoreStorageResponse({}));
  }

  /**
   * Queries the purchased log storage capacity.
   * 
   * @param request - DescribeLogstoreStorageRequest
   * @returns DescribeLogstoreStorageResponse
   */
  async describeLogstoreStorage(request: $_model.DescribeLogstoreStorageRequest): Promise<$_model.DescribeLogstoreStorageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLogstoreStorageWithOptions(request, runtime);
  }

  /**
   * Queries whether a server can be restarted after the vulnerabilities on the server are fixed. The fixes take effect only after the server is restarted.
   * 
   * @param request - DescribeMachineCanRebootRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeMachineCanRebootResponse
   */
  async describeMachineCanRebootWithOptions(request: $_model.DescribeMachineCanRebootRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeMachineCanRebootResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeMachineCanReboot",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeMachineCanRebootResponse>(await this.callApi(params, req, runtime), new $_model.DescribeMachineCanRebootResponse({}));
  }

  /**
   * Queries whether a server can be restarted after the vulnerabilities on the server are fixed. The fixes take effect only after the server is restarted.
   * 
   * @param request - DescribeMachineCanRebootRequest
   * @returns DescribeMachineCanRebootResponse
   */
  async describeMachineCanReboot(request: $_model.DescribeMachineCanRebootRequest): Promise<$_model.DescribeMachineCanRebootResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeMachineCanRebootWithOptions(request, runtime);
  }

  /**
   * Queries a list of malicious image sample types.
   * 
   * @param request - DescribeMatchedMaliciousNamesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeMatchedMaliciousNamesResponse
   */
  async describeMatchedMaliciousNamesWithOptions(request: $_model.DescribeMatchedMaliciousNamesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeMatchedMaliciousNamesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.levels)) {
      query["Levels"] = request.levels;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeMatchedMaliciousNames",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeMatchedMaliciousNamesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeMatchedMaliciousNamesResponse({}));
  }

  /**
   * Queries a list of malicious image sample types.
   * 
   * @param request - DescribeMatchedMaliciousNamesRequest
   * @returns DescribeMatchedMaliciousNamesResponse
   */
  async describeMatchedMaliciousNames(request: $_model.DescribeMatchedMaliciousNamesRequest): Promise<$_model.DescribeMatchedMaliciousNamesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeMatchedMaliciousNamesWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of the asset fingerprint module.
   * 
   * @param request - DescribeModuleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeModuleConfigResponse
   */
  async describeModuleConfigWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeModuleConfigResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeModuleConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeModuleConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeModuleConfigResponse({}));
  }

  /**
   * Queries the configurations of the asset fingerprint module.
   * @returns DescribeModuleConfigResponse
   */
  async describeModuleConfig(): Promise<$_model.DescribeModuleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeModuleConfigWithOptions(runtime);
  }

  /**
   * Queries the list of accounts that are added to the multi-account management feature as members.
   * 
   * @param request - DescribeMonitorAccountsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeMonitorAccountsResponse
   */
  async describeMonitorAccountsWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeMonitorAccountsResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeMonitorAccounts",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeMonitorAccountsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeMonitorAccountsResponse({}));
  }

  /**
   * Queries the list of accounts that are added to the multi-account management feature as members.
   * @returns DescribeMonitorAccountsResponse
   */
  async describeMonitorAccounts(): Promise<$_model.DescribeMonitorAccountsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeMonitorAccountsWithOptions(runtime);
  }

  /**
   * Queries whether slow queries need to be optimized.
   * 
   * @param request - DescribeNeedAsyncQueryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeNeedAsyncQueryResponse
   */
  async describeNeedAsyncQueryWithOptions(request: $_model.DescribeNeedAsyncQueryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeNeedAsyncQueryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeNeedAsyncQuery",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeNeedAsyncQueryResponse>(await this.callApi(params, req, runtime), new $_model.DescribeNeedAsyncQueryResponse({}));
  }

  /**
   * Queries whether slow queries need to be optimized.
   * 
   * @param request - DescribeNeedAsyncQueryRequest
   * @returns DescribeNeedAsyncQueryResponse
   */
  async describeNeedAsyncQuery(request: $_model.DescribeNeedAsyncQueryRequest): Promise<$_model.DescribeNeedAsyncQueryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeNeedAsyncQueryWithOptions(request, runtime);
  }

  /**
   * Queries notification settings.
   * 
   * @param request - DescribeNoticeConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeNoticeConfigResponse
   */
  async describeNoticeConfigWithOptions(request: $_model.DescribeNoticeConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeNoticeConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeNoticeConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeNoticeConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeNoticeConfigResponse({}));
  }

  /**
   * Queries notification settings.
   * 
   * @param request - DescribeNoticeConfigRequest
   * @returns DescribeNoticeConfigResponse
   */
  async describeNoticeConfig(request: $_model.DescribeNoticeConfigRequest): Promise<$_model.DescribeNoticeConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeNoticeConfigWithOptions(request, runtime);
  }

  /**
   * Queries the information about an alert type.
   * 
   * @param request - DescribeNsasSuspEventTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeNsasSuspEventTypeResponse
   */
  async describeNsasSuspEventTypeWithOptions(request: $_model.DescribeNsasSuspEventTypeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeNsasSuspEventTypeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.containerFieldName)) {
      query["ContainerFieldName"] = request.containerFieldName;
    }

    if (!$dara.isNull(request.containerFieldValue)) {
      query["ContainerFieldValue"] = request.containerFieldValue;
    }

    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.multiAccountActionType)) {
      query["MultiAccountActionType"] = request.multiAccountActionType;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeNsasSuspEventType",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeNsasSuspEventTypeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeNsasSuspEventTypeResponse({}));
  }

  /**
   * Queries the information about an alert type.
   * 
   * @param request - DescribeNsasSuspEventTypeRequest
   * @returns DescribeNsasSuspEventTypeResponse
   */
  async describeNsasSuspEventType(request: $_model.DescribeNsasSuspEventTypeRequest): Promise<$_model.DescribeNsasSuspEventTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeNsasSuspEventTypeWithOptions(request, runtime);
  }

  /**
   * Queries the information about the servers whose Security Center agent status is Offline.
   * 
   * @param request - DescribeOfflineMachinesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeOfflineMachinesResponse
   */
  async describeOfflineMachinesWithOptions(request: $_model.DescribeOfflineMachinesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeOfflineMachinesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.os)) {
      query["Os"] = request.os;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionIdStr)) {
      query["RegionIdStr"] = request.regionIdStr;
    }

    if (!$dara.isNull(request.regionNo)) {
      query["RegionNo"] = request.regionNo;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.vendor)) {
      query["Vendor"] = request.vendor;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeOfflineMachines",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeOfflineMachinesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeOfflineMachinesResponse({}));
  }

  /**
   * Queries the information about the servers whose Security Center agent status is Offline.
   * 
   * @param request - DescribeOfflineMachinesRequest
   * @returns DescribeOfflineMachinesResponse
   */
  async describeOfflineMachines(request: $_model.DescribeOfflineMachinesRequest): Promise<$_model.DescribeOfflineMachinesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeOfflineMachinesWithOptions(request, runtime);
  }

  /**
   * Queries agent tasks.
   * 
   * @param request - DescribeOnceTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeOnceTaskResponse
   */
  async describeOnceTaskWithOptions(request: $_model.DescribeOnceTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeOnceTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTimeQuery)) {
      query["EndTimeQuery"] = request.endTimeQuery;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.rootTaskId)) {
      query["RootTaskId"] = request.rootTaskId;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.startTimeQuery)) {
      query["StartTimeQuery"] = request.startTimeQuery;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeOnceTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeOnceTaskResponse>(await this.callApi(params, req, runtime), new $_model.DescribeOnceTaskResponse({}));
  }

  /**
   * Queries agent tasks.
   * 
   * @param request - DescribeOnceTaskRequest
   * @returns DescribeOnceTaskResponse
   */
  async describeOnceTask(request: $_model.DescribeOnceTaskRequest): Promise<$_model.DescribeOnceTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeOnceTaskWithOptions(request, runtime);
  }

  /**
   * Queries the sub-task information of one-time scan task. A sub-task can be an image scan task or an image asset synchronization task.
   * 
   * @param request - DescribeOnceTaskLeafRecordPageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeOnceTaskLeafRecordPageResponse
   */
  async describeOnceTaskLeafRecordPageWithOptions(request: $_model.DescribeOnceTaskLeafRecordPageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeOnceTaskLeafRecordPageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.relateInfo)) {
      query["RelateInfo"] = request.relateInfo;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.statusList)) {
      query["StatusList"] = request.statusList;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeOnceTaskLeafRecordPage",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeOnceTaskLeafRecordPageResponse>(await this.callApi(params, req, runtime), new $_model.DescribeOnceTaskLeafRecordPageResponse({}));
  }

  /**
   * Queries the sub-task information of one-time scan task. A sub-task can be an image scan task or an image asset synchronization task.
   * 
   * @param request - DescribeOnceTaskLeafRecordPageRequest
   * @returns DescribeOnceTaskLeafRecordPageResponse
   */
  async describeOnceTaskLeafRecordPage(request: $_model.DescribeOnceTaskLeafRecordPageRequest): Promise<$_model.DescribeOnceTaskLeafRecordPageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeOnceTaskLeafRecordPageWithOptions(request, runtime);
  }

  /**
   * Queries statistics on the client plug-in installation status.
   * 
   * @param request - DescribePluginSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePluginSummaryResponse
   */
  async describePluginSummaryWithOptions(request: $_model.DescribePluginSummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePluginSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pluginName)) {
      query["PluginName"] = request.pluginName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePluginSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePluginSummaryResponse>(await this.callApi(params, req, runtime), new $_model.DescribePluginSummaryResponse({}));
  }

  /**
   * Queries statistics on the client plug-in installation status.
   * 
   * @param request - DescribePluginSummaryRequest
   * @returns DescribePluginSummaryResponse
   */
  async describePluginSummary(request: $_model.DescribePluginSummaryRequest): Promise<$_model.DescribePluginSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePluginSummaryWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of asset fingerprints. The assets include processes, ports, software, accounts, middleware, websites, web services, scheduled tasks, startup items, and databases.
   * 
   * @param request - DescribePropertyCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyCountResponse
   */
  async describePropertyCountWithOptions(request: $_model.DescribePropertyCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyCountResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyCountResponse({}));
  }

  /**
   * Queries the statistics of asset fingerprints. The assets include processes, ports, software, accounts, middleware, websites, web services, scheduled tasks, startup items, and databases.
   * 
   * @param request - DescribePropertyCountRequest
   * @returns DescribePropertyCountResponse
   */
  async describePropertyCount(request: $_model.DescribePropertyCountRequest): Promise<$_model.DescribePropertyCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyCountWithOptions(request, runtime);
  }

  /**
   * Queries the details of scheduled tasks on the Host page.
   * 
   * @param request - DescribePropertyCronDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyCronDetailResponse
   */
  async describePropertyCronDetailWithOptions(request: $_model.DescribePropertyCronDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyCronDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.extend)) {
      query["Extend"] = request.extend;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.user)) {
      query["User"] = request.user;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyCronDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyCronDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyCronDetailResponse({}));
  }

  /**
   * Queries the details of scheduled tasks on the Host page.
   * 
   * @param request - DescribePropertyCronDetailRequest
   * @returns DescribePropertyCronDetailResponse
   */
  async describePropertyCronDetail(request: $_model.DescribePropertyCronDetailRequest): Promise<$_model.DescribePropertyCronDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyCronDetailWithOptions(request, runtime);
  }

  /**
   * Queries the scheduled tasks of your assets.
   * 
   * @param request - DescribePropertyCronItemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyCronItemResponse
   */
  async describePropertyCronItemWithOptions(request: $_model.DescribePropertyCronItemRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyCronItemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.forceFlush)) {
      query["ForceFlush"] = request.forceFlush;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyCronItem",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyCronItemResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyCronItemResponse({}));
  }

  /**
   * Queries the scheduled tasks of your assets.
   * 
   * @param request - DescribePropertyCronItemRequest
   * @returns DescribePropertyCronItemResponse
   */
  async describePropertyCronItem(request: $_model.DescribePropertyCronItemRequest): Promise<$_model.DescribePropertyCronItemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyCronItemWithOptions(request, runtime);
  }

  /**
   * Queries the fingerprints of ports on a specified server.
   * 
   * @param request - DescribePropertyPortDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyPortDetailResponse
   */
  async describePropertyPortDetailWithOptions(request: $_model.DescribePropertyPortDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyPortDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bindIp)) {
      query["BindIp"] = request.bindIp;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.extend)) {
      query["Extend"] = request.extend;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.procName)) {
      query["ProcName"] = request.procName;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyPortDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyPortDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyPortDetailResponse({}));
  }

  /**
   * Queries the fingerprints of ports on a specified server.
   * 
   * @param request - DescribePropertyPortDetailRequest
   * @returns DescribePropertyPortDetailResponse
   */
  async describePropertyPortDetail(request: $_model.DescribePropertyPortDetailRequest): Promise<$_model.DescribePropertyPortDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyPortDetailWithOptions(request, runtime);
  }

  /**
   * Queries information about all ports.
   * 
   * @param request - DescribePropertyPortItemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyPortItemResponse
   */
  async describePropertyPortItemWithOptions(request: $_model.DescribePropertyPortItemRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyPortItemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.forceFlush)) {
      query["ForceFlush"] = request.forceFlush;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyPortItem",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyPortItemResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyPortItemResponse({}));
  }

  /**
   * Queries information about all ports.
   * 
   * @param request - DescribePropertyPortItemRequest
   * @returns DescribePropertyPortItemResponse
   */
  async describePropertyPortItem(request: $_model.DescribePropertyPortItemRequest): Promise<$_model.DescribePropertyPortItemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyPortItemWithOptions(request, runtime);
  }

  /**
   * Queries the fingerprints of processes on a specified server.
   * 
   * @param request - DescribePropertyProcDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyProcDetailResponse
   */
  async describePropertyProcDetailWithOptions(request: $_model.DescribePropertyProcDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyProcDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cmdline)) {
      query["Cmdline"] = request.cmdline;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.extend)) {
      query["Extend"] = request.extend;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.procTimeEnd)) {
      query["ProcTimeEnd"] = request.procTimeEnd;
    }

    if (!$dara.isNull(request.procTimeStart)) {
      query["ProcTimeStart"] = request.procTimeStart;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.user)) {
      query["User"] = request.user;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyProcDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyProcDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyProcDetailResponse({}));
  }

  /**
   * Queries the fingerprints of processes on a specified server.
   * 
   * @param request - DescribePropertyProcDetailRequest
   * @returns DescribePropertyProcDetailResponse
   */
  async describePropertyProcDetail(request: $_model.DescribePropertyProcDetailRequest): Promise<$_model.DescribePropertyProcDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyProcDetailWithOptions(request, runtime);
  }

  /**
   * Queries information about all processes.
   * 
   * @param request - DescribePropertyProcItemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyProcItemResponse
   */
  async describePropertyProcItemWithOptions(request: $_model.DescribePropertyProcItemRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyProcItemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.forceFlush)) {
      query["ForceFlush"] = request.forceFlush;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyProcItem",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyProcItemResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyProcItemResponse({}));
  }

  /**
   * Queries information about all processes.
   * 
   * @param request - DescribePropertyProcItemRequest
   * @returns DescribePropertyProcItemResponse
   */
  async describePropertyProcItem(request: $_model.DescribePropertyProcItemRequest): Promise<$_model.DescribePropertyProcItemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyProcItemWithOptions(request, runtime);
  }

  /**
   * Queries middleware fingerprints.
   * 
   * @param request - DescribePropertyScaDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyScaDetailResponse
   */
  async describePropertyScaDetailWithOptions(request: $_model.DescribePropertyScaDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyScaDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.biz)) {
      query["Biz"] = request.biz;
    }

    if (!$dara.isNull(request.bizType)) {
      query["BizType"] = request.bizType;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.pid)) {
      query["Pid"] = request.pid;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.processStartedEnd)) {
      query["ProcessStartedEnd"] = request.processStartedEnd;
    }

    if (!$dara.isNull(request.processStartedStart)) {
      query["ProcessStartedStart"] = request.processStartedStart;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.scaName)) {
      query["ScaName"] = request.scaName;
    }

    if (!$dara.isNull(request.scaNamePattern)) {
      query["ScaNamePattern"] = request.scaNamePattern;
    }

    if (!$dara.isNull(request.scaVersion)) {
      query["ScaVersion"] = request.scaVersion;
    }

    if (!$dara.isNull(request.searchInfo)) {
      query["SearchInfo"] = request.searchInfo;
    }

    if (!$dara.isNull(request.searchInfoSub)) {
      query["SearchInfoSub"] = request.searchInfoSub;
    }

    if (!$dara.isNull(request.searchItem)) {
      query["SearchItem"] = request.searchItem;
    }

    if (!$dara.isNull(request.searchItemSub)) {
      query["SearchItemSub"] = request.searchItemSub;
    }

    if (!$dara.isNull(request.user)) {
      query["User"] = request.user;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyScaDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyScaDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyScaDetailResponse({}));
  }

  /**
   * Queries middleware fingerprints.
   * 
   * @param request - DescribePropertyScaDetailRequest
   * @returns DescribePropertyScaDetailResponse
   */
  async describePropertyScaDetail(request: $_model.DescribePropertyScaDetailRequest): Promise<$_model.DescribePropertyScaDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyScaDetailWithOptions(request, runtime);
  }

  /**
   * Queries middleware fingerprints.
   * 
   * @param request - DescribePropertyScaItemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyScaItemResponse
   */
  async describePropertyScaItemWithOptions(request: $_model.DescribePropertyScaItemRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyScaItemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.biz)) {
      query["Biz"] = request.biz;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.forceFlush)) {
      query["ForceFlush"] = request.forceFlush;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.searchInfo)) {
      query["SearchInfo"] = request.searchInfo;
    }

    if (!$dara.isNull(request.searchItem)) {
      query["SearchItem"] = request.searchItem;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyScaItem",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyScaItemResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyScaItemResponse({}));
  }

  /**
   * Queries middleware fingerprints.
   * 
   * @param request - DescribePropertyScaItemRequest
   * @returns DescribePropertyScaItemResponse
   */
  async describePropertyScaItem(request: $_model.DescribePropertyScaItemRequest): Promise<$_model.DescribePropertyScaItemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyScaItemWithOptions(request, runtime);
  }

  /**
   * Queries the Java processes that are collected by the asset fingerprints feature of Security Center in your assets.
   * 
   * @param request - DescribePropertyScaProcessDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyScaProcessDetailResponse
   */
  async describePropertyScaProcessDetailWithOptions(request: $_model.DescribePropertyScaProcessDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyScaProcessDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bizType)) {
      query["BizType"] = request.bizType;
    }

    if (!$dara.isNull(request.cmdline)) {
      query["Cmdline"] = request.cmdline;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.pid)) {
      query["Pid"] = request.pid;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyScaProcessDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyScaProcessDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyScaProcessDetailResponse({}));
  }

  /**
   * Queries the Java processes that are collected by the asset fingerprints feature of Security Center in your assets.
   * 
   * @param request - DescribePropertyScaProcessDetailRequest
   * @returns DescribePropertyScaProcessDetailResponse
   */
  async describePropertyScaProcessDetail(request: $_model.DescribePropertyScaProcessDetailRequest): Promise<$_model.DescribePropertyScaProcessDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyScaProcessDetailWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of scheduled tasks of asset fingerprint collection.
   * 
   * @param request - DescribePropertyScheduleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyScheduleConfigResponse
   */
  async describePropertyScheduleConfigWithOptions(request: $_model.DescribePropertyScheduleConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyScheduleConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyScheduleConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyScheduleConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyScheduleConfigResponse({}));
  }

  /**
   * Queries the configurations of scheduled tasks of asset fingerprint collection.
   * 
   * @param request - DescribePropertyScheduleConfigRequest
   * @returns DescribePropertyScheduleConfigResponse
   */
  async describePropertyScheduleConfig(request: $_model.DescribePropertyScheduleConfigRequest): Promise<$_model.DescribePropertyScheduleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyScheduleConfigWithOptions(request, runtime);
  }

  /**
   * Queries the details of a software asset.
   * 
   * @param request - DescribePropertySoftwareDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertySoftwareDetailResponse
   */
  async describePropertySoftwareDetailWithOptions(request: $_model.DescribePropertySoftwareDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertySoftwareDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.extend)) {
      query["Extend"] = request.extend;
    }

    if (!$dara.isNull(request.installTimeEnd)) {
      query["InstallTimeEnd"] = request.installTimeEnd;
    }

    if (!$dara.isNull(request.installTimeStart)) {
      query["InstallTimeStart"] = request.installTimeStart;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.path)) {
      query["Path"] = request.path;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.softwareVersion)) {
      query["SoftwareVersion"] = request.softwareVersion;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertySoftwareDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertySoftwareDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertySoftwareDetailResponse({}));
  }

  /**
   * Queries the details of a software asset.
   * 
   * @param request - DescribePropertySoftwareDetailRequest
   * @returns DescribePropertySoftwareDetailResponse
   */
  async describePropertySoftwareDetail(request: $_model.DescribePropertySoftwareDetailRequest): Promise<$_model.DescribePropertySoftwareDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertySoftwareDetailWithOptions(request, runtime);
  }

  /**
   * Queries information about all software assets.
   * 
   * @param request - DescribePropertySoftwareItemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertySoftwareItemResponse
   */
  async describePropertySoftwareItemWithOptions(request: $_model.DescribePropertySoftwareItemRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertySoftwareItemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.forceFlush)) {
      query["ForceFlush"] = request.forceFlush;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertySoftwareItem",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertySoftwareItemResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertySoftwareItemResponse({}));
  }

  /**
   * Queries information about all software assets.
   * 
   * @param request - DescribePropertySoftwareItemRequest
   * @returns DescribePropertySoftwareItemResponse
   */
  async describePropertySoftwareItem(request: $_model.DescribePropertySoftwareItemRequest): Promise<$_model.DescribePropertySoftwareItemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertySoftwareItemWithOptions(request, runtime);
  }

  /**
   * Queries middleware types.
   * 
   * @param request - DescribePropertyTypeScaItemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyTypeScaItemResponse
   */
  async describePropertyTypeScaItemWithOptions(request: $_model.DescribePropertyTypeScaItemRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyTypeScaItemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyTypeScaItem",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyTypeScaItemResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyTypeScaItemResponse({}));
  }

  /**
   * Queries middleware types.
   * 
   * @param request - DescribePropertyTypeScaItemRequest
   * @returns DescribePropertyTypeScaItemResponse
   */
  async describePropertyTypeScaItem(request: $_model.DescribePropertyTypeScaItemRequest): Promise<$_model.DescribePropertyTypeScaItemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyTypeScaItemWithOptions(request, runtime);
  }

  /**
   * Uses the asset fingerprints feature to obtain the statistics on top five most frequently detected ports, processes, software, accounts, or middleware.
   * 
   * @remarks
   * Only users who purchase the Enterprise or Ultimate edition of Security Center can call this operation.
   * 
   * @param request - DescribePropertyUsageTopRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyUsageTopResponse
   */
  async describePropertyUsageTopWithOptions(request: $_model.DescribePropertyUsageTopRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyUsageTopResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyUsageTop",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyUsageTopResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyUsageTopResponse({}));
  }

  /**
   * Uses the asset fingerprints feature to obtain the statistics on top five most frequently detected ports, processes, software, accounts, or middleware.
   * 
   * @remarks
   * Only users who purchase the Enterprise or Ultimate edition of Security Center can call this operation.
   * 
   * @param request - DescribePropertyUsageTopRequest
   * @returns DescribePropertyUsageTopResponse
   */
  async describePropertyUsageTop(request: $_model.DescribePropertyUsageTopRequest): Promise<$_model.DescribePropertyUsageTopResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyUsageTopWithOptions(request, runtime);
  }

  /**
   * Queries the asset fingerprints for an account to which a server belongs.
   * 
   * @param request - DescribePropertyUserDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyUserDetailResponse
   */
  async describePropertyUserDetailWithOptions(request: $_model.DescribePropertyUserDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyUserDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.extend)) {
      query["Extend"] = request.extend;
    }

    if (!$dara.isNull(request.isRoot)) {
      query["IsRoot"] = request.isRoot;
    }

    if (!$dara.isNull(request.lastLoginTimeEnd)) {
      query["LastLoginTimeEnd"] = request.lastLoginTimeEnd;
    }

    if (!$dara.isNull(request.lastLoginTimeStart)) {
      query["LastLoginTimeStart"] = request.lastLoginTimeStart;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.user)) {
      query["User"] = request.user;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyUserDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyUserDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyUserDetailResponse({}));
  }

  /**
   * Queries the asset fingerprints for an account to which a server belongs.
   * 
   * @param request - DescribePropertyUserDetailRequest
   * @returns DescribePropertyUserDetailResponse
   */
  async describePropertyUserDetail(request: $_model.DescribePropertyUserDetailRequest): Promise<$_model.DescribePropertyUserDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyUserDetailWithOptions(request, runtime);
  }

  /**
   * Queries information about an account.
   * 
   * @param request - DescribePropertyUserItemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePropertyUserItemResponse
   */
  async describePropertyUserItemWithOptions(request: $_model.DescribePropertyUserItemRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePropertyUserItemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.forceFlush)) {
      query["ForceFlush"] = request.forceFlush;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.user)) {
      query["User"] = request.user;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePropertyUserItem",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePropertyUserItemResponse>(await this.callApi(params, req, runtime), new $_model.DescribePropertyUserItemResponse({}));
  }

  /**
   * Queries information about an account.
   * 
   * @param request - DescribePropertyUserItemRequest
   * @returns DescribePropertyUserItemResponse
   */
  async describePropertyUserItem(request: $_model.DescribePropertyUserItemRequest): Promise<$_model.DescribePropertyUserItemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePropertyUserItemWithOptions(request, runtime);
  }

  /**
   * Queries the download information about a quarantined file.
   * 
   * @param request - DescribeQuaraFileDownloadInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeQuaraFileDownloadInfoResponse
   */
  async describeQuaraFileDownloadInfoWithOptions(request: $_model.DescribeQuaraFileDownloadInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeQuaraFileDownloadInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.quaraFileId)) {
      query["QuaraFileId"] = request.quaraFileId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeQuaraFileDownloadInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeQuaraFileDownloadInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeQuaraFileDownloadInfoResponse({}));
  }

  /**
   * Queries the download information about a quarantined file.
   * 
   * @param request - DescribeQuaraFileDownloadInfoRequest
   * @returns DescribeQuaraFileDownloadInfoResponse
   */
  async describeQuaraFileDownloadInfo(request: $_model.DescribeQuaraFileDownloadInfoRequest): Promise<$_model.DescribeQuaraFileDownloadInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeQuaraFileDownloadInfoWithOptions(request, runtime);
  }

  /**
   * Queries the information about a report export task.
   * 
   * @param request - DescribeReportExportRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeReportExportResponse
   */
  async describeReportExportWithOptions(request: $_model.DescribeReportExportRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeReportExportResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.exportId)) {
      query["ExportId"] = request.exportId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeReportExport",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeReportExportResponse>(await this.callApi(params, req, runtime), new $_model.DescribeReportExportResponse({}));
  }

  /**
   * Queries the information about a report export task.
   * 
   * @param request - DescribeReportExportRequest
   * @returns DescribeReportExportResponse
   */
  async describeReportExport(request: $_model.DescribeReportExportRequest): Promise<$_model.DescribeReportExportResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeReportExportWithOptions(request, runtime);
  }

  /**
   * Queries the status of a report recipient by using the security report feature of the System Configuration module in the Security Center console.
   * 
   * @param request - DescribeReportRecipientStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeReportRecipientStatusResponse
   */
  async describeReportRecipientStatusWithOptions(request: $_model.DescribeReportRecipientStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeReportRecipientStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.recipients)) {
      query["Recipients"] = request.recipients;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeReportRecipientStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeReportRecipientStatusResponse>(await this.callApi(params, req, runtime), new $_model.DescribeReportRecipientStatusResponse({}));
  }

  /**
   * Queries the status of a report recipient by using the security report feature of the System Configuration module in the Security Center console.
   * 
   * @param request - DescribeReportRecipientStatusRequest
   * @returns DescribeReportRecipientStatusResponse
   */
  async describeReportRecipientStatus(request: $_model.DescribeReportRecipientStatusRequest): Promise<$_model.DescribeReportRecipientStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeReportRecipientStatusWithOptions(request, runtime);
  }

  /**
   * Queries the details about restoration tasks.
   * 
   * @remarks
   * If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
   * >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](https://help.aliyun.com/document_detail/164781.html).
   * 
   * @param request - DescribeRestoreJobsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRestoreJobsResponse
   */
  async describeRestoreJobsWithOptions(request: $_model.DescribeRestoreJobsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRestoreJobsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.machineRemark)) {
      query["MachineRemark"] = request.machineRemark;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRestoreJobs",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRestoreJobsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRestoreJobsResponse({}));
  }

  /**
   * Queries the details about restoration tasks.
   * 
   * @remarks
   * If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
   * >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](https://help.aliyun.com/document_detail/164781.html).
   * 
   * @param request - DescribeRestoreJobsRequest
   * @returns DescribeRestoreJobsResponse
   */
  async describeRestoreJobs(request: $_model.DescribeRestoreJobsRequest): Promise<$_model.DescribeRestoreJobsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRestoreJobsWithOptions(request, runtime);
  }

  /**
   * Queries restoration tasks.
   * 
   * @param request - DescribeRestorePlansRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRestorePlansResponse
   */
  async describeRestorePlansWithOptions(request: $_model.DescribeRestorePlansRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRestorePlansResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.instanceName)) {
      query["InstanceName"] = request.instanceName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRestorePlans",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRestorePlansResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRestorePlansResponse({}));
  }

  /**
   * Queries restoration tasks.
   * 
   * @param request - DescribeRestorePlansRequest
   * @returns DescribeRestorePlansResponse
   */
  async describeRestorePlans(request: $_model.DescribeRestorePlansRequest): Promise<$_model.DescribeRestorePlansResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRestorePlansWithOptions(request, runtime);
  }

  /**
   * Queries the assets that are affected by the risk item detected in configuration assessment based on a specified check item.
   * 
   * @remarks
   * This operation is phased out. You can use the ListCheckInstanceResult operation.
   * 
   * @deprecated OpenAPI DescribeRiskCheckItemResult is deprecated
   * 
   * @param request - DescribeRiskCheckItemResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRiskCheckItemResultResponse
   */
  async describeRiskCheckItemResultWithOptions(request: $_model.DescribeRiskCheckItemResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRiskCheckItemResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.itemId)) {
      query["ItemId"] = request.itemId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRiskCheckItemResult",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRiskCheckItemResultResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRiskCheckItemResultResponse({}));
  }

  /**
   * Queries the assets that are affected by the risk item detected in configuration assessment based on a specified check item.
   * 
   * @remarks
   * This operation is phased out. You can use the ListCheckInstanceResult operation.
   * 
   * @deprecated OpenAPI DescribeRiskCheckItemResult is deprecated
   * 
   * @param request - DescribeRiskCheckItemResultRequest
   * @returns DescribeRiskCheckItemResultResponse
   */
  // Deprecated
  async describeRiskCheckItemResult(request: $_model.DescribeRiskCheckItemResultRequest): Promise<$_model.DescribeRiskCheckItemResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRiskCheckItemResultWithOptions(request, runtime);
  }

  /**
   * Queries the check results of cloud service configurations by check item type or name.
   * 
   * @remarks
   * This operation is phased out. You can use the [ListCheckResult](~~ListCheckResult~~) operation.
   * 
   * @deprecated OpenAPI DescribeRiskCheckResult is deprecated
   * 
   * @param request - DescribeRiskCheckResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRiskCheckResultResponse
   */
  async describeRiskCheckResultWithOptions(request: $_model.DescribeRiskCheckResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRiskCheckResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.assetType)) {
      query["AssetType"] = request.assetType;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.itemIds)) {
      query["ItemIds"] = request.itemIds;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.queryFlag)) {
      query["QueryFlag"] = request.queryFlag;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.riskLevel)) {
      query["RiskLevel"] = request.riskLevel;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRiskCheckResult",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRiskCheckResultResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRiskCheckResultResponse({}));
  }

  /**
   * Queries the check results of cloud service configurations by check item type or name.
   * 
   * @remarks
   * This operation is phased out. You can use the [ListCheckResult](~~ListCheckResult~~) operation.
   * 
   * @deprecated OpenAPI DescribeRiskCheckResult is deprecated
   * 
   * @param request - DescribeRiskCheckResultRequest
   * @returns DescribeRiskCheckResultResponse
   */
  // Deprecated
  async describeRiskCheckResult(request: $_model.DescribeRiskCheckResultRequest): Promise<$_model.DescribeRiskCheckResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRiskCheckResultWithOptions(request, runtime);
  }

  /**
   * Queries the summary information about the check results of cloud service configurations. The information includes the number of risk items, the risk rate, the number of affected assets, the check time, and the statistics for each type of check item.
   * 
   * @remarks
   * This operation is phased out. You can use the GetCheckSummary operation.
   * 
   * @deprecated OpenAPI DescribeRiskCheckSummary is deprecated
   * 
   * @param request - DescribeRiskCheckSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRiskCheckSummaryResponse
   */
  async describeRiskCheckSummaryWithOptions(request: $_model.DescribeRiskCheckSummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRiskCheckSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRiskCheckSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRiskCheckSummaryResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRiskCheckSummaryResponse({}));
  }

  /**
   * Queries the summary information about the check results of cloud service configurations. The information includes the number of risk items, the risk rate, the number of affected assets, the check time, and the statistics for each type of check item.
   * 
   * @remarks
   * This operation is phased out. You can use the GetCheckSummary operation.
   * 
   * @deprecated OpenAPI DescribeRiskCheckSummary is deprecated
   * 
   * @param request - DescribeRiskCheckSummaryRequest
   * @returns DescribeRiskCheckSummaryResponse
   */
  // Deprecated
  async describeRiskCheckSummary(request: $_model.DescribeRiskCheckSummaryRequest): Promise<$_model.DescribeRiskCheckSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRiskCheckSummaryWithOptions(request, runtime);
  }

  /**
   * Queries the types of check items in configuration assessment.
   * 
   * @remarks
   * This operation is phased out. You can use the ListCheckStandard operation instead.
   * 
   * @deprecated OpenAPI DescribeRiskItemType is deprecated
   * 
   * @param request - DescribeRiskItemTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRiskItemTypeResponse
   */
  async describeRiskItemTypeWithOptions(request: $_model.DescribeRiskItemTypeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRiskItemTypeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRiskItemType",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRiskItemTypeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRiskItemTypeResponse({}));
  }

  /**
   * Queries the types of check items in configuration assessment.
   * 
   * @remarks
   * This operation is phased out. You can use the ListCheckStandard operation instead.
   * 
   * @deprecated OpenAPI DescribeRiskItemType is deprecated
   * 
   * @param request - DescribeRiskItemTypeRequest
   * @returns DescribeRiskItemTypeResponse
   */
  // Deprecated
  async describeRiskItemType(request: $_model.DescribeRiskItemTypeRequest): Promise<$_model.DescribeRiskItemTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRiskItemTypeWithOptions(request, runtime);
  }

  /**
   * Queries the number of risk items detected in the configuration assessment of one or more cloud services by using the instance IDs of the cloud services.
   * 
   * @remarks
   * This operation is phased out. You can use the ListCheckResult operation. When you call the ListCheckResult operation, set the Statuses parameter to NOT_PASS.
   * 
   * @deprecated OpenAPI DescribeRiskListCheckResult is deprecated
   * 
   * @param request - DescribeRiskListCheckResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRiskListCheckResultResponse
   */
  async describeRiskListCheckResultWithOptions(request: $_model.DescribeRiskListCheckResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRiskListCheckResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRiskListCheckResult",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRiskListCheckResultResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRiskListCheckResultResponse({}));
  }

  /**
   * Queries the number of risk items detected in the configuration assessment of one or more cloud services by using the instance IDs of the cloud services.
   * 
   * @remarks
   * This operation is phased out. You can use the ListCheckResult operation. When you call the ListCheckResult operation, set the Statuses parameter to NOT_PASS.
   * 
   * @deprecated OpenAPI DescribeRiskListCheckResult is deprecated
   * 
   * @param request - DescribeRiskListCheckResultRequest
   * @returns DescribeRiskListCheckResultResponse
   */
  // Deprecated
  async describeRiskListCheckResult(request: $_model.DescribeRiskListCheckResultRequest): Promise<$_model.DescribeRiskListCheckResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRiskListCheckResultWithOptions(request, runtime);
  }

  /**
   * Queries baseline types.
   * 
   * @param request - DescribeRiskTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRiskTypeResponse
   */
  async describeRiskTypeWithOptions(request: $_model.DescribeRiskTypeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRiskTypeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRiskType",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRiskTypeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRiskTypeResponse({}));
  }

  /**
   * Queries baseline types.
   * 
   * @param request - DescribeRiskTypeRequest
   * @returns DescribeRiskTypeResponse
   */
  async describeRiskType(request: $_model.DescribeRiskTypeRequest): Promise<$_model.DescribeRiskTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRiskTypeWithOptions(request, runtime);
  }

  /**
   * Queries the information about baselines based on baseline IDs or names.
   * 
   * @param request - DescribeRisksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRisksResponse
   */
  async describeRisksWithOptions(request: $_model.DescribeRisksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRisksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.limit)) {
      query["Limit"] = request.limit;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.riskId)) {
      query["RiskId"] = request.riskId;
    }

    if (!$dara.isNull(request.riskName)) {
      query["RiskName"] = request.riskName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRisks",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRisksResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRisksResponse({}));
  }

  /**
   * Queries the information about baselines based on baseline IDs or names.
   * 
   * @param request - DescribeRisksRequest
   * @returns DescribeRisksResponse
   */
  async describeRisks(request: $_model.DescribeRisksRequest): Promise<$_model.DescribeRisksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRisksWithOptions(request, runtime);
  }

  /**
   * Queries the servers on which you want to install Cloud Assistant or the CloudMonitor agent.
   * 
   * @param request - DescribeSasPmAgentListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSasPmAgentListResponse
   */
  async describeSasPmAgentListWithOptions(request: $_model.DescribeSasPmAgentListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSasPmAgentListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSasPmAgentList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSasPmAgentListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSasPmAgentListResponse({}));
  }

  /**
   * Queries the servers on which you want to install Cloud Assistant or the CloudMonitor agent.
   * 
   * @param request - DescribeSasPmAgentListRequest
   * @returns DescribeSasPmAgentListResponse
   */
  async describeSasPmAgentList(request: $_model.DescribeSasPmAgentListRequest): Promise<$_model.DescribeSasPmAgentListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSasPmAgentListWithOptions(request, runtime);
  }

  /**
   * Queries the progress of a virus scan task.
   * 
   * @param request - DescribeScanTaskProgressRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeScanTaskProgressResponse
   */
  async describeScanTaskProgressWithOptions(request: $_model.DescribeScanTaskProgressRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeScanTaskProgressResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeScanTaskProgress",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeScanTaskProgressResponse>(await this.callApi(params, req, runtime), new $_model.DescribeScanTaskProgressResponse({}));
  }

  /**
   * Queries the progress of a virus scan task.
   * 
   * @param request - DescribeScanTaskProgressRequest
   * @returns DescribeScanTaskProgressResponse
   */
  async describeScanTaskProgress(request: $_model.DescribeScanTaskProgressRequest): Promise<$_model.DescribeScanTaskProgressResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeScanTaskProgressWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of virus detection tasks.
   * 
   * @param request - DescribeScanTaskStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeScanTaskStatisticsResponse
   */
  async describeScanTaskStatisticsWithOptions(request: $_model.DescribeScanTaskStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeScanTaskStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.levels)) {
      query["Levels"] = request.levels;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeScanTaskStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeScanTaskStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeScanTaskStatisticsResponse({}));
  }

  /**
   * Queries the statistics of virus detection tasks.
   * 
   * @param request - DescribeScanTaskStatisticsRequest
   * @returns DescribeScanTaskStatisticsResponse
   */
  async describeScanTaskStatistics(request: $_model.DescribeScanTaskStatisticsRequest): Promise<$_model.DescribeScanTaskStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeScanTaskStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the trends of the scores on the security dashboard.
   * 
   * @param request - DescribeScreenScoreThreadRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeScreenScoreThreadResponse
   */
  async describeScreenScoreThreadWithOptions(request: $_model.DescribeScreenScoreThreadRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeScreenScoreThreadResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeScreenScoreThread",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeScreenScoreThreadResponse>(await this.callApi(params, req, runtime), new $_model.DescribeScreenScoreThreadResponse({}));
  }

  /**
   * Queries the trends of the scores on the security dashboard.
   * 
   * @param request - DescribeScreenScoreThreadRequest
   * @returns DescribeScreenScoreThreadResponse
   */
  async describeScreenScoreThread(request: $_model.DescribeScreenScoreThreadRequest): Promise<$_model.DescribeScreenScoreThreadResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeScreenScoreThreadWithOptions(request, runtime);
  }

  /**
   * Queries the filter conditions that are used to search for assets.
   * 
   * @param request - DescribeSearchConditionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSearchConditionResponse
   */
  async describeSearchConditionWithOptions(request: $_model.DescribeSearchConditionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSearchConditionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSearchCondition",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSearchConditionResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSearchConditionResponse({}));
  }

  /**
   * Queries the filter conditions that are used to search for assets.
   * 
   * @param request - DescribeSearchConditionRequest
   * @returns DescribeSearchConditionResponse
   */
  async describeSearchCondition(request: $_model.DescribeSearchConditionRequest): Promise<$_model.DescribeSearchConditionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSearchConditionWithOptions(request, runtime);
  }

  /**
   * Queries suggestions on how to handle the risks that affect the security score.
   * 
   * @param request - DescribeSecureSuggestionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSecureSuggestionResponse
   */
  async describeSecureSuggestionWithOptions(request: $_model.DescribeSecureSuggestionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSecureSuggestionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.calType)) {
      query["CalType"] = request.calType;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSecureSuggestion",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSecureSuggestionResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSecureSuggestionResponse({}));
  }

  /**
   * Queries suggestions on how to handle the risks that affect the security score.
   * 
   * @param request - DescribeSecureSuggestionRequest
   * @returns DescribeSecureSuggestionResponse
   */
  async describeSecureSuggestion(request: $_model.DescribeSecureSuggestionRequest): Promise<$_model.DescribeSecureSuggestionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSecureSuggestionWithOptions(request, runtime);
  }

  /**
   * Queries the day of a week when custom check tasks are performed and the time range during which the custom check tasks are performed.
   * 
   * @remarks
   * This operation is phased out. You can use the GetCheckConfig operation.
   * 
   * @deprecated OpenAPI DescribeSecurityCheckScheduleConfig is deprecated
   * 
   * @param request - DescribeSecurityCheckScheduleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSecurityCheckScheduleConfigResponse
   */
  async describeSecurityCheckScheduleConfigWithOptions(request: $_model.DescribeSecurityCheckScheduleConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSecurityCheckScheduleConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSecurityCheckScheduleConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSecurityCheckScheduleConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSecurityCheckScheduleConfigResponse({}));
  }

  /**
   * Queries the day of a week when custom check tasks are performed and the time range during which the custom check tasks are performed.
   * 
   * @remarks
   * This operation is phased out. You can use the GetCheckConfig operation.
   * 
   * @deprecated OpenAPI DescribeSecurityCheckScheduleConfig is deprecated
   * 
   * @param request - DescribeSecurityCheckScheduleConfigRequest
   * @returns DescribeSecurityCheckScheduleConfigResponse
   */
  // Deprecated
  async describeSecurityCheckScheduleConfig(request: $_model.DescribeSecurityCheckScheduleConfigRequest): Promise<$_model.DescribeSecurityCheckScheduleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSecurityCheckScheduleConfigWithOptions(request, runtime);
  }

  /**
   * Queries the list of whitelist rules.
   * 
   * @param request - DescribeSecurityEventMarkMissListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSecurityEventMarkMissListResponse
   */
  async describeSecurityEventMarkMissListWithOptions(request: $_model.DescribeSecurityEventMarkMissListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSecurityEventMarkMissListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.eventName)) {
      query["EventName"] = request.eventName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSecurityEventMarkMissList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSecurityEventMarkMissListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSecurityEventMarkMissListResponse({}));
  }

  /**
   * Queries the list of whitelist rules.
   * 
   * @param request - DescribeSecurityEventMarkMissListRequest
   * @returns DescribeSecurityEventMarkMissListResponse
   */
  async describeSecurityEventMarkMissList(request: $_model.DescribeSecurityEventMarkMissListRequest): Promise<$_model.DescribeSecurityEventMarkMissListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSecurityEventMarkMissListWithOptions(request, runtime);
  }

  /**
   * Queries the alert events that are triggered by the same IP address rule or of the same alert type as a specific alert event if you want to handle the specific alert event in batch operation mode.
   * 
   * @param request - DescribeSecurityEventOperationStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSecurityEventOperationStatusResponse
   */
  async describeSecurityEventOperationStatusWithOptions(request: $_model.DescribeSecurityEventOperationStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSecurityEventOperationStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityEventIds)) {
      query["SecurityEventIds"] = request.securityEventIds;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSecurityEventOperationStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSecurityEventOperationStatusResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSecurityEventOperationStatusResponse({}));
  }

  /**
   * Queries the alert events that are triggered by the same IP address rule or of the same alert type as a specific alert event if you want to handle the specific alert event in batch operation mode.
   * 
   * @param request - DescribeSecurityEventOperationStatusRequest
   * @returns DescribeSecurityEventOperationStatusResponse
   */
  async describeSecurityEventOperationStatus(request: $_model.DescribeSecurityEventOperationStatusRequest): Promise<$_model.DescribeSecurityEventOperationStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSecurityEventOperationStatusWithOptions(request, runtime);
  }

  /**
   * Queries the operations that you can perform to handle an alert.
   * 
   * @param request - DescribeSecurityEventOperationsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSecurityEventOperationsResponse
   */
  async describeSecurityEventOperationsWithOptions(request: $_model.DescribeSecurityEventOperationsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSecurityEventOperationsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityEventId)) {
      query["SecurityEventId"] = request.securityEventId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSecurityEventOperations",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSecurityEventOperationsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSecurityEventOperationsResponse({}));
  }

  /**
   * Queries the operations that you can perform to handle an alert.
   * 
   * @param request - DescribeSecurityEventOperationsRequest
   * @returns DescribeSecurityEventOperationsResponse
   */
  async describeSecurityEventOperations(request: $_model.DescribeSecurityEventOperationsRequest): Promise<$_model.DescribeSecurityEventOperationsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSecurityEventOperationsWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of each security check item and the daily statistics in the trend chart based on each security check item.
   * 
   * @param request - DescribeSecurityStatInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSecurityStatInfoResponse
   */
  async describeSecurityStatInfoWithOptions(request: $_model.DescribeSecurityStatInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSecurityStatInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSecurityStatInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSecurityStatInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSecurityStatInfoResponse({}));
  }

  /**
   * Queries the statistics of each security check item and the daily statistics in the trend chart based on each security check item.
   * 
   * @param request - DescribeSecurityStatInfoRequest
   * @returns DescribeSecurityStatInfoResponse
   */
  async describeSecurityStatInfo(request: $_model.DescribeSecurityStatInfoRequest): Promise<$_model.DescribeSecurityStatInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSecurityStatInfoWithOptions(request, runtime);
  }

  /**
   * Checks whether a service-linked role is created for Security Center.
   * 
   * @param request - DescribeServiceLinkedRoleStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeServiceLinkedRoleStatusResponse
   */
  async describeServiceLinkedRoleStatusWithOptions(request: $_model.DescribeServiceLinkedRoleStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeServiceLinkedRoleStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.serviceLinkedRole)) {
      query["ServiceLinkedRole"] = request.serviceLinkedRole;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeServiceLinkedRoleStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeServiceLinkedRoleStatusResponse>(await this.callApi(params, req, runtime), new $_model.DescribeServiceLinkedRoleStatusResponse({}));
  }

  /**
   * Checks whether a service-linked role is created for Security Center.
   * 
   * @param request - DescribeServiceLinkedRoleStatusRequest
   * @returns DescribeServiceLinkedRoleStatusResponse
   */
  async describeServiceLinkedRoleStatus(request: $_model.DescribeServiceLinkedRoleStatusRequest): Promise<$_model.DescribeServiceLinkedRoleStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeServiceLinkedRoleStatusWithOptions(request, runtime);
  }

  /**
   * Queries the scenarios in which alerts triggered by the same rule or rules of the same type are handled.
   * 
   * @param request - DescribeSimilarEventScenariosRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSimilarEventScenariosResponse
   */
  async describeSimilarEventScenariosWithOptions(request: $_model.DescribeSimilarEventScenariosRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSimilarEventScenariosResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityEventId)) {
      query["SecurityEventId"] = request.securityEventId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSimilarEventScenarios",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSimilarEventScenariosResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSimilarEventScenariosResponse({}));
  }

  /**
   * Queries the scenarios in which alerts triggered by the same rule or rules of the same type are handled.
   * 
   * @param request - DescribeSimilarEventScenariosRequest
   * @returns DescribeSimilarEventScenariosResponse
   */
  async describeSimilarEventScenarios(request: $_model.DescribeSimilarEventScenariosRequest): Promise<$_model.DescribeSimilarEventScenariosResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSimilarEventScenariosWithOptions(request, runtime);
  }

  /**
   * Queries alert events that are triggered by the same rule or of the same alert type.
   * 
   * @param request - DescribeSimilarSecurityEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSimilarSecurityEventsResponse
   */
  async describeSimilarSecurityEventsWithOptions(request: $_model.DescribeSimilarSecurityEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSimilarSecurityEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSimilarSecurityEvents",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSimilarSecurityEventsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSimilarSecurityEventsResponse({}));
  }

  /**
   * Queries alert events that are triggered by the same rule or of the same alert type.
   * 
   * @param request - DescribeSimilarSecurityEventsRequest
   * @returns DescribeSimilarSecurityEventsResponse
   */
  async describeSimilarSecurityEvents(request: $_model.DescribeSimilarSecurityEventsRequest): Promise<$_model.DescribeSimilarSecurityEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSimilarSecurityEventsWithOptions(request, runtime);
  }

  /**
   * Queries the backup snapshots that are created for anti-ransomware.
   * 
   * @param request - DescribeSnapshotsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSnapshotsResponse
   */
  async describeSnapshotsWithOptions(request: $_model.DescribeSnapshotsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSnapshotsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.apiVersion)) {
      query["ApiVersion"] = request.apiVersion;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.isAliYunEcs)) {
      query["IsAliYunEcs"] = request.isAliYunEcs;
    }

    if (!$dara.isNull(request.machineRegion)) {
      query["MachineRegion"] = request.machineRegion;
    }

    if (!$dara.isNull(request.machineRemark)) {
      query["MachineRemark"] = request.machineRemark;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.statusList)) {
      query["StatusList"] = request.statusList;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSnapshots",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSnapshotsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSnapshotsResponse({}));
  }

  /**
   * Queries the backup snapshots that are created for anti-ransomware.
   * 
   * @param request - DescribeSnapshotsRequest
   * @returns DescribeSnapshotsResponse
   */
  async describeSnapshots(request: $_model.DescribeSnapshotsRequest): Promise<$_model.DescribeSnapshotsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSnapshotsWithOptions(request, runtime);
  }

  /**
   * Query the execution details of a remediation task playbook
   * 
   * @remarks
   * This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
   * 
   * @param request - DescribeSoarPlaybookTaskDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSoarPlaybookTaskDetailResponse
   */
  async describeSoarPlaybookTaskDetailWithOptions(request: $_model.DescribeSoarPlaybookTaskDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSoarPlaybookTaskDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.playbookId)) {
      query["PlaybookId"] = request.playbookId;
    }

    if (!$dara.isNull(request.recordId)) {
      query["RecordId"] = request.recordId;
    }

    if (!$dara.isNull(request.requestUuid)) {
      query["RequestUuid"] = request.requestUuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSoarPlaybookTaskDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSoarPlaybookTaskDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSoarPlaybookTaskDetailResponse({}));
  }

  /**
   * Query the execution details of a remediation task playbook
   * 
   * @remarks
   * This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
   * 
   * @param request - DescribeSoarPlaybookTaskDetailRequest
   * @returns DescribeSoarPlaybookTaskDetailResponse
   */
  async describeSoarPlaybookTaskDetail(request: $_model.DescribeSoarPlaybookTaskDetailRequest): Promise<$_model.DescribeSoarPlaybookTaskDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSoarPlaybookTaskDetailWithOptions(request, runtime);
  }

  /**
   * Queries the policy templates on the Playbook page.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - DescribeSoarStrategiesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSoarStrategiesResponse
   */
  async describeSoarStrategiesWithOptions(request: $_model.DescribeSoarStrategiesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSoarStrategiesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSoarStrategies",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSoarStrategiesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSoarStrategiesResponse({}));
  }

  /**
   * Queries the policy templates on the Playbook page.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - DescribeSoarStrategiesRequest
   * @returns DescribeSoarStrategiesResponse
   */
  async describeSoarStrategies(request: $_model.DescribeSoarStrategiesRequest): Promise<$_model.DescribeSoarStrategiesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSoarStrategiesWithOptions(request, runtime);
  }

  /**
   * Queries the parameters of a policy on the Playbook page.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - DescribeSoarStrategyParamRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSoarStrategyParamResponse
   */
  async describeSoarStrategyParamWithOptions(request: $_model.DescribeSoarStrategyParamRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSoarStrategyParamResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSoarStrategyParam",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSoarStrategyParamResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSoarStrategyParamResponse({}));
  }

  /**
   * Queries the parameters of a policy on the Playbook page.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - DescribeSoarStrategyParamRequest
   * @returns DescribeSoarStrategyParamResponse
   */
  async describeSoarStrategyParam(request: $_model.DescribeSoarStrategyParamRequest): Promise<$_model.DescribeSoarStrategyParamResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSoarStrategyParamWithOptions(request, runtime);
  }

  /**
   * Queries the details of a policy task on the Playbook page, including the execution status of the task and the process information of the task.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - DescribeSoarStrategyTaskDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSoarStrategyTaskDetailResponse
   */
  async describeSoarStrategyTaskDetailWithOptions(request: $_model.DescribeSoarStrategyTaskDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSoarStrategyTaskDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.strategyTaskId)) {
      query["StrategyTaskId"] = request.strategyTaskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSoarStrategyTaskDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSoarStrategyTaskDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSoarStrategyTaskDetailResponse({}));
  }

  /**
   * Queries the details of a policy task on the Playbook page, including the execution status of the task and the process information of the task.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - DescribeSoarStrategyTaskDetailRequest
   * @returns DescribeSoarStrategyTaskDetailResponse
   */
  async describeSoarStrategyTaskDetail(request: $_model.DescribeSoarStrategyTaskDetailRequest): Promise<$_model.DescribeSoarStrategyTaskDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSoarStrategyTaskDetailWithOptions(request, runtime);
  }

  /**
   * Get the input parameters for a specific task
   * 
   * @remarks
   * Only the Enterprise and Flagship editions of Cloud Security Center support this API call, other versions do not support it.
   * 
   * @param request - DescribeSoarStrategyTaskParamsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSoarStrategyTaskParamsResponse
   */
  async describeSoarStrategyTaskParamsWithOptions(request: $_model.DescribeSoarStrategyTaskParamsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSoarStrategyTaskParamsResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSoarStrategyTaskParams",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSoarStrategyTaskParamsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSoarStrategyTaskParamsResponse({}));
  }

  /**
   * Get the input parameters for a specific task
   * 
   * @remarks
   * Only the Enterprise and Flagship editions of Cloud Security Center support this API call, other versions do not support it.
   * 
   * @param request - DescribeSoarStrategyTaskParamsRequest
   * @returns DescribeSoarStrategyTaskParamsResponse
   */
  async describeSoarStrategyTaskParams(request: $_model.DescribeSoarStrategyTaskParamsRequest): Promise<$_model.DescribeSoarStrategyTaskParamsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSoarStrategyTaskParamsWithOptions(request, runtime);
  }

  /**
   * Get the list of task execution results
   * 
   * @remarks
   * This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
   * 
   * @param request - DescribeSoarStrategyTaskResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSoarStrategyTaskResultResponse
   */
  async describeSoarStrategyTaskResultWithOptions(request: $_model.DescribeSoarStrategyTaskResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSoarStrategyTaskResultResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSoarStrategyTaskResult",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSoarStrategyTaskResultResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSoarStrategyTaskResultResponse({}));
  }

  /**
   * Get the list of task execution results
   * 
   * @remarks
   * This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
   * 
   * @param request - DescribeSoarStrategyTaskResultRequest
   * @returns DescribeSoarStrategyTaskResultResponse
   */
  async describeSoarStrategyTaskResult(request: $_model.DescribeSoarStrategyTaskResultRequest): Promise<$_model.DescribeSoarStrategyTaskResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSoarStrategyTaskResultWithOptions(request, runtime);
  }

  /**
   * Queries a list of policy tasks on the Playbook page.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - DescribeSoarStrategyTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSoarStrategyTasksResponse
   */
  async describeSoarStrategyTasksWithOptions(request: $_model.DescribeSoarStrategyTasksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSoarStrategyTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSoarStrategyTasks",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSoarStrategyTasksResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSoarStrategyTasksResponse({}));
  }

  /**
   * Queries a list of policy tasks on the Playbook page.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - DescribeSoarStrategyTasksRequest
   * @returns DescribeSoarStrategyTasksResponse
   */
  async describeSoarStrategyTasks(request: $_model.DescribeSoarStrategyTasksRequest): Promise<$_model.DescribeSoarStrategyTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSoarStrategyTasksWithOptions(request, runtime);
  }

  /**
   * Queries a list of policies created on the Playbook page of Security Center.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - DescribeSoarSubscribedStrategyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSoarSubscribedStrategyResponse
   */
  async describeSoarSubscribedStrategyWithOptions(request: $_model.DescribeSoarSubscribedStrategyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSoarSubscribedStrategyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSoarSubscribedStrategy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSoarSubscribedStrategyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSoarSubscribedStrategyResponse({}));
  }

  /**
   * Queries a list of policies created on the Playbook page of Security Center.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - DescribeSoarSubscribedStrategyRequest
   * @returns DescribeSoarSubscribedStrategyResponse
   */
  async describeSoarSubscribedStrategy(request: $_model.DescribeSoarSubscribedStrategyRequest): Promise<$_model.DescribeSoarSubscribedStrategyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSoarSubscribedStrategyWithOptions(request, runtime);
  }

  /**
   * Queries the details about baseline check policies.
   * 
   * @param request - DescribeStrategyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeStrategyResponse
   */
  async describeStrategyWithOptions(request: $_model.DescribeStrategyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeStrategyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.customType)) {
      query["CustomType"] = request.customType;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.strategyIds)) {
      query["StrategyIds"] = request.strategyIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeStrategy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeStrategyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeStrategyResponse({}));
  }

  /**
   * Queries the details about baseline check policies.
   * 
   * @param request - DescribeStrategyRequest
   * @returns DescribeStrategyResponse
   */
  async describeStrategy(request: $_model.DescribeStrategyRequest): Promise<$_model.DescribeStrategyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeStrategyWithOptions(request, runtime);
  }

  /**
   * Queries the information about a baseline check policy.
   * 
   * @param request - DescribeStrategyDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeStrategyDetailResponse
   */
  async describeStrategyDetailWithOptions(request: $_model.DescribeStrategyDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeStrategyDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeStrategyDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeStrategyDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeStrategyDetailResponse({}));
  }

  /**
   * Queries the information about a baseline check policy.
   * 
   * @param request - DescribeStrategyDetailRequest
   * @returns DescribeStrategyDetailResponse
   */
  async describeStrategyDetail(request: $_model.DescribeStrategyDetailRequest): Promise<$_model.DescribeStrategyDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeStrategyDetailWithOptions(request, runtime);
  }

  /**
   * Queries the results of the last baseline check by using a specified baseline check policy.
   * 
   * @param request - DescribeStrategyExecDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeStrategyExecDetailResponse
   */
  async describeStrategyExecDetailWithOptions(request: $_model.DescribeStrategyExecDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeStrategyExecDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeStrategyExecDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeStrategyExecDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeStrategyExecDetailResponse({}));
  }

  /**
   * Queries the results of the last baseline check by using a specified baseline check policy.
   * 
   * @param request - DescribeStrategyExecDetailRequest
   * @returns DescribeStrategyExecDetailResponse
   */
  async describeStrategyExecDetail(request: $_model.DescribeStrategyExecDetailRequest): Promise<$_model.DescribeStrategyExecDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeStrategyExecDetailWithOptions(request, runtime);
  }

  /**
   * Queries the information about the assets to which a baseline check policy is applied.
   * 
   * @param request - DescribeStrategyTargetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeStrategyTargetResponse
   */
  async describeStrategyTargetWithOptions(request: $_model.DescribeStrategyTargetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeStrategyTargetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeStrategyTarget",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeStrategyTargetResponse>(await this.callApi(params, req, runtime), new $_model.DescribeStrategyTargetResponse({}));
  }

  /**
   * Queries the information about the assets to which a baseline check policy is applied.
   * 
   * @param request - DescribeStrategyTargetRequest
   * @returns DescribeStrategyTargetResponse
   */
  async describeStrategyTarget(request: $_model.DescribeStrategyTargetRequest): Promise<$_model.DescribeStrategyTargetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeStrategyTargetWithOptions(request, runtime);
  }

  /**
   * Strict mode supports alarm queries
   * 
   * @param request - DescribeStrictEventNameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeStrictEventNameResponse
   */
  async describeStrictEventNameWithOptions(request: $_model.DescribeStrictEventNameRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeStrictEventNameResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeStrictEventName",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeStrictEventNameResponse>(await this.callApi(params, req, runtime), new $_model.DescribeStrictEventNameResponse({}));
  }

  /**
   * Strict mode supports alarm queries
   * 
   * @param request - DescribeStrictEventNameRequest
   * @returns DescribeStrictEventNameResponse
   */
  async describeStrictEventName(request: $_model.DescribeStrictEventNameRequest): Promise<$_model.DescribeStrictEventNameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeStrictEventNameWithOptions(request, runtime);
  }

  /**
   * Queries the security information about your assets. The information includes the security score and the numbers of protected and unprotected assets.
   * 
   * @param request - DescribeSummaryInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSummaryInfoResponse
   */
  async describeSummaryInfoWithOptions(request: $_model.DescribeSummaryInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSummaryInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSummaryInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSummaryInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSummaryInfoResponse({}));
  }

  /**
   * Queries the security information about your assets. The information includes the security score and the numbers of protected and unprotected assets.
   * 
   * @param request - DescribeSummaryInfoRequest
   * @returns DescribeSummaryInfoResponse
   */
  async describeSummaryInfo(request: $_model.DescribeSummaryInfoRequest): Promise<$_model.DescribeSummaryInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSummaryInfoWithOptions(request, runtime);
  }

  /**
   * Queries the time when a system vulnerability was last detected.
   * 
   * @param request - DescribeSupervisonInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSupervisonInfoResponse
   */
  async describeSupervisonInfoWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSupervisonInfoResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSupervisonInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSupervisonInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSupervisonInfoResponse({}));
  }

  /**
   * Queries the time when a system vulnerability was last detected.
   * @returns DescribeSupervisonInfoResponse
   */
  async describeSupervisonInfo(): Promise<$_model.DescribeSupervisonInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSupervisonInfoWithOptions(runtime);
  }

  /**
   * Queries the regions in which the anti-ransomware feature is supported.
   * 
   * @param request - DescribeSupportRegionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSupportRegionResponse
   */
  async describeSupportRegionWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSupportRegionResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSupportRegion",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSupportRegionResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSupportRegionResponse({}));
  }

  /**
   * Queries the regions in which the anti-ransomware feature is supported.
   * @returns DescribeSupportRegionResponse
   */
  async describeSupportRegion(): Promise<$_model.DescribeSupportRegionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSupportRegionWithOptions(runtime);
  }

  /**
   * Queries the details of an exception. An alert event consists of an alert and exceptions. Each alert event is associated with multiple exceptions.
   * 
   * @param request - DescribeSuspEventDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSuspEventDetailResponse
   */
  async describeSuspEventDetailWithOptions(request: $_model.DescribeSuspEventDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSuspEventDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.suspiciousEventId)) {
      query["SuspiciousEventId"] = request.suspiciousEventId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSuspEventDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSuspEventDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSuspEventDetailResponse({}));
  }

  /**
   * Queries the details of an exception. An alert event consists of an alert and exceptions. Each alert event is associated with multiple exceptions.
   * 
   * @param request - DescribeSuspEventDetailRequest
   * @returns DescribeSuspEventDetailResponse
   */
  async describeSuspEventDetail(request: $_model.DescribeSuspEventDetailRequest): Promise<$_model.DescribeSuspEventDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSuspEventDetailWithOptions(request, runtime);
  }

  /**
   * Queries the information about an export task of exceptions.
   * 
   * @param request - DescribeSuspEventExportInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSuspEventExportInfoResponse
   */
  async describeSuspEventExportInfoWithOptions(request: $_model.DescribeSuspEventExportInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSuspEventExportInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.exportId)) {
      query["ExportId"] = request.exportId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSuspEventExportInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSuspEventExportInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSuspEventExportInfoResponse({}));
  }

  /**
   * Queries the information about an export task of exceptions.
   * 
   * @param request - DescribeSuspEventExportInfoRequest
   * @returns DescribeSuspEventExportInfoResponse
   */
  async describeSuspEventExportInfo(request: $_model.DescribeSuspEventExportInfoRequest): Promise<$_model.DescribeSuspEventExportInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSuspEventExportInfoWithOptions(request, runtime);
  }

  /**
   * Queries quarantined files by page.
   * 
   * @param request - DescribeSuspEventQuaraFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSuspEventQuaraFilesResponse
   */
  async describeSuspEventQuaraFilesWithOptions(request: $_model.DescribeSuspEventQuaraFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSuspEventQuaraFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.groupingId)) {
      query["GroupingId"] = request.groupingId;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.quaraTag)) {
      query["QuaraTag"] = request.quaraTag;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSuspEventQuaraFiles",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSuspEventQuaraFilesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSuspEventQuaraFilesResponse({}));
  }

  /**
   * Queries quarantined files by page.
   * 
   * @param request - DescribeSuspEventQuaraFilesRequest
   * @returns DescribeSuspEventQuaraFilesResponse
   */
  async describeSuspEventQuaraFiles(request: $_model.DescribeSuspEventQuaraFilesRequest): Promise<$_model.DescribeSuspEventQuaraFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSuspEventQuaraFilesWithOptions(request, runtime);
  }

  /**
   * Queries the user settings for exceptions.
   * 
   * @param request - DescribeSuspEventUserSettingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSuspEventUserSettingResponse
   */
  async describeSuspEventUserSettingWithOptions(request: $_model.DescribeSuspEventUserSettingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSuspEventUserSettingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSuspEventUserSetting",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSuspEventUserSettingResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSuspEventUserSettingResponse({}));
  }

  /**
   * Queries the user settings for exceptions.
   * 
   * @param request - DescribeSuspEventUserSettingRequest
   * @returns DescribeSuspEventUserSettingResponse
   */
  async describeSuspEventUserSetting(request: $_model.DescribeSuspEventUserSettingRequest): Promise<$_model.DescribeSuspEventUserSettingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSuspEventUserSettingWithOptions(request, runtime);
  }

  /**
   * Queries a list of alert events that are generated without aggregation.
   * 
   * @param tmpReq - DescribeSuspEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSuspEventsResponse
   */
  async describeSuspEventsWithOptions(tmpReq: $_model.DescribeSuspEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSuspEventsResponse> {
    tmpReq.validate();
    let request = new $_model.DescribeSuspEventsShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.sourceAliUids)) {
      request.sourceAliUidsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceAliUids, "SourceAliUids", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.alarmUniqueInfo)) {
      query["AlarmUniqueInfo"] = request.alarmUniqueInfo;
    }

    if (!$dara.isNull(request.assetsTypeList)) {
      query["AssetsTypeList"] = request.assetsTypeList;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.containerFieldName)) {
      query["ContainerFieldName"] = request.containerFieldName;
    }

    if (!$dara.isNull(request.containerFieldValue)) {
      query["ContainerFieldValue"] = request.containerFieldValue;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.dealed)) {
      query["Dealed"] = request.dealed;
    }

    if (!$dara.isNull(request.eventNames)) {
      query["EventNames"] = request.eventNames;
    }

    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.levels)) {
      query["Levels"] = request.levels;
    }

    if (!$dara.isNull(request.multiAccountActionType)) {
      query["MultiAccountActionType"] = request.multiAccountActionType;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.operateErrorCodeList)) {
      query["OperateErrorCodeList"] = request.operateErrorCodeList;
    }

    if (!$dara.isNull(request.operateTimeEnd)) {
      query["OperateTimeEnd"] = request.operateTimeEnd;
    }

    if (!$dara.isNull(request.operateTimeStart)) {
      query["OperateTimeStart"] = request.operateTimeStart;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.parentEventTypes)) {
      query["ParentEventTypes"] = request.parentEventTypes;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.sortColumn)) {
      query["SortColumn"] = request.sortColumn;
    }

    if (!$dara.isNull(request.sortType)) {
      query["SortType"] = request.sortType;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.sourceAliUidsShrink)) {
      query["SourceAliUids"] = request.sourceAliUidsShrink;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.strictMode)) {
      query["StrictMode"] = request.strictMode;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.timeEnd)) {
      query["TimeEnd"] = request.timeEnd;
    }

    if (!$dara.isNull(request.timeStart)) {
      query["TimeStart"] = request.timeStart;
    }

    if (!$dara.isNull(request.uniqueInfo)) {
      query["UniqueInfo"] = request.uniqueInfo;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.tacticId)) {
      body["TacticId"] = request.tacticId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSuspEvents",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSuspEventsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSuspEventsResponse({}));
  }

  /**
   * Queries a list of alert events that are generated without aggregation.
   * 
   * @param request - DescribeSuspEventsRequest
   * @returns DescribeSuspEventsResponse
   */
  async describeSuspEvents(request: $_model.DescribeSuspEventsRequest): Promise<$_model.DescribeSuspEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSuspEventsWithOptions(request, runtime);
  }

  /**
   * Queries the configuration of a specified feature.
   * 
   * @param request - DescribeSuspiciousOverallConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSuspiciousOverallConfigResponse
   */
  async describeSuspiciousOverallConfigWithOptions(request: $_model.DescribeSuspiciousOverallConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSuspiciousOverallConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSuspiciousOverallConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSuspiciousOverallConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSuspiciousOverallConfigResponse({}));
  }

  /**
   * Queries the configuration of a specified feature.
   * 
   * @param request - DescribeSuspiciousOverallConfigRequest
   * @returns DescribeSuspiciousOverallConfigResponse
   */
  async describeSuspiciousOverallConfig(request: $_model.DescribeSuspiciousOverallConfigRequest): Promise<$_model.DescribeSuspiciousOverallConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSuspiciousOverallConfigWithOptions(request, runtime);
  }

  /**
   * Queries the UUIDs of servers on which proactive defense of a specified type takes effect.
   * 
   * @param request - DescribeSuspiciousUUIDConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSuspiciousUUIDConfigResponse
   */
  async describeSuspiciousUUIDConfigWithOptions(request: $_model.DescribeSuspiciousUUIDConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSuspiciousUUIDConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSuspiciousUUIDConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSuspiciousUUIDConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSuspiciousUUIDConfigResponse({}));
  }

  /**
   * Queries the UUIDs of servers on which proactive defense of a specified type takes effect.
   * 
   * @param request - DescribeSuspiciousUUIDConfigRequest
   * @returns DescribeSuspiciousUUIDConfigResponse
   */
  async describeSuspiciousUUIDConfig(request: $_model.DescribeSuspiciousUUIDConfigRequest): Promise<$_model.DescribeSuspiciousUUIDConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSuspiciousUUIDConfigWithOptions(request, runtime);
  }

  /**
   * Queries a list of IDC scan tasks.
   * 
   * @param request - DescribeSyncAssetTaskListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSyncAssetTaskListResponse
   */
  async describeSyncAssetTaskListWithOptions(request: $_model.DescribeSyncAssetTaskListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSyncAssetTaskListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSyncAssetTaskList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSyncAssetTaskListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSyncAssetTaskListResponse({}));
  }

  /**
   * Queries a list of IDC scan tasks.
   * 
   * @param request - DescribeSyncAssetTaskListRequest
   * @returns DescribeSyncAssetTaskListResponse
   */
  async describeSyncAssetTaskList(request: $_model.DescribeSyncAssetTaskListRequest): Promise<$_model.DescribeSyncAssetTaskListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSyncAssetTaskListWithOptions(request, runtime);
  }

  /**
   * Queries the details of an IDC scan task.
   * 
   * @param request - DescribeSyncAssetTaskLogDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSyncAssetTaskLogDetailResponse
   */
  async describeSyncAssetTaskLogDetailWithOptions(request: $_model.DescribeSyncAssetTaskLogDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSyncAssetTaskLogDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.rootTaskId)) {
      query["RootTaskId"] = request.rootTaskId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSyncAssetTaskLogDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSyncAssetTaskLogDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSyncAssetTaskLogDetailResponse({}));
  }

  /**
   * Queries the details of an IDC scan task.
   * 
   * @param request - DescribeSyncAssetTaskLogDetailRequest
   * @returns DescribeSyncAssetTaskLogDetailResponse
   */
  async describeSyncAssetTaskLogDetail(request: $_model.DescribeSyncAssetTaskLogDetailRequest): Promise<$_model.DescribeSyncAssetTaskLogDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSyncAssetTaskLogDetailWithOptions(request, runtime);
  }

  /**
   * Queries the servers on which vulnerability scan is enabled.
   * 
   * @param request - DescribeTargetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTargetResponse
   */
  async describeTargetWithOptions(request: $_model.DescribeTargetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeTargetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeTarget",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeTargetResponse>(await this.callApi(params, req, runtime), new $_model.DescribeTargetResponse({}));
  }

  /**
   * Queries the servers on which vulnerability scan is enabled.
   * 
   * @param request - DescribeTargetRequest
   * @returns DescribeTargetResponse
   */
  async describeTarget(request: $_model.DescribeTargetRequest): Promise<$_model.DescribeTargetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeTargetWithOptions(request, runtime);
  }

  /**
   * Queries the error logs on a task that failed to fix image vulnerabilities.
   * 
   * @param request - DescribeTaskErrorLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTaskErrorLogResponse
   */
  async describeTaskErrorLogWithOptions(request: $_model.DescribeTaskErrorLogRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeTaskErrorLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.buildTaskId)) {
      query["BuildTaskId"] = request.buildTaskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeTaskErrorLog",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeTaskErrorLogResponse>(await this.callApi(params, req, runtime), new $_model.DescribeTaskErrorLogResponse({}));
  }

  /**
   * Queries the error logs on a task that failed to fix image vulnerabilities.
   * 
   * @param request - DescribeTaskErrorLogRequest
   * @returns DescribeTaskErrorLogResponse
   */
  async describeTaskErrorLog(request: $_model.DescribeTaskErrorLogRequest): Promise<$_model.DescribeTaskErrorLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeTaskErrorLogWithOptions(request, runtime);
  }

  /**
   * Queries event statistics.
   * 
   * @param request - DescribeTotalStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTotalStatisticsResponse
   */
  async describeTotalStatisticsWithOptions(request: $_model.DescribeTotalStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeTotalStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeTotalStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeTotalStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeTotalStatisticsResponse({}));
  }

  /**
   * Queries event statistics.
   * 
   * @param request - DescribeTotalStatisticsRequest
   * @returns DescribeTotalStatisticsResponse
   */
  async describeTotalStatistics(request: $_model.DescribeTotalStatisticsRequest): Promise<$_model.DescribeTotalStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeTotalStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the trace information about alerts.
   * 
   * @param request - DescribeTraceInfoDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTraceInfoDetailResponse
   */
  async describeTraceInfoDetailWithOptions(request: $_model.DescribeTraceInfoDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeTraceInfoDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.incidentTime)) {
      query["IncidentTime"] = request.incidentTime;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    if (!$dara.isNull(request.vertexId)) {
      query["VertexId"] = request.vertexId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeTraceInfoDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeTraceInfoDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeTraceInfoDetailResponse({}));
  }

  /**
   * Queries the trace information about alerts.
   * 
   * @param request - DescribeTraceInfoDetailRequest
   * @returns DescribeTraceInfoDetailResponse
   */
  async describeTraceInfoDetail(request: $_model.DescribeTraceInfoDetailRequest): Promise<$_model.DescribeTraceInfoDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeTraceInfoDetailWithOptions(request, runtime);
  }

  /**
   * Queries the details about a trace node.
   * 
   * @param request - DescribeTraceInfoNodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTraceInfoNodeResponse
   */
  async describeTraceInfoNodeWithOptions(request: $_model.DescribeTraceInfoNodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeTraceInfoNodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eventName)) {
      query["EventName"] = request.eventName;
    }

    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.incidentTime)) {
      query["IncidentTime"] = request.incidentTime;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    if (!$dara.isNull(request.vertexId)) {
      query["VertexId"] = request.vertexId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeTraceInfoNode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeTraceInfoNodeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeTraceInfoNodeResponse({}));
  }

  /**
   * Queries the details about a trace node.
   * 
   * @param request - DescribeTraceInfoNodeRequest
   * @returns DescribeTraceInfoNodeResponse
   */
  async describeTraceInfoNode(request: $_model.DescribeTraceInfoNodeRequest): Promise<$_model.DescribeTraceInfoNodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeTraceInfoNodeWithOptions(request, runtime);
  }

  /**
   * Queries the information about databases for which anti-ransomware policies are created.
   * 
   * @param request - DescribeUniBackupDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUniBackupDatabaseResponse
   */
  async describeUniBackupDatabaseWithOptions(request: $_model.DescribeUniBackupDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUniBackupDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.databaseType)) {
      query["DatabaseType"] = request.databaseType;
    }

    if (!$dara.isNull(request.instanceName)) {
      query["InstanceName"] = request.instanceName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.queryType)) {
      query["QueryType"] = request.queryType;
    }

    if (!$dara.isNull(request.uniRegionId)) {
      query["UniRegionId"] = request.uniRegionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUniBackupDatabase",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUniBackupDatabaseResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUniBackupDatabaseResponse({}));
  }

  /**
   * Queries the information about databases for which anti-ransomware policies are created.
   * 
   * @param request - DescribeUniBackupDatabaseRequest
   * @returns DescribeUniBackupDatabaseResponse
   */
  async describeUniBackupDatabase(request: $_model.DescribeUniBackupDatabaseRequest): Promise<$_model.DescribeUniBackupDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUniBackupDatabaseWithOptions(request, runtime);
  }

  /**
   * Queries the anti-ransomware policies that are created for databases.
   * 
   * @param request - DescribeUniBackupPoliciesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUniBackupPoliciesResponse
   */
  async describeUniBackupPoliciesWithOptions(request: $_model.DescribeUniBackupPoliciesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUniBackupPoliciesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.policyName)) {
      query["PolicyName"] = request.policyName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUniBackupPolicies",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUniBackupPoliciesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUniBackupPoliciesResponse({}));
  }

  /**
   * Queries the anti-ransomware policies that are created for databases.
   * 
   * @param request - DescribeUniBackupPoliciesRequest
   * @returns DescribeUniBackupPoliciesResponse
   */
  async describeUniBackupPolicies(request: $_model.DescribeUniBackupPoliciesRequest): Promise<$_model.DescribeUniBackupPoliciesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUniBackupPoliciesWithOptions(request, runtime);
  }

  /**
   * Queries the details of an anti-ransomware policy for databases.
   * 
   * @param request - DescribeUniBackupPolicyDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUniBackupPolicyDetailResponse
   */
  async describeUniBackupPolicyDetailWithOptions(request: $_model.DescribeUniBackupPolicyDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUniBackupPolicyDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUniBackupPolicyDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUniBackupPolicyDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUniBackupPolicyDetailResponse({}));
  }

  /**
   * Queries the details of an anti-ransomware policy for databases.
   * 
   * @param request - DescribeUniBackupPolicyDetailRequest
   * @returns DescribeUniBackupPolicyDetailResponse
   */
  async describeUniBackupPolicyDetail(request: $_model.DescribeUniBackupPolicyDetailRequest): Promise<$_model.DescribeUniBackupPolicyDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUniBackupPolicyDetailWithOptions(request, runtime);
  }

  /**
   * Queries the statistics on backups based on anti-ransomware policies.
   * 
   * @param request - DescribeUniBackupStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUniBackupStatisticsResponse
   */
  async describeUniBackupStatisticsWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUniBackupStatisticsResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUniBackupStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUniBackupStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUniBackupStatisticsResponse({}));
  }

  /**
   * Queries the statistics on backups based on anti-ransomware policies.
   * @returns DescribeUniBackupStatisticsResponse
   */
  async describeUniBackupStatistics(): Promise<$_model.DescribeUniBackupStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUniBackupStatisticsWithOptions(runtime);
  }

  /**
   * Queries the backup snapshots from which the data of a database can be restored.
   * 
   * @param request - DescribeUniRecoverableListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUniRecoverableListResponse
   */
  async describeUniRecoverableListWithOptions(request: $_model.DescribeUniRecoverableListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUniRecoverableListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.database)) {
      query["Database"] = request.database;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUniRecoverableList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUniRecoverableListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUniRecoverableListResponse({}));
  }

  /**
   * Queries the backup snapshots from which the data of a database can be restored.
   * 
   * @param request - DescribeUniRecoverableListRequest
   * @returns DescribeUniRecoverableListResponse
   */
  async describeUniRecoverableList(request: $_model.DescribeUniRecoverableListRequest): Promise<$_model.DescribeUniRecoverableListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUniRecoverableListWithOptions(request, runtime);
  }

  /**
   * Queries the region that is supported by anti-ransomware for databases.
   * 
   * @param request - DescribeUniSupportRegionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUniSupportRegionResponse
   */
  async describeUniSupportRegionWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUniSupportRegionResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUniSupportRegion",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUniSupportRegionResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUniSupportRegionResponse({}));
  }

  /**
   * Queries the region that is supported by anti-ransomware for databases.
   * @returns DescribeUniSupportRegionResponse
   */
  async describeUniSupportRegion(): Promise<$_model.DescribeUniSupportRegionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUniSupportRegionWithOptions(runtime);
  }

  /**
   * Queries the information about the servers to which an anti-ransomware policy is applied.
   * 
   * @param request - DescribeUserBackupMachinesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUserBackupMachinesResponse
   */
  async describeUserBackupMachinesWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUserBackupMachinesResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUserBackupMachines",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUserBackupMachinesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUserBackupMachinesResponse({}));
  }

  /**
   * Queries the information about the servers to which an anti-ransomware policy is applied.
   * @returns DescribeUserBackupMachinesResponse
   */
  async describeUserBackupMachines(): Promise<$_model.DescribeUserBackupMachinesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUserBackupMachinesWithOptions(runtime);
  }

  /**
   * The source IP address of the request.
   * 
   * @param request - DescribeUserBaselineAuthorizationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUserBaselineAuthorizationResponse
   */
  async describeUserBaselineAuthorizationWithOptions(request: $_model.DescribeUserBaselineAuthorizationRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUserBaselineAuthorizationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUserBaselineAuthorization",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUserBaselineAuthorizationResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUserBaselineAuthorizationResponse({}));
  }

  /**
   * The source IP address of the request.
   * 
   * @param request - DescribeUserBaselineAuthorizationRequest
   * @returns DescribeUserBaselineAuthorizationResponse
   */
  async describeUserBaselineAuthorization(request: $_model.DescribeUserBaselineAuthorizationRequest): Promise<$_model.DescribeUserBaselineAuthorizationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUserBaselineAuthorizationWithOptions(request, runtime);
  }

  /**
   * Queries the settings of a custom baseline check policy.
   * 
   * @param request - DescribeUserSettingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUserSettingResponse
   */
  async describeUserSettingWithOptions(request: $_model.DescribeUserSettingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUserSettingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUserSetting",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUserSettingResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUserSettingResponse({}));
  }

  /**
   * Queries the settings of a custom baseline check policy.
   * 
   * @param request - DescribeUserSettingRequest
   * @returns DescribeUserSettingResponse
   */
  async describeUserSetting(request: $_model.DescribeUserSettingRequest): Promise<$_model.DescribeUserSettingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUserSettingWithOptions(request, runtime);
  }

  /**
   * Queries a list of assets that support fixing based on vulnerability names.
   * 
   * @param request - DescribeUuidsByVulNamesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUuidsByVulNamesResponse
   */
  async describeUuidsByVulNamesWithOptions(request: $_model.DescribeUuidsByVulNamesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUuidsByVulNamesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dealed)) {
      query["Dealed"] = request.dealed;
    }

    if (!$dara.isNull(request.fieldName)) {
      query["FieldName"] = request.fieldName;
    }

    if (!$dara.isNull(request.fieldValue)) {
      query["FieldValue"] = request.fieldValue;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.level)) {
      query["Level"] = request.level;
    }

    if (!$dara.isNull(request.necessity)) {
      query["Necessity"] = request.necessity;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.searchTags)) {
      query["SearchTags"] = request.searchTags;
    }

    if (!$dara.isNull(request.statusList)) {
      query["StatusList"] = request.statusList;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.vpcInstanceIds)) {
      query["VpcInstanceIds"] = request.vpcInstanceIds;
    }

    if (!$dara.isNull(request.vulNames)) {
      query["VulNames"] = request.vulNames;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUuidsByVulNames",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUuidsByVulNamesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUuidsByVulNamesResponse({}));
  }

  /**
   * Queries a list of assets that support fixing based on vulnerability names.
   * 
   * @param request - DescribeUuidsByVulNamesRequest
   * @returns DescribeUuidsByVulNamesResponse
   */
  async describeUuidsByVulNames(request: $_model.DescribeUuidsByVulNamesRequest): Promise<$_model.DescribeUuidsByVulNamesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUuidsByVulNamesWithOptions(request, runtime);
  }

  /**
   * Queries the service providers whose assets can be added to Security Center.
   * 
   * @param request - DescribeVendorListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVendorListResponse
   */
  async describeVendorListWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVendorListResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVendorList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVendorListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVendorListResponse({}));
  }

  /**
   * Queries the service providers whose assets can be added to Security Center.
   * @returns DescribeVendorListResponse
   */
  async describeVendorList(): Promise<$_model.DescribeVendorListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVendorListWithOptions(runtime);
  }

  /**
   * Queries the details about the edition of purchased Security Center.
   * 
   * @param request - DescribeVersionConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVersionConfigResponse
   */
  async describeVersionConfigWithOptions(request: $_model.DescribeVersionConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVersionConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVersionConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVersionConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVersionConfigResponse({}));
  }

  /**
   * Queries the details about the edition of purchased Security Center.
   * 
   * @param request - DescribeVersionConfigRequest
   * @returns DescribeVersionConfigResponse
   */
  async describeVersionConfig(request: $_model.DescribeVersionConfigRequest): Promise<$_model.DescribeVersionConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVersionConfigWithOptions(request, runtime);
  }

  /**
   * Queries the QR code address of a DingTalk group.
   * 
   * @param request - DescribeVolDingdingMessageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVolDingdingMessageResponse
   */
  async describeVolDingdingMessageWithOptions(request: $_model.DescribeVolDingdingMessageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVolDingdingMessageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVolDingdingMessage",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVolDingdingMessageResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVolDingdingMessageResponse({}));
  }

  /**
   * Queries the QR code address of a DingTalk group.
   * 
   * @param request - DescribeVolDingdingMessageRequest
   * @returns DescribeVolDingdingMessageResponse
   */
  async describeVolDingdingMessage(request: $_model.DescribeVolDingdingMessageRequest): Promise<$_model.DescribeVolDingdingMessageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVolDingdingMessageWithOptions(request, runtime);
  }

  /**
   * Queries the search conditions that can be used to query honeypots.
   * 
   * @param request - DescribeVpcHoneyPotCriteriaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVpcHoneyPotCriteriaResponse
   */
  async describeVpcHoneyPotCriteriaWithOptions(request: $_model.DescribeVpcHoneyPotCriteriaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVpcHoneyPotCriteriaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVpcHoneyPotCriteria",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVpcHoneyPotCriteriaResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVpcHoneyPotCriteriaResponse({}));
  }

  /**
   * Queries the search conditions that can be used to query honeypots.
   * 
   * @param request - DescribeVpcHoneyPotCriteriaRequest
   * @returns DescribeVpcHoneyPotCriteriaResponse
   */
  async describeVpcHoneyPotCriteria(request: $_model.DescribeVpcHoneyPotCriteriaRequest): Promise<$_model.DescribeVpcHoneyPotCriteriaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVpcHoneyPotCriteriaWithOptions(request, runtime);
  }

  /**
   * Queries virtual private clouds (VPCs) on which honeypots are deployed.
   * 
   * @remarks
   * If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.
   * 
   * @param request - DescribeVpcHoneyPotListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVpcHoneyPotListResponse
   */
  async describeVpcHoneyPotListWithOptions(request: $_model.DescribeVpcHoneyPotListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVpcHoneyPotListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.honeyPotExistence)) {
      query["HoneyPotExistence"] = request.honeyPotExistence;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    if (!$dara.isNull(request.vpcName)) {
      query["VpcName"] = request.vpcName;
    }

    if (!$dara.isNull(request.vpcRegionId)) {
      query["VpcRegionId"] = request.vpcRegionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVpcHoneyPotList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVpcHoneyPotListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVpcHoneyPotListResponse({}));
  }

  /**
   * Queries virtual private clouds (VPCs) on which honeypots are deployed.
   * 
   * @remarks
   * If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.
   * 
   * @param request - DescribeVpcHoneyPotListRequest
   * @returns DescribeVpcHoneyPotListResponse
   */
  async describeVpcHoneyPotList(request: $_model.DescribeVpcHoneyPotListRequest): Promise<$_model.DescribeVpcHoneyPotListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVpcHoneyPotListWithOptions(request, runtime);
  }

  /**
   * Queries the information about virtual private clouds (VPCs).
   * 
   * @param request - DescribeVpcListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVpcListResponse
   */
  async describeVpcListWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVpcListResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVpcList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVpcListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVpcListResponse({}));
  }

  /**
   * Queries the information about virtual private clouds (VPCs).
   * @returns DescribeVpcListResponse
   */
  async describeVpcList(): Promise<$_model.DescribeVpcListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVpcListWithOptions(runtime);
  }

  /**
   * Queries the status information about vulnerability scan tasks on a server.
   * 
   * @param request - DescribeVulCheckTaskStatusDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVulCheckTaskStatusDetailResponse
   */
  async describeVulCheckTaskStatusDetailWithOptions(request: $_model.DescribeVulCheckTaskStatusDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVulCheckTaskStatusDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.taskIds)) {
      query["TaskIds"] = request.taskIds;
    }

    if (!$dara.isNull(request.types)) {
      query["Types"] = request.types;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVulCheckTaskStatusDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVulCheckTaskStatusDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVulCheckTaskStatusDetailResponse({}));
  }

  /**
   * Queries the status information about vulnerability scan tasks on a server.
   * 
   * @param request - DescribeVulCheckTaskStatusDetailRequest
   * @returns DescribeVulCheckTaskStatusDetailResponse
   */
  async describeVulCheckTaskStatusDetail(request: $_model.DescribeVulCheckTaskStatusDetailRequest): Promise<$_model.DescribeVulCheckTaskStatusDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVulCheckTaskStatusDetailWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of vulnerability management.
   * 
   * @param request - DescribeVulConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVulConfigResponse
   */
  async describeVulConfigWithOptions(request: $_model.DescribeVulConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVulConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVulConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVulConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVulConfigResponse({}));
  }

  /**
   * Queries the configurations of vulnerability management.
   * 
   * @param request - DescribeVulConfigRequest
   * @returns DescribeVulConfigResponse
   */
  async describeVulConfig(request: $_model.DescribeVulConfigRequest): Promise<$_model.DescribeVulConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVulConfigWithOptions(request, runtime);
  }

  /**
   * Queries the vulnerability defense statistics in Security Center.
   * 
   * @param request - DescribeVulDefendCountStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVulDefendCountStatisticsResponse
   */
  async describeVulDefendCountStatisticsWithOptions(request: $_model.DescribeVulDefendCountStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVulDefendCountStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.vulType)) {
      query["VulType"] = request.vulType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVulDefendCountStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVulDefendCountStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVulDefendCountStatisticsResponse({}));
  }

  /**
   * Queries the vulnerability defense statistics in Security Center.
   * 
   * @param request - DescribeVulDefendCountStatisticsRequest
   * @returns DescribeVulDefendCountStatisticsResponse
   */
  async describeVulDefendCountStatistics(request: $_model.DescribeVulDefendCountStatisticsRequest): Promise<$_model.DescribeVulDefendCountStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVulDefendCountStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the details about a vulnerability.
   * 
   * @param request - DescribeVulDetailsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVulDetailsResponse
   */
  async describeVulDetailsWithOptions(request: $_model.DescribeVulDetailsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVulDetailsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliasName)) {
      query["AliasName"] = request.aliasName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVulDetails",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVulDetailsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVulDetailsResponse({}));
  }

  /**
   * Queries the details about a vulnerability.
   * 
   * @param request - DescribeVulDetailsRequest
   * @returns DescribeVulDetailsResponse
   */
  async describeVulDetails(request: $_model.DescribeVulDetailsRequest): Promise<$_model.DescribeVulDetailsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVulDetailsWithOptions(request, runtime);
  }

  /**
   * Queries the progress of a task that exports vulnerabilities.
   * 
   * @remarks
   * If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.
   * 
   * @param request - DescribeVulExportInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVulExportInfoResponse
   */
  async describeVulExportInfoWithOptions(request: $_model.DescribeVulExportInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVulExportInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.exportId)) {
      query["ExportId"] = request.exportId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVulExportInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVulExportInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVulExportInfoResponse({}));
  }

  /**
   * Queries the progress of a task that exports vulnerabilities.
   * 
   * @remarks
   * If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.
   * 
   * @param request - DescribeVulExportInfoRequest
   * @returns DescribeVulExportInfoResponse
   */
  async describeVulExportInfo(request: $_model.DescribeVulExportInfoRequest): Promise<$_model.DescribeVulExportInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVulExportInfoWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of vulnerability fixes.
   * 
   * @param request - DescribeVulFixStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVulFixStatisticsResponse
   */
  async describeVulFixStatisticsWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVulFixStatisticsResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVulFixStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVulFixStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVulFixStatisticsResponse({}));
  }

  /**
   * Queries the statistics of vulnerability fixes.
   * @returns DescribeVulFixStatisticsResponse
   */
  async describeVulFixStatistics(): Promise<$_model.DescribeVulFixStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVulFixStatisticsWithOptions(runtime);
  }

  /**
   * Queries vulnerabilities by type.
   * 
   * @param request - DescribeVulListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVulListResponse
   */
  async describeVulListWithOptions(request: $_model.DescribeVulListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVulListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliasName)) {
      query["AliasName"] = request.aliasName;
    }

    if (!$dara.isNull(request.attachTypes)) {
      query["AttachTypes"] = request.attachTypes;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.dealed)) {
      query["Dealed"] = request.dealed;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.ids)) {
      query["Ids"] = request.ids;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.necessity)) {
      query["Necessity"] = request.necessity;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.raspDefend)) {
      query["RaspDefend"] = request.raspDefend;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.statusList)) {
      query["StatusList"] = request.statusList;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.useNextToken)) {
      query["UseNextToken"] = request.useNextToken;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    if (!$dara.isNull(request.vpcInstanceIds)) {
      query["VpcInstanceIds"] = request.vpcInstanceIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVulList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVulListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVulListResponse({}));
  }

  /**
   * Queries vulnerabilities by type.
   * 
   * @param request - DescribeVulListRequest
   * @returns DescribeVulListResponse
   */
  async describeVulList(request: $_model.DescribeVulListRequest): Promise<$_model.DescribeVulListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVulListWithOptions(request, runtime);
  }

  /**
   * Queries the vulnerabilities that can be detected.
   * 
   * @param request - DescribeVulListPageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVulListPageResponse
   */
  async describeVulListPageWithOptions(request: $_model.DescribeVulListPageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVulListPageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.cveId)) {
      query["CveId"] = request.cveId;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.raspDefend)) {
      query["RaspDefend"] = request.raspDefend;
    }

    if (!$dara.isNull(request.vulNameLike)) {
      query["VulNameLike"] = request.vulNameLike;
    }

    if (!$dara.isNull(request.vulType)) {
      query["VulType"] = request.vulType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVulListPage",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVulListPageResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVulListPageResponse({}));
  }

  /**
   * Queries the vulnerabilities that can be detected.
   * 
   * @param request - DescribeVulListPageRequest
   * @returns DescribeVulListPageResponse
   */
  async describeVulListPage(request: $_model.DescribeVulListPageRequest): Promise<$_model.DescribeVulListPageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVulListPageWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of vulnerabilities in Security Center.
   * 
   * @param request - DescribeVulMetaCountStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVulMetaCountStatisticsResponse
   */
  async describeVulMetaCountStatisticsWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVulMetaCountStatisticsResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVulMetaCountStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVulMetaCountStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVulMetaCountStatisticsResponse({}));
  }

  /**
   * Queries the statistics of vulnerabilities in Security Center.
   * @returns DescribeVulMetaCountStatisticsResponse
   */
  async describeVulMetaCountStatistics(): Promise<$_model.DescribeVulMetaCountStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVulMetaCountStatisticsWithOptions(runtime);
  }

  /**
   * Queries the statistics of vulnerabilities.
   * 
   * @param request - DescribeVulNumStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVulNumStatisticsResponse
   */
  async describeVulNumStatisticsWithOptions(request: $_model.DescribeVulNumStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVulNumStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVulNumStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVulNumStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVulNumStatisticsResponse({}));
  }

  /**
   * Queries the statistics of vulnerabilities.
   * 
   * @param request - DescribeVulNumStatisticsRequest
   * @returns DescribeVulNumStatisticsResponse
   */
  async describeVulNumStatistics(request: $_model.DescribeVulNumStatisticsRequest): Promise<$_model.DescribeVulNumStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVulNumStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of the vulnerability scan feature for a server.
   * 
   * @param request - DescribeVulTargetConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVulTargetConfigResponse
   */
  async describeVulTargetConfigWithOptions(request: $_model.DescribeVulTargetConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVulTargetConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVulTargetConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVulTargetConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVulTargetConfigResponse({}));
  }

  /**
   * Queries the configurations of the vulnerability scan feature for a server.
   * 
   * @param request - DescribeVulTargetConfigRequest
   * @returns DescribeVulTargetConfigResponse
   */
  async describeVulTargetConfig(request: $_model.DescribeVulTargetConfigRequest): Promise<$_model.DescribeVulTargetConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVulTargetConfigWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of the vulnerability scan feature.
   * 
   * @param request - DescribeVulTargetStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVulTargetStatisticsResponse
   */
  async describeVulTargetStatisticsWithOptions(request: $_model.DescribeVulTargetStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVulTargetStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVulTargetStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVulTargetStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVulTargetStatisticsResponse({}));
  }

  /**
   * Queries the configurations of the vulnerability scan feature.
   * 
   * @param request - DescribeVulTargetStatisticsRequest
   * @returns DescribeVulTargetStatisticsResponse
   */
  async describeVulTargetStatistics(request: $_model.DescribeVulTargetStatisticsRequest): Promise<$_model.DescribeVulTargetStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVulTargetStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the whitelist of vulnerabilities by page.
   * 
   * @param request - DescribeVulWhitelistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVulWhitelistResponse
   */
  async describeVulWhitelistWithOptions(request: $_model.DescribeVulWhitelistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVulWhitelistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVulWhitelist",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVulWhitelistResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVulWhitelistResponse({}));
  }

  /**
   * Queries the whitelist of vulnerabilities by page.
   * 
   * @param request - DescribeVulWhitelistRequest
   * @returns DescribeVulWhitelistResponse
   */
  async describeVulWhitelist(request: $_model.DescribeVulWhitelistRequest): Promise<$_model.DescribeVulWhitelistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVulWhitelistWithOptions(request, runtime);
  }

  /**
   * Queries the progress of a export task for a baseline check result.
   * 
   * @param request - DescribeWarningExportInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWarningExportInfoResponse
   */
  async describeWarningExportInfoWithOptions(request: $_model.DescribeWarningExportInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWarningExportInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.exportId)) {
      query["ExportId"] = request.exportId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWarningExportInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWarningExportInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWarningExportInfoResponse({}));
  }

  /**
   * Queries the progress of a export task for a baseline check result.
   * 
   * @param request - DescribeWarningExportInfoRequest
   * @returns DescribeWarningExportInfoResponse
   */
  async describeWarningExportInfo(request: $_model.DescribeWarningExportInfoRequest): Promise<$_model.DescribeWarningExportInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWarningExportInfoWithOptions(request, runtime);
  }

  /**
   * Queries information about servers on which a baseline check is performed. The information includes the IDs of the servers, the statistics of a risk item, and the status of the risk item.
   * 
   * @param request - DescribeWarningMachinesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWarningMachinesResponse
   */
  async describeWarningMachinesWithOptions(request: $_model.DescribeWarningMachinesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWarningMachinesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.containerFieldName)) {
      query["ContainerFieldName"] = request.containerFieldName;
    }

    if (!$dara.isNull(request.containerFieldValue)) {
      query["ContainerFieldValue"] = request.containerFieldValue;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.haveRisk)) {
      query["HaveRisk"] = request.haveRisk;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.machineName)) {
      query["MachineName"] = request.machineName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.riskId)) {
      query["RiskId"] = request.riskId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWarningMachines",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWarningMachinesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWarningMachinesResponse({}));
  }

  /**
   * Queries information about servers on which a baseline check is performed. The information includes the IDs of the servers, the statistics of a risk item, and the status of the risk item.
   * 
   * @param request - DescribeWarningMachinesRequest
   * @returns DescribeWarningMachinesResponse
   */
  async describeWarningMachines(request: $_model.DescribeWarningMachinesRequest): Promise<$_model.DescribeWarningMachinesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWarningMachinesWithOptions(request, runtime);
  }

  /**
   * Queries the information about the servers that have web tamper proofing enabled.
   * 
   * @param request - DescribeWebLockBindListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWebLockBindListResponse
   */
  async describeWebLockBindListWithOptions(request: $_model.DescribeWebLockBindListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWebLockBindListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWebLockBindList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWebLockBindListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWebLockBindListResponse({}));
  }

  /**
   * Queries the information about the servers that have web tamper proofing enabled.
   * 
   * @param request - DescribeWebLockBindListRequest
   * @returns DescribeWebLockBindListResponse
   */
  async describeWebLockBindList(request: $_model.DescribeWebLockBindListRequest): Promise<$_model.DescribeWebLockBindListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWebLockBindListWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of web tamper proofing for a specified server.
   * 
   * @param request - DescribeWebLockConfigListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWebLockConfigListResponse
   */
  async describeWebLockConfigListWithOptions(request: $_model.DescribeWebLockConfigListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWebLockConfigListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWebLockConfigList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWebLockConfigListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWebLockConfigListResponse({}));
  }

  /**
   * Queries the configurations of web tamper proofing for a specified server.
   * 
   * @param request - DescribeWebLockConfigListRequest
   * @returns DescribeWebLockConfigListResponse
   */
  async describeWebLockConfigList(request: $_model.DescribeWebLockConfigListRequest): Promise<$_model.DescribeWebLockConfigListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWebLockConfigListWithOptions(request, runtime);
  }

  /**
   * Queries the types of files that are excluded from web tamper proofing.
   * 
   * @param request - DescribeWebLockExclusiveFileTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWebLockExclusiveFileTypeResponse
   */
  async describeWebLockExclusiveFileTypeWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWebLockExclusiveFileTypeResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWebLockExclusiveFileType",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWebLockExclusiveFileTypeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWebLockExclusiveFileTypeResponse({}));
  }

  /**
   * Queries the types of files that are excluded from web tamper proofing.
   * @returns DescribeWebLockExclusiveFileTypeResponse
   */
  async describeWebLockExclusiveFileType(): Promise<$_model.DescribeWebLockExclusiveFileTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWebLockExclusiveFileTypeWithOptions(runtime);
  }

  /**
   * Queries the statistics on changes to the files that are protected by web tamper proofing.
   * 
   * @param request - DescribeWebLockFileChangeStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWebLockFileChangeStatisticsResponse
   */
  async describeWebLockFileChangeStatisticsWithOptions(request: $_model.DescribeWebLockFileChangeStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWebLockFileChangeStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWebLockFileChangeStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWebLockFileChangeStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWebLockFileChangeStatisticsResponse({}));
  }

  /**
   * Queries the statistics on changes to the files that are protected by web tamper proofing.
   * 
   * @param request - DescribeWebLockFileChangeStatisticsRequest
   * @returns DescribeWebLockFileChangeStatisticsResponse
   */
  async describeWebLockFileChangeStatistics(request: $_model.DescribeWebLockFileChangeStatisticsRequest): Promise<$_model.DescribeWebLockFileChangeStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWebLockFileChangeStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries events on web tamper proofing.
   * 
   * @param request - DescribeWebLockFileEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWebLockFileEventsResponse
   */
  async describeWebLockFileEventsWithOptions(request: $_model.DescribeWebLockFileEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWebLockFileEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.dealed)) {
      query["Dealed"] = request.dealed;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.processName)) {
      query["ProcessName"] = request.processName;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.tsBegin)) {
      query["TsBegin"] = request.tsBegin;
    }

    if (!$dara.isNull(request.tsEnd)) {
      query["TsEnd"] = request.tsEnd;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWebLockFileEvents",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWebLockFileEventsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWebLockFileEventsResponse({}));
  }

  /**
   * Queries events on web tamper proofing.
   * 
   * @param request - DescribeWebLockFileEventsRequest
   * @returns DescribeWebLockFileEventsResponse
   */
  async describeWebLockFileEvents(request: $_model.DescribeWebLockFileEventsRequest): Promise<$_model.DescribeWebLockFileEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWebLockFileEventsWithOptions(request, runtime);
  }

  /**
   * The number of attempts.
   * 
   * @param request - DescribeWebLockFileTypeSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWebLockFileTypeSummaryResponse
   */
  async describeWebLockFileTypeSummaryWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWebLockFileTypeSummaryResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWebLockFileTypeSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWebLockFileTypeSummaryResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWebLockFileTypeSummaryResponse({}));
  }

  /**
   * The number of attempts.
   * @returns DescribeWebLockFileTypeSummaryResponse
   */
  async describeWebLockFileTypeSummary(): Promise<$_model.DescribeWebLockFileTypeSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWebLockFileTypeSummaryWithOptions(runtime);
  }

  /**
   * Queries the types of files that can be protected by web tamper proofing.
   * 
   * @param request - DescribeWebLockInclusiveFileTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWebLockInclusiveFileTypeResponse
   */
  async describeWebLockInclusiveFileTypeWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWebLockInclusiveFileTypeResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWebLockInclusiveFileType",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWebLockInclusiveFileTypeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWebLockInclusiveFileTypeResponse({}));
  }

  /**
   * Queries the types of files that can be protected by web tamper proofing.
   * @returns DescribeWebLockInclusiveFileTypeResponse
   */
  async describeWebLockInclusiveFileType(): Promise<$_model.DescribeWebLockInclusiveFileTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWebLockInclusiveFileTypeWithOptions(runtime);
  }

  /**
   * Queries the statistics on processes for web tamper proofing.
   * 
   * @param request - DescribeWebLockProcessBlockStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWebLockProcessBlockStatisticsResponse
   */
  async describeWebLockProcessBlockStatisticsWithOptions(request: $_model.DescribeWebLockProcessBlockStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWebLockProcessBlockStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWebLockProcessBlockStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWebLockProcessBlockStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWebLockProcessBlockStatisticsResponse({}));
  }

  /**
   * Queries the statistics on processes for web tamper proofing.
   * 
   * @param request - DescribeWebLockProcessBlockStatisticsRequest
   * @returns DescribeWebLockProcessBlockStatisticsResponse
   */
  async describeWebLockProcessBlockStatistics(request: $_model.DescribeWebLockProcessBlockStatisticsRequest): Promise<$_model.DescribeWebLockProcessBlockStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWebLockProcessBlockStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the processes for web tamper proofing.
   * 
   * @param request - DescribeWebLockProcessListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWebLockProcessListResponse
   */
  async describeWebLockProcessListWithOptions(request: $_model.DescribeWebLockProcessListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWebLockProcessListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.processName)) {
      query["ProcessName"] = request.processName;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWebLockProcessList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWebLockProcessListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWebLockProcessListResponse({}));
  }

  /**
   * Queries the processes for web tamper proofing.
   * 
   * @param request - DescribeWebLockProcessListRequest
   * @returns DescribeWebLockProcessListResponse
   */
  async describeWebLockProcessList(request: $_model.DescribeWebLockProcessListRequest): Promise<$_model.DescribeWebLockProcessListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWebLockProcessListWithOptions(request, runtime);
  }

  /**
   * Queries the status of web tamper proofing.
   * 
   * @param request - DescribeWebLockStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWebLockStatusResponse
   */
  async describeWebLockStatusWithOptions(request: $_model.DescribeWebLockStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWebLockStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWebLockStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWebLockStatusResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWebLockStatusResponse({}));
  }

  /**
   * Queries the status of web tamper proofing.
   * 
   * @param request - DescribeWebLockStatusRequest
   * @returns DescribeWebLockStatusResponse
   */
  async describeWebLockStatus(request: $_model.DescribeWebLockStatusRequest): Promise<$_model.DescribeWebLockStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWebLockStatusWithOptions(request, runtime);
  }

  /**
   * Queries the number of times that the files protected by web tamper proofing are changed.
   * 
   * @param request - DescribeWebLockTotalFileChangeCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWebLockTotalFileChangeCountResponse
   */
  async describeWebLockTotalFileChangeCountWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWebLockTotalFileChangeCountResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWebLockTotalFileChangeCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWebLockTotalFileChangeCountResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWebLockTotalFileChangeCountResponse({}));
  }

  /**
   * Queries the number of times that the files protected by web tamper proofing are changed.
   * @returns DescribeWebLockTotalFileChangeCountResponse
   */
  async describeWebLockTotalFileChangeCount(): Promise<$_model.DescribeWebLockTotalFileChangeCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWebLockTotalFileChangeCountWithOptions(runtime);
  }

  /**
   * Queries the custom web directories that are scanned based on the alerting feature.
   * 
   * @param request - DescribeWebPathRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWebPathResponse
   */
  async describeWebPathWithOptions(request: $_model.DescribeWebPathRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWebPathResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWebPath",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWebPathResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWebPathResponse({}));
  }

  /**
   * Queries the custom web directories that are scanned based on the alerting feature.
   * 
   * @param request - DescribeWebPathRequest
   * @returns DescribeWebPathResponse
   */
  async describeWebPath(request: $_model.DescribeWebPathRequest): Promise<$_model.DescribeWebPathResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWebPathWithOptions(request, runtime);
  }

  /**
   * Queries the information about servers that can be added or are added to application whitelist policies.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - DescribeWhiteListAssetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWhiteListAssetResponse
   */
  async describeWhiteListAssetWithOptions(request: $_model.DescribeWhiteListAssetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWhiteListAssetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.lastMaxId)) {
      query["LastMaxId"] = request.lastMaxId;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWhiteListAsset",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWhiteListAssetResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWhiteListAssetResponse({}));
  }

  /**
   * Queries the information about servers that can be added or are added to application whitelist policies.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - DescribeWhiteListAssetRequest
   * @returns DescribeWhiteListAssetResponse
   */
  async describeWhiteListAsset(request: $_model.DescribeWhiteListAssetRequest): Promise<$_model.DescribeWhiteListAssetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWhiteListAssetWithOptions(request, runtime);
  }

  /**
   * Queries the available quota for the application whitelist feature.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - DescribeWhiteListAuthorizeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWhiteListAuthorizeResponse
   */
  async describeWhiteListAuthorizeWithOptions(request: $_model.DescribeWhiteListAuthorizeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWhiteListAuthorizeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWhiteListAuthorize",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWhiteListAuthorizeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWhiteListAuthorizeResponse({}));
  }

  /**
   * Queries the available quota for the application whitelist feature.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - DescribeWhiteListAuthorizeRequest
   * @returns DescribeWhiteListAuthorizeResponse
   */
  async describeWhiteListAuthorize(request: $_model.DescribeWhiteListAuthorizeRequest): Promise<$_model.DescribeWhiteListAuthorizeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWhiteListAuthorizeWithOptions(request, runtime);
  }

  /**
   * Queries the servers on which an application whitelist policy takes effect.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
   * 
   * @param request - DescribeWhiteListEffectiveAssetsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWhiteListEffectiveAssetsResponse
   */
  async describeWhiteListEffectiveAssetsWithOptions(request: $_model.DescribeWhiteListEffectiveAssetsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWhiteListEffectiveAssetsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.needStatistics)) {
      query["NeedStatistics"] = request.needStatistics;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWhiteListEffectiveAssets",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWhiteListEffectiveAssetsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWhiteListEffectiveAssetsResponse({}));
  }

  /**
   * Queries the servers on which an application whitelist policy takes effect.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
   * 
   * @param request - DescribeWhiteListEffectiveAssetsRequest
   * @returns DescribeWhiteListEffectiveAssetsResponse
   */
  async describeWhiteListEffectiveAssets(request: $_model.DescribeWhiteListEffectiveAssetsRequest): Promise<$_model.DescribeWhiteListEffectiveAssetsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWhiteListEffectiveAssetsWithOptions(request, runtime);
  }

  /**
   * Queries the information about the processes that are detected in an application whitelist policy.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - DescribeWhiteListProcessRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWhiteListProcessResponse
   */
  async describeWhiteListProcessWithOptions(request: $_model.DescribeWhiteListProcessRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWhiteListProcessResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.desc)) {
      query["Desc"] = request.desc;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.orderBy)) {
      query["OrderBy"] = request.orderBy;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.processName)) {
      query["ProcessName"] = request.processName;
    }

    if (!$dara.isNull(request.processType)) {
      query["ProcessType"] = request.processType;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWhiteListProcess",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWhiteListProcessResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWhiteListProcessResponse({}));
  }

  /**
   * Queries the information about the processes that are detected in an application whitelist policy.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - DescribeWhiteListProcessRequest
   * @returns DescribeWhiteListProcessResponse
   */
  async describeWhiteListProcess(request: $_model.DescribeWhiteListProcessRequest): Promise<$_model.DescribeWhiteListProcessResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWhiteListProcessWithOptions(request, runtime);
  }

  /**
   * Queries a list of application whitelist policies.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - DescribeWhiteListStrategyListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWhiteListStrategyListResponse
   */
  async describeWhiteListStrategyListWithOptions(request: $_model.DescribeWhiteListStrategyListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWhiteListStrategyListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.strategyIds)) {
      query["StrategyIds"] = request.strategyIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWhiteListStrategyList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWhiteListStrategyListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWhiteListStrategyListResponse({}));
  }

  /**
   * Queries a list of application whitelist policies.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - DescribeWhiteListStrategyListRequest
   * @returns DescribeWhiteListStrategyListResponse
   */
  async describeWhiteListStrategyList(request: $_model.DescribeWhiteListStrategyListRequest): Promise<$_model.DescribeWhiteListStrategyListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWhiteListStrategyListWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of application whitelist policies.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - DescribeWhiteListStrategyStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWhiteListStrategyStatisticsResponse
   */
  async describeWhiteListStrategyStatisticsWithOptions(request: $_model.DescribeWhiteListStrategyStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWhiteListStrategyStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.strategyIds)) {
      query["StrategyIds"] = request.strategyIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWhiteListStrategyStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWhiteListStrategyStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWhiteListStrategyStatisticsResponse({}));
  }

  /**
   * Queries the statistics of application whitelist policies.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - DescribeWhiteListStrategyStatisticsRequest
   * @returns DescribeWhiteListStrategyStatisticsResponse
   */
  async describeWhiteListStrategyStatistics(request: $_model.DescribeWhiteListStrategyStatisticsRequest): Promise<$_model.DescribeWhiteListStrategyStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWhiteListStrategyStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the number of the servers on which an application whitelist policy takes effect.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
   * 
   * @param request - DescribeWhiteListStrategyUuidCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWhiteListStrategyUuidCountResponse
   */
  async describeWhiteListStrategyUuidCountWithOptions(request: $_model.DescribeWhiteListStrategyUuidCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWhiteListStrategyUuidCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWhiteListStrategyUuidCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWhiteListStrategyUuidCountResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWhiteListStrategyUuidCountResponse({}));
  }

  /**
   * Queries the number of the servers on which an application whitelist policy takes effect.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
   * 
   * @param request - DescribeWhiteListStrategyUuidCountRequest
   * @returns DescribeWhiteListStrategyUuidCountResponse
   */
  async describeWhiteListStrategyUuidCount(request: $_model.DescribeWhiteListStrategyUuidCountRequest): Promise<$_model.DescribeWhiteListStrategyUuidCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWhiteListStrategyUuidCountWithOptions(request, runtime);
  }

  /**
   * Tests whether DingTalk notification configurations are valid.
   * 
   * @param request - DingTalkOnlineTestRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DingTalkOnlineTestResponse
   */
  async dingTalkOnlineTestWithOptions(request: $_model.DingTalkOnlineTestRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DingTalkOnlineTestResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DingTalkOnlineTest",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DingTalkOnlineTestResponse>(await this.callApi(params, req, runtime), new $_model.DingTalkOnlineTestResponse({}));
  }

  /**
   * Tests whether DingTalk notification configurations are valid.
   * 
   * @param request - DingTalkOnlineTestRequest
   * @returns DingTalkOnlineTestResponse
   */
  async dingTalkOnlineTest(request: $_model.DingTalkOnlineTestRequest): Promise<$_model.DingTalkOnlineTestResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.dingTalkOnlineTestWithOptions(request, runtime);
  }

  /**
   * Disables an IP address blocking policy that is in effect.
   * 
   * @param request - DisableBruteForceRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DisableBruteForceRecordResponse
   */
  async disableBruteForceRecordWithOptions(request: $_model.DisableBruteForceRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DisableBruteForceRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.blockIp)) {
      query["BlockIp"] = request.blockIp;
    }

    if (!$dara.isNull(request.bound)) {
      query["Bound"] = request.bound;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DisableBruteForceRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DisableBruteForceRecordResponse>(await this.callApi(params, req, runtime), new $_model.DisableBruteForceRecordResponse({}));
  }

  /**
   * Disables an IP address blocking policy that is in effect.
   * 
   * @param request - DisableBruteForceRecordRequest
   * @returns DisableBruteForceRecordResponse
   */
  async disableBruteForceRecord(request: $_model.DisableBruteForceRecordRequest): Promise<$_model.DisableBruteForceRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.disableBruteForceRecordWithOptions(request, runtime);
  }

  /**
   * Disables a custom IP address blocking policy for servers.
   * 
   * @param request - DisableCustomBlockRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DisableCustomBlockRecordResponse
   */
  async disableCustomBlockRecordWithOptions(request: $_model.DisableCustomBlockRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DisableCustomBlockRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.blockIp)) {
      query["BlockIp"] = request.blockIp;
    }

    if (!$dara.isNull(request.bound)) {
      query["Bound"] = request.bound;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DisableCustomBlockRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DisableCustomBlockRecordResponse>(await this.callApi(params, req, runtime), new $_model.DisableCustomBlockRecordResponse({}));
  }

  /**
   * Disables a custom IP address blocking policy for servers.
   * 
   * @param request - DisableCustomBlockRecordRequest
   * @returns DisableCustomBlockRecordResponse
   */
  async disableCustomBlockRecord(request: $_model.DisableCustomBlockRecordRequest): Promise<$_model.DisableCustomBlockRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.disableCustomBlockRecordWithOptions(request, runtime);
  }

  /**
   * Enables an IP address blocking policy for a specified server.
   * 
   * @param request - EnableBruteForceRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EnableBruteForceRecordResponse
   */
  async enableBruteForceRecordWithOptions(request: $_model.EnableBruteForceRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.EnableBruteForceRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.blockIp)) {
      query["BlockIp"] = request.blockIp;
    }

    if (!$dara.isNull(request.bound)) {
      query["Bound"] = request.bound;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "EnableBruteForceRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.EnableBruteForceRecordResponse>(await this.callApi(params, req, runtime), new $_model.EnableBruteForceRecordResponse({}));
  }

  /**
   * Enables an IP address blocking policy for a specified server.
   * 
   * @param request - EnableBruteForceRecordRequest
   * @returns EnableBruteForceRecordResponse
   */
  async enableBruteForceRecord(request: $_model.EnableBruteForceRecordRequest): Promise<$_model.EnableBruteForceRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.enableBruteForceRecordWithOptions(request, runtime);
  }

  /**
   * Enables a custom IP address blocking policy.
   * 
   * @param request - EnableCustomBlockRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EnableCustomBlockRecordResponse
   */
  async enableCustomBlockRecordWithOptions(request: $_model.EnableCustomBlockRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.EnableCustomBlockRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.blockIp)) {
      query["BlockIp"] = request.blockIp;
    }

    if (!$dara.isNull(request.bound)) {
      query["Bound"] = request.bound;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "EnableCustomBlockRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.EnableCustomBlockRecordResponse>(await this.callApi(params, req, runtime), new $_model.EnableCustomBlockRecordResponse({}));
  }

  /**
   * Enables a custom IP address blocking policy.
   * 
   * @param request - EnableCustomBlockRecordRequest
   * @returns EnableCustomBlockRecordResponse
   */
  async enableCustomBlockRecord(request: $_model.EnableCustomBlockRecordRequest): Promise<$_model.EnableCustomBlockRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.enableCustomBlockRecordWithOptions(request, runtime);
  }

  /**
   * Enables a custom rule for an instance.
   * 
   * @param request - EnableCustomInstanceBlockRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EnableCustomInstanceBlockRecordResponse
   */
  async enableCustomInstanceBlockRecordWithOptions(request: $_model.EnableCustomInstanceBlockRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.EnableCustomInstanceBlockRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.blockIp)) {
      query["BlockIp"] = request.blockIp;
    }

    if (!$dara.isNull(request.bound)) {
      query["Bound"] = request.bound;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "EnableCustomInstanceBlockRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.EnableCustomInstanceBlockRecordResponse>(await this.callApi(params, req, runtime), new $_model.EnableCustomInstanceBlockRecordResponse({}));
  }

  /**
   * Enables a custom rule for an instance.
   * 
   * @param request - EnableCustomInstanceBlockRecordRequest
   * @returns EnableCustomInstanceBlockRecordResponse
   */
  async enableCustomInstanceBlockRecord(request: $_model.EnableCustomInstanceBlockRecordRequest): Promise<$_model.EnableCustomInstanceBlockRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.enableCustomInstanceBlockRecordWithOptions(request, runtime);
  }

  /**
   * Enable the multi-account management feature of Security Center.
   * 
   * @remarks
   * You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
   * 
   * @param request - EnableServiceAccessResourceDirectoryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EnableServiceAccessResourceDirectoryResponse
   */
  async enableServiceAccessResourceDirectoryWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.EnableServiceAccessResourceDirectoryResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "EnableServiceAccessResourceDirectory",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.EnableServiceAccessResourceDirectoryResponse>(await this.callApi(params, req, runtime), new $_model.EnableServiceAccessResourceDirectoryResponse({}));
  }

  /**
   * Enable the multi-account management feature of Security Center.
   * 
   * @remarks
   * You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
   * @returns EnableServiceAccessResourceDirectoryResponse
   */
  async enableServiceAccessResourceDirectory(): Promise<$_model.EnableServiceAccessResourceDirectoryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.enableServiceAccessResourceDirectoryWithOptions(runtime);
  }

  /**
   * Performs a baseline check on servers to which a specified baseline check policy is applied.
   * 
   * @param request - ExecStrategyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExecStrategyResponse
   */
  async execStrategyWithOptions(request: $_model.ExecStrategyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ExecStrategyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.execAction)) {
      query["ExecAction"] = request.execAction;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExecStrategy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ExecStrategyResponse>(await this.callApi(params, req, runtime), new $_model.ExecStrategyResponse({}));
  }

  /**
   * Performs a baseline check on servers to which a specified baseline check policy is applied.
   * 
   * @param request - ExecStrategyRequest
   * @returns ExecStrategyResponse
   */
  async execStrategy(request: $_model.ExecStrategyRequest): Promise<$_model.ExecStrategyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.execStrategyWithOptions(request, runtime);
  }

  /**
   * Exports a security report.
   * 
   * @param request - ExportCustomizeReportRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExportCustomizeReportResponse
   */
  async exportCustomizeReportWithOptions(request: $_model.ExportCustomizeReportRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ExportCustomizeReportResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.exportType)) {
      query["ExportType"] = request.exportType;
    }

    if (!$dara.isNull(request.reportId)) {
      query["ReportId"] = request.reportId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExportCustomizeReport",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ExportCustomizeReportResponse>(await this.callApi(params, req, runtime), new $_model.ExportCustomizeReportResponse({}));
  }

  /**
   * Exports a security report.
   * 
   * @param request - ExportCustomizeReportRequest
   * @returns ExportCustomizeReportResponse
   */
  async exportCustomizeReport(request: $_model.ExportCustomizeReportRequest): Promise<$_model.ExportCustomizeReportResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.exportCustomizeReportWithOptions(request, runtime);
  }

  /**
   * Exports the check results on the Host, Cloud Platform Configuration Assessment, Image Security, Attack Awareness, and AK leak detection pages to Excel files.
   * 
   * @remarks
   * You can call the operation to export the following check result lists:
   * *   The list of servers on the Host page.
   * *   The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
   * *   The list of attack analysis data on the Attack Awareness page.
   * *   The list of check results for AccessKey pair leaks on the AK leak detection page.
   * 
   * @param request - ExportRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExportRecordResponse
   */
  async exportRecordWithOptions(request: $_model.ExportRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ExportRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.exportFileType)) {
      query["ExportFileType"] = request.exportFileType;
    }

    if (!$dara.isNull(request.exportType)) {
      query["ExportType"] = request.exportType;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.params)) {
      query["Params"] = request.params;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExportRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ExportRecordResponse>(await this.callApi(params, req, runtime), new $_model.ExportRecordResponse({}));
  }

  /**
   * Exports the check results on the Host, Cloud Platform Configuration Assessment, Image Security, Attack Awareness, and AK leak detection pages to Excel files.
   * 
   * @remarks
   * You can call the operation to export the following check result lists:
   * *   The list of servers on the Host page.
   * *   The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
   * *   The list of attack analysis data on the Attack Awareness page.
   * *   The list of check results for AccessKey pair leaks on the AK leak detection page.
   * 
   * @param request - ExportRecordRequest
   * @returns ExportRecordResponse
   */
  async exportRecord(request: $_model.ExportRecordRequest): Promise<$_model.ExportRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.exportRecordWithOptions(request, runtime);
  }

  /**
   * Exports the information about exceptions to a file.
   * 
   * @param request - ExportSuspEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExportSuspEventsResponse
   */
  async exportSuspEventsWithOptions(request: $_model.ExportSuspEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ExportSuspEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.assetsTypeList)) {
      query["AssetsTypeList"] = request.assetsTypeList;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.containerFieldName)) {
      query["ContainerFieldName"] = request.containerFieldName;
    }

    if (!$dara.isNull(request.containerFieldValue)) {
      query["ContainerFieldValue"] = request.containerFieldValue;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.dealed)) {
      query["Dealed"] = request.dealed;
    }

    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.levels)) {
      query["Levels"] = request.levels;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.operateErrorCodeList)) {
      query["OperateErrorCodeList"] = request.operateErrorCodeList;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.parentEventTypes)) {
      query["ParentEventTypes"] = request.parentEventTypes;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.timeEnd)) {
      query["TimeEnd"] = request.timeEnd;
    }

    if (!$dara.isNull(request.timeStart)) {
      query["TimeStart"] = request.timeStart;
    }

    if (!$dara.isNull(request.uniqueInfo)) {
      query["UniqueInfo"] = request.uniqueInfo;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExportSuspEvents",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ExportSuspEventsResponse>(await this.callApi(params, req, runtime), new $_model.ExportSuspEventsResponse({}));
  }

  /**
   * Exports the information about exceptions to a file.
   * 
   * @param request - ExportSuspEventsRequest
   * @returns ExportSuspEventsResponse
   */
  async exportSuspEvents(request: $_model.ExportSuspEventsRequest): Promise<$_model.ExportSuspEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.exportSuspEventsWithOptions(request, runtime);
  }

  /**
   * Exports vulnerabilities.
   * 
   * @remarks
   * You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
   * You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
   * ### Limits
   * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
   * 
   * @param request - ExportVulRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExportVulResponse
   */
  async exportVulWithOptions(request: $_model.ExportVulRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ExportVulResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliasName)) {
      query["AliasName"] = request.aliasName;
    }

    if (!$dara.isNull(request.attachTypes)) {
      query["AttachTypes"] = request.attachTypes;
    }

    if (!$dara.isNull(request.containerName)) {
      query["ContainerName"] = request.containerName;
    }

    if (!$dara.isNull(request.createTsEnd)) {
      query["CreateTsEnd"] = request.createTsEnd;
    }

    if (!$dara.isNull(request.createTsStart)) {
      query["CreateTsStart"] = request.createTsStart;
    }

    if (!$dara.isNull(request.cveId)) {
      query["CveId"] = request.cveId;
    }

    if (!$dara.isNull(request.dealed)) {
      query["Dealed"] = request.dealed;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.imageName)) {
      query["ImageName"] = request.imageName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.necessity)) {
      query["Necessity"] = request.necessity;
    }

    if (!$dara.isNull(request.path)) {
      query["Path"] = request.path;
    }

    if (!$dara.isNull(request.raspDefend)) {
      query["RaspDefend"] = request.raspDefend;
    }

    if (!$dara.isNull(request.searchTags)) {
      query["SearchTags"] = request.searchTags;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    if (!$dara.isNull(request.vpcInstanceIds)) {
      query["VpcInstanceIds"] = request.vpcInstanceIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExportVul",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ExportVulResponse>(await this.callApi(params, req, runtime), new $_model.ExportVulResponse({}));
  }

  /**
   * Exports vulnerabilities.
   * 
   * @remarks
   * You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
   * You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
   * ### Limits
   * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
   * 
   * @param request - ExportVulRequest
   * @returns ExportVulResponse
   */
  async exportVul(request: $_model.ExportVulRequest): Promise<$_model.ExportVulResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.exportVulWithOptions(request, runtime);
  }

  /**
   * Exports baseline check results.
   * 
   * @deprecated OpenAPI ExportWarning is deprecated, please use Sas::2018-12-03::ExportRecord instead.
   * 
   * @param request - ExportWarningRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExportWarningResponse
   */
  async exportWarningWithOptions(request: $_model.ExportWarningRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ExportWarningResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dealed)) {
      query["Dealed"] = request.dealed;
    }

    if (!$dara.isNull(request.exportType)) {
      query["ExportType"] = request.exportType;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.isCleartextPwd)) {
      query["IsCleartextPwd"] = request.isCleartextPwd;
    }

    if (!$dara.isNull(request.isSummaryExport)) {
      query["IsSummaryExport"] = request.isSummaryExport;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.riskIds)) {
      query["RiskIds"] = request.riskIds;
    }

    if (!$dara.isNull(request.riskLevels)) {
      query["RiskLevels"] = request.riskLevels;
    }

    if (!$dara.isNull(request.riskName)) {
      query["RiskName"] = request.riskName;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.statusList)) {
      query["StatusList"] = request.statusList;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    if (!$dara.isNull(request.subTypeNames)) {
      query["SubTypeNames"] = request.subTypeNames;
    }

    if (!$dara.isNull(request.typeName)) {
      query["TypeName"] = request.typeName;
    }

    if (!$dara.isNull(request.typeNames)) {
      query["TypeNames"] = request.typeNames;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExportWarning",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ExportWarningResponse>(await this.callApi(params, req, runtime), new $_model.ExportWarningResponse({}));
  }

  /**
   * Exports baseline check results.
   * 
   * @deprecated OpenAPI ExportWarning is deprecated, please use Sas::2018-12-03::ExportRecord instead.
   * 
   * @param request - ExportWarningRequest
   * @returns ExportWarningResponse
   */
  // Deprecated
  async exportWarning(request: $_model.ExportWarningRequest): Promise<$_model.ExportWarningResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.exportWarningWithOptions(request, runtime);
  }

  /**
   * 容器网络连接
   * 
   * @param tmpReq - FindContainerNetworkConnectRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FindContainerNetworkConnectResponse
   */
  async findContainerNetworkConnectWithOptions(tmpReq: $_model.FindContainerNetworkConnectRequest, runtime: $dara.RuntimeOptions): Promise<$_model.FindContainerNetworkConnectResponse> {
    tmpReq.validate();
    let request = new $_model.FindContainerNetworkConnectShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.dstNode)) {
      request.dstNodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dstNode, "DstNode", "json");
    }

    if (!$dara.isNull(tmpReq.srcNode)) {
      request.srcNodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.srcNode, "SrcNode", "json");
    }

    let query = { };
    if (!$dara.isNull(request.criteriaType)) {
      query["CriteriaType"] = request.criteriaType;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.dstNodeShrink)) {
      query["DstNode"] = request.dstNodeShrink;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.srcNodeShrink)) {
      query["SrcNode"] = request.srcNodeShrink;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "FindContainerNetworkConnect",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.FindContainerNetworkConnectResponse>(await this.callApi(params, req, runtime), new $_model.FindContainerNetworkConnectResponse({}));
  }

  /**
   * 容器网络连接
   * 
   * @param request - FindContainerNetworkConnectRequest
   * @returns FindContainerNetworkConnectResponse
   */
  async findContainerNetworkConnect(request: $_model.FindContainerNetworkConnectRequest): Promise<$_model.FindContainerNetworkConnectResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.findContainerNetworkConnectWithOptions(request, runtime);
  }

  /**
   * Completes guidance tasks for beginners to earn rewards.
   * 
   * @param request - FinishGuidTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FinishGuidTaskResponse
   */
  async finishGuidTaskWithOptions(request: $_model.FinishGuidTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.FinishGuidTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.taskTypeName)) {
      query["TaskTypeName"] = request.taskTypeName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "FinishGuidTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.FinishGuidTaskResponse>(await this.callApi(params, req, runtime), new $_model.FinishGuidTaskResponse({}));
  }

  /**
   * Completes guidance tasks for beginners to earn rewards.
   * 
   * @param request - FinishGuidTaskRequest
   * @returns FinishGuidTaskResponse
   */
  async finishGuidTask(request: $_model.FinishGuidTaskRequest): Promise<$_model.FinishGuidTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.finishGuidTaskWithOptions(request, runtime);
  }

  /**
   * Fixes a baseline risk item.
   * 
   * @param request - FixCheckWarningsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns FixCheckWarningsResponse
   */
  async fixCheckWarningsWithOptions(request: $_model.FixCheckWarningsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.FixCheckWarningsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkParams)) {
      query["CheckParams"] = request.checkParams;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.retentionDays)) {
      query["RetentionDays"] = request.retentionDays;
    }

    if (!$dara.isNull(request.riskId)) {
      query["RiskId"] = request.riskId;
    }

    if (!$dara.isNull(request.snapshotName)) {
      query["SnapshotName"] = request.snapshotName;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "FixCheckWarnings",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.FixCheckWarningsResponse>(await this.callApi(params, req, runtime), new $_model.FixCheckWarningsResponse({}));
  }

  /**
   * Fixes a baseline risk item.
   * 
   * @param request - FixCheckWarningsRequest
   * @returns FixCheckWarningsResponse
   */
  async fixCheckWarnings(request: $_model.FixCheckWarningsRequest): Promise<$_model.FixCheckWarningsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.fixCheckWarningsWithOptions(request, runtime);
  }

  /**
   * Generates a custom dictionary of weak passwords for the baseline check feature.
   * 
   * @param request - GenerateDynamicDictRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GenerateDynamicDictResponse
   */
  async generateDynamicDictWithOptions(request: $_model.GenerateDynamicDictRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GenerateDynamicDictResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.argKeywords)) {
      query["ArgKeywords"] = request.argKeywords;
    }

    if (!$dara.isNull(request.domains)) {
      query["Domains"] = request.domains;
    }

    if (!$dara.isNull(request.names)) {
      query["Names"] = request.names;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GenerateDynamicDict",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GenerateDynamicDictResponse>(await this.callApi(params, req, runtime), new $_model.GenerateDynamicDictResponse({}));
  }

  /**
   * Generates a custom dictionary of weak passwords for the baseline check feature.
   * 
   * @param request - GenerateDynamicDictRequest
   * @returns GenerateDynamicDictResponse
   */
  async generateDynamicDict(request: $_model.GenerateDynamicDictRequest): Promise<$_model.GenerateDynamicDictResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.generateDynamicDictWithOptions(request, runtime);
  }

  /**
   * Generates a command that is used to add a self-managed Kubernetes cluster.
   * 
   * @param request - GenerateK8sAccessInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GenerateK8sAccessInfoResponse
   */
  async generateK8sAccessInfoWithOptions(request: $_model.GenerateK8sAccessInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GenerateK8sAccessInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliyunYundunGatewayApiName)) {
      query["AliyunYundunGatewayApiName"] = request.aliyunYundunGatewayApiName;
    }

    if (!$dara.isNull(request.aliyunYundunGatewayPopName)) {
      query["AliyunYundunGatewayPopName"] = request.aliyunYundunGatewayPopName;
    }

    if (!$dara.isNull(request.aliyunYundunGatewayProjectName)) {
      query["AliyunYundunGatewayProjectName"] = request.aliyunYundunGatewayProjectName;
    }

    if (!$dara.isNull(request.auditLogStore)) {
      query["AuditLogStore"] = request.auditLogStore;
    }

    if (!$dara.isNull(request.auditProject)) {
      query["AuditProject"] = request.auditProject;
    }

    if (!$dara.isNull(request.auditRegionId)) {
      query["AuditRegionId"] = request.auditRegionId;
    }

    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.cpuArch)) {
      query["CpuArch"] = request.cpuArch;
    }

    if (!$dara.isNull(request.expireDate)) {
      query["ExpireDate"] = request.expireDate;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.vendor)) {
      query["Vendor"] = request.vendor;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GenerateK8sAccessInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GenerateK8sAccessInfoResponse>(await this.callApi(params, req, runtime), new $_model.GenerateK8sAccessInfoResponse({}));
  }

  /**
   * Generates a command that is used to add a self-managed Kubernetes cluster.
   * 
   * @param request - GenerateK8sAccessInfoRequest
   * @returns GenerateK8sAccessInfoResponse
   */
  async generateK8sAccessInfo(request: $_model.GenerateK8sAccessInfoRequest): Promise<$_model.GenerateK8sAccessInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.generateK8sAccessInfoWithOptions(request, runtime);
  }

  /**
   * Creates a one-time scan task.
   * 
   * @param request - GenerateOnceTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GenerateOnceTaskResponse
   */
  async generateOnceTaskWithOptions(request: $_model.GenerateOnceTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GenerateOnceTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.param)) {
      query["Param"] = request.param;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GenerateOnceTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GenerateOnceTaskResponse>(await this.callApi(params, req, runtime), new $_model.GenerateOnceTaskResponse({}));
  }

  /**
   * Creates a one-time scan task.
   * 
   * @param request - GenerateOnceTaskRequest
   * @returns GenerateOnceTaskResponse
   */
  async generateOnceTask(request: $_model.GenerateOnceTaskRequest): Promise<$_model.GenerateOnceTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.generateOnceTaskWithOptions(request, runtime);
  }

  /**
   * Obtains account tags.
   * 
   * @param request - GetAccountLabelRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAccountLabelResponse
   */
  async getAccountLabelWithOptions(request: $_model.GetAccountLabelRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAccountLabelResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.labelList)) {
      query["LabelList"] = request.labelList;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAccountLabel",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAccountLabelResponse>(await this.callApi(params, req, runtime), new $_model.GetAccountLabelResponse({}));
  }

  /**
   * Obtains account tags.
   * 
   * @param request - GetAccountLabelRequest
   * @returns GetAccountLabelResponse
   */
  async getAccountLabel(request: $_model.GetAccountLabelRequest): Promise<$_model.GetAccountLabelResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAccountLabelWithOptions(request, runtime);
  }

  /**
   * Queries the details of a defense rule against container escapes.
   * 
   * @remarks
   * Only the Ultimate edition of Security Center supports this operation.
   * 
   * @param request - GetAegisContainerPluginRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAegisContainerPluginRuleResponse
   */
  async getAegisContainerPluginRuleWithOptions(request: $_model.GetAegisContainerPluginRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAegisContainerPluginRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAegisContainerPluginRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAegisContainerPluginRuleResponse>(await this.callApi(params, req, runtime), new $_model.GetAegisContainerPluginRuleResponse({}));
  }

  /**
   * Queries the details of a defense rule against container escapes.
   * 
   * @remarks
   * Only the Ultimate edition of Security Center supports this operation.
   * 
   * @param request - GetAegisContainerPluginRuleRequest
   * @returns GetAegisContainerPluginRuleResponse
   */
  async getAegisContainerPluginRule(request: $_model.GetAegisContainerPluginRuleRequest): Promise<$_model.GetAegisContainerPluginRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAegisContainerPluginRuleWithOptions(request, runtime);
  }

  /**
   * Queries search conditions that can be used to search for container file protection rules.
   * 
   * @param request - GetAegisContainerPluginRuleCriteriaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAegisContainerPluginRuleCriteriaResponse
   */
  async getAegisContainerPluginRuleCriteriaWithOptions(request: $_model.GetAegisContainerPluginRuleCriteriaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAegisContainerPluginRuleCriteriaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.value)) {
      query["Value"] = request.value;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAegisContainerPluginRuleCriteria",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAegisContainerPluginRuleCriteriaResponse>(await this.callApi(params, req, runtime), new $_model.GetAegisContainerPluginRuleCriteriaResponse({}));
  }

  /**
   * Queries search conditions that can be used to search for container file protection rules.
   * 
   * @param request - GetAegisContainerPluginRuleCriteriaRequest
   * @returns GetAegisContainerPluginRuleCriteriaResponse
   */
  async getAegisContainerPluginRuleCriteria(request: $_model.GetAegisContainerPluginRuleCriteriaRequest): Promise<$_model.GetAegisContainerPluginRuleCriteriaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAegisContainerPluginRuleCriteriaWithOptions(request, runtime);
  }

  /**
   * Queries the number of agentless detection tasks.
   * 
   * @param request - GetAgentlessTaskCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAgentlessTaskCountResponse
   */
  async getAgentlessTaskCountWithOptions(request: $_model.GetAgentlessTaskCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAgentlessTaskCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.target)) {
      query["Target"] = request.target;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAgentlessTaskCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAgentlessTaskCountResponse>(await this.callApi(params, req, runtime), new $_model.GetAgentlessTaskCountResponse({}));
  }

  /**
   * Queries the number of agentless detection tasks.
   * 
   * @param request - GetAgentlessTaskCountRequest
   * @returns GetAgentlessTaskCountResponse
   */
  async getAgentlessTaskCount(request: $_model.GetAgentlessTaskCountRequest): Promise<$_model.GetAgentlessTaskCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAgentlessTaskCountWithOptions(request, runtime);
  }

  /**
   * Queries the number of servers on which alerts are generated.
   * 
   * @param request - GetAlarmMachineCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAlarmMachineCountResponse
   */
  async getAlarmMachineCountWithOptions(request: $_model.GetAlarmMachineCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAlarmMachineCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAlarmMachineCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAlarmMachineCountResponse>(await this.callApi(params, req, runtime), new $_model.GetAlarmMachineCountResponse({}));
  }

  /**
   * Queries the number of servers on which alerts are generated.
   * 
   * @param request - GetAlarmMachineCountRequest
   * @returns GetAlarmMachineCountResponse
   */
  async getAlarmMachineCount(request: $_model.GetAlarmMachineCountRequest): Promise<$_model.GetAlarmMachineCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAlarmMachineCountWithOptions(request, runtime);
  }

  /**
   * Queries the network topology between containerized applications.
   * 
   * @param request - GetAppNetworkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAppNetworkResponse
   */
  async getAppNetworkWithOptions(request: $_model.GetAppNetworkRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAppNetworkResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAppNetwork",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAppNetworkResponse>(await this.callApi(params, req, runtime), new $_model.GetAppNetworkResponse({}));
  }

  /**
   * Queries the network topology between containerized applications.
   * 
   * @param request - GetAppNetworkRequest
   * @returns GetAppNetworkResponse
   */
  async getAppNetwork(request: $_model.GetAppNetworkRequest): Promise<$_model.GetAppNetworkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAppNetworkWithOptions(request, runtime);
  }

  /**
   * Queries the details of a server and the extended information about the server by using the UUID of the server.
   * 
   * @param request - GetAssetDetailByUuidRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAssetDetailByUuidResponse
   */
  async getAssetDetailByUuidWithOptions(request: $_model.GetAssetDetailByUuidRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAssetDetailByUuidResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAssetDetailByUuid",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAssetDetailByUuidResponse>(await this.callApi(params, req, runtime), new $_model.GetAssetDetailByUuidResponse({}));
  }

  /**
   * Queries the details of a server and the extended information about the server by using the UUID of the server.
   * 
   * @param request - GetAssetDetailByUuidRequest
   * @returns GetAssetDetailByUuidResponse
   */
  async getAssetDetailByUuid(request: $_model.GetAssetDetailByUuidRequest): Promise<$_model.GetAssetDetailByUuidResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAssetDetailByUuidWithOptions(request, runtime);
  }

  /**
   * Queries asset selection configurations.
   * 
   * @param request - GetAssetSelectionConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAssetSelectionConfigResponse
   */
  async getAssetSelectionConfigWithOptions(request: $_model.GetAssetSelectionConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAssetSelectionConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.businessType)) {
      query["BusinessType"] = request.businessType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAssetSelectionConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAssetSelectionConfigResponse>(await this.callApi(params, req, runtime), new $_model.GetAssetSelectionConfigResponse({}));
  }

  /**
   * Queries asset selection configurations.
   * 
   * @param request - GetAssetSelectionConfigRequest
   * @returns GetAssetSelectionConfigResponse
   */
  async getAssetSelectionConfig(request: $_model.GetAssetSelectionConfigRequest): Promise<$_model.GetAssetSelectionConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAssetSelectionConfigWithOptions(request, runtime);
  }

  /**
   * Queries the details about the asset fingerprints of the startup item, kernel module, or website type.
   * 
   * @param request - GetAssetsPropertyDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAssetsPropertyDetailResponse
   */
  async getAssetsPropertyDetailWithOptions(request: $_model.GetAssetsPropertyDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAssetsPropertyDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.biz)) {
      query["Biz"] = request.biz;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.itemName)) {
      query["ItemName"] = request.itemName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.searchCriteriaList)) {
      query["SearchCriteriaList"] = request.searchCriteriaList;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAssetsPropertyDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAssetsPropertyDetailResponse>(await this.callApi(params, req, runtime), new $_model.GetAssetsPropertyDetailResponse({}));
  }

  /**
   * Queries the details about the asset fingerprints of the startup item, kernel module, or website type.
   * 
   * @param request - GetAssetsPropertyDetailRequest
   * @returns GetAssetsPropertyDetailResponse
   */
  async getAssetsPropertyDetail(request: $_model.GetAssetsPropertyDetailRequest): Promise<$_model.GetAssetsPropertyDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAssetsPropertyDetailWithOptions(request, runtime);
  }

  /**
   * Queries the aggregation information about the asset fingerprints of the startup item, kernel module, or website type.
   * 
   * @param request - GetAssetsPropertyItemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAssetsPropertyItemResponse
   */
  async getAssetsPropertyItemWithOptions(request: $_model.GetAssetsPropertyItemRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAssetsPropertyItemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.biz)) {
      query["Biz"] = request.biz;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.forceFlush)) {
      query["ForceFlush"] = request.forceFlush;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.searchInfo)) {
      query["SearchInfo"] = request.searchInfo;
    }

    if (!$dara.isNull(request.searchItem)) {
      query["SearchItem"] = request.searchItem;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAssetsPropertyItem",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAssetsPropertyItemResponse>(await this.callApi(params, req, runtime), new $_model.GetAssetsPropertyItemResponse({}));
  }

  /**
   * Queries the aggregation information about the asset fingerprints of the startup item, kernel module, or website type.
   * 
   * @param request - GetAssetsPropertyItemRequest
   * @returns GetAssetsPropertyItemResponse
   */
  async getAssetsPropertyItem(request: $_model.GetAssetsPropertyItemRequest): Promise<$_model.GetAssetsPropertyItemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAssetsPropertyItemWithOptions(request, runtime);
  }

  /**
   * Query Attack Path Event Details.
   * 
   * @param request - GetAttackPathEventDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAttackPathEventDetailResponse
   */
  async getAttackPathEventDetailWithOptions(request: $_model.GetAttackPathEventDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAttackPathEventDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eventId)) {
      query["EventId"] = request.eventId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAttackPathEventDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAttackPathEventDetailResponse>(await this.callApi(params, req, runtime), new $_model.GetAttackPathEventDetailResponse({}));
  }

  /**
   * Query Attack Path Event Details.
   * 
   * @param request - GetAttackPathEventDetailRequest
   * @returns GetAttackPathEventDetailResponse
   */
  async getAttackPathEventDetail(request: $_model.GetAttackPathEventDetailRequest): Promise<$_model.GetAttackPathEventDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAttackPathEventDetailWithOptions(request, runtime);
  }

  /**
   * Query Attack Path Event Statistics.
   * 
   * @param request - GetAttackPathEventStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAttackPathEventStatisticsResponse
   */
  async getAttackPathEventStatisticsWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetAttackPathEventStatisticsResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetAttackPathEventStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAttackPathEventStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.GetAttackPathEventStatisticsResponse({}));
  }

  /**
   * Query Attack Path Event Statistics.
   * @returns GetAttackPathEventStatisticsResponse
   */
  async getAttackPathEventStatistics(): Promise<$_model.GetAttackPathEventStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAttackPathEventStatisticsWithOptions(runtime);
  }

  /**
   * Query Attack Path Sensitive Assets.
   * 
   * @param request - GetAttackPathSensitiveAssetConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAttackPathSensitiveAssetConfigResponse
   */
  async getAttackPathSensitiveAssetConfigWithOptions(request: $_model.GetAttackPathSensitiveAssetConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAttackPathSensitiveAssetConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.attackPathSensitiveAssetConfigId)) {
      query["AttackPathSensitiveAssetConfigId"] = request.attackPathSensitiveAssetConfigId;
    }

    if (!$dara.isNull(request.configType)) {
      query["ConfigType"] = request.configType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAttackPathSensitiveAssetConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAttackPathSensitiveAssetConfigResponse>(await this.callApi(params, req, runtime), new $_model.GetAttackPathSensitiveAssetConfigResponse({}));
  }

  /**
   * Query Attack Path Sensitive Assets.
   * 
   * @param request - GetAttackPathSensitiveAssetConfigRequest
   * @returns GetAttackPathSensitiveAssetConfigResponse
   */
  async getAttackPathSensitiveAssetConfig(request: $_model.GetAttackPathSensitiveAssetConfigRequest): Promise<$_model.GetAttackPathSensitiveAssetConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAttackPathSensitiveAssetConfigWithOptions(request, runtime);
  }

  /**
   * Query Attack Path Whitelist Details.
   * 
   * @param request - GetAttackPathWhitelistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAttackPathWhitelistResponse
   */
  async getAttackPathWhitelistWithOptions(request: $_model.GetAttackPathWhitelistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetAttackPathWhitelistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.attackPathWhitelistId)) {
      query["AttackPathWhitelistId"] = request.attackPathWhitelistId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAttackPathWhitelist",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAttackPathWhitelistResponse>(await this.callApi(params, req, runtime), new $_model.GetAttackPathWhitelistResponse({}));
  }

  /**
   * Query Attack Path Whitelist Details.
   * 
   * @param request - GetAttackPathWhitelistRequest
   * @returns GetAttackPathWhitelistResponse
   */
  async getAttackPathWhitelist(request: $_model.GetAttackPathWhitelistRequest): Promise<$_model.GetAttackPathWhitelistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAttackPathWhitelistWithOptions(request, runtime);
  }

  /**
   * Queries a list of attack types on the Attack Analysis page.
   * 
   * @param request - GetAttackTypeListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAttackTypeListResponse
   */
  async getAttackTypeListWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetAttackTypeListResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetAttackTypeList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAttackTypeListResponse>(await this.callApi(params, req, runtime), new $_model.GetAttackTypeListResponse({}));
  }

  /**
   * Queries a list of attack types on the Attack Analysis page.
   * @returns GetAttackTypeListResponse
   */
  async getAttackTypeList(): Promise<$_model.GetAttackTypeListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAttackTypeListWithOptions(runtime);
  }

  /**
   * Queries the statistics of asset protection quota.
   * 
   * @param request - GetAuthSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAuthSummaryResponse
   */
  async getAuthSummaryWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetAuthSummaryResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetAuthSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAuthSummaryResponse>(await this.callApi(params, req, runtime), new $_model.GetAuthSummaryResponse({}));
  }

  /**
   * Queries the statistics of asset protection quota.
   * @returns GetAuthSummaryResponse
   */
  async getAuthSummary(): Promise<$_model.GetAuthSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAuthSummaryWithOptions(runtime);
  }

  /**
   * Queries the statistics about the numbers of assets protected by each edition of Security Center.
   * 
   * @param request - GetAuthVersionStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAuthVersionStatisticResponse
   */
  async getAuthVersionStatisticWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetAuthVersionStatisticResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetAuthVersionStatistic",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetAuthVersionStatisticResponse>(await this.callApi(params, req, runtime), new $_model.GetAuthVersionStatisticResponse({}));
  }

  /**
   * Queries the statistics about the numbers of assets protected by each edition of Security Center.
   * @returns GetAuthVersionStatisticResponse
   */
  async getAuthVersionStatistic(): Promise<$_model.GetAuthVersionStatisticResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAuthVersionStatisticWithOptions(runtime);
  }

  /**
   * Checks whether the managed anti-ransomware feature can automatically configure an anti-ransomware policy for servers.
   * 
   * @param request - GetBackupAutoConfigStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetBackupAutoConfigStatusResponse
   */
  async getBackupAutoConfigStatusWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetBackupAutoConfigStatusResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetBackupAutoConfigStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetBackupAutoConfigStatusResponse>(await this.callApi(params, req, runtime), new $_model.GetBackupAutoConfigStatusResponse({}));
  }

  /**
   * Checks whether the managed anti-ransomware feature can automatically configure an anti-ransomware policy for servers.
   * @returns GetBackupAutoConfigStatusResponse
   */
  async getBackupAutoConfigStatus(): Promise<$_model.GetBackupAutoConfigStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getBackupAutoConfigStatusWithOptions(runtime);
  }

  /**
   * Queries the anti-ransomware capacity that is used.
   * 
   * @param request - GetBackupStorageCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetBackupStorageCountResponse
   */
  async getBackupStorageCountWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetBackupStorageCountResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetBackupStorageCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetBackupStorageCountResponse>(await this.callApi(params, req, runtime), new $_model.GetBackupStorageCountResponse({}));
  }

  /**
   * Queries the anti-ransomware capacity that is used.
   * @returns GetBackupStorageCountResponse
   */
  async getBackupStorageCount(): Promise<$_model.GetBackupStorageCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getBackupStorageCountWithOptions(runtime);
  }

  /**
   * Queries configurations for scanning image build command risks.
   * 
   * @param request - GetBuildRiskDefineRuleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetBuildRiskDefineRuleConfigResponse
   */
  async getBuildRiskDefineRuleConfigWithOptions(request: $_model.GetBuildRiskDefineRuleConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetBuildRiskDefineRuleConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetBuildRiskDefineRuleConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetBuildRiskDefineRuleConfigResponse>(await this.callApi(params, req, runtime), new $_model.GetBuildRiskDefineRuleConfigResponse({}));
  }

  /**
   * Queries configurations for scanning image build command risks.
   * 
   * @param request - GetBuildRiskDefineRuleConfigRequest
   * @returns GetBuildRiskDefineRuleConfigResponse
   */
  async getBuildRiskDefineRuleConfig(request: $_model.GetBuildRiskDefineRuleConfigRequest): Promise<$_model.GetBuildRiskDefineRuleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getBuildRiskDefineRuleConfigWithOptions(request, runtime);
  }

  /**
   * Checks whether the current user is qualified for the trial use of Security Center.
   * 
   * @param request - GetCanTrySasRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCanTrySasResponse
   */
  async getCanTrySasWithOptions(request: $_model.GetCanTrySasRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCanTrySasResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.fromEcs)) {
      body["FromEcs"] = request.fromEcs;
    }

    if (!$dara.isNull(request.lang)) {
      body["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCanTrySas",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCanTrySasResponse>(await this.callApi(params, req, runtime), new $_model.GetCanTrySasResponse({}));
  }

  /**
   * Checks whether the current user is qualified for the trial use of Security Center.
   * 
   * @param request - GetCanTrySasRequest
   * @returns GetCanTrySasResponse
   */
  async getCanTrySas(request: $_model.GetCanTrySasRequest): Promise<$_model.GetCanTrySasResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCanTrySasWithOptions(request, runtime);
  }

  /**
   * Queries the information about an automatic configuration check on cloud services.
   * 
   * @param request - GetCheckConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCheckConfigResponse
   */
  async getCheckConfigWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetCheckConfigResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetCheckConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCheckConfigResponse>(await this.callApi(params, req, runtime), new $_model.GetCheckConfigResponse({}));
  }

  /**
   * Queries the information about an automatic configuration check on cloud services.
   * @returns GetCheckConfigResponse
   */
  async getCheckConfig(): Promise<$_model.GetCheckConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCheckConfigWithOptions(runtime);
  }

  /**
   * Queries statistics on the number of risk items in cloud security posture management (CSPM) for cloud services.
   * 
   * @param request - GetCheckCountStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCheckCountStatisticResponse
   */
  async getCheckCountStatisticWithOptions(request: $_model.GetCheckCountStatisticRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCheckCountStatisticResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.statisticType)) {
      query["StatisticType"] = request.statisticType;
    }

    if (!$dara.isNull(request.taskSources)) {
      query["TaskSources"] = request.taskSources;
    }

    if (!$dara.isNull(request.vendors)) {
      query["Vendors"] = request.vendors;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCheckCountStatistic",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCheckCountStatisticResponse>(await this.callApi(params, req, runtime), new $_model.GetCheckCountStatisticResponse({}));
  }

  /**
   * Queries statistics on the number of risk items in cloud security posture management (CSPM) for cloud services.
   * 
   * @param request - GetCheckCountStatisticRequest
   * @returns GetCheckCountStatisticResponse
   */
  async getCheckCountStatistic(request: $_model.GetCheckCountStatisticRequest): Promise<$_model.GetCheckCountStatisticResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCheckCountStatisticWithOptions(request, runtime);
  }

  /**
   * Queries the details about a check item that is used for configuration assessment.
   * 
   * @param request - GetCheckDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCheckDetailResponse
   */
  async getCheckDetailWithOptions(request: $_model.GetCheckDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCheckDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCheckDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCheckDetailResponse>(await this.callApi(params, req, runtime), new $_model.GetCheckDetailResponse({}));
  }

  /**
   * Queries the details about a check item that is used for configuration assessment.
   * 
   * @param request - GetCheckDetailRequest
   * @returns GetCheckDetailResponse
   */
  async getCheckDetail(request: $_model.GetCheckDetailRequest): Promise<$_model.GetCheckDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCheckDetailWithOptions(request, runtime);
  }

  /**
   * Queries the progress of a configuration check task on cloud services.
   * 
   * @param request - GetCheckProcessRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCheckProcessResponse
   */
  async getCheckProcessWithOptions(request: $_model.GetCheckProcessRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCheckProcessResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCheckProcess",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCheckProcessResponse>(await this.callApi(params, req, runtime), new $_model.GetCheckProcessResponse({}));
  }

  /**
   * Queries the progress of a configuration check task on cloud services.
   * 
   * @param request - GetCheckProcessRequest
   * @returns GetCheckProcessResponse
   */
  async getCheckProcess(request: $_model.GetCheckProcessRequest): Promise<$_model.GetCheckProcessResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCheckProcessWithOptions(request, runtime);
  }

  /**
   * Queries the statistics on risk scenarios and check items that are used in the risk scenarios, including the statistics on low-risk, medium-risk, and high-risk items by baseline type.
   * 
   * @param request - GetCheckRiskStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCheckRiskStatisticsResponse
   */
  async getCheckRiskStatisticsWithOptions(request: $_model.GetCheckRiskStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCheckRiskStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCheckRiskStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCheckRiskStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.GetCheckRiskStatisticsResponse({}));
  }

  /**
   * Queries the statistics on risk scenarios and check items that are used in the risk scenarios, including the statistics on low-risk, medium-risk, and high-risk items by baseline type.
   * 
   * @param request - GetCheckRiskStatisticsRequest
   * @returns GetCheckRiskStatisticsResponse
   */
  async getCheckRiskStatistics(request: $_model.GetCheckRiskStatisticsRequest): Promise<$_model.GetCheckRiskStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCheckRiskStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the sales information about the configuration assessment feature, including the purchased quota and the consumed quota.
   * 
   * @param request - GetCheckSaleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCheckSaleResponse
   */
  async getCheckSaleWithOptions(request: $_model.GetCheckSaleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCheckSaleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCheckSale",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCheckSaleResponse>(await this.callApi(params, req, runtime), new $_model.GetCheckSaleResponse({}));
  }

  /**
   * Queries the sales information about the configuration assessment feature, including the purchased quota and the consumed quota.
   * 
   * @param request - GetCheckSaleRequest
   * @returns GetCheckSaleResponse
   */
  async getCheckSale(request: $_model.GetCheckSaleRequest): Promise<$_model.GetCheckSaleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCheckSaleWithOptions(request, runtime);
  }

  /**
   * Obtains the structure information about check items provided by the configuration assessment feature.
   * 
   * @remarks
   * You must purchase the configuration assessment feature before you can use the feature.
   * 
   * @param request - GetCheckStructureRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCheckStructureResponse
   */
  async getCheckStructureWithOptions(request: $_model.GetCheckStructureRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCheckStructureResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.taskSources)) {
      query["TaskSources"] = request.taskSources;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCheckStructure",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCheckStructureResponse>(await this.callApi(params, req, runtime), new $_model.GetCheckStructureResponse({}));
  }

  /**
   * Obtains the structure information about check items provided by the configuration assessment feature.
   * 
   * @remarks
   * You must purchase the configuration assessment feature before you can use the feature.
   * 
   * @param request - GetCheckStructureRequest
   * @returns GetCheckStructureResponse
   */
  async getCheckStructure(request: $_model.GetCheckStructureRequest): Promise<$_model.GetCheckStructureResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCheckStructureWithOptions(request, runtime);
  }

  /**
   * Queries the summary information about the configuration checks on cloud services.
   * 
   * @param request - GetCheckSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCheckSummaryResponse
   */
  async getCheckSummaryWithOptions(request: $_model.GetCheckSummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCheckSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.isItemStatistic)) {
      query["IsItemStatistic"] = request.isItemStatistic;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.taskSources)) {
      query["TaskSources"] = request.taskSources;
    }

    if (!$dara.isNull(request.vendors)) {
      query["Vendors"] = request.vendors;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCheckSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCheckSummaryResponse>(await this.callApi(params, req, runtime), new $_model.GetCheckSummaryResponse({}));
  }

  /**
   * Queries the summary information about the configuration checks on cloud services.
   * 
   * @param request - GetCheckSummaryRequest
   * @returns GetCheckSummaryResponse
   */
  async getCheckSummary(request: $_model.GetCheckSummaryRequest): Promise<$_model.GetCheckSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCheckSummaryWithOptions(request, runtime);
  }

  /**
   * Get time trend statistics data
   * 
   * @param request - GetCheckTimeDimensionStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCheckTimeDimensionStatisticResponse
   */
  async getCheckTimeDimensionStatisticWithOptions(request: $_model.GetCheckTimeDimensionStatisticRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCheckTimeDimensionStatisticResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTimeStamp)) {
      query["EndTimeStamp"] = request.endTimeStamp;
    }

    if (!$dara.isNull(request.startTimeStamp)) {
      query["StartTimeStamp"] = request.startTimeStamp;
    }

    if (!$dara.isNull(request.statisticType)) {
      query["StatisticType"] = request.statisticType;
    }

    if (!$dara.isNull(request.vendors)) {
      query["Vendors"] = request.vendors;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCheckTimeDimensionStatistic",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCheckTimeDimensionStatisticResponse>(await this.callApi(params, req, runtime), new $_model.GetCheckTimeDimensionStatisticResponse({}));
  }

  /**
   * Get time trend statistics data
   * 
   * @param request - GetCheckTimeDimensionStatisticRequest
   * @returns GetCheckTimeDimensionStatisticResponse
   */
  async getCheckTimeDimensionStatistic(request: $_model.GetCheckTimeDimensionStatisticRequest): Promise<$_model.GetCheckTimeDimensionStatisticResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCheckTimeDimensionStatisticWithOptions(request, runtime);
  }

  /**
   * Queries the installation rate and online rate of the agent.
   * 
   * @param request - GetClientRatioStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetClientRatioStatisticResponse
   */
  async getClientRatioStatisticWithOptions(request: $_model.GetClientRatioStatisticRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetClientRatioStatisticResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.statisticTypes)) {
      query["StatisticTypes"] = request.statisticTypes;
    }

    if (!$dara.isNull(request.timeEnd)) {
      query["TimeEnd"] = request.timeEnd;
    }

    if (!$dara.isNull(request.timeStart)) {
      query["TimeStart"] = request.timeStart;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetClientRatioStatistic",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetClientRatioStatisticResponse>(await this.callApi(params, req, runtime), new $_model.GetClientRatioStatisticResponse({}));
  }

  /**
   * Queries the installation rate and online rate of the agent.
   * 
   * @param request - GetClientRatioStatisticRequest
   * @returns GetClientRatioStatisticResponse
   */
  async getClientRatioStatistic(request: $_model.GetClientRatioStatisticRequest): Promise<$_model.GetClientRatioStatisticResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getClientRatioStatisticWithOptions(request, runtime);
  }

  /**
   * Queries the information about a custom defense rule.
   * 
   * @param request - GetClientUserDefineRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetClientUserDefineRuleResponse
   */
  async getClientUserDefineRuleWithOptions(request: $_model.GetClientUserDefineRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetClientUserDefineRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetClientUserDefineRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetClientUserDefineRuleResponse>(await this.callApi(params, req, runtime), new $_model.GetClientUserDefineRuleResponse({}));
  }

  /**
   * Queries the information about a custom defense rule.
   * 
   * @param request - GetClientUserDefineRuleRequest
   * @returns GetClientUserDefineRuleResponse
   */
  async getClientUserDefineRule(request: $_model.GetClientUserDefineRuleRequest): Promise<$_model.GetClientUserDefineRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getClientUserDefineRuleWithOptions(request, runtime);
  }

  /**
   * Queries the filter conditions that are used to search for cloud assets.
   * 
   * @param request - GetCloudAssetCriteriaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCloudAssetCriteriaResponse
   */
  async getCloudAssetCriteriaWithOptions(request: $_model.GetCloudAssetCriteriaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCloudAssetCriteriaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cloudAssetTypes)) {
      query["CloudAssetTypes"] = request.cloudAssetTypes;
    }

    if (!$dara.isNull(request.value)) {
      query["Value"] = request.value;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCloudAssetCriteria",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCloudAssetCriteriaResponse>(await this.callApi(params, req, runtime), new $_model.GetCloudAssetCriteriaResponse({}));
  }

  /**
   * Queries the filter conditions that are used to search for cloud assets.
   * 
   * @param request - GetCloudAssetCriteriaRequest
   * @returns GetCloudAssetCriteriaResponse
   */
  async getCloudAssetCriteria(request: $_model.GetCloudAssetCriteriaRequest): Promise<$_model.GetCloudAssetCriteriaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCloudAssetCriteriaWithOptions(request, runtime);
  }

  /**
   * Obtains the details of cloud assets.
   * 
   * @param request - GetCloudAssetDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCloudAssetDetailResponse
   */
  async getCloudAssetDetailWithOptions(request: $_model.GetCloudAssetDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCloudAssetDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.assetSubType)) {
      query["AssetSubType"] = request.assetSubType;
    }

    if (!$dara.isNull(request.assetType)) {
      query["AssetType"] = request.assetType;
    }

    if (!$dara.isNull(request.cloudAssetInstances)) {
      query["CloudAssetInstances"] = request.cloudAssetInstances;
    }

    if (!$dara.isNull(request.vendor)) {
      query["Vendor"] = request.vendor;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCloudAssetDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCloudAssetDetailResponse>(await this.callApi(params, req, runtime), new $_model.GetCloudAssetDetailResponse({}));
  }

  /**
   * Obtains the details of cloud assets.
   * 
   * @param request - GetCloudAssetDetailRequest
   * @returns GetCloudAssetDetailResponse
   */
  async getCloudAssetDetail(request: $_model.GetCloudAssetDetailRequest): Promise<$_model.GetCloudAssetDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCloudAssetDetailWithOptions(request, runtime);
  }

  /**
   * The total number of instances that are at risk.
   * 
   * @param request - GetCloudAssetSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCloudAssetSummaryResponse
   */
  async getCloudAssetSummaryWithOptions(request: $_model.GetCloudAssetSummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCloudAssetSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cloudAssetTypes)) {
      query["CloudAssetTypes"] = request.cloudAssetTypes;
    }

    if (!$dara.isNull(request.vendors)) {
      query["Vendors"] = request.vendors;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCloudAssetSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCloudAssetSummaryResponse>(await this.callApi(params, req, runtime), new $_model.GetCloudAssetSummaryResponse({}));
  }

  /**
   * The total number of instances that are at risk.
   * 
   * @param request - GetCloudAssetSummaryRequest
   * @returns GetCloudAssetSummaryResponse
   */
  async getCloudAssetSummary(request: $_model.GetCloudAssetSummaryRequest): Promise<$_model.GetCloudAssetSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCloudAssetSummaryWithOptions(request, runtime);
  }

  /**
   * Queries the statistics on baseline risk items of container clusters.
   * 
   * @param request - GetClusterCheckItemWarningStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetClusterCheckItemWarningStatisticsResponse
   */
  async getClusterCheckItemWarningStatisticsWithOptions(request: $_model.GetClusterCheckItemWarningStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetClusterCheckItemWarningStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetClusterCheckItemWarningStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetClusterCheckItemWarningStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.GetClusterCheckItemWarningStatisticsResponse({}));
  }

  /**
   * Queries the statistics on baseline risk items of container clusters.
   * 
   * @param request - GetClusterCheckItemWarningStatisticsRequest
   * @returns GetClusterCheckItemWarningStatisticsResponse
   */
  async getClusterCheckItemWarningStatistics(request: $_model.GetClusterCheckItemWarningStatisticsRequest): Promise<$_model.GetClusterCheckItemWarningStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getClusterCheckItemWarningStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the overall information about cluster defense rules that are configured for the container firewall feature.
   * 
   * @param request - GetClusterRuleSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetClusterRuleSummaryResponse
   */
  async getClusterRuleSummaryWithOptions(request: $_model.GetClusterRuleSummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetClusterRuleSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetClusterRuleSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetClusterRuleSummaryResponse>(await this.callApi(params, req, runtime), new $_model.GetClusterRuleSummaryResponse({}));
  }

  /**
   * Queries the overall information about cluster defense rules that are configured for the container firewall feature.
   * 
   * @param request - GetClusterRuleSummaryRequest
   * @returns GetClusterRuleSummaryResponse
   */
  async getClusterRuleSummary(request: $_model.GetClusterRuleSummaryRequest): Promise<$_model.GetClusterRuleSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getClusterRuleSummaryWithOptions(request, runtime);
  }

  /**
   * Queries the number of policies in each cluster.
   * 
   * @param request - GetClusterStrategyCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetClusterStrategyCountResponse
   */
  async getClusterStrategyCountWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetClusterStrategyCountResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetClusterStrategyCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetClusterStrategyCountResponse>(await this.callApi(params, req, runtime), new $_model.GetClusterStrategyCountResponse({}));
  }

  /**
   * Queries the number of policies in each cluster.
   * @returns GetClusterStrategyCountResponse
   */
  async getClusterStrategyCount(): Promise<$_model.GetClusterStrategyCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getClusterStrategyCountWithOptions(runtime);
  }

  /**
   * Queries the statistics on alert events that are generated for containers.
   * 
   * @param request - GetClusterSuspEventStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetClusterSuspEventStatisticsResponse
   */
  async getClusterSuspEventStatisticsWithOptions(request: $_model.GetClusterSuspEventStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetClusterSuspEventStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetClusterSuspEventStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetClusterSuspEventStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.GetClusterSuspEventStatisticsResponse({}));
  }

  /**
   * Queries the statistics on alert events that are generated for containers.
   * 
   * @param request - GetClusterSuspEventStatisticsRequest
   * @returns GetClusterSuspEventStatisticsResponse
   */
  async getClusterSuspEventStatistics(request: $_model.GetClusterSuspEventStatisticsRequest): Promise<$_model.GetClusterSuspEventStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getClusterSuspEventStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the configuration of a common switch.
   * 
   * @param request - GetCommonSwitchConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCommonSwitchConfigResponse
   */
  async getCommonSwitchConfigWithOptions(request: $_model.GetCommonSwitchConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetCommonSwitchConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCommonSwitchConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCommonSwitchConfigResponse>(await this.callApi(params, req, runtime), new $_model.GetCommonSwitchConfigResponse({}));
  }

  /**
   * Queries the configuration of a common switch.
   * 
   * @param request - GetCommonSwitchConfigRequest
   * @returns GetCommonSwitchConfigResponse
   */
  async getCommonSwitchConfig(request: $_model.GetCommonSwitchConfigRequest): Promise<$_model.GetCommonSwitchConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCommonSwitchConfigWithOptions(request, runtime);
  }

  /**
   * Query whether the core function\\"s gray switch is hit
   * 
   * @param request - GetConsoleFuncGrayStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetConsoleFuncGrayStatusResponse
   */
  async getConsoleFuncGrayStatusWithOptions(request: $_model.GetConsoleFuncGrayStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetConsoleFuncGrayStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.condition)) {
      query["Condition"] = request.condition;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetConsoleFuncGrayStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetConsoleFuncGrayStatusResponse>(await this.callApi(params, req, runtime), new $_model.GetConsoleFuncGrayStatusResponse({}));
  }

  /**
   * Query whether the core function\\"s gray switch is hit
   * 
   * @param request - GetConsoleFuncGrayStatusRequest
   * @returns GetConsoleFuncGrayStatusResponse
   */
  async getConsoleFuncGrayStatus(request: $_model.GetConsoleFuncGrayStatusRequest): Promise<$_model.GetConsoleFuncGrayStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getConsoleFuncGrayStatusWithOptions(request, runtime);
  }

  /**
   * Queries the details of a rule for non-image program defense.
   * 
   * @param request - GetContainerDefenseRuleDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetContainerDefenseRuleDetailResponse
   */
  async getContainerDefenseRuleDetailWithOptions(request: $_model.GetContainerDefenseRuleDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetContainerDefenseRuleDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetContainerDefenseRuleDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetContainerDefenseRuleDetailResponse>(await this.callApi(params, req, runtime), new $_model.GetContainerDefenseRuleDetailResponse({}));
  }

  /**
   * Queries the details of a rule for non-image program defense.
   * 
   * @param request - GetContainerDefenseRuleDetailRequest
   * @returns GetContainerDefenseRuleDetailResponse
   */
  async getContainerDefenseRuleDetail(request: $_model.GetContainerDefenseRuleDetailRequest): Promise<$_model.GetContainerDefenseRuleDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getContainerDefenseRuleDetailWithOptions(request, runtime);
  }

  /**
   * Queries the publish details of the Security Center agent.
   * 
   * @param request - GetCurrentVersionPublishRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCurrentVersionPublishResponse
   */
  async getCurrentVersionPublishWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetCurrentVersionPublishResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetCurrentVersionPublish",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetCurrentVersionPublishResponse>(await this.callApi(params, req, runtime), new $_model.GetCurrentVersionPublishResponse({}));
  }

  /**
   * Queries the publish details of the Security Center agent.
   * @returns GetCurrentVersionPublishResponse
   */
  async getCurrentVersionPublish(): Promise<$_model.GetCurrentVersionPublishResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCurrentVersionPublishWithOptions(runtime);
  }

  /**
   * Queries the security operations trends of the vulnerabilities, alerts, and baseline risks.
   * 
   * @param request - GetDataTrendRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDataTrendResponse
   */
  async getDataTrendWithOptions(request: $_model.GetDataTrendRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetDataTrendResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bizTypes)) {
      query["BizTypes"] = request.bizTypes;
    }

    if (!$dara.isNull(request.endTimestamp)) {
      query["EndTimestamp"] = request.endTimestamp;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.startTimestamp)) {
      query["StartTimestamp"] = request.startTimestamp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDataTrend",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetDataTrendResponse>(await this.callApi(params, req, runtime), new $_model.GetDataTrendResponse({}));
  }

  /**
   * Queries the security operations trends of the vulnerabilities, alerts, and baseline risks.
   * 
   * @param request - GetDataTrendRequest
   * @returns GetDataTrendResponse
   */
  async getDataTrend(request: $_model.GetDataTrendRequest): Promise<$_model.GetDataTrendResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDataTrendWithOptions(request, runtime);
  }

  /**
   * Queries the numbers of handled alerts of the precision defense type and the web tamper proofing type.
   * 
   * @param request - GetDefenceCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDefenceCountResponse
   */
  async getDefenceCountWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetDefenceCountResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetDefenceCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetDefenceCountResponse>(await this.callApi(params, req, runtime), new $_model.GetDefenceCountResponse({}));
  }

  /**
   * Queries the numbers of handled alerts of the precision defense type and the web tamper proofing type.
   * @returns GetDefenceCountResponse
   */
  async getDefenceCount(): Promise<$_model.GetDefenceCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDefenceCountWithOptions(runtime);
  }

  /**
   * Queries the ranking of images in each dimension.
   * 
   * @param request - GetDockerhubImageRiskRankInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDockerhubImageRiskRankInfoResponse
   */
  async getDockerhubImageRiskRankInfoWithOptions(request: $_model.GetDockerhubImageRiskRankInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetDockerhubImageRiskRankInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.types)) {
      query["Types"] = request.types;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDockerhubImageRiskRankInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetDockerhubImageRiskRankInfoResponse>(await this.callApi(params, req, runtime), new $_model.GetDockerhubImageRiskRankInfoResponse({}));
  }

  /**
   * Queries the ranking of images in each dimension.
   * 
   * @param request - GetDockerhubImageRiskRankInfoRequest
   * @returns GetDockerhubImageRiskRankInfoResponse
   */
  async getDockerhubImageRiskRankInfo(request: $_model.GetDockerhubImageRiskRankInfoRequest): Promise<$_model.GetDockerhubImageRiskRankInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDockerhubImageRiskRankInfoWithOptions(request, runtime);
  }

  /**
   * Query the statistical counts of images across various dimensions.
   * 
   * @param request - GetDockerhubImageRiskStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDockerhubImageRiskStatisticResponse
   */
  async getDockerhubImageRiskStatisticWithOptions(request: $_model.GetDockerhubImageRiskStatisticRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetDockerhubImageRiskStatisticResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.types)) {
      query["Types"] = request.types;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDockerhubImageRiskStatistic",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetDockerhubImageRiskStatisticResponse>(await this.callApi(params, req, runtime), new $_model.GetDockerhubImageRiskStatisticResponse({}));
  }

  /**
   * Query the statistical counts of images across various dimensions.
   * 
   * @param request - GetDockerhubImageRiskStatisticRequest
   * @returns GetDockerhubImageRiskStatisticResponse
   */
  async getDockerhubImageRiskStatistic(request: $_model.GetDockerhubImageRiskStatisticRequest): Promise<$_model.GetDockerhubImageRiskStatisticResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDockerhubImageRiskStatisticWithOptions(request, runtime);
  }

  /**
   * Obtains the usage information of the malicious file detection SDK.
   * 
   * @param request - GetFileDetectApiInvokeInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetFileDetectApiInvokeInfoResponse
   */
  async getFileDetectApiInvokeInfoWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetFileDetectApiInvokeInfoResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetFileDetectApiInvokeInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetFileDetectApiInvokeInfoResponse>(await this.callApi(params, req, runtime), new $_model.GetFileDetectApiInvokeInfoResponse({}));
  }

  /**
   * Obtains the usage information of the malicious file detection SDK.
   * @returns GetFileDetectApiInvokeInfoResponse
   */
  async getFileDetectApiInvokeInfo(): Promise<$_model.GetFileDetectApiInvokeInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getFileDetectApiInvokeInfoWithOptions(runtime);
  }

  /**
   * Queries the cloud sandbox check results of malicious files.
   * 
   * @param request - GetFileDetectReportRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetFileDetectReportResponse
   */
  async getFileDetectReportWithOptions(request: $_model.GetFileDetectReportRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetFileDetectReportResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eventId)) {
      query["EventId"] = request.eventId;
    }

    if (!$dara.isNull(request.field)) {
      query["Field"] = request.field;
    }

    if (!$dara.isNull(request.fileHash)) {
      query["FileHash"] = request.fileHash;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceType)) {
      query["SourceType"] = request.sourceType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetFileDetectReport",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetFileDetectReportResponse>(await this.callApi(params, req, runtime), new $_model.GetFileDetectReportResponse({}));
  }

  /**
   * Queries the cloud sandbox check results of malicious files.
   * 
   * @param request - GetFileDetectReportRequest
   * @returns GetFileDetectReportResponse
   */
  async getFileDetectReport(request: $_model.GetFileDetectReportRequest): Promise<$_model.GetFileDetectReportResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getFileDetectReportWithOptions(request, runtime);
  }

  /**
   * Obtains file detection results.
   * 
   * @remarks
   * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
   * 
   * @param request - GetFileDetectResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetFileDetectResultResponse
   */
  async getFileDetectResultWithOptions(request: $_model.GetFileDetectResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetFileDetectResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.hashKeyList)) {
      query["HashKeyList"] = request.hashKeyList;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetFileDetectResult",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetFileDetectResultResponse>(await this.callApi(params, req, runtime), new $_model.GetFileDetectResultResponse({}));
  }

  /**
   * Obtains file detection results.
   * 
   * @remarks
   * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
   * 
   * @param request - GetFileDetectResultRequest
   * @returns GetFileDetectResultResponse
   */
  async getFileDetectResult(request: $_model.GetFileDetectResultRequest): Promise<$_model.GetFileDetectResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getFileDetectResultWithOptions(request, runtime);
  }

  /**
   * Queries information about the core file monitoring feature, including the number of effective rules and the installation status of the Security Center agent on servers.
   * 
   * @param request - GetFileProtectDashboardRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetFileProtectDashboardResponse
   */
  async getFileProtectDashboardWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetFileProtectDashboardResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetFileProtectDashboard",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetFileProtectDashboardResponse>(await this.callApi(params, req, runtime), new $_model.GetFileProtectDashboardResponse({}));
  }

  /**
   * Queries information about the core file monitoring feature, including the number of effective rules and the installation status of the Security Center agent on servers.
   * @returns GetFileProtectDashboardResponse
   */
  async getFileProtectDashboard(): Promise<$_model.GetFileProtectDashboardResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getFileProtectDashboardWithOptions(runtime);
  }

  /**
   * Queries information about core file monitoring events.
   * 
   * @param request - GetFileProtectEventRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetFileProtectEventResponse
   */
  async getFileProtectEventWithOptions(request: $_model.GetFileProtectEventRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetFileProtectEventResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetFileProtectEvent",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetFileProtectEventResponse>(await this.callApi(params, req, runtime), new $_model.GetFileProtectEventResponse({}));
  }

  /**
   * Queries information about core file monitoring events.
   * 
   * @param request - GetFileProtectEventRequest
   * @returns GetFileProtectEventResponse
   */
  async getFileProtectEvent(request: $_model.GetFileProtectEventRequest): Promise<$_model.GetFileProtectEventResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getFileProtectEventWithOptions(request, runtime);
  }

  /**
   * Queries the total number of core file monitoring events by filter condition.
   * 
   * @param request - GetFileProtectEventCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetFileProtectEventCountResponse
   */
  async getFileProtectEventCountWithOptions(request: $_model.GetFileProtectEventCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetFileProtectEventCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetFileProtectEventCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetFileProtectEventCountResponse>(await this.callApi(params, req, runtime), new $_model.GetFileProtectEventCountResponse({}));
  }

  /**
   * Queries the total number of core file monitoring events by filter condition.
   * 
   * @param request - GetFileProtectEventCountRequest
   * @returns GetFileProtectEventCountResponse
   */
  async getFileProtectEventCount(request: $_model.GetFileProtectEventCountRequest): Promise<$_model.GetFileProtectEventCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getFileProtectEventCountWithOptions(request, runtime);
  }

  /**
   * Queries the information about a core file monitoring rule based on the ID of the rule.
   * 
   * @param request - GetFileProtectRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetFileProtectRuleResponse
   */
  async getFileProtectRuleWithOptions(request: $_model.GetFileProtectRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetFileProtectRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetFileProtectRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetFileProtectRuleResponse>(await this.callApi(params, req, runtime), new $_model.GetFileProtectRuleResponse({}));
  }

  /**
   * Queries the information about a core file monitoring rule based on the ID of the rule.
   * 
   * @param request - GetFileProtectRuleRequest
   * @returns GetFileProtectRuleResponse
   */
  async getFileProtectRule(request: $_model.GetFileProtectRuleRequest): Promise<$_model.GetFileProtectRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getFileProtectRuleWithOptions(request, runtime);
  }

  /**
   * Queries the queries per second (QPS) limit on the files uploaded from the client.
   * 
   * @param request - GetFileUploadLimitRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetFileUploadLimitResponse
   */
  async getFileUploadLimitWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetFileUploadLimitResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetFileUploadLimit",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetFileUploadLimitResponse>(await this.callApi(params, req, runtime), new $_model.GetFileUploadLimitResponse({}));
  }

  /**
   * Queries the queries per second (QPS) limit on the files uploaded from the client.
   * @returns GetFileUploadLimitResponse
   */
  async getFileUploadLimit(): Promise<$_model.GetFileUploadLimitResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getFileUploadLimitWithOptions(runtime);
  }

  /**
   * Get Trial Status
   * 
   * @param request - GetFunctionTrialStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetFunctionTrialStatusResponse
   */
  async getFunctionTrialStatusWithOptions(request: $_model.GetFunctionTrialStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetFunctionTrialStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.functionName)) {
      query["FunctionName"] = request.functionName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetFunctionTrialStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetFunctionTrialStatusResponse>(await this.callApi(params, req, runtime), new $_model.GetFunctionTrialStatusResponse({}));
  }

  /**
   * Get Trial Status
   * 
   * @param request - GetFunctionTrialStatusRequest
   * @returns GetFunctionTrialStatusResponse
   */
  async getFunctionTrialStatus(request: $_model.GetFunctionTrialStatusRequest): Promise<$_model.GetFunctionTrialStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getFunctionTrialStatusWithOptions(request, runtime);
  }

  /**
   * Obtains the URL that is used to upload a file to a honeypot.
   * 
   * @param request - GetHoneyPotUploadPolicyInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetHoneyPotUploadPolicyInfoResponse
   */
  async getHoneyPotUploadPolicyInfoWithOptions(request: $_model.GetHoneyPotUploadPolicyInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetHoneyPotUploadPolicyInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetHoneyPotUploadPolicyInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetHoneyPotUploadPolicyInfoResponse>(await this.callApi(params, req, runtime), new $_model.GetHoneyPotUploadPolicyInfoResponse({}));
  }

  /**
   * Obtains the URL that is used to upload a file to a honeypot.
   * 
   * @param request - GetHoneyPotUploadPolicyInfoRequest
   * @returns GetHoneyPotUploadPolicyInfoResponse
   */
  async getHoneyPotUploadPolicyInfo(request: $_model.GetHoneyPotUploadPolicyInfoRequest): Promise<$_model.GetHoneyPotUploadPolicyInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getHoneyPotUploadPolicyInfoWithOptions(request, runtime);
  }

  /**
   * 获取蜜罐攻击统计数据
   * 
   * @param request - GetHoneypotAttackStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetHoneypotAttackStatisticsResponse
   */
  async getHoneypotAttackStatisticsWithOptions(request: $_model.GetHoneypotAttackStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetHoneypotAttackStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTimeStamp)) {
      query["EndTimeStamp"] = request.endTimeStamp;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.riskLevelList)) {
      query["RiskLevelList"] = request.riskLevelList;
    }

    if (!$dara.isNull(request.srcIp)) {
      query["SrcIp"] = request.srcIp;
    }

    if (!$dara.isNull(request.startTimeStamp)) {
      query["StartTimeStamp"] = request.startTimeStamp;
    }

    if (!$dara.isNull(request.statisticsType)) {
      query["StatisticsType"] = request.statisticsType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetHoneypotAttackStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetHoneypotAttackStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.GetHoneypotAttackStatisticsResponse({}));
  }

  /**
   * 获取蜜罐攻击统计数据
   * 
   * @param request - GetHoneypotAttackStatisticsRequest
   * @returns GetHoneypotAttackStatisticsResponse
   */
  async getHoneypotAttackStatistics(request: $_model.GetHoneypotAttackStatisticsRequest): Promise<$_model.GetHoneypotAttackStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getHoneypotAttackStatisticsWithOptions(request, runtime);
  }

  /**
   * Obtain attack trend statistics for a single attack source.
   * 
   * @param request - GetHoneypotEventTrendRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetHoneypotEventTrendResponse
   */
  async getHoneypotEventTrendWithOptions(request: $_model.GetHoneypotEventTrendRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetHoneypotEventTrendResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTimeStamp)) {
      query["EndTimeStamp"] = request.endTimeStamp;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.riskLevelList)) {
      query["RiskLevelList"] = request.riskLevelList;
    }

    if (!$dara.isNull(request.srcIp)) {
      query["SrcIp"] = request.srcIp;
    }

    if (!$dara.isNull(request.startTimeStamp)) {
      query["StartTimeStamp"] = request.startTimeStamp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetHoneypotEventTrend",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetHoneypotEventTrendResponse>(await this.callApi(params, req, runtime), new $_model.GetHoneypotEventTrendResponse({}));
  }

  /**
   * Obtain attack trend statistics for a single attack source.
   * 
   * @param request - GetHoneypotEventTrendRequest
   * @returns GetHoneypotEventTrendResponse
   */
  async getHoneypotEventTrend(request: $_model.GetHoneypotEventTrendRequest): Promise<$_model.GetHoneypotEventTrendResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getHoneypotEventTrendWithOptions(request, runtime);
  }

  /**
   * Queries the details of a specified management node.
   * 
   * @param request - GetHoneypotNodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetHoneypotNodeResponse
   */
  async getHoneypotNodeWithOptions(request: $_model.GetHoneypotNodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetHoneypotNodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetHoneypotNode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetHoneypotNodeResponse>(await this.callApi(params, req, runtime), new $_model.GetHoneypotNodeResponse({}));
  }

  /**
   * Queries the details of a specified management node.
   * 
   * @param request - GetHoneypotNodeRequest
   * @returns GetHoneypotNodeResponse
   */
  async getHoneypotNode(request: $_model.GetHoneypotNodeRequest): Promise<$_model.GetHoneypotNodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getHoneypotNodeWithOptions(request, runtime);
  }

  /**
   * Queries the monitoring data of management nodes to which the cloud honeypot belongs.
   * 
   * @param request - GetHoneypotNodeMetricListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetHoneypotNodeMetricListResponse
   */
  async getHoneypotNodeMetricListWithOptions(request: $_model.GetHoneypotNodeMetricListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetHoneypotNodeMetricListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.express)) {
      query["Express"] = request.express;
    }

    if (!$dara.isNull(request.length)) {
      query["Length"] = request.length;
    }

    if (!$dara.isNull(request.metricName)) {
      query["MetricName"] = request.metricName;
    }

    if (!$dara.isNull(request.namespace)) {
      query["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetHoneypotNodeMetricList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetHoneypotNodeMetricListResponse>(await this.callApi(params, req, runtime), new $_model.GetHoneypotNodeMetricListResponse({}));
  }

  /**
   * Queries the monitoring data of management nodes to which the cloud honeypot belongs.
   * 
   * @param request - GetHoneypotNodeMetricListRequest
   * @returns GetHoneypotNodeMetricListResponse
   */
  async getHoneypotNodeMetricList(request: $_model.GetHoneypotNodeMetricListRequest): Promise<$_model.GetHoneypotNodeMetricListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getHoneypotNodeMetricListWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of a specified honeypot template.
   * 
   * @param request - GetHoneypotPresetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetHoneypotPresetResponse
   */
  async getHoneypotPresetWithOptions(request: $_model.GetHoneypotPresetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetHoneypotPresetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.honeypotPresetId)) {
      query["HoneypotPresetId"] = request.honeypotPresetId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetHoneypotPreset",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetHoneypotPresetResponse>(await this.callApi(params, req, runtime), new $_model.GetHoneypotPresetResponse({}));
  }

  /**
   * Queries the configurations of a specified honeypot template.
   * 
   * @param request - GetHoneypotPresetRequest
   * @returns GetHoneypotPresetResponse
   */
  async getHoneypotPreset(request: $_model.GetHoneypotPresetRequest): Promise<$_model.GetHoneypotPresetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getHoneypotPresetWithOptions(request, runtime);
  }

  /**
   * Queries the details about a specified probe.
   * 
   * @param request - GetHoneypotProbeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetHoneypotProbeResponse
   */
  async getHoneypotProbeWithOptions(request: $_model.GetHoneypotProbeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetHoneypotProbeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.probeId)) {
      query["ProbeId"] = request.probeId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetHoneypotProbe",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetHoneypotProbeResponse>(await this.callApi(params, req, runtime), new $_model.GetHoneypotProbeResponse({}));
  }

  /**
   * Queries the details about a specified probe.
   * 
   * @param request - GetHoneypotProbeRequest
   * @returns GetHoneypotProbeResponse
   */
  async getHoneypotProbe(request: $_model.GetHoneypotProbeRequest): Promise<$_model.GetHoneypotProbeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getHoneypotProbeWithOptions(request, runtime);
  }

  /**
   * 获取蜜罐使用量的统计数据
   * 
   * @param request - GetHoneypotStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetHoneypotStatisticsResponse
   */
  async getHoneypotStatisticsWithOptions(request: $_model.GetHoneypotStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetHoneypotStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetHoneypotStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetHoneypotStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.GetHoneypotStatisticsResponse({}));
  }

  /**
   * 获取蜜罐使用量的统计数据
   * 
   * @param request - GetHoneypotStatisticsRequest
   * @returns GetHoneypotStatisticsResponse
   */
  async getHoneypotStatistics(request: $_model.GetHoneypotStatisticsRequest): Promise<$_model.GetHoneypotStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getHoneypotStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries alert handling rules.
   * 
   * @param request - GetImageEventOperationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetImageEventOperationResponse
   */
  async getImageEventOperationWithOptions(request: $_model.GetImageEventOperationRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetImageEventOperationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetImageEventOperation",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetImageEventOperationResponse>(await this.callApi(params, req, runtime), new $_model.GetImageEventOperationResponse({}));
  }

  /**
   * Queries alert handling rules.
   * 
   * @param request - GetImageEventOperationRequest
   * @returns GetImageEventOperationResponse
   */
  async getImageEventOperation(request: $_model.GetImageEventOperationRequest): Promise<$_model.GetImageEventOperationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getImageEventOperationWithOptions(request, runtime);
  }

  /**
   * Queries the number of image scans that are performed within the last several days.
   * 
   * @param request - GetImageScanNumInPeriodRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetImageScanNumInPeriodResponse
   */
  async getImageScanNumInPeriodWithOptions(request: $_model.GetImageScanNumInPeriodRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetImageScanNumInPeriodResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pastDay)) {
      query["PastDay"] = request.pastDay;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetImageScanNumInPeriod",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetImageScanNumInPeriodResponse>(await this.callApi(params, req, runtime), new $_model.GetImageScanNumInPeriodResponse({}));
  }

  /**
   * Queries the number of image scans that are performed within the last several days.
   * 
   * @param request - GetImageScanNumInPeriodRequest
   * @returns GetImageScanNumInPeriodResponse
   */
  async getImageScanNumInPeriod(request: $_model.GetImageScanNumInPeriodRequest): Promise<$_model.GetImageScanNumInPeriodResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getImageScanNumInPeriodWithOptions(request, runtime);
  }

  /**
   * Query Asset Installation Code
   * 
   * @param request - GetInstallCodeForUuidRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetInstallCodeForUuidResponse
   */
  async getInstallCodeForUuidWithOptions(request: $_model.GetInstallCodeForUuidRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetInstallCodeForUuidResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetInstallCodeForUuid",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetInstallCodeForUuidResponse>(await this.callApi(params, req, runtime), new $_model.GetInstallCodeForUuidResponse({}));
  }

  /**
   * Query Asset Installation Code
   * 
   * @param request - GetInstallCodeForUuidRequest
   * @returns GetInstallCodeForUuidResponse
   */
  async getInstallCodeForUuid(request: $_model.GetInstallCodeForUuidRequest): Promise<$_model.GetInstallCodeForUuidResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getInstallCodeForUuidWithOptions(request, runtime);
  }

  /**
   * Count the number of security events for a single instance
   * 
   * @param request - GetInstanceAlarmStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetInstanceAlarmStatisticsResponse
   */
  async getInstanceAlarmStatisticsWithOptions(request: $_model.GetInstanceAlarmStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetInstanceAlarmStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetInstanceAlarmStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetInstanceAlarmStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.GetInstanceAlarmStatisticsResponse({}));
  }

  /**
   * Count the number of security events for a single instance
   * 
   * @param request - GetInstanceAlarmStatisticsRequest
   * @returns GetInstanceAlarmStatisticsResponse
   */
  async getInstanceAlarmStatistics(request: $_model.GetInstanceAlarmStatisticsRequest): Promise<$_model.GetInstanceAlarmStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getInstanceAlarmStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the details of a microsegmentation defense rule.
   * 
   * @param request - GetInterceptionRuleDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetInterceptionRuleDetailResponse
   */
  async getInterceptionRuleDetailWithOptions(request: $_model.GetInterceptionRuleDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetInterceptionRuleDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetInterceptionRuleDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetInterceptionRuleDetailResponse>(await this.callApi(params, req, runtime), new $_model.GetInterceptionRuleDetailResponse({}));
  }

  /**
   * Queries the details of a microsegmentation defense rule.
   * 
   * @param request - GetInterceptionRuleDetailRequest
   * @returns GetInterceptionRuleDetailResponse
   */
  async getInterceptionRuleDetail(request: $_model.GetInterceptionRuleDetailRequest): Promise<$_model.GetInterceptionRuleDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getInterceptionRuleDetailWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of the container firewall feature.
   * 
   * @param request - GetInterceptionSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetInterceptionSummaryResponse
   */
  async getInterceptionSummaryWithOptions(request: $_model.GetInterceptionSummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetInterceptionSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetInterceptionSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetInterceptionSummaryResponse>(await this.callApi(params, req, runtime), new $_model.GetInterceptionSummaryResponse({}));
  }

  /**
   * Queries the statistics of the container firewall feature.
   * 
   * @param request - GetInterceptionSummaryRequest
   * @returns GetInterceptionSummaryResponse
   */
  async getInterceptionSummary(request: $_model.GetInterceptionSummaryRequest): Promise<$_model.GetInterceptionSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getInterceptionSummaryWithOptions(request, runtime);
  }

  /**
   * Queries the information about a specified network object that is protected by the container firewall feature.
   * 
   * @param request - GetInterceptionTargetDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetInterceptionTargetDetailResponse
   */
  async getInterceptionTargetDetailWithOptions(request: $_model.GetInterceptionTargetDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetInterceptionTargetDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.targetId)) {
      query["TargetId"] = request.targetId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetInterceptionTargetDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetInterceptionTargetDetailResponse>(await this.callApi(params, req, runtime), new $_model.GetInterceptionTargetDetailResponse({}));
  }

  /**
   * Queries the information about a specified network object that is protected by the container firewall feature.
   * 
   * @param request - GetInterceptionTargetDetailRequest
   * @returns GetInterceptionTargetDetailResponse
   */
  async getInterceptionTargetDetail(request: $_model.GetInterceptionTargetDetailRequest): Promise<$_model.GetInterceptionTargetDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getInterceptionTargetDetailWithOptions(request, runtime);
  }

  /**
   * Queries information about the latest scan task to determine whether the task is complete.
   * 
   * @param request - GetLastOnceTaskInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetLastOnceTaskInfoResponse
   */
  async getLastOnceTaskInfoWithOptions(request: $_model.GetLastOnceTaskInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetLastOnceTaskInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetLastOnceTaskInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetLastOnceTaskInfoResponse>(await this.callApi(params, req, runtime), new $_model.GetLastOnceTaskInfoResponse({}));
  }

  /**
   * Queries information about the latest scan task to determine whether the task is complete.
   * 
   * @param request - GetLastOnceTaskInfoRequest
   * @returns GetLastOnceTaskInfoResponse
   */
  async getLastOnceTaskInfo(request: $_model.GetLastOnceTaskInfoRequest): Promise<$_model.GetLastOnceTaskInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getLastOnceTaskInfoWithOptions(request, runtime);
  }

  /**
   * Obtains the default region for synchronizing assets outside Alibaba Cloud.
   * 
   * @param request - GetLocalDefaultRegionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetLocalDefaultRegionResponse
   */
  async getLocalDefaultRegionWithOptions(request: $_model.GetLocalDefaultRegionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetLocalDefaultRegionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.vendor)) {
      query["Vendor"] = request.vendor;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetLocalDefaultRegion",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetLocalDefaultRegionResponse>(await this.callApi(params, req, runtime), new $_model.GetLocalDefaultRegionResponse({}));
  }

  /**
   * Obtains the default region for synchronizing assets outside Alibaba Cloud.
   * 
   * @param request - GetLocalDefaultRegionRequest
   * @returns GetLocalDefaultRegionResponse
   */
  async getLocalDefaultRegion(request: $_model.GetLocalDefaultRegionRequest): Promise<$_model.GetLocalDefaultRegionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getLocalDefaultRegionWithOptions(request, runtime);
  }

  /**
   * Queries the status of a data shipping task of a log.
   * 
   * @param request - GetLogMetaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetLogMetaResponse
   */
  async getLogMetaWithOptions(request: $_model.GetLogMetaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetLogMetaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.logStore)) {
      query["LogStore"] = request.logStore;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetLogMeta",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetLogMetaResponse>(await this.callApi(params, req, runtime), new $_model.GetLogMetaResponse({}));
  }

  /**
   * Queries the status of a data shipping task of a log.
   * 
   * @param request - GetLogMetaRequest
   * @returns GetLogMetaResponse
   */
  async getLogMeta(request: $_model.GetLogMetaRequest): Promise<$_model.GetLogMetaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getLogMetaWithOptions(request, runtime);
  }

  /**
   * Queries an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
   * 
   * @param request - GetMaliciousFileWhitelistConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetMaliciousFileWhitelistConfigResponse
   */
  async getMaliciousFileWhitelistConfigWithOptions(request: $_model.GetMaliciousFileWhitelistConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetMaliciousFileWhitelistConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configId)) {
      query["ConfigId"] = request.configId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetMaliciousFileWhitelistConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetMaliciousFileWhitelistConfigResponse>(await this.callApi(params, req, runtime), new $_model.GetMaliciousFileWhitelistConfigResponse({}));
  }

  /**
   * Queries an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
   * 
   * @param request - GetMaliciousFileWhitelistConfigRequest
   * @returns GetMaliciousFileWhitelistConfigResponse
   */
  async getMaliciousFileWhitelistConfig(request: $_model.GetMaliciousFileWhitelistConfigRequest): Promise<$_model.GetMaliciousFileWhitelistConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getMaliciousFileWhitelistConfigWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of a module.
   * 
   * @param request - GetModuleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetModuleConfigResponse
   */
  async getModuleConfigWithOptions(request: $_model.GetModuleConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetModuleConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetModuleConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetModuleConfigResponse>(await this.callApi(params, req, runtime), new $_model.GetModuleConfigResponse({}));
  }

  /**
   * Queries the configurations of a module.
   * 
   * @param request - GetModuleConfigRequest
   * @returns GetModuleConfigResponse
   */
  async getModuleConfig(request: $_model.GetModuleConfigRequest): Promise<$_model.GetModuleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getModuleConfigWithOptions(request, runtime);
  }

  /**
   * Checks whether the purchased Security Center features are enabled and whether related configurations take effect.
   * 
   * @param tmpReq - GetModuleConfigStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetModuleConfigStatusResponse
   */
  async getModuleConfigStatusWithOptions(tmpReq: $_model.GetModuleConfigStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetModuleConfigStatusResponse> {
    tmpReq.validate();
    let request = new $_model.GetModuleConfigStatusShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.moduleNames)) {
      request.moduleNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.moduleNames, "ModuleNames", "json");
    }

    let query = { };
    if (!$dara.isNull(request.moduleNamesShrink)) {
      query["ModuleNames"] = request.moduleNamesShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetModuleConfigStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetModuleConfigStatusResponse>(await this.callApi(params, req, runtime), new $_model.GetModuleConfigStatusResponse({}));
  }

  /**
   * Checks whether the purchased Security Center features are enabled and whether related configurations take effect.
   * 
   * @param request - GetModuleConfigStatusRequest
   * @returns GetModuleConfigStatusResponse
   */
  async getModuleConfigStatus(request: $_model.GetModuleConfigStatusRequest): Promise<$_model.GetModuleConfigStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getModuleConfigStatusWithOptions(request, runtime);
  }

  /**
   * Queries the qualification information about the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
   * 
   * @param request - GetModuleTrialAuthInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetModuleTrialAuthInfoResponse
   */
  async getModuleTrialAuthInfoWithOptions(request: $_model.GetModuleTrialAuthInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetModuleTrialAuthInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.moduleCode)) {
      query["ModuleCode"] = request.moduleCode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetModuleTrialAuthInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetModuleTrialAuthInfoResponse>(await this.callApi(params, req, runtime), new $_model.GetModuleTrialAuthInfoResponse({}));
  }

  /**
   * Queries the qualification information about the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
   * 
   * @param request - GetModuleTrialAuthInfoRequest
   * @returns GetModuleTrialAuthInfoResponse
   */
  async getModuleTrialAuthInfo(request: $_model.GetModuleTrialAuthInfoRequest): Promise<$_model.GetModuleTrialAuthInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getModuleTrialAuthInfoWithOptions(request, runtime);
  }

  /**
   * Queries the details of an alert event that is generated for a malicious object.
   * 
   * @param request - GetObjectScanEventRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetObjectScanEventResponse
   */
  async getObjectScanEventWithOptions(request: $_model.GetObjectScanEventRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetObjectScanEventResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eventId)) {
      query["EventId"] = request.eventId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetObjectScanEvent",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetObjectScanEventResponse>(await this.callApi(params, req, runtime), new $_model.GetObjectScanEventResponse({}));
  }

  /**
   * Queries the details of an alert event that is generated for a malicious object.
   * 
   * @param request - GetObjectScanEventRequest
   * @returns GetObjectScanEventResponse
   */
  async getObjectScanEvent(request: $_model.GetObjectScanEventRequest): Promise<$_model.GetObjectScanEventResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getObjectScanEventWithOptions(request, runtime);
  }

  /**
   * Queries the execution result of a one-time scan task, such as asset fingerprint collection, vulnerability scan, and image security scan.
   * 
   * @param request - GetOnceTaskResultInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOnceTaskResultInfoResponse
   */
  async getOnceTaskResultInfoWithOptions(request: $_model.GetOnceTaskResultInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetOnceTaskResultInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOnceTaskResultInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetOnceTaskResultInfoResponse>(await this.callApi(params, req, runtime), new $_model.GetOnceTaskResultInfoResponse({}));
  }

  /**
   * Queries the execution result of a one-time scan task, such as asset fingerprint collection, vulnerability scan, and image security scan.
   * 
   * @param request - GetOnceTaskResultInfoRequest
   * @returns GetOnceTaskResultInfoResponse
   */
  async getOnceTaskResultInfo(request: $_model.GetOnceTaskResultInfoRequest): Promise<$_model.GetOnceTaskResultInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOnceTaskResultInfoWithOptions(request, runtime);
  }

  /**
   * Queries the baselines that are supported by at-risk image blocking.
   * 
   * @param request - GetOpaClusterBaseLineListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOpaClusterBaseLineListResponse
   */
  async getOpaClusterBaseLineListWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetOpaClusterBaseLineListResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetOpaClusterBaseLineList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetOpaClusterBaseLineListResponse>(await this.callApi(params, req, runtime), new $_model.GetOpaClusterBaseLineListResponse({}));
  }

  /**
   * Queries the baselines that are supported by at-risk image blocking.
   * @returns GetOpaClusterBaseLineListResponse
   */
  async getOpaClusterBaseLineList(): Promise<$_model.GetOpaClusterBaseLineListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOpaClusterBaseLineListWithOptions(runtime);
  }

  /**
   * 查询集群镜像
   * 
   * @param request - GetOpaClusterImageListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOpaClusterImageListResponse
   */
  async getOpaClusterImageListWithOptions(request: $_model.GetOpaClusterImageListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetOpaClusterImageListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.imageName)) {
      query["ImageName"] = request.imageName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOpaClusterImageList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetOpaClusterImageListResponse>(await this.callApi(params, req, runtime), new $_model.GetOpaClusterImageListResponse({}));
  }

  /**
   * 查询集群镜像
   * 
   * @param request - GetOpaClusterImageListRequest
   * @returns GetOpaClusterImageListResponse
   */
  async getOpaClusterImageList(request: $_model.GetOpaClusterImageListRequest): Promise<$_model.GetOpaClusterImageListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOpaClusterImageListWithOptions(request, runtime);
  }

  /**
   * Queries information about the tags that are added to containers based on the feature of proactive defense for containers.
   * 
   * @param request - GetOpaClusterLabelListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOpaClusterLabelListResponse
   */
  async getOpaClusterLabelListWithOptions(request: $_model.GetOpaClusterLabelListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetOpaClusterLabelListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.tagName)) {
      query["TagName"] = request.tagName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOpaClusterLabelList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetOpaClusterLabelListResponse>(await this.callApi(params, req, runtime), new $_model.GetOpaClusterLabelListResponse({}));
  }

  /**
   * Queries information about the tags that are added to containers based on the feature of proactive defense for containers.
   * 
   * @param request - GetOpaClusterLabelListRequest
   * @returns GetOpaClusterLabelListResponse
   */
  async getOpaClusterLabelList(request: $_model.GetOpaClusterLabelListRequest): Promise<$_model.GetOpaClusterLabelListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOpaClusterLabelListWithOptions(request, runtime);
  }

  /**
   * Queries information about the namespaces of clusters for which the rules of the at-risk image blocking type are configured in proactive defense for containers.
   * 
   * @param request - GetOpaClusterNamespaceListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOpaClusterNamespaceListResponse
   */
  async getOpaClusterNamespaceListWithOptions(request: $_model.GetOpaClusterNamespaceListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetOpaClusterNamespaceListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.nameSpaceName)) {
      query["NameSpaceName"] = request.nameSpaceName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOpaClusterNamespaceList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetOpaClusterNamespaceListResponse>(await this.callApi(params, req, runtime), new $_model.GetOpaClusterNamespaceListResponse({}));
  }

  /**
   * Queries information about the namespaces of clusters for which the rules of the at-risk image blocking type are configured in proactive defense for containers.
   * 
   * @param request - GetOpaClusterNamespaceListRequest
   * @returns GetOpaClusterNamespaceListResponse
   */
  async getOpaClusterNamespaceList(request: $_model.GetOpaClusterNamespaceListRequest): Promise<$_model.GetOpaClusterNamespaceListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOpaClusterNamespaceListWithOptions(request, runtime);
  }

  /**
   * Queries the installation status of the components that are required for clusters protected by proactive defense for containers.
   * 
   * @param request - GetOpaPluginStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOpaPluginStatusResponse
   */
  async getOpaPluginStatusWithOptions(request: $_model.GetOpaPluginStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetOpaPluginStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterIds)) {
      query["ClusterIds"] = request.clusterIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOpaPluginStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetOpaPluginStatusResponse>(await this.callApi(params, req, runtime), new $_model.GetOpaPluginStatusResponse({}));
  }

  /**
   * Queries the installation status of the components that are required for clusters protected by proactive defense for containers.
   * 
   * @param request - GetOpaPluginStatusRequest
   * @returns GetOpaPluginStatusResponse
   */
  async getOpaPluginStatus(request: $_model.GetOpaPluginStatusRequest): Promise<$_model.GetOpaPluginStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOpaPluginStatusWithOptions(request, runtime);
  }

  /**
   * Queries the details of the rule that is used to block at-risk images.
   * 
   * @param request - GetOpaStrategyDetailNewRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOpaStrategyDetailNewResponse
   */
  async getOpaStrategyDetailNewWithOptions(request: $_model.GetOpaStrategyDetailNewRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetOpaStrategyDetailNewResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOpaStrategyDetailNew",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetOpaStrategyDetailNewResponse>(await this.callApi(params, req, runtime), new $_model.GetOpaStrategyDetailNewResponse({}));
  }

  /**
   * Queries the details of the rule that is used to block at-risk images.
   * 
   * @param request - GetOpaStrategyDetailNewRequest
   * @returns GetOpaStrategyDetailNewResponse
   */
  async getOpaStrategyDetailNew(request: $_model.GetOpaStrategyDetailNewRequest): Promise<$_model.GetOpaStrategyDetailNewResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOpaStrategyDetailNewWithOptions(request, runtime);
  }

  /**
   * Queries the usage statistics about the templates provided in the feature of proactive defense for containers for rules of the at-risk image blocking type.
   * 
   * @param request - GetOpaStrategyTemplateSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOpaStrategyTemplateSummaryResponse
   */
  async getOpaStrategyTemplateSummaryWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetOpaStrategyTemplateSummaryResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetOpaStrategyTemplateSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetOpaStrategyTemplateSummaryResponse>(await this.callApi(params, req, runtime), new $_model.GetOpaStrategyTemplateSummaryResponse({}));
  }

  /**
   * Queries the usage statistics about the templates provided in the feature of proactive defense for containers for rules of the at-risk image blocking type.
   * @returns GetOpaStrategyTemplateSummaryResponse
   */
  async getOpaStrategyTemplateSummary(): Promise<$_model.GetOpaStrategyTemplateSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOpaStrategyTemplateSummaryWithOptions(runtime);
  }

  /**
   * Queries the statistics about an Object Storage Service (OSS) bucket check.
   * 
   * @param request - GetOssBucketScanStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOssBucketScanStatisticResponse
   */
  async getOssBucketScanStatisticWithOptions(request: $_model.GetOssBucketScanStatisticRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetOssBucketScanStatisticResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bucketNameList)) {
      query["BucketNameList"] = request.bucketNameList;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOssBucketScanStatistic",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetOssBucketScanStatisticResponse>(await this.callApi(params, req, runtime), new $_model.GetOssBucketScanStatisticResponse({}));
  }

  /**
   * Queries the statistics about an Object Storage Service (OSS) bucket check.
   * 
   * @param request - GetOssBucketScanStatisticRequest
   * @returns GetOssBucketScanStatisticResponse
   */
  async getOssBucketScanStatistic(request: $_model.GetOssBucketScanStatisticRequest): Promise<$_model.GetOssBucketScanStatisticResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOssBucketScanStatisticWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of an Object Storage Service (OSS) bucket check policy.
   * 
   * @param request - GetOssScanConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetOssScanConfigResponse
   */
  async getOssScanConfigWithOptions(request: $_model.GetOssScanConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetOssScanConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bucketName)) {
      query["BucketName"] = request.bucketName;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetOssScanConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetOssScanConfigResponse>(await this.callApi(params, req, runtime), new $_model.GetOssScanConfigResponse({}));
  }

  /**
   * Queries the configurations of an Object Storage Service (OSS) bucket check policy.
   * 
   * @param request - GetOssScanConfigRequest
   * @returns GetOssScanConfigResponse
   */
  async getOssScanConfig(request: $_model.GetOssScanConfigRequest): Promise<$_model.GetOssScanConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getOssScanConfigWithOptions(request, runtime);
  }

  /**
   * Queries the configurations for the collection frequency of asset fingerprints.
   * 
   * @param request - GetPropertyScheduleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetPropertyScheduleConfigResponse
   */
  async getPropertyScheduleConfigWithOptions(request: $_model.GetPropertyScheduleConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetPropertyScheduleConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetPropertyScheduleConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetPropertyScheduleConfigResponse>(await this.callApi(params, req, runtime), new $_model.GetPropertyScheduleConfigResponse({}));
  }

  /**
   * Queries the configurations for the collection frequency of asset fingerprints.
   * 
   * @param request - GetPropertyScheduleConfigRequest
   * @returns GetPropertyScheduleConfigResponse
   */
  async getPropertyScheduleConfig(request: $_model.GetPropertyScheduleConfigRequest): Promise<$_model.GetPropertyScheduleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getPropertyScheduleConfigWithOptions(request, runtime);
  }

  /**
   * Get Publish Time Configuration
   * 
   * @param request - GetPublishCronRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetPublishCronResponse
   */
  async getPublishCronWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetPublishCronResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetPublishCron",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetPublishCronResponse>(await this.callApi(params, req, runtime), new $_model.GetPublishCronResponse({}));
  }

  /**
   * Get Publish Time Configuration
   * @returns GetPublishCronResponse
   */
  async getPublishCron(): Promise<$_model.GetPublishCronResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getPublishCronWithOptions(runtime);
  }

  /**
   * Queries the organizational structure of a resource directory by using the multi-account management feature.
   * 
   * @remarks
   * You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
   * 
   * @param request - GetRdTreeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetRdTreeResponse
   */
  async getRdTreeWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetRdTreeResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetRdTree",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetRdTreeResponse>(await this.callApi(params, req, runtime), new $_model.GetRdTreeResponse({}));
  }

  /**
   * Queries the organizational structure of a resource directory by using the multi-account management feature.
   * 
   * @remarks
   * You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
   * @returns GetRdTreeResponse
   */
  async getRdTree(): Promise<$_model.GetRdTreeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getRdTreeWithOptions(runtime);
  }

  /**
   * Query Image Scan Period.
   * 
   * @param request - GetRegistryScanDayNumRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetRegistryScanDayNumResponse
   */
  async getRegistryScanDayNumWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetRegistryScanDayNumResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetRegistryScanDayNum",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetRegistryScanDayNumResponse>(await this.callApi(params, req, runtime), new $_model.GetRegistryScanDayNumResponse({}));
  }

  /**
   * Query Image Scan Period.
   * @returns GetRegistryScanDayNumResponse
   */
  async getRegistryScanDayNum(): Promise<$_model.GetRegistryScanDayNumResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getRegistryScanDayNumWithOptions(runtime);
  }

  /**
   * Queries the numbers of system defense rules and custom defense rules.
   * 
   * @param request - GetRulesCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetRulesCountResponse
   */
  async getRulesCountWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetRulesCountResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetRulesCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetRulesCountResponse>(await this.callApi(params, req, runtime), new $_model.GetRulesCountResponse({}));
  }

  /**
   * Queries the numbers of system defense rules and custom defense rules.
   * @returns GetRulesCountResponse
   */
  async getRulesCount(): Promise<$_model.GetRulesCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getRulesCountWithOptions(runtime);
  }

  /**
   * Get Container File Defense Rule Details.
   * 
   * @param request - GetSasContainerWebDefenseRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSasContainerWebDefenseRuleResponse
   */
  async getSasContainerWebDefenseRuleWithOptions(request: $_model.GetSasContainerWebDefenseRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetSasContainerWebDefenseRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetSasContainerWebDefenseRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetSasContainerWebDefenseRuleResponse>(await this.callApi(params, req, runtime), new $_model.GetSasContainerWebDefenseRuleResponse({}));
  }

  /**
   * Get Container File Defense Rule Details.
   * 
   * @param request - GetSasContainerWebDefenseRuleRequest
   * @returns GetSasContainerWebDefenseRuleResponse
   */
  async getSasContainerWebDefenseRule(request: $_model.GetSasContainerWebDefenseRuleRequest): Promise<$_model.GetSasContainerWebDefenseRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getSasContainerWebDefenseRuleWithOptions(request, runtime);
  }

  /**
   * Queries the applications that are specified in a rule for container tamper-proofing.
   * 
   * @param request - GetSasContainerWebDefenseRuleApplicationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSasContainerWebDefenseRuleApplicationResponse
   */
  async getSasContainerWebDefenseRuleApplicationWithOptions(request: $_model.GetSasContainerWebDefenseRuleApplicationRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetSasContainerWebDefenseRuleApplicationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetSasContainerWebDefenseRuleApplication",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetSasContainerWebDefenseRuleApplicationResponse>(await this.callApi(params, req, runtime), new $_model.GetSasContainerWebDefenseRuleApplicationResponse({}));
  }

  /**
   * Queries the applications that are specified in a rule for container tamper-proofing.
   * 
   * @param request - GetSasContainerWebDefenseRuleApplicationRequest
   * @returns GetSasContainerWebDefenseRuleApplicationResponse
   */
  async getSasContainerWebDefenseRuleApplication(request: $_model.GetSasContainerWebDefenseRuleApplicationRequest): Promise<$_model.GetSasContainerWebDefenseRuleApplicationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getSasContainerWebDefenseRuleApplicationWithOptions(request, runtime);
  }

  /**
   * Queries search conditions that can be used to search for container file protection rules.
   * 
   * @param request - GetSasContainerWebDefenseRuleCriteriaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSasContainerWebDefenseRuleCriteriaResponse
   */
  async getSasContainerWebDefenseRuleCriteriaWithOptions(request: $_model.GetSasContainerWebDefenseRuleCriteriaRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetSasContainerWebDefenseRuleCriteriaResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.value)) {
      query["Value"] = request.value;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetSasContainerWebDefenseRuleCriteria",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetSasContainerWebDefenseRuleCriteriaResponse>(await this.callApi(params, req, runtime), new $_model.GetSasContainerWebDefenseRuleCriteriaResponse({}));
  }

  /**
   * Queries search conditions that can be used to search for container file protection rules.
   * 
   * @param request - GetSasContainerWebDefenseRuleCriteriaRequest
   * @returns GetSasContainerWebDefenseRuleCriteriaResponse
   */
  async getSasContainerWebDefenseRuleCriteria(request: $_model.GetSasContainerWebDefenseRuleCriteriaRequest): Promise<$_model.GetSasContainerWebDefenseRuleCriteriaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getSasContainerWebDefenseRuleCriteriaWithOptions(request, runtime);
  }

  /**
   * Queries the details of the deduction modules of the security score feature, including custom settings.
   * 
   * @param request - GetSecurityScoreRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSecurityScoreRuleResponse
   */
  async getSecurityScoreRuleWithOptions(request: $_model.GetSecurityScoreRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetSecurityScoreRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.calType)) {
      query["CalType"] = request.calType;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetSecurityScoreRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetSecurityScoreRuleResponse>(await this.callApi(params, req, runtime), new $_model.GetSecurityScoreRuleResponse({}));
  }

  /**
   * Queries the details of the deduction modules of the security score feature, including custom settings.
   * 
   * @param request - GetSecurityScoreRuleRequest
   * @returns GetSecurityScoreRuleResponse
   */
  async getSecurityScoreRule(request: $_model.GetSecurityScoreRuleRequest): Promise<$_model.GetSecurityScoreRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getSecurityScoreRuleWithOptions(request, runtime);
  }

  /**
   * Queries the check rules of sensitive files.
   * 
   * @param request - GetSensitiveDefineRuleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSensitiveDefineRuleConfigResponse
   */
  async getSensitiveDefineRuleConfigWithOptions(request: $_model.GetSensitiveDefineRuleConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetSensitiveDefineRuleConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetSensitiveDefineRuleConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetSensitiveDefineRuleConfigResponse>(await this.callApi(params, req, runtime), new $_model.GetSensitiveDefineRuleConfigResponse({}));
  }

  /**
   * Queries the check rules of sensitive files.
   * 
   * @param request - GetSensitiveDefineRuleConfigRequest
   * @returns GetSensitiveDefineRuleConfigResponse
   */
  async getSensitiveDefineRuleConfig(request: $_model.GetSensitiveDefineRuleConfigRequest): Promise<$_model.GetSensitiveDefineRuleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getSensitiveDefineRuleConfigWithOptions(request, runtime);
  }

  /**
   * Get Serverless Application Authorization Details
   * 
   * @param request - GetServerlessAppAuthDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetServerlessAppAuthDetailResponse
   */
  async getServerlessAppAuthDetailWithOptions(request: $_model.GetServerlessAppAuthDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetServerlessAppAuthDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.appRegionId)) {
      query["AppRegionId"] = request.appRegionId;
    }

    if (!$dara.isNull(request.machineType)) {
      query["MachineType"] = request.machineType;
    }

    if (!$dara.isNull(request.vendorType)) {
      query["VendorType"] = request.vendorType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetServerlessAppAuthDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetServerlessAppAuthDetailResponse>(await this.callApi(params, req, runtime), new $_model.GetServerlessAppAuthDetailResponse({}));
  }

  /**
   * Get Serverless Application Authorization Details
   * 
   * @param request - GetServerlessAppAuthDetailRequest
   * @returns GetServerlessAppAuthDetailResponse
   */
  async getServerlessAppAuthDetail(request: $_model.GetServerlessAppAuthDetailRequest): Promise<$_model.GetServerlessAppAuthDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getServerlessAppAuthDetailWithOptions(request, runtime);
  }

  /**
   * Get Serverless Authorization Overview
   * 
   * @param request - GetServerlessAuthSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetServerlessAuthSummaryResponse
   */
  async getServerlessAuthSummaryWithOptions(request: $_model.GetServerlessAuthSummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetServerlessAuthSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appRegionId)) {
      query["AppRegionId"] = request.appRegionId;
    }

    if (!$dara.isNull(request.machineType)) {
      query["MachineType"] = request.machineType;
    }

    if (!$dara.isNull(request.vendorType)) {
      query["VendorType"] = request.vendorType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetServerlessAuthSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetServerlessAuthSummaryResponse>(await this.callApi(params, req, runtime), new $_model.GetServerlessAuthSummaryResponse({}));
  }

  /**
   * Get Serverless Authorization Overview
   * 
   * @param request - GetServerlessAuthSummaryRequest
   * @returns GetServerlessAuthSummaryResponse
   */
  async getServerlessAuthSummary(request: $_model.GetServerlessAuthSummaryRequest): Promise<$_model.GetServerlessAuthSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getServerlessAuthSummaryWithOptions(request, runtime);
  }

  /**
   * Queries the service trail that was delivered to ActionTrail.
   * 
   * @param request - GetServiceTrailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetServiceTrailResponse
   */
  async getServiceTrailWithOptions(request: $_model.GetServiceTrailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetServiceTrailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetServiceTrail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetServiceTrailResponse>(await this.callApi(params, req, runtime), new $_model.GetServiceTrailResponse({}));
  }

  /**
   * Queries the service trail that was delivered to ActionTrail.
   * 
   * @param request - GetServiceTrailRequest
   * @returns GetServiceTrailResponse
   */
  async getServiceTrail(request: $_model.GetServiceTrailRequest): Promise<$_model.GetServiceTrailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getServiceTrailWithOptions(request, runtime);
  }

  /**
   * Queries the usage details of templates provided in the feature of proactive defense for containers for rules.
   * 
   * @param request - GetStrategyTemplateDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetStrategyTemplateDetailResponse
   */
  async getStrategyTemplateDetailWithOptions(request: $_model.GetStrategyTemplateDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetStrategyTemplateDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetStrategyTemplateDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetStrategyTemplateDetailResponse>(await this.callApi(params, req, runtime), new $_model.GetStrategyTemplateDetailResponse({}));
  }

  /**
   * Queries the usage details of templates provided in the feature of proactive defense for containers for rules.
   * 
   * @param request - GetStrategyTemplateDetailRequest
   * @returns GetStrategyTemplateDetailResponse
   */
  async getStrategyTemplateDetail(request: $_model.GetStrategyTemplateDetailRequest): Promise<$_model.GetStrategyTemplateDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getStrategyTemplateDetailWithOptions(request, runtime);
  }

  /**
   * Get the list of modules supported by authorization.
   * 
   * @param request - GetSupportedModulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSupportedModulesResponse
   */
  async getSupportedModulesWithOptions(request: $_model.GetSupportedModulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetSupportedModulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetSupportedModules",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetSupportedModulesResponse>(await this.callApi(params, req, runtime), new $_model.GetSupportedModulesResponse({}));
  }

  /**
   * Get the list of modules supported by authorization.
   * 
   * @param request - GetSupportedModulesRequest
   * @returns GetSupportedModulesResponse
   */
  async getSupportedModules(request: $_model.GetSupportedModulesRequest): Promise<$_model.GetSupportedModulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getSupportedModulesWithOptions(request, runtime);
  }

  /**
   * Queries the statistics on alerts in one or more asset groups.
   * 
   * @param request - GetSuspiciousStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSuspiciousStatisticsResponse
   */
  async getSuspiciousStatisticsWithOptions(request: $_model.GetSuspiciousStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetSuspiciousStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupIdList)) {
      query["GroupIdList"] = request.groupIdList;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetSuspiciousStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetSuspiciousStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.GetSuspiciousStatisticsResponse({}));
  }

  /**
   * Queries the statistics on alerts in one or more asset groups.
   * 
   * @param request - GetSuspiciousStatisticsRequest
   * @returns GetSuspiciousStatisticsResponse
   */
  async getSuspiciousStatistics(request: $_model.GetSuspiciousStatisticsRequest): Promise<$_model.GetSuspiciousStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getSuspiciousStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries the details of a migration operation. For example, you can query the progress and status of a migration operation after you migrate a server from a region in the Chinese mainland to the Singapore region.
   * 
   * @param request - GetSwitchRegionDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSwitchRegionDetailResponse
   */
  async getSwitchRegionDetailWithOptions(request: $_model.GetSwitchRegionDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetSwitchRegionDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetSwitchRegionDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetSwitchRegionDetailResponse>(await this.callApi(params, req, runtime), new $_model.GetSwitchRegionDetailResponse({}));
  }

  /**
   * Queries the details of a migration operation. For example, you can query the progress and status of a migration operation after you migrate a server from a region in the Chinese mainland to the Singapore region.
   * 
   * @param request - GetSwitchRegionDetailRequest
   * @returns GetSwitchRegionDetailResponse
   */
  async getSwitchRegionDetail(request: $_model.GetSwitchRegionDetailRequest): Promise<$_model.GetSwitchRegionDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getSwitchRegionDetailWithOptions(request, runtime);
  }

  /**
   * Checks whether you can submit a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).
   * 
   * @param request - GetTenantCheckAvailableRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetTenantCheckAvailableResponse
   */
  async getTenantCheckAvailableWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetTenantCheckAvailableResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetTenantCheckAvailable",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetTenantCheckAvailableResponse>(await this.callApi(params, req, runtime), new $_model.GetTenantCheckAvailableResponse({}));
  }

  /**
   * Checks whether you can submit a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).
   * @returns GetTenantCheckAvailableResponse
   */
  async getTenantCheckAvailable(): Promise<$_model.GetTenantCheckAvailableResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getTenantCheckAvailableWithOptions(runtime);
  }

  /**
   * Queries the language settings of log analysis.
   * 
   * @param request - GetUserLangRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetUserLangResponse
   */
  async getUserLangWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetUserLangResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetUserLang",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetUserLangResponse>(await this.callApi(params, req, runtime), new $_model.GetUserLangResponse({}));
  }

  /**
   * Queries the language settings of log analysis.
   * @returns GetUserLangResponse
   */
  async getUserLang(): Promise<$_model.GetUserLangResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getUserLangWithOptions(runtime);
  }

  /**
   * Queries the configurations of a periodic virus scan task.
   * 
   * @param request - GetVirusScanConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetVirusScanConfigResponse
   */
  async getVirusScanConfigWithOptions(request: $_model.GetVirusScanConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetVirusScanConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetVirusScanConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetVirusScanConfigResponse>(await this.callApi(params, req, runtime), new $_model.GetVirusScanConfigResponse({}));
  }

  /**
   * Queries the configurations of a periodic virus scan task.
   * 
   * @param request - GetVirusScanConfigRequest
   * @returns GetVirusScanConfigResponse
   */
  async getVirusScanConfig(request: $_model.GetVirusScanConfigRequest): Promise<$_model.GetVirusScanConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getVirusScanConfigWithOptions(request, runtime);
  }

  /**
   * Queries the information about the latest virus scan task.
   * 
   * @param request - GetVirusScanLatestTaskStatisticRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetVirusScanLatestTaskStatisticResponse
   */
  async getVirusScanLatestTaskStatisticWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.GetVirusScanLatestTaskStatisticResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetVirusScanLatestTaskStatistic",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetVirusScanLatestTaskStatisticResponse>(await this.callApi(params, req, runtime), new $_model.GetVirusScanLatestTaskStatisticResponse({}));
  }

  /**
   * Queries the information about the latest virus scan task.
   * @returns GetVirusScanLatestTaskStatisticResponse
   */
  async getVirusScanLatestTaskStatistic(): Promise<$_model.GetVirusScanLatestTaskStatisticResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getVirusScanLatestTaskStatisticWithOptions(runtime);
  }

  /**
   * Queries the statistics on vulnerabilities in asset groups.
   * 
   * @param request - GetVulStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetVulStatisticsResponse
   */
  async getVulStatisticsWithOptions(request: $_model.GetVulStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetVulStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupIdList)) {
      query["GroupIdList"] = request.groupIdList;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.typeList)) {
      query["TypeList"] = request.typeList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetVulStatistics",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetVulStatisticsResponse>(await this.callApi(params, req, runtime), new $_model.GetVulStatisticsResponse({}));
  }

  /**
   * Queries the statistics on vulnerabilities in asset groups.
   * 
   * @param request - GetVulStatisticsRequest
   * @returns GetVulStatisticsResponse
   */
  async getVulStatistics(request: $_model.GetVulStatisticsRequest): Promise<$_model.GetVulStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getVulStatisticsWithOptions(request, runtime);
  }

  /**
   * Queries information about a vulnerability whitelist.
   * 
   * @param request - GetVulWhitelistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetVulWhitelistResponse
   */
  async getVulWhitelistWithOptions(request: $_model.GetVulWhitelistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetVulWhitelistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.vulWhitelistId)) {
      query["VulWhitelistId"] = request.vulWhitelistId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetVulWhitelist",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetVulWhitelistResponse>(await this.callApi(params, req, runtime), new $_model.GetVulWhitelistResponse({}));
  }

  /**
   * Queries information about a vulnerability whitelist.
   * 
   * @param request - GetVulWhitelistRequest
   * @returns GetVulWhitelistResponse
   */
  async getVulWhitelist(request: $_model.GetVulWhitelistRequest): Promise<$_model.GetVulWhitelistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getVulWhitelistWithOptions(request, runtime);
  }

  /**
   * Authorization for Switching Migration
   * 
   * @param request - GrantSwitchAgreementRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GrantSwitchAgreementResponse
   */
  async grantSwitchAgreementWithOptions(request: $_model.GrantSwitchAgreementRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GrantSwitchAgreementResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.isAgree)) {
      query["IsAgree"] = request.isAgree;
    }

    if (!$dara.isNull(request.isImmediate)) {
      query["IsImmediate"] = request.isImmediate;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GrantSwitchAgreement",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GrantSwitchAgreementResponse>(await this.callApi(params, req, runtime), new $_model.GrantSwitchAgreementResponse({}));
  }

  /**
   * Authorization for Switching Migration
   * 
   * @param request - GrantSwitchAgreementRequest
   * @returns GrantSwitchAgreementResponse
   */
  async grantSwitchAgreement(request: $_model.GrantSwitchAgreementRequest): Promise<$_model.GrantSwitchAgreementResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.grantSwitchAgreementWithOptions(request, runtime);
  }

  /**
   * Handle Malicious Files
   * 
   * @param request - HandleMaliciousFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HandleMaliciousFilesResponse
   */
  async handleMaliciousFilesWithOptions(request: $_model.HandleMaliciousFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.HandleMaliciousFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fileIdList)) {
      query["FileIdList"] = request.fileIdList;
    }

    if (!$dara.isNull(request.operation)) {
      query["Operation"] = request.operation;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "HandleMaliciousFiles",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.HandleMaliciousFilesResponse>(await this.callApi(params, req, runtime), new $_model.HandleMaliciousFilesResponse({}));
  }

  /**
   * Handle Malicious Files
   * 
   * @param request - HandleMaliciousFilesRequest
   * @returns HandleMaliciousFilesResponse
   */
  async handleMaliciousFiles(request: $_model.HandleMaliciousFilesRequest): Promise<$_model.HandleMaliciousFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.handleMaliciousFilesWithOptions(request, runtime);
  }

  /**
   * Handles alert events.
   * 
   * @param request - HandleSecurityEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HandleSecurityEventsResponse
   */
  async handleSecurityEventsWithOptions(request: $_model.HandleSecurityEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.HandleSecurityEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.markBatch)) {
      query["MarkBatch"] = request.markBatch;
    }

    if (!$dara.isNull(request.markMissParam)) {
      query["MarkMissParam"] = request.markMissParam;
    }

    if (!$dara.isNull(request.operationCode)) {
      query["OperationCode"] = request.operationCode;
    }

    if (!$dara.isNull(request.operationParams)) {
      query["OperationParams"] = request.operationParams;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.securityEventIds)) {
      query["SecurityEventIds"] = request.securityEventIds;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "HandleSecurityEvents",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.HandleSecurityEventsResponse>(await this.callApi(params, req, runtime), new $_model.HandleSecurityEventsResponse({}));
  }

  /**
   * Handles alert events.
   * 
   * @param request - HandleSecurityEventsRequest
   * @returns HandleSecurityEventsResponse
   */
  async handleSecurityEvents(request: $_model.HandleSecurityEventsRequest): Promise<$_model.HandleSecurityEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.handleSecurityEventsWithOptions(request, runtime);
  }

  /**
   * Handles multiple alert events that are triggered by the same IP address rule or IP address rules of the same type at a time.
   * 
   * @param request - HandleSimilarSecurityEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns HandleSimilarSecurityEventsResponse
   */
  async handleSimilarSecurityEventsWithOptions(request: $_model.HandleSimilarSecurityEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.HandleSimilarSecurityEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.markMissParam)) {
      query["MarkMissParam"] = request.markMissParam;
    }

    if (!$dara.isNull(request.operationCode)) {
      query["OperationCode"] = request.operationCode;
    }

    if (!$dara.isNull(request.operationParams)) {
      query["OperationParams"] = request.operationParams;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "HandleSimilarSecurityEvents",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.HandleSimilarSecurityEventsResponse>(await this.callApi(params, req, runtime), new $_model.HandleSimilarSecurityEventsResponse({}));
  }

  /**
   * Handles multiple alert events that are triggered by the same IP address rule or IP address rules of the same type at a time.
   * 
   * @param request - HandleSimilarSecurityEventsRequest
   * @returns HandleSimilarSecurityEventsResponse
   */
  async handleSimilarSecurityEvents(request: $_model.HandleSimilarSecurityEventsRequest): Promise<$_model.HandleSimilarSecurityEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.handleSimilarSecurityEventsWithOptions(request, runtime);
  }

  /**
   * Adds risk items to the whitelist or removes risk items from the whitelist by specifying servers and risk items.
   * 
   * @param request - IgnoreCheckItemsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IgnoreCheckItemsResponse
   */
  async ignoreCheckItemsWithOptions(request: $_model.IgnoreCheckItemsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.IgnoreCheckItemsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkAndRiskTypeList)) {
      query["CheckAndRiskTypeList"] = request.checkAndRiskTypeList;
    }

    if (!$dara.isNull(request.checkIds)) {
      query["CheckIds"] = request.checkIds;
    }

    if (!$dara.isNull(request.containerItems)) {
      query["ContainerItems"] = request.containerItems;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.reason)) {
      query["Reason"] = request.reason;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "IgnoreCheckItems",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.IgnoreCheckItemsResponse>(await this.callApi(params, req, runtime), new $_model.IgnoreCheckItemsResponse({}));
  }

  /**
   * Adds risk items to the whitelist or removes risk items from the whitelist by specifying servers and risk items.
   * 
   * @param request - IgnoreCheckItemsRequest
   * @returns IgnoreCheckItemsResponse
   */
  async ignoreCheckItems(request: $_model.IgnoreCheckItemsRequest): Promise<$_model.IgnoreCheckItemsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.ignoreCheckItemsWithOptions(request, runtime);
  }

  /**
   * Ignores multiple baseline risk items at a time or cancels the ignore action that is performed on multiple baseline risk items at a time.
   * 
   * @deprecated OpenAPI IgnoreHcCheckWarnings is deprecated, please use Sas::2018-12-03::IgnoreCheckItems instead.
   * 
   * @param request - IgnoreHcCheckWarningsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IgnoreHcCheckWarningsResponse
   */
  async ignoreHcCheckWarningsWithOptions(request: $_model.IgnoreHcCheckWarningsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.IgnoreHcCheckWarningsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkIds)) {
      query["CheckIds"] = request.checkIds;
    }

    if (!$dara.isNull(request.checkWarningIds)) {
      query["CheckWarningIds"] = request.checkWarningIds;
    }

    if (!$dara.isNull(request.reason)) {
      query["Reason"] = request.reason;
    }

    if (!$dara.isNull(request.riskId)) {
      query["RiskId"] = request.riskId;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "IgnoreHcCheckWarnings",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.IgnoreHcCheckWarningsResponse>(await this.callApi(params, req, runtime), new $_model.IgnoreHcCheckWarningsResponse({}));
  }

  /**
   * Ignores multiple baseline risk items at a time or cancels the ignore action that is performed on multiple baseline risk items at a time.
   * 
   * @deprecated OpenAPI IgnoreHcCheckWarnings is deprecated, please use Sas::2018-12-03::IgnoreCheckItems instead.
   * 
   * @param request - IgnoreHcCheckWarningsRequest
   * @returns IgnoreHcCheckWarningsResponse
   */
  // Deprecated
  async ignoreHcCheckWarnings(request: $_model.IgnoreHcCheckWarningsRequest): Promise<$_model.IgnoreHcCheckWarningsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.ignoreHcCheckWarningsWithOptions(request, runtime);
  }

  /**
   * Adds the result scanned by an IDC probe to the whitelist or ignores the scan result.
   * 
   * @param request - IgnoreIdcProbeScanResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns IgnoreIdcProbeScanResultResponse
   */
  async ignoreIdcProbeScanResultWithOptions(request: $_model.IgnoreIdcProbeScanResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.IgnoreIdcProbeScanResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ignoreAction)) {
      query["IgnoreAction"] = request.ignoreAction;
    }

    if (!$dara.isNull(request.scanResultIds)) {
      query["ScanResultIds"] = request.scanResultIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "IgnoreIdcProbeScanResult",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.IgnoreIdcProbeScanResultResponse>(await this.callApi(params, req, runtime), new $_model.IgnoreIdcProbeScanResultResponse({}));
  }

  /**
   * Adds the result scanned by an IDC probe to the whitelist or ignores the scan result.
   * 
   * @param request - IgnoreIdcProbeScanResultRequest
   * @returns IgnoreIdcProbeScanResultResponse
   */
  async ignoreIdcProbeScanResult(request: $_model.IgnoreIdcProbeScanResultRequest): Promise<$_model.IgnoreIdcProbeScanResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.ignoreIdcProbeScanResultWithOptions(request, runtime);
  }

  /**
   * Install Aegis client on Lingjun bare metal.
   * 
   * @param tmpReq - InstallAegisForLingjunRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InstallAegisForLingjunResponse
   */
  async installAegisForLingjunWithOptions(tmpReq: $_model.InstallAegisForLingjunRequest, runtime: $dara.RuntimeOptions): Promise<$_model.InstallAegisForLingjunResponse> {
    tmpReq.validate();
    let request = new $_model.InstallAegisForLingjunShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.uuids)) {
      request.uuidsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.uuids, "Uuids", "json");
    }

    let query = { };
    if (!$dara.isNull(request.uuidsShrink)) {
      query["Uuids"] = request.uuidsShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "InstallAegisForLingjun",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.InstallAegisForLingjunResponse>(await this.callApi(params, req, runtime), new $_model.InstallAegisForLingjunResponse({}));
  }

  /**
   * Install Aegis client on Lingjun bare metal.
   * 
   * @param request - InstallAegisForLingjunRequest
   * @returns InstallAegisForLingjunResponse
   */
  async installAegisForLingjun(request: $_model.InstallAegisForLingjunRequest): Promise<$_model.InstallAegisForLingjunResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.installAegisForLingjunWithOptions(request, runtime);
  }

  /**
   * Installs the anti-ransomware agent.
   * 
   * @param request - InstallBackupClientRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InstallBackupClientResponse
   */
  async installBackupClientWithOptions(request: $_model.InstallBackupClientRequest, runtime: $dara.RuntimeOptions): Promise<$_model.InstallBackupClientResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.policyVersion)) {
      query["PolicyVersion"] = request.policyVersion;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "InstallBackupClient",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.InstallBackupClientResponse>(await this.callApi(params, req, runtime), new $_model.InstallBackupClientResponse({}));
  }

  /**
   * Installs the anti-ransomware agent.
   * 
   * @param request - InstallBackupClientRequest
   * @returns InstallBackupClientResponse
   */
  async installBackupClient(request: $_model.InstallBackupClientRequest): Promise<$_model.InstallBackupClientResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.installBackupClientWithOptions(request, runtime);
  }

  /**
   * Installs the CloudMonitor agent on specified servers.
   * 
   * @remarks
   * > Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
   * 
   * @param request - InstallCloudMonitorRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InstallCloudMonitorResponse
   */
  async installCloudMonitorWithOptions(request: $_model.InstallCloudMonitorRequest, runtime: $dara.RuntimeOptions): Promise<$_model.InstallCloudMonitorResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.agentAccessKey)) {
      query["AgentAccessKey"] = request.agentAccessKey;
    }

    if (!$dara.isNull(request.agentSecretKey)) {
      query["AgentSecretKey"] = request.agentSecretKey;
    }

    if (!$dara.isNull(request.argusVersion)) {
      query["ArgusVersion"] = request.argusVersion;
    }

    if (!$dara.isNull(request.instanceIdList)) {
      query["InstanceIdList"] = request.instanceIdList;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "InstallCloudMonitor",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.InstallCloudMonitorResponse>(await this.callApi(params, req, runtime), new $_model.InstallCloudMonitorResponse({}));
  }

  /**
   * Installs the CloudMonitor agent on specified servers.
   * 
   * @remarks
   * > Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
   * 
   * @param request - InstallCloudMonitorRequest
   * @returns InstallCloudMonitorResponse
   */
  async installCloudMonitor(request: $_model.InstallCloudMonitorRequest): Promise<$_model.InstallCloudMonitorResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.installCloudMonitorWithOptions(request, runtime);
  }

  /**
   * Installs the Security Center agent on a proxy server in a hybrid cloud.
   * 
   * @param request - InstallHybridProxyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InstallHybridProxyResponse
   */
  async installHybridProxyWithOptions(request: $_model.InstallHybridProxyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.InstallHybridProxyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.installCode)) {
      query["InstallCode"] = request.installCode;
    }

    if (!$dara.isNull(request.yundunUuids)) {
      query["YundunUuids"] = request.yundunUuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "InstallHybridProxy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.InstallHybridProxyResponse>(await this.callApi(params, req, runtime), new $_model.InstallHybridProxyResponse({}));
  }

  /**
   * Installs the Security Center agent on a proxy server in a hybrid cloud.
   * 
   * @param request - InstallHybridProxyRequest
   * @returns InstallHybridProxyResponse
   */
  async installHybridProxy(request: $_model.InstallHybridProxyRequest): Promise<$_model.InstallHybridProxyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.installHybridProxyWithOptions(request, runtime);
  }

  /**
   * Installs the CloudMonitor agent on a server that is not deployed on Alibaba Cloud.
   * 
   * @param request - InstallPmAgentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InstallPmAgentResponse
   */
  async installPmAgentWithOptions(request: $_model.InstallPmAgentRequest, runtime: $dara.RuntimeOptions): Promise<$_model.InstallPmAgentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "InstallPmAgent",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.InstallPmAgentResponse>(await this.callApi(params, req, runtime), new $_model.InstallPmAgentResponse({}));
  }

  /**
   * Installs the CloudMonitor agent on a server that is not deployed on Alibaba Cloud.
   * 
   * @param request - InstallPmAgentRequest
   * @returns InstallPmAgentResponse
   */
  async installPmAgent(request: $_model.InstallPmAgentRequest): Promise<$_model.InstallPmAgentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.installPmAgentWithOptions(request, runtime);
  }

  /**
   * Installs the anti-ransomware agent for databases.
   * 
   * @param request - InstallUniBackupAgentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InstallUniBackupAgentResponse
   */
  async installUniBackupAgentWithOptions(request: $_model.InstallUniBackupAgentRequest, runtime: $dara.RuntimeOptions): Promise<$_model.InstallUniBackupAgentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "InstallUniBackupAgent",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.InstallUniBackupAgentResponse>(await this.callApi(params, req, runtime), new $_model.InstallUniBackupAgentResponse({}));
  }

  /**
   * Installs the anti-ransomware agent for databases.
   * 
   * @param request - InstallUniBackupAgentRequest
   * @returns InstallUniBackupAgentResponse
   */
  async installUniBackupAgent(request: $_model.InstallUniBackupAgentRequest): Promise<$_model.InstallUniBackupAgentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.installUniBackupAgentWithOptions(request, runtime);
  }

  /**
   * Adds processes to the process whitelist of web tamper proofing.
   * 
   * @param request - JoinWebLockProcessWhiteListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns JoinWebLockProcessWhiteListResponse
   */
  async joinWebLockProcessWhiteListWithOptions(request: $_model.JoinWebLockProcessWhiteListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.JoinWebLockProcessWhiteListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.processPaths)) {
      query["ProcessPaths"] = request.processPaths;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "JoinWebLockProcessWhiteList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.JoinWebLockProcessWhiteListResponse>(await this.callApi(params, req, runtime), new $_model.JoinWebLockProcessWhiteListResponse({}));
  }

  /**
   * Adds processes to the process whitelist of web tamper proofing.
   * 
   * @param request - JoinWebLockProcessWhiteListRequest
   * @returns JoinWebLockProcessWhiteListResponse
   */
  async joinWebLockProcessWhiteList(request: $_model.JoinWebLockProcessWhiteListRequest): Promise<$_model.JoinWebLockProcessWhiteListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.joinWebLockProcessWhiteListWithOptions(request, runtime);
  }

  /**
   * Queries members in the resource directory that is involved when the multi-account management feature is enabled.
   * 
   * @remarks
   * You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
   * 
   * @param request - ListAccountsInResourceDirectoryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAccountsInResourceDirectoryResponse
   */
  async listAccountsInResourceDirectoryWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.ListAccountsInResourceDirectoryResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "ListAccountsInResourceDirectory",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAccountsInResourceDirectoryResponse>(await this.callApi(params, req, runtime), new $_model.ListAccountsInResourceDirectoryResponse({}));
  }

  /**
   * Queries members in the resource directory that is involved when the multi-account management feature is enabled.
   * 
   * @remarks
   * You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
   * @returns ListAccountsInResourceDirectoryResponse
   */
  async listAccountsInResourceDirectory(): Promise<$_model.ListAccountsInResourceDirectoryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAccountsInResourceDirectoryWithOptions(runtime);
  }

  /**
   * Queries defense rules against container escapes.
   * 
   * @param request - ListAegisContainerPluginRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAegisContainerPluginRuleResponse
   */
  async listAegisContainerPluginRuleWithOptions(request: $_model.ListAegisContainerPluginRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAegisContainerPluginRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAegisContainerPluginRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAegisContainerPluginRuleResponse>(await this.callApi(params, req, runtime), new $_model.ListAegisContainerPluginRuleResponse({}));
  }

  /**
   * Queries defense rules against container escapes.
   * 
   * @param request - ListAegisContainerPluginRuleRequest
   * @returns ListAegisContainerPluginRuleResponse
   */
  async listAegisContainerPluginRule(request: $_model.ListAegisContainerPluginRuleRequest): Promise<$_model.ListAegisContainerPluginRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAegisContainerPluginRuleWithOptions(request, runtime);
  }

  /**
   * Query the Aegis client installation result for Lingjun bare metal.
   * 
   * @param tmpReq - ListAegisForLingjunStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAegisForLingjunStatusResponse
   */
  async listAegisForLingjunStatusWithOptions(tmpReq: $_model.ListAegisForLingjunStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAegisForLingjunStatusResponse> {
    tmpReq.validate();
    let request = new $_model.ListAegisForLingjunStatusShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.uuids)) {
      request.uuidsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.uuids, "Uuids", "json");
    }

    let query = { };
    if (!$dara.isNull(request.uuidsShrink)) {
      query["Uuids"] = request.uuidsShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAegisForLingjunStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAegisForLingjunStatusResponse>(await this.callApi(params, req, runtime), new $_model.ListAegisForLingjunStatusResponse({}));
  }

  /**
   * Query the Aegis client installation result for Lingjun bare metal.
   * 
   * @param request - ListAegisForLingjunStatusRequest
   * @returns ListAegisForLingjunStatusResponse
   */
  async listAegisForLingjunStatus(request: $_model.ListAegisForLingjunStatusRequest): Promise<$_model.ListAegisForLingjunStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAegisForLingjunStatusWithOptions(request, runtime);
  }

  /**
   * Query agentless detection assets.
   * 
   * @param request - ListAgentlessAssetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAgentlessAssetResponse
   */
  async listAgentlessAssetWithOptions(request: $_model.ListAgentlessAssetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAgentlessAssetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.diskType)) {
      query["DiskType"] = request.diskType;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceName)) {
      query["InstanceName"] = request.instanceName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.platform)) {
      query["Platform"] = request.platform;
    }

    if (!$dara.isNull(request.scanRegionId)) {
      query["ScanRegionId"] = request.scanRegionId;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAgentlessAsset",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAgentlessAssetResponse>(await this.callApi(params, req, runtime), new $_model.ListAgentlessAssetResponse({}));
  }

  /**
   * Query agentless detection assets.
   * 
   * @param request - ListAgentlessAssetRequest
   * @returns ListAgentlessAssetResponse
   */
  async listAgentlessAsset(request: $_model.ListAgentlessAssetRequest): Promise<$_model.ListAgentlessAssetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAgentlessAssetWithOptions(request, runtime);
  }

  /**
   * Queries malicious files that are detected by agentless detection tasks.
   * 
   * @param request - ListAgentlessMaliciousFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAgentlessMaliciousFilesResponse
   */
  async listAgentlessMaliciousFilesWithOptions(request: $_model.ListAgentlessMaliciousFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAgentlessMaliciousFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.dealed)) {
      query["Dealed"] = request.dealed;
    }

    if (!$dara.isNull(request.eventId)) {
      query["EventId"] = request.eventId;
    }

    if (!$dara.isNull(request.fuzzyMaliciousName)) {
      query["FuzzyMaliciousName"] = request.fuzzyMaliciousName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.levels)) {
      query["Levels"] = request.levels;
    }

    if (!$dara.isNull(request.maliciousMd5)) {
      query["MaliciousMd5"] = request.maliciousMd5;
    }

    if (!$dara.isNull(request.maliciousType)) {
      query["MaliciousType"] = request.maliciousType;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.scanRange)) {
      query["ScanRange"] = request.scanRange;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAgentlessMaliciousFiles",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAgentlessMaliciousFilesResponse>(await this.callApi(params, req, runtime), new $_model.ListAgentlessMaliciousFilesResponse({}));
  }

  /**
   * Queries malicious files that are detected by agentless detection tasks.
   * 
   * @param request - ListAgentlessMaliciousFilesRequest
   * @returns ListAgentlessMaliciousFilesResponse
   */
  async listAgentlessMaliciousFiles(request: $_model.ListAgentlessMaliciousFilesRequest): Promise<$_model.ListAgentlessMaliciousFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAgentlessMaliciousFilesWithOptions(request, runtime);
  }

  /**
   * Queries the regions that are supported by the agentless detection feature.
   * 
   * @param request - ListAgentlessRegionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAgentlessRegionResponse
   */
  async listAgentlessRegionWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.ListAgentlessRegionResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "ListAgentlessRegion",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAgentlessRegionResponse>(await this.callApi(params, req, runtime), new $_model.ListAgentlessRegionResponse({}));
  }

  /**
   * Queries the regions that are supported by the agentless detection feature.
   * @returns ListAgentlessRegionResponse
   */
  async listAgentlessRegion(): Promise<$_model.ListAgentlessRegionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAgentlessRegionWithOptions(runtime);
  }

  /**
   * Obtains the risks associated with an agentless detection event.
   * 
   * @param request - ListAgentlessRelateMaliciousRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAgentlessRelateMaliciousResponse
   */
  async listAgentlessRelateMaliciousWithOptions(request: $_model.ListAgentlessRelateMaliciousRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAgentlessRelateMaliciousResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.eventId)) {
      query["EventId"] = request.eventId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scenario)) {
      query["Scenario"] = request.scenario;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAgentlessRelateMalicious",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAgentlessRelateMaliciousResponse>(await this.callApi(params, req, runtime), new $_model.ListAgentlessRelateMaliciousResponse({}));
  }

  /**
   * Obtains the risks associated with an agentless detection event.
   * 
   * @param request - ListAgentlessRelateMaliciousRequest
   * @returns ListAgentlessRelateMaliciousResponse
   */
  async listAgentlessRelateMalicious(request: $_model.ListAgentlessRelateMaliciousRequest): Promise<$_model.ListAgentlessRelateMaliciousResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAgentlessRelateMaliciousWithOptions(request, runtime);
  }

  /**
   * Queries at-risk hosts that are detected by the agentless detection feature.
   * 
   * @param request - ListAgentlessRiskUuidRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAgentlessRiskUuidResponse
   */
  async listAgentlessRiskUuidWithOptions(request: $_model.ListAgentlessRiskUuidRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAgentlessRiskUuidResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceName)) {
      query["InstanceName"] = request.instanceName;
    }

    if (!$dara.isNull(request.internetIp)) {
      query["InternetIp"] = request.internetIp;
    }

    if (!$dara.isNull(request.intranetIp)) {
      query["IntranetIp"] = request.intranetIp;
    }

    if (!$dara.isNull(request.machineName)) {
      query["MachineName"] = request.machineName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.risk)) {
      query["Risk"] = request.risk;
    }

    if (!$dara.isNull(request.targetName)) {
      query["TargetName"] = request.targetName;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAgentlessRiskUuid",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAgentlessRiskUuidResponse>(await this.callApi(params, req, runtime), new $_model.ListAgentlessRiskUuidResponse({}));
  }

  /**
   * Queries at-risk hosts that are detected by the agentless detection feature.
   * 
   * @param request - ListAgentlessRiskUuidRequest
   * @returns ListAgentlessRiskUuidResponse
   */
  async listAgentlessRiskUuid(request: $_model.ListAgentlessRiskUuidRequest): Promise<$_model.ListAgentlessRiskUuidResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAgentlessRiskUuidWithOptions(request, runtime);
  }

  /**
   * Queries agentless detection tasks.
   * 
   * @param request - ListAgentlessTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAgentlessTaskResponse
   */
  async listAgentlessTaskWithOptions(request: $_model.ListAgentlessTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAgentlessTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.internetIp)) {
      query["InternetIp"] = request.internetIp;
    }

    if (!$dara.isNull(request.intranetIp)) {
      query["IntranetIp"] = request.intranetIp;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.machineName)) {
      query["MachineName"] = request.machineName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.rootTask)) {
      query["RootTask"] = request.rootTask;
    }

    if (!$dara.isNull(request.rootTaskId)) {
      query["RootTaskId"] = request.rootTaskId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.targetName)) {
      query["TargetName"] = request.targetName;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAgentlessTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAgentlessTaskResponse>(await this.callApi(params, req, runtime), new $_model.ListAgentlessTaskResponse({}));
  }

  /**
   * Queries agentless detection tasks.
   * 
   * @param request - ListAgentlessTaskRequest
   * @returns ListAgentlessTaskResponse
   */
  async listAgentlessTask(request: $_model.ListAgentlessTaskRequest): Promise<$_model.ListAgentlessTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAgentlessTaskWithOptions(request, runtime);
  }

  /**
   * Queries the configurations for cleaning offline hosts whose provider cannot be identified.
   * 
   * @param request - ListAssetCleanConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAssetCleanConfigResponse
   */
  async listAssetCleanConfigWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.ListAssetCleanConfigResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "ListAssetCleanConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAssetCleanConfigResponse>(await this.callApi(params, req, runtime), new $_model.ListAssetCleanConfigResponse({}));
  }

  /**
   * Queries the configurations for cleaning offline hosts whose provider cannot be identified.
   * @returns ListAssetCleanConfigResponse
   */
  async listAssetCleanConfig(): Promise<$_model.ListAssetCleanConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAssetCleanConfigWithOptions(runtime);
  }

  /**
   * Queries the custom upgrade information about assets.
   * 
   * @param request - ListAssetInfoPublishRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAssetInfoPublishResponse
   */
  async listAssetInfoPublishWithOptions(request: $_model.ListAssetInfoPublishRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAssetInfoPublishResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAssetInfoPublish",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAssetInfoPublishResponse>(await this.callApi(params, req, runtime), new $_model.ListAssetInfoPublishResponse({}));
  }

  /**
   * Queries the custom upgrade information about assets.
   * 
   * @param request - ListAssetInfoPublishRequest
   * @returns ListAssetInfoPublishResponse
   */
  async listAssetInfoPublish(request: $_model.ListAssetInfoPublishRequest): Promise<$_model.ListAssetInfoPublishResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAssetInfoPublishWithOptions(request, runtime);
  }

  /**
   * Queries the configurations of asset synchronization.
   * 
   * @param request - ListAssetRefreshTaskConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAssetRefreshTaskConfigResponse
   */
  async listAssetRefreshTaskConfigWithOptions(request: $_model.ListAssetRefreshTaskConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAssetRefreshTaskConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.refreshConfigType)) {
      query["RefreshConfigType"] = request.refreshConfigType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.targetId)) {
      query["TargetId"] = request.targetId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAssetRefreshTaskConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAssetRefreshTaskConfigResponse>(await this.callApi(params, req, runtime), new $_model.ListAssetRefreshTaskConfigResponse({}));
  }

  /**
   * Queries the configurations of asset synchronization.
   * 
   * @param request - ListAssetRefreshTaskConfigRequest
   * @returns ListAssetRefreshTaskConfigResponse
   */
  async listAssetRefreshTaskConfig(request: $_model.ListAssetRefreshTaskConfigRequest): Promise<$_model.ListAssetRefreshTaskConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAssetRefreshTaskConfigWithOptions(request, runtime);
  }

  /**
   * Queries the selected assets.
   * 
   * @param request - ListAssetSelectionSelectedTargetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAssetSelectionSelectedTargetResponse
   */
  async listAssetSelectionSelectedTargetWithOptions(request: $_model.ListAssetSelectionSelectedTargetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAssetSelectionSelectedTargetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.selectionKey)) {
      query["SelectionKey"] = request.selectionKey;
    }

    if (!$dara.isNull(request.targetList)) {
      query["TargetList"] = request.targetList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAssetSelectionSelectedTarget",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAssetSelectionSelectedTargetResponse>(await this.callApi(params, req, runtime), new $_model.ListAssetSelectionSelectedTargetResponse({}));
  }

  /**
   * Queries the selected assets.
   * 
   * @param request - ListAssetSelectionSelectedTargetRequest
   * @returns ListAssetSelectionSelectedTargetResponse
   */
  async listAssetSelectionSelectedTarget(request: $_model.ListAssetSelectionSelectedTargetRequest): Promise<$_model.ListAssetSelectionSelectedTargetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAssetSelectionSelectedTargetWithOptions(request, runtime);
  }

  /**
   * Queries the required asset.
   * 
   * @param request - ListAssetSelectionTargetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAssetSelectionTargetResponse
   */
  async listAssetSelectionTargetWithOptions(request: $_model.ListAssetSelectionTargetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAssetSelectionTargetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.selectionKey)) {
      query["SelectionKey"] = request.selectionKey;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAssetSelectionTarget",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAssetSelectionTargetResponse>(await this.callApi(params, req, runtime), new $_model.ListAssetSelectionTargetResponse({}));
  }

  /**
   * Queries the required asset.
   * 
   * @param request - ListAssetSelectionTargetRequest
   * @returns ListAssetSelectionTargetResponse
   */
  async listAssetSelectionTarget(request: $_model.ListAssetSelectionTargetRequest): Promise<$_model.ListAssetSelectionTargetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAssetSelectionTargetWithOptions(request, runtime);
  }

  /**
   * Query Attack Path Events.
   * 
   * @param request - ListAttackPathEventRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAttackPathEventResponse
   */
  async listAttackPathEventWithOptions(request: $_model.ListAttackPathEventRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAttackPathEventResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.attackPathAssetList)) {
      query["AttackPathAssetList"] = request.attackPathAssetList;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.pathNameDesc)) {
      query["PathNameDesc"] = request.pathNameDesc;
    }

    if (!$dara.isNull(request.pathType)) {
      query["PathType"] = request.pathType;
    }

    if (!$dara.isNull(request.riskLevelList)) {
      query["RiskLevelList"] = request.riskLevelList;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAttackPathEvent",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAttackPathEventResponse>(await this.callApi(params, req, runtime), new $_model.ListAttackPathEventResponse({}));
  }

  /**
   * Query Attack Path Events.
   * 
   * @param request - ListAttackPathEventRequest
   * @returns ListAttackPathEventResponse
   */
  async listAttackPathEvent(request: $_model.ListAttackPathEventRequest): Promise<$_model.ListAttackPathEventResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAttackPathEventWithOptions(request, runtime);
  }

  /**
   * Query Attack Path Whitelist List.
   * 
   * @param request - ListAttackPathWhitelistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAttackPathWhitelistResponse
   */
  async listAttackPathWhitelistWithOptions(request: $_model.ListAttackPathWhitelistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAttackPathWhitelistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.pathNameDesc)) {
      query["PathNameDesc"] = request.pathNameDesc;
    }

    if (!$dara.isNull(request.pathType)) {
      query["PathType"] = request.pathType;
    }

    if (!$dara.isNull(request.whitelistName)) {
      query["WhitelistName"] = request.whitelistName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAttackPathWhitelist",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAttackPathWhitelistResponse>(await this.callApi(params, req, runtime), new $_model.ListAttackPathWhitelistResponse({}));
  }

  /**
   * Query Attack Path Whitelist List.
   * 
   * @param request - ListAttackPathWhitelistRequest
   * @returns ListAttackPathWhitelistResponse
   */
  async listAttackPathWhitelist(request: $_model.ListAttackPathWhitelistRequest): Promise<$_model.ListAttackPathWhitelistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAttackPathWhitelistWithOptions(request, runtime);
  }

  /**
   * Queries asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
   * 
   * @param request - ListAutoTagRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAutoTagRulesResponse
   */
  async listAutoTagRulesWithOptions(request: $_model.ListAutoTagRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAutoTagRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAutoTagRules",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAutoTagRulesResponse>(await this.callApi(params, req, runtime), new $_model.ListAutoTagRulesResponse({}));
  }

  /**
   * Queries asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
   * 
   * @param request - ListAutoTagRulesRequest
   * @returns ListAutoTagRulesResponse
   */
  async listAutoTagRules(request: $_model.ListAutoTagRulesRequest): Promise<$_model.ListAutoTagRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAutoTagRulesWithOptions(request, runtime);
  }

  /**
   * Query Attack Path List.
   * 
   * @param request - ListAvailableAttackPathRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAvailableAttackPathResponse
   */
  async listAvailableAttackPathWithOptions(request: $_model.ListAvailableAttackPathRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAvailableAttackPathResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAvailableAttackPath",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAvailableAttackPathResponse>(await this.callApi(params, req, runtime), new $_model.ListAvailableAttackPathResponse({}));
  }

  /**
   * Query Attack Path List.
   * 
   * @param request - ListAvailableAttackPathRequest
   * @returns ListAvailableAttackPathResponse
   */
  async listAvailableAttackPath(request: $_model.ListAvailableAttackPathRequest): Promise<$_model.ListAvailableAttackPathResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAvailableAttackPathWithOptions(request, runtime);
  }

  /**
   * Queries the information about available honeypot templates.
   * 
   * @param request - ListAvailableHoneypotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAvailableHoneypotResponse
   */
  async listAvailableHoneypotWithOptions(request: $_model.ListAvailableHoneypotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListAvailableHoneypotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAvailableHoneypot",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListAvailableHoneypotResponse>(await this.callApi(params, req, runtime), new $_model.ListAvailableHoneypotResponse({}));
  }

  /**
   * Queries the information about available honeypot templates.
   * 
   * @param request - ListAvailableHoneypotRequest
   * @returns ListAvailableHoneypotResponse
   */
  async listAvailableHoneypot(request: $_model.ListAvailableHoneypotRequest): Promise<$_model.ListAvailableHoneypotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAvailableHoneypotWithOptions(request, runtime);
  }

  /**
   * Queries backup records.
   * 
   * @param request - ListBackupRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListBackupRecordResponse
   */
  async listBackupRecordWithOptions(request: $_model.ListBackupRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListBackupRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupEndTime)) {
      query["BackupEndTime"] = request.backupEndTime;
    }

    if (!$dara.isNull(request.backupStartTime)) {
      query["BackupStartTime"] = request.backupStartTime;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.machineRemark)) {
      query["MachineRemark"] = request.machineRemark;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.statusList)) {
      query["StatusList"] = request.statusList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListBackupRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListBackupRecordResponse>(await this.callApi(params, req, runtime), new $_model.ListBackupRecordResponse({}));
  }

  /**
   * Queries backup records.
   * 
   * @param request - ListBackupRecordRequest
   * @returns ListBackupRecordResponse
   */
  async listBackupRecord(request: $_model.ListBackupRecordRequest): Promise<$_model.ListBackupRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listBackupRecordWithOptions(request, runtime);
  }

  /**
   * Queries the whitelist rules for a baseline check item.
   * 
   * @param tmpReq - ListBaselineCheckWhiteRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListBaselineCheckWhiteRecordResponse
   */
  async listBaselineCheckWhiteRecordWithOptions(tmpReq: $_model.ListBaselineCheckWhiteRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListBaselineCheckWhiteRecordResponse> {
    tmpReq.validate();
    let request = new $_model.ListBaselineCheckWhiteRecordShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.checkIds)) {
      request.checkIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.checkIds, "CheckIds", "json");
    }

    if (!$dara.isNull(tmpReq.recordIds)) {
      request.recordIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.recordIds, "RecordIds", "json");
    }

    let query = { };
    if (!$dara.isNull(request.checkIdsShrink)) {
      query["CheckIds"] = request.checkIdsShrink;
    }

    if (!$dara.isNull(request.checkItemFuzzy)) {
      query["CheckItemFuzzy"] = request.checkItemFuzzy;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.recordIdsShrink)) {
      query["RecordIds"] = request.recordIdsShrink;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListBaselineCheckWhiteRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListBaselineCheckWhiteRecordResponse>(await this.callApi(params, req, runtime), new $_model.ListBaselineCheckWhiteRecordResponse({}));
  }

  /**
   * Queries the whitelist rules for a baseline check item.
   * 
   * @param request - ListBaselineCheckWhiteRecordRequest
   * @returns ListBaselineCheckWhiteRecordResponse
   */
  async listBaselineCheckWhiteRecord(request: $_model.ListBaselineCheckWhiteRecordRequest): Promise<$_model.ListBaselineCheckWhiteRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listBaselineCheckWhiteRecordWithOptions(request, runtime);
  }

  /**
   * Queries the instances that failed a specified check item of configuration assessment.
   * 
   * @param request - ListCheckInstanceResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCheckInstanceResultResponse
   */
  async listCheckInstanceResultWithOptions(request: $_model.ListCheckInstanceResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListCheckInstanceResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.instanceIdKey)) {
      query["InstanceIdKey"] = request.instanceIdKey;
    }

    if (!$dara.isNull(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!$dara.isNull(request.instanceNameKey)) {
      query["InstanceNameKey"] = request.instanceNameKey;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionIdKey)) {
      query["RegionIdKey"] = request.regionIdKey;
    }

    if (!$dara.isNull(request.sortTypes)) {
      query["SortTypes"] = request.sortTypes;
    }

    if (!$dara.isNull(request.statuses)) {
      query["Statuses"] = request.statuses;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCheckInstanceResult",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListCheckInstanceResultResponse>(await this.callApi(params, req, runtime), new $_model.ListCheckInstanceResultResponse({}));
  }

  /**
   * Queries the instances that failed a specified check item of configuration assessment.
   * 
   * @param request - ListCheckInstanceResultRequest
   * @returns ListCheckInstanceResultResponse
   */
  async listCheckInstanceResult(request: $_model.ListCheckInstanceResultRequest): Promise<$_model.ListCheckInstanceResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCheckInstanceResultWithOptions(request, runtime);
  }

  /**
   * Queries the check items that can be customized.
   * 
   * @param request - ListCheckItemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCheckItemResponse
   */
  async listCheckItemWithOptions(request: $_model.ListCheckItemRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListCheckItemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.taskSources)) {
      query["TaskSources"] = request.taskSources;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCheckItem",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListCheckItemResponse>(await this.callApi(params, req, runtime), new $_model.ListCheckItemResponse({}));
  }

  /**
   * Queries the check items that can be customized.
   * 
   * @param request - ListCheckItemRequest
   * @returns ListCheckItemResponse
   */
  async listCheckItem(request: $_model.ListCheckItemRequest): Promise<$_model.ListCheckItemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCheckItemWithOptions(request, runtime);
  }

  /**
   * Queries the servers that are affected by baseline risks.
   * 
   * @param request - ListCheckItemWarningMachineRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCheckItemWarningMachineResponse
   */
  async listCheckItemWarningMachineWithOptions(request: $_model.ListCheckItemWarningMachineRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListCheckItemWarningMachineResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.containerFieldName)) {
      query["ContainerFieldName"] = request.containerFieldName;
    }

    if (!$dara.isNull(request.containerFieldValue)) {
      query["ContainerFieldValue"] = request.containerFieldValue;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.riskType)) {
      query["RiskType"] = request.riskType;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCheckItemWarningMachine",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListCheckItemWarningMachineResponse>(await this.callApi(params, req, runtime), new $_model.ListCheckItemWarningMachineResponse({}));
  }

  /**
   * Queries the servers that are affected by baseline risks.
   * 
   * @param request - ListCheckItemWarningMachineRequest
   * @returns ListCheckItemWarningMachineResponse
   */
  async listCheckItemWarningMachine(request: $_model.ListCheckItemWarningMachineRequest): Promise<$_model.ListCheckItemWarningMachineResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCheckItemWarningMachineWithOptions(request, runtime);
  }

  /**
   * Queries the risk statistics of check items by page.
   * 
   * @param request - ListCheckItemWarningSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCheckItemWarningSummaryResponse
   */
  async listCheckItemWarningSummaryWithOptions(request: $_model.ListCheckItemWarningSummaryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListCheckItemWarningSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkItemFuzzy)) {
      query["CheckItemFuzzy"] = request.checkItemFuzzy;
    }

    if (!$dara.isNull(request.checkLevel)) {
      query["CheckLevel"] = request.checkLevel;
    }

    if (!$dara.isNull(request.checkType)) {
      query["CheckType"] = request.checkType;
    }

    if (!$dara.isNull(request.checkWarningStatus)) {
      query["CheckWarningStatus"] = request.checkWarningStatus;
    }

    if (!$dara.isNull(request.checkWarningStatusList)) {
      query["CheckWarningStatusList"] = request.checkWarningStatusList;
    }

    if (!$dara.isNull(request.containerFieldName)) {
      query["ContainerFieldName"] = request.containerFieldName;
    }

    if (!$dara.isNull(request.containerFieldValue)) {
      query["ContainerFieldValue"] = request.containerFieldValue;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.riskType)) {
      query["RiskType"] = request.riskType;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCheckItemWarningSummary",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListCheckItemWarningSummaryResponse>(await this.callApi(params, req, runtime), new $_model.ListCheckItemWarningSummaryResponse({}));
  }

  /**
   * Queries the risk statistics of check items by page.
   * 
   * @param request - ListCheckItemWarningSummaryRequest
   * @returns ListCheckItemWarningSummaryResponse
   */
  async listCheckItemWarningSummary(request: $_model.ListCheckItemWarningSummaryRequest): Promise<$_model.ListCheckItemWarningSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCheckItemWarningSummaryWithOptions(request, runtime);
  }

  /**
   * Queries the details of the risk items that are detected in the configuration checks on cloud services.
   * 
   * @param request - ListCheckResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCheckResultResponse
   */
  async listCheckResultWithOptions(request: $_model.ListCheckResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListCheckResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkIds)) {
      query["CheckIds"] = request.checkIds;
    }

    if (!$dara.isNull(request.checkKey)) {
      query["CheckKey"] = request.checkKey;
    }

    if (!$dara.isNull(request.checkTypes)) {
      query["CheckTypes"] = request.checkTypes;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.customParam)) {
      query["CustomParam"] = request.customParam;
    }

    if (!$dara.isNull(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!$dara.isNull(request.instanceTypes)) {
      query["InstanceTypes"] = request.instanceTypes;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.operationTypes)) {
      query["OperationTypes"] = request.operationTypes;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.requirementIds)) {
      query["RequirementIds"] = request.requirementIds;
    }

    if (!$dara.isNull(request.riskLevels)) {
      query["RiskLevels"] = request.riskLevels;
    }

    if (!$dara.isNull(request.sortTypes)) {
      query["SortTypes"] = request.sortTypes;
    }

    if (!$dara.isNull(request.standardIds)) {
      query["StandardIds"] = request.standardIds;
    }

    if (!$dara.isNull(request.statuses)) {
      query["Statuses"] = request.statuses;
    }

    if (!$dara.isNull(request.taskSources)) {
      query["TaskSources"] = request.taskSources;
    }

    if (!$dara.isNull(request.types)) {
      query["Types"] = request.types;
    }

    if (!$dara.isNull(request.vendors)) {
      query["Vendors"] = request.vendors;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCheckResult",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListCheckResultResponse>(await this.callApi(params, req, runtime), new $_model.ListCheckResultResponse({}));
  }

  /**
   * Queries the details of the risk items that are detected in the configuration checks on cloud services.
   * 
   * @param request - ListCheckResultRequest
   * @returns ListCheckResultResponse
   */
  async listCheckResult(request: $_model.ListCheckResultRequest): Promise<$_model.ListCheckResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCheckResultWithOptions(request, runtime);
  }

  /**
   * Display cloud product configuration check rules
   * 
   * @param request - ListCheckRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCheckRuleResponse
   */
  async listCheckRuleWithOptions(request: $_model.ListCheckRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListCheckRuleResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCheckRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListCheckRuleResponse>(await this.callApi(params, req, runtime), new $_model.ListCheckRuleResponse({}));
  }

  /**
   * Display cloud product configuration check rules
   * 
   * @param request - ListCheckRuleRequest
   * @returns ListCheckRuleResponse
   */
  async listCheckRule(request: $_model.ListCheckRuleRequest): Promise<$_model.ListCheckRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCheckRuleWithOptions(request, runtime);
  }

  /**
   * List all effective machines under the rule
   * 
   * @param request - ListCheckRuleInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCheckRuleInstanceResponse
   */
  async listCheckRuleInstanceWithOptions(request: $_model.ListCheckRuleInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListCheckRuleInstanceResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCheckRuleInstance",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListCheckRuleInstanceResponse>(await this.callApi(params, req, runtime), new $_model.ListCheckRuleInstanceResponse({}));
  }

  /**
   * List all effective machines under the rule
   * 
   * @param request - ListCheckRuleInstanceRequest
   * @returns ListCheckRuleInstanceResponse
   */
  async listCheckRuleInstance(request: $_model.ListCheckRuleInstanceRequest): Promise<$_model.ListCheckRuleInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCheckRuleInstanceWithOptions(request, runtime);
  }

  /**
   * Queries the standards of configuration checks.
   * 
   * @param request - ListCheckStandardRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCheckStandardResponse
   */
  async listCheckStandardWithOptions(request: $_model.ListCheckStandardRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListCheckStandardResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!$dara.isNull(request.instanceSubTypes)) {
      query["InstanceSubTypes"] = request.instanceSubTypes;
    }

    if (!$dara.isNull(request.instanceTypes)) {
      query["InstanceTypes"] = request.instanceTypes;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.taskSources)) {
      query["TaskSources"] = request.taskSources;
    }

    if (!$dara.isNull(request.vendors)) {
      query["Vendors"] = request.vendors;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCheckStandard",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListCheckStandardResponse>(await this.callApi(params, req, runtime), new $_model.ListCheckStandardResponse({}));
  }

  /**
   * Queries the standards of configuration checks.
   * 
   * @param request - ListCheckStandardRequest
   * @returns ListCheckStandardResponse
   */
  async listCheckStandard(request: $_model.ListCheckStandardRequest): Promise<$_model.ListCheckStandardResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCheckStandardWithOptions(request, runtime);
  }

  /**
   * Queries the types of check items that meet the specified conditions based on the ID of a baseline.
   * 
   * @param request - ListCheckTypesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCheckTypesResponse
   */
  async listCheckTypesWithOptions(request: $_model.ListCheckTypesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListCheckTypesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.riskId)) {
      query["RiskId"] = request.riskId;
    }

    if (!$dara.isNull(request.showChecks)) {
      query["ShowChecks"] = request.showChecks;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCheckTypes",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListCheckTypesResponse>(await this.callApi(params, req, runtime), new $_model.ListCheckTypesResponse({}));
  }

  /**
   * Queries the types of check items that meet the specified conditions based on the ID of a baseline.
   * 
   * @param request - ListCheckTypesRequest
   * @returns ListCheckTypesResponse
   */
  async listCheckTypes(request: $_model.ListCheckTypesRequest): Promise<$_model.ListCheckTypesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCheckTypesWithOptions(request, runtime);
  }

  /**
   * Queries the alert settings of assets. By default, the balanced mode is enabled. A detected list of assets can be returned only in strict mode.
   * 
   * @param request - ListClientAlertModeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListClientAlertModeResponse
   */
  async listClientAlertModeWithOptions(request: $_model.ListClientAlertModeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListClientAlertModeResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListClientAlertMode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListClientAlertModeResponse>(await this.callApi(params, req, runtime), new $_model.ListClientAlertModeResponse({}));
  }

  /**
   * Queries the alert settings of assets. By default, the balanced mode is enabled. A detected list of assets can be returned only in strict mode.
   * 
   * @param request - ListClientAlertModeRequest
   * @returns ListClientAlertModeResponse
   */
  async listClientAlertMode(request: $_model.ListClientAlertModeRequest): Promise<$_model.ListClientAlertModeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listClientAlertModeWithOptions(request, runtime);
  }

  /**
   * Queries the supported types of custom defense rules.
   * 
   * @param request - ListClientUserDefineRuleTypesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListClientUserDefineRuleTypesResponse
   */
  async listClientUserDefineRuleTypesWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.ListClientUserDefineRuleTypesResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "ListClientUserDefineRuleTypes",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListClientUserDefineRuleTypesResponse>(await this.callApi(params, req, runtime), new $_model.ListClientUserDefineRuleTypesResponse({}));
  }

  /**
   * Queries the supported types of custom defense rules.
   * @returns ListClientUserDefineRuleTypesResponse
   */
  async listClientUserDefineRuleTypes(): Promise<$_model.ListClientUserDefineRuleTypesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listClientUserDefineRuleTypesWithOptions(runtime);
  }

  /**
   * Queries custom defense rules.
   * 
   * @param request - ListClientUserDefineRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListClientUserDefineRulesResponse
   */
  async listClientUserDefineRulesWithOptions(request: $_model.ListClientUserDefineRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListClientUserDefineRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListClientUserDefineRules",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListClientUserDefineRulesResponse>(await this.callApi(params, req, runtime), new $_model.ListClientUserDefineRulesResponse({}));
  }

  /**
   * Queries custom defense rules.
   * 
   * @param request - ListClientUserDefineRulesRequest
   * @returns ListClientUserDefineRulesResponse
   */
  async listClientUserDefineRules(request: $_model.ListClientUserDefineRulesRequest): Promise<$_model.ListClientUserDefineRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listClientUserDefineRulesWithOptions(request, runtime);
  }

  /**
   * Queries cloud service assets.
   * 
   * @param request - ListCloudAssetInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCloudAssetInstancesResponse
   */
  async listCloudAssetInstancesWithOptions(request: $_model.ListCloudAssetInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListCloudAssetInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cloudAssetTypes)) {
      query["CloudAssetTypes"] = request.cloudAssetTypes;
    }

    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.logicalExp)) {
      query["LogicalExp"] = request.logicalExp;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCloudAssetInstances",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListCloudAssetInstancesResponse>(await this.callApi(params, req, runtime), new $_model.ListCloudAssetInstancesResponse({}));
  }

  /**
   * Queries cloud service assets.
   * 
   * @param request - ListCloudAssetInstancesRequest
   * @returns ListCloudAssetInstancesResponse
   */
  async listCloudAssetInstances(request: $_model.ListCloudAssetInstancesRequest): Promise<$_model.ListCloudAssetInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCloudAssetInstancesWithOptions(request, runtime);
  }

  /**
   * Queries the synchronization region configurations of other clouds on a site.
   * 
   * @param request - ListCloudVendorRegionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCloudVendorRegionsResponse
   */
  async listCloudVendorRegionsWithOptions(request: $_model.ListCloudVendorRegionsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListCloudVendorRegionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.vendor)) {
      query["Vendor"] = request.vendor;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCloudVendorRegions",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListCloudVendorRegionsResponse>(await this.callApi(params, req, runtime), new $_model.ListCloudVendorRegionsResponse({}));
  }

  /**
   * Queries the synchronization region configurations of other clouds on a site.
   * 
   * @param request - ListCloudVendorRegionsRequest
   * @returns ListCloudVendorRegionsResponse
   */
  async listCloudVendorRegions(request: $_model.ListCloudVendorRegionsRequest): Promise<$_model.ListCloudVendorRegionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCloudVendorRegionsWithOptions(request, runtime);
  }

  /**
   * Queries the protection status of the container firewall.
   * 
   * @param request - ListClusterCnnfStatusDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListClusterCnnfStatusDetailResponse
   */
  async listClusterCnnfStatusDetailWithOptions(request: $_model.ListClusterCnnfStatusDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListClusterCnnfStatusDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterIds)) {
      query["ClusterIds"] = request.clusterIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListClusterCnnfStatusDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListClusterCnnfStatusDetailResponse>(await this.callApi(params, req, runtime), new $_model.ListClusterCnnfStatusDetailResponse({}));
  }

  /**
   * Queries the protection status of the container firewall.
   * 
   * @param request - ListClusterCnnfStatusDetailRequest
   * @returns ListClusterCnnfStatusDetailResponse
   */
  async listClusterCnnfStatusDetail(request: $_model.ListClusterCnnfStatusDetailRequest): Promise<$_model.ListClusterCnnfStatusDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listClusterCnnfStatusDetailWithOptions(request, runtime);
  }

  /**
   * Queries the defense rules that are created for a cluster.
   * 
   * @param request - ListClusterInterceptionConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListClusterInterceptionConfigResponse
   */
  async listClusterInterceptionConfigWithOptions(request: $_model.ListClusterInterceptionConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListClusterInterceptionConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterCNNFStatus)) {
      query["ClusterCNNFStatus"] = request.clusterCNNFStatus;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListClusterInterceptionConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListClusterInterceptionConfigResponse>(await this.callApi(params, req, runtime), new $_model.ListClusterInterceptionConfigResponse({}));
  }

  /**
   * Queries the defense rules that are created for a cluster.
   * 
   * @param request - ListClusterInterceptionConfigRequest
   * @returns ListClusterInterceptionConfigResponse
   */
  async listClusterInterceptionConfig(request: $_model.ListClusterInterceptionConfigRequest): Promise<$_model.ListClusterInterceptionConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listClusterInterceptionConfigWithOptions(request, runtime);
  }

  /**
   * Queries the status of plug-ins on clusters.
   * 
   * @param request - ListClusterPluginInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListClusterPluginInfoResponse
   */
  async listClusterPluginInfoWithOptions(request: $_model.ListClusterPluginInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListClusterPluginInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterIds)) {
      query["ClusterIds"] = request.clusterIds;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pluginName)) {
      query["PluginName"] = request.pluginName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListClusterPluginInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListClusterPluginInfoResponse>(await this.callApi(params, req, runtime), new $_model.ListClusterPluginInfoResponse({}));
  }

  /**
   * Queries the status of plug-ins on clusters.
   * 
   * @param request - ListClusterPluginInfoRequest
   * @returns ListClusterPluginInfoResponse
   */
  async listClusterPluginInfo(request: $_model.ListClusterPluginInfoRequest): Promise<$_model.ListClusterPluginInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listClusterPluginInfoWithOptions(request, runtime);
  }

  /**
   * Queries the detection results of the files extracted from a package.
   * 
   * @remarks
   * You can call this operation to query the detection results of files only if the files are pushed to the cloud for detection and in the form of packages. You can repeatedly query the detection results of files within 5 hours because the results are retained for 5 hours. For more information about how to push a file to the cloud for detection, see the CreateFileDetect operation. For more information about how to query file detection results, see the GetFileDetectResult operation.
   * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only hexadecimal MD5 hash values of complete file content are supported. You must calculate the required MD5 hash value before you call this operation.
   * To calculate the hexadecimal MD5 hash value for a file, you can perform the following steps:
   * 1\\. Use the MD5 algorithm to encrypt data and generate a 128-bit hash value. You can use a tool such as MessageDigest for Java and the hashlib module for Python.
   * 2\\. Convert the hash value to a hexadecimal string. You can use a tool such as Codec for Java and the hex() function for Python.
   * 
   * @param request - ListCompressFileDetectResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCompressFileDetectResultResponse
   */
  async listCompressFileDetectResultWithOptions(request: $_model.ListCompressFileDetectResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListCompressFileDetectResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.hashKey)) {
      query["HashKey"] = request.hashKey;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCompressFileDetectResult",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListCompressFileDetectResultResponse>(await this.callApi(params, req, runtime), new $_model.ListCompressFileDetectResultResponse({}));
  }

  /**
   * Queries the detection results of the files extracted from a package.
   * 
   * @remarks
   * You can call this operation to query the detection results of files only if the files are pushed to the cloud for detection and in the form of packages. You can repeatedly query the detection results of files within 5 hours because the results are retained for 5 hours. For more information about how to push a file to the cloud for detection, see the CreateFileDetect operation. For more information about how to query file detection results, see the GetFileDetectResult operation.
   * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only hexadecimal MD5 hash values of complete file content are supported. You must calculate the required MD5 hash value before you call this operation.
   * To calculate the hexadecimal MD5 hash value for a file, you can perform the following steps:
   * 1\\. Use the MD5 algorithm to encrypt data and generate a 128-bit hash value. You can use a tool such as MessageDigest for Java and the hashlib module for Python.
   * 2\\. Convert the hash value to a hexadecimal string. You can use a tool such as Codec for Java and the hex() function for Python.
   * 
   * @param request - ListCompressFileDetectResultRequest
   * @returns ListCompressFileDetectResultResponse
   */
  async listCompressFileDetectResult(request: $_model.ListCompressFileDetectResultRequest): Promise<$_model.ListCompressFileDetectResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCompressFileDetectResultWithOptions(request, runtime);
  }

  /**
   * Queries a list of rules for non-image program defense.
   * 
   * @param request - ListContainerDefenseRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListContainerDefenseRuleResponse
   */
  async listContainerDefenseRuleWithOptions(request: $_model.ListContainerDefenseRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListContainerDefenseRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.conditions)) {
      query["Conditions"] = request.conditions;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.isDefaultRule)) {
      query["IsDefaultRule"] = request.isDefaultRule;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListContainerDefenseRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListContainerDefenseRuleResponse>(await this.callApi(params, req, runtime), new $_model.ListContainerDefenseRuleResponse({}));
  }

  /**
   * Queries a list of rules for non-image program defense.
   * 
   * @param request - ListContainerDefenseRuleRequest
   * @returns ListContainerDefenseRuleResponse
   */
  async listContainerDefenseRule(request: $_model.ListContainerDefenseRuleRequest): Promise<$_model.ListContainerDefenseRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listContainerDefenseRuleWithOptions(request, runtime);
  }

  /**
   * Queries a list of clusters that are included in a rule for non-image program defense.
   * 
   * @param request - ListContainerDefenseRuleClustersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListContainerDefenseRuleClustersResponse
   */
  async listContainerDefenseRuleClustersWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.ListContainerDefenseRuleClustersResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "ListContainerDefenseRuleClusters",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListContainerDefenseRuleClustersResponse>(await this.callApi(params, req, runtime), new $_model.ListContainerDefenseRuleClustersResponse({}));
  }

  /**
   * Queries a list of clusters that are included in a rule for non-image program defense.
   * @returns ListContainerDefenseRuleClustersResponse
   */
  async listContainerDefenseRuleClusters(): Promise<$_model.ListContainerDefenseRuleClustersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listContainerDefenseRuleClustersWithOptions(runtime);
  }

  /**
   * Queries the IDs and names of rules configured for proactive defense for containers.
   * 
   * @param request - ListCriteriaStrategyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListCriteriaStrategyResponse
   */
  async listCriteriaStrategyWithOptions(request: $_model.ListCriteriaStrategyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListCriteriaStrategyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.imageName)) {
      query["ImageName"] = request.imageName;
    }

    if (!$dara.isNull(request.label)) {
      query["Label"] = request.label;
    }

    if (!$dara.isNull(request.namespace)) {
      query["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.strategyName)) {
      query["StrategyName"] = request.strategyName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListCriteriaStrategy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListCriteriaStrategyResponse>(await this.callApi(params, req, runtime), new $_model.ListCriteriaStrategyResponse({}));
  }

  /**
   * Queries the IDs and names of rules configured for proactive defense for containers.
   * 
   * @param request - ListCriteriaStrategyRequest
   * @returns ListCriteriaStrategyResponse
   */
  async listCriteriaStrategy(request: $_model.ListCriteriaStrategyRequest): Promise<$_model.ListCriteriaStrategyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listCriteriaStrategyWithOptions(request, runtime);
  }

  /**
   * Queries the risk overview of official Docker Hub images.
   * 
   * @param request - ListDockerhubImageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDockerhubImageResponse
   */
  async listDockerhubImageWithOptions(request: $_model.ListDockerhubImageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListDockerhubImageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.query)) {
      query["Query"] = request.query;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDockerhubImage",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListDockerhubImageResponse>(await this.callApi(params, req, runtime), new $_model.ListDockerhubImageResponse({}));
  }

  /**
   * Queries the risk overview of official Docker Hub images.
   * 
   * @param request - ListDockerhubImageRequest
   * @returns ListDockerhubImageResponse
   */
  async listDockerhubImage(request: $_model.ListDockerhubImageRequest): Promise<$_model.ListDockerhubImageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDockerhubImageWithOptions(request, runtime);
  }

  /**
   * Queries core file monitoring rules that meet the specified filter condition.
   * 
   * @param request - ListFileProtectEventRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListFileProtectEventResponse
   */
  async listFileProtectEventWithOptions(request: $_model.ListFileProtectEventRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListFileProtectEventResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.alertLevels)) {
      query["AlertLevels"] = request.alertLevels;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceName)) {
      query["InstanceName"] = request.instanceName;
    }

    if (!$dara.isNull(request.internetIp)) {
      query["InternetIp"] = request.internetIp;
    }

    if (!$dara.isNull(request.intranetIp)) {
      query["IntranetIp"] = request.intranetIp;
    }

    if (!$dara.isNull(request.operation)) {
      query["Operation"] = request.operation;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListFileProtectEvent",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListFileProtectEventResponse>(await this.callApi(params, req, runtime), new $_model.ListFileProtectEventResponse({}));
  }

  /**
   * Queries core file monitoring rules that meet the specified filter condition.
   * 
   * @param request - ListFileProtectEventRequest
   * @returns ListFileProtectEventResponse
   */
  async listFileProtectEvent(request: $_model.ListFileProtectEventRequest): Promise<$_model.ListFileProtectEventResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listFileProtectEventWithOptions(request, runtime);
  }

  /**
   * Queries information about the Security Center agent installed on servers on which core file monitoring rules take effect. The information includes the installation status of the Security Center agent and whether the core file monitoring feature is supported.
   * 
   * @param request - ListFileProtectPluginStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListFileProtectPluginStatusResponse
   */
  async listFileProtectPluginStatusWithOptions(request: $_model.ListFileProtectPluginStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListFileProtectPluginStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.switchId)) {
      query["SwitchId"] = request.switchId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListFileProtectPluginStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListFileProtectPluginStatusResponse>(await this.callApi(params, req, runtime), new $_model.ListFileProtectPluginStatusResponse({}));
  }

  /**
   * Queries information about the Security Center agent installed on servers on which core file monitoring rules take effect. The information includes the installation status of the Security Center agent and whether the core file monitoring feature is supported.
   * 
   * @param request - ListFileProtectPluginStatusRequest
   * @returns ListFileProtectPluginStatusResponse
   */
  async listFileProtectPluginStatus(request: $_model.ListFileProtectPluginStatusRequest): Promise<$_model.ListFileProtectPluginStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listFileProtectPluginStatusWithOptions(request, runtime);
  }

  /**
   * Queries core file monitoring rules.
   * 
   * @param request - ListFileProtectRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListFileProtectRuleResponse
   */
  async listFileProtectRuleWithOptions(request: $_model.ListFileProtectRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListFileProtectRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.alertLevel)) {
      query["AlertLevel"] = request.alertLevel;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.platform)) {
      query["Platform"] = request.platform;
    }

    if (!$dara.isNull(request.ruleAction)) {
      query["RuleAction"] = request.ruleAction;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListFileProtectRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListFileProtectRuleResponse>(await this.callApi(params, req, runtime), new $_model.ListFileProtectRuleResponse({}));
  }

  /**
   * Queries core file monitoring rules.
   * 
   * @param request - ListFileProtectRuleRequest
   * @returns ListFileProtectRuleResponse
   */
  async listFileProtectRule(request: $_model.ListFileProtectRuleRequest): Promise<$_model.ListFileProtectRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listFileProtectRuleWithOptions(request, runtime);
  }

  /**
   * Queries the server groups.
   * 
   * @param request - ListGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListGroupsResponse
   */
  async listGroupsWithOptions(request: $_model.ListGroupsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.useNextToken)) {
      query["UseNextToken"] = request.useNextToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListGroups",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListGroupsResponse>(await this.callApi(params, req, runtime), new $_model.ListGroupsResponse({}));
  }

  /**
   * Queries the server groups.
   * 
   * @param request - ListGroupsRequest
   * @returns ListGroupsResponse
   */
  async listGroups(request: $_model.ListGroupsRequest): Promise<$_model.ListGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listGroupsWithOptions(request, runtime);
  }

  /**
   * Queries the information about honeypots.
   * 
   * @param request - ListHoneypotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListHoneypotResponse
   */
  async listHoneypotWithOptions(request: $_model.ListHoneypotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListHoneypotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.honeypotIds)) {
      query["HoneypotIds"] = request.honeypotIds;
    }

    if (!$dara.isNull(request.honeypotName)) {
      query["HoneypotName"] = request.honeypotName;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.nodeName)) {
      query["NodeName"] = request.nodeName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListHoneypot",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListHoneypotResponse>(await this.callApi(params, req, runtime), new $_model.ListHoneypotResponse({}));
  }

  /**
   * Queries the information about honeypots.
   * 
   * @param request - ListHoneypotRequest
   * @returns ListHoneypotResponse
   */
  async listHoneypot(request: $_model.ListHoneypotRequest): Promise<$_model.ListHoneypotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listHoneypotWithOptions(request, runtime);
  }

  /**
   * Queries the information about alert events that are generated.
   * 
   * @param request - ListHoneypotAlarmEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListHoneypotAlarmEventsResponse
   */
  async listHoneypotAlarmEventsWithOptions(request: $_model.ListHoneypotAlarmEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListHoneypotAlarmEventsResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListHoneypotAlarmEvents",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListHoneypotAlarmEventsResponse>(await this.callApi(params, req, runtime), new $_model.ListHoneypotAlarmEventsResponse({}));
  }

  /**
   * Queries the information about alert events that are generated.
   * 
   * @param request - ListHoneypotAlarmEventsRequest
   * @returns ListHoneypotAlarmEventsResponse
   */
  async listHoneypotAlarmEvents(request: $_model.ListHoneypotAlarmEventsRequest): Promise<$_model.ListHoneypotAlarmEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listHoneypotAlarmEventsWithOptions(request, runtime);
  }

  /**
   * Queries the attacker profile based on the source IP address of the attack.
   * 
   * @param request - ListHoneypotAttackerPortraitRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListHoneypotAttackerPortraitResponse
   */
  async listHoneypotAttackerPortraitWithOptions(request: $_model.ListHoneypotAttackerPortraitRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListHoneypotAttackerPortraitResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTimeStamp)) {
      query["EndTimeStamp"] = request.endTimeStamp;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.srcIp)) {
      query["SrcIp"] = request.srcIp;
    }

    if (!$dara.isNull(request.startTimeStamp)) {
      query["StartTimeStamp"] = request.startTimeStamp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListHoneypotAttackerPortrait",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListHoneypotAttackerPortraitResponse>(await this.callApi(params, req, runtime), new $_model.ListHoneypotAttackerPortraitResponse({}));
  }

  /**
   * Queries the attacker profile based on the source IP address of the attack.
   * 
   * @param request - ListHoneypotAttackerPortraitRequest
   * @returns ListHoneypotAttackerPortraitResponse
   */
  async listHoneypotAttackerPortrait(request: $_model.ListHoneypotAttackerPortraitRequest): Promise<$_model.ListHoneypotAttackerPortraitResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listHoneypotAttackerPortraitWithOptions(request, runtime);
  }

  /**
   * Queries the attack source IP addresses that are used to attack a honeypot.
   * 
   * @param request - ListHoneypotAttackerSourceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListHoneypotAttackerSourceResponse
   */
  async listHoneypotAttackerSourceWithOptions(request: $_model.ListHoneypotAttackerSourceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListHoneypotAttackerSourceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTimeStamp)) {
      query["EndTimeStamp"] = request.endTimeStamp;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.riskLevelList)) {
      query["RiskLevelList"] = request.riskLevelList;
    }

    if (!$dara.isNull(request.srcIp)) {
      query["SrcIp"] = request.srcIp;
    }

    if (!$dara.isNull(request.startTimeStamp)) {
      query["StartTimeStamp"] = request.startTimeStamp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListHoneypotAttackerSource",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListHoneypotAttackerSourceResponse>(await this.callApi(params, req, runtime), new $_model.ListHoneypotAttackerSourceResponse({}));
  }

  /**
   * Queries the attack source IP addresses that are used to attack a honeypot.
   * 
   * @param request - ListHoneypotAttackerSourceRequest
   * @returns ListHoneypotAttackerSourceResponse
   */
  async listHoneypotAttackerSource(request: $_model.ListHoneypotAttackerSourceRequest): Promise<$_model.ListHoneypotAttackerSourceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listHoneypotAttackerSourceWithOptions(request, runtime);
  }

  /**
   * Queries the details of an intrusion event in a honeypot.
   * 
   * @param request - ListHoneypotEventFlowsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListHoneypotEventFlowsResponse
   */
  async listHoneypotEventFlowsWithOptions(request: $_model.ListHoneypotEventFlowsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListHoneypotEventFlowsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.dealed)) {
      query["Dealed"] = request.dealed;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.requestId)) {
      query["RequestId"] = request.requestId;
    }

    if (!$dara.isNull(request.securityEventId)) {
      query["SecurityEventId"] = request.securityEventId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListHoneypotEventFlows",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListHoneypotEventFlowsResponse>(await this.callApi(params, req, runtime), new $_model.ListHoneypotEventFlowsResponse({}));
  }

  /**
   * Queries the details of an intrusion event in a honeypot.
   * 
   * @param request - ListHoneypotEventFlowsRequest
   * @returns ListHoneypotEventFlowsResponse
   */
  async listHoneypotEventFlows(request: $_model.ListHoneypotEventFlowsRequest): Promise<$_model.ListHoneypotEventFlowsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listHoneypotEventFlowsWithOptions(request, runtime);
  }

  /**
   * Queries the intrusion events detected by honeypots.
   * 
   * @param request - ListHoneypotEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListHoneypotEventsResponse
   */
  async listHoneypotEventsWithOptions(request: $_model.ListHoneypotEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListHoneypotEventsResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListHoneypotEvents",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListHoneypotEventsResponse>(await this.callApi(params, req, runtime), new $_model.ListHoneypotEventsResponse({}));
  }

  /**
   * Queries the intrusion events detected by honeypots.
   * 
   * @param request - ListHoneypotEventsRequest
   * @returns ListHoneypotEventsResponse
   */
  async listHoneypotEvents(request: $_model.ListHoneypotEventsRequest): Promise<$_model.ListHoneypotEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listHoneypotEventsWithOptions(request, runtime);
  }

  /**
   * Queries the information about management nodes.
   * 
   * @param request - ListHoneypotNodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListHoneypotNodeResponse
   */
  async listHoneypotNodeWithOptions(request: $_model.ListHoneypotNodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListHoneypotNodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.nodeName)) {
      query["NodeName"] = request.nodeName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListHoneypotNode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListHoneypotNodeResponse>(await this.callApi(params, req, runtime), new $_model.ListHoneypotNodeResponse({}));
  }

  /**
   * Queries the information about management nodes.
   * 
   * @param request - ListHoneypotNodeRequest
   * @returns ListHoneypotNodeResponse
   */
  async listHoneypotNode(request: $_model.ListHoneypotNodeRequest): Promise<$_model.ListHoneypotNodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listHoneypotNodeWithOptions(request, runtime);
  }

  /**
   * Queries honeypot templates.
   * 
   * @param request - ListHoneypotPresetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListHoneypotPresetResponse
   */
  async listHoneypotPresetWithOptions(request: $_model.ListHoneypotPresetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListHoneypotPresetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.honeypotImageName)) {
      query["HoneypotImageName"] = request.honeypotImageName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.nodeName)) {
      query["NodeName"] = request.nodeName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.presetName)) {
      query["PresetName"] = request.presetName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListHoneypotPreset",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListHoneypotPresetResponse>(await this.callApi(params, req, runtime), new $_model.ListHoneypotPresetResponse({}));
  }

  /**
   * Queries honeypot templates.
   * 
   * @param request - ListHoneypotPresetRequest
   * @returns ListHoneypotPresetResponse
   */
  async listHoneypotPreset(request: $_model.ListHoneypotPresetRequest): Promise<$_model.ListHoneypotPresetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listHoneypotPresetWithOptions(request, runtime);
  }

  /**
   * Queries probes.
   * 
   * @param request - ListHoneypotProbeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListHoneypotProbeResponse
   */
  async listHoneypotProbeWithOptions(request: $_model.ListHoneypotProbeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListHoneypotProbeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.displayName)) {
      query["DisplayName"] = request.displayName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.probeStatus)) {
      query["ProbeStatus"] = request.probeStatus;
    }

    if (!$dara.isNull(request.probeType)) {
      query["ProbeType"] = request.probeType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListHoneypotProbe",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListHoneypotProbeResponse>(await this.callApi(params, req, runtime), new $_model.ListHoneypotProbeResponse({}));
  }

  /**
   * Queries probes.
   * 
   * @param request - ListHoneypotProbeRequest
   * @returns ListHoneypotProbeResponse
   */
  async listHoneypotProbe(request: $_model.ListHoneypotProbeRequest): Promise<$_model.ListHoneypotProbeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listHoneypotProbeWithOptions(request, runtime);
  }

  /**
   * 查询已安装的探针
   * 
   * @param request - ListHoneypotProbeUuidRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListHoneypotProbeUuidResponse
   */
  async listHoneypotProbeUuidWithOptions(request: $_model.ListHoneypotProbeUuidRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListHoneypotProbeUuidResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.controlNodeId)) {
      query["ControlNodeId"] = request.controlNodeId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.probeType)) {
      query["ProbeType"] = request.probeType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListHoneypotProbeUuid",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListHoneypotProbeUuidResponse>(await this.callApi(params, req, runtime), new $_model.ListHoneypotProbeUuidResponse({}));
  }

  /**
   * 查询已安装的探针
   * 
   * @param request - ListHoneypotProbeUuidRequest
   * @returns ListHoneypotProbeUuidResponse
   */
  async listHoneypotProbeUuid(request: $_model.ListHoneypotProbeUuidRequest): Promise<$_model.ListHoneypotProbeUuidResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listHoneypotProbeUuidWithOptions(request, runtime);
  }

  /**
   * Queries the types of risky image build commands.
   * 
   * @param request - ListImageBuildRiskItemRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListImageBuildRiskItemResponse
   */
  async listImageBuildRiskItemWithOptions(request: $_model.ListImageBuildRiskItemRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListImageBuildRiskItemResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListImageBuildRiskItem",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListImageBuildRiskItemResponse>(await this.callApi(params, req, runtime), new $_model.ListImageBuildRiskItemResponse({}));
  }

  /**
   * Queries the types of risky image build commands.
   * 
   * @param request - ListImageBuildRiskItemRequest
   * @returns ListImageBuildRiskItemResponse
   */
  async listImageBuildRiskItem(request: $_model.ListImageBuildRiskItemRequest): Promise<$_model.ListImageBuildRiskItemResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listImageBuildRiskItemWithOptions(request, runtime);
  }

  /**
   * Query Image Registry Extended Information.
   * 
   * @param request - ListImageRegistryExtraRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListImageRegistryExtraResponse
   */
  async listImageRegistryExtraWithOptions(request: $_model.ListImageRegistryExtraRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListImageRegistryExtraResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.registryId)) {
      query["RegistryId"] = request.registryId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListImageRegistryExtra",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListImageRegistryExtraResponse>(await this.callApi(params, req, runtime), new $_model.ListImageRegistryExtraResponse({}));
  }

  /**
   * Query Image Registry Extended Information.
   * 
   * @param request - ListImageRegistryExtraRequest
   * @returns ListImageRegistryExtraResponse
   */
  async listImageRegistryExtra(request: $_model.ListImageRegistryExtraRequest): Promise<$_model.ListImageRegistryExtraResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listImageRegistryExtraWithOptions(request, runtime);
  }

  /**
   * The region ID of the image.
   * 
   * @param request - ListImageRegistryRegionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListImageRegistryRegionResponse
   */
  async listImageRegistryRegionWithOptions(request: $_model.ListImageRegistryRegionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListImageRegistryRegionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListImageRegistryRegion",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListImageRegistryRegionResponse>(await this.callApi(params, req, runtime), new $_model.ListImageRegistryRegionResponse({}));
  }

  /**
   * The region ID of the image.
   * 
   * @param request - ListImageRegistryRegionRequest
   * @returns ListImageRegistryRegionResponse
   */
  async listImageRegistryRegion(request: $_model.ListImageRegistryRegionRequest): Promise<$_model.ListImageRegistryRegionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listImageRegistryRegionWithOptions(request, runtime);
  }

  /**
   * Queries security information about a container image.
   * 
   * @param request - ListImageRiskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListImageRiskResponse
   */
  async listImageRiskWithOptions(request: $_model.ListImageRiskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListImageRiskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.imageName)) {
      query["ImageName"] = request.imageName;
    }

    if (!$dara.isNull(request.namespace)) {
      query["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListImageRisk",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListImageRiskResponse>(await this.callApi(params, req, runtime), new $_model.ListImageRiskResponse({}));
  }

  /**
   * Queries security information about a container image.
   * 
   * @param request - ListImageRiskRequest
   * @returns ListImageRiskResponse
   */
  async listImageRisk(request: $_model.ListImageRiskRequest): Promise<$_model.ListImageRiskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listImageRiskWithOptions(request, runtime);
  }

  /**
   * Queries the asset types and asset subtypes for configuration assessment.
   * 
   * @param request - ListInstanceCatalogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListInstanceCatalogResponse
   */
  async listInstanceCatalogWithOptions(request: $_model.ListInstanceCatalogRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListInstanceCatalogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.onlyCustom)) {
      query["OnlyCustom"] = request.onlyCustom;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.requirementIds)) {
      query["RequirementIds"] = request.requirementIds;
    }

    if (!$dara.isNull(request.standardIds)) {
      query["StandardIds"] = request.standardIds;
    }

    if (!$dara.isNull(request.taskSources)) {
      query["TaskSources"] = request.taskSources;
    }

    if (!$dara.isNull(request.types)) {
      query["Types"] = request.types;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListInstanceCatalog",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListInstanceCatalogResponse>(await this.callApi(params, req, runtime), new $_model.ListInstanceCatalogResponse({}));
  }

  /**
   * Queries the asset types and asset subtypes for configuration assessment.
   * 
   * @param request - ListInstanceCatalogRequest
   * @returns ListInstanceCatalogResponse
   */
  async listInstanceCatalog(request: $_model.ListInstanceCatalogRequest): Promise<$_model.ListInstanceCatalogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listInstanceCatalogWithOptions(request, runtime);
  }

  /**
   * Queries the risk levels of instances.
   * 
   * @param request - ListInstanceRiskLevelsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListInstanceRiskLevelsResponse
   */
  async listInstanceRiskLevelsWithOptions(request: $_model.ListInstanceRiskLevelsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListInstanceRiskLevelsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceList)) {
      query["InstanceList"] = request.instanceList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListInstanceRiskLevels",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListInstanceRiskLevelsResponse>(await this.callApi(params, req, runtime), new $_model.ListInstanceRiskLevelsResponse({}));
  }

  /**
   * Queries the risk levels of instances.
   * 
   * @param request - ListInstanceRiskLevelsRequest
   * @returns ListInstanceRiskLevelsResponse
   */
  async listInstanceRiskLevels(request: $_model.ListInstanceRiskLevelsRequest): Promise<$_model.ListInstanceRiskLevelsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listInstanceRiskLevelsWithOptions(request, runtime);
  }

  /**
   * Queries the statistics about risks in instances.
   * 
   * @param request - ListInstanceRiskNumRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListInstanceRiskNumResponse
   */
  async listInstanceRiskNumWithOptions(request: $_model.ListInstanceRiskNumRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListInstanceRiskNumResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceList)) {
      query["InstanceList"] = request.instanceList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListInstanceRiskNum",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListInstanceRiskNumResponse>(await this.callApi(params, req, runtime), new $_model.ListInstanceRiskNumResponse({}));
  }

  /**
   * Queries the statistics about risks in instances.
   * 
   * @param request - ListInstanceRiskNumRequest
   * @returns ListInstanceRiskNumResponse
   */
  async listInstanceRiskNum(request: $_model.ListInstanceRiskNumRequest): Promise<$_model.ListInstanceRiskNumResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listInstanceRiskNumWithOptions(request, runtime);
  }

  /**
   * Queries the alerts generated by defense rules.
   * 
   * @param request - ListInterceptionHistoryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListInterceptionHistoryResponse
   */
  async listInterceptionHistoryWithOptions(request: $_model.ListInterceptionHistoryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListInterceptionHistoryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.historyName)) {
      query["HistoryName"] = request.historyName;
    }

    if (!$dara.isNull(request.interceptionTypes)) {
      query["InterceptionTypes"] = request.interceptionTypes;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListInterceptionHistory",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListInterceptionHistoryResponse>(await this.callApi(params, req, runtime), new $_model.ListInterceptionHistoryResponse({}));
  }

  /**
   * Queries the alerts generated by defense rules.
   * 
   * @param request - ListInterceptionHistoryRequest
   * @returns ListInterceptionHistoryResponse
   */
  async listInterceptionHistory(request: $_model.ListInterceptionHistoryRequest): Promise<$_model.ListInterceptionHistoryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listInterceptionHistoryWithOptions(request, runtime);
  }

  /**
   * Queries defense rules that are configured for the container firewall feature.
   * 
   * @param request - ListInterceptionRulePageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListInterceptionRulePageResponse
   */
  async listInterceptionRulePageWithOptions(request: $_model.ListInterceptionRulePageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListInterceptionRulePageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.criteriaType)) {
      query["CriteriaType"] = request.criteriaType;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListInterceptionRulePage",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListInterceptionRulePageResponse>(await this.callApi(params, req, runtime), new $_model.ListInterceptionRulePageResponse({}));
  }

  /**
   * Queries defense rules that are configured for the container firewall feature.
   * 
   * @param request - ListInterceptionRulePageRequest
   * @returns ListInterceptionRulePageResponse
   */
  async listInterceptionRulePage(request: $_model.ListInterceptionRulePageRequest): Promise<$_model.ListInterceptionRulePageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listInterceptionRulePageWithOptions(request, runtime);
  }

  /**
   * Queries the network objects that are protected by the container firewall feature.
   * 
   * @param request - ListInterceptionTargetPageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListInterceptionTargetPageResponse
   */
  async listInterceptionTargetPageWithOptions(request: $_model.ListInterceptionTargetPageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListInterceptionTargetPageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.imageList)) {
      query["ImageList"] = request.imageList;
    }

    if (!$dara.isNull(request.namespace)) {
      query["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.tagList)) {
      query["TagList"] = request.tagList;
    }

    if (!$dara.isNull(request.targetName)) {
      query["TargetName"] = request.targetName;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListInterceptionTargetPage",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListInterceptionTargetPageResponse>(await this.callApi(params, req, runtime), new $_model.ListInterceptionTargetPageResponse({}));
  }

  /**
   * Queries the network objects that are protected by the container firewall feature.
   * 
   * @param request - ListInterceptionTargetPageRequest
   * @returns ListInterceptionTargetPageResponse
   */
  async listInterceptionTargetPage(request: $_model.ListInterceptionTargetPageRequest): Promise<$_model.ListInterceptionTargetPageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listInterceptionTargetPageWithOptions(request, runtime);
  }

  /**
   * Queries the information about Kubernetes clusters that are added to Security Center.
   * 
   * @remarks
   * You can use this operation to query the access information about Kubernetes clusters.
   * 
   * @param request - ListK8sAccessInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListK8sAccessInfoResponse
   */
  async listK8sAccessInfoWithOptions(request: $_model.ListK8sAccessInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListK8sAccessInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliyunYundunGatewayApiName)) {
      query["AliyunYundunGatewayApiName"] = request.aliyunYundunGatewayApiName;
    }

    if (!$dara.isNull(request.aliyunYundunGatewayPopName)) {
      query["AliyunYundunGatewayPopName"] = request.aliyunYundunGatewayPopName;
    }

    if (!$dara.isNull(request.aliyunYundunGatewayProjectName)) {
      query["AliyunYundunGatewayProjectName"] = request.aliyunYundunGatewayProjectName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListK8sAccessInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListK8sAccessInfoResponse>(await this.callApi(params, req, runtime), new $_model.ListK8sAccessInfoResponse({}));
  }

  /**
   * Queries the information about Kubernetes clusters that are added to Security Center.
   * 
   * @remarks
   * You can use this operation to query the access information about Kubernetes clusters.
   * 
   * @param request - ListK8sAccessInfoRequest
   * @returns ListK8sAccessInfoResponse
   */
  async listK8sAccessInfo(request: $_model.ListK8sAccessInfoRequest): Promise<$_model.ListK8sAccessInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listK8sAccessInfoWithOptions(request, runtime);
  }

  /**
   * Queries the regions supported by the log delivery feature that uses the pay-as-you-go billing method.
   * 
   * @param request - ListLogShipperRegionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListLogShipperRegionsResponse
   */
  async listLogShipperRegionsWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.ListLogShipperRegionsResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "ListLogShipperRegions",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListLogShipperRegionsResponse>(await this.callApi(params, req, runtime), new $_model.ListLogShipperRegionsResponse({}));
  }

  /**
   * Queries the regions supported by the log delivery feature that uses the pay-as-you-go billing method.
   * @returns ListLogShipperRegionsResponse
   */
  async listLogShipperRegions(): Promise<$_model.ListLogShipperRegionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listLogShipperRegionsWithOptions(runtime);
  }

  /**
   * Paginate to query the application list.
   * 
   * @param request - ListMachineAppsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListMachineAppsResponse
   */
  async listMachineAppsWithOptions(request: $_model.ListMachineAppsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListMachineAppsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.appRegionId)) {
      query["AppRegionId"] = request.appRegionId;
    }

    if (!$dara.isNull(request.authVersion)) {
      query["AuthVersion"] = request.authVersion;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceDirectoryUid)) {
      query["ResourceDirectoryUid"] = request.resourceDirectoryUid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListMachineApps",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListMachineAppsResponse>(await this.callApi(params, req, runtime), new $_model.ListMachineAppsResponse({}));
  }

  /**
   * Paginate to query the application list.
   * 
   * @param request - ListMachineAppsRequest
   * @returns ListMachineAppsResponse
   */
  async listMachineApps(request: $_model.ListMachineAppsRequest): Promise<$_model.ListMachineAppsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listMachineAppsWithOptions(request, runtime);
  }

  /**
   * Queries the alert whitelist rules of sensitive files that are detected by using the agentless detection feature.
   * 
   * @param request - ListMaliciousFileWhitelistConfigsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListMaliciousFileWhitelistConfigsResponse
   */
  async listMaliciousFileWhitelistConfigsWithOptions(request: $_model.ListMaliciousFileWhitelistConfigsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListMaliciousFileWhitelistConfigsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.eventName)) {
      query["EventName"] = request.eventName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListMaliciousFileWhitelistConfigs",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListMaliciousFileWhitelistConfigsResponse>(await this.callApi(params, req, runtime), new $_model.ListMaliciousFileWhitelistConfigsResponse({}));
  }

  /**
   * Queries the alert whitelist rules of sensitive files that are detected by using the agentless detection feature.
   * 
   * @param request - ListMaliciousFileWhitelistConfigsRequest
   * @returns ListMaliciousFileWhitelistConfigsResponse
   */
  async listMaliciousFileWhitelistConfigs(request: $_model.ListMaliciousFileWhitelistConfigsRequest): Promise<$_model.ListMaliciousFileWhitelistConfigsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listMaliciousFileWhitelistConfigsWithOptions(request, runtime);
  }

  /**
   * Queries alerts that are generated for malicious files.
   * 
   * @param request - ListObjectScanEventRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListObjectScanEventResponse
   */
  async listObjectScanEventWithOptions(request: $_model.ListObjectScanEventRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListObjectScanEventResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bucketName)) {
      query["BucketName"] = request.bucketName;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.eventName)) {
      query["EventName"] = request.eventName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.md5)) {
      query["Md5"] = request.md5;
    }

    if (!$dara.isNull(request.ossKey)) {
      query["OssKey"] = request.ossKey;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.parentEventId)) {
      query["ParentEventId"] = request.parentEventId;
    }

    if (!$dara.isNull(request.riskLevel)) {
      query["RiskLevel"] = request.riskLevel;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.timeEnd)) {
      query["TimeEnd"] = request.timeEnd;
    }

    if (!$dara.isNull(request.timeStart)) {
      query["TimeStart"] = request.timeStart;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListObjectScanEvent",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListObjectScanEventResponse>(await this.callApi(params, req, runtime), new $_model.ListObjectScanEventResponse({}));
  }

  /**
   * Queries alerts that are generated for malicious files.
   * 
   * @param request - ListObjectScanEventRequest
   * @returns ListObjectScanEventResponse
   */
  async listObjectScanEvent(request: $_model.ListObjectScanEventRequest): Promise<$_model.ListObjectScanEventResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listObjectScanEventWithOptions(request, runtime);
  }

  /**
   * Queries at-risk image blocking rules.
   * 
   * @param request - ListOpaClusterStrategyNewRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListOpaClusterStrategyNewResponse
   */
  async listOpaClusterStrategyNewWithOptions(request: $_model.ListOpaClusterStrategyNewRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListOpaClusterStrategyNewResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.imageName)) {
      query["ImageName"] = request.imageName;
    }

    if (!$dara.isNull(request.label)) {
      query["Label"] = request.label;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.strategyName)) {
      query["StrategyName"] = request.strategyName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListOpaClusterStrategyNew",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListOpaClusterStrategyNewResponse>(await this.callApi(params, req, runtime), new $_model.ListOpaClusterStrategyNewResponse({}));
  }

  /**
   * Queries at-risk image blocking rules.
   * 
   * @param request - ListOpaClusterStrategyNewRequest
   * @returns ListOpaClusterStrategyNewResponse
   */
  async listOpaClusterStrategyNew(request: $_model.ListOpaClusterStrategyNewRequest): Promise<$_model.ListOpaClusterStrategyNewResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listOpaClusterStrategyNewWithOptions(request, runtime);
  }

  /**
   * Query the list of instance results under the operation check item
   * 
   * @remarks
   * This interface is only available to users who have purchased the cloud platform configuration check authorization or enabled the pay-as-you-go service for cloud platform configuration checks.
   * 
   * @param request - ListOperationCheckRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListOperationCheckResponse
   */
  async listOperationCheckWithOptions(request: $_model.ListOperationCheckRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListOperationCheckResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListOperationCheck",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListOperationCheckResponse>(await this.callApi(params, req, runtime), new $_model.ListOperationCheckResponse({}));
  }

  /**
   * Query the list of instance results under the operation check item
   * 
   * @remarks
   * This interface is only available to users who have purchased the cloud platform configuration check authorization or enabled the pay-as-you-go service for cloud platform configuration checks.
   * 
   * @param request - ListOperationCheckRequest
   * @returns ListOperationCheckResponse
   */
  async listOperationCheck(request: $_model.ListOperationCheckRequest): Promise<$_model.ListOperationCheckResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listOperationCheckWithOptions(request, runtime);
  }

  /**
   * Queries a list of operation tasks.
   * 
   * @remarks
   * You can query only operation tasks.
   * 
   * @param request - ListOperationProcessRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListOperationProcessResponse
   */
  async listOperationProcessWithOptions(request: $_model.ListOperationProcessRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListOperationProcessResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.statusCodes)) {
      query["StatusCodes"] = request.statusCodes;
    }

    if (!$dara.isNull(request.taskIds)) {
      query["TaskIds"] = request.taskIds;
    }

    if (!$dara.isNull(request.taskSources)) {
      query["TaskSources"] = request.taskSources;
    }

    if (!$dara.isNull(request.taskTypes)) {
      query["TaskTypes"] = request.taskTypes;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListOperationProcess",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListOperationProcessResponse>(await this.callApi(params, req, runtime), new $_model.ListOperationProcessResponse({}));
  }

  /**
   * Queries a list of operation tasks.
   * 
   * @remarks
   * You can query only operation tasks.
   * 
   * @param request - ListOperationProcessRequest
   * @returns ListOperationProcessResponse
   */
  async listOperationProcess(request: $_model.ListOperationProcessRequest): Promise<$_model.ListOperationProcessResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listOperationProcessWithOptions(request, runtime);
  }

  /**
   * Query operation task sub-task list.
   * 
   * @remarks
   * You can query only operation subtasks.
   * 
   * @param request - ListOperationProcessDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListOperationProcessDetailResponse
   */
  async listOperationProcessDetailWithOptions(request: $_model.ListOperationProcessDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListOperationProcessDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.statusCodes)) {
      query["StatusCodes"] = request.statusCodes;
    }

    if (!$dara.isNull(request.taskIds)) {
      query["TaskIds"] = request.taskIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListOperationProcessDetail",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListOperationProcessDetailResponse>(await this.callApi(params, req, runtime), new $_model.ListOperationProcessDetailResponse({}));
  }

  /**
   * Query operation task sub-task list.
   * 
   * @remarks
   * You can query only operation subtasks.
   * 
   * @param request - ListOperationProcessDetailRequest
   * @returns ListOperationProcessDetailResponse
   */
  async listOperationProcessDetail(request: $_model.ListOperationProcessDetailRequest): Promise<$_model.ListOperationProcessDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listOperationProcessDetailWithOptions(request, runtime);
  }

  /**
   * Display the list of cloud product configuration check, repair, and rollback tasks
   * 
   * @param request - ListOperationTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListOperationTaskResponse
   */
  async listOperationTaskWithOptions(request: $_model.ListOperationTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListOperationTaskResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListOperationTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListOperationTaskResponse>(await this.callApi(params, req, runtime), new $_model.ListOperationTaskResponse({}));
  }

  /**
   * Display the list of cloud product configuration check, repair, and rollback tasks
   * 
   * @param request - ListOperationTaskRequest
   * @returns ListOperationTaskResponse
   */
  async listOperationTask(request: $_model.ListOperationTaskRequest): Promise<$_model.ListOperationTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listOperationTaskWithOptions(request, runtime);
  }

  /**
   * Queries Object Storage Service (OSS) buckets.
   * 
   * @param request - ListOssBucketRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListOssBucketResponse
   */
  async listOssBucketWithOptions(request: $_model.ListOssBucketRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListOssBucketResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bucketName)) {
      query["BucketName"] = request.bucketName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListOssBucket",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListOssBucketResponse>(await this.callApi(params, req, runtime), new $_model.ListOssBucketResponse({}));
  }

  /**
   * Queries Object Storage Service (OSS) buckets.
   * 
   * @param request - ListOssBucketRequest
   * @returns ListOssBucketResponse
   */
  async listOssBucket(request: $_model.ListOssBucketRequest): Promise<$_model.ListOssBucketResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listOssBucketWithOptions(request, runtime);
  }

  /**
   * Queries the risk information of an Object Storage Service (OSS) bucket.
   * 
   * @param request - ListOssBucketScanInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListOssBucketScanInfoResponse
   */
  async listOssBucketScanInfoWithOptions(request: $_model.ListOssBucketScanInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListOssBucketScanInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bucketName)) {
      query["BucketName"] = request.bucketName;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.fuzzBucketName)) {
      query["FuzzBucketName"] = request.fuzzBucketName;
    }

    if (!$dara.isNull(request.hasRisk)) {
      query["HasRisk"] = request.hasRisk;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListOssBucketScanInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListOssBucketScanInfoResponse>(await this.callApi(params, req, runtime), new $_model.ListOssBucketScanInfoResponse({}));
  }

  /**
   * Queries the risk information of an Object Storage Service (OSS) bucket.
   * 
   * @param request - ListOssBucketScanInfoRequest
   * @returns ListOssBucketScanInfoResponse
   */
  async listOssBucketScanInfo(request: $_model.ListOssBucketScanInfoRequest): Promise<$_model.ListOssBucketScanInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listOssBucketScanInfoWithOptions(request, runtime);
  }

  /**
   * Queries the configuration of an Object Storage Service (OSS) file detection policy.
   * 
   * @param request - ListOssScanConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListOssScanConfigResponse
   */
  async listOssScanConfigWithOptions(request: $_model.ListOssScanConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListOssScanConfigResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListOssScanConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListOssScanConfigResponse>(await this.callApi(params, req, runtime), new $_model.ListOssScanConfigResponse({}));
  }

  /**
   * Queries the configuration of an Object Storage Service (OSS) file detection policy.
   * 
   * @param request - ListOssScanConfigRequest
   * @returns ListOssScanConfigResponse
   */
  async listOssScanConfig(request: $_model.ListOssScanConfigRequest): Promise<$_model.ListOssScanConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listOssScanConfigWithOptions(request, runtime);
  }

  /**
   * Queries the information about plug-ins on a server.
   * 
   * @param tmpReq - ListPluginForUuidRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListPluginForUuidResponse
   */
  async listPluginForUuidWithOptions(tmpReq: $_model.ListPluginForUuidRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListPluginForUuidResponse> {
    tmpReq.validate();
    let request = new $_model.ListPluginForUuidShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.types)) {
      request.typesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.types, "Types", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.typesShrink)) {
      query["Types"] = request.typesShrink;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListPluginForUuid",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListPluginForUuidResponse>(await this.callApi(params, req, runtime), new $_model.ListPluginForUuidResponse({}));
  }

  /**
   * Queries the information about plug-ins on a server.
   * 
   * @param request - ListPluginForUuidRequest
   * @returns ListPluginForUuidResponse
   */
  async listPluginForUuid(request: $_model.ListPluginForUuidRequest): Promise<$_model.ListPluginForUuidResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listPluginForUuidWithOptions(request, runtime);
  }

  /**
   * Queries the security risks of a pod.
   * 
   * @param request - ListPodRiskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListPodRiskResponse
   */
  async listPodRiskWithOptions(request: $_model.ListPodRiskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListPodRiskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.namespace)) {
      query["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.podName)) {
      query["PodName"] = request.podName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListPodRisk",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListPodRiskResponse>(await this.callApi(params, req, runtime), new $_model.ListPodRiskResponse({}));
  }

  /**
   * Queries the security risks of a pod.
   * 
   * @param request - ListPodRiskRequest
   * @returns ListPodRiskResponse
   */
  async listPodRisk(request: $_model.ListPodRiskRequest): Promise<$_model.ListPodRiskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listPodRiskWithOptions(request, runtime);
  }

  /**
   * Queries the information about the self-managed Kubernetes clusters that are added to Security Center.
   * 
   * @param request - ListPrivateK8sRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListPrivateK8sResponse
   */
  async listPrivateK8sWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.ListPrivateK8sResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "ListPrivateK8s",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListPrivateK8sResponse>(await this.callApi(params, req, runtime), new $_model.ListPrivateK8sResponse({}));
  }

  /**
   * Queries the information about the self-managed Kubernetes clusters that are added to Security Center.
   * @returns ListPrivateK8sResponse
   */
  async listPrivateK8s(): Promise<$_model.ListPrivateK8sResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listPrivateK8sWithOptions(runtime);
  }

  /**
   * Queries image repositories.
   * 
   * @param request - ListPrivateRegistryListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListPrivateRegistryListResponse
   */
  async listPrivateRegistryListWithOptions(request: $_model.ListPrivateRegistryListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListPrivateRegistryListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.registryType)) {
      query["RegistryType"] = request.registryType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListPrivateRegistryList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListPrivateRegistryListResponse>(await this.callApi(params, req, runtime), new $_model.ListPrivateRegistryListResponse({}));
  }

  /**
   * Queries image repositories.
   * 
   * @param request - ListPrivateRegistryListRequest
   * @returns ListPrivateRegistryListResponse
   */
  async listPrivateRegistryList(request: $_model.ListPrivateRegistryListRequest): Promise<$_model.ListPrivateRegistryListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listPrivateRegistryListWithOptions(request, runtime);
  }

  /**
   * Queries the number of image repositories of each type.
   * 
   * @param request - ListPrivateRegistryTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListPrivateRegistryTypeResponse
   */
  async listPrivateRegistryTypeWithOptions(request: $_model.ListPrivateRegistryTypeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListPrivateRegistryTypeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListPrivateRegistryType",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListPrivateRegistryTypeResponse>(await this.callApi(params, req, runtime), new $_model.ListPrivateRegistryTypeResponse({}));
  }

  /**
   * Queries the number of image repositories of each type.
   * 
   * @param request - ListPrivateRegistryTypeRequest
   * @returns ListPrivateRegistryTypeResponse
   */
  async listPrivateRegistryType(request: $_model.ListPrivateRegistryTypeRequest): Promise<$_model.ListPrivateRegistryTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listPrivateRegistryTypeWithOptions(request, runtime);
  }

  /**
   * Query the details of a release batch for upgrade.
   * 
   * @param request - ListPublishBatchRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListPublishBatchResponse
   */
  async listPublishBatchWithOptions(request: $_model.ListPublishBatchRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListPublishBatchResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.batchName)) {
      query["BatchName"] = request.batchName;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.upgradeVersion)) {
      query["UpgradeVersion"] = request.upgradeVersion;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListPublishBatch",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListPublishBatchResponse>(await this.callApi(params, req, runtime), new $_model.ListPublishBatchResponse({}));
  }

  /**
   * Query the details of a release batch for upgrade.
   * 
   * @param request - ListPublishBatchRequest
   * @returns ListPublishBatchResponse
   */
  async listPublishBatch(request: $_model.ListPublishBatchRequest): Promise<$_model.ListPublishBatchResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listPublishBatchWithOptions(request, runtime);
  }

  /**
   * Queries the automatic management policies of members that are added to Security Center for multi-account management. The members in the automatic control management directory are automatically added to the member list of Security Center.
   * 
   * @remarks
   * You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
   * 
   * @param request - ListRdDefaultSyncListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListRdDefaultSyncListResponse
   */
  async listRdDefaultSyncListWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.ListRdDefaultSyncListResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "ListRdDefaultSyncList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListRdDefaultSyncListResponse>(await this.callApi(params, req, runtime), new $_model.ListRdDefaultSyncListResponse({}));
  }

  /**
   * Queries the automatic management policies of members that are added to Security Center for multi-account management. The members in the automatic control management directory are automatically added to the member list of Security Center.
   * 
   * @remarks
   * You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
   * @returns ListRdDefaultSyncListResponse
   */
  async listRdDefaultSyncList(): Promise<$_model.ListRdDefaultSyncListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listRdDefaultSyncListWithOptions(runtime);
  }

  /**
   * Queries the network objects based on which a specified cluster is protected.
   * 
   * @param request - ListRuleTargetAllRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListRuleTargetAllResponse
   */
  async listRuleTargetAllWithOptions(request: $_model.ListRuleTargetAllRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListRuleTargetAllResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListRuleTargetAll",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListRuleTargetAllResponse>(await this.callApi(params, req, runtime), new $_model.ListRuleTargetAllResponse({}));
  }

  /**
   * Queries the network objects based on which a specified cluster is protected.
   * 
   * @param request - ListRuleTargetAllRequest
   * @returns ListRuleTargetAllResponse
   */
  async listRuleTargetAll(request: $_model.ListRuleTargetAllRequest): Promise<$_model.ListRuleTargetAllResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listRuleTargetAllWithOptions(request, runtime);
  }

  /**
   * Queries rules for container tamper-proofing.
   * 
   * @param request - ListSasContainerWebDefenseRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSasContainerWebDefenseRuleResponse
   */
  async listSasContainerWebDefenseRuleWithOptions(request: $_model.ListSasContainerWebDefenseRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListSasContainerWebDefenseRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.logicalExp)) {
      query["LogicalExp"] = request.logicalExp;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSasContainerWebDefenseRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListSasContainerWebDefenseRuleResponse>(await this.callApi(params, req, runtime), new $_model.ListSasContainerWebDefenseRuleResponse({}));
  }

  /**
   * Queries rules for container tamper-proofing.
   * 
   * @param request - ListSasContainerWebDefenseRuleRequest
   * @returns ListSasContainerWebDefenseRuleResponse
   */
  async listSasContainerWebDefenseRule(request: $_model.ListSasContainerWebDefenseRuleRequest): Promise<$_model.ListSasContainerWebDefenseRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSasContainerWebDefenseRuleWithOptions(request, runtime);
  }

  /**
   * Query the list of supported cloud products for attacks.
   * 
   * @param request - ListSupportAttackPathAssetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSupportAttackPathAssetResponse
   */
  async listSupportAttackPathAssetWithOptions(request: $_model.ListSupportAttackPathAssetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListSupportAttackPathAssetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.nodeType)) {
      query["NodeType"] = request.nodeType;
    }

    if (!$dara.isNull(request.pathName)) {
      query["PathName"] = request.pathName;
    }

    if (!$dara.isNull(request.pathType)) {
      query["PathType"] = request.pathType;
    }

    if (!$dara.isNull(request.supportType)) {
      query["SupportType"] = request.supportType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSupportAttackPathAsset",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListSupportAttackPathAssetResponse>(await this.callApi(params, req, runtime), new $_model.ListSupportAttackPathAssetResponse({}));
  }

  /**
   * Query the list of supported cloud products for attacks.
   * 
   * @param request - ListSupportAttackPathAssetRequest
   * @returns ListSupportAttackPathAssetResponse
   */
  async listSupportAttackPathAsset(request: $_model.ListSupportAttackPathAssetRequest): Promise<$_model.ListSupportAttackPathAssetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSupportAttackPathAssetWithOptions(request, runtime);
  }

  /**
   * Queries supported file suffixes.
   * 
   * @param request - ListSupportObjectSuffixRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSupportObjectSuffixResponse
   */
  async listSupportObjectSuffixWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.ListSupportObjectSuffixResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "ListSupportObjectSuffix",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListSupportObjectSuffixResponse>(await this.callApi(params, req, runtime), new $_model.ListSupportObjectSuffixResponse({}));
  }

  /**
   * Queries supported file suffixes.
   * @returns ListSupportObjectSuffixResponse
   */
  async listSupportObjectSuffix(): Promise<$_model.ListSupportObjectSuffixResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSupportObjectSuffixWithOptions(runtime);
  }

  /**
   * Queries the details about the aggregation types of system defense rules.
   * 
   * @param request - ListSystemAggregationRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSystemAggregationRulesResponse
   */
  async listSystemAggregationRulesWithOptions(request: $_model.ListSystemAggregationRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListSystemAggregationRulesResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSystemAggregationRules",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListSystemAggregationRulesResponse>(await this.callApi(params, req, runtime), new $_model.ListSystemAggregationRulesResponse({}));
  }

  /**
   * Queries the details about the aggregation types of system defense rules.
   * 
   * @param request - ListSystemAggregationRulesRequest
   * @returns ListSystemAggregationRulesResponse
   */
  async listSystemAggregationRules(request: $_model.ListSystemAggregationRulesRequest): Promise<$_model.ListSystemAggregationRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSystemAggregationRulesWithOptions(request, runtime);
  }

  /**
   * Queries the types of system rules.
   * 
   * @param request - ListSystemClientRuleTypesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSystemClientRuleTypesResponse
   */
  async listSystemClientRuleTypesWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.ListSystemClientRuleTypesResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "ListSystemClientRuleTypes",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListSystemClientRuleTypesResponse>(await this.callApi(params, req, runtime), new $_model.ListSystemClientRuleTypesResponse({}));
  }

  /**
   * Queries the types of system rules.
   * @returns ListSystemClientRuleTypesResponse
   */
  async listSystemClientRuleTypes(): Promise<$_model.ListSystemClientRuleTypesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSystemClientRuleTypesWithOptions(runtime);
  }

  /**
   * Queries system defense rules.
   * 
   * @param request - ListSystemClientRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSystemClientRulesResponse
   */
  async listSystemClientRulesWithOptions(request: $_model.ListSystemClientRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListSystemClientRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aggregationIds)) {
      query["AggregationIds"] = request.aggregationIds;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.isContainer)) {
      query["IsContainer"] = request.isContainer;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    if (!$dara.isNull(request.ruleTypes)) {
      query["RuleTypes"] = request.ruleTypes;
    }

    if (!$dara.isNull(request.systemType)) {
      query["SystemType"] = request.systemType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSystemClientRules",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListSystemClientRulesResponse>(await this.callApi(params, req, runtime), new $_model.ListSystemClientRulesResponse({}));
  }

  /**
   * Queries system defense rules.
   * 
   * @param request - ListSystemClientRulesRequest
   * @returns ListSystemClientRulesResponse
   */
  async listSystemClientRules(request: $_model.ListSystemClientRulesRequest): Promise<$_model.ListSystemClientRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSystemClientRulesWithOptions(request, runtime);
  }

  /**
   * Queries the aggregation types of system defense rules.
   * 
   * @param request - ListSystemRuleAggregationTypesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSystemRuleAggregationTypesResponse
   */
  async listSystemRuleAggregationTypesWithOptions(request: $_model.ListSystemRuleAggregationTypesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListSystemRuleAggregationTypesResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSystemRuleAggregationTypes",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListSystemRuleAggregationTypesResponse>(await this.callApi(params, req, runtime), new $_model.ListSystemRuleAggregationTypesResponse({}));
  }

  /**
   * Queries the aggregation types of system defense rules.
   * 
   * @param request - ListSystemRuleAggregationTypesRequest
   * @returns ListSystemRuleAggregationTypesResponse
   */
  async listSystemRuleAggregationTypes(request: $_model.ListSystemRuleAggregationTypesRequest): Promise<$_model.ListSystemRuleAggregationTypesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSystemRuleAggregationTypesWithOptions(request, runtime);
  }

  /**
   * Query Targets by Batch
   * 
   * @param request - ListTargetByBatchRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTargetByBatchResponse
   */
  async listTargetByBatchWithOptions(request: $_model.ListTargetByBatchRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListTargetByBatchResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.batchId)) {
      query["BatchId"] = request.batchId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.operationBase)) {
      query["OperationBase"] = request.operationBase;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTargetByBatch",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListTargetByBatchResponse>(await this.callApi(params, req, runtime), new $_model.ListTargetByBatchResponse({}));
  }

  /**
   * Query Targets by Batch
   * 
   * @param request - ListTargetByBatchRequest
   * @returns ListTargetByBatchResponse
   */
  async listTargetByBatch(request: $_model.ListTargetByBatchRequest): Promise<$_model.ListTargetByBatchResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTargetByBatchWithOptions(request, runtime);
  }

  /**
   * Queries tasks that are not complete by task type.
   * 
   * @param request - ListUnfinishedOnceTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListUnfinishedOnceTaskResponse
   */
  async listUnfinishedOnceTaskWithOptions(request: $_model.ListUnfinishedOnceTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListUnfinishedOnceTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.target)) {
      query["Target"] = request.target;
    }

    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListUnfinishedOnceTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListUnfinishedOnceTaskResponse>(await this.callApi(params, req, runtime), new $_model.ListUnfinishedOnceTaskResponse({}));
  }

  /**
   * Queries tasks that are not complete by task type.
   * 
   * @param request - ListUnfinishedOnceTaskRequest
   * @returns ListUnfinishedOnceTaskResponse
   */
  async listUnfinishedOnceTask(request: $_model.ListUnfinishedOnceTaskRequest): Promise<$_model.ListUnfinishedOnceTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listUnfinishedOnceTaskWithOptions(request, runtime);
  }

  /**
   * Queries the information about the servers whose Security Center agent is not installed.
   * 
   * @param request - ListUninstallAegisMachinesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListUninstallAegisMachinesResponse
   */
  async listUninstallAegisMachinesWithOptions(request: $_model.ListUninstallAegisMachinesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListUninstallAegisMachinesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.os)) {
      query["Os"] = request.os;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionIdStr)) {
      query["RegionIdStr"] = request.regionIdStr;
    }

    if (!$dara.isNull(request.regionNo)) {
      query["RegionNo"] = request.regionNo;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.vendor)) {
      query["Vendor"] = request.vendor;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListUninstallAegisMachines",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListUninstallAegisMachinesResponse>(await this.callApi(params, req, runtime), new $_model.ListUninstallAegisMachinesResponse({}));
  }

  /**
   * Queries the information about the servers whose Security Center agent is not installed.
   * 
   * @param request - ListUninstallAegisMachinesRequest
   * @returns ListUninstallAegisMachinesResponse
   */
  async listUninstallAegisMachines(request: $_model.ListUninstallAegisMachinesRequest): Promise<$_model.ListUninstallAegisMachinesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listUninstallAegisMachinesWithOptions(request, runtime);
  }

  /**
   * Get VPC Data
   * 
   * @param request - ListUserVpcRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListUserVpcResponse
   */
  async listUserVpcWithOptions(request: $_model.ListUserVpcRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListUserVpcResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.k8sRegionId)) {
      query["K8sRegionId"] = request.k8sRegionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListUserVpc",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListUserVpcResponse>(await this.callApi(params, req, runtime), new $_model.ListUserVpcResponse({}));
  }

  /**
   * Get VPC Data
   * 
   * @param request - ListUserVpcRequest
   * @returns ListUserVpcResponse
   */
  async listUserVpc(request: $_model.ListUserVpcRequest): Promise<$_model.ListUserVpcResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listUserVpcWithOptions(request, runtime);
  }

  /**
   * Query the list of instance UUIDs based on the application ID.
   * 
   * @param request - ListUuidsByAppIdRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListUuidsByAppIdResponse
   */
  async listUuidsByAppIdWithOptions(request: $_model.ListUuidsByAppIdRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListUuidsByAppIdResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appId)) {
      query["AppId"] = request.appId;
    }

    if (!$dara.isNull(request.appRegionId)) {
      query["AppRegionId"] = request.appRegionId;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceDirectoryUid)) {
      query["ResourceDirectoryUid"] = request.resourceDirectoryUid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListUuidsByAppId",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListUuidsByAppIdResponse>(await this.callApi(params, req, runtime), new $_model.ListUuidsByAppIdResponse({}));
  }

  /**
   * Query the list of instance UUIDs based on the application ID.
   * 
   * @param request - ListUuidsByAppIdRequest
   * @returns ListUuidsByAppIdResponse
   */
  async listUuidsByAppId(request: $_model.ListUuidsByAppIdRequest): Promise<$_model.ListUuidsByAppIdResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listUuidsByAppIdWithOptions(request, runtime);
  }

  /**
   * Queries protected assets by using the paths to specific web directories.
   * 
   * @param request - ListUuidsByWebPathRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListUuidsByWebPathResponse
   */
  async listUuidsByWebPathWithOptions(request: $_model.ListUuidsByWebPathRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListUuidsByWebPathResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.webPath)) {
      query["WebPath"] = request.webPath;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListUuidsByWebPath",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListUuidsByWebPathResponse>(await this.callApi(params, req, runtime), new $_model.ListUuidsByWebPathResponse({}));
  }

  /**
   * Queries protected assets by using the paths to specific web directories.
   * 
   * @param request - ListUuidsByWebPathRequest
   * @returns ListUuidsByWebPathResponse
   */
  async listUuidsByWebPath(request: $_model.ListUuidsByWebPathRequest): Promise<$_model.ListUuidsByWebPathResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listUuidsByWebPathWithOptions(request, runtime);
  }

  /**
   * Queries servers on which virus detection and removal tasks are performed.
   * 
   * @param request - ListVirusScanMachineRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListVirusScanMachineResponse
   */
  async listVirusScanMachineWithOptions(request: $_model.ListVirusScanMachineRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListVirusScanMachineResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListVirusScanMachine",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListVirusScanMachineResponse>(await this.callApi(params, req, runtime), new $_model.ListVirusScanMachineResponse({}));
  }

  /**
   * Queries servers on which virus detection and removal tasks are performed.
   * 
   * @param request - ListVirusScanMachineRequest
   * @returns ListVirusScanMachineResponse
   */
  async listVirusScanMachine(request: $_model.ListVirusScanMachineRequest): Promise<$_model.ListVirusScanMachineResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listVirusScanMachineWithOptions(request, runtime);
  }

  /**
   * Queries the alert events that are generated for viruses detected on a server.
   * 
   * @param request - ListVirusScanMachineEventRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListVirusScanMachineEventResponse
   */
  async listVirusScanMachineEventWithOptions(request: $_model.ListVirusScanMachineEventRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListVirusScanMachineEventResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.operateTaskId)) {
      query["OperateTaskId"] = request.operateTaskId;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListVirusScanMachineEvent",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListVirusScanMachineEventResponse>(await this.callApi(params, req, runtime), new $_model.ListVirusScanMachineEventResponse({}));
  }

  /**
   * Queries the alert events that are generated for viruses detected on a server.
   * 
   * @param request - ListVirusScanMachineEventRequest
   * @returns ListVirusScanMachineEventResponse
   */
  async listVirusScanMachineEvent(request: $_model.ListVirusScanMachineEventRequest): Promise<$_model.ListVirusScanMachineEventResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listVirusScanMachineEventWithOptions(request, runtime);
  }

  /**
   * Queries virus scan tasks based on conditions such as the task type, task status, and server information.
   * 
   * @param request - ListVirusScanTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListVirusScanTaskResponse
   */
  async listVirusScanTaskWithOptions(request: $_model.ListVirusScanTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListVirusScanTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.internetIp)) {
      query["InternetIp"] = request.internetIp;
    }

    if (!$dara.isNull(request.intranetIp)) {
      query["IntranetIp"] = request.intranetIp;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.machineName)) {
      query["MachineName"] = request.machineName;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.rootTask)) {
      query["RootTask"] = request.rootTask;
    }

    if (!$dara.isNull(request.rootTaskId)) {
      query["RootTaskId"] = request.rootTaskId;
    }

    if (!$dara.isNull(request.scanType)) {
      query["ScanType"] = request.scanType;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.statusList)) {
      query["StatusList"] = request.statusList;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListVirusScanTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListVirusScanTaskResponse>(await this.callApi(params, req, runtime), new $_model.ListVirusScanTaskResponse({}));
  }

  /**
   * Queries virus scan tasks based on conditions such as the task type, task status, and server information.
   * 
   * @param request - ListVirusScanTaskRequest
   * @returns ListVirusScanTaskResponse
   */
  async listVirusScanTask(request: $_model.ListVirusScanTaskRequest): Promise<$_model.ListVirusScanTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listVirusScanTaskWithOptions(request, runtime);
  }

  /**
   * Queries the existing configurations of vulnerabilities that can be automatically fixed.
   * 
   * @param request - ListVulAutoRepairConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListVulAutoRepairConfigResponse
   */
  async listVulAutoRepairConfigWithOptions(request: $_model.ListVulAutoRepairConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListVulAutoRepairConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliasName)) {
      query["AliasName"] = request.aliasName;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListVulAutoRepairConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListVulAutoRepairConfigResponse>(await this.callApi(params, req, runtime), new $_model.ListVulAutoRepairConfigResponse({}));
  }

  /**
   * Queries the existing configurations of vulnerabilities that can be automatically fixed.
   * 
   * @param request - ListVulAutoRepairConfigRequest
   * @returns ListVulAutoRepairConfigResponse
   */
  async listVulAutoRepairConfig(request: $_model.ListVulAutoRepairConfigRequest): Promise<$_model.ListVulAutoRepairConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listVulAutoRepairConfigWithOptions(request, runtime);
  }

  /**
   * Queries the global configurations of vulnerability detection.
   * 
   * @param request - ListVulGlobalConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListVulGlobalConfigResponse
   */
  async listVulGlobalConfigWithOptions(request: $_model.ListVulGlobalConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListVulGlobalConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configKey)) {
      query["ConfigKey"] = request.configKey;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListVulGlobalConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListVulGlobalConfigResponse>(await this.callApi(params, req, runtime), new $_model.ListVulGlobalConfigResponse({}));
  }

  /**
   * Queries the global configurations of vulnerability detection.
   * 
   * @param request - ListVulGlobalConfigRequest
   * @returns ListVulGlobalConfigResponse
   */
  async listVulGlobalConfig(request: $_model.ListVulGlobalConfigRequest): Promise<$_model.ListVulGlobalConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listVulGlobalConfigWithOptions(request, runtime);
  }

  /**
   * Marks members for multi-account management. You can call this operation to mark selected members as followed. In the Security Center console, the drop-down list above the left-side navigation pane displays the followed members.
   * 
   * @param request - MarkMonitorAccountsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MarkMonitorAccountsResponse
   */
  async markMonitorAccountsWithOptions(request: $_model.MarkMonitorAccountsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.MarkMonitorAccountsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountIds)) {
      query["AccountIds"] = request.accountIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "MarkMonitorAccounts",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.MarkMonitorAccountsResponse>(await this.callApi(params, req, runtime), new $_model.MarkMonitorAccountsResponse({}));
  }

  /**
   * Marks members for multi-account management. You can call this operation to mark selected members as followed. In the Security Center console, the drop-down list above the left-side navigation pane displays the followed members.
   * 
   * @param request - MarkMonitorAccountsRequest
   * @returns MarkMonitorAccountsResponse
   */
  async markMonitorAccounts(request: $_model.MarkMonitorAccountsRequest): Promise<$_model.MarkMonitorAccountsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.markMonitorAccountsWithOptions(request, runtime);
  }

  /**
   * Handles AccessKey pair leaks.
   * 
   * @param request - ModifyAccessKeyLeakDealRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAccessKeyLeakDealResponse
   */
  async modifyAccessKeyLeakDealWithOptions(request: $_model.ModifyAccessKeyLeakDealRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyAccessKeyLeakDealResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.idList)) {
      query["IdList"] = request.idList;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAccessKeyLeakDeal",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyAccessKeyLeakDealResponse>(await this.callApi(params, req, runtime), new $_model.ModifyAccessKeyLeakDealResponse({}));
  }

  /**
   * Handles AccessKey pair leaks.
   * 
   * @param request - ModifyAccessKeyLeakDealRequest
   * @returns ModifyAccessKeyLeakDealResponse
   */
  async modifyAccessKeyLeakDeal(request: $_model.ModifyAccessKeyLeakDealRequest): Promise<$_model.ModifyAccessKeyLeakDealResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAccessKeyLeakDealWithOptions(request, runtime);
  }

  /**
   * Modifies a defense rule against brute-force attacks.
   * 
   * @param tmpReq - ModifyAntiBruteForceRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAntiBruteForceRuleResponse
   */
  async modifyAntiBruteForceRuleWithOptions(tmpReq: $_model.ModifyAntiBruteForceRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyAntiBruteForceRuleResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyAntiBruteForceRuleShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.protocolType)) {
      request.protocolTypeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.protocolType, "ProtocolType", "json");
    }

    let query = { };
    if (!$dara.isNull(request.defaultRule)) {
      query["DefaultRule"] = request.defaultRule;
    }

    if (!$dara.isNull(request.failCount)) {
      query["FailCount"] = request.failCount;
    }

    if (!$dara.isNull(request.forbiddenTime)) {
      query["ForbiddenTime"] = request.forbiddenTime;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.protocolTypeShrink)) {
      query["ProtocolType"] = request.protocolTypeShrink;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.span)) {
      query["Span"] = request.span;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAntiBruteForceRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyAntiBruteForceRuleResponse>(await this.callApi(params, req, runtime), new $_model.ModifyAntiBruteForceRuleResponse({}));
  }

  /**
   * Modifies a defense rule against brute-force attacks.
   * 
   * @param request - ModifyAntiBruteForceRuleRequest
   * @returns ModifyAntiBruteForceRuleResponse
   */
  async modifyAntiBruteForceRule(request: $_model.ModifyAntiBruteForceRuleRequest): Promise<$_model.ModifyAntiBruteForceRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAntiBruteForceRuleWithOptions(request, runtime);
  }

  /**
   * Configures a scan cycle for application vulnerabilities.
   * 
   * @param request - ModifyAppVulScanCycleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAppVulScanCycleResponse
   */
  async modifyAppVulScanCycleWithOptions(request: $_model.ModifyAppVulScanCycleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyAppVulScanCycleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cycle)) {
      query["Cycle"] = request.cycle;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAppVulScanCycle",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyAppVulScanCycleResponse>(await this.callApi(params, req, runtime), new $_model.ModifyAppVulScanCycleResponse({}));
  }

  /**
   * Configures a scan cycle for application vulnerabilities.
   * 
   * @param request - ModifyAppVulScanCycleRequest
   * @returns ModifyAppVulScanCycleResponse
   */
  async modifyAppVulScanCycle(request: $_model.ModifyAppVulScanCycleRequest): Promise<$_model.ModifyAppVulScanCycleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAppVulScanCycleWithOptions(request, runtime);
  }

  /**
   * Modifies the configurations for cleaning offline hosts whose provider cannot be identified.
   * 
   * @param request - ModifyAssetCleanConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAssetCleanConfigResponse
   */
  async modifyAssetCleanConfigWithOptions(request: $_model.ModifyAssetCleanConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyAssetCleanConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.assetCleanConfigs)) {
      query["AssetCleanConfigs"] = request.assetCleanConfigs;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAssetCleanConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyAssetCleanConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyAssetCleanConfigResponse({}));
  }

  /**
   * Modifies the configurations for cleaning offline hosts whose provider cannot be identified.
   * 
   * @param request - ModifyAssetCleanConfigRequest
   * @returns ModifyAssetCleanConfigResponse
   */
  async modifyAssetCleanConfig(request: $_model.ModifyAssetCleanConfigRequest): Promise<$_model.ModifyAssetCleanConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAssetCleanConfigWithOptions(request, runtime);
  }

  /**
   * Changes the server group to which specified servers belong.
   * 
   * @remarks
   * You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the [CreateOrUpdateAssetGroup](~~CreateOrUpdateAssetGroup~~) operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.
   * ### Limits
   * You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
   * 
   * @param request - ModifyAssetGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAssetGroupResponse
   */
  async modifyAssetGroupWithOptions(request: $_model.ModifyAssetGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyAssetGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAssetGroup",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyAssetGroupResponse>(await this.callApi(params, req, runtime), new $_model.ModifyAssetGroupResponse({}));
  }

  /**
   * Changes the server group to which specified servers belong.
   * 
   * @remarks
   * You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the [CreateOrUpdateAssetGroup](~~CreateOrUpdateAssetGroup~~) operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.
   * ### Limits
   * You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
   * 
   * @param request - ModifyAssetGroupRequest
   * @returns ModifyAssetGroupResponse
   */
  async modifyAssetGroup(request: $_model.ModifyAssetGroupRequest): Promise<$_model.ModifyAssetGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAssetGroupWithOptions(request, runtime);
  }

  /**
   * Modifies the importance of an asset.
   * 
   * @param request - ModifyAssetImportantRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAssetImportantResponse
   */
  async modifyAssetImportantWithOptions(request: $_model.ModifyAssetImportantRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyAssetImportantResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.importantCode)) {
      query["ImportantCode"] = request.importantCode;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAssetImportant",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyAssetImportantResponse>(await this.callApi(params, req, runtime), new $_model.ModifyAssetImportantResponse({}));
  }

  /**
   * Modifies the importance of an asset.
   * 
   * @param request - ModifyAssetImportantRequest
   * @returns ModifyAssetImportantResponse
   */
  async modifyAssetImportant(request: $_model.ModifyAssetImportantRequest): Promise<$_model.ModifyAssetImportantResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAssetImportantWithOptions(request, runtime);
  }

  /**
   * Modifies the information about a witness that is created by using the container signature feature.
   * 
   * @param request - ModifyAttestorRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAttestorResponse
   */
  async modifyAttestorWithOptions(request: $_model.ModifyAttestorRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyAttestorResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.keyId)) {
      query["KeyId"] = request.keyId;
    }

    if (!$dara.isNull(request.keyRegionId)) {
      query["KeyRegionId"] = request.keyRegionId;
    }

    if (!$dara.isNull(request.keyVersionId)) {
      query["KeyVersionId"] = request.keyVersionId;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAttestor",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyAttestorResponse>(await this.callApi(params, req, runtime), new $_model.ModifyAttestorResponse({}));
  }

  /**
   * Modifies the information about a witness that is created by using the container signature feature.
   * 
   * @param request - ModifyAttestorRequest
   * @returns ModifyAttestorResponse
   */
  async modifyAttestor(request: $_model.ModifyAttestorRequest): Promise<$_model.ModifyAttestorResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAttestorWithOptions(request, runtime);
  }

  /**
   * Specifies the number of days after which a detected vulnerability is automatically deleted.
   * 
   * @param request - ModifyAutoDelConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAutoDelConfigResponse
   */
  async modifyAutoDelConfigWithOptions(request: $_model.ModifyAutoDelConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyAutoDelConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.days)) {
      query["Days"] = request.days;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAutoDelConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyAutoDelConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyAutoDelConfigResponse({}));
  }

  /**
   * Specifies the number of days after which a detected vulnerability is automatically deleted.
   * 
   * @param request - ModifyAutoDelConfigRequest
   * @returns ModifyAutoDelConfigResponse
   */
  async modifyAutoDelConfig(request: $_model.ModifyAutoDelConfigRequest): Promise<$_model.ModifyAutoDelConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAutoDelConfigWithOptions(request, runtime);
  }

  /**
   * Modifies an anti-ransomware policy.
   * 
   * @param tmpReq - ModifyBackupPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyBackupPolicyResponse
   */
  async modifyBackupPolicyWithOptions(tmpReq: $_model.ModifyBackupPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyBackupPolicyResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyBackupPolicyShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.policy)) {
      request.policyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policy, "Policy", "json");
    }

    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.policyShrink)) {
      query["Policy"] = request.policyShrink;
    }

    if (!$dara.isNull(request.policyRegionId)) {
      query["PolicyRegionId"] = request.policyRegionId;
    }

    if (!$dara.isNull(request.policyVersion)) {
      query["PolicyVersion"] = request.policyVersion;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyBackupPolicy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyBackupPolicyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyBackupPolicyResponse({}));
  }

  /**
   * Modifies an anti-ransomware policy.
   * 
   * @param request - ModifyBackupPolicyRequest
   * @returns ModifyBackupPolicyResponse
   */
  async modifyBackupPolicy(request: $_model.ModifyBackupPolicyRequest): Promise<$_model.ModifyBackupPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyBackupPolicyWithOptions(request, runtime);
  }

  /**
   * Enables or disables an anti-ransomware policy.
   * 
   * @param request - ModifyBackupPolicyStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyBackupPolicyStatusResponse
   */
  async modifyBackupPolicyStatusWithOptions(request: $_model.ModifyBackupPolicyStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyBackupPolicyStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.policyVersion)) {
      query["PolicyVersion"] = request.policyVersion;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyBackupPolicyStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyBackupPolicyStatusResponse>(await this.callApi(params, req, runtime), new $_model.ModifyBackupPolicyStatusResponse({}));
  }

  /**
   * Enables or disables an anti-ransomware policy.
   * 
   * @param request - ModifyBackupPolicyStatusRequest
   * @returns ModifyBackupPolicyStatusResponse
   */
  async modifyBackupPolicyStatus(request: $_model.ModifyBackupPolicyStatusRequest): Promise<$_model.ModifyBackupPolicyStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyBackupPolicyStatusWithOptions(request, runtime);
  }

  /**
   * Modify Container Image Signature Security Policy.
   * 
   * @param request - ModifyBinarySecurityPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyBinarySecurityPolicyResponse
   */
  async modifyBinarySecurityPolicyWithOptions(request: $_model.ModifyBinarySecurityPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyBinarySecurityPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusters)) {
      query["Clusters"] = request.clusters;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.policy)) {
      query["Policy"] = request.policy;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyBinarySecurityPolicy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyBinarySecurityPolicyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyBinarySecurityPolicyResponse({}));
  }

  /**
   * Modify Container Image Signature Security Policy.
   * 
   * @param request - ModifyBinarySecurityPolicyRequest
   * @returns ModifyBinarySecurityPolicyResponse
   */
  async modifyBinarySecurityPolicy(request: $_model.ModifyBinarySecurityPolicyRequest): Promise<$_model.ModifyBinarySecurityPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyBinarySecurityPolicyWithOptions(request, runtime);
  }

  /**
   * Modify the rule settings for cloud product configuration checks
   * 
   * @param request - ModifyCheckRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCheckRuleResponse
   */
  async modifyCheckRuleWithOptions(request: $_model.ModifyCheckRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyCheckRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.addInstanceList)) {
      query["AddInstanceList"] = request.addInstanceList;
    }

    if (!$dara.isNull(request.deleteInstanceList)) {
      query["DeleteInstanceList"] = request.deleteInstanceList;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    if (!$dara.isNull(request.scopeType)) {
      query["ScopeType"] = request.scopeType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCheckRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyCheckRuleResponse>(await this.callApi(params, req, runtime), new $_model.ModifyCheckRuleResponse({}));
  }

  /**
   * Modify the rule settings for cloud product configuration checks
   * 
   * @param request - ModifyCheckRuleRequest
   * @returns ModifyCheckRuleResponse
   */
  async modifyCheckRule(request: $_model.ModifyCheckRuleRequest): Promise<$_model.ModifyCheckRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCheckRuleWithOptions(request, runtime);
  }

  /**
   * Deletes all logs that occupy your log storage.
   * 
   * @remarks
   * Deleted logs cannot be restored. Before you call this operation to delete all logs and free up log storage, we recommend that you export and save your logs to your computer.
   * 
   * @param request - ModifyClearLogstoreStorageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyClearLogstoreStorageResponse
   */
  async modifyClearLogstoreStorageWithOptions(request: $_model.ModifyClearLogstoreStorageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyClearLogstoreStorageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.userLogStore)) {
      query["UserLogStore"] = request.userLogStore;
    }

    if (!$dara.isNull(request.userProject)) {
      query["UserProject"] = request.userProject;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyClearLogstoreStorage",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyClearLogstoreStorageResponse>(await this.callApi(params, req, runtime), new $_model.ModifyClearLogstoreStorageResponse({}));
  }

  /**
   * Deletes all logs that occupy your log storage.
   * 
   * @remarks
   * Deleted logs cannot be restored. Before you call this operation to delete all logs and free up log storage, we recommend that you export and save your logs to your computer.
   * 
   * @param request - ModifyClearLogstoreStorageRequest
   * @returns ModifyClearLogstoreStorageResponse
   */
  async modifyClearLogstoreStorage(request: $_model.ModifyClearLogstoreStorageRequest): Promise<$_model.ModifyClearLogstoreStorageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyClearLogstoreStorageWithOptions(request, runtime);
  }

  /**
   * Modifies the resource configurations of the Security Center agent.
   * 
   * @param request - ModifyClientConfSetupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyClientConfSetupResponse
   */
  async modifyClientConfSetupWithOptions(request: $_model.ModifyClientConfSetupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyClientConfSetupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.strategyConfig)) {
      query["StrategyConfig"] = request.strategyConfig;
    }

    if (!$dara.isNull(request.strategyTag)) {
      query["StrategyTag"] = request.strategyTag;
    }

    if (!$dara.isNull(request.strategyTagValue)) {
      query["StrategyTagValue"] = request.strategyTagValue;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyClientConfSetup",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyClientConfSetupResponse>(await this.callApi(params, req, runtime), new $_model.ModifyClientConfSetupResponse({}));
  }

  /**
   * Modifies the resource configurations of the Security Center agent.
   * 
   * @param request - ModifyClientConfSetupRequest
   * @returns ModifyClientConfSetupResponse
   */
  async modifyClientConfSetup(request: $_model.ModifyClientConfSetupRequest): Promise<$_model.ModifyClientConfSetupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyClientConfSetupWithOptions(request, runtime);
  }

  /**
   * Modifies an agent configuration policy.
   * 
   * @param request - ModifyClientConfStrategyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyClientConfStrategyResponse
   */
  async modifyClientConfStrategyWithOptions(request: $_model.ModifyClientConfStrategyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyClientConfStrategyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.tagExt)) {
      query["TagExt"] = request.tagExt;
    }

    if (!$dara.isNull(request.tagValue)) {
      query["TagValue"] = request.tagValue;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyClientConfStrategy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyClientConfStrategyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyClientConfStrategyResponse({}));
  }

  /**
   * Modifies an agent configuration policy.
   * 
   * @param request - ModifyClientConfStrategyRequest
   * @returns ModifyClientConfStrategyResponse
   */
  async modifyClientConfStrategy(request: $_model.ModifyClientConfStrategyRequest): Promise<$_model.ModifyClientConfStrategyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyClientConfStrategyWithOptions(request, runtime);
  }

  /**
   * Modifies a custom defense rule.
   * 
   * @param request - ModifyClientUserDefineRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyClientUserDefineRuleResponse
   */
  async modifyClientUserDefineRuleWithOptions(request: $_model.ModifyClientUserDefineRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyClientUserDefineRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.actionType)) {
      query["ActionType"] = request.actionType;
    }

    if (!$dara.isNull(request.cmdline)) {
      query["Cmdline"] = request.cmdline;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.filePath)) {
      query["FilePath"] = request.filePath;
    }

    if (!$dara.isNull(request.IP)) {
      query["IP"] = request.IP;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.md5List)) {
      query["Md5List"] = request.md5List;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.newFilePath)) {
      query["NewFilePath"] = request.newFilePath;
    }

    if (!$dara.isNull(request.parentCmdline)) {
      query["ParentCmdline"] = request.parentCmdline;
    }

    if (!$dara.isNull(request.parentProcPath)) {
      query["ParentProcPath"] = request.parentProcPath;
    }

    if (!$dara.isNull(request.platform)) {
      query["Platform"] = request.platform;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.portStr)) {
      query["PortStr"] = request.portStr;
    }

    if (!$dara.isNull(request.procPath)) {
      query["ProcPath"] = request.procPath;
    }

    if (!$dara.isNull(request.registryContent)) {
      query["RegistryContent"] = request.registryContent;
    }

    if (!$dara.isNull(request.registryKey)) {
      query["RegistryKey"] = request.registryKey;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyClientUserDefineRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyClientUserDefineRuleResponse>(await this.callApi(params, req, runtime), new $_model.ModifyClientUserDefineRuleResponse({}));
  }

  /**
   * Modifies a custom defense rule.
   * 
   * @param request - ModifyClientUserDefineRuleRequest
   * @returns ModifyClientUserDefineRuleResponse
   */
  async modifyClientUserDefineRule(request: $_model.ModifyClientUserDefineRuleRequest): Promise<$_model.ModifyClientUserDefineRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyClientUserDefineRuleWithOptions(request, runtime);
  }

  /**
   * Modifies the configuration of the AccessKey pair for a third-party account.
   * 
   * @param request - ModifyCloudVendorAccountAKRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCloudVendorAccountAKResponse
   */
  async modifyCloudVendorAccountAKWithOptions(request: $_model.ModifyCloudVendorAccountAKRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyCloudVendorAccountAKResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.authIds)) {
      query["AuthIds"] = request.authIds;
    }

    if (!$dara.isNull(request.authModules)) {
      query["AuthModules"] = request.authModules;
    }

    if (!$dara.isNull(request.ctdrCloudUserId)) {
      query["CtdrCloudUserId"] = request.ctdrCloudUserId;
    }

    if (!$dara.isNull(request.domain)) {
      query["Domain"] = request.domain;
    }

    if (!$dara.isNull(request.extendInfo)) {
      query["ExtendInfo"] = request.extendInfo;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.regions)) {
      query["Regions"] = request.regions;
    }

    if (!$dara.isNull(request.secretId)) {
      query["SecretId"] = request.secretId;
    }

    if (!$dara.isNull(request.secretKey)) {
      query["SecretKey"] = request.secretKey;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.subscriptionIds)) {
      query["SubscriptionIds"] = request.subscriptionIds;
    }

    if (!$dara.isNull(request.tenantId)) {
      query["TenantId"] = request.tenantId;
    }

    if (!$dara.isNull(request.vendorAuthAlias)) {
      query["VendorAuthAlias"] = request.vendorAuthAlias;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCloudVendorAccountAK",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyCloudVendorAccountAKResponse>(await this.callApi(params, req, runtime), new $_model.ModifyCloudVendorAccountAKResponse({}));
  }

  /**
   * Modifies the configuration of the AccessKey pair for a third-party account.
   * 
   * @param request - ModifyCloudVendorAccountAKRequest
   * @returns ModifyCloudVendorAccountAKResponse
   */
  async modifyCloudVendorAccountAK(request: $_model.ModifyCloudVendorAccountAKRequest): Promise<$_model.ModifyCloudVendorAccountAKResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCloudVendorAccountAKWithOptions(request, runtime);
  }

  /**
   * Modify the Trail configuration information for the AK
   * 
   * @param request - ModifyCloudVendorTrialConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCloudVendorTrialConfigResponse
   */
  async modifyCloudVendorTrialConfigWithOptions(request: $_model.ModifyCloudVendorTrialConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyCloudVendorTrialConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.authId)) {
      query["AuthId"] = request.authId;
    }

    if (!$dara.isNull(request.authInfo)) {
      query["AuthInfo"] = request.authInfo;
    }

    if (!$dara.isNull(request.deleteTrail)) {
      query["DeleteTrail"] = request.deleteTrail;
    }

    if (!$dara.isNull(request.vendor)) {
      query["Vendor"] = request.vendor;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCloudVendorTrialConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyCloudVendorTrialConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyCloudVendorTrialConfigResponse({}));
  }

  /**
   * Modify the Trail configuration information for the AK
   * 
   * @param request - ModifyCloudVendorTrialConfigRequest
   * @returns ModifyCloudVendorTrialConfigResponse
   */
  async modifyCloudVendorTrialConfig(request: $_model.ModifyCloudVendorTrialConfigRequest): Promise<$_model.ModifyCloudVendorTrialConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCloudVendorTrialConfigWithOptions(request, runtime);
  }

  /**
   * Fixes the blocking status of clusters whose status is Normal to be confirmed.
   * 
   * @param request - ModifyClusterCnnfStatusUserConfirmRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyClusterCnnfStatusUserConfirmResponse
   */
  async modifyClusterCnnfStatusUserConfirmWithOptions(request: $_model.ModifyClusterCnnfStatusUserConfirmRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyClusterCnnfStatusUserConfirmResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterIds)) {
      query["ClusterIds"] = request.clusterIds;
    }

    if (!$dara.isNull(request.userConfirm)) {
      query["UserConfirm"] = request.userConfirm;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyClusterCnnfStatusUserConfirm",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyClusterCnnfStatusUserConfirmResponse>(await this.callApi(params, req, runtime), new $_model.ModifyClusterCnnfStatusUserConfirmResponse({}));
  }

  /**
   * Fixes the blocking status of clusters whose status is Normal to be confirmed.
   * 
   * @param request - ModifyClusterCnnfStatusUserConfirmRequest
   * @returns ModifyClusterCnnfStatusUserConfirmResponse
   */
  async modifyClusterCnnfStatusUserConfirm(request: $_model.ModifyClusterCnnfStatusUserConfirmRequest): Promise<$_model.ModifyClusterCnnfStatusUserConfirmResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyClusterCnnfStatusUserConfirmWithOptions(request, runtime);
  }

  /**
   * Modifies the priority to fix vulnerabilities.
   * 
   * @param request - ModifyConcernNecessityRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyConcernNecessityResponse
   */
  async modifyConcernNecessityWithOptions(request: $_model.ModifyConcernNecessityRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyConcernNecessityResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.concernNecessity)) {
      query["ConcernNecessity"] = request.concernNecessity;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyConcernNecessity",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyConcernNecessityResponse>(await this.callApi(params, req, runtime), new $_model.ModifyConcernNecessityResponse({}));
  }

  /**
   * Modifies the priority to fix vulnerabilities.
   * 
   * @param request - ModifyConcernNecessityRequest
   * @returns ModifyConcernNecessityResponse
   */
  async modifyConcernNecessity(request: $_model.ModifyConcernNecessityRequest): Promise<$_model.ModifyConcernNecessityResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyConcernNecessityWithOptions(request, runtime);
  }

  /**
   * Modifies a rule for non-image program defense.
   * 
   * @param tmpReq - ModifyContainerDefenseRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyContainerDefenseRuleResponse
   */
  async modifyContainerDefenseRuleWithOptions(tmpReq: $_model.ModifyContainerDefenseRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyContainerDefenseRuleResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyContainerDefenseRuleShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.whitelist)) {
      request.whitelistShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.whitelist, "Whitelist", "json");
    }

    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.ruleAction)) {
      query["RuleAction"] = request.ruleAction;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    if (!$dara.isNull(request.ruleSwitch)) {
      query["RuleSwitch"] = request.ruleSwitch;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    if (!$dara.isNull(request.scope)) {
      query["Scope"] = request.scope;
    }

    if (!$dara.isNull(request.whitelistShrink)) {
      query["Whitelist"] = request.whitelistShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyContainerDefenseRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyContainerDefenseRuleResponse>(await this.callApi(params, req, runtime), new $_model.ModifyContainerDefenseRuleResponse({}));
  }

  /**
   * Modifies a rule for non-image program defense.
   * 
   * @param request - ModifyContainerDefenseRuleRequest
   * @returns ModifyContainerDefenseRuleResponse
   */
  async modifyContainerDefenseRule(request: $_model.ModifyContainerDefenseRuleRequest): Promise<$_model.ModifyContainerDefenseRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyContainerDefenseRuleWithOptions(request, runtime);
  }

  /**
   * Changes the status of non-image program defense rules.
   * 
   * @param request - ModifyContainerDefenseRuleSwitchRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyContainerDefenseRuleSwitchResponse
   */
  async modifyContainerDefenseRuleSwitchWithOptions(request: $_model.ModifyContainerDefenseRuleSwitchRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyContainerDefenseRuleSwitchResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ruleIds)) {
      query["RuleIds"] = request.ruleIds;
    }

    if (!$dara.isNull(request.ruleSwitch)) {
      query["RuleSwitch"] = request.ruleSwitch;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyContainerDefenseRuleSwitch",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyContainerDefenseRuleSwitchResponse>(await this.callApi(params, req, runtime), new $_model.ModifyContainerDefenseRuleSwitchResponse({}));
  }

  /**
   * Changes the status of non-image program defense rules.
   * 
   * @param request - ModifyContainerDefenseRuleSwitchRequest
   * @returns ModifyContainerDefenseRuleSwitchResponse
   */
  async modifyContainerDefenseRuleSwitch(request: $_model.ModifyContainerDefenseRuleSwitchRequest): Promise<$_model.ModifyContainerDefenseRuleSwitchResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyContainerDefenseRuleSwitchWithOptions(request, runtime);
  }

  /**
   * Modifies the defense rule against container escapes.
   * 
   * @param request - ModifyContainerPluginRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyContainerPluginRuleResponse
   */
  async modifyContainerPluginRuleWithOptions(request: $_model.ModifyContainerPluginRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyContainerPluginRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.mode)) {
      query["Mode"] = request.mode;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    if (!$dara.isNull(request.ruleType)) {
      query["RuleType"] = request.ruleType;
    }

    if (!$dara.isNull(request.selectedPolicy)) {
      query["SelectedPolicy"] = request.selectedPolicy;
    }

    if (!$dara.isNull(request.whiteImages)) {
      query["WhiteImages"] = request.whiteImages;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyContainerPluginRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyContainerPluginRuleResponse>(await this.callApi(params, req, runtime), new $_model.ModifyContainerPluginRuleResponse({}));
  }

  /**
   * Modifies the defense rule against container escapes.
   * 
   * @param request - ModifyContainerPluginRuleRequest
   * @returns ModifyContainerPluginRuleResponse
   */
  async modifyContainerPluginRule(request: $_model.ModifyContainerPluginRuleRequest): Promise<$_model.ModifyContainerPluginRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyContainerPluginRuleWithOptions(request, runtime);
  }

  /**
   * Modifies the configurations of vulnerability scan for a running container.
   * 
   * @param request - ModifyContainerScanConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyContainerScanConfigResponse
   */
  async modifyContainerScanConfigWithOptions(request: $_model.ModifyContainerScanConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyContainerScanConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appNames)) {
      query["AppNames"] = request.appNames;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyContainerScanConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyContainerScanConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyContainerScanConfigResponse({}));
  }

  /**
   * Modifies the configurations of vulnerability scan for a running container.
   * 
   * @param request - ModifyContainerScanConfigRequest
   * @returns ModifyContainerScanConfigResponse
   */
  async modifyContainerScanConfig(request: $_model.ModifyContainerScanConfigRequest): Promise<$_model.ModifyContainerScanConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyContainerScanConfigWithOptions(request, runtime);
  }

  /**
   * Adds vulnerabilities to the whitelist. After you add the vulnerabilities to the whitelist, Security Center no longer generates alerts for the vulnerabilities.
   * 
   * @param request - ModifyCreateVulWhitelistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCreateVulWhitelistResponse
   */
  async modifyCreateVulWhitelistWithOptions(request: $_model.ModifyCreateVulWhitelistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyCreateVulWhitelistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.reason)) {
      query["Reason"] = request.reason;
    }

    if (!$dara.isNull(request.targetInfo)) {
      query["TargetInfo"] = request.targetInfo;
    }

    if (!$dara.isNull(request.whitelist)) {
      query["Whitelist"] = request.whitelist;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCreateVulWhitelist",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyCreateVulWhitelistResponse>(await this.callApi(params, req, runtime), new $_model.ModifyCreateVulWhitelistResponse({}));
  }

  /**
   * Adds vulnerabilities to the whitelist. After you add the vulnerabilities to the whitelist, Security Center no longer generates alerts for the vulnerabilities.
   * 
   * @param request - ModifyCreateVulWhitelistRequest
   * @returns ModifyCreateVulWhitelistResponse
   */
  async modifyCreateVulWhitelist(request: $_model.ModifyCreateVulWhitelistRequest): Promise<$_model.ModifyCreateVulWhitelistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCreateVulWhitelistWithOptions(request, runtime);
  }

  /**
   * Modifies a custom IP address blocking policy.
   * 
   * @param request - ModifyCustomBlockRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCustomBlockRecordResponse
   */
  async modifyCustomBlockRecordWithOptions(request: $_model.ModifyCustomBlockRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyCustomBlockRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.blockIp)) {
      query["BlockIp"] = request.blockIp;
    }

    if (!$dara.isNull(request.bound)) {
      query["Bound"] = request.bound;
    }

    if (!$dara.isNull(request.expireTime)) {
      query["ExpireTime"] = request.expireTime;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCustomBlockRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyCustomBlockRecordResponse>(await this.callApi(params, req, runtime), new $_model.ModifyCustomBlockRecordResponse({}));
  }

  /**
   * Modifies a custom IP address blocking policy.
   * 
   * @param request - ModifyCustomBlockRecordRequest
   * @returns ModifyCustomBlockRecordResponse
   */
  async modifyCustomBlockRecord(request: $_model.ModifyCustomBlockRecordRequest): Promise<$_model.ModifyCustomBlockRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCustomBlockRecordWithOptions(request, runtime);
  }

  /**
   * Modifies the execution cycle of periodic tasks, including image scan, urgent vulnerability scan, and virus detection tasks.
   * 
   * @param request - ModifyCycleTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCycleTaskResponse
   */
  async modifyCycleTaskWithOptions(request: $_model.ModifyCycleTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyCycleTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configId)) {
      query["ConfigId"] = request.configId;
    }

    if (!$dara.isNull(request.enable)) {
      query["Enable"] = request.enable;
    }

    if (!$dara.isNull(request.firstDateStr)) {
      query["FirstDateStr"] = request.firstDateStr;
    }

    if (!$dara.isNull(request.intervalPeriod)) {
      query["IntervalPeriod"] = request.intervalPeriod;
    }

    if (!$dara.isNull(request.param)) {
      query["Param"] = request.param;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.targetEndTime)) {
      query["TargetEndTime"] = request.targetEndTime;
    }

    if (!$dara.isNull(request.targetStartTime)) {
      query["TargetStartTime"] = request.targetStartTime;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCycleTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyCycleTaskResponse>(await this.callApi(params, req, runtime), new $_model.ModifyCycleTaskResponse({}));
  }

  /**
   * Modifies the execution cycle of periodic tasks, including image scan, urgent vulnerability scan, and virus detection tasks.
   * 
   * @param request - ModifyCycleTaskRequest
   * @returns ModifyCycleTaskResponse
   */
  async modifyCycleTask(request: $_model.ModifyCycleTaskRequest): Promise<$_model.ModifyCycleTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCycleTaskWithOptions(request, runtime);
  }

  /**
   * Changes the notification status of a DingTalk chatbot.
   * 
   * @remarks
   * You can call this operation only if you use Security Center Enterprise.
   * 
   * @param request - ModifyDingTalkStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDingTalkStatusResponse
   */
  async modifyDingTalkStatusWithOptions(request: $_model.ModifyDingTalkStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDingTalkStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ids)) {
      query["Ids"] = request.ids;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDingTalkStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDingTalkStatusResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDingTalkStatusResponse({}));
  }

  /**
   * Changes the notification status of a DingTalk chatbot.
   * 
   * @remarks
   * You can call this operation only if you use Security Center Enterprise.
   * 
   * @param request - ModifyDingTalkStatusRequest
   * @returns ModifyDingTalkStatusResponse
   */
  async modifyDingTalkStatus(request: $_model.ModifyDingTalkStatusRequest): Promise<$_model.ModifyDingTalkStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDingTalkStatusWithOptions(request, runtime);
  }

  /**
   * Runs a scan task for urgent vulnerabilities.
   * 
   * @param request - ModifyEmgVulSubmitRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyEmgVulSubmitResponse
   */
  async modifyEmgVulSubmitWithOptions(request: $_model.ModifyEmgVulSubmitRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyEmgVulSubmitResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.userAgreement)) {
      query["UserAgreement"] = request.userAgreement;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyEmgVulSubmit",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyEmgVulSubmitResponse>(await this.callApi(params, req, runtime), new $_model.ModifyEmgVulSubmitResponse({}));
  }

  /**
   * Runs a scan task for urgent vulnerabilities.
   * 
   * @param request - ModifyEmgVulSubmitRequest
   * @returns ModifyEmgVulSubmitResponse
   */
  async modifyEmgVulSubmit(request: $_model.ModifyEmgVulSubmitRequest): Promise<$_model.ModifyEmgVulSubmitResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyEmgVulSubmitWithOptions(request, runtime);
  }

  /**
   * Changes the name of a server group.
   * 
   * @param request - ModifyGroupPropertyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyGroupPropertyResponse
   */
  async modifyGroupPropertyWithOptions(request: $_model.ModifyGroupPropertyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyGroupPropertyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.data)) {
      query["Data"] = request.data;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyGroupProperty",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyGroupPropertyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyGroupPropertyResponse({}));
  }

  /**
   * Changes the name of a server group.
   * 
   * @param request - ModifyGroupPropertyRequest
   * @returns ModifyGroupPropertyResponse
   */
  async modifyGroupProperty(request: $_model.ModifyGroupPropertyRequest): Promise<$_model.ModifyGroupPropertyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyGroupPropertyWithOptions(request, runtime);
  }

  /**
   * 修改代理集群
   * 
   * @param request - ModifyHybridProxyClusterRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyHybridProxyClusterResponse
   */
  async modifyHybridProxyClusterWithOptions(request: $_model.ModifyHybridProxyClusterRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyHybridProxyClusterResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyHybridProxyCluster",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyHybridProxyClusterResponse>(await this.callApi(params, req, runtime), new $_model.ModifyHybridProxyClusterResponse({}));
  }

  /**
   * 修改代理集群
   * 
   * @param request - ModifyHybridProxyClusterRequest
   * @returns ModifyHybridProxyClusterResponse
   */
  async modifyHybridProxyCluster(request: $_model.ModifyHybridProxyClusterRequest): Promise<$_model.ModifyHybridProxyClusterResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyHybridProxyClusterWithOptions(request, runtime);
  }

  /**
   * 修改代理策略
   * 
   * @param request - ModifyHybridProxyPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyHybridProxyPolicyResponse
   */
  async modifyHybridProxyPolicyWithOptions(request: $_model.ModifyHybridProxyPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyHybridProxyPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.policyInfo)) {
      query["PolicyInfo"] = request.policyInfo;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyHybridProxyPolicy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyHybridProxyPolicyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyHybridProxyPolicyResponse({}));
  }

  /**
   * 修改代理策略
   * 
   * @param request - ModifyHybridProxyPolicyRequest
   * @returns ModifyHybridProxyPolicyResponse
   */
  async modifyHybridProxyPolicy(request: $_model.ModifyHybridProxyPolicyRequest): Promise<$_model.ModifyHybridProxyPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyHybridProxyPolicyWithOptions(request, runtime);
  }

  /**
   * Modifies the configurations of an IDC probe.
   * 
   * @param request - ModifyIdcProbeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyIdcProbeResponse
   */
  async modifyIdcProbeWithOptions(request: $_model.ModifyIdcProbeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyIdcProbeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.idcName)) {
      query["IdcName"] = request.idcName;
    }

    if (!$dara.isNull(request.idcRegion)) {
      query["IdcRegion"] = request.idcRegion;
    }

    if (!$dara.isNull(request.intervalPeriod)) {
      query["IntervalPeriod"] = request.intervalPeriod;
    }

    if (!$dara.isNull(request.ipSegments)) {
      query["IpSegments"] = request.ipSegments;
    }

    if (!$dara.isNull(request.linuxPort)) {
      query["LinuxPort"] = request.linuxPort;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    if (!$dara.isNull(request.winPort)) {
      query["WinPort"] = request.winPort;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyIdcProbe",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyIdcProbeResponse>(await this.callApi(params, req, runtime), new $_model.ModifyIdcProbeResponse({}));
  }

  /**
   * Modifies the configurations of an IDC probe.
   * 
   * @param request - ModifyIdcProbeRequest
   * @returns ModifyIdcProbeResponse
   */
  async modifyIdcProbe(request: $_model.ModifyIdcProbeRequest): Promise<$_model.ModifyIdcProbeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyIdcProbeWithOptions(request, runtime);
  }

  /**
   * Modifies the configurations of a scheduled image fix.
   * 
   * @param request - ModifyImageFixCycleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyImageFixCycleConfigResponse
   */
  async modifyImageFixCycleConfigWithOptions(request: $_model.ModifyImageFixCycleConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyImageFixCycleConfigResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.imageFixCycle)) {
      body["ImageFixCycle"] = request.imageFixCycle;
    }

    if (!$dara.isNull(request.imageFixSwitch)) {
      body["ImageFixSwitch"] = request.imageFixSwitch;
    }

    if (!$dara.isNull(request.imageFixTarget)) {
      body["ImageFixTarget"] = request.imageFixTarget;
    }

    if (!$dara.isNull(request.imageTimeRange)) {
      body["ImageTimeRange"] = request.imageTimeRange;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyImageFixCycleConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyImageFixCycleConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyImageFixCycleConfigResponse({}));
  }

  /**
   * Modifies the configurations of a scheduled image fix.
   * 
   * @param request - ModifyImageFixCycleConfigRequest
   * @returns ModifyImageFixCycleConfigResponse
   */
  async modifyImageFixCycleConfig(request: $_model.ModifyImageFixCycleConfigRequest): Promise<$_model.ModifyImageFixCycleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyImageFixCycleConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the transfer time of an image repository.
   * 
   * @param request - ModifyImageRegistryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyImageRegistryResponse
   */
  async modifyImageRegistryWithOptions(request: $_model.ModifyImageRegistryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyImageRegistryResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.id)) {
      body["Id"] = request.id;
    }

    if (!$dara.isNull(request.password)) {
      body["Password"] = request.password;
    }

    if (!$dara.isNull(request.transPerHour)) {
      body["TransPerHour"] = request.transPerHour;
    }

    if (!$dara.isNull(request.userName)) {
      body["UserName"] = request.userName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyImageRegistry",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyImageRegistryResponse>(await this.callApi(params, req, runtime), new $_model.ModifyImageRegistryResponse({}));
  }

  /**
   * Modifies the transfer time of an image repository.
   * 
   * @param request - ModifyImageRegistryRequest
   * @returns ModifyImageRegistryResponse
   */
  async modifyImageRegistry(request: $_model.ModifyImageRegistryRequest): Promise<$_model.ModifyImageRegistryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyImageRegistryWithOptions(request, runtime);
  }

  /**
   * Modifies the defense rule against brute-force attacks that is applied to a specified server.
   * 
   * @param request - ModifyInstanceAntiBruteForceRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyInstanceAntiBruteForceRuleResponse
   */
  async modifyInstanceAntiBruteForceRuleWithOptions(request: $_model.ModifyInstanceAntiBruteForceRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyInstanceAntiBruteForceRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.newRuleId)) {
      query["NewRuleId"] = request.newRuleId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyInstanceAntiBruteForceRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyInstanceAntiBruteForceRuleResponse>(await this.callApi(params, req, runtime), new $_model.ModifyInstanceAntiBruteForceRuleResponse({}));
  }

  /**
   * Modifies the defense rule against brute-force attacks that is applied to a specified server.
   * 
   * @param request - ModifyInstanceAntiBruteForceRuleRequest
   * @returns ModifyInstanceAntiBruteForceRuleResponse
   */
  async modifyInstanceAntiBruteForceRule(request: $_model.ModifyInstanceAntiBruteForceRuleRequest): Promise<$_model.ModifyInstanceAntiBruteForceRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyInstanceAntiBruteForceRuleWithOptions(request, runtime);
  }

  /**
   * Modifies a proactive defense rule for containers.
   * 
   * @param tmpReq - ModifyInterceptionRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyInterceptionRuleResponse
   */
  async modifyInterceptionRuleWithOptions(tmpReq: $_model.ModifyInterceptionRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyInterceptionRuleResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyInterceptionRuleShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.dstTarget)) {
      request.dstTargetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dstTarget, "DstTarget", "json");
    }

    if (!$dara.isNull(tmpReq.srcTarget)) {
      request.srcTargetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.srcTarget, "SrcTarget", "json");
    }

    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.dstTargetShrink)) {
      query["DstTarget"] = request.dstTargetShrink;
    }

    if (!$dara.isNull(request.interceptType)) {
      query["InterceptType"] = request.interceptType;
    }

    if (!$dara.isNull(request.orderIndex)) {
      query["OrderIndex"] = request.orderIndex;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    if (!$dara.isNull(request.ruleSwitch)) {
      query["RuleSwitch"] = request.ruleSwitch;
    }

    if (!$dara.isNull(request.srcTargetShrink)) {
      query["SrcTarget"] = request.srcTargetShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyInterceptionRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyInterceptionRuleResponse>(await this.callApi(params, req, runtime), new $_model.ModifyInterceptionRuleResponse({}));
  }

  /**
   * Modifies a proactive defense rule for containers.
   * 
   * @param request - ModifyInterceptionRuleRequest
   * @returns ModifyInterceptionRuleResponse
   */
  async modifyInterceptionRule(request: $_model.ModifyInterceptionRuleRequest): Promise<$_model.ModifyInterceptionRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyInterceptionRuleWithOptions(request, runtime);
  }

  /**
   * Enables or disables a proactive defense rule for containers.
   * 
   * @param request - ModifyInterceptionRuleSwitchRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyInterceptionRuleSwitchResponse
   */
  async modifyInterceptionRuleSwitchWithOptions(request: $_model.ModifyInterceptionRuleSwitchRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyInterceptionRuleSwitchResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.ruleIds)) {
      query["RuleIds"] = request.ruleIds;
    }

    if (!$dara.isNull(request.ruleSwitch)) {
      query["RuleSwitch"] = request.ruleSwitch;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyInterceptionRuleSwitch",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyInterceptionRuleSwitchResponse>(await this.callApi(params, req, runtime), new $_model.ModifyInterceptionRuleSwitchResponse({}));
  }

  /**
   * Enables or disables a proactive defense rule for containers.
   * 
   * @param request - ModifyInterceptionRuleSwitchRequest
   * @returns ModifyInterceptionRuleSwitchResponse
   */
  async modifyInterceptionRuleSwitch(request: $_model.ModifyInterceptionRuleSwitchRequest): Promise<$_model.ModifyInterceptionRuleSwitchResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyInterceptionRuleSwitchWithOptions(request, runtime);
  }

  /**
   * Modifies the information about a network object of the container firewall feature.
   * 
   * @param request - ModifyInterceptionTargetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyInterceptionTargetResponse
   */
  async modifyInterceptionTargetWithOptions(request: $_model.ModifyInterceptionTargetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyInterceptionTargetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appName)) {
      query["AppName"] = request.appName;
    }

    if (!$dara.isNull(request.imageList)) {
      query["ImageList"] = request.imageList;
    }

    if (!$dara.isNull(request.namespace)) {
      query["Namespace"] = request.namespace;
    }

    if (!$dara.isNull(request.tagList)) {
      query["TagList"] = request.tagList;
    }

    if (!$dara.isNull(request.targetId)) {
      query["TargetId"] = request.targetId;
    }

    if (!$dara.isNull(request.targetName)) {
      query["TargetName"] = request.targetName;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyInterceptionTarget",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyInterceptionTargetResponse>(await this.callApi(params, req, runtime), new $_model.ModifyInterceptionTargetResponse({}));
  }

  /**
   * Modifies the information about a network object of the container firewall feature.
   * 
   * @param request - ModifyInterceptionTargetRequest
   * @returns ModifyInterceptionTargetResponse
   */
  async modifyInterceptionTarget(request: $_model.ModifyInterceptionTargetRequest): Promise<$_model.ModifyInterceptionTargetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyInterceptionTargetWithOptions(request, runtime);
  }

  /**
   * Enables or disables the log analysis feature.
   * 
   * @param request - ModifyLogMetaStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyLogMetaStatusResponse
   */
  async modifyLogMetaStatusWithOptions(request: $_model.ModifyLogMetaStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyLogMetaStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.logStore)) {
      query["LogStore"] = request.logStore;
    }

    if (!$dara.isNull(request.project)) {
      query["Project"] = request.project;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyLogMetaStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyLogMetaStatusResponse>(await this.callApi(params, req, runtime), new $_model.ModifyLogMetaStatusResponse({}));
  }

  /**
   * Enables or disables the log analysis feature.
   * 
   * @param request - ModifyLogMetaStatusRequest
   * @returns ModifyLogMetaStatusResponse
   */
  async modifyLogMetaStatus(request: $_model.ModifyLogMetaStatusRequest): Promise<$_model.ModifyLogMetaStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyLogMetaStatusWithOptions(request, runtime);
  }

  /**
   * Modifies the logon configuration for a specified asset.
   * 
   * @param request - ModifyLoginBaseConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyLoginBaseConfigResponse
   */
  async modifyLoginBaseConfigWithOptions(request: $_model.ModifyLoginBaseConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyLoginBaseConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    if (!$dara.isNull(request.target)) {
      query["Target"] = request.target;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyLoginBaseConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyLoginBaseConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyLoginBaseConfigResponse({}));
  }

  /**
   * Modifies the logon configuration for a specified asset.
   * 
   * @param request - ModifyLoginBaseConfigRequest
   * @returns ModifyLoginBaseConfigResponse
   */
  async modifyLoginBaseConfig(request: $_model.ModifyLoginBaseConfigRequest): Promise<$_model.ModifyLoginBaseConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyLoginBaseConfigWithOptions(request, runtime);
  }

  /**
   * Enables or disables the logon security settings for an asset.
   * 
   * @param request - ModifyLoginSwitchConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyLoginSwitchConfigResponse
   */
  async modifyLoginSwitchConfigWithOptions(request: $_model.ModifyLoginSwitchConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyLoginSwitchConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.item)) {
      query["Item"] = request.item;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyLoginSwitchConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyLoginSwitchConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyLoginSwitchConfigResponse({}));
  }

  /**
   * Enables or disables the logon security settings for an asset.
   * 
   * @param request - ModifyLoginSwitchConfigRequest
   * @returns ModifyLoginSwitchConfigResponse
   */
  async modifyLoginSwitchConfig(request: $_model.ModifyLoginSwitchConfigRequest): Promise<$_model.ModifyLoginSwitchConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyLoginSwitchConfigWithOptions(request, runtime);
  }

  /**
   * Modifies notification settings.
   * 
   * @param request - ModifyNoticeConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyNoticeConfigResponse
   */
  async modifyNoticeConfigWithOptions(request: $_model.ModifyNoticeConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyNoticeConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.project)) {
      query["Project"] = request.project;
    }

    if (!$dara.isNull(request.route)) {
      query["Route"] = request.route;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.timeLimit)) {
      query["TimeLimit"] = request.timeLimit;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyNoticeConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyNoticeConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyNoticeConfigResponse({}));
  }

  /**
   * Modifies notification settings.
   * 
   * @param request - ModifyNoticeConfigRequest
   * @returns ModifyNoticeConfigResponse
   */
  async modifyNoticeConfig(request: $_model.ModifyNoticeConfigRequest): Promise<$_model.ModifyNoticeConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyNoticeConfigWithOptions(request, runtime);
  }

  /**
   * Activates Simple Log Service.
   * 
   * @remarks
   * *Prerequisites** [Simple Log Service](https://www.alibabacloud.com/help/en/log-service/latest/billable-items) is activated. A service-linked role for Security Center is created, and Security Center is authorized to access cloud resources. You can call the [CreateServiceLinkedRole](~~CreateServiceLinkedRole~~) operation to create a service-linked role for Security Center and authorize Security Center to access cloud resources. **Scenarios** Before you use the log analysis feature of Security Center, you must call the [ModifyOpenLogShipper](~~ModifyOpenLogShipper~~) operation to activate Simple Log Service.
   * 
   * @param request - ModifyOpenLogShipperRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyOpenLogShipperResponse
   */
  async modifyOpenLogShipperWithOptions(request: $_model.ModifyOpenLogShipperRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyOpenLogShipperResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.resourceDirectoryAccountId)) {
      query["ResourceDirectoryAccountId"] = request.resourceDirectoryAccountId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyOpenLogShipper",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyOpenLogShipperResponse>(await this.callApi(params, req, runtime), new $_model.ModifyOpenLogShipperResponse({}));
  }

  /**
   * Activates Simple Log Service.
   * 
   * @remarks
   * *Prerequisites** [Simple Log Service](https://www.alibabacloud.com/help/en/log-service/latest/billable-items) is activated. A service-linked role for Security Center is created, and Security Center is authorized to access cloud resources. You can call the [CreateServiceLinkedRole](~~CreateServiceLinkedRole~~) operation to create a service-linked role for Security Center and authorize Security Center to access cloud resources. **Scenarios** Before you use the log analysis feature of Security Center, you must call the [ModifyOpenLogShipper](~~ModifyOpenLogShipper~~) operation to activate Simple Log Service.
   * 
   * @param request - ModifyOpenLogShipperRequest
   * @returns ModifyOpenLogShipperResponse
   */
  async modifyOpenLogShipper(request: $_model.ModifyOpenLogShipperRequest): Promise<$_model.ModifyOpenLogShipperResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyOpenLogShipperWithOptions(request, runtime);
  }

  /**
   * Handles detected vulnerabilities. You can fix, check, or ignore the vulnerabilities.
   * 
   * @param request - ModifyOperateVulRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyOperateVulResponse
   */
  async modifyOperateVulWithOptions(request: $_model.ModifyOperateVulRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyOperateVulResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.info)) {
      query["Info"] = request.info;
    }

    if (!$dara.isNull(request.operateType)) {
      query["OperateType"] = request.operateType;
    }

    if (!$dara.isNull(request.reason)) {
      query["Reason"] = request.reason;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyOperateVul",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyOperateVulResponse>(await this.callApi(params, req, runtime), new $_model.ModifyOperateVulResponse({}));
  }

  /**
   * Handles detected vulnerabilities. You can fix, check, or ignore the vulnerabilities.
   * 
   * @param request - ModifyOperateVulRequest
   * @returns ModifyOperateVulResponse
   */
  async modifyOperateVul(request: $_model.ModifyOperateVulRequest): Promise<$_model.ModifyOperateVulResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyOperateVulWithOptions(request, runtime);
  }

  /**
   * Modifies the switch settings of pay-as-you-go modules.
   * 
   * @param request - ModifyPostPayModuleSwitchRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyPostPayModuleSwitchResponse
   */
  async modifyPostPayModuleSwitchWithOptions(request: $_model.ModifyPostPayModuleSwitchRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyPostPayModuleSwitchResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.postPayInstanceId)) {
      query["PostPayInstanceId"] = request.postPayInstanceId;
    }

    if (!$dara.isNull(request.postPayModuleSwitch)) {
      query["PostPayModuleSwitch"] = request.postPayModuleSwitch;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyPostPayModuleSwitch",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyPostPayModuleSwitchResponse>(await this.callApi(params, req, runtime), new $_model.ModifyPostPayModuleSwitchResponse({}));
  }

  /**
   * Modifies the switch settings of pay-as-you-go modules.
   * 
   * @param request - ModifyPostPayModuleSwitchRequest
   * @returns ModifyPostPayModuleSwitchResponse
   */
  async modifyPostPayModuleSwitch(request: $_model.ModifyPostPayModuleSwitchRequest): Promise<$_model.ModifyPostPayModuleSwitchResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyPostPayModuleSwitchWithOptions(request, runtime);
  }

  /**
   * Adds a process to or removes a process from the whitelist by using the application whitelist feature.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - ModifyProcessWhiteListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyProcessWhiteListResponse
   */
  async modifyProcessWhiteListWithOptions(request: $_model.ModifyProcessWhiteListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyProcessWhiteListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.md5s)) {
      query["Md5s"] = request.md5s;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyProcessWhiteList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyProcessWhiteListResponse>(await this.callApi(params, req, runtime), new $_model.ModifyProcessWhiteListResponse({}));
  }

  /**
   * Adds a process to or removes a process from the whitelist by using the application whitelist feature.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - ModifyProcessWhiteListRequest
   * @returns ModifyProcessWhiteListResponse
   */
  async modifyProcessWhiteList(request: $_model.ModifyProcessWhiteListRequest): Promise<$_model.ModifyProcessWhiteListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyProcessWhiteListWithOptions(request, runtime);
  }

  /**
   * Modifies the collection frequency of asset fingerprints for an automatic periodic collection task.
   * 
   * @param request - ModifyPropertyScheduleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyPropertyScheduleConfigResponse
   */
  async modifyPropertyScheduleConfigWithOptions(request: $_model.ModifyPropertyScheduleConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyPropertyScheduleConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.scheduleTime)) {
      query["ScheduleTime"] = request.scheduleTime;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyPropertyScheduleConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyPropertyScheduleConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyPropertyScheduleConfigResponse({}));
  }

  /**
   * Modifies the collection frequency of asset fingerprints for an automatic periodic collection task.
   * 
   * @param request - ModifyPropertyScheduleConfigRequest
   * @returns ModifyPropertyScheduleConfigResponse
   */
  async modifyPropertyScheduleConfig(request: $_model.ModifyPropertyScheduleConfigRequest): Promise<$_model.ModifyPropertyScheduleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyPropertyScheduleConfigWithOptions(request, runtime);
  }

  /**
   * Performs security check tasks on servers with a few clicks.
   * 
   * @param request - ModifyPushAllTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyPushAllTaskResponse
   */
  async modifyPushAllTaskWithOptions(request: $_model.ModifyPushAllTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyPushAllTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.tasks)) {
      query["Tasks"] = request.tasks;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyPushAllTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyPushAllTaskResponse>(await this.callApi(params, req, runtime), new $_model.ModifyPushAllTaskResponse({}));
  }

  /**
   * Performs security check tasks on servers with a few clicks.
   * 
   * @param request - ModifyPushAllTaskRequest
   * @returns ModifyPushAllTaskResponse
   */
  async modifyPushAllTask(request: $_model.ModifyPushAllTaskRequest): Promise<$_model.ModifyPushAllTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyPushAllTaskWithOptions(request, runtime);
  }

  /**
   * Refreshes the list of processes that are associated with a Linux software vulnerability.
   * 
   * @param request - ModifyRefreshProcessInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyRefreshProcessInfoResponse
   */
  async modifyRefreshProcessInfoWithOptions(request: $_model.ModifyRefreshProcessInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyRefreshProcessInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyRefreshProcessInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyRefreshProcessInfoResponse>(await this.callApi(params, req, runtime), new $_model.ModifyRefreshProcessInfoResponse({}));
  }

  /**
   * Refreshes the list of processes that are associated with a Linux software vulnerability.
   * 
   * @param request - ModifyRefreshProcessInfoRequest
   * @returns ModifyRefreshProcessInfoResponse
   */
  async modifyRefreshProcessInfo(request: $_model.ModifyRefreshProcessInfoRequest): Promise<$_model.ModifyRefreshProcessInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyRefreshProcessInfoWithOptions(request, runtime);
  }

  /**
   * Modifies a rule for container tamper-proofing.
   * 
   * @param request - ModifySasContainerWebDefenseRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifySasContainerWebDefenseRuleResponse
   */
  async modifySasContainerWebDefenseRuleWithOptions(request: $_model.ModifySasContainerWebDefenseRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifySasContainerWebDefenseRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pathConfDTOList)) {
      query["PathConfDTOList"] = request.pathConfDTOList;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifySasContainerWebDefenseRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifySasContainerWebDefenseRuleResponse>(await this.callApi(params, req, runtime), new $_model.ModifySasContainerWebDefenseRuleResponse({}));
  }

  /**
   * Modifies a rule for container tamper-proofing.
   * 
   * @param request - ModifySasContainerWebDefenseRuleRequest
   * @returns ModifySasContainerWebDefenseRuleResponse
   */
  async modifySasContainerWebDefenseRule(request: $_model.ModifySasContainerWebDefenseRuleRequest): Promise<$_model.ModifySasContainerWebDefenseRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifySasContainerWebDefenseRuleWithOptions(request, runtime);
  }

  /**
   * Modifies common filter conditions to search for assets.
   * 
   * @param request - ModifySearchConditionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifySearchConditionResponse
   */
  async modifySearchConditionWithOptions(request: $_model.ModifySearchConditionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifySearchConditionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.filterConditions)) {
      query["FilterConditions"] = request.filterConditions;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifySearchCondition",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifySearchConditionResponse>(await this.callApi(params, req, runtime), new $_model.ModifySearchConditionResponse({}));
  }

  /**
   * Modifies common filter conditions to search for assets.
   * 
   * @param request - ModifySearchConditionRequest
   * @returns ModifySearchConditionResponse
   */
  async modifySearchCondition(request: $_model.ModifySearchConditionRequest): Promise<$_model.ModifySearchConditionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifySearchConditionWithOptions(request, runtime);
  }

  /**
   * Specifies the time when an automatic configuration check is performed on cloud services.
   * 
   * @remarks
   * This operation is phased out. You can use the ChangeCheckConfig operation.
   * 
   * @deprecated OpenAPI ModifySecurityCheckScheduleConfig is deprecated, please use Sas::2018-12-03::ChangeCheckConfig instead.
   * 
   * @param request - ModifySecurityCheckScheduleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifySecurityCheckScheduleConfigResponse
   */
  async modifySecurityCheckScheduleConfigWithOptions(request: $_model.ModifySecurityCheckScheduleConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifySecurityCheckScheduleConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.daysOfWeek)) {
      query["DaysOfWeek"] = request.daysOfWeek;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifySecurityCheckScheduleConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifySecurityCheckScheduleConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifySecurityCheckScheduleConfigResponse({}));
  }

  /**
   * Specifies the time when an automatic configuration check is performed on cloud services.
   * 
   * @remarks
   * This operation is phased out. You can use the ChangeCheckConfig operation.
   * 
   * @deprecated OpenAPI ModifySecurityCheckScheduleConfig is deprecated, please use Sas::2018-12-03::ChangeCheckConfig instead.
   * 
   * @param request - ModifySecurityCheckScheduleConfigRequest
   * @returns ModifySecurityCheckScheduleConfigResponse
   */
  // Deprecated
  async modifySecurityCheckScheduleConfig(request: $_model.ModifySecurityCheckScheduleConfigRequest): Promise<$_model.ModifySecurityCheckScheduleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifySecurityCheckScheduleConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the alert handling rule for alerts that are added to the whitelist by asset.
   * 
   * @param request - ModifySecurityEventMarkMissIndividuallyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifySecurityEventMarkMissIndividuallyResponse
   */
  async modifySecurityEventMarkMissIndividuallyWithOptions(request: $_model.ModifySecurityEventMarkMissIndividuallyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifySecurityEventMarkMissIndividuallyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.deleteMarkMissParam)) {
      body["DeleteMarkMissParam"] = request.deleteMarkMissParam;
    }

    if (!$dara.isNull(request.from)) {
      body["From"] = request.from;
    }

    if (!$dara.isNull(request.insertMarkMissParam)) {
      body["InsertMarkMissParam"] = request.insertMarkMissParam;
    }

    if (!$dara.isNull(request.lang)) {
      body["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifySecurityEventMarkMissIndividually",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifySecurityEventMarkMissIndividuallyResponse>(await this.callApi(params, req, runtime), new $_model.ModifySecurityEventMarkMissIndividuallyResponse({}));
  }

  /**
   * Modifies the alert handling rule for alerts that are added to the whitelist by asset.
   * 
   * @param request - ModifySecurityEventMarkMissIndividuallyRequest
   * @returns ModifySecurityEventMarkMissIndividuallyResponse
   */
  async modifySecurityEventMarkMissIndividually(request: $_model.ModifySecurityEventMarkMissIndividuallyRequest): Promise<$_model.ModifySecurityEventMarkMissIndividuallyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifySecurityEventMarkMissIndividuallyWithOptions(request, runtime);
  }

  /**
   * Manage Serverless Asset Authorization
   * 
   * @param request - ModifyServerlessAuthToMachineRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyServerlessAuthToMachineResponse
   */
  async modifyServerlessAuthToMachineWithOptions(request: $_model.ModifyServerlessAuthToMachineRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyServerlessAuthToMachineResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appCriteria)) {
      query["AppCriteria"] = request.appCriteria;
    }

    if (!$dara.isNull(request.authItem)) {
      query["AuthItem"] = request.authItem;
    }

    if (!$dara.isNull(request.autoBind)) {
      query["AutoBind"] = request.autoBind;
    }

    if (!$dara.isNull(request.bindAll)) {
      query["BindAll"] = request.bindAll;
    }

    if (!$dara.isNull(request.bindAppList)) {
      query["BindAppList"] = request.bindAppList;
    }

    if (!$dara.isNull(request.bindAssetType)) {
      query["BindAssetType"] = request.bindAssetType;
    }

    if (!$dara.isNull(request.bindUuidList)) {
      query["BindUuidList"] = request.bindUuidList;
    }

    if (!$dara.isNull(request.criteria)) {
      query["Criteria"] = request.criteria;
    }

    if (!$dara.isNull(request.logicalExp)) {
      query["LogicalExp"] = request.logicalExp;
    }

    if (!$dara.isNull(request.ntmVersion)) {
      query["NtmVersion"] = request.ntmVersion;
    }

    if (!$dara.isNull(request.preBind)) {
      query["PreBind"] = request.preBind;
    }

    if (!$dara.isNull(request.preBindOrderId)) {
      query["PreBindOrderId"] = request.preBindOrderId;
    }

    if (!$dara.isNull(request.resourceDirectoryUid)) {
      query["ResourceDirectoryUid"] = request.resourceDirectoryUid;
    }

    if (!$dara.isNull(request.unBindAppList)) {
      query["UnBindAppList"] = request.unBindAppList;
    }

    if (!$dara.isNull(request.unBindUuidList)) {
      query["UnBindUuidList"] = request.unBindUuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyServerlessAuthToMachine",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyServerlessAuthToMachineResponse>(await this.callApi(params, req, runtime), new $_model.ModifyServerlessAuthToMachineResponse({}));
  }

  /**
   * Manage Serverless Asset Authorization
   * 
   * @param request - ModifyServerlessAuthToMachineRequest
   * @returns ModifyServerlessAuthToMachineResponse
   */
  async modifyServerlessAuthToMachine(request: $_model.ModifyServerlessAuthToMachineRequest): Promise<$_model.ModifyServerlessAuthToMachineResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyServerlessAuthToMachineWithOptions(request, runtime);
  }

  /**
   * Creates or deletes a policy template on the My Policies tab of the Playbook page.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - ModifySoarStrategySubscribeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifySoarStrategySubscribeResponse
   */
  async modifySoarStrategySubscribeWithOptions(request: $_model.ModifySoarStrategySubscribeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifySoarStrategySubscribeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    if (!$dara.isNull(request.subscribeStatus)) {
      query["SubscribeStatus"] = request.subscribeStatus;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifySoarStrategySubscribe",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifySoarStrategySubscribeResponse>(await this.callApi(params, req, runtime), new $_model.ModifySoarStrategySubscribeResponse({}));
  }

  /**
   * Creates or deletes a policy template on the My Policies tab of the Playbook page.
   * 
   * @remarks
   * Only the Enterprise and Ultimate editions of Security Center support this API operation.
   * 
   * @param request - ModifySoarStrategySubscribeRequest
   * @returns ModifySoarStrategySubscribeResponse
   */
  async modifySoarStrategySubscribe(request: $_model.ModifySoarStrategySubscribeRequest): Promise<$_model.ModifySoarStrategySubscribeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifySoarStrategySubscribeWithOptions(request, runtime);
  }

  /**
   * Enables the quick scan feature. You can also enable the feature on the Vulnerabilities page of the Security Center console.
   * 
   * @param request - ModifyStartVulScanRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyStartVulScanResponse
   */
  async modifyStartVulScanWithOptions(request: $_model.ModifyStartVulScanRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyStartVulScanResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.types)) {
      query["Types"] = request.types;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyStartVulScan",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyStartVulScanResponse>(await this.callApi(params, req, runtime), new $_model.ModifyStartVulScanResponse({}));
  }

  /**
   * Enables the quick scan feature. You can also enable the feature on the Vulnerabilities page of the Security Center console.
   * 
   * @param request - ModifyStartVulScanRequest
   * @returns ModifyStartVulScanResponse
   */
  async modifyStartVulScan(request: $_model.ModifyStartVulScanRequest): Promise<$_model.ModifyStartVulScanResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyStartVulScanWithOptions(request, runtime);
  }

  /**
   * Modifies a baseline check policy.
   * 
   * @param request - ModifyStrategyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyStrategyResponse
   */
  async modifyStrategyWithOptions(request: $_model.ModifyStrategyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyStrategyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.customType)) {
      query["CustomType"] = request.customType;
    }

    if (!$dara.isNull(request.cycleDays)) {
      query["CycleDays"] = request.cycleDays;
    }

    if (!$dara.isNull(request.cycleStartTime)) {
      query["CycleStartTime"] = request.cycleStartTime;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.riskCustomParams)) {
      query["RiskCustomParams"] = request.riskCustomParams;
    }

    if (!$dara.isNull(request.riskSubTypeName)) {
      query["RiskSubTypeName"] = request.riskSubTypeName;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyStrategy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyStrategyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyStrategyResponse({}));
  }

  /**
   * Modifies a baseline check policy.
   * 
   * @param request - ModifyStrategyRequest
   * @returns ModifyStrategyResponse
   */
  async modifyStrategy(request: $_model.ModifyStrategyRequest): Promise<$_model.ModifyStrategyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyStrategyWithOptions(request, runtime);
  }

  /**
   * Modifies the servers to which a baseline check policy is applied.
   * 
   * @param request - ModifyStrategyTargetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyStrategyTargetResponse
   */
  async modifyStrategyTargetWithOptions(request: $_model.ModifyStrategyTargetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyStrategyTargetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.target)) {
      query["Target"] = request.target;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyStrategyTarget",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyStrategyTargetResponse>(await this.callApi(params, req, runtime), new $_model.ModifyStrategyTargetResponse({}));
  }

  /**
   * Modifies the servers to which a baseline check policy is applied.
   * 
   * @param request - ModifyStrategyTargetRequest
   * @returns ModifyStrategyTargetResponse
   */
  async modifyStrategyTarget(request: $_model.ModifyStrategyTargetRequest): Promise<$_model.ModifyStrategyTargetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyStrategyTargetWithOptions(request, runtime);
  }

  /**
   * Modifies the names of the tags that are added to assets, or modifies the tags for assets.
   * 
   * @param request - ModifyTagWithUuidRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyTagWithUuidResponse
   */
  async modifyTagWithUuidWithOptions(request: $_model.ModifyTagWithUuidRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyTagWithUuidResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.machineTypes)) {
      query["MachineTypes"] = request.machineTypes;
    }

    if (!$dara.isNull(request.tagId)) {
      query["TagId"] = request.tagId;
    }

    if (!$dara.isNull(request.tagList)) {
      query["TagList"] = request.tagList;
    }

    if (!$dara.isNull(request.target)) {
      query["Target"] = request.target;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyTagWithUuid",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyTagWithUuidResponse>(await this.callApi(params, req, runtime), new $_model.ModifyTagWithUuidResponse({}));
  }

  /**
   * Modifies the names of the tags that are added to assets, or modifies the tags for assets.
   * 
   * @param request - ModifyTagWithUuidRequest
   * @returns ModifyTagWithUuidResponse
   */
  async modifyTagWithUuid(request: $_model.ModifyTagWithUuidRequest): Promise<$_model.ModifyTagWithUuidResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyTagWithUuidWithOptions(request, runtime);
  }

  /**
   * Modifies an anti-ransomware policy for databases.
   * 
   * @param tmpReq - ModifyUniBackupPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyUniBackupPolicyResponse
   */
  async modifyUniBackupPolicyWithOptions(tmpReq: $_model.ModifyUniBackupPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyUniBackupPolicyResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyUniBackupPolicyShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.fullPlan)) {
      request.fullPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fullPlan, "FullPlan", "json");
    }

    if (!$dara.isNull(tmpReq.incPlan)) {
      request.incPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.incPlan, "IncPlan", "json");
    }

    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.accountPassword)) {
      query["AccountPassword"] = request.accountPassword;
    }

    if (!$dara.isNull(request.fullPlanShrink)) {
      query["FullPlan"] = request.fullPlanShrink;
    }

    if (!$dara.isNull(request.incPlanShrink)) {
      query["IncPlan"] = request.incPlanShrink;
    }

    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    if (!$dara.isNull(request.policyName)) {
      query["PolicyName"] = request.policyName;
    }

    if (!$dara.isNull(request.policyStatus)) {
      query["PolicyStatus"] = request.policyStatus;
    }

    if (!$dara.isNull(request.retention)) {
      query["Retention"] = request.retention;
    }

    if (!$dara.isNull(request.speedLimiter)) {
      query["SpeedLimiter"] = request.speedLimiter;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyUniBackupPolicy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyUniBackupPolicyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyUniBackupPolicyResponse({}));
  }

  /**
   * Modifies an anti-ransomware policy for databases.
   * 
   * @param request - ModifyUniBackupPolicyRequest
   * @returns ModifyUniBackupPolicyResponse
   */
  async modifyUniBackupPolicy(request: $_model.ModifyUniBackupPolicyRequest): Promise<$_model.ModifyUniBackupPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyUniBackupPolicyWithOptions(request, runtime);
  }

  /**
   * Enables or disables a honeypot.
   * 
   * @deprecated OpenAPI ModifyVpcHoneyPot is deprecated
   * 
   * @param request - ModifyVpcHoneyPotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyVpcHoneyPotResponse
   */
  async modifyVpcHoneyPotWithOptions(request: $_model.ModifyVpcHoneyPotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyVpcHoneyPotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.honeyPotAction)) {
      query["HoneyPotAction"] = request.honeyPotAction;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyVpcHoneyPot",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyVpcHoneyPotResponse>(await this.callApi(params, req, runtime), new $_model.ModifyVpcHoneyPotResponse({}));
  }

  /**
   * Enables or disables a honeypot.
   * 
   * @deprecated OpenAPI ModifyVpcHoneyPot is deprecated
   * 
   * @param request - ModifyVpcHoneyPotRequest
   * @returns ModifyVpcHoneyPotResponse
   */
  // Deprecated
  async modifyVpcHoneyPot(request: $_model.ModifyVpcHoneyPotRequest): Promise<$_model.ModifyVpcHoneyPotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyVpcHoneyPotWithOptions(request, runtime);
  }

  /**
   * Modifies the configurations of the vulnerability scan feature.
   * 
   * @param request - ModifyVulConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyVulConfigResponse
   */
  async modifyVulConfigWithOptions(request: $_model.ModifyVulConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyVulConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyVulConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyVulConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyVulConfigResponse({}));
  }

  /**
   * Modifies the configurations of the vulnerability scan feature.
   * 
   * @param request - ModifyVulConfigRequest
   * @returns ModifyVulConfigResponse
   */
  async modifyVulConfig(request: $_model.ModifyVulConfigRequest): Promise<$_model.ModifyVulConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyVulConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the configurations of the vulnerability scan feature for a server.
   * 
   * @param request - ModifyVulTargetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyVulTargetResponse
   */
  async modifyVulTargetWithOptions(request: $_model.ModifyVulTargetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyVulTargetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    if (!$dara.isNull(request.target)) {
      query["Target"] = request.target;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyVulTarget",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyVulTargetResponse>(await this.callApi(params, req, runtime), new $_model.ModifyVulTargetResponse({}));
  }

  /**
   * Modifies the configurations of the vulnerability scan feature for a server.
   * 
   * @param request - ModifyVulTargetRequest
   * @returns ModifyVulTargetResponse
   */
  async modifyVulTarget(request: $_model.ModifyVulTargetRequest): Promise<$_model.ModifyVulTargetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyVulTargetWithOptions(request, runtime);
  }

  /**
   * Configures vulnerability scan for a server.
   * 
   * @param request - ModifyVulTargetConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyVulTargetConfigResponse
   */
  async modifyVulTargetConfigWithOptions(request: $_model.ModifyVulTargetConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyVulTargetConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyVulTargetConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyVulTargetConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyVulTargetConfigResponse({}));
  }

  /**
   * Configures vulnerability scan for a server.
   * 
   * @param request - ModifyVulTargetConfigRequest
   * @returns ModifyVulTargetConfigResponse
   */
  async modifyVulTargetConfig(request: $_model.ModifyVulTargetConfigRequest): Promise<$_model.ModifyVulTargetConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyVulTargetConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the servers that are added to a vulnerability whitelist.
   * 
   * @param request - ModifyVulWhitelistTargetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyVulWhitelistTargetResponse
   */
  async modifyVulWhitelistTargetWithOptions(request: $_model.ModifyVulWhitelistTargetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyVulWhitelistTargetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.reason)) {
      query["Reason"] = request.reason;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.targetInfo)) {
      query["TargetInfo"] = request.targetInfo;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyVulWhitelistTarget",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyVulWhitelistTargetResponse>(await this.callApi(params, req, runtime), new $_model.ModifyVulWhitelistTargetResponse({}));
  }

  /**
   * Modifies the servers that are added to a vulnerability whitelist.
   * 
   * @param request - ModifyVulWhitelistTargetRequest
   * @returns ModifyVulWhitelistTargetResponse
   */
  async modifyVulWhitelistTarget(request: $_model.ModifyVulWhitelistTargetRequest): Promise<$_model.ModifyVulWhitelistTargetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyVulWhitelistTargetWithOptions(request, runtime);
  }

  /**
   * Adds a directory to protect for a specified server.
   * 
   * @param request - ModifyWebLockCreateConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyWebLockCreateConfigResponse
   */
  async modifyWebLockCreateConfigWithOptions(request: $_model.ModifyWebLockCreateConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyWebLockCreateConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.defenceMode)) {
      query["DefenceMode"] = request.defenceMode;
    }

    if (!$dara.isNull(request.dir)) {
      query["Dir"] = request.dir;
    }

    if (!$dara.isNull(request.exclusiveDir)) {
      query["ExclusiveDir"] = request.exclusiveDir;
    }

    if (!$dara.isNull(request.exclusiveFile)) {
      query["ExclusiveFile"] = request.exclusiveFile;
    }

    if (!$dara.isNull(request.exclusiveFileType)) {
      query["ExclusiveFileType"] = request.exclusiveFileType;
    }

    if (!$dara.isNull(request.inclusiveFile)) {
      query["InclusiveFile"] = request.inclusiveFile;
    }

    if (!$dara.isNull(request.inclusiveFileType)) {
      query["InclusiveFileType"] = request.inclusiveFileType;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.localBackupDir)) {
      query["LocalBackupDir"] = request.localBackupDir;
    }

    if (!$dara.isNull(request.mode)) {
      query["Mode"] = request.mode;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyWebLockCreateConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyWebLockCreateConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyWebLockCreateConfigResponse({}));
  }

  /**
   * Adds a directory to protect for a specified server.
   * 
   * @param request - ModifyWebLockCreateConfigRequest
   * @returns ModifyWebLockCreateConfigResponse
   */
  async modifyWebLockCreateConfig(request: $_model.ModifyWebLockCreateConfigRequest): Promise<$_model.ModifyWebLockCreateConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyWebLockCreateConfigWithOptions(request, runtime);
  }

  /**
   * Deletes a directory on a specified server from the protected directories of web tamper proofing.
   * 
   * @remarks
   * After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
   * 
   * @param request - ModifyWebLockDeleteConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyWebLockDeleteConfigResponse
   */
  async modifyWebLockDeleteConfigWithOptions(request: $_model.ModifyWebLockDeleteConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyWebLockDeleteConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyWebLockDeleteConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyWebLockDeleteConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyWebLockDeleteConfigResponse({}));
  }

  /**
   * Deletes a directory on a specified server from the protected directories of web tamper proofing.
   * 
   * @remarks
   * After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
   * 
   * @param request - ModifyWebLockDeleteConfigRequest
   * @returns ModifyWebLockDeleteConfigResponse
   */
  async modifyWebLockDeleteConfig(request: $_model.ModifyWebLockDeleteConfigRequest): Promise<$_model.ModifyWebLockDeleteConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyWebLockDeleteConfigWithOptions(request, runtime);
  }

  /**
   * Changes the status of processes for web tamper proofing.
   * 
   * @param request - ModifyWebLockProcessStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyWebLockProcessStatusResponse
   */
  async modifyWebLockProcessStatusWithOptions(request: $_model.ModifyWebLockProcessStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyWebLockProcessStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dealAll)) {
      query["DealAll"] = request.dealAll;
    }

    if (!$dara.isNull(request.operateInfo)) {
      query["OperateInfo"] = request.operateInfo;
    }

    if (!$dara.isNull(request.processPath)) {
      query["ProcessPath"] = request.processPath;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyWebLockProcessStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyWebLockProcessStatusResponse>(await this.callApi(params, req, runtime), new $_model.ModifyWebLockProcessStatusResponse({}));
  }

  /**
   * Changes the status of processes for web tamper proofing.
   * 
   * @param request - ModifyWebLockProcessStatusRequest
   * @returns ModifyWebLockProcessStatusResponse
   */
  async modifyWebLockProcessStatus(request: $_model.ModifyWebLockProcessStatusRequest): Promise<$_model.ModifyWebLockProcessStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyWebLockProcessStatusWithOptions(request, runtime);
  }

  /**
   * Refreshes the status of the web tamper proofing feature for a server.
   * 
   * @remarks
   * If an exception occurs when you enable or disable the web tamper proofing feature for a server, you can call this operation to refresh the status of the web tamper proofing feature.
   * 
   * @param request - ModifyWebLockRefreshRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyWebLockRefreshResponse
   */
  async modifyWebLockRefreshWithOptions(request: $_model.ModifyWebLockRefreshRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyWebLockRefreshResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyWebLockRefresh",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyWebLockRefreshResponse>(await this.callApi(params, req, runtime), new $_model.ModifyWebLockRefreshResponse({}));
  }

  /**
   * Refreshes the status of the web tamper proofing feature for a server.
   * 
   * @remarks
   * If an exception occurs when you enable or disable the web tamper proofing feature for a server, you can call this operation to refresh the status of the web tamper proofing feature.
   * 
   * @param request - ModifyWebLockRefreshRequest
   * @returns ModifyWebLockRefreshResponse
   */
  async modifyWebLockRefresh(request: $_model.ModifyWebLockRefreshRequest): Promise<$_model.ModifyWebLockRefreshResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyWebLockRefreshWithOptions(request, runtime);
  }

  /**
   * Enables web tamper proofing for a specified server.
   * 
   * @param request - ModifyWebLockStartRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyWebLockStartResponse
   */
  async modifyWebLockStartWithOptions(request: $_model.ModifyWebLockStartRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyWebLockStartResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.defenceMode)) {
      query["DefenceMode"] = request.defenceMode;
    }

    if (!$dara.isNull(request.dir)) {
      query["Dir"] = request.dir;
    }

    if (!$dara.isNull(request.exclusiveDir)) {
      query["ExclusiveDir"] = request.exclusiveDir;
    }

    if (!$dara.isNull(request.exclusiveFile)) {
      query["ExclusiveFile"] = request.exclusiveFile;
    }

    if (!$dara.isNull(request.exclusiveFileType)) {
      query["ExclusiveFileType"] = request.exclusiveFileType;
    }

    if (!$dara.isNull(request.inclusiveFileType)) {
      query["InclusiveFileType"] = request.inclusiveFileType;
    }

    if (!$dara.isNull(request.localBackupDir)) {
      query["LocalBackupDir"] = request.localBackupDir;
    }

    if (!$dara.isNull(request.mode)) {
      query["Mode"] = request.mode;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyWebLockStart",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyWebLockStartResponse>(await this.callApi(params, req, runtime), new $_model.ModifyWebLockStartResponse({}));
  }

  /**
   * Enables web tamper proofing for a specified server.
   * 
   * @param request - ModifyWebLockStartRequest
   * @returns ModifyWebLockStartResponse
   */
  async modifyWebLockStart(request: $_model.ModifyWebLockStartRequest): Promise<$_model.ModifyWebLockStartResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyWebLockStartWithOptions(request, runtime);
  }

  /**
   * Enables or disables web tamper proofing for a server.
   * 
   * @param request - ModifyWebLockStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyWebLockStatusResponse
   */
  async modifyWebLockStatusWithOptions(request: $_model.ModifyWebLockStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyWebLockStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyWebLockStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyWebLockStatusResponse>(await this.callApi(params, req, runtime), new $_model.ModifyWebLockStatusResponse({}));
  }

  /**
   * Enables or disables web tamper proofing for a server.
   * 
   * @param request - ModifyWebLockStatusRequest
   * @returns ModifyWebLockStatusResponse
   */
  async modifyWebLockStatus(request: $_model.ModifyWebLockStatusRequest): Promise<$_model.ModifyWebLockStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyWebLockStatusWithOptions(request, runtime);
  }

  /**
   * Disables web tamper proofing for a specified server.
   * 
   * @param request - ModifyWebLockUnbindRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyWebLockUnbindResponse
   */
  async modifyWebLockUnbindWithOptions(request: $_model.ModifyWebLockUnbindRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyWebLockUnbindResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyWebLockUnbind",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyWebLockUnbindResponse>(await this.callApi(params, req, runtime), new $_model.ModifyWebLockUnbindResponse({}));
  }

  /**
   * Disables web tamper proofing for a specified server.
   * 
   * @param request - ModifyWebLockUnbindRequest
   * @returns ModifyWebLockUnbindResponse
   */
  async modifyWebLockUnbind(request: $_model.ModifyWebLockUnbindRequest): Promise<$_model.ModifyWebLockUnbindResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyWebLockUnbindWithOptions(request, runtime);
  }

  /**
   * Modifies the protection policy for a specified server.
   * 
   * @param request - ModifyWebLockUpdateConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyWebLockUpdateConfigResponse
   */
  async modifyWebLockUpdateConfigWithOptions(request: $_model.ModifyWebLockUpdateConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyWebLockUpdateConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.defenceMode)) {
      query["DefenceMode"] = request.defenceMode;
    }

    if (!$dara.isNull(request.dir)) {
      query["Dir"] = request.dir;
    }

    if (!$dara.isNull(request.exclusiveDir)) {
      query["ExclusiveDir"] = request.exclusiveDir;
    }

    if (!$dara.isNull(request.exclusiveFile)) {
      query["ExclusiveFile"] = request.exclusiveFile;
    }

    if (!$dara.isNull(request.exclusiveFileType)) {
      query["ExclusiveFileType"] = request.exclusiveFileType;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.inclusiveFile)) {
      query["InclusiveFile"] = request.inclusiveFile;
    }

    if (!$dara.isNull(request.inclusiveFileType)) {
      query["InclusiveFileType"] = request.inclusiveFileType;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.localBackupDir)) {
      query["LocalBackupDir"] = request.localBackupDir;
    }

    if (!$dara.isNull(request.mode)) {
      query["Mode"] = request.mode;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyWebLockUpdateConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyWebLockUpdateConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyWebLockUpdateConfigResponse({}));
  }

  /**
   * Modifies the protection policy for a specified server.
   * 
   * @param request - ModifyWebLockUpdateConfigRequest
   * @returns ModifyWebLockUpdateConfigResponse
   */
  async modifyWebLockUpdateConfig(request: $_model.ModifyWebLockUpdateConfigRequest): Promise<$_model.ModifyWebLockUpdateConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyWebLockUpdateConfigWithOptions(request, runtime);
  }

  /**
   * Modifies a custom web directory.
   * 
   * @param request - ModifyWebPathRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyWebPathResponse
   */
  async modifyWebPathWithOptions(request: $_model.ModifyWebPathRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyWebPathResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    if (!$dara.isNull(request.target)) {
      query["Target"] = request.target;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyWebPath",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyWebPathResponse>(await this.callApi(params, req, runtime), new $_model.ModifyWebPathResponse({}));
  }

  /**
   * Modifies a custom web directory.
   * 
   * @param request - ModifyWebPathRequest
   * @returns ModifyWebPathResponse
   */
  async modifyWebPath(request: $_model.ModifyWebPathRequest): Promise<$_model.ModifyWebPathResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyWebPathWithOptions(request, runtime);
  }

  /**
   * Enables the automatic configuration of anti-ransomware policies for servers in the managed anti-ransomware feature. You can call this operation only after you purchase the managed anti-ransomware feature.
   * 
   * @param request - OpenBackupAutoConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OpenBackupAutoConfigResponse
   */
  async openBackupAutoConfigWithOptions(request: $_model.OpenBackupAutoConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OpenBackupAutoConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.maxBatchSize)) {
      query["MaxBatchSize"] = request.maxBatchSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OpenBackupAutoConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OpenBackupAutoConfigResponse>(await this.callApi(params, req, runtime), new $_model.OpenBackupAutoConfigResponse({}));
  }

  /**
   * Enables the automatic configuration of anti-ransomware policies for servers in the managed anti-ransomware feature. You can call this operation only after you purchase the managed anti-ransomware feature.
   * 
   * @param request - OpenBackupAutoConfigRequest
   * @returns OpenBackupAutoConfigResponse
   */
  async openBackupAutoConfig(request: $_model.OpenBackupAutoConfigRequest): Promise<$_model.OpenBackupAutoConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.openBackupAutoConfigWithOptions(request, runtime);
  }

  /**
   * 开启按量购买
   * 
   * @param request - OpenPartialBuyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OpenPartialBuyResponse
   */
  async openPartialBuyWithOptions(request: $_model.OpenPartialBuyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OpenPartialBuyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OpenPartialBuy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OpenPartialBuyResponse>(await this.callApi(params, req, runtime), new $_model.OpenPartialBuyResponse({}));
  }

  /**
   * 开启按量购买
   * 
   * @param request - OpenPartialBuyRequest
   * @returns OpenPartialBuyResponse
   */
  async openPartialBuy(request: $_model.OpenPartialBuyRequest): Promise<$_model.OpenPartialBuyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.openPartialBuyWithOptions(request, runtime);
  }

  /**
   * Enables or disables sensitive file scan.
   * 
   * @param request - OpenSensitiveFileScanRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OpenSensitiveFileScanResponse
   */
  async openSensitiveFileScanWithOptions(request: $_model.OpenSensitiveFileScanRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OpenSensitiveFileScanResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.switchOn)) {
      query["SwitchOn"] = request.switchOn;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OpenSensitiveFileScan",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OpenSensitiveFileScanResponse>(await this.callApi(params, req, runtime), new $_model.OpenSensitiveFileScanResponse({}));
  }

  /**
   * Enables or disables sensitive file scan.
   * 
   * @param request - OpenSensitiveFileScanRequest
   * @returns OpenSensitiveFileScanResponse
   */
  async openSensitiveFileScan(request: $_model.OpenSensitiveFileScanRequest): Promise<$_model.OpenSensitiveFileScanResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.openSensitiveFileScanWithOptions(request, runtime);
  }

  /**
   * Installs the Security Center agent on servers.
   * 
   * @param request - OperateAgentClientInstallRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperateAgentClientInstallResponse
   */
  async operateAgentClientInstallWithOptions(request: $_model.OperateAgentClientInstallRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperateAgentClientInstallResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.os)) {
      query["Os"] = request.os;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperateAgentClientInstall",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperateAgentClientInstallResponse>(await this.callApi(params, req, runtime), new $_model.OperateAgentClientInstallResponse({}));
  }

  /**
   * Installs the Security Center agent on servers.
   * 
   * @param request - OperateAgentClientInstallRequest
   * @returns OperateAgentClientInstallResponse
   */
  async operateAgentClientInstall(request: $_model.OperateAgentClientInstallRequest): Promise<$_model.OperateAgentClientInstallResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operateAgentClientInstallWithOptions(request, runtime);
  }

  /**
   * Adds or deletes container applications for tamper proofing.
   * 
   * @param request - OperateApplicationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperateApplicationResponse
   */
  async operateApplicationWithOptions(request: $_model.OperateApplicationRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperateApplicationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.containerWebDefenseApplicationDTOS)) {
      query["ContainerWebDefenseApplicationDTOS"] = request.containerWebDefenseApplicationDTOS;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperateApplication",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperateApplicationResponse>(await this.callApi(params, req, runtime), new $_model.OperateApplicationResponse({}));
  }

  /**
   * Adds or deletes container applications for tamper proofing.
   * 
   * @param request - OperateApplicationRequest
   * @returns OperateApplicationResponse
   */
  async operateApplication(request: $_model.OperateApplicationRequest): Promise<$_model.OperateApplicationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operateApplicationWithOptions(request, runtime);
  }

  /**
   * Manages an Object Storage Service (OSS) bucket check task.
   * 
   * @param request - OperateBucketScanTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperateBucketScanTaskResponse
   */
  async operateBucketScanTaskWithOptions(request: $_model.OperateBucketScanTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperateBucketScanTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bucketName)) {
      query["BucketName"] = request.bucketName;
    }

    if (!$dara.isNull(request.operateCode)) {
      query["OperateCode"] = request.operateCode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperateBucketScanTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperateBucketScanTaskResponse>(await this.callApi(params, req, runtime), new $_model.OperateBucketScanTaskResponse({}));
  }

  /**
   * Manages an Object Storage Service (OSS) bucket check task.
   * 
   * @param request - OperateBucketScanTaskRequest
   * @returns OperateBucketScanTaskResponse
   */
  async operateBucketScanTask(request: $_model.OperateBucketScanTaskRequest): Promise<$_model.OperateBucketScanTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operateBucketScanTaskWithOptions(request, runtime);
  }

  /**
   * Enables or disables a feature by type.
   * 
   * @param request - OperateCommonOverallConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperateCommonOverallConfigResponse
   */
  async operateCommonOverallConfigWithOptions(request: $_model.OperateCommonOverallConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperateCommonOverallConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    if (!$dara.isNull(request.noTargetAsOn)) {
      query["NoTargetAsOn"] = request.noTargetAsOn;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperateCommonOverallConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperateCommonOverallConfigResponse>(await this.callApi(params, req, runtime), new $_model.OperateCommonOverallConfigResponse({}));
  }

  /**
   * Enables or disables a feature by type.
   * 
   * @param request - OperateCommonOverallConfigRequest
   * @returns OperateCommonOverallConfigResponse
   */
  async operateCommonOverallConfig(request: $_model.OperateCommonOverallConfigRequest): Promise<$_model.OperateCommonOverallConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operateCommonOverallConfigWithOptions(request, runtime);
  }

  /**
   * Configures features by type. The features include container image scan, local file detection, container network visualization, and container escape prevention.
   * 
   * @param request - OperateCommonTargetConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperateCommonTargetConfigResponse
   */
  async operateCommonTargetConfigWithOptions(request: $_model.OperateCommonTargetConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperateCommonTargetConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fieldName)) {
      query["FieldName"] = request.fieldName;
    }

    if (!$dara.isNull(request.fieldValue)) {
      query["FieldValue"] = request.fieldValue;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.targetOperations)) {
      query["TargetOperations"] = request.targetOperations;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperateCommonTargetConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperateCommonTargetConfigResponse>(await this.callApi(params, req, runtime), new $_model.OperateCommonTargetConfigResponse({}));
  }

  /**
   * Configures features by type. The features include container image scan, local file detection, container network visualization, and container escape prevention.
   * 
   * @param request - OperateCommonTargetConfigRequest
   * @returns OperateCommonTargetConfigResponse
   */
  async operateCommonTargetConfig(request: $_model.OperateCommonTargetConfigRequest): Promise<$_model.OperateCommonTargetConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operateCommonTargetConfigWithOptions(request, runtime);
  }

  /**
   * Adds a check item of an image baseline to the whitelist, or removes a check item of an image baseline from the whitelist.
   * 
   * @param request - OperateImageBaselineWhitelistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperateImageBaselineWhitelistResponse
   */
  async operateImageBaselineWhitelistWithOptions(request: $_model.OperateImageBaselineWhitelistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperateImageBaselineWhitelistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.baselineItemKeyList)) {
      query["BaselineItemKeyList"] = request.baselineItemKeyList;
    }

    if (!$dara.isNull(request.imageUuid)) {
      query["ImageUuid"] = request.imageUuid;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.operation)) {
      query["Operation"] = request.operation;
    }

    if (!$dara.isNull(request.scanRange)) {
      query["ScanRange"] = request.scanRange;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperateImageBaselineWhitelist",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperateImageBaselineWhitelistResponse>(await this.callApi(params, req, runtime), new $_model.OperateImageBaselineWhitelistResponse({}));
  }

  /**
   * Adds a check item of an image baseline to the whitelist, or removes a check item of an image baseline from the whitelist.
   * 
   * @param request - OperateImageBaselineWhitelistRequest
   * @returns OperateImageBaselineWhitelistResponse
   */
  async operateImageBaselineWhitelist(request: $_model.OperateImageBaselineWhitelistRequest): Promise<$_model.OperateImageBaselineWhitelistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operateImageBaselineWhitelistWithOptions(request, runtime);
  }

  /**
   * Handles an image vulnerability, such as fixing the image vulnerability, verifying the fix of the image vulnerability, ignoring the image vulnerability, or canceling ignoring the image vulnerability.
   * 
   * @param request - OperateImageVulRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperateImageVulResponse
   */
  async operateImageVulWithOptions(request: $_model.OperateImageVulRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperateImageVulResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.info)) {
      query["Info"] = request.info;
    }

    if (!$dara.isNull(request.operateType)) {
      query["OperateType"] = request.operateType;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperateImageVul",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperateImageVulResponse>(await this.callApi(params, req, runtime), new $_model.OperateImageVulResponse({}));
  }

  /**
   * Handles an image vulnerability, such as fixing the image vulnerability, verifying the fix of the image vulnerability, ignoring the image vulnerability, or canceling ignoring the image vulnerability.
   * 
   * @param request - OperateImageVulRequest
   * @returns OperateImageVulResponse
   */
  async operateImageVul(request: $_model.OperateImageVulRequest): Promise<$_model.OperateImageVulResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operateImageVulWithOptions(request, runtime);
  }

  /**
   * Enables or disables a feature that detects exceptions.
   * 
   * @param request - OperateSuspiciousOverallConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperateSuspiciousOverallConfigResponse
   */
  async operateSuspiciousOverallConfigWithOptions(request: $_model.OperateSuspiciousOverallConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperateSuspiciousOverallConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.noTargetAsOn)) {
      query["NoTargetAsOn"] = request.noTargetAsOn;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperateSuspiciousOverallConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperateSuspiciousOverallConfigResponse>(await this.callApi(params, req, runtime), new $_model.OperateSuspiciousOverallConfigResponse({}));
  }

  /**
   * Enables or disables a feature that detects exceptions.
   * 
   * @param request - OperateSuspiciousOverallConfigRequest
   * @returns OperateSuspiciousOverallConfigResponse
   */
  async operateSuspiciousOverallConfig(request: $_model.OperateSuspiciousOverallConfigRequest): Promise<$_model.OperateSuspiciousOverallConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operateSuspiciousOverallConfigWithOptions(request, runtime);
  }

  /**
   * Configures the scope on which proactive defense takes effect.
   * 
   * @param request - OperateSuspiciousTargetConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperateSuspiciousTargetConfigResponse
   */
  async operateSuspiciousTargetConfigWithOptions(request: $_model.OperateSuspiciousTargetConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperateSuspiciousTargetConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.targetOperations)) {
      query["TargetOperations"] = request.targetOperations;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperateSuspiciousTargetConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperateSuspiciousTargetConfigResponse>(await this.callApi(params, req, runtime), new $_model.OperateSuspiciousTargetConfigResponse({}));
  }

  /**
   * Configures the scope on which proactive defense takes effect.
   * 
   * @param request - OperateSuspiciousTargetConfigRequest
   * @returns OperateSuspiciousTargetConfigResponse
   */
  async operateSuspiciousTargetConfig(request: $_model.OperateSuspiciousTargetConfigRequest): Promise<$_model.OperateSuspiciousTargetConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operateSuspiciousTargetConfigWithOptions(request, runtime);
  }

  /**
   * Changes the status of a rule for container tamper-proofing.
   * 
   * @param request - OperateSwitchStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperateSwitchStatusResponse
   */
  async operateSwitchStatusWithOptions(request: $_model.OperateSwitchStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperateSwitchStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperateSwitchStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperateSwitchStatusResponse>(await this.callApi(params, req, runtime), new $_model.OperateSwitchStatusResponse({}));
  }

  /**
   * Changes the status of a rule for container tamper-proofing.
   * 
   * @param request - OperateSwitchStatusRequest
   * @returns OperateSwitchStatusResponse
   */
  async operateSwitchStatus(request: $_model.OperateSwitchStatusRequest): Promise<$_model.OperateSwitchStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operateSwitchStatusWithOptions(request, runtime);
  }

  /**
   * Handles alert events that are generated by the antivirus feature. You can perform in-depth detection and removal, add alert events to the whitelist, ignore alert events, or manually handle alert events.
   * 
   * @param request - OperateVirusEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperateVirusEventsResponse
   */
  async operateVirusEventsWithOptions(request: $_model.OperateVirusEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperateVirusEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.operationAll)) {
      query["OperationAll"] = request.operationAll;
    }

    if (!$dara.isNull(request.operationCode)) {
      query["OperationCode"] = request.operationCode;
    }

    if (!$dara.isNull(request.operationRange)) {
      query["OperationRange"] = request.operationRange;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperateVirusEvents",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperateVirusEventsResponse>(await this.callApi(params, req, runtime), new $_model.OperateVirusEventsResponse({}));
  }

  /**
   * Handles alert events that are generated by the antivirus feature. You can perform in-depth detection and removal, add alert events to the whitelist, ignore alert events, or manually handle alert events.
   * 
   * @param request - OperateVirusEventsRequest
   * @returns OperateVirusEventsResponse
   */
  async operateVirusEvents(request: $_model.OperateVirusEventsRequest): Promise<$_model.OperateVirusEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operateVirusEventsWithOptions(request, runtime);
  }

  /**
   * Fixes Linux software vulnerabilities.
   * 
   * @param request - OperateVulsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperateVulsResponse
   */
  async operateVulsWithOptions(request: $_model.OperateVulsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperateVulsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.operateType)) {
      query["OperateType"] = request.operateType;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    if (!$dara.isNull(request.vulNames)) {
      query["VulNames"] = request.vulNames;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperateVuls",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperateVulsResponse>(await this.callApi(params, req, runtime), new $_model.OperateVulsResponse({}));
  }

  /**
   * Fixes Linux software vulnerabilities.
   * 
   * @param request - OperateVulsRequest
   * @returns OperateVulsResponse
   */
  async operateVuls(request: $_model.OperateVulsRequest): Promise<$_model.OperateVulsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operateVulsWithOptions(request, runtime);
  }

  /**
   * Handles alert events that are generated for web tamper proofing.
   * 
   * @param request - OperateWebLockFileEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperateWebLockFileEventsResponse
   */
  async operateWebLockFileEventsWithOptions(request: $_model.OperateWebLockFileEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperateWebLockFileEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dealAll)) {
      query["DealAll"] = request.dealAll;
    }

    if (!$dara.isNull(request.eventIds)) {
      query["EventIds"] = request.eventIds;
    }

    if (!$dara.isNull(request.operationCode)) {
      query["OperationCode"] = request.operationCode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperateWebLockFileEvents",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperateWebLockFileEventsResponse>(await this.callApi(params, req, runtime), new $_model.OperateWebLockFileEventsResponse({}));
  }

  /**
   * Handles alert events that are generated for web tamper proofing.
   * 
   * @param request - OperateWebLockFileEventsRequest
   * @returns OperateWebLockFileEventsResponse
   */
  async operateWebLockFileEvents(request: $_model.OperateWebLockFileEventsRequest): Promise<$_model.OperateWebLockFileEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operateWebLockFileEventsWithOptions(request, runtime);
  }

  /**
   * Cancels ignoring alert events.
   * 
   * @param request - OperationCancelIgnoreSuspEventRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperationCancelIgnoreSuspEventResponse
   */
  async operationCancelIgnoreSuspEventWithOptions(request: $_model.OperationCancelIgnoreSuspEventRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperationCancelIgnoreSuspEventResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.securityEventIds)) {
      query["SecurityEventIds"] = request.securityEventIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperationCancelIgnoreSuspEvent",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperationCancelIgnoreSuspEventResponse>(await this.callApi(params, req, runtime), new $_model.OperationCancelIgnoreSuspEventResponse({}));
  }

  /**
   * Cancels ignoring alert events.
   * 
   * @param request - OperationCancelIgnoreSuspEventRequest
   * @returns OperationCancelIgnoreSuspEventResponse
   */
  async operationCancelIgnoreSuspEvent(request: $_model.OperationCancelIgnoreSuspEventRequest): Promise<$_model.OperationCancelIgnoreSuspEventResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operationCancelIgnoreSuspEventWithOptions(request, runtime);
  }

  /**
   * Modifies the chart of a security report.
   * 
   * @param request - OperationCustomizeReportChartRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperationCustomizeReportChartResponse
   */
  async operationCustomizeReportChartWithOptions(request: $_model.OperationCustomizeReportChartRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperationCustomizeReportChartResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.chartIds)) {
      query["ChartIds"] = request.chartIds;
    }

    if (!$dara.isNull(request.reportId)) {
      query["ReportId"] = request.reportId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperationCustomizeReportChart",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperationCustomizeReportChartResponse>(await this.callApi(params, req, runtime), new $_model.OperationCustomizeReportChartResponse({}));
  }

  /**
   * Modifies the chart of a security report.
   * 
   * @param request - OperationCustomizeReportChartRequest
   * @returns OperationCustomizeReportChartResponse
   */
  async operationCustomizeReportChart(request: $_model.OperationCustomizeReportChartRequest): Promise<$_model.OperationCustomizeReportChartResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operationCustomizeReportChartWithOptions(request, runtime);
  }

  /**
   * Handles multiple exceptions at a time.
   * 
   * @param request - OperationSuspEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns OperationSuspEventsResponse
   */
  async operationSuspEventsWithOptions(request: $_model.OperationSuspEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.OperationSuspEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.operation)) {
      query["Operation"] = request.operation;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.subOperation)) {
      query["SubOperation"] = request.subOperation;
    }

    if (!$dara.isNull(request.suspiciousEventIds)) {
      query["SuspiciousEventIds"] = request.suspiciousEventIds;
    }

    if (!$dara.isNull(request.warnType)) {
      query["WarnType"] = request.warnType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "OperationSuspEvents",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.OperationSuspEventsResponse>(await this.callApi(params, req, runtime), new $_model.OperationSuspEventsResponse({}));
  }

  /**
   * Handles multiple exceptions at a time.
   * 
   * @param request - OperationSuspEventsRequest
   * @returns OperationSuspEventsResponse
   */
  async operationSuspEvents(request: $_model.OperationSuspEventsRequest): Promise<$_model.OperationSuspEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.operationSuspEventsWithOptions(request, runtime);
  }

  /**
   * Queries image repositories by page.
   * 
   * @param request - PageImageRegistryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PageImageRegistryResponse
   */
  async pageImageRegistryWithOptions(request: $_model.PageImageRegistryRequest, runtime: $dara.RuntimeOptions): Promise<$_model.PageImageRegistryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.currentPage)) {
      body["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.registryNameLike)) {
      body["RegistryNameLike"] = request.registryNameLike;
    }

    if (!$dara.isNull(request.registryTypeInList)) {
      body["RegistryTypeInList"] = request.registryTypeInList;
    }

    if (!$dara.isNull(request.registryTypeNotInList)) {
      body["RegistryTypeNotInList"] = request.registryTypeNotInList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "PageImageRegistry",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.PageImageRegistryResponse>(await this.callApi(params, req, runtime), new $_model.PageImageRegistryResponse({}));
  }

  /**
   * Queries image repositories by page.
   * 
   * @param request - PageImageRegistryRequest
   * @returns PageImageRegistryResponse
   */
  async pageImageRegistry(request: $_model.PageImageRegistryRequest): Promise<$_model.PageImageRegistryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.pageImageRegistryWithOptions(request, runtime);
  }

  /**
   * Enables or disables the Security Center agent.
   * 
   * @param request - PauseClientRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PauseClientResponse
   */
  async pauseClientWithOptions(request: $_model.PauseClientRequest, runtime: $dara.RuntimeOptions): Promise<$_model.PauseClientResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    if (!$dara.isNull(request.value)) {
      query["Value"] = request.value;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PauseClient",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.PauseClientResponse>(await this.callApi(params, req, runtime), new $_model.PauseClientResponse({}));
  }

  /**
   * Enables or disables the Security Center agent.
   * 
   * @param request - PauseClientRequest
   * @returns PauseClientResponse
   */
  async pauseClient(request: $_model.PauseClientRequest): Promise<$_model.PauseClientResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.pauseClientWithOptions(request, runtime);
  }

  /**
   * Modify the status of strategy tasks
   * 
   * @remarks
   * This API call is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
   * 
   * @param request - ProcessSoarStrategyTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ProcessSoarStrategyTaskResponse
   */
  async processSoarStrategyTaskWithOptions(request: $_model.ProcessSoarStrategyTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ProcessSoarStrategyTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.strategyTaskId)) {
      query["StrategyTaskId"] = request.strategyTaskId;
    }

    if (!$dara.isNull(request.taskAction)) {
      query["TaskAction"] = request.taskAction;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ProcessSoarStrategyTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ProcessSoarStrategyTaskResponse>(await this.callApi(params, req, runtime), new $_model.ProcessSoarStrategyTaskResponse({}));
  }

  /**
   * Modify the status of strategy tasks
   * 
   * @remarks
   * This API call is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
   * 
   * @param request - ProcessSoarStrategyTaskRequest
   * @returns ProcessSoarStrategyTaskResponse
   */
  async processSoarStrategyTask(request: $_model.ProcessSoarStrategyTaskRequest): Promise<$_model.ProcessSoarStrategyTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.processSoarStrategyTaskWithOptions(request, runtime);
  }

  /**
   * Creates an image scan task.
   * 
   * @remarks
   * Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
   * 
   * @param request - PublicCreateImageScanTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PublicCreateImageScanTaskResponse
   */
  async publicCreateImageScanTaskWithOptions(request: $_model.PublicCreateImageScanTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.PublicCreateImageScanTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.digests)) {
      query["Digests"] = request.digests;
    }

    if (!$dara.isNull(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!$dara.isNull(request.regionIds)) {
      query["RegionIds"] = request.regionIds;
    }

    if (!$dara.isNull(request.registryTypes)) {
      query["RegistryTypes"] = request.registryTypes;
    }

    if (!$dara.isNull(request.repoIds)) {
      query["RepoIds"] = request.repoIds;
    }

    if (!$dara.isNull(request.repoNames)) {
      query["RepoNames"] = request.repoNames;
    }

    if (!$dara.isNull(request.repoNamespaces)) {
      query["RepoNamespaces"] = request.repoNamespaces;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.tags)) {
      query["Tags"] = request.tags;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PublicCreateImageScanTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.PublicCreateImageScanTaskResponse>(await this.callApi(params, req, runtime), new $_model.PublicCreateImageScanTaskResponse({}));
  }

  /**
   * Creates an image scan task.
   * 
   * @remarks
   * Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
   * 
   * @param request - PublicCreateImageScanTaskRequest
   * @returns PublicCreateImageScanTaskResponse
   */
  async publicCreateImageScanTask(request: $_model.PublicCreateImageScanTaskRequest): Promise<$_model.PublicCreateImageScanTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.publicCreateImageScanTaskWithOptions(request, runtime);
  }

  /**
   * Queries the number of images to scan in an image scan task and the quota for container image scan to be consumed by the task.
   * 
   * @remarks
   * You can call the PublicPreCheckImageScanTask operation to estimate the quota for container image scan to be consumed by the task. This ensures that you know the quota to be consumed before you perform the task. If the remaining quota for container image scan is less than the quota to be consumed by the task, you must purchase a sufficient quota. This prevents the task from being stopped due to an insufficient quota.
   * If you do not specify the optional parameters when you call this operation, the total number of protected images and the quota for container image scan to be consumed by scanning all the protected images are queried. If you specify the optional parameters, the number of images that meet the specified conditions and the quota for container image scan to be consumed by scanning the images are queried.
   * 
   * @param request - PublicPreCheckImageScanTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PublicPreCheckImageScanTaskResponse
   */
  async publicPreCheckImageScanTaskWithOptions(request: $_model.PublicPreCheckImageScanTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.PublicPreCheckImageScanTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.digests)) {
      query["Digests"] = request.digests;
    }

    if (!$dara.isNull(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!$dara.isNull(request.regionIds)) {
      query["RegionIds"] = request.regionIds;
    }

    if (!$dara.isNull(request.registryTypes)) {
      query["RegistryTypes"] = request.registryTypes;
    }

    if (!$dara.isNull(request.repoIds)) {
      query["RepoIds"] = request.repoIds;
    }

    if (!$dara.isNull(request.repoNames)) {
      query["RepoNames"] = request.repoNames;
    }

    if (!$dara.isNull(request.repoNamespaces)) {
      query["RepoNamespaces"] = request.repoNamespaces;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.tags)) {
      query["Tags"] = request.tags;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PublicPreCheckImageScanTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.PublicPreCheckImageScanTaskResponse>(await this.callApi(params, req, runtime), new $_model.PublicPreCheckImageScanTaskResponse({}));
  }

  /**
   * Queries the number of images to scan in an image scan task and the quota for container image scan to be consumed by the task.
   * 
   * @remarks
   * You can call the PublicPreCheckImageScanTask operation to estimate the quota for container image scan to be consumed by the task. This ensures that you know the quota to be consumed before you perform the task. If the remaining quota for container image scan is less than the quota to be consumed by the task, you must purchase a sufficient quota. This prevents the task from being stopped due to an insufficient quota.
   * If you do not specify the optional parameters when you call this operation, the total number of protected images and the quota for container image scan to be consumed by scanning all the protected images are queried. If you specify the optional parameters, the number of images that meet the specified conditions and the quota for container image scan to be consumed by scanning the images are queried.
   * 
   * @param request - PublicPreCheckImageScanTaskRequest
   * @returns PublicPreCheckImageScanTaskResponse
   */
  async publicPreCheckImageScanTask(request: $_model.PublicPreCheckImageScanTaskRequest): Promise<$_model.PublicPreCheckImageScanTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.publicPreCheckImageScanTaskWithOptions(request, runtime);
  }

  /**
   * Adds images to Security Center and creates an image scan task to scan the images.
   * 
   * @param request - PublicSyncAndCreateImageScanTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PublicSyncAndCreateImageScanTaskResponse
   */
  async publicSyncAndCreateImageScanTaskWithOptions(request: $_model.PublicSyncAndCreateImageScanTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.PublicSyncAndCreateImageScanTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.images)) {
      query["Images"] = request.images;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PublicSyncAndCreateImageScanTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.PublicSyncAndCreateImageScanTaskResponse>(await this.callApi(params, req, runtime), new $_model.PublicSyncAndCreateImageScanTaskResponse({}));
  }

  /**
   * Adds images to Security Center and creates an image scan task to scan the images.
   * 
   * @param request - PublicSyncAndCreateImageScanTaskRequest
   * @returns PublicSyncAndCreateImageScanTaskResponse
   */
  async publicSyncAndCreateImageScanTask(request: $_model.PublicSyncAndCreateImageScanTaskRequest): Promise<$_model.PublicSyncAndCreateImageScanTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.publicSyncAndCreateImageScanTaskWithOptions(request, runtime);
  }

  /**
   * Queries the number of alert events in each attack phase.
   * 
   * @param request - QueryAttackCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryAttackCountResponse
   */
  async queryAttackCountWithOptions(request: $_model.QueryAttackCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.QueryAttackCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.from)) {
      body["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      body["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryAttackCount",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.QueryAttackCountResponse>(await this.callApi(params, req, runtime), new $_model.QueryAttackCountResponse({}));
  }

  /**
   * Queries the number of alert events in each attack phase.
   * 
   * @param request - QueryAttackCountRequest
   * @returns QueryAttackCountResponse
   */
  async queryAttackCount(request: $_model.QueryAttackCountRequest): Promise<$_model.QueryAttackCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryAttackCountWithOptions(request, runtime);
  }

  /**
   * Queries the progress of a database scan task.
   * 
   * @param request - QueryDiscoverDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryDiscoverDatabaseResponse
   */
  async queryDiscoverDatabaseWithOptions(request: $_model.QueryDiscoverDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<$_model.QueryDiscoverDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.createMark)) {
      query["CreateMark"] = request.createMark;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryDiscoverDatabase",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.QueryDiscoverDatabaseResponse>(await this.callApi(params, req, runtime), new $_model.QueryDiscoverDatabaseResponse({}));
  }

  /**
   * Queries the progress of a database scan task.
   * 
   * @param request - QueryDiscoverDatabaseRequest
   * @returns QueryDiscoverDatabaseResponse
   */
  async queryDiscoverDatabase(request: $_model.QueryDiscoverDatabaseRequest): Promise<$_model.QueryDiscoverDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryDiscoverDatabaseWithOptions(request, runtime);
  }

  /**
   * Queries the ID of an asset group by using the name of the asset group.
   * 
   * @remarks
   * You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
   * ### Limits
   * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
   * 
   * @param request - QueryGroupIdByGroupNameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryGroupIdByGroupNameResponse
   */
  async queryGroupIdByGroupNameWithOptions(request: $_model.QueryGroupIdByGroupNameRequest, runtime: $dara.RuntimeOptions): Promise<$_model.QueryGroupIdByGroupNameResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupName)) {
      query["GroupName"] = request.groupName;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryGroupIdByGroupName",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.QueryGroupIdByGroupNameResponse>(await this.callApi(params, req, runtime), new $_model.QueryGroupIdByGroupNameResponse({}));
  }

  /**
   * Queries the ID of an asset group by using the name of the asset group.
   * 
   * @remarks
   * You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
   * ### Limits
   * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
   * 
   * @param request - QueryGroupIdByGroupNameRequest
   * @returns QueryGroupIdByGroupNameResponse
   */
  async queryGroupIdByGroupName(request: $_model.QueryGroupIdByGroupNameRequest): Promise<$_model.QueryGroupIdByGroupNameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryGroupIdByGroupNameWithOptions(request, runtime);
  }

  /**
   * Queries whitelist rules.
   * 
   * @param request - QueryGroupedSecurityEventMarkMissListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryGroupedSecurityEventMarkMissListResponse
   */
  async queryGroupedSecurityEventMarkMissListWithOptions(request: $_model.QueryGroupedSecurityEventMarkMissListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.QueryGroupedSecurityEventMarkMissListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.disposalWay)) {
      query["DisposalWay"] = request.disposalWay;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.currentPage)) {
      body["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.eventName)) {
      body["EventName"] = request.eventName;
    }

    if (!$dara.isNull(request.from)) {
      body["From"] = request.from;
    }

    if (!$dara.isNull(request.lang)) {
      body["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.remark)) {
      body["Remark"] = request.remark;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryGroupedSecurityEventMarkMissList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.QueryGroupedSecurityEventMarkMissListResponse>(await this.callApi(params, req, runtime), new $_model.QueryGroupedSecurityEventMarkMissListResponse({}));
  }

  /**
   * Queries whitelist rules.
   * 
   * @param request - QueryGroupedSecurityEventMarkMissListRequest
   * @returns QueryGroupedSecurityEventMarkMissListResponse
   */
  async queryGroupedSecurityEventMarkMissList(request: $_model.QueryGroupedSecurityEventMarkMissListRequest): Promise<$_model.QueryGroupedSecurityEventMarkMissListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryGroupedSecurityEventMarkMissListWithOptions(request, runtime);
  }

  /**
   * Queries the list of beginner tasks. Security Center provides rewards for users who complete tasks. The rewards include the quota for a value-added feature and log storage capacity.
   * 
   * @param request - QueryGuidTaskListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryGuidTaskListResponse
   */
  async queryGuidTaskListWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.QueryGuidTaskListResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "QueryGuidTaskList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.QueryGuidTaskListResponse>(await this.callApi(params, req, runtime), new $_model.QueryGuidTaskListResponse({}));
  }

  /**
   * Queries the list of beginner tasks. Security Center provides rewards for users who complete tasks. The rewards include the quota for a value-added feature and log storage capacity.
   * @returns QueryGuidTaskListResponse
   */
  async queryGuidTaskList(): Promise<$_model.QueryGuidTaskListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryGuidTaskListWithOptions(runtime);
  }

  /**
   * Queries the retention period of images that are stored in a Jenkins image repository.
   * 
   * @param request - QueryJenkinsImageRegistryPersistenceDayRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryJenkinsImageRegistryPersistenceDayResponse
   */
  async queryJenkinsImageRegistryPersistenceDayWithOptions(request: $_model.QueryJenkinsImageRegistryPersistenceDayRequest, runtime: $dara.RuntimeOptions): Promise<$_model.QueryJenkinsImageRegistryPersistenceDayResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryJenkinsImageRegistryPersistenceDay",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.QueryJenkinsImageRegistryPersistenceDayResponse>(await this.callApi(params, req, runtime), new $_model.QueryJenkinsImageRegistryPersistenceDayResponse({}));
  }

  /**
   * Queries the retention period of images that are stored in a Jenkins image repository.
   * 
   * @param request - QueryJenkinsImageRegistryPersistenceDayRequest
   * @returns QueryJenkinsImageRegistryPersistenceDayResponse
   */
  async queryJenkinsImageRegistryPersistenceDay(request: $_model.QueryJenkinsImageRegistryPersistenceDayRequest): Promise<$_model.QueryJenkinsImageRegistryPersistenceDayResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryJenkinsImageRegistryPersistenceDayWithOptions(request, runtime);
  }

  /**
   * Queries the result of a database precheck task.
   * 
   * @param request - QueryPreCheckDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryPreCheckDatabaseResponse
   */
  async queryPreCheckDatabaseWithOptions(request: $_model.QueryPreCheckDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<$_model.QueryPreCheckDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceUuid)) {
      query["InstanceUuid"] = request.instanceUuid;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.uniRegionId)) {
      query["UniRegionId"] = request.uniRegionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryPreCheckDatabase",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.QueryPreCheckDatabaseResponse>(await this.callApi(params, req, runtime), new $_model.QueryPreCheckDatabaseResponse({}));
  }

  /**
   * Queries the result of a database precheck task.
   * 
   * @param request - QueryPreCheckDatabaseRequest
   * @returns QueryPreCheckDatabaseResponse
   */
  async queryPreCheckDatabase(request: $_model.QueryPreCheckDatabaseRequest): Promise<$_model.QueryPreCheckDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryPreCheckDatabaseWithOptions(request, runtime);
  }

  /**
   * Restarts a server. Only Windows servers are supported.
   * 
   * @param request - RebootMachineRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RebootMachineResponse
   */
  async rebootMachineWithOptions(request: $_model.RebootMachineRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RebootMachineResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RebootMachine",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RebootMachineResponse>(await this.callApi(params, req, runtime), new $_model.RebootMachineResponse({}));
  }

  /**
   * Restarts a server. Only Windows servers are supported.
   * 
   * @param request - RebootMachineRequest
   * @returns RebootMachineResponse
   */
  async rebootMachine(request: $_model.RebootMachineRequest): Promise<$_model.RebootMachineResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.rebootMachineWithOptions(request, runtime);
  }

  /**
   * Receives a reward that allows you to enable a free trial of the cloud honeypot feature or the feature of SDK for malicious file detection. You can receive a reward after you complete the required task.
   * 
   * @param request - ReceiveFunctionTrialRewardByAliUidRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ReceiveFunctionTrialRewardByAliUidResponse
   */
  async receiveFunctionTrialRewardByAliUidWithOptions(request: $_model.ReceiveFunctionTrialRewardByAliUidRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ReceiveFunctionTrialRewardByAliUidResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.functionName)) {
      query["FunctionName"] = request.functionName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ReceiveFunctionTrialRewardByAliUid",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ReceiveFunctionTrialRewardByAliUidResponse>(await this.callApi(params, req, runtime), new $_model.ReceiveFunctionTrialRewardByAliUidResponse({}));
  }

  /**
   * Receives a reward that allows you to enable a free trial of the cloud honeypot feature or the feature of SDK for malicious file detection. You can receive a reward after you complete the required task.
   * 
   * @param request - ReceiveFunctionTrialRewardByAliUidRequest
   * @returns ReceiveFunctionTrialRewardByAliUidResponse
   */
  async receiveFunctionTrialRewardByAliUid(request: $_model.ReceiveFunctionTrialRewardByAliUidRequest): Promise<$_model.ReceiveFunctionTrialRewardByAliUidResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.receiveFunctionTrialRewardByAliUidWithOptions(request, runtime);
  }

  /**
   * Synchronizes assets.
   * 
   * @param request - RefreshAssetsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RefreshAssetsResponse
   */
  async refreshAssetsWithOptions(request: $_model.RefreshAssetsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RefreshAssetsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.assetType)) {
      query["AssetType"] = request.assetType;
    }

    if (!$dara.isNull(request.cloudAssetSubType)) {
      query["CloudAssetSubType"] = request.cloudAssetSubType;
    }

    if (!$dara.isNull(request.cloudAssetType)) {
      query["CloudAssetType"] = request.cloudAssetType;
    }

    if (!$dara.isNull(request.vendor)) {
      query["Vendor"] = request.vendor;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RefreshAssets",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RefreshAssetsResponse>(await this.callApi(params, req, runtime), new $_model.RefreshAssetsResponse({}));
  }

  /**
   * Synchronizes assets.
   * 
   * @param request - RefreshAssetsRequest
   * @returns RefreshAssetsResponse
   */
  async refreshAssets(request: $_model.RefreshAssetsRequest): Promise<$_model.RefreshAssetsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.refreshAssetsWithOptions(request, runtime);
  }

  /**
   * Refreshes the statistics of container assets in the Assets module.
   * 
   * @param request - RefreshContainerAssetsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RefreshContainerAssetsResponse
   */
  async refreshContainerAssetsWithOptions(request: $_model.RefreshContainerAssetsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RefreshContainerAssetsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.assetType)) {
      query["AssetType"] = request.assetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RefreshContainerAssets",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RefreshContainerAssetsResponse>(await this.callApi(params, req, runtime), new $_model.RefreshContainerAssetsResponse({}));
  }

  /**
   * Refreshes the statistics of container assets in the Assets module.
   * 
   * @param request - RefreshContainerAssetsRequest
   * @returns RefreshContainerAssetsResponse
   */
  async refreshContainerAssets(request: $_model.RefreshContainerAssetsRequest): Promise<$_model.RefreshContainerAssetsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.refreshContainerAssetsWithOptions(request, runtime);
  }

  /**
   * Refreshes the list of Object Storage Service (OSS) buckets.
   * 
   * @param request - RefreshOssBucketScanInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RefreshOssBucketScanInfoResponse
   */
  async refreshOssBucketScanInfoWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.RefreshOssBucketScanInfoResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "RefreshOssBucketScanInfo",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RefreshOssBucketScanInfoResponse>(await this.callApi(params, req, runtime), new $_model.RefreshOssBucketScanInfoResponse({}));
  }

  /**
   * Refreshes the list of Object Storage Service (OSS) buckets.
   * @returns RefreshOssBucketScanInfoResponse
   */
  async refreshOssBucketScanInfo(): Promise<$_model.RefreshOssBucketScanInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.refreshOssBucketScanInfoWithOptions(runtime);
  }

  /**
   * Updates an image token.
   * 
   * @param request - RefreshRegistryTokenRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RefreshRegistryTokenResponse
   */
  async refreshRegistryTokenWithOptions(request: $_model.RefreshRegistryTokenRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RefreshRegistryTokenResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.registryId)) {
      query["RegistryId"] = request.registryId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RefreshRegistryToken",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RefreshRegistryTokenResponse>(await this.callApi(params, req, runtime), new $_model.RefreshRegistryTokenResponse({}));
  }

  /**
   * Updates an image token.
   * 
   * @param request - RefreshRegistryTokenRequest
   * @returns RefreshRegistryTokenResponse
   */
  async refreshRegistryToken(request: $_model.RefreshRegistryTokenRequest): Promise<$_model.RefreshRegistryTokenResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.refreshRegistryTokenWithOptions(request, runtime);
  }

  /**
   * 释放云安全中心实例
   * 
   * @param request - ReleaseSasInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ReleaseSasInstanceResponse
   */
  async releaseSasInstanceWithOptions(request: $_model.ReleaseSasInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ReleaseSasInstanceResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.chargeType)) {
      body["ChargeType"] = request.chargeType;
    }

    if (!$dara.isNull(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ReleaseSasInstance",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ReleaseSasInstanceResponse>(await this.callApi(params, req, runtime), new $_model.ReleaseSasInstanceResponse({}));
  }

  /**
   * 释放云安全中心实例
   * 
   * @param request - ReleaseSasInstanceRequest
   * @returns ReleaseSasInstanceResponse
   */
  async releaseSasInstance(request: $_model.ReleaseSasInstanceRequest): Promise<$_model.ReleaseSasInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.releaseSasInstanceWithOptions(request, runtime);
  }

  /**
   * Removes an instance from the whitelist.
   * 
   * @param request - RemoveCheckInstanceResultWhiteListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RemoveCheckInstanceResultWhiteListResponse
   */
  async removeCheckInstanceResultWhiteListWithOptions(request: $_model.RemoveCheckInstanceResultWhiteListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RemoveCheckInstanceResultWhiteListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RemoveCheckInstanceResultWhiteList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RemoveCheckInstanceResultWhiteListResponse>(await this.callApi(params, req, runtime), new $_model.RemoveCheckInstanceResultWhiteListResponse({}));
  }

  /**
   * Removes an instance from the whitelist.
   * 
   * @param request - RemoveCheckInstanceResultWhiteListRequest
   * @returns RemoveCheckInstanceResultWhiteListResponse
   */
  async removeCheckInstanceResultWhiteList(request: $_model.RemoveCheckInstanceResultWhiteListRequest): Promise<$_model.RemoveCheckInstanceResultWhiteListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.removeCheckInstanceResultWhiteListWithOptions(request, runtime);
  }

  /**
   * Removes the check items of the configuration assessment feature from the whitelist.
   * 
   * @param request - RemoveCheckResultWhiteListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RemoveCheckResultWhiteListResponse
   */
  async removeCheckResultWhiteListWithOptions(request: $_model.RemoveCheckResultWhiteListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RemoveCheckResultWhiteListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkGroupId)) {
      query["CheckGroupId"] = request.checkGroupId;
    }

    if (!$dara.isNull(request.checkIds)) {
      query["CheckIds"] = request.checkIds;
    }

    if (!$dara.isNull(request.ruleId)) {
      query["RuleId"] = request.ruleId;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RemoveCheckResultWhiteList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RemoveCheckResultWhiteListResponse>(await this.callApi(params, req, runtime), new $_model.RemoveCheckResultWhiteListResponse({}));
  }

  /**
   * Removes the check items of the configuration assessment feature from the whitelist.
   * 
   * @param request - RemoveCheckResultWhiteListRequest
   * @returns RemoveCheckResultWhiteListResponse
   */
  async removeCheckResultWhiteList(request: $_model.RemoveCheckResultWhiteListRequest): Promise<$_model.RemoveCheckResultWhiteListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.removeCheckResultWhiteListWithOptions(request, runtime);
  }

  /**
   * Resets a honeypot.
   * 
   * @param request - ResetHoneypotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ResetHoneypotResponse
   */
  async resetHoneypotWithOptions(request: $_model.ResetHoneypotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ResetHoneypotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.honeypotId)) {
      query["HoneypotId"] = request.honeypotId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ResetHoneypot",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ResetHoneypotResponse>(await this.callApi(params, req, runtime), new $_model.ResetHoneypotResponse({}));
  }

  /**
   * Resets a honeypot.
   * 
   * @param request - ResetHoneypotRequest
   * @returns ResetHoneypotResponse
   */
  async resetHoneypot(request: $_model.ResetHoneypotRequest): Promise<$_model.ResetHoneypotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.resetHoneypotWithOptions(request, runtime);
  }

  /**
   * Resets and upgrades the log analysis feature. You can call this operation only when the log analysis feature uses the pay-as-you-go billing method.
   * 
   * @param request - ResetLogShipperRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ResetLogShipperResponse
   */
  async resetLogShipperWithOptions(request: $_model.ResetLogShipperRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ResetLogShipperResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.hotTtl)) {
      query["HotTtl"] = request.hotTtl;
    }

    if (!$dara.isNull(request.logMetaList)) {
      query["LogMetaList"] = request.logMetaList;
    }

    if (!$dara.isNull(request.ttl)) {
      query["Ttl"] = request.ttl;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ResetLogShipper",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ResetLogShipperResponse>(await this.callApi(params, req, runtime), new $_model.ResetLogShipperResponse({}));
  }

  /**
   * Resets and upgrades the log analysis feature. You can call this operation only when the log analysis feature uses the pay-as-you-go billing method.
   * 
   * @param request - ResetLogShipperRequest
   * @returns ResetLogShipperResponse
   */
  async resetLogShipper(request: $_model.ResetLogShipperRequest): Promise<$_model.ResetLogShipperResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.resetLogShipperWithOptions(request, runtime);
  }

  /**
   * Retries agentless detection tasks.
   * 
   * @param request - RetryAgentlessTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RetryAgentlessTaskResponse
   */
  async retryAgentlessTaskWithOptions(request: $_model.RetryAgentlessTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RetryAgentlessTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RetryAgentlessTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RetryAgentlessTaskResponse>(await this.callApi(params, req, runtime), new $_model.RetryAgentlessTaskResponse({}));
  }

  /**
   * Retries agentless detection tasks.
   * 
   * @param request - RetryAgentlessTaskRequest
   * @returns RetryAgentlessTaskResponse
   */
  async retryAgentlessTask(request: $_model.RetryAgentlessTaskRequest): Promise<$_model.RetryAgentlessTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.retryAgentlessTaskWithOptions(request, runtime);
  }

  /**
   * Retry installing the honeypot probe.
   * 
   * @param request - RetryInstallProbeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RetryInstallProbeResponse
   */
  async retryInstallProbeWithOptions(request: $_model.RetryInstallProbeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RetryInstallProbeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.probeId)) {
      query["ProbeId"] = request.probeId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RetryInstallProbe",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RetryInstallProbeResponse>(await this.callApi(params, req, runtime), new $_model.RetryInstallProbeResponse({}));
  }

  /**
   * Retry installing the honeypot probe.
   * 
   * @param request - RetryInstallProbeRequest
   * @returns RetryInstallProbeResponse
   */
  async retryInstallProbe(request: $_model.RetryInstallProbeRequest): Promise<$_model.RetryInstallProbeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.retryInstallProbeWithOptions(request, runtime);
  }

  /**
   * Restores a quarantined file.
   * 
   * @param request - RollbackSuspEventQuaraFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RollbackSuspEventQuaraFileResponse
   */
  async rollbackSuspEventQuaraFileWithOptions(request: $_model.RollbackSuspEventQuaraFileRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RollbackSuspEventQuaraFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.quaraFileId)) {
      query["QuaraFileId"] = request.quaraFileId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RollbackSuspEventQuaraFile",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RollbackSuspEventQuaraFileResponse>(await this.callApi(params, req, runtime), new $_model.RollbackSuspEventQuaraFileResponse({}));
  }

  /**
   * Restores a quarantined file.
   * 
   * @param request - RollbackSuspEventQuaraFileRequest
   * @returns RollbackSuspEventQuaraFileResponse
   */
  async rollbackSuspEventQuaraFile(request: $_model.RollbackSuspEventQuaraFileRequest): Promise<$_model.RollbackSuspEventQuaraFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.rollbackSuspEventQuaraFileWithOptions(request, runtime);
  }

  /**
   * Queries the installation verification code that is used to run the installation command of the Security Center agent.
   * 
   * @param request - SasInstallCodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SasInstallCodeResponse
   */
  async sasInstallCodeWithOptions(request: $_model.SasInstallCodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SasInstallCodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SasInstallCode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SasInstallCodeResponse>(await this.callApi(params, req, runtime), new $_model.SasInstallCodeResponse({}));
  }

  /**
   * Queries the installation verification code that is used to run the installation command of the Security Center agent.
   * 
   * @param request - SasInstallCodeRequest
   * @returns SasInstallCodeResponse
   */
  async sasInstallCode(request: $_model.SasInstallCodeRequest): Promise<$_model.SasInstallCodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.sasInstallCodeWithOptions(request, runtime);
  }

  /**
   * Saves the configurations of a custom security report.
   * 
   * @param request - SaveCustomizeReportConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SaveCustomizeReportConfigResponse
   */
  async saveCustomizeReportConfigWithOptions(request: $_model.SaveCustomizeReportConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SaveCustomizeReportConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.groupType)) {
      query["GroupType"] = request.groupType;
    }

    if (!$dara.isNull(request.memberAccountSyncFlag)) {
      query["MemberAccountSyncFlag"] = request.memberAccountSyncFlag;
    }

    if (!$dara.isNull(request.pinnedTime)) {
      query["PinnedTime"] = request.pinnedTime;
    }

    if (!$dara.isNull(request.recipients)) {
      query["Recipients"] = request.recipients;
    }

    if (!$dara.isNull(request.reportDays)) {
      query["ReportDays"] = request.reportDays;
    }

    if (!$dara.isNull(request.reportEndDate)) {
      query["ReportEndDate"] = request.reportEndDate;
    }

    if (!$dara.isNull(request.reportId)) {
      query["ReportId"] = request.reportId;
    }

    if (!$dara.isNull(request.reportLang)) {
      query["ReportLang"] = request.reportLang;
    }

    if (!$dara.isNull(request.reportSendType)) {
      query["ReportSendType"] = request.reportSendType;
    }

    if (!$dara.isNull(request.reportStartDate)) {
      query["ReportStartDate"] = request.reportStartDate;
    }

    if (!$dara.isNull(request.reportStatus)) {
      query["ReportStatus"] = request.reportStatus;
    }

    if (!$dara.isNull(request.reportType)) {
      query["ReportType"] = request.reportType;
    }

    if (!$dara.isNull(request.reportVersion)) {
      query["ReportVersion"] = request.reportVersion;
    }

    if (!$dara.isNull(request.sendEndTime)) {
      query["SendEndTime"] = request.sendEndTime;
    }

    if (!$dara.isNull(request.sendPeriodDays)) {
      query["SendPeriodDays"] = request.sendPeriodDays;
    }

    if (!$dara.isNull(request.sendPeriodType)) {
      query["SendPeriodType"] = request.sendPeriodType;
    }

    if (!$dara.isNull(request.sendStartTime)) {
      query["SendStartTime"] = request.sendStartTime;
    }

    if (!$dara.isNull(request.targetGroups)) {
      query["TargetGroups"] = request.targetGroups;
    }

    if (!$dara.isNull(request.targetUids)) {
      query["TargetUids"] = request.targetUids;
    }

    if (!$dara.isNull(request.title)) {
      query["Title"] = request.title;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SaveCustomizeReportConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SaveCustomizeReportConfigResponse>(await this.callApi(params, req, runtime), new $_model.SaveCustomizeReportConfigResponse({}));
  }

  /**
   * Saves the configurations of a custom security report.
   * 
   * @param request - SaveCustomizeReportConfigRequest
   * @returns SaveCustomizeReportConfigResponse
   */
  async saveCustomizeReportConfig(request: $_model.SaveCustomizeReportConfigRequest): Promise<$_model.SaveCustomizeReportConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.saveCustomizeReportConfigWithOptions(request, runtime);
  }

  /**
   * Saves a baseline check policy for images.
   * 
   * @param request - SaveImageBaselineStrategyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SaveImageBaselineStrategyResponse
   */
  async saveImageBaselineStrategyWithOptions(request: $_model.SaveImageBaselineStrategyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SaveImageBaselineStrategyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.baselineItemList)) {
      query["BaselineItemList"] = request.baselineItemList;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    if (!$dara.isNull(request.strategyName)) {
      query["StrategyName"] = request.strategyName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SaveImageBaselineStrategy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SaveImageBaselineStrategyResponse>(await this.callApi(params, req, runtime), new $_model.SaveImageBaselineStrategyResponse({}));
  }

  /**
   * Saves a baseline check policy for images.
   * 
   * @param request - SaveImageBaselineStrategyRequest
   * @returns SaveImageBaselineStrategyResponse
   */
  async saveImageBaselineStrategy(request: $_model.SaveImageBaselineStrategyRequest): Promise<$_model.SaveImageBaselineStrategyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.saveImageBaselineStrategyWithOptions(request, runtime);
  }

  /**
   * Saves alert settings.
   * 
   * @param request - SaveSuspEventUserSettingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SaveSuspEventUserSettingResponse
   */
  async saveSuspEventUserSettingWithOptions(request: $_model.SaveSuspEventUserSettingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SaveSuspEventUserSettingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.levelsOn)) {
      query["LevelsOn"] = request.levelsOn;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SaveSuspEventUserSetting",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SaveSuspEventUserSettingResponse>(await this.callApi(params, req, runtime), new $_model.SaveSuspEventUserSettingResponse({}));
  }

  /**
   * Saves alert settings.
   * 
   * @param request - SaveSuspEventUserSettingRequest
   * @returns SaveSuspEventUserSettingResponse
   */
  async saveSuspEventUserSetting(request: $_model.SaveSuspEventUserSettingRequest): Promise<$_model.SaveSuspEventUserSettingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.saveSuspEventUserSettingWithOptions(request, runtime);
  }

  /**
   * Creates an application whitelist policy.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or enabled the feature, you can call this operation.
   * 
   * @param request - SaveWhiteListStrategyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SaveWhiteListStrategyResponse
   */
  async saveWhiteListStrategyWithOptions(request: $_model.SaveWhiteListStrategyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SaveWhiteListStrategyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    if (!$dara.isNull(request.strategyName)) {
      query["StrategyName"] = request.strategyName;
    }

    if (!$dara.isNull(request.studyTime)) {
      query["StudyTime"] = request.studyTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SaveWhiteListStrategy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SaveWhiteListStrategyResponse>(await this.callApi(params, req, runtime), new $_model.SaveWhiteListStrategyResponse({}));
  }

  /**
   * Creates an application whitelist policy.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or enabled the feature, you can call this operation.
   * 
   * @param request - SaveWhiteListStrategyRequest
   * @returns SaveWhiteListStrategyResponse
   */
  async saveWhiteListStrategy(request: $_model.SaveWhiteListStrategyRequest): Promise<$_model.SaveWhiteListStrategyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.saveWhiteListStrategyWithOptions(request, runtime);
  }

  /**
   * Manages the servers to which an application whitelist policy is applied.
   * 
   * @param request - SaveWhiteListStrategyAssetsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SaveWhiteListStrategyAssetsResponse
   */
  async saveWhiteListStrategyAssetsWithOptions(request: $_model.SaveWhiteListStrategyAssetsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SaveWhiteListStrategyAssetsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.operations)) {
      query["Operations"] = request.operations;
    }

    if (!$dara.isNull(request.relationType)) {
      query["RelationType"] = request.relationType;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SaveWhiteListStrategyAssets",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SaveWhiteListStrategyAssetsResponse>(await this.callApi(params, req, runtime), new $_model.SaveWhiteListStrategyAssetsResponse({}));
  }

  /**
   * Manages the servers to which an application whitelist policy is applied.
   * 
   * @param request - SaveWhiteListStrategyAssetsRequest
   * @returns SaveWhiteListStrategyAssetsResponse
   */
  async saveWhiteListStrategyAssets(request: $_model.SaveWhiteListStrategyAssetsRequest): Promise<$_model.SaveWhiteListStrategyAssetsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.saveWhiteListStrategyAssetsWithOptions(request, runtime);
  }

  /**
   * Sends a security report to an email address that you specify. You can send only a security report whose statistics are collected in a custom time range.
   * 
   * @param request - SendCustomizeReportRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SendCustomizeReportResponse
   */
  async sendCustomizeReportWithOptions(request: $_model.SendCustomizeReportRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SendCustomizeReportResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.reportId)) {
      query["ReportId"] = request.reportId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SendCustomizeReport",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SendCustomizeReportResponse>(await this.callApi(params, req, runtime), new $_model.SendCustomizeReportResponse({}));
  }

  /**
   * Sends a security report to an email address that you specify. You can send only a security report whose statistics are collected in a custom time range.
   * 
   * @param request - SendCustomizeReportRequest
   * @returns SendCustomizeReportResponse
   */
  async sendCustomizeReport(request: $_model.SendCustomizeReportRequest): Promise<$_model.SendCustomizeReportResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.sendCustomizeReportWithOptions(request, runtime);
  }

  /**
   * Modifies configurations for scanning image build command risks.
   * 
   * @param request - SetBuildRiskDefineRuleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetBuildRiskDefineRuleConfigResponse
   */
  async setBuildRiskDefineRuleConfigWithOptions(request: $_model.SetBuildRiskDefineRuleConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetBuildRiskDefineRuleConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetBuildRiskDefineRuleConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetBuildRiskDefineRuleConfigResponse>(await this.callApi(params, req, runtime), new $_model.SetBuildRiskDefineRuleConfigResponse({}));
  }

  /**
   * Modifies configurations for scanning image build command risks.
   * 
   * @param request - SetBuildRiskDefineRuleConfigRequest
   * @returns SetBuildRiskDefineRuleConfigResponse
   */
  async setBuildRiskDefineRuleConfig(request: $_model.SetBuildRiskDefineRuleConfigRequest): Promise<$_model.SetBuildRiskDefineRuleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setBuildRiskDefineRuleConfigWithOptions(request, runtime);
  }

  /**
   * Configures the status of the container firewall feature.
   * 
   * @param request - SetClusterInterceptionConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetClusterInterceptionConfigResponse
   */
  async setClusterInterceptionConfigWithOptions(request: $_model.SetClusterInterceptionConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetClusterInterceptionConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterIds)) {
      query["ClusterIds"] = request.clusterIds;
    }

    if (!$dara.isNull(request.switchOn)) {
      query["SwitchOn"] = request.switchOn;
    }

    if (!$dara.isNull(request.switchType)) {
      query["SwitchType"] = request.switchType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetClusterInterceptionConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetClusterInterceptionConfigResponse>(await this.callApi(params, req, runtime), new $_model.SetClusterInterceptionConfigResponse({}));
  }

  /**
   * Configures the status of the container firewall feature.
   * 
   * @param request - SetClusterInterceptionConfigRequest
   * @returns SetClusterInterceptionConfigResponse
   */
  async setClusterInterceptionConfig(request: $_model.SetClusterInterceptionConfigRequest): Promise<$_model.SetClusterInterceptionConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setClusterInterceptionConfigWithOptions(request, runtime);
  }

  /**
   * Specifies the status of an image build command risk.
   * 
   * @param request - SetImageBuildRiskStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetImageBuildRiskStatusResponse
   */
  async setImageBuildRiskStatusWithOptions(request: $_model.SetImageBuildRiskStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetImageBuildRiskStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.imageUuids)) {
      query["ImageUuids"] = request.imageUuids;
    }

    if (!$dara.isNull(request.riskKey)) {
      query["RiskKey"] = request.riskKey;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetImageBuildRiskStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetImageBuildRiskStatusResponse>(await this.callApi(params, req, runtime), new $_model.SetImageBuildRiskStatusResponse({}));
  }

  /**
   * Specifies the status of an image build command risk.
   * 
   * @param request - SetImageBuildRiskStatusRequest
   * @returns SetImageBuildRiskStatusResponse
   */
  async setImageBuildRiskStatus(request: $_model.SetImageBuildRiskStatusRequest): Promise<$_model.SetImageBuildRiskStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setImageBuildRiskStatusWithOptions(request, runtime);
  }

  /**
   * Modifies the status of sensitive files in an image.
   * 
   * @param tmpReq - SetImageSensitiveFileStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetImageSensitiveFileStatusResponse
   */
  async setImageSensitiveFileStatusWithOptions(tmpReq: $_model.SetImageSensitiveFileStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetImageSensitiveFileStatusResponse> {
    tmpReq.validate();
    let request = new $_model.SetImageSensitiveFileStatusShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.scanRange)) {
      request.scanRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, "ScanRange", "json");
    }

    let query = { };
    if (!$dara.isNull(request.idList)) {
      query["IdList"] = request.idList;
    }

    if (!$dara.isNull(request.imageUuids)) {
      query["ImageUuids"] = request.imageUuids;
    }

    if (!$dara.isNull(request.scanRangeShrink)) {
      query["ScanRange"] = request.scanRangeShrink;
    }

    if (!$dara.isNull(request.sensitiveFileKey)) {
      query["SensitiveFileKey"] = request.sensitiveFileKey;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetImageSensitiveFileStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetImageSensitiveFileStatusResponse>(await this.callApi(params, req, runtime), new $_model.SetImageSensitiveFileStatusResponse({}));
  }

  /**
   * Modifies the status of sensitive files in an image.
   * 
   * @param request - SetImageSensitiveFileStatusRequest
   * @returns SetImageSensitiveFileStatusResponse
   */
  async setImageSensitiveFileStatus(request: $_model.SetImageSensitiveFileStatusRequest): Promise<$_model.SetImageSensitiveFileStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setImageSensitiveFileStatusWithOptions(request, runtime);
  }

  /**
   * Specifies a cycle to scan images for image repositories. Unit: days.
   * 
   * @param request - SetRegistryScanDayNumRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetRegistryScanDayNumResponse
   */
  async setRegistryScanDayNumWithOptions(request: $_model.SetRegistryScanDayNumRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetRegistryScanDayNumResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.scanDayNum)) {
      query["ScanDayNum"] = request.scanDayNum;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetRegistryScanDayNum",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetRegistryScanDayNumResponse>(await this.callApi(params, req, runtime), new $_model.SetRegistryScanDayNumResponse({}));
  }

  /**
   * Specifies a cycle to scan images for image repositories. Unit: days.
   * 
   * @param request - SetRegistryScanDayNumRequest
   * @returns SetRegistryScanDayNumResponse
   */
  async setRegistryScanDayNum(request: $_model.SetRegistryScanDayNumRequest): Promise<$_model.SetRegistryScanDayNumResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setRegistryScanDayNumWithOptions(request, runtime);
  }

  /**
   * Configure the check rules of sensitive files.
   * 
   * @param request - SetSensitiveDefineRuleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetSensitiveDefineRuleConfigResponse
   */
  async setSensitiveDefineRuleConfigWithOptions(request: $_model.SetSensitiveDefineRuleConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetSensitiveDefineRuleConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.config)) {
      query["Config"] = request.config;
    }

    if (!$dara.isNull(request.enableNewRule)) {
      query["EnableNewRule"] = request.enableNewRule;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetSensitiveDefineRuleConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetSensitiveDefineRuleConfigResponse>(await this.callApi(params, req, runtime), new $_model.SetSensitiveDefineRuleConfigResponse({}));
  }

  /**
   * Configure the check rules of sensitive files.
   * 
   * @param request - SetSensitiveDefineRuleConfigRequest
   * @returns SetSensitiveDefineRuleConfigResponse
   */
  async setSensitiveDefineRuleConfig(request: $_model.SetSensitiveDefineRuleConfigRequest): Promise<$_model.SetSensitiveDefineRuleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setSensitiveDefineRuleConfigWithOptions(request, runtime);
  }

  /**
   * Configures the regions from which you want to synchronize assets.
   * 
   * @param request - SetSyncRefreshRegionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SetSyncRefreshRegionResponse
   */
  async setSyncRefreshRegionWithOptions(request: $_model.SetSyncRefreshRegionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SetSyncRefreshRegionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.defaultRegion)) {
      query["DefaultRegion"] = request.defaultRegion;
    }

    if (!$dara.isNull(request.regionIds)) {
      query["RegionIds"] = request.regionIds;
    }

    if (!$dara.isNull(request.vendor)) {
      query["Vendor"] = request.vendor;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SetSyncRefreshRegion",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SetSyncRefreshRegionResponse>(await this.callApi(params, req, runtime), new $_model.SetSyncRefreshRegionResponse({}));
  }

  /**
   * Configures the regions from which you want to synchronize assets.
   * 
   * @param request - SetSyncRefreshRegionRequest
   * @returns SetSyncRefreshRegionResponse
   */
  async setSyncRefreshRegion(request: $_model.SetSyncRefreshRegionRequest): Promise<$_model.SetSyncRefreshRegionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.setSyncRefreshRegionWithOptions(request, runtime);
  }

  /**
   * Checks cloud service configurations. You can check all items or a single item and verify whether an item is checked.
   * 
   * @deprecated OpenAPI StartBaselineSecurityCheck is deprecated, please use Sas::2018-12-03::SubmitCheck instead.
   * 
   * @param request - StartBaselineSecurityCheckRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartBaselineSecurityCheckResponse
   */
  async startBaselineSecurityCheckWithOptions(request: $_model.StartBaselineSecurityCheckRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartBaselineSecurityCheckResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.itemIds)) {
      query["ItemIds"] = request.itemIds;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartBaselineSecurityCheck",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartBaselineSecurityCheckResponse>(await this.callApi(params, req, runtime), new $_model.StartBaselineSecurityCheckResponse({}));
  }

  /**
   * Checks cloud service configurations. You can check all items or a single item and verify whether an item is checked.
   * 
   * @deprecated OpenAPI StartBaselineSecurityCheck is deprecated, please use Sas::2018-12-03::SubmitCheck instead.
   * 
   * @param request - StartBaselineSecurityCheckRequest
   * @returns StartBaselineSecurityCheckResponse
   */
  // Deprecated
  async startBaselineSecurityCheck(request: $_model.StartBaselineSecurityCheckRequest): Promise<$_model.StartBaselineSecurityCheckResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startBaselineSecurityCheckWithOptions(request, runtime);
  }

  /**
   * Starts a database scan task.
   * 
   * @param request - StartDiscoverDatabaseTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartDiscoverDatabaseTaskResponse
   */
  async startDiscoverDatabaseTaskWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.StartDiscoverDatabaseTaskResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "StartDiscoverDatabaseTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartDiscoverDatabaseTaskResponse>(await this.callApi(params, req, runtime), new $_model.StartDiscoverDatabaseTaskResponse({}));
  }

  /**
   * Starts a database scan task.
   * @returns StartDiscoverDatabaseTaskResponse
   */
  async startDiscoverDatabaseTask(): Promise<$_model.StartDiscoverDatabaseTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startDiscoverDatabaseTaskWithOptions(runtime);
  }

  /**
   * Starts a honeypot.
   * 
   * @param request - StartHoneypotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartHoneypotResponse
   */
  async startHoneypotWithOptions(request: $_model.StartHoneypotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartHoneypotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.honeypotId)) {
      query["HoneypotId"] = request.honeypotId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartHoneypot",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartHoneypotResponse>(await this.callApi(params, req, runtime), new $_model.StartHoneypotResponse({}));
  }

  /**
   * Starts a honeypot.
   * 
   * @param request - StartHoneypotRequest
   * @returns StartHoneypotResponse
   */
  async startHoneypot(request: $_model.StartHoneypotRequest): Promise<$_model.StartHoneypotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startHoneypotWithOptions(request, runtime);
  }

  /**
   * Starts an IDC scan task.
   * 
   * @param request - StartIdcProbeScanRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartIdcProbeScanResponse
   */
  async startIdcProbeScanWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.StartIdcProbeScanResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "StartIdcProbeScan",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartIdcProbeScanResponse>(await this.callApi(params, req, runtime), new $_model.StartIdcProbeScanResponse({}));
  }

  /**
   * Starts an IDC scan task.
   * @returns StartIdcProbeScanResponse
   */
  async startIdcProbeScan(): Promise<$_model.StartIdcProbeScanResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startIdcProbeScanWithOptions(runtime);
  }

  /**
   * Starts a database precheck task.
   * 
   * @param request - StartPreCheckDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartPreCheckDatabaseResponse
   */
  async startPreCheckDatabaseWithOptions(request: $_model.StartPreCheckDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartPreCheckDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.databaseType)) {
      query["DatabaseType"] = request.databaseType;
    }

    if (!$dara.isNull(request.instanceUuid)) {
      query["InstanceUuid"] = request.instanceUuid;
    }

    if (!$dara.isNull(request.uniRegionId)) {
      query["UniRegionId"] = request.uniRegionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartPreCheckDatabase",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartPreCheckDatabaseResponse>(await this.callApi(params, req, runtime), new $_model.StartPreCheckDatabaseResponse({}));
  }

  /**
   * Starts a database precheck task.
   * 
   * @param request - StartPreCheckDatabaseRequest
   * @returns StartPreCheckDatabaseResponse
   */
  async startPreCheckDatabase(request: $_model.StartPreCheckDatabaseRequest): Promise<$_model.StartPreCheckDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startPreCheckDatabaseWithOptions(request, runtime);
  }

  /**
   * Performs a virus scan task on a server or multiple servers.
   * 
   * @param request - StartVirusScanTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartVirusScanTaskResponse
   */
  async startVirusScanTaskWithOptions(request: $_model.StartVirusScanTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartVirusScanTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.targetInfo)) {
      query["TargetInfo"] = request.targetInfo;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartVirusScanTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartVirusScanTaskResponse>(await this.callApi(params, req, runtime), new $_model.StartVirusScanTaskResponse({}));
  }

  /**
   * Performs a virus scan task on a server or multiple servers.
   * 
   * @param request - StartVirusScanTaskRequest
   * @returns StartVirusScanTaskResponse
   */
  async startVirusScanTask(request: $_model.StartVirusScanTaskRequest): Promise<$_model.StartVirusScanTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startVirusScanTaskWithOptions(request, runtime);
  }

  /**
   * Stops a honeypot.
   * 
   * @param request - StopHoneypotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopHoneypotResponse
   */
  async stopHoneypotWithOptions(request: $_model.StopHoneypotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopHoneypotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.honeypotId)) {
      query["HoneypotId"] = request.honeypotId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopHoneypot",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopHoneypotResponse>(await this.callApi(params, req, runtime), new $_model.StopHoneypotResponse({}));
  }

  /**
   * Stops a honeypot.
   * 
   * @param request - StopHoneypotRequest
   * @returns StopHoneypotResponse
   */
  async stopHoneypot(request: $_model.StopHoneypotRequest): Promise<$_model.StopHoneypotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopHoneypotWithOptions(request, runtime);
  }

  /**
   * Submits a configuration assessment task.
   * 
   * @param request - SubmitCheckRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SubmitCheckResponse
   */
  async submitCheckWithOptions(request: $_model.SubmitCheckRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SubmitCheckResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.scanRange)) {
      query["ScanRange"] = request.scanRange;
    }

    if (!$dara.isNull(request.taskSource)) {
      query["TaskSource"] = request.taskSource;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SubmitCheck",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SubmitCheckResponse>(await this.callApi(params, req, runtime), new $_model.SubmitCheckResponse({}));
  }

  /**
   * Submits a configuration assessment task.
   * 
   * @param request - SubmitCheckRequest
   * @returns SubmitCheckResponse
   */
  async submitCheck(request: $_model.SubmitCheckRequest): Promise<$_model.SubmitCheckResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.submitCheckWithOptions(request, runtime);
  }

  /**
   * Submits a repair task of risk items detected in configuration assessment or rolls back a repair task that is executed.
   * 
   * @param request - SubmitOperationTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SubmitOperationTaskResponse
   */
  async submitOperationTaskWithOptions(request: $_model.SubmitOperationTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SubmitOperationTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.dimensionType)) {
      query["DimensionType"] = request.dimensionType;
    }

    if (!$dara.isNull(request.operationTaskInstances)) {
      query["OperationTaskInstances"] = request.operationTaskInstances;
    }

    if (!$dara.isNull(request.relationKey)) {
      query["RelationKey"] = request.relationKey;
    }

    if (!$dara.isNull(request.repairTempParam)) {
      query["RepairTempParam"] = request.repairTempParam;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SubmitOperationTask",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SubmitOperationTaskResponse>(await this.callApi(params, req, runtime), new $_model.SubmitOperationTaskResponse({}));
  }

  /**
   * Submits a repair task of risk items detected in configuration assessment or rolls back a repair task that is executed.
   * 
   * @param request - SubmitOperationTaskRequest
   * @returns SubmitOperationTaskResponse
   */
  async submitOperationTask(request: $_model.SubmitOperationTaskRequest): Promise<$_model.SubmitOperationTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.submitOperationTaskWithOptions(request, runtime);
  }

  /**
   * Submits a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).
   * 
   * @param request - SubmitTenantCheckRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SubmitTenantCheckResponse
   */
  async submitTenantCheckWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.SubmitTenantCheckResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "SubmitTenantCheck",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SubmitTenantCheckResponse>(await this.callApi(params, req, runtime), new $_model.SubmitTenantCheckResponse({}));
  }

  /**
   * Submits a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).
   * @returns SubmitTenantCheckResponse
   */
  async submitTenantCheck(): Promise<$_model.SubmitTenantCheckResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.submitTenantCheckWithOptions(runtime);
  }

  /**
   * Triggers ISO 27001 compliance checks of Security Center.
   * 
   * @param request - TriggerCheckRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TriggerCheckResponse
   */
  async triggerCheckWithOptions(runtime: $dara.RuntimeOptions): Promise<$_model.TriggerCheckResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "TriggerCheck",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.TriggerCheckResponse>(await this.callApi(params, req, runtime), new $_model.TriggerCheckResponse({}));
  }

  /**
   * Triggers ISO 27001 compliance checks of Security Center.
   * @returns TriggerCheckResponse
   */
  async triggerCheck(): Promise<$_model.TriggerCheckResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.triggerCheckWithOptions(runtime);
  }

  /**
   * Removes servers from a proxy cluster.
   * 
   * @param request - UnBindHybridProxyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UnBindHybridProxyResponse
   */
  async unBindHybridProxyWithOptions(request: $_model.UnBindHybridProxyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UnBindHybridProxyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.yundunUuids)) {
      query["YundunUuids"] = request.yundunUuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UnBindHybridProxy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UnBindHybridProxyResponse>(await this.callApi(params, req, runtime), new $_model.UnBindHybridProxyResponse({}));
  }

  /**
   * Removes servers from a proxy cluster.
   * 
   * @param request - UnBindHybridProxyRequest
   * @returns UnBindHybridProxyResponse
   */
  async unBindHybridProxy(request: $_model.UnBindHybridProxyRequest): Promise<$_model.UnBindHybridProxyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.unBindHybridProxyWithOptions(request, runtime);
  }

  /**
   * Cancel marking for members. You can call this operation to remove followed members from the list. In the Security Center console, the drop-down list above the left-side navigation pane no longer displays the members.
   * 
   * @param request - UnMarkMonitorAccountsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UnMarkMonitorAccountsResponse
   */
  async unMarkMonitorAccountsWithOptions(request: $_model.UnMarkMonitorAccountsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UnMarkMonitorAccountsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountIds)) {
      query["AccountIds"] = request.accountIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UnMarkMonitorAccounts",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UnMarkMonitorAccountsResponse>(await this.callApi(params, req, runtime), new $_model.UnMarkMonitorAccountsResponse({}));
  }

  /**
   * Cancel marking for members. You can call this operation to remove followed members from the list. In the Security Center console, the drop-down list above the left-side navigation pane no longer displays the members.
   * 
   * @param request - UnMarkMonitorAccountsRequest
   * @returns UnMarkMonitorAccountsResponse
   */
  async unMarkMonitorAccounts(request: $_model.UnMarkMonitorAccountsRequest): Promise<$_model.UnMarkMonitorAccountsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.unMarkMonitorAccountsWithOptions(request, runtime);
  }

  /**
   * Unbinds servers that are not deployed on Alibaba Cloud from Security Center.
   * 
   * @remarks
   * If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.
   * > You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
   * **Prerequisites**
   * *   The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the [PauseClient](~~PauseClient~~) operation to disable the agent.
   * *   The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see [Use the client protection feature](https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine).
   * 
   * @param request - UnbindAegisRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UnbindAegisResponse
   */
  async unbindAegisWithOptions(request: $_model.UnbindAegisRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UnbindAegisResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UnbindAegis",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UnbindAegisResponse>(await this.callApi(params, req, runtime), new $_model.UnbindAegisResponse({}));
  }

  /**
   * Unbinds servers that are not deployed on Alibaba Cloud from Security Center.
   * 
   * @remarks
   * If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.
   * > You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
   * **Prerequisites**
   * *   The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the [PauseClient](~~PauseClient~~) operation to disable the agent.
   * *   The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see [Use the client protection feature](https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine).
   * 
   * @param request - UnbindAegisRequest
   * @returns UnbindAegisResponse
   */
  async unbindAegis(request: $_model.UnbindAegisRequest): Promise<$_model.UnbindAegisResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.unbindAegisWithOptions(request, runtime);
  }

  /**
   * Uninstalls the anti-ransomware agent.
   * 
   * @param request - UninstallBackupClientRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UninstallBackupClientResponse
   */
  async uninstallBackupClientWithOptions(request: $_model.UninstallBackupClientRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UninstallBackupClientResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.policyVersion)) {
      query["PolicyVersion"] = request.policyVersion;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UninstallBackupClient",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UninstallBackupClientResponse>(await this.callApi(params, req, runtime), new $_model.UninstallBackupClientResponse({}));
  }

  /**
   * Uninstalls the anti-ransomware agent.
   * 
   * @param request - UninstallBackupClientRequest
   * @returns UninstallBackupClientResponse
   */
  async uninstallBackupClient(request: $_model.UninstallBackupClientRequest): Promise<$_model.UninstallBackupClientResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.uninstallBackupClientWithOptions(request, runtime);
  }

  /**
   * Uninstalls the database backup agent.
   * 
   * @param request - UninstallUniBackupAgentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UninstallUniBackupAgentResponse
   */
  async uninstallUniBackupAgentWithOptions(request: $_model.UninstallUniBackupAgentRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UninstallUniBackupAgentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.policyId)) {
      query["PolicyId"] = request.policyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UninstallUniBackupAgent",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UninstallUniBackupAgentResponse>(await this.callApi(params, req, runtime), new $_model.UninstallUniBackupAgentResponse({}));
  }

  /**
   * Uninstalls the database backup agent.
   * 
   * @param request - UninstallUniBackupAgentRequest
   * @returns UninstallUniBackupAgentResponse
   */
  async uninstallUniBackupAgent(request: $_model.UninstallUniBackupAgentRequest): Promise<$_model.UninstallUniBackupAgentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.uninstallUniBackupAgentWithOptions(request, runtime);
  }

  /**
   * Updates the status of the honeypot installation time.
   * 
   * @param request - UpdateAlarmEventRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateAlarmEventResponse
   */
  async updateAlarmEventWithOptions(request: $_model.UpdateAlarmEventRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateAlarmEventResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.alarmEventIdList)) {
      body["AlarmEventIdList"] = request.alarmEventIdList;
    }

    if (!$dara.isNull(request.lang)) {
      body["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.operationCode)) {
      body["OperationCode"] = request.operationCode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateAlarmEvent",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateAlarmEventResponse>(await this.callApi(params, req, runtime), new $_model.UpdateAlarmEventResponse({}));
  }

  /**
   * Updates the status of the honeypot installation time.
   * 
   * @param request - UpdateAlarmEventRequest
   * @returns UpdateAlarmEventResponse
   */
  async updateAlarmEvent(request: $_model.UpdateAlarmEventRequest): Promise<$_model.UpdateAlarmEventResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateAlarmEventWithOptions(request, runtime);
  }

  /**
   * Update the configuration of sensitive assets in the attack path.
   * 
   * @param request - UpdateAttackPathSensitiveAssetConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateAttackPathSensitiveAssetConfigResponse
   */
  async updateAttackPathSensitiveAssetConfigWithOptions(request: $_model.UpdateAttackPathSensitiveAssetConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateAttackPathSensitiveAssetConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.attackPathAssetList)) {
      query["AttackPathAssetList"] = request.attackPathAssetList;
    }

    if (!$dara.isNull(request.attackPathSensitiveAssetConfigId)) {
      query["AttackPathSensitiveAssetConfigId"] = request.attackPathSensitiveAssetConfigId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateAttackPathSensitiveAssetConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateAttackPathSensitiveAssetConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateAttackPathSensitiveAssetConfigResponse({}));
  }

  /**
   * Update the configuration of sensitive assets in the attack path.
   * 
   * @param request - UpdateAttackPathSensitiveAssetConfigRequest
   * @returns UpdateAttackPathSensitiveAssetConfigResponse
   */
  async updateAttackPathSensitiveAssetConfig(request: $_model.UpdateAttackPathSensitiveAssetConfigRequest): Promise<$_model.UpdateAttackPathSensitiveAssetConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateAttackPathSensitiveAssetConfigWithOptions(request, runtime);
  }

  /**
   * Update Attack Path Whitelist.
   * 
   * @param request - UpdateAttackPathWhitelistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateAttackPathWhitelistResponse
   */
  async updateAttackPathWhitelistWithOptions(request: $_model.UpdateAttackPathWhitelistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateAttackPathWhitelistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.attackPathAssetList)) {
      query["AttackPathAssetList"] = request.attackPathAssetList;
    }

    if (!$dara.isNull(request.attackPathWhitelistId)) {
      query["AttackPathWhitelistId"] = request.attackPathWhitelistId;
    }

    if (!$dara.isNull(request.pathName)) {
      query["PathName"] = request.pathName;
    }

    if (!$dara.isNull(request.pathType)) {
      query["PathType"] = request.pathType;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    if (!$dara.isNull(request.whitelistName)) {
      query["WhitelistName"] = request.whitelistName;
    }

    if (!$dara.isNull(request.whitelistType)) {
      query["WhitelistType"] = request.whitelistType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateAttackPathWhitelist",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateAttackPathWhitelistResponse>(await this.callApi(params, req, runtime), new $_model.UpdateAttackPathWhitelistResponse({}));
  }

  /**
   * Update Attack Path Whitelist.
   * 
   * @param request - UpdateAttackPathWhitelistRequest
   * @returns UpdateAttackPathWhitelistResponse
   */
  async updateAttackPathWhitelist(request: $_model.UpdateAttackPathWhitelistRequest): Promise<$_model.UpdateAttackPathWhitelistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateAttackPathWhitelistWithOptions(request, runtime);
  }

  /**
   * Updates the whitelist rule for a baseline check item.
   * 
   * @param request - UpdateBaselineCheckWhiteRecordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateBaselineCheckWhiteRecordResponse
   */
  async updateBaselineCheckWhiteRecordWithOptions(request: $_model.UpdateBaselineCheckWhiteRecordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateBaselineCheckWhiteRecordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.reason)) {
      query["Reason"] = request.reason;
    }

    if (!$dara.isNull(request.recordId)) {
      query["RecordId"] = request.recordId;
    }

    if (!$dara.isNull(request.removeContainerUuids)) {
      query["RemoveContainerUuids"] = request.removeContainerUuids;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateBaselineCheckWhiteRecord",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateBaselineCheckWhiteRecordResponse>(await this.callApi(params, req, runtime), new $_model.UpdateBaselineCheckWhiteRecordResponse({}));
  }

  /**
   * Updates the whitelist rule for a baseline check item.
   * 
   * @param request - UpdateBaselineCheckWhiteRecordRequest
   * @returns UpdateBaselineCheckWhiteRecordResponse
   */
  async updateBaselineCheckWhiteRecord(request: $_model.UpdateBaselineCheckWhiteRecordRequest): Promise<$_model.UpdateBaselineCheckWhiteRecordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateBaselineCheckWhiteRecordWithOptions(request, runtime);
  }

  /**
   * Modifies alerting settings for servers.
   * 
   * @param request - UpdateClientAlertModeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateClientAlertModeResponse
   */
  async updateClientAlertModeWithOptions(request: $_model.UpdateClientAlertModeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateClientAlertModeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.mode)) {
      query["Mode"] = request.mode;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateClientAlertMode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateClientAlertModeResponse>(await this.callApi(params, req, runtime), new $_model.UpdateClientAlertModeResponse({}));
  }

  /**
   * Modifies alerting settings for servers.
   * 
   * @param request - UpdateClientAlertModeRequest
   * @returns UpdateClientAlertModeResponse
   */
  async updateClientAlertMode(request: $_model.UpdateClientAlertModeRequest): Promise<$_model.UpdateClientAlertModeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateClientAlertModeWithOptions(request, runtime);
  }

  /**
   * Modifies the settings of common switches.
   * 
   * @param request - UpdateCommonSwitchConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateCommonSwitchConfigResponse
   */
  async updateCommonSwitchConfigWithOptions(request: $_model.UpdateCommonSwitchConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateCommonSwitchConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.targetDefault)) {
      query["TargetDefault"] = request.targetDefault;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateCommonSwitchConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateCommonSwitchConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateCommonSwitchConfigResponse({}));
  }

  /**
   * Modifies the settings of common switches.
   * 
   * @param request - UpdateCommonSwitchConfigRequest
   * @returns UpdateCommonSwitchConfigResponse
   */
  async updateCommonSwitchConfig(request: $_model.UpdateCommonSwitchConfigRequest): Promise<$_model.UpdateCommonSwitchConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateCommonSwitchConfigWithOptions(request, runtime);
  }

  /**
   * Changes the status of a security report.
   * 
   * @param request - UpdateCustomizeReportStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateCustomizeReportStatusResponse
   */
  async updateCustomizeReportStatusWithOptions(request: $_model.UpdateCustomizeReportStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateCustomizeReportStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pinnedTime)) {
      query["PinnedTime"] = request.pinnedTime;
    }

    if (!$dara.isNull(request.reportId)) {
      query["ReportId"] = request.reportId;
    }

    if (!$dara.isNull(request.reportStatus)) {
      query["ReportStatus"] = request.reportStatus;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateCustomizeReportStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateCustomizeReportStatusResponse>(await this.callApi(params, req, runtime), new $_model.UpdateCustomizeReportStatusResponse({}));
  }

  /**
   * Changes the status of a security report.
   * 
   * @param request - UpdateCustomizeReportStatusRequest
   * @returns UpdateCustomizeReportStatusResponse
   */
  async updateCustomizeReportStatus(request: $_model.UpdateCustomizeReportStatusRequest): Promise<$_model.UpdateCustomizeReportStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateCustomizeReportStatusWithOptions(request, runtime);
  }

  /**
   * Modifies the status of core file monitoring events reported by the Security Center agent.
   * 
   * @param request - UpdateFileProtectEventStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateFileProtectEventStatusResponse
   */
  async updateFileProtectEventStatusWithOptions(request: $_model.UpdateFileProtectEventStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateFileProtectEventStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateFileProtectEventStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateFileProtectEventStatusResponse>(await this.callApi(params, req, runtime), new $_model.UpdateFileProtectEventStatusResponse({}));
  }

  /**
   * Modifies the status of core file monitoring events reported by the Security Center agent.
   * 
   * @param request - UpdateFileProtectEventStatusRequest
   * @returns UpdateFileProtectEventStatusResponse
   */
  async updateFileProtectEventStatus(request: $_model.UpdateFileProtectEventStatusRequest): Promise<$_model.UpdateFileProtectEventStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateFileProtectEventStatusWithOptions(request, runtime);
  }

  /**
   * Adds remarks to core file monitoring events reported by the Security Center agent.
   * 
   * @param request - UpdateFileProtectRemarkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateFileProtectRemarkResponse
   */
  async updateFileProtectRemarkWithOptions(request: $_model.UpdateFileProtectRemarkRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateFileProtectRemarkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.remark)) {
      query["Remark"] = request.remark;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateFileProtectRemark",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateFileProtectRemarkResponse>(await this.callApi(params, req, runtime), new $_model.UpdateFileProtectRemarkResponse({}));
  }

  /**
   * Adds remarks to core file monitoring events reported by the Security Center agent.
   * 
   * @param request - UpdateFileProtectRemarkRequest
   * @returns UpdateFileProtectRemarkResponse
   */
  async updateFileProtectRemark(request: $_model.UpdateFileProtectRemarkRequest): Promise<$_model.UpdateFileProtectRemarkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateFileProtectRemarkWithOptions(request, runtime);
  }

  /**
   * Modifies the content of a core file monitoring rule based on the ID of the rule.
   * 
   * @param request - UpdateFileProtectRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateFileProtectRuleResponse
   */
  async updateFileProtectRuleWithOptions(request: $_model.UpdateFileProtectRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateFileProtectRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.alertLevel)) {
      query["AlertLevel"] = request.alertLevel;
    }

    if (!$dara.isNull(request.fileOps)) {
      query["FileOps"] = request.fileOps;
    }

    if (!$dara.isNull(request.filePaths)) {
      query["FilePaths"] = request.filePaths;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.procPaths)) {
      query["ProcPaths"] = request.procPaths;
    }

    if (!$dara.isNull(request.ruleAction)) {
      query["RuleAction"] = request.ruleAction;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateFileProtectRule",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateFileProtectRuleResponse>(await this.callApi(params, req, runtime), new $_model.UpdateFileProtectRuleResponse({}));
  }

  /**
   * Modifies the content of a core file monitoring rule based on the ID of the rule.
   * 
   * @param request - UpdateFileProtectRuleRequest
   * @returns UpdateFileProtectRuleResponse
   */
  async updateFileProtectRule(request: $_model.UpdateFileProtectRuleRequest): Promise<$_model.UpdateFileProtectRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateFileProtectRuleWithOptions(request, runtime);
  }

  /**
   * Modifies the queries per second (QPS) limit on the files uploaded from the client.
   * 
   * @param request - UpdateFileUploadLimitRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateFileUploadLimitResponse
   */
  async updateFileUploadLimitWithOptions(request: $_model.UpdateFileUploadLimitRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateFileUploadLimitResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.limit)) {
      query["Limit"] = request.limit;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateFileUploadLimit",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateFileUploadLimitResponse>(await this.callApi(params, req, runtime), new $_model.UpdateFileUploadLimitResponse({}));
  }

  /**
   * Modifies the queries per second (QPS) limit on the files uploaded from the client.
   * 
   * @param request - UpdateFileUploadLimitRequest
   * @returns UpdateFileUploadLimitResponse
   */
  async updateFileUploadLimit(request: $_model.UpdateFileUploadLimitRequest): Promise<$_model.UpdateFileUploadLimitResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateFileUploadLimitWithOptions(request, runtime);
  }

  /**
   * Modifies the configuration of a specified honeypot.
   * 
   * @param request - UpdateHoneypotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateHoneypotResponse
   */
  async updateHoneypotWithOptions(request: $_model.UpdateHoneypotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateHoneypotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.honeypotId)) {
      query["HoneypotId"] = request.honeypotId;
    }

    if (!$dara.isNull(request.honeypotName)) {
      query["HoneypotName"] = request.honeypotName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.meta)) {
      query["Meta"] = request.meta;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateHoneypot",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateHoneypotResponse>(await this.callApi(params, req, runtime), new $_model.UpdateHoneypotResponse({}));
  }

  /**
   * Modifies the configuration of a specified honeypot.
   * 
   * @param request - UpdateHoneypotRequest
   * @returns UpdateHoneypotResponse
   */
  async updateHoneypot(request: $_model.UpdateHoneypotRequest): Promise<$_model.UpdateHoneypotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateHoneypotWithOptions(request, runtime);
  }

  /**
   * Modifies the configuration of a specified management node.
   * 
   * @param request - UpdateHoneypotNodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateHoneypotNodeResponse
   */
  async updateHoneypotNodeWithOptions(request: $_model.UpdateHoneypotNodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateHoneypotNodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.availableProbeNum)) {
      query["AvailableProbeNum"] = request.availableProbeNum;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.nodeName)) {
      query["NodeName"] = request.nodeName;
    }

    if (!$dara.isNull(request.securityGroupProbeIpList)) {
      query["SecurityGroupProbeIpList"] = request.securityGroupProbeIpList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateHoneypotNode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateHoneypotNodeResponse>(await this.callApi(params, req, runtime), new $_model.UpdateHoneypotNodeResponse({}));
  }

  /**
   * Modifies the configuration of a specified management node.
   * 
   * @param request - UpdateHoneypotNodeRequest
   * @returns UpdateHoneypotNodeResponse
   */
  async updateHoneypotNode(request: $_model.UpdateHoneypotNodeRequest): Promise<$_model.UpdateHoneypotNodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateHoneypotNodeWithOptions(request, runtime);
  }

  /**
   * Modifies the configurations of the specified honeypot template.
   * 
   * @param request - UpdateHoneypotPresetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateHoneypotPresetResponse
   */
  async updateHoneypotPresetWithOptions(request: $_model.UpdateHoneypotPresetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateHoneypotPresetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.honeypotImageName)) {
      query["HoneypotImageName"] = request.honeypotImageName;
    }

    if (!$dara.isNull(request.honeypotPresetId)) {
      query["HoneypotPresetId"] = request.honeypotPresetId;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.meta)) {
      query["Meta"] = request.meta;
    }

    if (!$dara.isNull(request.presetName)) {
      query["PresetName"] = request.presetName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateHoneypotPreset",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateHoneypotPresetResponse>(await this.callApi(params, req, runtime), new $_model.UpdateHoneypotPresetResponse({}));
  }

  /**
   * Modifies the configurations of the specified honeypot template.
   * 
   * @param request - UpdateHoneypotPresetRequest
   * @returns UpdateHoneypotPresetResponse
   */
  async updateHoneypotPreset(request: $_model.UpdateHoneypotPresetRequest): Promise<$_model.UpdateHoneypotPresetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateHoneypotPresetWithOptions(request, runtime);
  }

  /**
   * Modifies the attributes of a specified probe.
   * 
   * @param request - UpdateHoneypotProbeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateHoneypotProbeResponse
   */
  async updateHoneypotProbeWithOptions(request: $_model.UpdateHoneypotProbeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateHoneypotProbeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.arp)) {
      query["Arp"] = request.arp;
    }

    if (!$dara.isNull(request.displayName)) {
      query["DisplayName"] = request.displayName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.ping)) {
      query["Ping"] = request.ping;
    }

    if (!$dara.isNull(request.probeId)) {
      query["ProbeId"] = request.probeId;
    }

    if (!$dara.isNull(request.serviceIpList)) {
      query["ServiceIpList"] = request.serviceIpList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateHoneypotProbe",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateHoneypotProbeResponse>(await this.callApi(params, req, runtime), new $_model.UpdateHoneypotProbeResponse({}));
  }

  /**
   * Modifies the attributes of a specified probe.
   * 
   * @param request - UpdateHoneypotProbeRequest
   * @returns UpdateHoneypotProbeResponse
   */
  async updateHoneypotProbe(request: $_model.UpdateHoneypotProbeRequest): Promise<$_model.UpdateHoneypotProbeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateHoneypotProbeWithOptions(request, runtime);
  }

  /**
   * Modifies a probe service.
   * 
   * @param request - UpdateHoneypotProbeBindRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateHoneypotProbeBindResponse
   */
  async updateHoneypotProbeBindWithOptions(request: $_model.UpdateHoneypotProbeBindRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateHoneypotProbeBindResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.bindId)) {
      query["BindId"] = request.bindId;
    }

    if (!$dara.isNull(request.bindPortList)) {
      query["BindPortList"] = request.bindPortList;
    }

    if (!$dara.isNull(request.bindType)) {
      query["BindType"] = request.bindType;
    }

    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.honeypotId)) {
      query["HoneypotId"] = request.honeypotId;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.ports)) {
      query["Ports"] = request.ports;
    }

    if (!$dara.isNull(request.probeId)) {
      query["ProbeId"] = request.probeId;
    }

    if (!$dara.isNull(request.serviceIpList)) {
      query["ServiceIpList"] = request.serviceIpList;
    }

    if (!$dara.isNull(request.setStatus)) {
      query["SetStatus"] = request.setStatus;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateHoneypotProbeBind",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateHoneypotProbeBindResponse>(await this.callApi(params, req, runtime), new $_model.UpdateHoneypotProbeBindResponse({}));
  }

  /**
   * Modifies a probe service.
   * 
   * @param request - UpdateHoneypotProbeBindRequest
   * @returns UpdateHoneypotProbeBindResponse
   */
  async updateHoneypotProbeBind(request: $_model.UpdateHoneypotProbeBindRequest): Promise<$_model.UpdateHoneypotProbeBindResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateHoneypotProbeBindWithOptions(request, runtime);
  }

  /**
   * Updates the Security Center agent that is installed on a proxy server in a hybrid cloud.
   * 
   * @param request - UpdateHybridProxyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateHybridProxyResponse
   */
  async updateHybridProxyWithOptions(request: $_model.UpdateHybridProxyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateHybridProxyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.proxyUuid)) {
      query["ProxyUuid"] = request.proxyUuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateHybridProxy",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateHybridProxyResponse>(await this.callApi(params, req, runtime), new $_model.UpdateHybridProxyResponse({}));
  }

  /**
   * Updates the Security Center agent that is installed on a proxy server in a hybrid cloud.
   * 
   * @param request - UpdateHybridProxyRequest
   * @returns UpdateHybridProxyResponse
   */
  async updateHybridProxy(request: $_model.UpdateHybridProxyRequest): Promise<$_model.UpdateHybridProxyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateHybridProxyWithOptions(request, runtime);
  }

  /**
   * Updates an alert handling rule.
   * 
   * @param request - UpdateImageEventOperationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateImageEventOperationResponse
   */
  async updateImageEventOperationWithOptions(request: $_model.UpdateImageEventOperationRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateImageEventOperationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.conditions)) {
      query["Conditions"] = request.conditions;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.note)) {
      query["Note"] = request.note;
    }

    if (!$dara.isNull(request.scenarios)) {
      query["Scenarios"] = request.scenarios;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateImageEventOperation",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateImageEventOperationResponse>(await this.callApi(params, req, runtime), new $_model.UpdateImageEventOperationResponse({}));
  }

  /**
   * Updates an alert handling rule.
   * 
   * @param request - UpdateImageEventOperationRequest
   * @returns UpdateImageEventOperationResponse
   */
  async updateImageEventOperation(request: $_model.UpdateImageEventOperationRequest): Promise<$_model.UpdateImageEventOperationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateImageEventOperationWithOptions(request, runtime);
  }

  /**
   * Updates the vulnerability whitelist of an image.
   * 
   * @param request - UpdateImageVulWhitelistTargetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateImageVulWhitelistTargetResponse
   */
  async updateImageVulWhitelistTargetWithOptions(request: $_model.UpdateImageVulWhitelistTargetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateImageVulWhitelistTargetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.reason)) {
      query["Reason"] = request.reason;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.target)) {
      query["Target"] = request.target;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateImageVulWhitelistTarget",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateImageVulWhitelistTargetResponse>(await this.callApi(params, req, runtime), new $_model.UpdateImageVulWhitelistTargetResponse({}));
  }

  /**
   * Updates the vulnerability whitelist of an image.
   * 
   * @param request - UpdateImageVulWhitelistTargetRequest
   * @returns UpdateImageVulWhitelistTargetResponse
   */
  async updateImageVulWhitelistTarget(request: $_model.UpdateImageVulWhitelistTargetRequest): Promise<$_model.UpdateImageVulWhitelistTargetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateImageVulWhitelistTargetWithOptions(request, runtime);
  }

  /**
   * Modifies the name of a Jenkins image repository.
   * 
   * @param request - UpdateJenkinsImageRegistryNameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateJenkinsImageRegistryNameResponse
   */
  async updateJenkinsImageRegistryNameWithOptions(request: $_model.UpdateJenkinsImageRegistryNameRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateJenkinsImageRegistryNameResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.registryId)) {
      body["RegistryId"] = request.registryId;
    }

    if (!$dara.isNull(request.registryName)) {
      body["RegistryName"] = request.registryName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateJenkinsImageRegistryName",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateJenkinsImageRegistryNameResponse>(await this.callApi(params, req, runtime), new $_model.UpdateJenkinsImageRegistryNameResponse({}));
  }

  /**
   * Modifies the name of a Jenkins image repository.
   * 
   * @param request - UpdateJenkinsImageRegistryNameRequest
   * @returns UpdateJenkinsImageRegistryNameResponse
   */
  async updateJenkinsImageRegistryName(request: $_model.UpdateJenkinsImageRegistryNameRequest): Promise<$_model.UpdateJenkinsImageRegistryNameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateJenkinsImageRegistryNameWithOptions(request, runtime);
  }

  /**
   * Modifies the retention period of images that are stored in a Jenkins image repository.
   * 
   * @param request - UpdateJenkinsImageRegistryPersistenceDayRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateJenkinsImageRegistryPersistenceDayResponse
   */
  async updateJenkinsImageRegistryPersistenceDayWithOptions(request: $_model.UpdateJenkinsImageRegistryPersistenceDayRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateJenkinsImageRegistryPersistenceDayResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.persistenceDay)) {
      body["PersistenceDay"] = request.persistenceDay;
    }

    if (!$dara.isNull(request.registryId)) {
      body["RegistryId"] = request.registryId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateJenkinsImageRegistryPersistenceDay",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateJenkinsImageRegistryPersistenceDayResponse>(await this.callApi(params, req, runtime), new $_model.UpdateJenkinsImageRegistryPersistenceDayResponse({}));
  }

  /**
   * Modifies the retention period of images that are stored in a Jenkins image repository.
   * 
   * @param request - UpdateJenkinsImageRegistryPersistenceDayRequest
   * @returns UpdateJenkinsImageRegistryPersistenceDayResponse
   */
  async updateJenkinsImageRegistryPersistenceDay(request: $_model.UpdateJenkinsImageRegistryPersistenceDayRequest): Promise<$_model.UpdateJenkinsImageRegistryPersistenceDayResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateJenkinsImageRegistryPersistenceDayWithOptions(request, runtime);
  }

  /**
   * Modifies an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
   * 
   * @param request - UpdateMaliciousFileWhitelistConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateMaliciousFileWhitelistConfigResponse
   */
  async updateMaliciousFileWhitelistConfigWithOptions(request: $_model.UpdateMaliciousFileWhitelistConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateMaliciousFileWhitelistConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configId)) {
      query["ConfigId"] = request.configId;
    }

    if (!$dara.isNull(request.eventName)) {
      query["EventName"] = request.eventName;
    }

    if (!$dara.isNull(request.field)) {
      query["Field"] = request.field;
    }

    if (!$dara.isNull(request.fieldValue)) {
      query["FieldValue"] = request.fieldValue;
    }

    if (!$dara.isNull(request.operator)) {
      query["Operator"] = request.operator;
    }

    if (!$dara.isNull(request.source)) {
      query["Source"] = request.source;
    }

    if (!$dara.isNull(request.targetType)) {
      query["TargetType"] = request.targetType;
    }

    if (!$dara.isNull(request.targetValue)) {
      query["TargetValue"] = request.targetValue;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateMaliciousFileWhitelistConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateMaliciousFileWhitelistConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateMaliciousFileWhitelistConfigResponse({}));
  }

  /**
   * Modifies an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
   * 
   * @param request - UpdateMaliciousFileWhitelistConfigRequest
   * @returns UpdateMaliciousFileWhitelistConfigResponse
   */
  async updateMaliciousFileWhitelistConfig(request: $_model.UpdateMaliciousFileWhitelistConfigRequest): Promise<$_model.UpdateMaliciousFileWhitelistConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateMaliciousFileWhitelistConfigWithOptions(request, runtime);
  }

  /**
   * Updates the blocking rule for at-risk images.
   * 
   * @param tmpReq - UpdateOpaStrategyNewRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateOpaStrategyNewResponse
   */
  async updateOpaStrategyNewWithOptions(tmpReq: $_model.UpdateOpaStrategyNewRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateOpaStrategyNewResponse> {
    tmpReq.validate();
    let request = new $_model.UpdateOpaStrategyNewShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.alarmDetail)) {
      request.alarmDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.alarmDetail, "AlarmDetail", "json");
    }

    let query = { };
    if (!$dara.isNull(request.alarmDetailShrink)) {
      query["AlarmDetail"] = request.alarmDetailShrink;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.clusterName)) {
      query["ClusterName"] = request.clusterName;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.imageName)) {
      query["ImageName"] = request.imageName;
    }

    if (!$dara.isNull(request.label)) {
      query["Label"] = request.label;
    }

    if (!$dara.isNull(request.maliciousImage)) {
      query["MaliciousImage"] = request.maliciousImage;
    }

    if (!$dara.isNull(request.ruleAction)) {
      query["RuleAction"] = request.ruleAction;
    }

    if (!$dara.isNull(request.scopes)) {
      query["Scopes"] = request.scopes;
    }

    if (!$dara.isNull(request.strategyId)) {
      query["StrategyId"] = request.strategyId;
    }

    if (!$dara.isNull(request.strategyName)) {
      query["StrategyName"] = request.strategyName;
    }

    if (!$dara.isNull(request.strategyTemplateId)) {
      query["StrategyTemplateId"] = request.strategyTemplateId;
    }

    if (!$dara.isNull(request.unScanedImage)) {
      query["UnScanedImage"] = request.unScanedImage;
    }

    if (!$dara.isNull(request.whiteList)) {
      query["WhiteList"] = request.whiteList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateOpaStrategyNew",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateOpaStrategyNewResponse>(await this.callApi(params, req, runtime), new $_model.UpdateOpaStrategyNewResponse({}));
  }

  /**
   * Updates the blocking rule for at-risk images.
   * 
   * @param request - UpdateOpaStrategyNewRequest
   * @returns UpdateOpaStrategyNewResponse
   */
  async updateOpaStrategyNew(request: $_model.UpdateOpaStrategyNewRequest): Promise<$_model.UpdateOpaStrategyNewResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateOpaStrategyNewWithOptions(request, runtime);
  }

  /**
   * Modifies a policy of detecting Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
   * 
   * @param request - UpdateOssScanConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateOssScanConfigResponse
   */
  async updateOssScanConfigWithOptions(request: $_model.UpdateOssScanConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateOssScanConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.allKeyPrefix)) {
      query["AllKeyPrefix"] = request.allKeyPrefix;
    }

    if (!$dara.isNull(request.bucketNameList)) {
      query["BucketNameList"] = request.bucketNameList;
    }

    if (!$dara.isNull(request.decompressMaxFileCount)) {
      query["DecompressMaxFileCount"] = request.decompressMaxFileCount;
    }

    if (!$dara.isNull(request.decompressMaxLayer)) {
      query["DecompressMaxLayer"] = request.decompressMaxLayer;
    }

    if (!$dara.isNull(request.decryptionList)) {
      query["DecryptionList"] = request.decryptionList;
    }

    if (!$dara.isNull(request.enable)) {
      query["Enable"] = request.enable;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    if (!$dara.isNull(request.keyPrefixList)) {
      query["KeyPrefixList"] = request.keyPrefixList;
    }

    if (!$dara.isNull(request.keySuffixList)) {
      query["KeySuffixList"] = request.keySuffixList;
    }

    if (!$dara.isNull(request.lastModifiedStartTime)) {
      query["LastModifiedStartTime"] = request.lastModifiedStartTime;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.realTimeIncr)) {
      query["RealTimeIncr"] = request.realTimeIncr;
    }

    if (!$dara.isNull(request.scanDayList)) {
      query["ScanDayList"] = request.scanDayList;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateOssScanConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateOssScanConfigResponse>(await this.callApi(params, req, runtime), new $_model.UpdateOssScanConfigResponse({}));
  }

  /**
   * Modifies a policy of detecting Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
   * 
   * @param request - UpdateOssScanConfigRequest
   * @returns UpdateOssScanConfigResponse
   */
  async updateOssScanConfig(request: $_model.UpdateOssScanConfigRequest): Promise<$_model.UpdateOssScanConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateOssScanConfigWithOptions(request, runtime);
  }

  /**
   * Change Postpaid Asset Authorization Version
   * 
   * @param request - UpdatePostPaidBindRelRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdatePostPaidBindRelResponse
   */
  async updatePostPaidBindRelWithOptions(request: $_model.UpdatePostPaidBindRelRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdatePostPaidBindRelResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoBind)) {
      query["AutoBind"] = request.autoBind;
    }

    if (!$dara.isNull(request.autoBindVersion)) {
      query["AutoBindVersion"] = request.autoBindVersion;
    }

    if (!$dara.isNull(request.bindAction)) {
      query["BindAction"] = request.bindAction;
    }

    if (!$dara.isNull(request.updateIfNecessary)) {
      query["UpdateIfNecessary"] = request.updateIfNecessary;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdatePostPaidBindRel",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdatePostPaidBindRelResponse>(await this.callApi(params, req, runtime), new $_model.UpdatePostPaidBindRelResponse({}));
  }

  /**
   * Change Postpaid Asset Authorization Version
   * 
   * @param request - UpdatePostPaidBindRelRequest
   * @returns UpdatePostPaidBindRelResponse
   */
  async updatePostPaidBindRel(request: $_model.UpdatePostPaidBindRelRequest): Promise<$_model.UpdatePostPaidBindRelResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updatePostPaidBindRelWithOptions(request, runtime);
  }

  /**
   * Enables or disables automatic upgrade.
   * 
   * @param request - UpdatePublishAutoUpgradeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdatePublishAutoUpgradeResponse
   */
  async updatePublishAutoUpgradeWithOptions(request: $_model.UpdatePublishAutoUpgradeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdatePublishAutoUpgradeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoUpgrade)) {
      query["AutoUpgrade"] = request.autoUpgrade;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdatePublishAutoUpgrade",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdatePublishAutoUpgradeResponse>(await this.callApi(params, req, runtime), new $_model.UpdatePublishAutoUpgradeResponse({}));
  }

  /**
   * Enables or disables automatic upgrade.
   * 
   * @param request - UpdatePublishAutoUpgradeRequest
   * @returns UpdatePublishAutoUpgradeResponse
   */
  async updatePublishAutoUpgrade(request: $_model.UpdatePublishAutoUpgradeRequest): Promise<$_model.UpdatePublishAutoUpgradeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updatePublishAutoUpgradeWithOptions(request, runtime);
  }

  /**
   * Updates a release batch.
   * 
   * @param request - UpdatePublishBatchRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdatePublishBatchResponse
   */
  async updatePublishBatchWithOptions(request: $_model.UpdatePublishBatchRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdatePublishBatchResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.batchId)) {
      query["BatchId"] = request.batchId;
    }

    if (!$dara.isNull(request.batchName)) {
      query["BatchName"] = request.batchName;
    }

    if (!$dara.isNull(request.interval)) {
      query["Interval"] = request.interval;
    }

    if (!$dara.isNull(request.operationBase)) {
      query["OperationBase"] = request.operationBase;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdatePublishBatch",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdatePublishBatchResponse>(await this.callApi(params, req, runtime), new $_model.UpdatePublishBatchResponse({}));
  }

  /**
   * Updates a release batch.
   * 
   * @param request - UpdatePublishBatchRequest
   * @returns UpdatePublishBatchResponse
   */
  async updatePublishBatch(request: $_model.UpdatePublishBatchRequest): Promise<$_model.UpdatePublishBatchResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updatePublishBatchWithOptions(request, runtime);
  }

  /**
   * Modifies the configuration of the client upgrade time. If you want to call this operation, contact technical support.
   * 
   * @param request - UpdatePublishCronRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdatePublishCronResponse
   */
  async updatePublishCronWithOptions(request: $_model.UpdatePublishCronRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdatePublishCronResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cron)) {
      query["Cron"] = request.cron;
    }

    if (!$dara.isNull(request.cronDay)) {
      query["CronDay"] = request.cronDay;
    }

    if (!$dara.isNull(request.cronTime)) {
      query["CronTime"] = request.cronTime;
    }

    if (!$dara.isNull(request.cronType)) {
      query["CronType"] = request.cronType;
    }

    if (!$dara.isNull(request.duration)) {
      query["Duration"] = request.duration;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdatePublishCron",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdatePublishCronResponse>(await this.callApi(params, req, runtime), new $_model.UpdatePublishCronResponse({}));
  }

  /**
   * Modifies the configuration of the client upgrade time. If you want to call this operation, contact technical support.
   * 
   * @param request - UpdatePublishCronRequest
   * @returns UpdatePublishCronResponse
   */
  async updatePublishCron(request: $_model.UpdatePublishCronRequest): Promise<$_model.UpdatePublishCronResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updatePublishCronWithOptions(request, runtime);
  }

  /**
   * Modifies the settings of the canary release feature for agent upgrade. If you want to use the feature, contact technical support.
   * 
   * @param request - UpdatePublishGraySwitchRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdatePublishGraySwitchResponse
   */
  async updatePublishGraySwitchWithOptions(request: $_model.UpdatePublishGraySwitchRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdatePublishGraySwitchResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.graySwitchStatus)) {
      query["GraySwitchStatus"] = request.graySwitchStatus;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdatePublishGraySwitch",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdatePublishGraySwitchResponse>(await this.callApi(params, req, runtime), new $_model.UpdatePublishGraySwitchResponse({}));
  }

  /**
   * Modifies the settings of the canary release feature for agent upgrade. If you want to use the feature, contact technical support.
   * 
   * @param request - UpdatePublishGraySwitchRequest
   * @returns UpdatePublishGraySwitchResponse
   */
  async updatePublishGraySwitch(request: $_model.UpdatePublishGraySwitchRequest): Promise<$_model.UpdatePublishGraySwitchResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updatePublishGraySwitchWithOptions(request, runtime);
  }

  /**
   * Updates the unique identifier of an asset selection.
   * 
   * @param request - UpdateSelectionKeyByTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateSelectionKeyByTypeResponse
   */
  async updateSelectionKeyByTypeWithOptions(request: $_model.UpdateSelectionKeyByTypeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateSelectionKeyByTypeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.businessType)) {
      query["BusinessType"] = request.businessType;
    }

    if (!$dara.isNull(request.selectionKey)) {
      query["SelectionKey"] = request.selectionKey;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateSelectionKeyByType",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateSelectionKeyByTypeResponse>(await this.callApi(params, req, runtime), new $_model.UpdateSelectionKeyByTypeResponse({}));
  }

  /**
   * Updates the unique identifier of an asset selection.
   * 
   * @param request - UpdateSelectionKeyByTypeRequest
   * @returns UpdateSelectionKeyByTypeResponse
   */
  async updateSelectionKeyByType(request: $_model.UpdateSelectionKeyByTypeRequest): Promise<$_model.UpdateSelectionKeyByTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateSelectionKeyByTypeWithOptions(request, runtime);
  }

  /**
   * Update the selected strict events in strict mode
   * 
   * @param request - UpdateStrictEventNameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateStrictEventNameResponse
   */
  async updateStrictEventNameWithOptions(request: $_model.UpdateStrictEventNameRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateStrictEventNameResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eventNameList)) {
      query["EventNameList"] = request.eventNameList;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.operator)) {
      query["Operator"] = request.operator;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateStrictEventName",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateStrictEventNameResponse>(await this.callApi(params, req, runtime), new $_model.UpdateStrictEventNameResponse({}));
  }

  /**
   * Update the selected strict events in strict mode
   * 
   * @param request - UpdateStrictEventNameRequest
   * @returns UpdateStrictEventNameResponse
   */
  async updateStrictEventName(request: $_model.UpdateStrictEventNameRequest): Promise<$_model.UpdateStrictEventNameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateStrictEventNameWithOptions(request, runtime);
  }

  /**
   * Updates machines in a release batch.
   * 
   * @param request - UpdateTargetListByBatchRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateTargetListByBatchResponse
   */
  async updateTargetListByBatchWithOptions(request: $_model.UpdateTargetListByBatchRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateTargetListByBatchResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.batchId)) {
      query["BatchId"] = request.batchId;
    }

    if (!$dara.isNull(request.operationList)) {
      query["OperationList"] = request.operationList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateTargetListByBatch",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateTargetListByBatchResponse>(await this.callApi(params, req, runtime), new $_model.UpdateTargetListByBatchResponse({}));
  }

  /**
   * Updates machines in a release batch.
   * 
   * @param request - UpdateTargetListByBatchRequest
   * @returns UpdateTargetListByBatchResponse
   */
  async updateTargetListByBatch(request: $_model.UpdateTargetListByBatchRequest): Promise<$_model.UpdateTargetListByBatchResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateTargetListByBatchWithOptions(request, runtime);
  }

  /**
   * Modify Image Service Whitelist.
   * 
   * @param request - UpdateWhiteListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateWhiteListResponse
   */
  async updateWhiteListWithOptions(request: $_model.UpdateWhiteListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateWhiteListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.registryId)) {
      query["RegistryId"] = request.registryId;
    }

    if (!$dara.isNull(request.whiteList)) {
      query["WhiteList"] = request.whiteList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateWhiteList",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateWhiteListResponse>(await this.callApi(params, req, runtime), new $_model.UpdateWhiteListResponse({}));
  }

  /**
   * Modify Image Service Whitelist.
   * 
   * @param request - UpdateWhiteListRequest
   * @returns UpdateWhiteListResponse
   */
  async updateWhiteList(request: $_model.UpdateWhiteListRequest): Promise<$_model.UpdateWhiteListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateWhiteListWithOptions(request, runtime);
  }

  /**
   * Updates the status of an application whitelist policy.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - UpdateWhiteListStrategyStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateWhiteListStrategyStatusResponse
   */
  async updateWhiteListStrategyStatusWithOptions(request: $_model.UpdateWhiteListStrategyStatusRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateWhiteListStrategyStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.sourceIp)) {
      query["SourceIp"] = request.sourceIp;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.strategyIds)) {
      query["StrategyIds"] = request.strategyIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateWhiteListStrategyStatus",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateWhiteListStrategyStatusResponse>(await this.callApi(params, req, runtime), new $_model.UpdateWhiteListStrategyStatusResponse({}));
  }

  /**
   * Updates the status of an application whitelist policy.
   * 
   * @remarks
   * The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
   * 
   * @param request - UpdateWhiteListStrategyStatusRequest
   * @returns UpdateWhiteListStrategyStatusResponse
   */
  async updateWhiteListStrategyStatus(request: $_model.UpdateWhiteListStrategyStatusRequest): Promise<$_model.UpdateWhiteListStrategyStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateWhiteListStrategyStatusWithOptions(request, runtime);
  }

  /**
   * Upgrades the version of an anti-ransomware policy.
   * 
   * @param request - UpgradeBackupPolicyVersionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpgradeBackupPolicyVersionResponse
   */
  async upgradeBackupPolicyVersionWithOptions(request: $_model.UpgradeBackupPolicyVersionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpgradeBackupPolicyVersionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.id)) {
      query["Id"] = request.id;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpgradeBackupPolicyVersion",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpgradeBackupPolicyVersionResponse>(await this.callApi(params, req, runtime), new $_model.UpgradeBackupPolicyVersionResponse({}));
  }

  /**
   * Upgrades the version of an anti-ransomware policy.
   * 
   * @param request - UpgradeBackupPolicyVersionRequest
   * @returns UpgradeBackupPolicyVersionResponse
   */
  async upgradeBackupPolicyVersion(request: $_model.UpgradeBackupPolicyVersionRequest): Promise<$_model.UpgradeBackupPolicyVersionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.upgradeBackupPolicyVersionWithOptions(request, runtime);
  }

  /**
   * Upgrades the version of the management node to which a honeypot belongs.
   * 
   * @param request - UpgradeHoneypotNodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpgradeHoneypotNodeResponse
   */
  async upgradeHoneypotNodeWithOptions(request: $_model.UpgradeHoneypotNodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpgradeHoneypotNodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.allowHoneypotAccessInternet)) {
      query["AllowHoneypotAccessInternet"] = request.allowHoneypotAccessInternet;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpgradeHoneypotNode",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpgradeHoneypotNodeResponse>(await this.callApi(params, req, runtime), new $_model.UpgradeHoneypotNodeResponse({}));
  }

  /**
   * Upgrades the version of the management node to which a honeypot belongs.
   * 
   * @param request - UpgradeHoneypotNodeRequest
   * @returns UpgradeHoneypotNodeResponse
   */
  async upgradeHoneypotNode(request: $_model.UpgradeHoneypotNodeRequest): Promise<$_model.UpgradeHoneypotNodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.upgradeHoneypotNodeWithOptions(request, runtime);
  }

  /**
   * Manually upgrades the client version on assets.
   * 
   * @param request - UpgradeVersionByUuidsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpgradeVersionByUuidsResponse
   */
  async upgradeVersionByUuidsWithOptions(request: $_model.UpgradeVersionByUuidsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpgradeVersionByUuidsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.upgradeVersion)) {
      query["UpgradeVersion"] = request.upgradeVersion;
    }

    if (!$dara.isNull(request.uuidList)) {
      query["UuidList"] = request.uuidList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpgradeVersionByUuids",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpgradeVersionByUuidsResponse>(await this.callApi(params, req, runtime), new $_model.UpgradeVersionByUuidsResponse({}));
  }

  /**
   * Manually upgrades the client version on assets.
   * 
   * @param request - UpgradeVersionByUuidsRequest
   * @returns UpgradeVersionByUuidsResponse
   */
  async upgradeVersionByUuids(request: $_model.UpgradeVersionByUuidsRequest): Promise<$_model.UpgradeVersionByUuidsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.upgradeVersionByUuidsWithOptions(request, runtime);
  }

  /**
   * Uploads a honeypot file.
   * 
   * @param request - UploadedHoneyPotFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UploadedHoneyPotFileResponse
   */
  async uploadedHoneyPotFileWithOptions(request: $_model.UploadedHoneyPotFileRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UploadedHoneyPotFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fileKey)) {
      query["FileKey"] = request.fileKey;
    }

    if (!$dara.isNull(request.fileName)) {
      query["FileName"] = request.fileName;
    }

    if (!$dara.isNull(request.fileType)) {
      query["FileType"] = request.fileType;
    }

    if (!$dara.isNull(request.honeypotImageName)) {
      query["HoneypotImageName"] = request.honeypotImageName;
    }

    if (!$dara.isNull(request.lang)) {
      query["Lang"] = request.lang;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.templateExtra)) {
      query["TemplateExtra"] = request.templateExtra;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UploadedHoneyPotFile",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UploadedHoneyPotFileResponse>(await this.callApi(params, req, runtime), new $_model.UploadedHoneyPotFileResponse({}));
  }

  /**
   * Uploads a honeypot file.
   * 
   * @param request - UploadedHoneyPotFileRequest
   * @returns UploadedHoneyPotFileResponse
   */
  async uploadedHoneyPotFile(request: $_model.UploadedHoneyPotFileRequest): Promise<$_model.UploadedHoneyPotFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.uploadedHoneyPotFileWithOptions(request, runtime);
  }

  /**
   * Verifies whether risk items are fixed. If a risk item is fixed, the status of the related check item is updated to Passed.
   * 
   * @param request - ValidateHcWarningsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ValidateHcWarningsResponse
   */
  async validateHcWarningsWithOptions(request: $_model.ValidateHcWarningsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ValidateHcWarningsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkIds)) {
      query["CheckIds"] = request.checkIds;
    }

    if (!$dara.isNull(request.riskIds)) {
      query["RiskIds"] = request.riskIds;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.uuids)) {
      query["Uuids"] = request.uuids;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ValidateHcWarnings",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ValidateHcWarningsResponse>(await this.callApi(params, req, runtime), new $_model.ValidateHcWarningsResponse({}));
  }

  /**
   * Verifies whether risk items are fixed. If a risk item is fixed, the status of the related check item is updated to Passed.
   * 
   * @param request - ValidateHcWarningsRequest
   * @returns ValidateHcWarningsResponse
   */
  async validateHcWarnings(request: $_model.ValidateHcWarningsRequest): Promise<$_model.ValidateHcWarningsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.validateHcWarningsWithOptions(request, runtime);
  }

  /**
   * Customization and validation of check items and repair parameters
   * 
   * @param tmpReq - VerifyCheckCustomConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns VerifyCheckCustomConfigResponse
   */
  async verifyCheckCustomConfigWithOptions(tmpReq: $_model.VerifyCheckCustomConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.VerifyCheckCustomConfigResponse> {
    tmpReq.validate();
    let request = new $_model.VerifyCheckCustomConfigShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.customCheckConfig)) {
      request.customCheckConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customCheckConfig, "CustomCheckConfig", "json");
    }

    let query = { };
    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.customCheckConfigShrink)) {
      query["CustomCheckConfig"] = request.customCheckConfigShrink;
    }

    if (!$dara.isNull(request.customConfigs)) {
      query["CustomConfigs"] = request.customConfigs;
    }

    if (!$dara.isNull(request.repairConfigs)) {
      query["RepairConfigs"] = request.repairConfigs;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "VerifyCheckCustomConfig",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.VerifyCheckCustomConfigResponse>(await this.callApi(params, req, runtime), new $_model.VerifyCheckCustomConfigResponse({}));
  }

  /**
   * Customization and validation of check items and repair parameters
   * 
   * @param request - VerifyCheckCustomConfigRequest
   * @returns VerifyCheckCustomConfigResponse
   */
  async verifyCheckCustomConfig(request: $_model.VerifyCheckCustomConfigRequest): Promise<$_model.VerifyCheckCustomConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.verifyCheckCustomConfigWithOptions(request, runtime);
  }

  /**
   * Verifies the instances on which risks are detected based on a check item.
   * 
   * @param request - VerifyCheckInstanceResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns VerifyCheckInstanceResultResponse
   */
  async verifyCheckInstanceResultWithOptions(request: $_model.VerifyCheckInstanceResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.VerifyCheckInstanceResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkId)) {
      query["CheckId"] = request.checkId;
    }

    if (!$dara.isNull(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!$dara.isNull(request.taskSource)) {
      query["TaskSource"] = request.taskSource;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "VerifyCheckInstanceResult",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.VerifyCheckInstanceResultResponse>(await this.callApi(params, req, runtime), new $_model.VerifyCheckInstanceResultResponse({}));
  }

  /**
   * Verifies the instances on which risks are detected based on a check item.
   * 
   * @param request - VerifyCheckInstanceResultRequest
   * @returns VerifyCheckInstanceResultResponse
   */
  async verifyCheckInstanceResult(request: $_model.VerifyCheckInstanceResultRequest): Promise<$_model.VerifyCheckInstanceResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.verifyCheckInstanceResultWithOptions(request, runtime);
  }

  /**
   * Verifies risk items that are detected based on check items.
   * 
   * @param request - VerifyCheckResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns VerifyCheckResultResponse
   */
  async verifyCheckResultWithOptions(request: $_model.VerifyCheckResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.VerifyCheckResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkIds)) {
      query["CheckIds"] = request.checkIds;
    }

    if (!$dara.isNull(request.taskSource)) {
      query["TaskSource"] = request.taskSource;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "VerifyCheckResult",
      version: "2018-12-03",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.VerifyCheckResultResponse>(await this.callApi(params, req, runtime), new $_model.VerifyCheckResultResponse({}));
  }

  /**
   * Verifies risk items that are detected based on check items.
   * 
   * @param request - VerifyCheckResultRequest
   * @returns VerifyCheckResultResponse
   */
  async verifyCheckResult(request: $_model.VerifyCheckResultRequest): Promise<$_model.VerifyCheckResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.verifyCheckResultWithOptions(request, runtime);
  }

}
