// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class BankMetaVerifyIntlRequest extends $dara.Model {
  /**
   * @remarks
   * Bank card number.
   * 
   * - When paramType is set to normal, enter the plaintext bank card number.
   * - When paramType is set to md5, enter the plaintext part of the card number except the last 6 digits, followed by the MD5 value of the last 6 digits (32-character lowercase).
   * 
   * This parameter is required.
   * 
   * @example
   * ● 明文：12345678******
   * ● 密文：
   * 12345678f8ee21920e37807b43e7e912ab829b6e
   */
  bankCard?: string;
  /**
   * @remarks
   * ID number:
   * - When paramType is normal: Enter the plaintext ID number.
   * - When paramType is md5:
   *     - First 6 digits of the ID number (plaintext) + date of birth (ciphertext) + last 4 digits of the ID number (plaintext).
   *     - For other IDs, encrypt the last two digits with MD5.
   * 
   * Important
   * This field is required when ProductType is one of the following:
   * - BANK_CARD_3_META
   * - BANK_CARD_4_META
   * 
   * @example
   * ● 明文：429001********8211
   * ● 密文：
   * 42900132fa7bcd874161bea8ec8fd98f390ec98211
   */
  identifyNum?: string;
  /**
   * @remarks
   * ID type (default to ID card if left empty, see the table below for other types).
   * 
   * @example
   * 01
   */
  identityType?: string;
  /**
   * @remarks
   * Phone number:
   * - When paramType is normal: Enter the plaintext phone number.
   * - When paramType is md5: Enter the ciphertext phone number.
   * 
   * Important
   * 
   * - This field is required when ProductType = BANK_CARD_4_META.
   * 
   * @example
   * ● 明文：186****2055
   * ● 密文：
   * 849169cd3b20621c1c78bd61a11a4fc2
   */
  mobile?: string;
  /**
   * @remarks
   * Encryption method:
   * - normal: no encryption
   * - md5: md5 encryption
   * 
   * Important:
   * 
   * - All encrypted parameters should be in the form of a 32-character lowercase MD5 string.
   * - The ciphertext generated by different MD5 tools may vary. If the interface works before encryption but not after, try changing the MD5 tool.
   * 
   * This parameter is required.
   * 
   * @example
   * normal
   */
  paramType?: string;
  /**
   * @remarks
   * Fixed value: BANK_CARD_N_META
   * 
   * This parameter is required.
   * 
   * @example
   * BANK_CARD_N_META
   */
  productCode?: string;
  /**
   * @remarks
   * Product type to call:
   * 
   * - BANK_CARD_2_META: Bank card number + name verification.
   * - BANK_CARD_3_META: Bank card number + name + ID number verification.
   * - BANK_CARD_4_META: Bank card number + name + ID number + phone number verification.
   * 
   * This parameter is required.
   * 
   * @example
   * BANK_CARD_4_META
   */
  productType?: string;
  /**
   * @remarks
   * Name.
   * 
   * - When paramType is set to normal, enter the plaintext name.
   * - When paramType is set to md5, encrypt the first character of the name with MD5 (32-character lowercase MD5) and append the rest of the name in plaintext.
   * 
   * This parameter is required.
   * 
   * @example
   * 张*
   */
  userName?: string;
  /**
   * @remarks
   * VERIFY_BANK_CARD: Bank card authentication mode. This indicates whether the provided bank card number matches the user\\"s real name, ID number, and phone number.
   * 
   * This parameter is required.
   * 
   * @example
   * VERIFY_BANK_CARD
   */
  verifyMode?: string;
  static names(): { [key: string]: string } {
    return {
      bankCard: 'BankCard',
      identifyNum: 'IdentifyNum',
      identityType: 'IdentityType',
      mobile: 'Mobile',
      paramType: 'ParamType',
      productCode: 'ProductCode',
      productType: 'ProductType',
      userName: 'UserName',
      verifyMode: 'VerifyMode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bankCard: 'string',
      identifyNum: 'string',
      identityType: 'string',
      mobile: 'string',
      paramType: 'string',
      productCode: 'string',
      productType: 'string',
      userName: 'string',
      verifyMode: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

