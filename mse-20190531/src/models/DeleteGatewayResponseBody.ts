// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DeleteGatewayResponseBodyData extends $dara.Model {
  /**
   * @remarks
   * The unique ID of the gateway. The ID is automatically generated by the system.
   * 
   * @example
   * gw-7ea3da97b96543e19f6c597c****
   */
  gatewayUniqueId?: string;
  /**
   * @remarks
   * The creation time.
   * 
   * @example
   * 2022-01-07T10:07:57.000+0000
   */
  gmtCreate?: string;
  /**
   * @remarks
   * The time when the gateway was last updated.
   * 
   * @example
   * 2022-01-07T10:07:57.000+0000
   */
  gmtModified?: string;
  /**
   * @remarks
   * The ID of the primary key.
   * 
   * @example
   * 12
   */
  id?: number;
  /**
   * @remarks
   * The name of the gateway.
   * 
   * @example
   * mse-bc1a29b0-reg-center-0-1
   */
  name?: string;
  /**
   * @remarks
   * The information about the user.
   * 
   * @example
   * 1231254
   */
  primaryUser?: string;
  /**
   * @remarks
   * The ID of the region.
   * 
   * @example
   * cn-hangzhou
   */
  region?: string;
  /**
   * @remarks
   * The number of gateway replicas.
   * 
   * @example
   * 2
   */
  replica?: number;
  /**
   * @remarks
   * The ID of the security group.
   * 
   * @example
   * sg-bp11ufzqn6mmb8dtzz82
   */
  securityGroup?: string;
  /**
   * @remarks
   * The specifications of the gateway.
   * 
   * @example
   * MSE_GTW_16_32_200_c
   */
  spec?: string;
  /**
   * @remarks
   * The status of the gateway. Valid values: 0: The gateway is being created. 1: The gateway fails to be created. 2: The gateway is running. 3: The gateway is changing. 4: The gateway is scaling down. 6: The gateway is scaling up. 8: The gateway is being deleted. 10: The gateway is restarting. 11: The gateway is being rebuilt. 12: The gateway is updating. 13: The gateway fails to be updated.
   * 
   * @example
   * 1
   */
  status?: number;
  /**
   * @remarks
   * The ID of the virtual private cloud (VPC) where the gateway resides.
   * 
   * @example
   * vpc-bp1328cm01m6uel42b5zb
   */
  vpc?: string;
  /**
   * @remarks
   * The ID of the vSwitch.
   * 
   * @example
   * vsw-bp18zeqxx6mpuq843z4n5
   */
  vswitch?: string;
  static names(): { [key: string]: string } {
    return {
      gatewayUniqueId: 'GatewayUniqueId',
      gmtCreate: 'GmtCreate',
      gmtModified: 'GmtModified',
      id: 'Id',
      name: 'Name',
      primaryUser: 'PrimaryUser',
      region: 'Region',
      replica: 'Replica',
      securityGroup: 'SecurityGroup',
      spec: 'Spec',
      status: 'Status',
      vpc: 'Vpc',
      vswitch: 'Vswitch',
    };
  }

  static types(): { [key: string]: any } {
    return {
      gatewayUniqueId: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      id: 'number',
      name: 'string',
      primaryUser: 'string',
      region: 'string',
      replica: 'number',
      securityGroup: 'string',
      spec: 'string',
      status: 'number',
      vpc: 'string',
      vswitch: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteGatewayResponseBody extends $dara.Model {
  /**
   * @remarks
   * The HTTP status code returned. The value 200 indicates that the request was successful. Other values indicate that the request failed.
   * 
   * @example
   * 200
   */
  code?: number;
  /**
   * @remarks
   * The details of the data.
   */
  data?: DeleteGatewayResponseBodyData;
  /**
   * @remarks
   * The HTTP status code returned.
   * 
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @remarks
   * The returned message.
   * 
   * *   If the request is successful, a success message is returned.
   * *   If the request fails, an error message is returned, such as the "TaskId not found" message.
   * 
   * @example
   * The request is successfully processed.
   */
  message?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 2FFEA345-BE30-5FE0-8885-42E2DEFD5FE6
   */
  requestId?: string;
  /**
   * @remarks
   * Indicates whether the request was successful. Valid values:
   * 
   * *   `true`: The request was successful.
   * *   `false`: The request failed.
   * 
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'number',
      data: DeleteGatewayResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

