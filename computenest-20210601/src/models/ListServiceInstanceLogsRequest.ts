// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';
import { ListServiceInstanceLogsRequestFilter } from "./ListServiceInstanceLogsRequestFilter";


export class ListServiceInstanceLogsRequest extends $dara.Model {
  /**
   * @remarks
   * The filters.
   */
  filter?: ListServiceInstanceLogsRequestFilter[];
  /**
   * @remarks
   * The log source. When this field is empty, query logs with the source set to computeNest and ros. Valid values:
   * 
   * computeNest : logs of the deployment and upgrade of the service instance.
   * application: logs generated by the application.
   * actionTrail: logs generated by ActionTrail.
   * compliancePack: Logs originating from the compliance package.
   * ros: Logs originating from ROS.
   * meteringDataï¼šLogs originating from the pay-as-you-go model.
   * 
   * @example
   * computeNest
   */
  logSource?: string;
  /**
   * @remarks
   * The Logstore. You must specify this parameter if you set LogSource to application.
   * 
   * @example
   * logabc
   */
  logstore?: string;
  /**
   * @remarks
   * The number of entries per page. Valid values: 1 to 100. Default value: 20.
   * 
   * @example
   * 20
   */
  maxResults?: number;
  /**
   * @remarks
   * A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
   * 
   * @example
   * BBBAAfu+XtuBE55iRLHEYYuojI4=
   */
  nextToken?: string;
  /**
   * @remarks
   * The region ID. Valid values:
   * 
   * *   cn-hangzhou: China (Hangzhou).
   * *   ap-southeast-1: Singapore.
   * 
   * This parameter is required.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The ID of the service instance.
   * 
   * This parameter is required.
   * 
   * @example
   * si-70a3b15bb626435b****
   */
  serviceInstanceId?: string;
  /**
   * @remarks
   * The order in which you want to sort the results. Valid values:
   * 
   * *   Ascending
   * *   (Default) Descending
   * 
   * @example
   * Ascending: Ascending order
   * 
   * Descending (default value): Descending order
   */
  sortOrder?: string;
  static names(): { [key: string]: string } {
    return {
      filter: 'Filter',
      logSource: 'LogSource',
      logstore: 'Logstore',
      maxResults: 'MaxResults',
      nextToken: 'NextToken',
      regionId: 'RegionId',
      serviceInstanceId: 'ServiceInstanceId',
      sortOrder: 'SortOrder',
    };
  }

  static types(): { [key: string]: any } {
    return {
      filter: { 'type': 'array', 'itemType': ListServiceInstanceLogsRequestFilter },
      logSource: 'string',
      logstore: 'string',
      maxResults: 'number',
      nextToken: 'string',
      regionId: 'string',
      serviceInstanceId: 'string',
      sortOrder: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.filter)) {
      $dara.Model.validateArray(this.filter);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

