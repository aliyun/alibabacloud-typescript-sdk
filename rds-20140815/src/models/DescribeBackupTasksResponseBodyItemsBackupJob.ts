// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DescribeBackupTasksResponseBodyItemsBackupJob extends $dara.Model {
  /**
   * @remarks
   * The ID of the backup set that is generated by the backup task.
   * 
   * >  If the value of the **BackupStatus** parameter is **Finished**, you can view the backup set ID only if you configure the **BackupJobId** parameter.
   * 
   * @example
   * 346650271
   */
  backupId?: string;
  /**
   * @remarks
   * The ID of the backup task.
   * 
   * @example
   * 4762614
   */
  backupJobId?: string;
  /**
   * @remarks
   * The status of the backup program. Valid values:
   * 
   * *   **NoStart**
   * *   **Preparing**
   * *   **Waiting**
   * *   **Uploading**
   * *   **Checking**
   * *   **Finished**
   * 
   * @example
   * NoStart
   */
  backupProgressStatus?: string;
  /**
   * @remarks
   * The status of the backup task. Valid values:
   * 
   * *   **NoStart**
   * *   **Checking**
   * *   **Preparing**
   * *   **Waiting**
   * *   **Uploading**
   * *   **Finished**
   * *   **Failed**
   * 
   * >  This parameter is returned only after a backup task is run.
   * 
   * @example
   * NoStart
   */
  backupStatus?: string;
  /**
   * @remarks
   * The backup mode. Valid values:
   * 
   * *   **Automated**
   * *   **Manual**
   * 
   * @example
   * Automated
   */
  jobMode?: string;
  /**
   * @remarks
   * The progress of the task in percentage.
   * 
   * @example
   * 25
   */
  process?: string;
  /**
   * @remarks
   * The type of the task. Valid values:
   * 
   * *   **TempBackupTask**: The backup task is an adhoc backup task.
   * *   **NormalBackupTask**: The backup task is a common backup task.
   * 
   * @example
   * NormalBackupTask
   */
  taskAction?: string;
  static names(): { [key: string]: string } {
    return {
      backupId: 'BackupId',
      backupJobId: 'BackupJobId',
      backupProgressStatus: 'BackupProgressStatus',
      backupStatus: 'BackupStatus',
      jobMode: 'JobMode',
      process: 'Process',
      taskAction: 'TaskAction',
    };
  }

  static types(): { [key: string]: any } {
    return {
      backupId: 'string',
      backupJobId: 'string',
      backupProgressStatus: 'string',
      backupStatus: 'string',
      jobMode: 'string',
      process: 'string',
      taskAction: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

