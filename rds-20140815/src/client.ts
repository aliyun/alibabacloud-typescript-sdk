// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';
import OpenApi from '@alicloud/openapi-core';
import { OpenApiUtil, $OpenApiUtil }from '@alicloud/openapi-core';


import * as $_model from './models/model';
export * from './models/model';

export default class Client extends OpenApi {

  constructor(config: $OpenApiUtil.Config) {
    super(config);
    this._endpointRule = "regional";
    this._endpointMap = {
      'cn-qingdao': "rds.aliyuncs.com",
      'cn-beijing': "rds.aliyuncs.com",
      'cn-hangzhou': "rds.aliyuncs.com",
      'cn-shanghai': "rds.aliyuncs.com",
      'cn-shenzhen': "rds.aliyuncs.com",
      'cn-heyuan': "rds.aliyuncs.com",
      'cn-hongkong': "rds.aliyuncs.com",
      'ap-southeast-1': "rds.aliyuncs.com",
      'us-west-1': "rds.aliyuncs.com",
      'us-east-1': "rds.aliyuncs.com",
      'cn-shanghai-finance-1': "rds.aliyuncs.com",
      'cn-shenzhen-finance-1': "rds.aliyuncs.com",
      'cn-north-2-gov-1': "rds.aliyuncs.com",
      'ap-northeast-2-pop': "rds.aliyuncs.com",
      'cn-beijing-finance-1': "rds.aliyuncs.com",
      'cn-beijing-finance-pop': "rds.aliyuncs.com",
      'cn-beijing-gov-1': "rds.aliyuncs.com",
      'cn-beijing-nu16-b01': "rds.aliyuncs.com",
      'cn-edge-1': "rds.aliyuncs.com",
      'cn-fujian': "rds.aliyuncs.com",
      'cn-haidian-cm12-c01': "rds.aliyuncs.com",
      'cn-hangzhou-bj-b01': "rds.aliyuncs.com",
      'cn-hangzhou-finance': "rds-vpc.cn-hangzhou-finance.aliyuncs.com",
      'cn-hangzhou-internal-prod-1': "rds.aliyuncs.com",
      'cn-hangzhou-internal-test-1': "rds.aliyuncs.com",
      'cn-hangzhou-internal-test-2': "rds.aliyuncs.com",
      'cn-hangzhou-internal-test-3': "rds.aliyuncs.com",
      'cn-hangzhou-test-306': "rds.aliyuncs.com",
      'cn-hongkong-finance-pop': "rds.aliyuncs.com",
      'cn-qingdao-nebula': "rds.aliyuncs.com",
      'cn-shanghai-et15-b01': "rds.aliyuncs.com",
      'cn-shanghai-et2-b01': "rds.aliyuncs.com",
      'cn-shanghai-inner': "rds.aliyuncs.com",
      'cn-shanghai-internal-test-1': "rds.aliyuncs.com",
      'cn-shenzhen-inner': "rds.aliyuncs.com",
      'cn-shenzhen-st4-d01': "rds.aliyuncs.com",
      'cn-shenzhen-su18-b01': "rds.aliyuncs.com",
      'cn-wuhan': "rds.aliyuncs.com",
      'cn-yushanfang': "rds.aliyuncs.com",
      'cn-zhangbei': "rds.aliyuncs.com",
      'cn-zhangbei-na61-b01': "rds.aliyuncs.com",
      'cn-zhangjiakou-na62-a01': "rds.aliyuncs.com",
      'cn-zhengzhou-nebula-1': "rds.aliyuncs.com",
      'eu-west-1-oxs': "rds.aliyuncs.com",
      'rus-west-1-pop': "rds.aliyuncs.com",
    };
    this.checkConfig(config);
    this._endpoint = this.getEndpoint("rds", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
  }


  getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {[key: string ]: string}, endpoint: string): string {
    if (!$dara.isNull(endpoint)) {
      return endpoint;
    }

    if (!$dara.isNull(endpointMap) && !$dara.isNull(endpointMap[regionId])) {
      return endpointMap[regionId];
    }

    return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
  }

  /**
   * 接受并授权执行系统事件操作
   * 
   * @param request - AcceptRCInquiredSystemEventRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AcceptRCInquiredSystemEventResponse
   */
  async acceptRCInquiredSystemEventWithOptions(request: $_model.AcceptRCInquiredSystemEventRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AcceptRCInquiredSystemEventResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eventId)) {
      query["EventId"] = request.eventId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AcceptRCInquiredSystemEvent",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AcceptRCInquiredSystemEventResponse>(await this.callApi(params, req, runtime), new $_model.AcceptRCInquiredSystemEventResponse({}));
  }

  /**
   * 接受并授权执行系统事件操作
   * 
   * @param request - AcceptRCInquiredSystemEventRequest
   * @returns AcceptRCInquiredSystemEventResponse
   */
  async acceptRCInquiredSystemEvent(request: $_model.AcceptRCInquiredSystemEventRequest): Promise<$_model.AcceptRCInquiredSystemEventResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.acceptRCInquiredSystemEventWithOptions(request, runtime);
  }

  /**
   * Switches workloads over from the source PostgreSQL instance to the destination ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Use the cloud migration feature](https://help.aliyun.com/document_detail/365562.html)
   * 
   * @param request - ActivateMigrationTargetInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ActivateMigrationTargetInstanceResponse
   */
  async activateMigrationTargetInstanceWithOptions(request: $_model.ActivateMigrationTargetInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ActivateMigrationTargetInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.forceSwitch)) {
      query["ForceSwitch"] = request.forceSwitch;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.switchTime)) {
      query["SwitchTime"] = request.switchTime;
    }

    if (!$dara.isNull(request.switchTimeMode)) {
      query["SwitchTimeMode"] = request.switchTimeMode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ActivateMigrationTargetInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ActivateMigrationTargetInstanceResponse>(await this.callApi(params, req, runtime), new $_model.ActivateMigrationTargetInstanceResponse({}));
  }

  /**
   * Switches workloads over from the source PostgreSQL instance to the destination ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Use the cloud migration feature](https://help.aliyun.com/document_detail/365562.html)
   * 
   * @param request - ActivateMigrationTargetInstanceRequest
   * @returns ActivateMigrationTargetInstanceResponse
   */
  async activateMigrationTargetInstance(request: $_model.ActivateMigrationTargetInstanceRequest): Promise<$_model.ActivateMigrationTargetInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.activateMigrationTargetInstanceWithOptions(request, runtime);
  }

  /**
   * Adds tags to an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Usage notes
   * *   Each tag consists of a tag key and a tag value. The tag key is required, and the tag value is optional.
   * *   The tag key and tag value cannot start with aliyun.
   * *   The tag key and tag value are not case-sensitive.
   * *   The maximum length of a tag key is 64 characters, and the maximum length of a tag value is 128 characters.
   * *   A maximum of 10 tags can be added to each instance. Each tag that is added to the same instance must have a unique tag key. If you add a new tag to the instance and the key of the new tag is the same as that of an existing tag, the new tag overwrites the existing tag.
   * 
   * @param request - AddTagsToResourceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AddTagsToResourceResponse
   */
  async addTagsToResourceWithOptions(request: $_model.AddTagsToResourceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AddTagsToResourceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.tags)) {
      query["Tags"] = request.tags;
    }

    if (!$dara.isNull(request.proxyId)) {
      query["proxyId"] = request.proxyId;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AddTagsToResource",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AddTagsToResourceResponse>(await this.callApi(params, req, runtime), new $_model.AddTagsToResourceResponse({}));
  }

  /**
   * Adds tags to an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Usage notes
   * *   Each tag consists of a tag key and a tag value. The tag key is required, and the tag value is optional.
   * *   The tag key and tag value cannot start with aliyun.
   * *   The tag key and tag value are not case-sensitive.
   * *   The maximum length of a tag key is 64 characters, and the maximum length of a tag value is 128 characters.
   * *   A maximum of 10 tags can be added to each instance. Each tag that is added to the same instance must have a unique tag key. If you add a new tag to the instance and the key of the new tag is the same as that of an existing tag, the new tag overwrites the existing tag.
   * 
   * @param request - AddTagsToResourceRequest
   * @returns AddTagsToResourceResponse
   */
  async addTagsToResource(request: $_model.AddTagsToResourceRequest): Promise<$_model.AddTagsToResourceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.addTagsToResourceWithOptions(request, runtime);
  }

  /**
   * Apply for a public endpoint for an ApsaraDB RDS instance
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Apply for a public endpoint for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/26128.html)
   * *   [Apply for a public endpoint for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/97738.html)
   * *   [Apply for a public endpoint for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/97736.html)
   * *   [Apply for a public endpoint for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97740.html)
   * 
   * @param request - AllocateInstancePublicConnectionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AllocateInstancePublicConnectionResponse
   */
  async allocateInstancePublicConnectionWithOptions(request: $_model.AllocateInstancePublicConnectionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AllocateInstancePublicConnectionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.babelfishPort)) {
      query["BabelfishPort"] = request.babelfishPort;
    }

    if (!$dara.isNull(request.connectionStringPrefix)) {
      query["ConnectionStringPrefix"] = request.connectionStringPrefix;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.generalGroupName)) {
      query["GeneralGroupName"] = request.generalGroupName;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.PGBouncerPort)) {
      query["PGBouncerPort"] = request.PGBouncerPort;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AllocateInstancePublicConnection",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AllocateInstancePublicConnectionResponse>(await this.callApi(params, req, runtime), new $_model.AllocateInstancePublicConnectionResponse({}));
  }

  /**
   * Apply for a public endpoint for an ApsaraDB RDS instance
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Apply for a public endpoint for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/26128.html)
   * *   [Apply for a public endpoint for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/97738.html)
   * *   [Apply for a public endpoint for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/97736.html)
   * *   [Apply for a public endpoint for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97740.html)
   * 
   * @param request - AllocateInstancePublicConnectionRequest
   * @returns AllocateInstancePublicConnectionResponse
   */
  async allocateInstancePublicConnection(request: $_model.AllocateInstancePublicConnectionRequest): Promise<$_model.AllocateInstancePublicConnectionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.allocateInstancePublicConnectionWithOptions(request, runtime);
  }

  /**
   * Applies for a read-only routing endpoint for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)Feature description
   * If read-only instances are attached to a primary ApsaraDB RDS for SQL Server instance, you can call this operation to apply for a unified read-only routing endpoint for the primary instance. After you apply for a read-only routing endpoint for a primary instance, the existing endpoints of the primary instance and its read-only instances remain valid. In addition, you can still apply for internal and public endpoints.
   * ### [](#)Prerequisites
   * Before you call this operation, make sure that the following requirements are met:
   * *   The shared proxy feature is enabled for your ApsaraDB RDS for MySQL instance.
   * *   The instance is in the Running state.
   * *   Read-only instances are attached to the primary instance.
   * *   The instance does not have an ongoing Data Transmission Service (DTS) migration task.
   * *   The instance runs one of the following database versions and RDS editions:
   *     *   SQL Server on RDS Cluster Edition
   *     *   MySQL 5.7 on RDS High-availability Edition (with local disks)
   *     *   MySQL 5.6
   * 
   * @param request - AllocateReadWriteSplittingConnectionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AllocateReadWriteSplittingConnectionResponse
   */
  async allocateReadWriteSplittingConnectionWithOptions(request: $_model.AllocateReadWriteSplittingConnectionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AllocateReadWriteSplittingConnectionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.connectionStringPrefix)) {
      query["ConnectionStringPrefix"] = request.connectionStringPrefix;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.distributionType)) {
      query["DistributionType"] = request.distributionType;
    }

    if (!$dara.isNull(request.maxDelayTime)) {
      query["MaxDelayTime"] = request.maxDelayTime;
    }

    if (!$dara.isNull(request.netType)) {
      query["NetType"] = request.netType;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.weight)) {
      query["Weight"] = request.weight;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AllocateReadWriteSplittingConnection",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AllocateReadWriteSplittingConnectionResponse>(await this.callApi(params, req, runtime), new $_model.AllocateReadWriteSplittingConnectionResponse({}));
  }

  /**
   * Applies for a read-only routing endpoint for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)Feature description
   * If read-only instances are attached to a primary ApsaraDB RDS for SQL Server instance, you can call this operation to apply for a unified read-only routing endpoint for the primary instance. After you apply for a read-only routing endpoint for a primary instance, the existing endpoints of the primary instance and its read-only instances remain valid. In addition, you can still apply for internal and public endpoints.
   * ### [](#)Prerequisites
   * Before you call this operation, make sure that the following requirements are met:
   * *   The shared proxy feature is enabled for your ApsaraDB RDS for MySQL instance.
   * *   The instance is in the Running state.
   * *   Read-only instances are attached to the primary instance.
   * *   The instance does not have an ongoing Data Transmission Service (DTS) migration task.
   * *   The instance runs one of the following database versions and RDS editions:
   *     *   SQL Server on RDS Cluster Edition
   *     *   MySQL 5.7 on RDS High-availability Edition (with local disks)
   *     *   MySQL 5.6
   * 
   * @param request - AllocateReadWriteSplittingConnectionRequest
   * @returns AllocateReadWriteSplittingConnectionResponse
   */
  async allocateReadWriteSplittingConnection(request: $_model.AllocateReadWriteSplittingConnectionRequest): Promise<$_model.AllocateReadWriteSplittingConnectionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.allocateReadWriteSplittingConnectionWithOptions(request, runtime);
  }

  /**
   * Associates an elastic IP address (EIP) with an RDS Custom for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Introduction to ApsaraDB RDS Custom](https://help.aliyun.com/document_detail/2864363.html)
   * ### [](#)Precautions
   * If the RDS Custom instance uses a public IP address, the public IP address is automatically released after you associate an EIP with the instance.
   * 
   * @param request - AssociateEipAddressWithRCInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AssociateEipAddressWithRCInstanceResponse
   */
  async associateEipAddressWithRCInstanceWithOptions(request: $_model.AssociateEipAddressWithRCInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AssociateEipAddressWithRCInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.allocationId)) {
      query["AllocationId"] = request.allocationId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AssociateEipAddressWithRCInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AssociateEipAddressWithRCInstanceResponse>(await this.callApi(params, req, runtime), new $_model.AssociateEipAddressWithRCInstanceResponse({}));
  }

  /**
   * Associates an elastic IP address (EIP) with an RDS Custom for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Introduction to ApsaraDB RDS Custom](https://help.aliyun.com/document_detail/2864363.html)
   * ### [](#)Precautions
   * If the RDS Custom instance uses a public IP address, the public IP address is automatically released after you associate an EIP with the instance.
   * 
   * @param request - AssociateEipAddressWithRCInstanceRequest
   * @returns AssociateEipAddressWithRCInstanceResponse
   */
  async associateEipAddressWithRCInstance(request: $_model.AssociateEipAddressWithRCInstanceRequest): Promise<$_model.AssociateEipAddressWithRCInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.associateEipAddressWithRCInstanceWithOptions(request, runtime);
  }

  /**
   * Attaches a pay-as-you-go data disk or a system disk to an RDS Custom instance. The instance and the disk must reside in the same zone.
   * 
   * @param request - AttachRCDiskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AttachRCDiskResponse
   */
  async attachRCDiskWithOptions(request: $_model.AttachRCDiskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AttachRCDiskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.deleteWithInstance)) {
      query["DeleteWithInstance"] = request.deleteWithInstance;
    }

    if (!$dara.isNull(request.diskId)) {
      query["DiskId"] = request.diskId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AttachRCDisk",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AttachRCDiskResponse>(await this.callApi(params, req, runtime), new $_model.AttachRCDiskResponse({}));
  }

  /**
   * Attaches a pay-as-you-go data disk or a system disk to an RDS Custom instance. The instance and the disk must reside in the same zone.
   * 
   * @param request - AttachRCDiskRequest
   * @returns AttachRCDiskResponse
   */
  async attachRCDisk(request: $_model.AttachRCDiskRequest): Promise<$_model.AttachRCDiskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.attachRCDiskWithOptions(request, runtime);
  }

  /**
   * Adds RDS Custom nodes to a Container Service for Kubernetes (ACK) cluster.
   * 
   * @param tmpReq - AttachRCInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AttachRCInstancesResponse
   */
  async attachRCInstancesWithOptions(tmpReq: $_model.AttachRCInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AttachRCInstancesResponse> {
    tmpReq.validate();
    let request = new $_model.AttachRCInstancesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.instanceIds)) {
      request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, "InstanceIds", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.instanceIdsShrink)) {
      query["InstanceIds"] = request.instanceIdsShrink;
    }

    if (!$dara.isNull(request.keyPair)) {
      query["KeyPair"] = request.keyPair;
    }

    if (!$dara.isNull(request.password)) {
      query["Password"] = request.password;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AttachRCInstances",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AttachRCInstancesResponse>(await this.callApi(params, req, runtime), new $_model.AttachRCInstancesResponse({}));
  }

  /**
   * Adds RDS Custom nodes to a Container Service for Kubernetes (ACK) cluster.
   * 
   * @param request - AttachRCInstancesRequest
   * @returns AttachRCInstancesResponse
   */
  async attachRCInstances(request: $_model.AttachRCInstancesRequest): Promise<$_model.AttachRCInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.attachRCInstancesWithOptions(request, runtime);
  }

  /**
   * Associates a whitelist template with an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * 
   * @param request - AttachWhitelistTemplateToInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AttachWhitelistTemplateToInstanceResponse
   */
  async attachWhitelistTemplateToInstanceWithOptions(request: $_model.AttachWhitelistTemplateToInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AttachWhitelistTemplateToInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.insName)) {
      query["InsName"] = request.insName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AttachWhitelistTemplateToInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AttachWhitelistTemplateToInstanceResponse>(await this.callApi(params, req, runtime), new $_model.AttachWhitelistTemplateToInstanceResponse({}));
  }

  /**
   * Associates a whitelist template with an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * 
   * @param request - AttachWhitelistTemplateToInstanceRequest
   * @returns AttachWhitelistTemplateToInstanceResponse
   */
  async attachWhitelistTemplateToInstance(request: $_model.AttachWhitelistTemplateToInstanceRequest): Promise<$_model.AttachWhitelistTemplateToInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.attachWhitelistTemplateToInstanceWithOptions(request, runtime);
  }

  /**
   * 新增RC安全组规则
   * 
   * @param tmpReq - AuthorizeRCSecurityGroupPermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AuthorizeRCSecurityGroupPermissionResponse
   */
  async authorizeRCSecurityGroupPermissionWithOptions(tmpReq: $_model.AuthorizeRCSecurityGroupPermissionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.AuthorizeRCSecurityGroupPermissionResponse> {
    tmpReq.validate();
    let request = new $_model.AuthorizeRCSecurityGroupPermissionShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.securityGroupPermissions)) {
      request.securityGroupPermissionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.securityGroupPermissions, "SecurityGroupPermissions", "json");
    }

    let query = { };
    if (!$dara.isNull(request.direction)) {
      query["Direction"] = request.direction;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.securityGroupId)) {
      query["SecurityGroupId"] = request.securityGroupId;
    }

    if (!$dara.isNull(request.securityGroupPermissionsShrink)) {
      query["SecurityGroupPermissions"] = request.securityGroupPermissionsShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AuthorizeRCSecurityGroupPermission",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.AuthorizeRCSecurityGroupPermissionResponse>(await this.callApi(params, req, runtime), new $_model.AuthorizeRCSecurityGroupPermissionResponse({}));
  }

  /**
   * 新增RC安全组规则
   * 
   * @param request - AuthorizeRCSecurityGroupPermissionRequest
   * @returns AuthorizeRCSecurityGroupPermissionResponse
   */
  async authorizeRCSecurityGroupPermission(request: $_model.AuthorizeRCSecurityGroupPermissionRequest): Promise<$_model.AuthorizeRCSecurityGroupPermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.authorizeRCSecurityGroupPermissionWithOptions(request, runtime);
  }

  /**
   * Queries system-assigned read weights.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)Feature description
   * When the [read/write splitting](https://help.aliyun.com/document_detail/51073.html) feature is enabled, this operation is used to calculate system-assigned read weights. For more information about custom read weights, see [DescribeDBInstanceNetInfo](https://help.aliyun.com/document_detail/610423.html).
   * ### [](#)Prerequisites
   * Before you call this operation, make sure that the following requirements are met:
   * *   If the instance runs MySQL, the instance uses a shared proxy.
   * *   The instance runs one of the following MySQL versions and RDS editions:
   *     *   MySQL 5.7 on RDS High-availability Edition (with local disks)
   *     *   MySQL 5.6
   *     *   SQL Server on RDS Cluster Edition
   * 
   * @param request - CalculateDBInstanceWeightRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CalculateDBInstanceWeightResponse
   */
  async calculateDBInstanceWeightWithOptions(request: $_model.CalculateDBInstanceWeightRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CalculateDBInstanceWeightResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CalculateDBInstanceWeight",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CalculateDBInstanceWeightResponse>(await this.callApi(params, req, runtime), new $_model.CalculateDBInstanceWeightResponse({}));
  }

  /**
   * Queries system-assigned read weights.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)Feature description
   * When the [read/write splitting](https://help.aliyun.com/document_detail/51073.html) feature is enabled, this operation is used to calculate system-assigned read weights. For more information about custom read weights, see [DescribeDBInstanceNetInfo](https://help.aliyun.com/document_detail/610423.html).
   * ### [](#)Prerequisites
   * Before you call this operation, make sure that the following requirements are met:
   * *   If the instance runs MySQL, the instance uses a shared proxy.
   * *   The instance runs one of the following MySQL versions and RDS editions:
   *     *   MySQL 5.7 on RDS High-availability Edition (with local disks)
   *     *   MySQL 5.6
   *     *   SQL Server on RDS Cluster Edition
   * 
   * @param request - CalculateDBInstanceWeightRequest
   * @returns CalculateDBInstanceWeightResponse
   */
  async calculateDBInstanceWeight(request: $_model.CalculateDBInstanceWeightRequest): Promise<$_model.CalculateDBInstanceWeightResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.calculateDBInstanceWeightWithOptions(request, runtime);
  }

  /**
   * Cancels O\\&M tasks that are not started.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Scheduled events for ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/104183.html)
   * *   [Scheduled events for ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/104452.html)
   * *   [Scheduled events for ApsaraDB RDS for SQL Server instances](https://help.aliyun.com/document_detail/104451.html)
   * *   [Scheduled events for ApsaraDB RDS for MariaDB instances](https://help.aliyun.com/document_detail/104454.html)
   * ### [](#)Usage notes
   * Tasks cannot be canceled in the following situations:
   * *   The allowCancel parameter is set to 0.
   * *   The current time is later than the task start time.
   * *   The status of the task is not set to 3. The value 3 specifies that the task is waiting to be executed.
   * 
   * @param request - CancelActiveOperationTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CancelActiveOperationTasksResponse
   */
  async cancelActiveOperationTasksWithOptions(request: $_model.CancelActiveOperationTasksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CancelActiveOperationTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ids)) {
      query["Ids"] = request.ids;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CancelActiveOperationTasks",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CancelActiveOperationTasksResponse>(await this.callApi(params, req, runtime), new $_model.CancelActiveOperationTasksResponse({}));
  }

  /**
   * Cancels O\\&M tasks that are not started.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Scheduled events for ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/104183.html)
   * *   [Scheduled events for ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/104452.html)
   * *   [Scheduled events for ApsaraDB RDS for SQL Server instances](https://help.aliyun.com/document_detail/104451.html)
   * *   [Scheduled events for ApsaraDB RDS for MariaDB instances](https://help.aliyun.com/document_detail/104454.html)
   * ### [](#)Usage notes
   * Tasks cannot be canceled in the following situations:
   * *   The allowCancel parameter is set to 0.
   * *   The current time is later than the task start time.
   * *   The status of the task is not set to 3. The value 3 specifies that the task is waiting to be executed.
   * 
   * @param request - CancelActiveOperationTasksRequest
   * @returns CancelActiveOperationTasksResponse
   */
  async cancelActiveOperationTasks(request: $_model.CancelActiveOperationTasksRequest): Promise<$_model.CancelActiveOperationTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.cancelActiveOperationTasksWithOptions(request, runtime);
  }

  /**
   * Checks whether the username of the account that you want to create on an instance is available.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - CheckAccountNameAvailableRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CheckAccountNameAvailableResponse
   */
  async checkAccountNameAvailableWithOptions(request: $_model.CheckAccountNameAvailableRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CheckAccountNameAvailableResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CheckAccountNameAvailable",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CheckAccountNameAvailableResponse>(await this.callApi(params, req, runtime), new $_model.CheckAccountNameAvailableResponse({}));
  }

  /**
   * Checks whether the username of the account that you want to create on an instance is available.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - CheckAccountNameAvailableRequest
   * @returns CheckAccountNameAvailableResponse
   */
  async checkAccountNameAvailable(request: $_model.CheckAccountNameAvailableRequest): Promise<$_model.CheckAccountNameAvailableResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.checkAccountNameAvailableWithOptions(request, runtime);
  }

  /**
   * Checks permissions that are granted on an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - CheckCloudResourceAuthorizedRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CheckCloudResourceAuthorizedResponse
   */
  async checkCloudResourceAuthorizedWithOptions(request: $_model.CheckCloudResourceAuthorizedRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CheckCloudResourceAuthorizedResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.targetRegionId)) {
      query["TargetRegionId"] = request.targetRegionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CheckCloudResourceAuthorized",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CheckCloudResourceAuthorizedResponse>(await this.callApi(params, req, runtime), new $_model.CheckCloudResourceAuthorizedResponse({}));
  }

  /**
   * Checks permissions that are granted on an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - CheckCloudResourceAuthorizedRequest
   * @returns CheckCloudResourceAuthorizedResponse
   */
  async checkCloudResourceAuthorized(request: $_model.CheckCloudResourceAuthorizedRequest): Promise<$_model.CheckCloudResourceAuthorizedResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.checkCloudResourceAuthorizedWithOptions(request, runtime);
  }

  /**
   * Queries whether an instance can be restored by using a cross-region backup set.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * >  If your ApsaraDB RDS for PostgreSQL instance uses the new architecture and is created after October 10, 2022, this feature is not supported for the RDS instance. For more information, see [[Notice\\] SLR authorization is required to create an ApsaraDB RDS for PostgreSQL instance from October 10, 2022](~~452313~~).
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html) and [Restore the data of an ApsaraDB RDS for MySQL instance across regions](https://help.aliyun.com/document_detail/120875.html)
   * *   [Use the cross-region backup feature of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html) and [Restore the data of an ApsaraDB RDS for PostgreSQL across regions](https://help.aliyun.com/document_detail/206662.html)
   * *   [Use the cross-region backup feature of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html) and [Restore the data of an ApsaraDB RDS for SQL Server across regions](https://help.aliyun.com/document_detail/187924.html)
   * 
   * @param request - CheckCreateDdrDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CheckCreateDdrDBInstanceResponse
   */
  async checkCreateDdrDBInstanceWithOptions(request: $_model.CheckCreateDdrDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CheckCreateDdrDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupSetId)) {
      query["BackupSetId"] = request.backupSetId;
    }

    if (!$dara.isNull(request.DBInstanceClass)) {
      query["DBInstanceClass"] = request.DBInstanceClass;
    }

    if (!$dara.isNull(request.DBInstanceStorage)) {
      query["DBInstanceStorage"] = request.DBInstanceStorage;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.restoreTime)) {
      query["RestoreTime"] = request.restoreTime;
    }

    if (!$dara.isNull(request.restoreType)) {
      query["RestoreType"] = request.restoreType;
    }

    if (!$dara.isNull(request.sourceDBInstanceName)) {
      query["SourceDBInstanceName"] = request.sourceDBInstanceName;
    }

    if (!$dara.isNull(request.sourceRegion)) {
      query["SourceRegion"] = request.sourceRegion;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CheckCreateDdrDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CheckCreateDdrDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.CheckCreateDdrDBInstanceResponse({}));
  }

  /**
   * Queries whether an instance can be restored by using a cross-region backup set.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * >  If your ApsaraDB RDS for PostgreSQL instance uses the new architecture and is created after October 10, 2022, this feature is not supported for the RDS instance. For more information, see [[Notice\\] SLR authorization is required to create an ApsaraDB RDS for PostgreSQL instance from October 10, 2022](~~452313~~).
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html) and [Restore the data of an ApsaraDB RDS for MySQL instance across regions](https://help.aliyun.com/document_detail/120875.html)
   * *   [Use the cross-region backup feature of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html) and [Restore the data of an ApsaraDB RDS for PostgreSQL across regions](https://help.aliyun.com/document_detail/206662.html)
   * *   [Use the cross-region backup feature of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html) and [Restore the data of an ApsaraDB RDS for SQL Server across regions](https://help.aliyun.com/document_detail/187924.html)
   * 
   * @param request - CheckCreateDdrDBInstanceRequest
   * @returns CheckCreateDdrDBInstanceResponse
   */
  async checkCreateDdrDBInstance(request: $_model.CheckCreateDdrDBInstanceRequest): Promise<$_model.CheckCreateDdrDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.checkCreateDdrDBInstanceWithOptions(request, runtime);
  }

  /**
   * Checks whether a database name is unique and conforms to the naming conventions on an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - CheckDBNameAvailableRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CheckDBNameAvailableResponse
   */
  async checkDBNameAvailableWithOptions(request: $_model.CheckDBNameAvailableRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CheckDBNameAvailableResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CheckDBNameAvailable",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CheckDBNameAvailableResponse>(await this.callApi(params, req, runtime), new $_model.CheckDBNameAvailableResponse({}));
  }

  /**
   * Checks whether a database name is unique and conforms to the naming conventions on an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - CheckDBNameAvailableRequest
   * @returns CheckDBNameAvailableResponse
   */
  async checkDBNameAvailable(request: $_model.CheckDBNameAvailableRequest): Promise<$_model.CheckDBNameAvailableResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.checkDBNameAvailableWithOptions(request, runtime);
  }

  /**
   * You can call the CheckInstanceExist operation to query whether an ApsaraDB RDS instance exists.
   * 
   * @param request - CheckInstanceExistRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CheckInstanceExistResponse
   */
  async checkInstanceExistWithOptions(request: $_model.CheckInstanceExistRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CheckInstanceExistResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CheckInstanceExist",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CheckInstanceExistResponse>(await this.callApi(params, req, runtime), new $_model.CheckInstanceExistResponse({}));
  }

  /**
   * You can call the CheckInstanceExist operation to query whether an ApsaraDB RDS instance exists.
   * 
   * @param request - CheckInstanceExistRequest
   * @returns CheckInstanceExistResponse
   */
  async checkInstanceExist(request: $_model.CheckInstanceExistRequest): Promise<$_model.CheckInstanceExistResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.checkInstanceExistWithOptions(request, runtime);
  }

  /**
   * Checks whether a service-linked role (SLR) is created.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * 
   * @param request - CheckServiceLinkedRoleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CheckServiceLinkedRoleResponse
   */
  async checkServiceLinkedRoleWithOptions(request: $_model.CheckServiceLinkedRoleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CheckServiceLinkedRoleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.serviceLinkedRole)) {
      query["ServiceLinkedRole"] = request.serviceLinkedRole;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CheckServiceLinkedRole",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CheckServiceLinkedRoleResponse>(await this.callApi(params, req, runtime), new $_model.CheckServiceLinkedRoleResponse({}));
  }

  /**
   * Checks whether a service-linked role (SLR) is created.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * 
   * @param request - CheckServiceLinkedRoleRequest
   * @returns CheckServiceLinkedRoleResponse
   */
  async checkServiceLinkedRole(request: $_model.CheckServiceLinkedRoleRequest): Promise<$_model.CheckServiceLinkedRoleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.checkServiceLinkedRoleWithOptions(request, runtime);
  }

  /**
   * Restores the data of an original instance to a new instance. The new instance is called a cloned instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Restore data of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96147.html)
   * *   [Restore data of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96776.html)
   * *   [Restore data of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95722.html)
   * *   [Restore data of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97151.html)
   * 
   * @param tmpReq - CloneDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CloneDBInstanceResponse
   */
  async cloneDBInstanceWithOptions(tmpReq: $_model.CloneDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CloneDBInstanceResponse> {
    tmpReq.validate();
    let request = new $_model.CloneDBInstanceShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.serverlessConfig)) {
      request.serverlessConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.serverlessConfig, "ServerlessConfig", "json");
    }

    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.backupType)) {
      query["BackupType"] = request.backupType;
    }

    if (!$dara.isNull(request.bpeEnabled)) {
      query["BpeEnabled"] = request.bpeEnabled;
    }

    if (!$dara.isNull(request.burstingEnabled)) {
      query["BurstingEnabled"] = request.burstingEnabled;
    }

    if (!$dara.isNull(request.category)) {
      query["Category"] = request.category;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceClass)) {
      query["DBInstanceClass"] = request.DBInstanceClass;
    }

    if (!$dara.isNull(request.DBInstanceDescription)) {
      query["DBInstanceDescription"] = request.DBInstanceDescription;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceStorage)) {
      query["DBInstanceStorage"] = request.DBInstanceStorage;
    }

    if (!$dara.isNull(request.DBInstanceStorageType)) {
      query["DBInstanceStorageType"] = request.DBInstanceStorageType;
    }

    if (!$dara.isNull(request.dbNames)) {
      query["DbNames"] = request.dbNames;
    }

    if (!$dara.isNull(request.dedicatedHostGroupId)) {
      query["DedicatedHostGroupId"] = request.dedicatedHostGroupId;
    }

    if (!$dara.isNull(request.deletionProtection)) {
      query["DeletionProtection"] = request.deletionProtection;
    }

    if (!$dara.isNull(request.instanceNetworkType)) {
      query["InstanceNetworkType"] = request.instanceNetworkType;
    }

    if (!$dara.isNull(request.ioAccelerationEnabled)) {
      query["IoAccelerationEnabled"] = request.ioAccelerationEnabled;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.privateIpAddress)) {
      query["PrivateIpAddress"] = request.privateIpAddress;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.restoreTable)) {
      query["RestoreTable"] = request.restoreTable;
    }

    if (!$dara.isNull(request.restoreTime)) {
      query["RestoreTime"] = request.restoreTime;
    }

    if (!$dara.isNull(request.serverlessConfigShrink)) {
      query["ServerlessConfig"] = request.serverlessConfigShrink;
    }

    if (!$dara.isNull(request.tableMeta)) {
      query["TableMeta"] = request.tableMeta;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    if (!$dara.isNull(request.VPCId)) {
      query["VPCId"] = request.VPCId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    if (!$dara.isNull(request.zoneIdSlave1)) {
      query["ZoneIdSlave1"] = request.zoneIdSlave1;
    }

    if (!$dara.isNull(request.zoneIdSlave2)) {
      query["ZoneIdSlave2"] = request.zoneIdSlave2;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CloneDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CloneDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.CloneDBInstanceResponse({}));
  }

  /**
   * Restores the data of an original instance to a new instance. The new instance is called a cloned instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Restore data of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96147.html)
   * *   [Restore data of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96776.html)
   * *   [Restore data of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95722.html)
   * *   [Restore data of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97151.html)
   * 
   * @param request - CloneDBInstanceRequest
   * @returns CloneDBInstanceResponse
   */
  async cloneDBInstance(request: $_model.CloneDBInstanceRequest): Promise<$_model.CloneDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.cloneDBInstanceWithOptions(request, runtime);
  }

  /**
   * Replicates a parameter template to the current region or another region.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/130565.html)
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/457176.html)
   * 
   * @param request - CloneParameterGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CloneParameterGroupResponse
   */
  async cloneParameterGroupWithOptions(request: $_model.CloneParameterGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CloneParameterGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.parameterGroupDesc)) {
      query["ParameterGroupDesc"] = request.parameterGroupDesc;
    }

    if (!$dara.isNull(request.parameterGroupId)) {
      query["ParameterGroupId"] = request.parameterGroupId;
    }

    if (!$dara.isNull(request.parameterGroupName)) {
      query["ParameterGroupName"] = request.parameterGroupName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.targetRegionId)) {
      query["TargetRegionId"] = request.targetRegionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CloneParameterGroup",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CloneParameterGroupResponse>(await this.callApi(params, req, runtime), new $_model.CloneParameterGroupResponse({}));
  }

  /**
   * Replicates a parameter template to the current region or another region.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/130565.html)
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/457176.html)
   * 
   * @param request - CloneParameterGroupRequest
   * @returns CloneParameterGroupResponse
   */
  async cloneParameterGroup(request: $_model.CloneParameterGroupRequest): Promise<$_model.CloneParameterGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.cloneParameterGroupWithOptions(request, runtime);
  }

  /**
   * Marks the notifications of an instance within your Alibaba Cloud account as confirmed.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Feature description
   * After you call the [QueryNotify](https://help.aliyun.com/document_detail/610443.html) operation to query notifications for an instance, you can call this operation to mark the notifications as confirmed.
   * 
   * @param tmpReq - ConfirmNotifyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ConfirmNotifyResponse
   */
  async confirmNotifyWithOptions(tmpReq: $_model.ConfirmNotifyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ConfirmNotifyResponse> {
    tmpReq.validate();
    let request = new $_model.ConfirmNotifyShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.notifyIdList)) {
      request.notifyIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notifyIdList, "NotifyIdList", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.confirmor)) {
      body["Confirmor"] = request.confirmor;
    }

    if (!$dara.isNull(request.notifyIdListShrink)) {
      body["NotifyIdList"] = request.notifyIdListShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ConfirmNotify",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ConfirmNotifyResponse>(await this.callApi(params, req, runtime), new $_model.ConfirmNotifyResponse({}));
  }

  /**
   * Marks the notifications of an instance within your Alibaba Cloud account as confirmed.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Feature description
   * After you call the [QueryNotify](https://help.aliyun.com/document_detail/610443.html) operation to query notifications for an instance, you can call this operation to mark the notifications as confirmed.
   * 
   * @param request - ConfirmNotifyRequest
   * @returns ConfirmNotifyResponse
   */
  async confirmNotify(request: $_model.ConfirmNotifyRequest): Promise<$_model.ConfirmNotifyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.confirmNotifyWithOptions(request, runtime);
  }

  /**
   * Replicates the databases of an instance that runs SQL Server 2008 R2 to another instance. This operation is phased out.
   * 
   * @remarks
   * This operation is phased out.
   * 
   * @param request - CopyDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CopyDatabaseResponse
   */
  async copyDatabaseWithOptions(request: $_model.CopyDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CopyDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.dstDBName)) {
      query["DstDBName"] = request.dstDBName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.reserveAccount)) {
      query["ReserveAccount"] = request.reserveAccount;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.srcDBName)) {
      query["SrcDBName"] = request.srcDBName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CopyDatabase",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CopyDatabaseResponse>(await this.callApi(params, req, runtime), new $_model.CopyDatabaseResponse({}));
  }

  /**
   * Replicates the databases of an instance that runs SQL Server 2008 R2 to another instance. This operation is phased out.
   * 
   * @remarks
   * This operation is phased out.
   * 
   * @param request - CopyDatabaseRequest
   * @returns CopyDatabaseResponse
   */
  async copyDatabase(request: $_model.CopyDatabaseRequest): Promise<$_model.CopyDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.copyDatabaseWithOptions(request, runtime);
  }

  /**
   * Replicates databases between RDS SQL Server instances.
   * 
   * @remarks
   * ### Supported database engines
   * RDS SQL Server
   * ### References
   * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Replicate databases between ApsaraDB RDS for SQL Server instances](https://help.aliyun.com/document_detail/95702.html)
   * 
   * @param request - CopyDatabaseBetweenInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CopyDatabaseBetweenInstancesResponse
   */
  async copyDatabaseBetweenInstancesWithOptions(request: $_model.CopyDatabaseBetweenInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CopyDatabaseBetweenInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.dbNames)) {
      query["DbNames"] = request.dbNames;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.restoreTime)) {
      query["RestoreTime"] = request.restoreTime;
    }

    if (!$dara.isNull(request.syncUserPrivilege)) {
      query["SyncUserPrivilege"] = request.syncUserPrivilege;
    }

    if (!$dara.isNull(request.targetDBInstanceId)) {
      query["TargetDBInstanceId"] = request.targetDBInstanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CopyDatabaseBetweenInstances",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CopyDatabaseBetweenInstancesResponse>(await this.callApi(params, req, runtime), new $_model.CopyDatabaseBetweenInstancesResponse({}));
  }

  /**
   * Replicates databases between RDS SQL Server instances.
   * 
   * @remarks
   * ### Supported database engines
   * RDS SQL Server
   * ### References
   * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Replicate databases between ApsaraDB RDS for SQL Server instances](https://help.aliyun.com/document_detail/95702.html)
   * 
   * @param request - CopyDatabaseBetweenInstancesRequest
   * @returns CopyDatabaseBetweenInstancesResponse
   */
  async copyDatabaseBetweenInstances(request: $_model.CopyDatabaseBetweenInstancesRequest): Promise<$_model.CopyDatabaseBetweenInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.copyDatabaseBetweenInstancesWithOptions(request, runtime);
  }

  /**
   * Creates a database account.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * ### References
   * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Create an account on an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96089.html)
   * *   [Create an account on an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96753.html)
   * *   [Create an account on an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95810.html)
   * *   [Create an account on an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97132.html)
   * 
   * @param request - CreateAccountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAccountResponse
   */
  async createAccountWithOptions(request: $_model.CreateAccountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateAccountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountDescription)) {
      query["AccountDescription"] = request.accountDescription;
    }

    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.accountPassword)) {
      query["AccountPassword"] = request.accountPassword;
    }

    if (!$dara.isNull(request.accountType)) {
      query["AccountType"] = request.accountType;
    }

    if (!$dara.isNull(request.checkPolicy)) {
      query["CheckPolicy"] = request.checkPolicy;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAccount",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateAccountResponse>(await this.callApi(params, req, runtime), new $_model.CreateAccountResponse({}));
  }

  /**
   * Creates a database account.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * ### References
   * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Create an account on an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96089.html)
   * *   [Create an account on an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96753.html)
   * *   [Create an account on an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95810.html)
   * *   [Create an account on an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97132.html)
   * 
   * @param request - CreateAccountRequest
   * @returns CreateAccountResponse
   */
  async createAccount(request: $_model.CreateAccountRequest): Promise<$_model.CreateAccountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAccountWithOptions(request, runtime);
  }

  /**
   * Creates a backup file for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Feature description
   * This operation uses the backup feature of ApsaraDB RDS to create a backup set. You can also call an operation of Database Backup (DBS) to create a backup set. For more information, see [List of operations by function](https://help.aliyun.com/document_detail/2402073.html).
   * ### [](#)Prerequisites
   * Before you call this operation, make sure that the following requirements are met:
   * *   The instance is in the Running state.
   * *   The instance does not have ongoing backup tasks.
   * *   The number of backup sets that can be created for an instance per day cannot exceed 20.
   * ### [](#)References
   * *   [Use the data backup feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/378074.html)
   * *   [Use the data backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96772.html)
   * *   [Use the data backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95717.html)
   * *   [Use the data backup feature for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97147.html)
   * 
   * @param request - CreateBackupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateBackupResponse
   */
  async createBackupWithOptions(request: $_model.CreateBackupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateBackupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupMethod)) {
      query["BackupMethod"] = request.backupMethod;
    }

    if (!$dara.isNull(request.backupStrategy)) {
      query["BackupStrategy"] = request.backupStrategy;
    }

    if (!$dara.isNull(request.backupType)) {
      query["BackupType"] = request.backupType;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateBackup",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateBackupResponse>(await this.callApi(params, req, runtime), new $_model.CreateBackupResponse({}));
  }

  /**
   * Creates a backup file for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Feature description
   * This operation uses the backup feature of ApsaraDB RDS to create a backup set. You can also call an operation of Database Backup (DBS) to create a backup set. For more information, see [List of operations by function](https://help.aliyun.com/document_detail/2402073.html).
   * ### [](#)Prerequisites
   * Before you call this operation, make sure that the following requirements are met:
   * *   The instance is in the Running state.
   * *   The instance does not have ongoing backup tasks.
   * *   The number of backup sets that can be created for an instance per day cannot exceed 20.
   * ### [](#)References
   * *   [Use the data backup feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/378074.html)
   * *   [Use the data backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96772.html)
   * *   [Use the data backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95717.html)
   * *   [Use the data backup feature for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97147.html)
   * 
   * @param request - CreateBackupRequest
   * @returns CreateBackupResponse
   */
  async createBackup(request: $_model.CreateBackupRequest): Promise<$_model.CreateBackupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createBackupWithOptions(request, runtime);
  }

  /**
   * Creates an assessment task for cloud migration to an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Use the cloud migration feature](https://help.aliyun.com/document_detail/365562.html)
   * 
   * @param request - CreateCloudMigrationPrecheckTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCloudMigrationPrecheckTaskResponse
   */
  async createCloudMigrationPrecheckTaskWithOptions(request: $_model.CreateCloudMigrationPrecheckTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateCloudMigrationPrecheckTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceAccount)) {
      query["SourceAccount"] = request.sourceAccount;
    }

    if (!$dara.isNull(request.sourceCategory)) {
      query["SourceCategory"] = request.sourceCategory;
    }

    if (!$dara.isNull(request.sourceIpAddress)) {
      query["SourceIpAddress"] = request.sourceIpAddress;
    }

    if (!$dara.isNull(request.sourcePassword)) {
      query["SourcePassword"] = request.sourcePassword;
    }

    if (!$dara.isNull(request.sourcePort)) {
      query["SourcePort"] = request.sourcePort;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateCloudMigrationPrecheckTask",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateCloudMigrationPrecheckTaskResponse>(await this.callApi(params, req, runtime), new $_model.CreateCloudMigrationPrecheckTaskResponse({}));
  }

  /**
   * Creates an assessment task for cloud migration to an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Use the cloud migration feature](https://help.aliyun.com/document_detail/365562.html)
   * 
   * @param request - CreateCloudMigrationPrecheckTaskRequest
   * @returns CreateCloudMigrationPrecheckTaskResponse
   */
  async createCloudMigrationPrecheckTask(request: $_model.CreateCloudMigrationPrecheckTaskRequest): Promise<$_model.CreateCloudMigrationPrecheckTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createCloudMigrationPrecheckTaskWithOptions(request, runtime);
  }

  /**
   * Creates a cloud migration task for an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Use the cloud migration feature](https://help.aliyun.com/document_detail/365562.html)
   * 
   * @param request - CreateCloudMigrationTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateCloudMigrationTaskResponse
   */
  async createCloudMigrationTaskWithOptions(request: $_model.CreateCloudMigrationTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateCloudMigrationTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceAccount)) {
      query["SourceAccount"] = request.sourceAccount;
    }

    if (!$dara.isNull(request.sourceCategory)) {
      query["SourceCategory"] = request.sourceCategory;
    }

    if (!$dara.isNull(request.sourceIpAddress)) {
      query["SourceIpAddress"] = request.sourceIpAddress;
    }

    if (!$dara.isNull(request.sourcePassword)) {
      query["SourcePassword"] = request.sourcePassword;
    }

    if (!$dara.isNull(request.sourcePort)) {
      query["SourcePort"] = request.sourcePort;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateCloudMigrationTask",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateCloudMigrationTaskResponse>(await this.callApi(params, req, runtime), new $_model.CreateCloudMigrationTaskResponse({}));
  }

  /**
   * Creates a cloud migration task for an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Use the cloud migration feature](https://help.aliyun.com/document_detail/365562.html)
   * 
   * @param request - CreateCloudMigrationTaskRequest
   * @returns CreateCloudMigrationTaskResponse
   */
  async createCloudMigrationTask(request: $_model.CreateCloudMigrationTaskRequest): Promise<$_model.CreateCloudMigrationTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createCloudMigrationTaskWithOptions(request, runtime);
  }

  /**
   * Creates an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * >  Fees of an instance are changed if the call is successful. Before you call this operation, carefully read the related topics. If an error message appears when you call this operation, you can search for the error message to view the cause of the error.
   * *   [Create an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/148036.html).
   * *   [Create a serverless ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/412231.html).
   * *   [Create an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/148038.html)
   * *   [Create a serverless ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/607753.html)
   * *   [Create an ApsaraDB RDS for PostgreSQL instance for which Babelfish is enabled](https://help.aliyun.com/document_detail/428615.html)
   * *   [Create an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/148037.html)
   * *   [Create a serverless ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/603465.html)
   * *   [Create an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/148040.html)
   * 
   * @param tmpReq - CreateDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDBInstanceResponse
   */
  async createDBInstanceWithOptions(tmpReq: $_model.CreateDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateDBInstanceResponse> {
    tmpReq.validate();
    let request = new $_model.CreateDBInstanceShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.serverlessConfig)) {
      request.serverlessConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.serverlessConfig, "ServerlessConfig", "json");
    }

    let query = { };
    if (!$dara.isNull(request.amount)) {
      query["Amount"] = request.amount;
    }

    if (!$dara.isNull(request.autoCreateProxy)) {
      query["AutoCreateProxy"] = request.autoCreateProxy;
    }

    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.autoUseCoupon)) {
      query["AutoUseCoupon"] = request.autoUseCoupon;
    }

    if (!$dara.isNull(request.babelfishConfig)) {
      query["BabelfishConfig"] = request.babelfishConfig;
    }

    if (!$dara.isNull(request.bpeEnabled)) {
      query["BpeEnabled"] = request.bpeEnabled;
    }

    if (!$dara.isNull(request.burstingEnabled)) {
      query["BurstingEnabled"] = request.burstingEnabled;
    }

    if (!$dara.isNull(request.businessInfo)) {
      query["BusinessInfo"] = request.businessInfo;
    }

    if (!$dara.isNull(request.category)) {
      query["Category"] = request.category;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.coldDataEnabled)) {
      query["ColdDataEnabled"] = request.coldDataEnabled;
    }

    if (!$dara.isNull(request.connectionMode)) {
      query["ConnectionMode"] = request.connectionMode;
    }

    if (!$dara.isNull(request.connectionString)) {
      query["ConnectionString"] = request.connectionString;
    }

    if (!$dara.isNull(request.createStrategy)) {
      query["CreateStrategy"] = request.createStrategy;
    }

    if (!$dara.isNull(request.DBInstanceClass)) {
      query["DBInstanceClass"] = request.DBInstanceClass;
    }

    if (!$dara.isNull(request.DBInstanceDescription)) {
      query["DBInstanceDescription"] = request.DBInstanceDescription;
    }

    if (!$dara.isNull(request.DBInstanceNetType)) {
      query["DBInstanceNetType"] = request.DBInstanceNetType;
    }

    if (!$dara.isNull(request.DBInstanceStorage)) {
      query["DBInstanceStorage"] = request.DBInstanceStorage;
    }

    if (!$dara.isNull(request.DBInstanceStorageType)) {
      query["DBInstanceStorageType"] = request.DBInstanceStorageType;
    }

    if (!$dara.isNull(request.DBIsIgnoreCase)) {
      query["DBIsIgnoreCase"] = request.DBIsIgnoreCase;
    }

    if (!$dara.isNull(request.DBParamGroupId)) {
      query["DBParamGroupId"] = request.DBParamGroupId;
    }

    if (!$dara.isNull(request.DBTimeZone)) {
      query["DBTimeZone"] = request.DBTimeZone;
    }

    if (!$dara.isNull(request.dedicatedHostGroupId)) {
      query["DedicatedHostGroupId"] = request.dedicatedHostGroupId;
    }

    if (!$dara.isNull(request.deletionProtection)) {
      query["DeletionProtection"] = request.deletionProtection;
    }

    if (!$dara.isNull(request.dryRun)) {
      query["DryRun"] = request.dryRun;
    }

    if (!$dara.isNull(request.encryptionKey)) {
      query["EncryptionKey"] = request.encryptionKey;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.instanceNetworkType)) {
      query["InstanceNetworkType"] = request.instanceNetworkType;
    }

    if (!$dara.isNull(request.ioAccelerationEnabled)) {
      query["IoAccelerationEnabled"] = request.ioAccelerationEnabled;
    }

    if (!$dara.isNull(request.optimizedWrites)) {
      query["OptimizedWrites"] = request.optimizedWrites;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.privateIpAddress)) {
      query["PrivateIpAddress"] = request.privateIpAddress;
    }

    if (!$dara.isNull(request.promotionCode)) {
      query["PromotionCode"] = request.promotionCode;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.roleARN)) {
      query["RoleARN"] = request.roleARN;
    }

    if (!$dara.isNull(request.securityIPList)) {
      query["SecurityIPList"] = request.securityIPList;
    }

    if (!$dara.isNull(request.serverlessConfigShrink)) {
      query["ServerlessConfig"] = request.serverlessConfigShrink;
    }

    if (!$dara.isNull(request.storageAutoScale)) {
      query["StorageAutoScale"] = request.storageAutoScale;
    }

    if (!$dara.isNull(request.storageThreshold)) {
      query["StorageThreshold"] = request.storageThreshold;
    }

    if (!$dara.isNull(request.storageUpperBound)) {
      query["StorageUpperBound"] = request.storageUpperBound;
    }

    if (!$dara.isNull(request.systemDBCharset)) {
      query["SystemDBCharset"] = request.systemDBCharset;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.targetDedicatedHostIdForLog)) {
      query["TargetDedicatedHostIdForLog"] = request.targetDedicatedHostIdForLog;
    }

    if (!$dara.isNull(request.targetDedicatedHostIdForMaster)) {
      query["TargetDedicatedHostIdForMaster"] = request.targetDedicatedHostIdForMaster;
    }

    if (!$dara.isNull(request.targetDedicatedHostIdForSlave)) {
      query["TargetDedicatedHostIdForSlave"] = request.targetDedicatedHostIdForSlave;
    }

    if (!$dara.isNull(request.targetMinorVersion)) {
      query["TargetMinorVersion"] = request.targetMinorVersion;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    if (!$dara.isNull(request.userBackupId)) {
      query["UserBackupId"] = request.userBackupId;
    }

    if (!$dara.isNull(request.VPCId)) {
      query["VPCId"] = request.VPCId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.whitelistTemplateList)) {
      query["WhitelistTemplateList"] = request.whitelistTemplateList;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    if (!$dara.isNull(request.zoneIdSlave1)) {
      query["ZoneIdSlave1"] = request.zoneIdSlave1;
    }

    if (!$dara.isNull(request.zoneIdSlave2)) {
      query["ZoneIdSlave2"] = request.zoneIdSlave2;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.CreateDBInstanceResponse({}));
  }

  /**
   * Creates an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * >  Fees of an instance are changed if the call is successful. Before you call this operation, carefully read the related topics. If an error message appears when you call this operation, you can search for the error message to view the cause of the error.
   * *   [Create an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/148036.html).
   * *   [Create a serverless ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/412231.html).
   * *   [Create an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/148038.html)
   * *   [Create a serverless ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/607753.html)
   * *   [Create an ApsaraDB RDS for PostgreSQL instance for which Babelfish is enabled](https://help.aliyun.com/document_detail/428615.html)
   * *   [Create an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/148037.html)
   * *   [Create a serverless ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/603465.html)
   * *   [Create an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/148040.html)
   * 
   * @param request - CreateDBInstanceRequest
   * @returns CreateDBInstanceResponse
   */
  async createDBInstance(request: $_model.CreateDBInstanceRequest): Promise<$_model.CreateDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDBInstanceWithOptions(request, runtime);
  }

  /**
   * Creates an endpoint for an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Create a read-only endpoint for a cluster](https://help.aliyun.com/document_detail/464132.html)
   * 
   * @param tmpReq - CreateDBInstanceEndpointRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDBInstanceEndpointResponse
   */
  async createDBInstanceEndpointWithOptions(tmpReq: $_model.CreateDBInstanceEndpointRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateDBInstanceEndpointResponse> {
    tmpReq.validate();
    let request = new $_model.CreateDBInstanceEndpointShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.nodeItems)) {
      request.nodeItemsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodeItems, "NodeItems", "json");
    }

    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.connectionStringPrefix)) {
      query["ConnectionStringPrefix"] = request.connectionStringPrefix;
    }

    if (!$dara.isNull(request.DBInstanceEndpointDescription)) {
      query["DBInstanceEndpointDescription"] = request.DBInstanceEndpointDescription;
    }

    if (!$dara.isNull(request.DBInstanceEndpointType)) {
      query["DBInstanceEndpointType"] = request.DBInstanceEndpointType;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.nodeItemsShrink)) {
      query["NodeItems"] = request.nodeItemsShrink;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.privateIpAddress)) {
      query["PrivateIpAddress"] = request.privateIpAddress;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDBInstanceEndpoint",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateDBInstanceEndpointResponse>(await this.callApi(params, req, runtime), new $_model.CreateDBInstanceEndpointResponse({}));
  }

  /**
   * Creates an endpoint for an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Create a read-only endpoint for a cluster](https://help.aliyun.com/document_detail/464132.html)
   * 
   * @param request - CreateDBInstanceEndpointRequest
   * @returns CreateDBInstanceEndpointResponse
   */
  async createDBInstanceEndpoint(request: $_model.CreateDBInstanceEndpointRequest): Promise<$_model.CreateDBInstanceEndpointResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDBInstanceEndpointWithOptions(request, runtime);
  }

  /**
   * Creates a public endpoint for an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * MySQL
   * ### [](#)Precautions
   * *   You can create a public endpoint of an endpoint type only when no public endpoint is created for this endpoint type.
   * *   The node weights and other configurations are the same as those of the internal endpoint of this endpoint type. Each type of endpoint can contain an internal endpoint and a public endpoint.
   * 
   * @param request - CreateDBInstanceEndpointAddressRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDBInstanceEndpointAddressResponse
   */
  async createDBInstanceEndpointAddressWithOptions(request: $_model.CreateDBInstanceEndpointAddressRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateDBInstanceEndpointAddressResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.connectionStringPrefix)) {
      query["ConnectionStringPrefix"] = request.connectionStringPrefix;
    }

    if (!$dara.isNull(request.DBInstanceEndpointId)) {
      query["DBInstanceEndpointId"] = request.DBInstanceEndpointId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ipType)) {
      query["IpType"] = request.ipType;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDBInstanceEndpointAddress",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateDBInstanceEndpointAddressResponse>(await this.callApi(params, req, runtime), new $_model.CreateDBInstanceEndpointAddressResponse({}));
  }

  /**
   * Creates a public endpoint for an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * MySQL
   * ### [](#)Precautions
   * *   You can create a public endpoint of an endpoint type only when no public endpoint is created for this endpoint type.
   * *   The node weights and other configurations are the same as those of the internal endpoint of this endpoint type. Each type of endpoint can contain an internal endpoint and a public endpoint.
   * 
   * @param request - CreateDBInstanceEndpointAddressRequest
   * @returns CreateDBInstanceEndpointAddressResponse
   */
  async createDBInstanceEndpointAddress(request: $_model.CreateDBInstanceEndpointAddressRequest): Promise<$_model.CreateDBInstanceEndpointAddressResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDBInstanceEndpointAddressWithOptions(request, runtime);
  }

  /**
   * Rebuilds an instance from the recycle bin.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * ### References
   * > : Fees are generated if the call is successful. Before you call this operation, carefully read the following documentation:
   * *   [Manage ApsaraDB RDS for MySQL instances in the recycle bin](https://help.aliyun.com/document_detail/96065.html)
   * *   [Manage ApsaraDB RDS for PostgreSQL instances in the recycle bin](https://help.aliyun.com/document_detail/96752.html)
   * *   [Manage ApsaraDB RDS for SQL Server instances in the recycle bin](https://help.aliyun.com/document_detail/95669.html)
   * *   [Manage ApsaraDB RDS for MariaDB instances in the recycle bin](https://help.aliyun.com/document_detail/97131.html)
   * 
   * @param request - CreateDBInstanceForRebuildRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDBInstanceForRebuildResponse
   */
  async createDBInstanceForRebuildWithOptions(request: $_model.CreateDBInstanceForRebuildRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateDBInstanceForRebuildResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceDescription)) {
      query["DBInstanceDescription"] = request.DBInstanceDescription;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceNetType)) {
      query["DBInstanceNetType"] = request.DBInstanceNetType;
    }

    if (!$dara.isNull(request.instanceNetworkType)) {
      query["InstanceNetworkType"] = request.instanceNetworkType;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityIPList)) {
      query["SecurityIPList"] = request.securityIPList;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    if (!$dara.isNull(request.VPCId)) {
      query["VPCId"] = request.VPCId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    if (!$dara.isNull(request.zoneIdSlave1)) {
      query["ZoneIdSlave1"] = request.zoneIdSlave1;
    }

    if (!$dara.isNull(request.zoneIdSlave2)) {
      query["ZoneIdSlave2"] = request.zoneIdSlave2;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDBInstanceForRebuild",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateDBInstanceForRebuildResponse>(await this.callApi(params, req, runtime), new $_model.CreateDBInstanceForRebuildResponse({}));
  }

  /**
   * Rebuilds an instance from the recycle bin.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * ### References
   * > : Fees are generated if the call is successful. Before you call this operation, carefully read the following documentation:
   * *   [Manage ApsaraDB RDS for MySQL instances in the recycle bin](https://help.aliyun.com/document_detail/96065.html)
   * *   [Manage ApsaraDB RDS for PostgreSQL instances in the recycle bin](https://help.aliyun.com/document_detail/96752.html)
   * *   [Manage ApsaraDB RDS for SQL Server instances in the recycle bin](https://help.aliyun.com/document_detail/95669.html)
   * *   [Manage ApsaraDB RDS for MariaDB instances in the recycle bin](https://help.aliyun.com/document_detail/97131.html)
   * 
   * @param request - CreateDBInstanceForRebuildRequest
   * @returns CreateDBInstanceForRebuildResponse
   */
  async createDBInstanceForRebuild(request: $_model.CreateDBInstanceForRebuildRequest): Promise<$_model.CreateDBInstanceForRebuildResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDBInstanceForRebuildWithOptions(request, runtime);
  }

  /**
   * Adds a security group rule to an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Configure security group settings for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/2392322.html)
   * 
   * @param request - CreateDBInstanceSecurityGroupRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDBInstanceSecurityGroupRuleResponse
   */
  async createDBInstanceSecurityGroupRuleWithOptions(request: $_model.CreateDBInstanceSecurityGroupRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateDBInstanceSecurityGroupRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.ipProtocol)) {
      query["IpProtocol"] = request.ipProtocol;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.portRange)) {
      query["PortRange"] = request.portRange;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceCidrIp)) {
      query["SourceCidrIp"] = request.sourceCidrIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDBInstanceSecurityGroupRule",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateDBInstanceSecurityGroupRuleResponse>(await this.callApi(params, req, runtime), new $_model.CreateDBInstanceSecurityGroupRuleResponse({}));
  }

  /**
   * Adds a security group rule to an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Configure security group settings for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/2392322.html)
   * 
   * @param request - CreateDBInstanceSecurityGroupRuleRequest
   * @returns CreateDBInstanceSecurityGroupRuleResponse
   */
  async createDBInstanceSecurityGroupRule(request: $_model.CreateDBInstanceSecurityGroupRuleRequest): Promise<$_model.CreateDBInstanceSecurityGroupRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDBInstanceSecurityGroupRuleWithOptions(request, runtime);
  }

  /**
   * Adds a node to an ApsaraDB RDS for MySQL or ApsaraDB RDS for PostgreSQL instance that runs RDS Cluster Edition. An RDS instance that runs RDS Cluster Edition is referred to as an RDS cluster.
   * 
   * @remarks
   * ### Supported database engines
   * MySQL
   * ### References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Add a node to an ApsaraDB RDS for MySQL cluster](https://help.aliyun.com/document_detail/464129.html)
   * 
   * @param tmpReq - CreateDBNodesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDBNodesResponse
   */
  async createDBNodesWithOptions(tmpReq: $_model.CreateDBNodesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateDBNodesResponse> {
    tmpReq.validate();
    let request = new $_model.CreateDBNodesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.DBNode)) {
      request.DBNodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBNode, "DBNode", "json");
    }

    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBNodeShrink)) {
      query["DBNode"] = request.DBNodeShrink;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDBNodes",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateDBNodesResponse>(await this.callApi(params, req, runtime), new $_model.CreateDBNodesResponse({}));
  }

  /**
   * Adds a node to an ApsaraDB RDS for MySQL or ApsaraDB RDS for PostgreSQL instance that runs RDS Cluster Edition. An RDS instance that runs RDS Cluster Edition is referred to as an RDS cluster.
   * 
   * @remarks
   * ### Supported database engines
   * MySQL
   * ### References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Add a node to an ApsaraDB RDS for MySQL cluster](https://help.aliyun.com/document_detail/464129.html)
   * 
   * @param request - CreateDBNodesRequest
   * @returns CreateDBNodesResponse
   */
  async createDBNodes(request: $_model.CreateDBNodesRequest): Promise<$_model.CreateDBNodesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDBNodesWithOptions(request, runtime);
  }

  /**
   * Creates the endpoint that is used to connect to the dedicated proxy of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/184921.html)
   * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/418274.html)
   * 
   * @param request - CreateDBProxyEndpointAddressRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDBProxyEndpointAddressResponse
   */
  async createDBProxyEndpointAddressWithOptions(request: $_model.CreateDBProxyEndpointAddressRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateDBProxyEndpointAddressResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.connectionStringPrefix)) {
      query["ConnectionStringPrefix"] = request.connectionStringPrefix;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBProxyConnectStringNetType)) {
      query["DBProxyConnectStringNetType"] = request.DBProxyConnectStringNetType;
    }

    if (!$dara.isNull(request.DBProxyEndpointId)) {
      query["DBProxyEndpointId"] = request.DBProxyEndpointId;
    }

    if (!$dara.isNull(request.DBProxyEngineType)) {
      query["DBProxyEngineType"] = request.DBProxyEngineType;
    }

    if (!$dara.isNull(request.DBProxyNewConnectStringPort)) {
      query["DBProxyNewConnectStringPort"] = request.DBProxyNewConnectStringPort;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.VPCId)) {
      query["VPCId"] = request.VPCId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDBProxyEndpointAddress",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateDBProxyEndpointAddressResponse>(await this.callApi(params, req, runtime), new $_model.CreateDBProxyEndpointAddressResponse({}));
  }

  /**
   * Creates the endpoint that is used to connect to the dedicated proxy of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/184921.html)
   * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/418274.html)
   * 
   * @param request - CreateDBProxyEndpointAddressRequest
   * @returns CreateDBProxyEndpointAddressResponse
   */
  async createDBProxyEndpointAddress(request: $_model.CreateDBProxyEndpointAddressRequest): Promise<$_model.CreateDBProxyEndpointAddressResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDBProxyEndpointAddressWithOptions(request, runtime);
  }

  /**
   * Creates a database in an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Create a database in an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96105.html)
   * *   [Create a database in an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96758.html)
   * *   [Create a database in an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95698.html)
   * *   [Create a database in an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97136.html)
   * 
   * @param request - CreateDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDatabaseResponse
   */
  async createDatabaseWithOptions(request: $_model.CreateDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.characterSetName)) {
      query["CharacterSetName"] = request.characterSetName;
    }

    if (!$dara.isNull(request.DBDescription)) {
      query["DBDescription"] = request.DBDescription;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDatabase",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateDatabaseResponse>(await this.callApi(params, req, runtime), new $_model.CreateDatabaseResponse({}));
  }

  /**
   * Creates a database in an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Create a database in an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96105.html)
   * *   [Create a database in an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96758.html)
   * *   [Create a database in an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95698.html)
   * *   [Create a database in an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97136.html)
   * 
   * @param request - CreateDatabaseRequest
   * @returns CreateDatabaseResponse
   */
  async createDatabase(request: $_model.CreateDatabaseRequest): Promise<$_model.CreateDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDatabaseWithOptions(request, runtime);
  }

  /**
   * Restores data to a new instance across regions.
   * 
   * @remarks
   * >  Before restoration, you can call the CheckCreateDdrDBInstance operation to check whether a cross-region backup set can be used for cross-region restoration.
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * 
   * @param request - CreateDdrInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDdrInstanceResponse
   */
  async createDdrInstanceWithOptions(request: $_model.CreateDdrInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateDdrInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupSetId)) {
      query["BackupSetId"] = request.backupSetId;
    }

    if (!$dara.isNull(request.backupSetRegion)) {
      query["BackupSetRegion"] = request.backupSetRegion;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.connectionMode)) {
      query["ConnectionMode"] = request.connectionMode;
    }

    if (!$dara.isNull(request.DBInstanceClass)) {
      query["DBInstanceClass"] = request.DBInstanceClass;
    }

    if (!$dara.isNull(request.DBInstanceDescription)) {
      query["DBInstanceDescription"] = request.DBInstanceDescription;
    }

    if (!$dara.isNull(request.DBInstanceNetType)) {
      query["DBInstanceNetType"] = request.DBInstanceNetType;
    }

    if (!$dara.isNull(request.DBInstanceStorage)) {
      query["DBInstanceStorage"] = request.DBInstanceStorage;
    }

    if (!$dara.isNull(request.DBInstanceStorageType)) {
      query["DBInstanceStorageType"] = request.DBInstanceStorageType;
    }

    if (!$dara.isNull(request.encryptionKey)) {
      query["EncryptionKey"] = request.encryptionKey;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.instanceNetworkType)) {
      query["InstanceNetworkType"] = request.instanceNetworkType;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.privateIpAddress)) {
      query["PrivateIpAddress"] = request.privateIpAddress;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.restoreTime)) {
      query["RestoreTime"] = request.restoreTime;
    }

    if (!$dara.isNull(request.restoreType)) {
      query["RestoreType"] = request.restoreType;
    }

    if (!$dara.isNull(request.roleARN)) {
      query["RoleARN"] = request.roleARN;
    }

    if (!$dara.isNull(request.securityIPList)) {
      query["SecurityIPList"] = request.securityIPList;
    }

    if (!$dara.isNull(request.sourceDBInstanceName)) {
      query["SourceDBInstanceName"] = request.sourceDBInstanceName;
    }

    if (!$dara.isNull(request.sourceRegion)) {
      query["SourceRegion"] = request.sourceRegion;
    }

    if (!$dara.isNull(request.systemDBCharset)) {
      query["SystemDBCharset"] = request.systemDBCharset;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    if (!$dara.isNull(request.VPCId)) {
      query["VPCId"] = request.VPCId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDdrInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateDdrInstanceResponse>(await this.callApi(params, req, runtime), new $_model.CreateDdrInstanceResponse({}));
  }

  /**
   * Restores data to a new instance across regions.
   * 
   * @remarks
   * >  Before restoration, you can call the CheckCreateDdrDBInstance operation to check whether a cross-region backup set can be used for cross-region restoration.
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * 
   * @param request - CreateDdrInstanceRequest
   * @returns CreateDdrInstanceResponse
   */
  async createDdrInstance(request: $_model.CreateDdrInstanceRequest): Promise<$_model.CreateDdrInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDdrInstanceWithOptions(request, runtime);
  }

  /**
   * Creates an ApsaraDB RDS global active database cluster.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * 
   * @param request - CreateGADInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateGADInstanceResponse
   */
  async createGADInstanceWithOptions(request: $_model.CreateGADInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateGADInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.centralDBInstanceId)) {
      query["CentralDBInstanceId"] = request.centralDBInstanceId;
    }

    if (!$dara.isNull(request.centralRdsDtsAdminAccount)) {
      query["CentralRdsDtsAdminAccount"] = request.centralRdsDtsAdminAccount;
    }

    if (!$dara.isNull(request.centralRdsDtsAdminPassword)) {
      query["CentralRdsDtsAdminPassword"] = request.centralRdsDtsAdminPassword;
    }

    if (!$dara.isNull(request.centralRegionId)) {
      query["CentralRegionId"] = request.centralRegionId;
    }

    if (!$dara.isNull(request.DBList)) {
      query["DBList"] = request.DBList;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.unitNode)) {
      query["UnitNode"] = request.unitNode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateGADInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateGADInstanceResponse>(await this.callApi(params, req, runtime), new $_model.CreateGADInstanceResponse({}));
  }

  /**
   * Creates an ApsaraDB RDS global active database cluster.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * 
   * @param request - CreateGADInstanceRequest
   * @returns CreateGADInstanceResponse
   */
  async createGADInstance(request: $_model.CreateGADInstanceRequest): Promise<$_model.CreateGADInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createGADInstanceWithOptions(request, runtime);
  }

  /**
   * Adds nodes to an ApsaraDB RDS global active database cluster.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Add or remove unit nodes](https://help.aliyun.com/document_detail/331851.html)
   * 
   * @param request - CreateGadInstanceMemberRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateGadInstanceMemberResponse
   */
  async createGadInstanceMemberWithOptions(request: $_model.CreateGadInstanceMemberRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateGadInstanceMemberResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.centralDBInstanceId)) {
      query["CentralDBInstanceId"] = request.centralDBInstanceId;
    }

    if (!$dara.isNull(request.centralRdsDtsAdminAccount)) {
      query["CentralRdsDtsAdminAccount"] = request.centralRdsDtsAdminAccount;
    }

    if (!$dara.isNull(request.centralRdsDtsAdminPassword)) {
      query["CentralRdsDtsAdminPassword"] = request.centralRdsDtsAdminPassword;
    }

    if (!$dara.isNull(request.centralRegionId)) {
      query["CentralRegionId"] = request.centralRegionId;
    }

    if (!$dara.isNull(request.DBList)) {
      query["DBList"] = request.DBList;
    }

    if (!$dara.isNull(request.gadInstanceId)) {
      query["GadInstanceId"] = request.gadInstanceId;
    }

    if (!$dara.isNull(request.unitNode)) {
      query["UnitNode"] = request.unitNode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateGadInstanceMember",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateGadInstanceMemberResponse>(await this.callApi(params, req, runtime), new $_model.CreateGadInstanceMemberResponse({}));
  }

  /**
   * Adds nodes to an ApsaraDB RDS global active database cluster.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Add or remove unit nodes](https://help.aliyun.com/document_detail/331851.html)
   * 
   * @param request - CreateGadInstanceMemberRequest
   * @returns CreateGadInstanceMemberResponse
   */
  async createGadInstanceMember(request: $_model.CreateGadInstanceMemberRequest): Promise<$_model.CreateGadInstanceMemberResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createGadInstanceMemberWithOptions(request, runtime);
  }

  /**
   * 创建全密态规则
   * 
   * @param tmpReq - CreateMaskingRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateMaskingRulesResponse
   */
  async createMaskingRulesWithOptions(tmpReq: $_model.CreateMaskingRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateMaskingRulesResponse> {
    tmpReq.validate();
    let request = new $_model.CreateMaskingRulesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.ruleConfig)) {
      request.ruleConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ruleConfig, "RuleConfig", "json");
    }

    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.defaultAlgo)) {
      query["DefaultAlgo"] = request.defaultAlgo;
    }

    if (!$dara.isNull(request.maskingAlgo)) {
      query["MaskingAlgo"] = request.maskingAlgo;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.ruleConfigShrink)) {
      query["RuleConfig"] = request.ruleConfigShrink;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateMaskingRules",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateMaskingRulesResponse>(await this.callApi(params, req, runtime), new $_model.CreateMaskingRulesResponse({}));
  }

  /**
   * 创建全密态规则
   * 
   * @param request - CreateMaskingRulesRequest
   * @returns CreateMaskingRulesResponse
   */
  async createMaskingRules(request: $_model.CreateMaskingRulesRequest): Promise<$_model.CreateMaskingRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createMaskingRulesWithOptions(request, runtime);
  }

  /**
   * Creates a migration task to restore backup files from an Object Storage Service (OSS) bucket to an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)Limits
   * Data migration across Alibaba Cloud accounts is not supported. For example, backup files in an Object Storage Service (OSS) bucket within Alibaba Cloud Account A cannot be migrated to an ApsaraDB RDS for SQL Server instance within Alibaba Cloud Account B.
   * >  You can migrate backup files from an OSS bucket within Alibaba Cloud Account A to an OSS bucket within Alibaba Cloud Account B. Make sure that the data in the OSS bucket and the RDS instance belong to the same Alibaba Cloud account. Then, you can call this operation to create a migration task. For more information, see [Use Data Online Migration to migrate data between accounts](https://help.aliyun.com/document_detail/342762.html).
   * ### [](#)References
   * >  Before you call this operation, carefully read the following topic. Make sure that you fully understand the prerequisites, preparations, and impacts for calling this operation.
   * [Migrate data from a self-managed SQL Server instance to an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/100019.html)
   * 
   * @param request - CreateMigrateTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateMigrateTaskResponse
   */
  async createMigrateTaskWithOptions(request: $_model.CreateMigrateTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateMigrateTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupMode)) {
      query["BackupMode"] = request.backupMode;
    }

    if (!$dara.isNull(request.checkDBMode)) {
      query["CheckDBMode"] = request.checkDBMode;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.isOnlineDB)) {
      query["IsOnlineDB"] = request.isOnlineDB;
    }

    if (!$dara.isNull(request.migrateTaskId)) {
      query["MigrateTaskId"] = request.migrateTaskId;
    }

    if (!$dara.isNull(request.OSSUrls)) {
      query["OSSUrls"] = request.OSSUrls;
    }

    if (!$dara.isNull(request.ossObjectPositions)) {
      query["OssObjectPositions"] = request.ossObjectPositions;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateMigrateTask",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateMigrateTaskResponse>(await this.callApi(params, req, runtime), new $_model.CreateMigrateTaskResponse({}));
  }

  /**
   * Creates a migration task to restore backup files from an Object Storage Service (OSS) bucket to an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)Limits
   * Data migration across Alibaba Cloud accounts is not supported. For example, backup files in an Object Storage Service (OSS) bucket within Alibaba Cloud Account A cannot be migrated to an ApsaraDB RDS for SQL Server instance within Alibaba Cloud Account B.
   * >  You can migrate backup files from an OSS bucket within Alibaba Cloud Account A to an OSS bucket within Alibaba Cloud Account B. Make sure that the data in the OSS bucket and the RDS instance belong to the same Alibaba Cloud account. Then, you can call this operation to create a migration task. For more information, see [Use Data Online Migration to migrate data between accounts](https://help.aliyun.com/document_detail/342762.html).
   * ### [](#)References
   * >  Before you call this operation, carefully read the following topic. Make sure that you fully understand the prerequisites, preparations, and impacts for calling this operation.
   * [Migrate data from a self-managed SQL Server instance to an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/100019.html)
   * 
   * @param request - CreateMigrateTaskRequest
   * @returns CreateMigrateTaskResponse
   */
  async createMigrateTask(request: $_model.CreateMigrateTaskRequest): Promise<$_model.CreateMigrateTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createMigrateTaskWithOptions(request, runtime);
  }

  /**
   * Opens the database that is involved in a backup data migration task of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   SQL Server
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * This operation is used to migrate backup data to the cloud. Before you call this operation, make sure that you understand the descriptions in the following topics:
   * *   [Migrate the full backup data of a self-managed SQL Server database to an ApsaraDB RDS instance that runs SQL Server 2008 R2](https://help.aliyun.com/document_detail/95737.html)
   * *   [Migrate full backup data of SQL Server 2012, 2014, 2016, 2017, or 2019 databases](https://help.aliyun.com/document_detail/95738.html)
   * *   [Migrate incremental backup data to ApsaraDB RDS for SQL Server 2012, 2014, 2016, 2017, or 2019](https://help.aliyun.com/document_detail/95736.html)
   * 
   * @param request - CreateOnlineDatabaseTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateOnlineDatabaseTaskResponse
   */
  async createOnlineDatabaseTaskWithOptions(request: $_model.CreateOnlineDatabaseTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateOnlineDatabaseTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.checkDBMode)) {
      query["CheckDBMode"] = request.checkDBMode;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.migrateTaskId)) {
      query["MigrateTaskId"] = request.migrateTaskId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateOnlineDatabaseTask",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateOnlineDatabaseTaskResponse>(await this.callApi(params, req, runtime), new $_model.CreateOnlineDatabaseTaskResponse({}));
  }

  /**
   * Opens the database that is involved in a backup data migration task of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   SQL Server
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * This operation is used to migrate backup data to the cloud. Before you call this operation, make sure that you understand the descriptions in the following topics:
   * *   [Migrate the full backup data of a self-managed SQL Server database to an ApsaraDB RDS instance that runs SQL Server 2008 R2](https://help.aliyun.com/document_detail/95737.html)
   * *   [Migrate full backup data of SQL Server 2012, 2014, 2016, 2017, or 2019 databases](https://help.aliyun.com/document_detail/95738.html)
   * *   [Migrate incremental backup data to ApsaraDB RDS for SQL Server 2012, 2014, 2016, 2017, or 2019](https://help.aliyun.com/document_detail/95736.html)
   * 
   * @param request - CreateOnlineDatabaseTaskRequest
   * @returns CreateOnlineDatabaseTaskResponse
   */
  async createOnlineDatabaseTask(request: $_model.CreateOnlineDatabaseTaskRequest): Promise<$_model.CreateOnlineDatabaseTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createOnlineDatabaseTaskWithOptions(request, runtime);
  }

  /**
   * Deletes a node from an ApsaraDB RDS for MySQL instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS MySQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Delete a node from an ApsaraDB RDS for MySQL instance that runs RDS Cluster Edition](https://help.aliyun.com/document_detail/464130.html)
   * 
   * @param tmpReq - CreateOrderForDeleteDBNodesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateOrderForDeleteDBNodesResponse
   */
  async createOrderForDeleteDBNodesWithOptions(tmpReq: $_model.CreateOrderForDeleteDBNodesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateOrderForDeleteDBNodesResponse> {
    tmpReq.validate();
    let request = new $_model.CreateOrderForDeleteDBNodesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.DBNodeId)) {
      request.DBNodeIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBNodeId, "DBNodeId", "json");
    }

    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.businessInfo)) {
      query["BusinessInfo"] = request.businessInfo;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.commodityCode)) {
      query["CommodityCode"] = request.commodityCode;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBNodeIdShrink)) {
      query["DBNodeId"] = request.DBNodeIdShrink;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.nodeType)) {
      query["NodeType"] = request.nodeType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.promotionCode)) {
      query["PromotionCode"] = request.promotionCode;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resource)) {
      query["Resource"] = request.resource;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateOrderForDeleteDBNodes",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateOrderForDeleteDBNodesResponse>(await this.callApi(params, req, runtime), new $_model.CreateOrderForDeleteDBNodesResponse({}));
  }

  /**
   * Deletes a node from an ApsaraDB RDS for MySQL instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS MySQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Delete a node from an ApsaraDB RDS for MySQL instance that runs RDS Cluster Edition](https://help.aliyun.com/document_detail/464130.html)
   * 
   * @param request - CreateOrderForDeleteDBNodesRequest
   * @returns CreateOrderForDeleteDBNodesResponse
   */
  async createOrderForDeleteDBNodes(request: $_model.CreateOrderForDeleteDBNodesRequest): Promise<$_model.CreateOrderForDeleteDBNodesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createOrderForDeleteDBNodesWithOptions(request, runtime);
  }

  /**
   * Creates a parameter template for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/130565.html)
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/457176.html)
   * 
   * @param request - CreateParameterGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateParameterGroupResponse
   */
  async createParameterGroupWithOptions(request: $_model.CreateParameterGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateParameterGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.parameterGroupDesc)) {
      query["ParameterGroupDesc"] = request.parameterGroupDesc;
    }

    if (!$dara.isNull(request.parameterGroupName)) {
      query["ParameterGroupName"] = request.parameterGroupName;
    }

    if (!$dara.isNull(request.parameters)) {
      query["Parameters"] = request.parameters;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateParameterGroup",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateParameterGroupResponse>(await this.callApi(params, req, runtime), new $_model.CreateParameterGroupResponse({}));
  }

  /**
   * Creates a parameter template for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/130565.html)
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/457176.html)
   * 
   * @param request - CreateParameterGroupRequest
   * @returns CreateParameterGroupResponse
   */
  async createParameterGroup(request: $_model.CreateParameterGroupRequest): Promise<$_model.CreateParameterGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createParameterGroupWithOptions(request, runtime);
  }

  /**
   * Creates an extension for a database.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * PostgreSQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Manage extensions](https://help.aliyun.com/document_detail/2402409.html)
   * ### [](#)Usage notes
   * Install only the extensions that are supported by the major engine version of the instance. Otherwise, the installation fails.
   * *   For more information, see [Supported extensions](https://help.aliyun.com/document_detail/142340.html).
   * *   You can call an API operation to query the major engine version of the instance. For more information, see [DescribeDBInstanceAttribute](https://help.aliyun.com/document_detail/610394.html).
   * 
   * @param request - CreatePostgresExtensionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreatePostgresExtensionsResponse
   */
  async createPostgresExtensionsWithOptions(request: $_model.CreatePostgresExtensionsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreatePostgresExtensionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBNames)) {
      query["DBNames"] = request.DBNames;
    }

    if (!$dara.isNull(request.extensions)) {
      query["Extensions"] = request.extensions;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.riskConfirmed)) {
      query["RiskConfirmed"] = request.riskConfirmed;
    }

    if (!$dara.isNull(request.sourceDatabase)) {
      query["SourceDatabase"] = request.sourceDatabase;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreatePostgresExtensions",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreatePostgresExtensionsResponse>(await this.callApi(params, req, runtime), new $_model.CreatePostgresExtensionsResponse({}));
  }

  /**
   * Creates an extension for a database.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * PostgreSQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Manage extensions](https://help.aliyun.com/document_detail/2402409.html)
   * ### [](#)Usage notes
   * Install only the extensions that are supported by the major engine version of the instance. Otherwise, the installation fails.
   * *   For more information, see [Supported extensions](https://help.aliyun.com/document_detail/142340.html).
   * *   You can call an API operation to query the major engine version of the instance. For more information, see [DescribeDBInstanceAttribute](https://help.aliyun.com/document_detail/610394.html).
   * 
   * @param request - CreatePostgresExtensionsRequest
   * @returns CreatePostgresExtensionsResponse
   */
  async createPostgresExtensions(request: $_model.CreatePostgresExtensionsRequest): Promise<$_model.CreatePostgresExtensionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createPostgresExtensionsWithOptions(request, runtime);
  }

  /**
   * Creates a deployment set for an RDS Custom instance in a region. Before you call this operation, you must specify parameters such as OnUnableToRedeployFailedInstance, DeploymentSetName, and Strategy.
   * 
   * @param request - CreateRCDeploymentSetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateRCDeploymentSetResponse
   */
  async createRCDeploymentSetWithOptions(request: $_model.CreateRCDeploymentSetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateRCDeploymentSetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.deploymentSetName)) {
      query["DeploymentSetName"] = request.deploymentSetName;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.groupCount)) {
      query["GroupCount"] = request.groupCount;
    }

    if (!$dara.isNull(request.onUnableToRedeployFailedInstance)) {
      query["OnUnableToRedeployFailedInstance"] = request.onUnableToRedeployFailedInstance;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.strategy)) {
      query["Strategy"] = request.strategy;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateRCDeploymentSet",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateRCDeploymentSetResponse>(await this.callApi(params, req, runtime), new $_model.CreateRCDeploymentSetResponse({}));
  }

  /**
   * Creates a deployment set for an RDS Custom instance in a region. Before you call this operation, you must specify parameters such as OnUnableToRedeployFailedInstance, DeploymentSetName, and Strategy.
   * 
   * @param request - CreateRCDeploymentSetRequest
   * @returns CreateRCDeploymentSetResponse
   */
  async createRCDeploymentSet(request: $_model.CreateRCDeploymentSetRequest): Promise<$_model.CreateRCDeploymentSetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createRCDeploymentSetWithOptions(request, runtime);
  }

  /**
   * Creates a data disk for an RDS Custom instance.
   * 
   * @param request - CreateRCDiskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateRCDiskResponse
   */
  async createRCDiskWithOptions(request: $_model.CreateRCDiskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateRCDiskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.diskCategory)) {
      query["DiskCategory"] = request.diskCategory;
    }

    if (!$dara.isNull(request.diskName)) {
      query["DiskName"] = request.diskName;
    }

    if (!$dara.isNull(request.instanceChargeType)) {
      query["InstanceChargeType"] = request.instanceChargeType;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.performanceLevel)) {
      query["PerformanceLevel"] = request.performanceLevel;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.size)) {
      query["Size"] = request.size;
    }

    if (!$dara.isNull(request.snapshotId)) {
      query["SnapshotId"] = request.snapshotId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateRCDisk",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateRCDiskResponse>(await this.callApi(params, req, runtime), new $_model.CreateRCDiskResponse({}));
  }

  /**
   * Creates a data disk for an RDS Custom instance.
   * 
   * @param request - CreateRCDiskRequest
   * @returns CreateRCDiskResponse
   */
  async createRCDisk(request: $_model.CreateRCDiskRequest): Promise<$_model.CreateRCDiskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createRCDiskWithOptions(request, runtime);
  }

  /**
   * Creates an edge node pool in the Container Service for Kubernetes (ACK) Edge cluster to which the RDS Custom instance belongs.
   * 
   * @param tmpReq - CreateRCNodePoolRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateRCNodePoolResponse
   */
  async createRCNodePoolWithOptions(tmpReq: $_model.CreateRCNodePoolRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateRCNodePoolResponse> {
    tmpReq.validate();
    let request = new $_model.CreateRCNodePoolShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.dataDisk)) {
      request.dataDiskShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataDisk, "DataDisk", "json");
    }

    if (!$dara.isNull(tmpReq.systemDisk)) {
      request.systemDiskShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.systemDisk, "SystemDisk", "json");
    }

    let query = { };
    if (!$dara.isNull(request.amount)) {
      query["Amount"] = request.amount;
    }

    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.createMode)) {
      query["CreateMode"] = request.createMode;
    }

    if (!$dara.isNull(request.dataDiskShrink)) {
      query["DataDisk"] = request.dataDiskShrink;
    }

    if (!$dara.isNull(request.deploymentSetId)) {
      query["DeploymentSetId"] = request.deploymentSetId;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.dryRun)) {
      query["DryRun"] = request.dryRun;
    }

    if (!$dara.isNull(request.hostName)) {
      query["HostName"] = request.hostName;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.instanceChargeType)) {
      query["InstanceChargeType"] = request.instanceChargeType;
    }

    if (!$dara.isNull(request.instanceName)) {
      query["InstanceName"] = request.instanceName;
    }

    if (!$dara.isNull(request.instanceType)) {
      query["InstanceType"] = request.instanceType;
    }

    if (!$dara.isNull(request.internetChargeType)) {
      query["InternetChargeType"] = request.internetChargeType;
    }

    if (!$dara.isNull(request.internetMaxBandwidthOut)) {
      query["InternetMaxBandwidthOut"] = request.internetMaxBandwidthOut;
    }

    if (!$dara.isNull(request.ioOptimized)) {
      query["IoOptimized"] = request.ioOptimized;
    }

    if (!$dara.isNull(request.keyPairName)) {
      query["KeyPairName"] = request.keyPairName;
    }

    if (!$dara.isNull(request.nodePoolName)) {
      query["NodePoolName"] = request.nodePoolName;
    }

    if (!$dara.isNull(request.password)) {
      query["Password"] = request.password;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.securityEnhancementStrategy)) {
      query["SecurityEnhancementStrategy"] = request.securityEnhancementStrategy;
    }

    if (!$dara.isNull(request.securityGroupId)) {
      query["SecurityGroupId"] = request.securityGroupId;
    }

    if (!$dara.isNull(request.spotStrategy)) {
      query["SpotStrategy"] = request.spotStrategy;
    }

    if (!$dara.isNull(request.supportCase)) {
      query["SupportCase"] = request.supportCase;
    }

    if (!$dara.isNull(request.systemDiskShrink)) {
      query["SystemDisk"] = request.systemDiskShrink;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.userData)) {
      query["UserData"] = request.userData;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateRCNodePool",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateRCNodePoolResponse>(await this.callApi(params, req, runtime), new $_model.CreateRCNodePoolResponse({}));
  }

  /**
   * Creates an edge node pool in the Container Service for Kubernetes (ACK) Edge cluster to which the RDS Custom instance belongs.
   * 
   * @param request - CreateRCNodePoolRequest
   * @returns CreateRCNodePoolResponse
   */
  async createRCNodePool(request: $_model.CreateRCNodePoolRequest): Promise<$_model.CreateRCNodePoolResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createRCNodePoolWithOptions(request, runtime);
  }

  /**
   * Creates a snapshot for a cloud disk.
   * 
   * @remarks
   * In the following scenarios, you cannot create snapshots for a specific disk:
   * *   The number of manual snapshots of the disk has reached 256.
   * *   A snapshot is being created for the disk.
   * *   The instance to which the disk is attached has never been started.
   * *   The instance to which the disk is attached is not in the **Stopped** or **Running** state.
   * When you create a snapshot, take note of the following items:
   * *   If a snapshot is being created, the snapshot cannot be used to create a custom image by calling the CreateImage operation.
   * *   When a snapshot is being created for a disk that is attached to an RDS Custom instance, do not change the instance state.
   * *   You can create snapshots for a disk that is in the **Expired** state. If the release time scheduled for a disk arrives when a snapshot is being created for the disk, the snapshot in the Creating state is deleted when the disk is released.
   * 
   * @param request - CreateRCSnapshotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateRCSnapshotResponse
   */
  async createRCSnapshotWithOptions(request: $_model.CreateRCSnapshotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateRCSnapshotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.diskId)) {
      query["DiskId"] = request.diskId;
    }

    if (!$dara.isNull(request.instantAccess)) {
      query["InstantAccess"] = request.instantAccess;
    }

    if (!$dara.isNull(request.instantAccessRetentionDays)) {
      query["InstantAccessRetentionDays"] = request.instantAccessRetentionDays;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.retentionDays)) {
      query["RetentionDays"] = request.retentionDays;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateRCSnapshot",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateRCSnapshotResponse>(await this.callApi(params, req, runtime), new $_model.CreateRCSnapshotResponse({}));
  }

  /**
   * Creates a snapshot for a cloud disk.
   * 
   * @remarks
   * In the following scenarios, you cannot create snapshots for a specific disk:
   * *   The number of manual snapshots of the disk has reached 256.
   * *   A snapshot is being created for the disk.
   * *   The instance to which the disk is attached has never been started.
   * *   The instance to which the disk is attached is not in the **Stopped** or **Running** state.
   * When you create a snapshot, take note of the following items:
   * *   If a snapshot is being created, the snapshot cannot be used to create a custom image by calling the CreateImage operation.
   * *   When a snapshot is being created for a disk that is attached to an RDS Custom instance, do not change the instance state.
   * *   You can create snapshots for a disk that is in the **Expired** state. If the release time scheduled for a disk arrives when a snapshot is being created for the disk, the snapshot in the Creating state is deleted when the disk is released.
   * 
   * @param request - CreateRCSnapshotRequest
   * @returns CreateRCSnapshotResponse
   */
  async createRCSnapshot(request: $_model.CreateRCSnapshotRequest): Promise<$_model.CreateRCSnapshotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createRCSnapshotWithOptions(request, runtime);
  }

  /**
   * Creates a read-only instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Create a read-only ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/56991.html)
   * *   [Create a read-only ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/108959.html)
   * *   [Create a read-only ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/99005.html)
   * 
   * @param request - CreateReadOnlyDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateReadOnlyDBInstanceResponse
   */
  async createReadOnlyDBInstanceWithOptions(request: $_model.CreateReadOnlyDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateReadOnlyDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoCreateProxy)) {
      query["AutoCreateProxy"] = request.autoCreateProxy;
    }

    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.autoUseCoupon)) {
      query["AutoUseCoupon"] = request.autoUseCoupon;
    }

    if (!$dara.isNull(request.bpeEnabled)) {
      query["BpeEnabled"] = request.bpeEnabled;
    }

    if (!$dara.isNull(request.burstingEnabled)) {
      query["BurstingEnabled"] = request.burstingEnabled;
    }

    if (!$dara.isNull(request.category)) {
      query["Category"] = request.category;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceClass)) {
      query["DBInstanceClass"] = request.DBInstanceClass;
    }

    if (!$dara.isNull(request.DBInstanceDescription)) {
      query["DBInstanceDescription"] = request.DBInstanceDescription;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceStorage)) {
      query["DBInstanceStorage"] = request.DBInstanceStorage;
    }

    if (!$dara.isNull(request.DBInstanceStorageType)) {
      query["DBInstanceStorageType"] = request.DBInstanceStorageType;
    }

    if (!$dara.isNull(request.dedicatedHostGroupId)) {
      query["DedicatedHostGroupId"] = request.dedicatedHostGroupId;
    }

    if (!$dara.isNull(request.deletionProtection)) {
      query["DeletionProtection"] = request.deletionProtection;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.gdnInstanceName)) {
      query["GdnInstanceName"] = request.gdnInstanceName;
    }

    if (!$dara.isNull(request.instanceNetworkType)) {
      query["InstanceNetworkType"] = request.instanceNetworkType;
    }

    if (!$dara.isNull(request.instructionSetArch)) {
      query["InstructionSetArch"] = request.instructionSetArch;
    }

    if (!$dara.isNull(request.ioAccelerationEnabled)) {
      query["IoAccelerationEnabled"] = request.ioAccelerationEnabled;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.privateIpAddress)) {
      query["PrivateIpAddress"] = request.privateIpAddress;
    }

    if (!$dara.isNull(request.promotionCode)) {
      query["PromotionCode"] = request.promotionCode;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.targetDedicatedHostIdForMaster)) {
      query["TargetDedicatedHostIdForMaster"] = request.targetDedicatedHostIdForMaster;
    }

    if (!$dara.isNull(request.tddlBizType)) {
      query["TddlBizType"] = request.tddlBizType;
    }

    if (!$dara.isNull(request.tddlRegionConfig)) {
      query["TddlRegionConfig"] = request.tddlRegionConfig;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    if (!$dara.isNull(request.VPCId)) {
      query["VPCId"] = request.VPCId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateReadOnlyDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateReadOnlyDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.CreateReadOnlyDBInstanceResponse({}));
  }

  /**
   * Creates a read-only instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Create a read-only ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/56991.html)
   * *   [Create a read-only ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/108959.html)
   * *   [Create a read-only ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/99005.html)
   * 
   * @param request - CreateReadOnlyDBInstanceRequest
   * @returns CreateReadOnlyDBInstanceResponse
   */
  async createReadOnlyDBInstance(request: $_model.CreateReadOnlyDBInstanceRequest): Promise<$_model.CreateReadOnlyDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createReadOnlyDBInstanceWithOptions(request, runtime);
  }

  /**
   * Creates a data synchronization task for a disaster recovery (DR) ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * *   SQL Server
   * >  The parameters vary based on database engines.
   * 
   * @param request - CreateReplicationLinkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateReplicationLinkResponse
   */
  async createReplicationLinkWithOptions(request: $_model.CreateReplicationLinkRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateReplicationLinkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.dryRun)) {
      query["DryRun"] = request.dryRun;
    }

    if (!$dara.isNull(request.replicatorAccount)) {
      query["ReplicatorAccount"] = request.replicatorAccount;
    }

    if (!$dara.isNull(request.replicatorPassword)) {
      query["ReplicatorPassword"] = request.replicatorPassword;
    }

    if (!$dara.isNull(request.sourceAddress)) {
      query["SourceAddress"] = request.sourceAddress;
    }

    if (!$dara.isNull(request.sourceCategory)) {
      query["SourceCategory"] = request.sourceCategory;
    }

    if (!$dara.isNull(request.sourceInstanceName)) {
      query["SourceInstanceName"] = request.sourceInstanceName;
    }

    if (!$dara.isNull(request.sourceInstanceRegionId)) {
      query["SourceInstanceRegionId"] = request.sourceInstanceRegionId;
    }

    if (!$dara.isNull(request.sourcePort)) {
      query["SourcePort"] = request.sourcePort;
    }

    if (!$dara.isNull(request.targetAddress)) {
      query["TargetAddress"] = request.targetAddress;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateReplicationLink",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateReplicationLinkResponse>(await this.callApi(params, req, runtime), new $_model.CreateReplicationLinkResponse({}));
  }

  /**
   * Creates a data synchronization task for a disaster recovery (DR) ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * *   SQL Server
   * >  The parameters vary based on database engines.
   * 
   * @param request - CreateReplicationLinkRequest
   * @returns CreateReplicationLinkResponse
   */
  async createReplicationLink(request: $_model.CreateReplicationLinkRequest): Promise<$_model.CreateReplicationLinkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createReplicationLinkWithOptions(request, runtime);
  }

  /**
   * Creates a credential for a user who uses the Data API feature.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * 
   * @param request - CreateSecretRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateSecretResponse
   */
  async createSecretWithOptions(request: $_model.CreateSecretRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateSecretResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.dbInstanceId)) {
      query["DbInstanceId"] = request.dbInstanceId;
    }

    if (!$dara.isNull(request.dbNames)) {
      query["DbNames"] = request.dbNames;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.password)) {
      query["Password"] = request.password;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.secretName)) {
      query["SecretName"] = request.secretName;
    }

    if (!$dara.isNull(request.username)) {
      query["Username"] = request.username;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateSecret",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateSecretResponse>(await this.callApi(params, req, runtime), new $_model.CreateSecretResponse({}));
  }

  /**
   * Creates a credential for a user who uses the Data API feature.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * 
   * @param request - CreateSecretRequest
   * @returns CreateSecretResponse
   */
  async createSecret(request: $_model.CreateSecretRequest): Promise<$_model.CreateSecretResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createSecretWithOptions(request, runtime);
  }

  /**
   * Creates a service-linked role.
   * 
   * @remarks
   * ### Supported database engine
   * PostgreSQL
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Service-linked roles](https://help.aliyun.com/document_detail/342840.html)
   * 
   * @param request - CreateServiceLinkedRoleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateServiceLinkedRoleResponse
   */
  async createServiceLinkedRoleWithOptions(request: $_model.CreateServiceLinkedRoleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateServiceLinkedRoleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.serviceLinkedRole)) {
      query["ServiceLinkedRole"] = request.serviceLinkedRole;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateServiceLinkedRole",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateServiceLinkedRoleResponse>(await this.callApi(params, req, runtime), new $_model.CreateServiceLinkedRoleResponse({}));
  }

  /**
   * Creates a service-linked role.
   * 
   * @remarks
   * ### Supported database engine
   * PostgreSQL
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Service-linked roles](https://help.aliyun.com/document_detail/342840.html)
   * 
   * @param request - CreateServiceLinkedRoleRequest
   * @returns CreateServiceLinkedRoleResponse
   */
  async createServiceLinkedRole(request: $_model.CreateServiceLinkedRoleRequest): Promise<$_model.CreateServiceLinkedRoleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createServiceLinkedRoleWithOptions(request, runtime);
  }

  /**
   * Creates a temporary instance for an RDS instance that runs SQL Server 2008 R2 and uses local disks.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * Your RDS instance runs SQL Server 2008 R2 with local disks.
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Restore the data of an ApsaraDB RDS for SQL Server instance by using a temporary RDS instance](https://help.aliyun.com/document_detail/95724.html)
   * 
   * @param request - CreateTempDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateTempDBInstanceResponse
   */
  async createTempDBInstanceWithOptions(request: $_model.CreateTempDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateTempDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.restoreTime)) {
      query["RestoreTime"] = request.restoreTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateTempDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateTempDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.CreateTempDBInstanceResponse({}));
  }

  /**
   * Creates a temporary instance for an RDS instance that runs SQL Server 2008 R2 and uses local disks.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * Your RDS instance runs SQL Server 2008 R2 with local disks.
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Restore the data of an ApsaraDB RDS for SQL Server instance by using a temporary RDS instance](https://help.aliyun.com/document_detail/95724.html)
   * 
   * @param request - CreateTempDBInstanceRequest
   * @returns CreateTempDBInstanceResponse
   */
  async createTempDBInstance(request: $_model.CreateTempDBInstanceRequest): Promise<$_model.CreateTempDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createTempDBInstanceWithOptions(request, runtime);
  }

  /**
   * 下单领券接口
   * 
   * @param request - CreateYouhuiForOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateYouhuiForOrderResponse
   */
  async createYouhuiForOrderWithOptions(request: $_model.CreateYouhuiForOrderRequest, runtime: $dara.RuntimeOptions): Promise<$_model.CreateYouhuiForOrderResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.activityId)) {
      query["ActivityId"] = request.activityId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.promotionId)) {
      query["PromotionId"] = request.promotionId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateYouhuiForOrder",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.CreateYouhuiForOrderResponse>(await this.callApi(params, req, runtime), new $_model.CreateYouhuiForOrderResponse({}));
  }

  /**
   * 下单领券接口
   * 
   * @param request - CreateYouhuiForOrderRequest
   * @returns CreateYouhuiForOrderResponse
   */
  async createYouhuiForOrder(request: $_model.CreateYouhuiForOrderRequest): Promise<$_model.CreateYouhuiForOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createYouhuiForOrderWithOptions(request, runtime);
  }

  /**
   * Deletes an ApsaraDB RDS for SQL Server instance from an Active Directory (AD) domain.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   SQL Server
   * 
   * @param request - DeleteADSettingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteADSettingResponse
   */
  async deleteADSettingWithOptions(request: $_model.DeleteADSettingRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteADSettingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteADSetting",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteADSettingResponse>(await this.callApi(params, req, runtime), new $_model.DeleteADSettingResponse({}));
  }

  /**
   * Deletes an ApsaraDB RDS for SQL Server instance from an Active Directory (AD) domain.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   SQL Server
   * 
   * @param request - DeleteADSettingRequest
   * @returns DeleteADSettingResponse
   */
  async deleteADSetting(request: $_model.DeleteADSettingRequest): Promise<$_model.DeleteADSettingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteADSettingWithOptions(request, runtime);
  }

  /**
   * Deletes an account from an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Delete a database account from an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96104.html)
   * *   [Delete a database account from an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/147649.html)
   * *   [Delete a database account from an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95694.html)
   * *   [Delete a database account from an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97135.html)
   * 
   * @param request - DeleteAccountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteAccountResponse
   */
  async deleteAccountWithOptions(request: $_model.DeleteAccountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteAccountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteAccount",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteAccountResponse>(await this.callApi(params, req, runtime), new $_model.DeleteAccountResponse({}));
  }

  /**
   * Deletes an account from an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Delete a database account from an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96104.html)
   * *   [Delete a database account from an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/147649.html)
   * *   [Delete a database account from an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95694.html)
   * *   [Delete a database account from an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97135.html)
   * 
   * @param request - DeleteAccountRequest
   * @returns DeleteAccountResponse
   */
  async deleteAccount(request: $_model.DeleteAccountRequest): Promise<$_model.DeleteAccountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteAccountWithOptions(request, runtime);
  }

  /**
   * Deletes the data backup files of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * > Only instances that run RDS High-availability Edition are supported.
   * ### Description
   * You can call this operation to delete backup sets of the instance itself. Backup sets of the associated instances such as read-only, disaster recovery, and cloned instances are not deleted.
   * ### Precautions
   * Before you call this operation, make sure that the following requirements are met:
   * *   The instance is in the Running state.
   * *   If the log backup feature is disabled, instances cannot be restored by point in time. You can delete data backup sets that are retained for more than seven days.
   * *   If the log backup feature is enabled and the log backup retention period is shorter than the data backup retention period, you can delete the data backup files that are retained for a period longer than the log backup retention period.
   * 
   * @param request - DeleteBackupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteBackupResponse
   */
  async deleteBackupWithOptions(request: $_model.DeleteBackupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteBackupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteBackup",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteBackupResponse>(await this.callApi(params, req, runtime), new $_model.DeleteBackupResponse({}));
  }

  /**
   * Deletes the data backup files of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * > Only instances that run RDS High-availability Edition are supported.
   * ### Description
   * You can call this operation to delete backup sets of the instance itself. Backup sets of the associated instances such as read-only, disaster recovery, and cloned instances are not deleted.
   * ### Precautions
   * Before you call this operation, make sure that the following requirements are met:
   * *   The instance is in the Running state.
   * *   If the log backup feature is disabled, instances cannot be restored by point in time. You can delete data backup sets that are retained for more than seven days.
   * *   If the log backup feature is enabled and the log backup retention period is shorter than the data backup retention period, you can delete the data backup files that are retained for a period longer than the log backup retention period.
   * 
   * @param request - DeleteBackupRequest
   * @returns DeleteBackupResponse
   */
  async deleteBackup(request: $_model.DeleteBackupRequest): Promise<$_model.DeleteBackupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteBackupWithOptions(request, runtime);
  }

  /**
   * Deletes the backup files of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS SQL Server
   * >  This operation is available only for users that are added to the whitelist.
   * 
   * @param request - DeleteBackupFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteBackupFileResponse
   */
  async deleteBackupFileWithOptions(request: $_model.DeleteBackupFileRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteBackupFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.backupTime)) {
      query["BackupTime"] = request.backupTime;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteBackupFile",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteBackupFileResponse>(await this.callApi(params, req, runtime), new $_model.DeleteBackupFileResponse({}));
  }

  /**
   * Deletes the backup files of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS SQL Server
   * >  This operation is available only for users that are added to the whitelist.
   * 
   * @param request - DeleteBackupFileRequest
   * @returns DeleteBackupFileResponse
   */
  async deleteBackupFile(request: $_model.DeleteBackupFileRequest): Promise<$_model.DeleteBackupFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteBackupFileWithOptions(request, runtime);
  }

  /**
   * Releases an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Note Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Release an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96057.html)
   * *   [Release an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96749.html)
   * *   [Release an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95662.html)
   * *   [Release an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97128.html)
   * 
   * @param request - DeleteDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDBInstanceResponse
   */
  async deleteDBInstanceWithOptions(request: $_model.DeleteDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.releasedKeepPolicy)) {
      query["ReleasedKeepPolicy"] = request.releasedKeepPolicy;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.DeleteDBInstanceResponse({}));
  }

  /**
   * Releases an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Note Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Release an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96057.html)
   * *   [Release an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96749.html)
   * *   [Release an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95662.html)
   * *   [Release an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97128.html)
   * 
   * @param request - DeleteDBInstanceRequest
   * @returns DeleteDBInstanceResponse
   */
  async deleteDBInstance(request: $_model.DeleteDBInstanceRequest): Promise<$_model.DeleteDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDBInstanceWithOptions(request, runtime);
  }

  /**
   * Deletes an endpoint for an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Delete the read-only endpoint of an ApsaraDB RDS for MySQL cluster](https://help.aliyun.com/document_detail/464133.html)
   * 
   * @param request - DeleteDBInstanceEndpointRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDBInstanceEndpointResponse
   */
  async deleteDBInstanceEndpointWithOptions(request: $_model.DeleteDBInstanceEndpointRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteDBInstanceEndpointResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceEndpointId)) {
      query["DBInstanceEndpointId"] = request.DBInstanceEndpointId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDBInstanceEndpoint",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteDBInstanceEndpointResponse>(await this.callApi(params, req, runtime), new $_model.DeleteDBInstanceEndpointResponse({}));
  }

  /**
   * Deletes an endpoint for an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Delete the read-only endpoint of an ApsaraDB RDS for MySQL cluster](https://help.aliyun.com/document_detail/464133.html)
   * 
   * @param request - DeleteDBInstanceEndpointRequest
   * @returns DeleteDBInstanceEndpointResponse
   */
  async deleteDBInstanceEndpoint(request: $_model.DeleteDBInstanceEndpointRequest): Promise<$_model.DeleteDBInstanceEndpointResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDBInstanceEndpointWithOptions(request, runtime);
  }

  /**
   * Releases the public endpoint of an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)Precautions
   * You can delete only the public endpoint of each endpoint type from the instance. If you want to delete an internal endpoint of any endpoint type, you can directly delete the type of endpoint.
   * 
   * @param request - DeleteDBInstanceEndpointAddressRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDBInstanceEndpointAddressResponse
   */
  async deleteDBInstanceEndpointAddressWithOptions(request: $_model.DeleteDBInstanceEndpointAddressRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteDBInstanceEndpointAddressResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.connectionString)) {
      body["ConnectionString"] = request.connectionString;
    }

    if (!$dara.isNull(request.DBInstanceEndpointId)) {
      body["DBInstanceEndpointId"] = request.DBInstanceEndpointId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDBInstanceEndpointAddress",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteDBInstanceEndpointAddressResponse>(await this.callApi(params, req, runtime), new $_model.DeleteDBInstanceEndpointAddressResponse({}));
  }

  /**
   * Releases the public endpoint of an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)Precautions
   * You can delete only the public endpoint of each endpoint type from the instance. If you want to delete an internal endpoint of any endpoint type, you can directly delete the type of endpoint.
   * 
   * @param request - DeleteDBInstanceEndpointAddressRequest
   * @returns DeleteDBInstanceEndpointAddressResponse
   */
  async deleteDBInstanceEndpointAddress(request: $_model.DeleteDBInstanceEndpointAddressRequest): Promise<$_model.DeleteDBInstanceEndpointAddressResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDBInstanceEndpointAddressWithOptions(request, runtime);
  }

  /**
   * Deletes a security group rule that is configured for an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Configure security group settings for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/2392322.html)
   * 
   * @param request - DeleteDBInstanceSecurityGroupRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDBInstanceSecurityGroupRuleResponse
   */
  async deleteDBInstanceSecurityGroupRuleWithOptions(request: $_model.DeleteDBInstanceSecurityGroupRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteDBInstanceSecurityGroupRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityGroupRuleIds)) {
      query["SecurityGroupRuleIds"] = request.securityGroupRuleIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDBInstanceSecurityGroupRule",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteDBInstanceSecurityGroupRuleResponse>(await this.callApi(params, req, runtime), new $_model.DeleteDBInstanceSecurityGroupRuleResponse({}));
  }

  /**
   * Deletes a security group rule that is configured for an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Configure security group settings for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/2392322.html)
   * 
   * @param request - DeleteDBInstanceSecurityGroupRuleRequest
   * @returns DeleteDBInstanceSecurityGroupRuleResponse
   */
  async deleteDBInstanceSecurityGroupRule(request: $_model.DeleteDBInstanceSecurityGroupRuleRequest): Promise<$_model.DeleteDBInstanceSecurityGroupRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDBInstanceSecurityGroupRuleWithOptions(request, runtime);
  }

  /**
   * Deletes a node from an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * MySQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Delete a node from an ApsaraDB RDS for MySQL cluster](https://help.aliyun.com/document_detail/464130.html)
   * 
   * @param tmpReq - DeleteDBNodesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDBNodesResponse
   */
  async deleteDBNodesWithOptions(tmpReq: $_model.DeleteDBNodesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteDBNodesResponse> {
    tmpReq.validate();
    let request = new $_model.DeleteDBNodesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.DBNodeId)) {
      request.DBNodeIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBNodeId, "DBNodeId", "json");
    }

    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBNodeIdShrink)) {
      query["DBNodeId"] = request.DBNodeIdShrink;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDBNodes",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteDBNodesResponse>(await this.callApi(params, req, runtime), new $_model.DeleteDBNodesResponse({}));
  }

  /**
   * Deletes a node from an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * MySQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Delete a node from an ApsaraDB RDS for MySQL cluster](https://help.aliyun.com/document_detail/464130.html)
   * 
   * @param request - DeleteDBNodesRequest
   * @returns DeleteDBNodesResponse
   */
  async deleteDBNodes(request: $_model.DeleteDBNodesRequest): Promise<$_model.DeleteDBNodesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDBNodesWithOptions(request, runtime);
  }

  /**
   * Deletes the endpoint that is used to connect to the dedicated proxy of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/184921.html)
   * *   [Configure the dedicated proxy endpoint for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/418274.html)
   * 
   * @param request - DeleteDBProxyEndpointAddressRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDBProxyEndpointAddressResponse
   */
  async deleteDBProxyEndpointAddressWithOptions(request: $_model.DeleteDBProxyEndpointAddressRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteDBProxyEndpointAddressResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBProxyConnectStringNetType)) {
      query["DBProxyConnectStringNetType"] = request.DBProxyConnectStringNetType;
    }

    if (!$dara.isNull(request.DBProxyEndpointId)) {
      query["DBProxyEndpointId"] = request.DBProxyEndpointId;
    }

    if (!$dara.isNull(request.DBProxyEngineType)) {
      query["DBProxyEngineType"] = request.DBProxyEngineType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDBProxyEndpointAddress",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteDBProxyEndpointAddressResponse>(await this.callApi(params, req, runtime), new $_model.DeleteDBProxyEndpointAddressResponse({}));
  }

  /**
   * Deletes the endpoint that is used to connect to the dedicated proxy of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/184921.html)
   * *   [Configure the dedicated proxy endpoint for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/418274.html)
   * 
   * @param request - DeleteDBProxyEndpointAddressRequest
   * @returns DeleteDBProxyEndpointAddressResponse
   */
  async deleteDBProxyEndpointAddress(request: $_model.DeleteDBProxyEndpointAddressRequest): Promise<$_model.DeleteDBProxyEndpointAddressResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDBProxyEndpointAddressWithOptions(request, runtime);
  }

  /**
   * Deletes a database from an RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * ### [](#)References
   * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Delete a database from an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96106.html)
   * *   [Delete a database from an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96759.html)
   * *   [Delete a database from an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95699.html)
   * *   [Delete a database from an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97137.html)
   * 
   * @param request - DeleteDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDatabaseResponse
   */
  async deleteDatabaseWithOptions(request: $_model.DeleteDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDatabase",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteDatabaseResponse>(await this.callApi(params, req, runtime), new $_model.DeleteDatabaseResponse({}));
  }

  /**
   * Deletes a database from an RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * ### [](#)References
   * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Delete a database from an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96106.html)
   * *   [Delete a database from an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96759.html)
   * *   [Delete a database from an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95699.html)
   * *   [Delete a database from an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97137.html)
   * 
   * @param request - DeleteDatabaseRequest
   * @returns DeleteDatabaseResponse
   */
  async deleteDatabase(request: $_model.DeleteDatabaseRequest): Promise<$_model.DeleteDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDatabaseWithOptions(request, runtime);
  }

  /**
   * Deletes a global active database cluster.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * ### [Usage notes](#)
   * *   A global active database cluster cannot be restored after it is deleted. Proceed with caution.
   * *   If you delete a global active database cluster, the system removes all nodes and Data Transmission Service (DTS) synchronization tasks from the cluster. However, the system does not release the ApsaraDB RDS for MySQL instances that run as nodes in the cluster. If you no longer need the ApsaraDB RDS for MySQL instances, you can call the [DeleteDBInstance](https://help.aliyun.com/document_detail/26229.html) to release the instances one after another.
   * 
   * @param request - DeleteGadInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteGadInstanceResponse
   */
  async deleteGadInstanceWithOptions(request: $_model.DeleteGadInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteGadInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.gadInstanceName)) {
      query["GadInstanceName"] = request.gadInstanceName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteGadInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteGadInstanceResponse>(await this.callApi(params, req, runtime), new $_model.DeleteGadInstanceResponse({}));
  }

  /**
   * Deletes a global active database cluster.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * ### [Usage notes](#)
   * *   A global active database cluster cannot be restored after it is deleted. Proceed with caution.
   * *   If you delete a global active database cluster, the system removes all nodes and Data Transmission Service (DTS) synchronization tasks from the cluster. However, the system does not release the ApsaraDB RDS for MySQL instances that run as nodes in the cluster. If you no longer need the ApsaraDB RDS for MySQL instances, you can call the [DeleteDBInstance](https://help.aliyun.com/document_detail/26229.html) to release the instances one after another.
   * 
   * @param request - DeleteGadInstanceRequest
   * @returns DeleteGadInstanceResponse
   */
  async deleteGadInstance(request: $_model.DeleteGadInstanceRequest): Promise<$_model.DeleteGadInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteGadInstanceWithOptions(request, runtime);
  }

  /**
   * 删除全密态规则
   * 
   * @param request - DeleteMaskingRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteMaskingRulesResponse
   */
  async deleteMaskingRulesWithOptions(request: $_model.DeleteMaskingRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteMaskingRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteMaskingRules",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteMaskingRulesResponse>(await this.callApi(params, req, runtime), new $_model.DeleteMaskingRulesResponse({}));
  }

  /**
   * 删除全密态规则
   * 
   * @param request - DeleteMaskingRulesRequest
   * @returns DeleteMaskingRulesResponse
   */
  async deleteMaskingRules(request: $_model.DeleteMaskingRulesRequest): Promise<$_model.DeleteMaskingRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteMaskingRulesWithOptions(request, runtime);
  }

  /**
   * Deletes a parameter template from an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/130565.html)
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/457176.html)
   * 
   * @param request - DeleteParameterGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteParameterGroupResponse
   */
  async deleteParameterGroupWithOptions(request: $_model.DeleteParameterGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteParameterGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.parameterGroupId)) {
      query["ParameterGroupId"] = request.parameterGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteParameterGroup",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteParameterGroupResponse>(await this.callApi(params, req, runtime), new $_model.DeleteParameterGroupResponse({}));
  }

  /**
   * Deletes a parameter template from an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/130565.html)
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/457176.html)
   * 
   * @param request - DeleteParameterGroupRequest
   * @returns DeleteParameterGroupResponse
   */
  async deleteParameterGroup(request: $_model.DeleteParameterGroupRequest): Promise<$_model.DeleteParameterGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteParameterGroupWithOptions(request, runtime);
  }

  /**
   * Deletes an extension from a database.
   * 
   * @remarks
   * ### Supported database engines
   * RDS PostgreSQL
   * ### References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Manage extensions](https://help.aliyun.com/document_detail/2402409.html)
   * 
   * @param request - DeletePostgresExtensionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeletePostgresExtensionsResponse
   */
  async deletePostgresExtensionsWithOptions(request: $_model.DeletePostgresExtensionsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeletePostgresExtensionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBNames)) {
      query["DBNames"] = request.DBNames;
    }

    if (!$dara.isNull(request.extensions)) {
      query["Extensions"] = request.extensions;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeletePostgresExtensions",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeletePostgresExtensionsResponse>(await this.callApi(params, req, runtime), new $_model.DeletePostgresExtensionsResponse({}));
  }

  /**
   * Deletes an extension from a database.
   * 
   * @remarks
   * ### Supported database engines
   * RDS PostgreSQL
   * ### References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Manage extensions](https://help.aliyun.com/document_detail/2402409.html)
   * 
   * @param request - DeletePostgresExtensionsRequest
   * @returns DeletePostgresExtensionsResponse
   */
  async deletePostgresExtensions(request: $_model.DeletePostgresExtensionsRequest): Promise<$_model.DeletePostgresExtensionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deletePostgresExtensionsWithOptions(request, runtime);
  }

  /**
   * Deletes a RDS Custom node from a Container Service for Kubernetes (ACK) cluster.
   * 
   * @param tmpReq - DeleteRCClusterNodesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteRCClusterNodesResponse
   */
  async deleteRCClusterNodesWithOptions(tmpReq: $_model.DeleteRCClusterNodesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteRCClusterNodesResponse> {
    tmpReq.validate();
    let request = new $_model.DeleteRCClusterNodesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.instanceIds)) {
      request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, "InstanceIds", "simple");
    }

    if (!$dara.isNull(tmpReq.nodes)) {
      request.nodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodes, "Nodes", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.instanceIdsShrink)) {
      query["InstanceIds"] = request.instanceIdsShrink;
    }

    if (!$dara.isNull(request.nodesShrink)) {
      query["Nodes"] = request.nodesShrink;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteRCClusterNodes",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteRCClusterNodesResponse>(await this.callApi(params, req, runtime), new $_model.DeleteRCClusterNodesResponse({}));
  }

  /**
   * Deletes a RDS Custom node from a Container Service for Kubernetes (ACK) cluster.
   * 
   * @param request - DeleteRCClusterNodesRequest
   * @returns DeleteRCClusterNodesResponse
   */
  async deleteRCClusterNodes(request: $_model.DeleteRCClusterNodesRequest): Promise<$_model.DeleteRCClusterNodesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteRCClusterNodesWithOptions(request, runtime);
  }

  /**
   * Deletes a deployment set for an RDS Custom instance. Before you call this operation, you must specify parameters such as RegionId and DeploymentSetId.
   * 
   * @param request - DeleteRCDeploymentSetRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteRCDeploymentSetResponse
   */
  async deleteRCDeploymentSetWithOptions(request: $_model.DeleteRCDeploymentSetRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteRCDeploymentSetResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.deploymentSetId)) {
      query["DeploymentSetId"] = request.deploymentSetId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteRCDeploymentSet",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteRCDeploymentSetResponse>(await this.callApi(params, req, runtime), new $_model.DeleteRCDeploymentSetResponse({}));
  }

  /**
   * Deletes a deployment set for an RDS Custom instance. Before you call this operation, you must specify parameters such as RegionId and DeploymentSetId.
   * 
   * @param request - DeleteRCDeploymentSetRequest
   * @returns DeleteRCDeploymentSetResponse
   */
  async deleteRCDeploymentSet(request: $_model.DeleteRCDeploymentSetRequest): Promise<$_model.DeleteRCDeploymentSetResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteRCDeploymentSetWithOptions(request, runtime);
  }

  /**
   * Releases a pay-as-you-go data disk. The data disk can be a basic disk, an ultra disk, a standard SSD, or an Enterprise SSD (ESSD).
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   Manual snapshots of the disk are retained.
   * *   The disk must be in the Unattached (Available) state.
   * *   If no disk with the specified disk ID exists, the request will be ignored.
   * 
   * @param request - DeleteRCDiskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteRCDiskResponse
   */
  async deleteRCDiskWithOptions(request: $_model.DeleteRCDiskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteRCDiskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.diskId)) {
      query["DiskId"] = request.diskId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteRCDisk",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteRCDiskResponse>(await this.callApi(params, req, runtime), new $_model.DeleteRCDiskResponse({}));
  }

  /**
   * Releases a pay-as-you-go data disk. The data disk can be a basic disk, an ultra disk, a standard SSD, or an Enterprise SSD (ESSD).
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   Manual snapshots of the disk are retained.
   * *   The disk must be in the Unattached (Available) state.
   * *   If no disk with the specified disk ID exists, the request will be ignored.
   * 
   * @param request - DeleteRCDiskRequest
   * @returns DeleteRCDiskResponse
   */
  async deleteRCDisk(request: $_model.DeleteRCDiskRequest): Promise<$_model.DeleteRCDiskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteRCDiskWithOptions(request, runtime);
  }

  /**
   * 删除RDS用户专属主机实例
   * 
   * @param request - DeleteRCInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteRCInstanceResponse
   */
  async deleteRCInstanceWithOptions(request: $_model.DeleteRCInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteRCInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.force)) {
      query["Force"] = request.force;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteRCInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteRCInstanceResponse>(await this.callApi(params, req, runtime), new $_model.DeleteRCInstanceResponse({}));
  }

  /**
   * 删除RDS用户专属主机实例
   * 
   * @param request - DeleteRCInstanceRequest
   * @returns DeleteRCInstanceResponse
   */
  async deleteRCInstance(request: $_model.DeleteRCInstanceRequest): Promise<$_model.DeleteRCInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteRCInstanceWithOptions(request, runtime);
  }

  /**
   * Releases a subscription RDS Custom instance.
   * 
   * @remarks
   * After an instance is released, all physical resources used by the instance are recycled. Relevant data is erased and cannot be restored.
   * 
   * @param tmpReq - DeleteRCInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteRCInstancesResponse
   */
  async deleteRCInstancesWithOptions(tmpReq: $_model.DeleteRCInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteRCInstancesResponse> {
    tmpReq.validate();
    let request = new $_model.DeleteRCInstancesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.instanceId)) {
      request.instanceIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceId, "InstanceId", "json");
    }

    let query = { };
    if (!$dara.isNull(request.dryRun)) {
      query["DryRun"] = request.dryRun;
    }

    if (!$dara.isNull(request.force)) {
      query["Force"] = request.force;
    }

    if (!$dara.isNull(request.instanceIdShrink)) {
      query["InstanceId"] = request.instanceIdShrink;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.terminateSubscription)) {
      query["TerminateSubscription"] = request.terminateSubscription;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteRCInstances",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteRCInstancesResponse>(await this.callApi(params, req, runtime), new $_model.DeleteRCInstancesResponse({}));
  }

  /**
   * Releases a subscription RDS Custom instance.
   * 
   * @remarks
   * After an instance is released, all physical resources used by the instance are recycled. Relevant data is erased and cannot be restored.
   * 
   * @param request - DeleteRCInstancesRequest
   * @returns DeleteRCInstancesResponse
   */
  async deleteRCInstances(request: $_model.DeleteRCInstancesRequest): Promise<$_model.DeleteRCInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteRCInstancesWithOptions(request, runtime);
  }

  /**
   * Deletes the edge node pool of an RDS Custom instance.
   * 
   * @param request - DeleteRCNodePoolRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteRCNodePoolResponse
   */
  async deleteRCNodePoolWithOptions(request: $_model.DeleteRCNodePoolRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteRCNodePoolResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clusterId)) {
      query["ClusterId"] = request.clusterId;
    }

    if (!$dara.isNull(request.nodePoolId)) {
      query["NodePoolId"] = request.nodePoolId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteRCNodePool",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteRCNodePoolResponse>(await this.callApi(params, req, runtime), new $_model.DeleteRCNodePoolResponse({}));
  }

  /**
   * Deletes the edge node pool of an RDS Custom instance.
   * 
   * @param request - DeleteRCNodePoolRequest
   * @returns DeleteRCNodePoolResponse
   */
  async deleteRCNodePool(request: $_model.DeleteRCNodePoolRequest): Promise<$_model.DeleteRCNodePoolResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteRCNodePoolWithOptions(request, runtime);
  }

  /**
   * Deletes a cloud disk snapshot.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If the specified snapshot ID does not exist, the request will be ignored.
   * *   If the snapshot is used to create custom images, the snapshot cannot be deleted. You must delete the created custom images before you can delete the snapshot.
   * *   If the snapshot is used to create cloud disks and `Force` is not specified or is set to `false`, the snapshot cannot be directly deleted. If you want to delete the snapshot, set `Force` to true to forcefully delete the snapshot. The cloud disks created from the snapshot cannot be re-initialized after the snapshot is forcefully deleted.
   * 
   * @param request - DeleteRCSnapshotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteRCSnapshotResponse
   */
  async deleteRCSnapshotWithOptions(request: $_model.DeleteRCSnapshotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteRCSnapshotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.force)) {
      query["Force"] = request.force;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.snapshotId)) {
      query["SnapshotId"] = request.snapshotId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteRCSnapshot",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteRCSnapshotResponse>(await this.callApi(params, req, runtime), new $_model.DeleteRCSnapshotResponse({}));
  }

  /**
   * Deletes a cloud disk snapshot.
   * 
   * @remarks
   * Before you call this operation, take note of the following items:
   * *   If the specified snapshot ID does not exist, the request will be ignored.
   * *   If the snapshot is used to create custom images, the snapshot cannot be deleted. You must delete the created custom images before you can delete the snapshot.
   * *   If the snapshot is used to create cloud disks and `Force` is not specified or is set to `false`, the snapshot cannot be directly deleted. If you want to delete the snapshot, set `Force` to true to forcefully delete the snapshot. The cloud disks created from the snapshot cannot be re-initialized after the snapshot is forcefully deleted.
   * 
   * @param request - DeleteRCSnapshotRequest
   * @returns DeleteRCSnapshotResponse
   */
  async deleteRCSnapshot(request: $_model.DeleteRCSnapshotRequest): Promise<$_model.DeleteRCSnapshotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteRCSnapshotWithOptions(request, runtime);
  }

  /**
   * Deletes the data synchronization link for a disaster recovery (DR) ApsaraDB RDS instance and promotes the DR instance to the primary instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * *   SQL Server
   * 
   * @param request - DeleteReplicationLinkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteReplicationLinkResponse
   */
  async deleteReplicationLinkWithOptions(request: $_model.DeleteReplicationLinkRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteReplicationLinkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.promoteToMaster)) {
      query["PromoteToMaster"] = request.promoteToMaster;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteReplicationLink",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteReplicationLinkResponse>(await this.callApi(params, req, runtime), new $_model.DeleteReplicationLinkResponse({}));
  }

  /**
   * Deletes the data synchronization link for a disaster recovery (DR) ApsaraDB RDS instance and promotes the DR instance to the primary instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * *   SQL Server
   * 
   * @param request - DeleteReplicationLinkRequest
   * @returns DeleteReplicationLinkResponse
   */
  async deleteReplicationLink(request: $_model.DeleteReplicationLinkRequest): Promise<$_model.DeleteReplicationLinkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteReplicationLinkWithOptions(request, runtime);
  }

  /**
   * Deletes the credential of a user who uses the Data API feature.
   * 
   * @param request - DeleteSecretRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteSecretResponse
   */
  async deleteSecretWithOptions(request: $_model.DeleteSecretRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteSecretResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.dbInstanceId)) {
      query["DbInstanceId"] = request.dbInstanceId;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.secretArn)) {
      query["SecretArn"] = request.secretArn;
    }

    if (!$dara.isNull(request.secretName)) {
      query["SecretName"] = request.secretName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteSecret",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteSecretResponse>(await this.callApi(params, req, runtime), new $_model.DeleteSecretResponse({}));
  }

  /**
   * Deletes the credential of a user who uses the Data API feature.
   * 
   * @param request - DeleteSecretRequest
   * @returns DeleteSecretResponse
   */
  async deleteSecret(request: $_model.DeleteSecretRequest): Promise<$_model.DeleteSecretResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteSecretWithOptions(request, runtime);
  }

  /**
   * Deletes a replication slot of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   PostgreSQL
   * ### [](#)Precautions
   * You can delete a replication slot only when the status of the slot is **INACTIVE**. You can call the DescribeSlots operation to query the status of a replication slot.
   * 
   * @param request - DeleteSlotRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteSlotResponse
   */
  async deleteSlotWithOptions(request: $_model.DeleteSlotRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteSlotResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.slotName)) {
      query["SlotName"] = request.slotName;
    }

    if (!$dara.isNull(request.slotStatus)) {
      query["SlotStatus"] = request.slotStatus;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteSlot",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteSlotResponse>(await this.callApi(params, req, runtime), new $_model.DeleteSlotResponse({}));
  }

  /**
   * Deletes a replication slot of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   PostgreSQL
   * ### [](#)Precautions
   * You can delete a replication slot only when the status of the slot is **INACTIVE**. You can call the DescribeSlots operation to query the status of a replication slot.
   * 
   * @param request - DeleteSlotRequest
   * @returns DeleteSlotResponse
   */
  async deleteSlot(request: $_model.DeleteSlotRequest): Promise<$_model.DeleteSlotResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteSlotWithOptions(request, runtime);
  }

  /**
   * Deletes the backup files of an ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   MySQL
   * ### [](#)Usage notes
   * *   A full backup file contains the data of a self-managed MySQL instance. You can restore the data of a self-managed MySQL instance from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](https://help.aliyun.com/document_detail/251779.html).
   * *   This operation deletes full backup files only from the ApsaraDB RDS console. This operation does not affect the full backup files that are stored as objects in Object Storage Service (OSS) buckets. After you call this operation to delete a full backup file, you can call the ImportUserBackupFile operation to reimport the full backup file.
   * 
   * @param request - DeleteUserBackupFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteUserBackupFileResponse
   */
  async deleteUserBackupFileWithOptions(request: $_model.DeleteUserBackupFileRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DeleteUserBackupFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteUserBackupFile",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DeleteUserBackupFileResponse>(await this.callApi(params, req, runtime), new $_model.DeleteUserBackupFileResponse({}));
  }

  /**
   * Deletes the backup files of an ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   MySQL
   * ### [](#)Usage notes
   * *   A full backup file contains the data of a self-managed MySQL instance. You can restore the data of a self-managed MySQL instance from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](https://help.aliyun.com/document_detail/251779.html).
   * *   This operation deletes full backup files only from the ApsaraDB RDS console. This operation does not affect the full backup files that are stored as objects in Object Storage Service (OSS) buckets. After you call this operation to delete a full backup file, you can call the ImportUserBackupFile operation to reimport the full backup file.
   * 
   * @param request - DeleteUserBackupFileRequest
   * @returns DeleteUserBackupFileResponse
   */
  async deleteUserBackupFile(request: $_model.DeleteUserBackupFileRequest): Promise<$_model.DeleteUserBackupFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteUserBackupFileWithOptions(request, runtime);
  }

  /**
   * Queries the migration tasks of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * 
   * @param request - DescibeImportsFromDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescibeImportsFromDatabaseResponse
   */
  async descibeImportsFromDatabaseWithOptions(request: $_model.DescibeImportsFromDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescibeImportsFromDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.importId)) {
      query["ImportId"] = request.importId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescibeImportsFromDatabase",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescibeImportsFromDatabaseResponse>(await this.callApi(params, req, runtime), new $_model.DescibeImportsFromDatabaseResponse({}));
  }

  /**
   * Queries the migration tasks of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * 
   * @param request - DescibeImportsFromDatabaseRequest
   * @returns DescibeImportsFromDatabaseResponse
   */
  async descibeImportsFromDatabase(request: $_model.DescibeImportsFromDatabaseRequest): Promise<$_model.DescibeImportsFromDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.descibeImportsFromDatabaseWithOptions(request, runtime);
  }

  /**
   * Queries information about the AD domain of an instance. The information includes whether the instance is added to the AD domain, the name of the AD domain, and the account.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   SQL Server
   * 
   * @param request - DescribeADInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeADInfoResponse
   */
  async describeADInfoWithOptions(request: $_model.DescribeADInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeADInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeADInfo",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeADInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeADInfoResponse({}));
  }

  /**
   * Queries information about the AD domain of an instance. The information includes whether the instance is added to the AD domain, the name of the AD domain, and the account.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   SQL Server
   * 
   * @param request - DescribeADInfoRequest
   * @returns DescribeADInfoResponse
   */
  async describeADInfo(request: $_model.DescribeADInfoRequest): Promise<$_model.DescribeADInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeADInfoWithOptions(request, runtime);
  }

  /**
   * 查询全密态用户权限
   * 
   * @param request - DescribeAccountMaskingPrivilegeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAccountMaskingPrivilegeResponse
   */
  async describeAccountMaskingPrivilegeWithOptions(request: $_model.DescribeAccountMaskingPrivilegeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAccountMaskingPrivilegeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.userName)) {
      query["UserName"] = request.userName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAccountMaskingPrivilege",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAccountMaskingPrivilegeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAccountMaskingPrivilegeResponse({}));
  }

  /**
   * 查询全密态用户权限
   * 
   * @param request - DescribeAccountMaskingPrivilegeRequest
   * @returns DescribeAccountMaskingPrivilegeResponse
   */
  async describeAccountMaskingPrivilege(request: $_model.DescribeAccountMaskingPrivilegeRequest): Promise<$_model.DescribeAccountMaskingPrivilegeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAccountMaskingPrivilegeWithOptions(request, runtime);
  }

  /**
   * Queries the details about the accounts that are created on an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeAccountsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAccountsResponse
   */
  async describeAccountsWithOptions(request: $_model.DescribeAccountsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAccountsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAccounts",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAccountsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAccountsResponse({}));
  }

  /**
   * Queries the details about the accounts that are created on an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeAccountsRequest
   * @returns DescribeAccountsResponse
   */
  async describeAccounts(request: $_model.DescribeAccountsRequest): Promise<$_model.DescribeAccountsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAccountsWithOptions(request, runtime);
  }

  /**
   * Queries whether the historical events feature is enabled.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeActionEventPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeActionEventPolicyResponse
   */
  async describeActionEventPolicyWithOptions(request: $_model.DescribeActionEventPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeActionEventPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeActionEventPolicy",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeActionEventPolicyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeActionEventPolicyResponse({}));
  }

  /**
   * Queries whether the historical events feature is enabled.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeActionEventPolicyRequest
   * @returns DescribeActionEventPolicyResponse
   */
  async describeActionEventPolicy(request: $_model.DescribeActionEventPolicyRequest): Promise<$_model.DescribeActionEventPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeActionEventPolicyWithOptions(request, runtime);
  }

  /**
   * Queries the details about scheduled O\\\\\\\\\\\\\\\\\\\\&M tasks for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeActiveOperationTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeActiveOperationTasksResponse
   */
  async describeActiveOperationTasksWithOptions(request: $_model.DescribeActiveOperationTasksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeActiveOperationTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.allowCancel)) {
      query["AllowCancel"] = request.allowCancel;
    }

    if (!$dara.isNull(request.allowChange)) {
      query["AllowChange"] = request.allowChange;
    }

    if (!$dara.isNull(request.changeLevel)) {
      query["ChangeLevel"] = request.changeLevel;
    }

    if (!$dara.isNull(request.dbType)) {
      query["DbType"] = request.dbType;
    }

    if (!$dara.isNull(request.insName)) {
      query["InsName"] = request.insName;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.productId)) {
      query["ProductId"] = request.productId;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeActiveOperationTasks",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeActiveOperationTasksResponse>(await this.callApi(params, req, runtime), new $_model.DescribeActiveOperationTasksResponse({}));
  }

  /**
   * Queries the details about scheduled O\\\\\\\\\\\\\\\\\\\\&M tasks for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeActiveOperationTasksRequest
   * @returns DescribeActiveOperationTasksResponse
   */
  async describeActiveOperationTasks(request: $_model.DescribeActiveOperationTasksRequest): Promise<$_model.DescribeActiveOperationTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeActiveOperationTasksWithOptions(request, runtime);
  }

  /**
   * Queries whitelist templates at a time by using fuzzy search.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - DescribeAllWhitelistTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAllWhitelistTemplateResponse
   */
  async describeAllWhitelistTemplateWithOptions(request: $_model.DescribeAllWhitelistTemplateRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAllWhitelistTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fuzzySearch)) {
      query["FuzzySearch"] = request.fuzzySearch;
    }

    if (!$dara.isNull(request.maxRecordsPerPage)) {
      query["MaxRecordsPerPage"] = request.maxRecordsPerPage;
    }

    if (!$dara.isNull(request.pageNumbers)) {
      query["PageNumbers"] = request.pageNumbers;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.templateName)) {
      query["TemplateName"] = request.templateName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAllWhitelistTemplate",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAllWhitelistTemplateResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAllWhitelistTemplateResponse({}));
  }

  /**
   * Queries whitelist templates at a time by using fuzzy search.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - DescribeAllWhitelistTemplateRequest
   * @returns DescribeAllWhitelistTemplateResponse
   */
  async describeAllWhitelistTemplate(request: $_model.DescribeAllWhitelistTemplateRequest): Promise<$_model.DescribeAllWhitelistTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAllWhitelistTemplateWithOptions(request, runtime);
  }

  /**
   * Queries the number of analytic instances that are associated with an ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)References
   * [Create and view an analytic instance](https://help.aliyun.com/document_detail/155180.html)
   * 
   * @param request - DescribeAnalyticdbByPrimaryDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAnalyticdbByPrimaryDBInstanceResponse
   */
  async describeAnalyticdbByPrimaryDBInstanceWithOptions(request: $_model.DescribeAnalyticdbByPrimaryDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAnalyticdbByPrimaryDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAnalyticdbByPrimaryDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAnalyticdbByPrimaryDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAnalyticdbByPrimaryDBInstanceResponse({}));
  }

  /**
   * Queries the number of analytic instances that are associated with an ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)References
   * [Create and view an analytic instance](https://help.aliyun.com/document_detail/155180.html)
   * 
   * @param request - DescribeAnalyticdbByPrimaryDBInstanceRequest
   * @returns DescribeAnalyticdbByPrimaryDBInstanceResponse
   */
  async describeAnalyticdbByPrimaryDBInstance(request: $_model.DescribeAnalyticdbByPrimaryDBInstanceRequest): Promise<$_model.DescribeAnalyticdbByPrimaryDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAnalyticdbByPrimaryDBInstanceWithOptions(request, runtime);
  }

  /**
   * Queries the specifications that are supported for an instance. The specifications include the instance type and the storage capacity.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeAvailableClassesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAvailableClassesResponse
   */
  async describeAvailableClassesWithOptions(request: $_model.DescribeAvailableClassesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAvailableClassesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.category)) {
      query["Category"] = request.category;
    }

    if (!$dara.isNull(request.commodityCode)) {
      query["CommodityCode"] = request.commodityCode;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceStorageType)) {
      query["DBInstanceStorageType"] = request.DBInstanceStorageType;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.instanceChargeType)) {
      query["InstanceChargeType"] = request.instanceChargeType;
    }

    if (!$dara.isNull(request.orderType)) {
      query["OrderType"] = request.orderType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAvailableClasses",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAvailableClassesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAvailableClassesResponse({}));
  }

  /**
   * Queries the specifications that are supported for an instance. The specifications include the instance type and the storage capacity.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeAvailableClassesRequest
   * @returns DescribeAvailableClassesResponse
   */
  async describeAvailableClasses(request: $_model.DescribeAvailableClassesRequest): Promise<$_model.DescribeAvailableClassesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAvailableClassesWithOptions(request, runtime);
  }

  /**
   * Queries the available destination regions to which the cross-region backup files from a specific source region can be replicated.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * 
   * @param request - DescribeAvailableCrossRegionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAvailableCrossRegionResponse
   */
  async describeAvailableCrossRegionWithOptions(request: $_model.DescribeAvailableCrossRegionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAvailableCrossRegionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAvailableCrossRegion",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAvailableCrossRegionResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAvailableCrossRegionResponse({}));
  }

  /**
   * Queries the available destination regions to which the cross-region backup files from a specific source region can be replicated.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * 
   * @param request - DescribeAvailableCrossRegionRequest
   * @returns DescribeAvailableCrossRegionResponse
   */
  async describeAvailableCrossRegion(request: $_model.DescribeAvailableCrossRegionRequest): Promise<$_model.DescribeAvailableCrossRegionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAvailableCrossRegionWithOptions(request, runtime);
  }

  /**
   * Queries all Enhanced Monitoring metrics that are supported by an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [View the Enhanced Monitoring metrics](https://help.aliyun.com/document_detail/299200.html)
   * 
   * @param request - DescribeAvailableMetricsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAvailableMetricsResponse
   */
  async describeAvailableMetricsWithOptions(request: $_model.DescribeAvailableMetricsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAvailableMetricsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAvailableMetrics",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAvailableMetricsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAvailableMetricsResponse({}));
  }

  /**
   * Queries all Enhanced Monitoring metrics that are supported by an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [View the Enhanced Monitoring metrics](https://help.aliyun.com/document_detail/299200.html)
   * 
   * @param request - DescribeAvailableMetricsRequest
   * @returns DescribeAvailableMetricsResponse
   */
  async describeAvailableMetrics(request: $_model.DescribeAvailableMetricsRequest): Promise<$_model.DescribeAvailableMetricsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAvailableMetricsWithOptions(request, runtime);
  }

  /**
   * Queries the time range within which data can be restored from a cross-region backup file.
   * 
   * @remarks
   * >  To view the time range within which you can restore data from a standard backup set, see DescribeBackups.
   * ### [](#)Supported database engines
   * ApsaraDB RDS for MySQL instances with local disks
   * ### [](#)References
   * >  Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Use the cross-region backup feature](https://help.aliyun.com/document_detail/120824.html)
   * 
   * @param request - DescribeAvailableRecoveryTimeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAvailableRecoveryTimeResponse
   */
  async describeAvailableRecoveryTimeWithOptions(request: $_model.DescribeAvailableRecoveryTimeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAvailableRecoveryTimeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.crossBackupId)) {
      query["CrossBackupId"] = request.crossBackupId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAvailableRecoveryTime",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAvailableRecoveryTimeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAvailableRecoveryTimeResponse({}));
  }

  /**
   * Queries the time range within which data can be restored from a cross-region backup file.
   * 
   * @remarks
   * >  To view the time range within which you can restore data from a standard backup set, see DescribeBackups.
   * ### [](#)Supported database engines
   * ApsaraDB RDS for MySQL instances with local disks
   * ### [](#)References
   * >  Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Use the cross-region backup feature](https://help.aliyun.com/document_detail/120824.html)
   * 
   * @param request - DescribeAvailableRecoveryTimeRequest
   * @returns DescribeAvailableRecoveryTimeResponse
   */
  async describeAvailableRecoveryTime(request: $_model.DescribeAvailableRecoveryTimeRequest): Promise<$_model.DescribeAvailableRecoveryTimeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAvailableRecoveryTimeWithOptions(request, runtime);
  }

  /**
   * Queries the available zones for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * > You can call this operation to query the available zones for an instance. The query result may be different from the zones available on the buy page of the ApsaraDB RDS console. The values of some parameters on the buy page vary based on the actual sales policy. The actual information on the [buy page](https://rdsbuy.console.aliyun.com/create/rds/PostgreSQL) prevails.
   * 
   * @param request - DescribeAvailableZonesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeAvailableZonesResponse
   */
  async describeAvailableZonesWithOptions(request: $_model.DescribeAvailableZonesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeAvailableZonesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.category)) {
      query["Category"] = request.category;
    }

    if (!$dara.isNull(request.commodityCode)) {
      query["CommodityCode"] = request.commodityCode;
    }

    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.dispenseMode)) {
      query["DispenseMode"] = request.dispenseMode;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeAvailableZones",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeAvailableZonesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeAvailableZonesResponse({}));
  }

  /**
   * Queries the available zones for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * > You can call this operation to query the available zones for an instance. The query result may be different from the zones available on the buy page of the ApsaraDB RDS console. The values of some parameters on the buy page vary based on the actual sales policy. The actual information on the [buy page](https://rdsbuy.console.aliyun.com/create/rds/PostgreSQL) prevails.
   * 
   * @param request - DescribeAvailableZonesRequest
   * @returns DescribeAvailableZonesResponse
   */
  async describeAvailableZones(request: $_model.DescribeAvailableZonesRequest): Promise<$_model.DescribeAvailableZonesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeAvailableZonesWithOptions(request, runtime);
  }

  /**
   * Queries the databases that are involved in a backup file.
   * 
   * @remarks
   * > This operation is phased out.
   * 
   * @param request - DescribeBackupDatabaseRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBackupDatabaseResponse
   */
  async describeBackupDatabaseWithOptions(request: $_model.DescribeBackupDatabaseRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBackupDatabaseResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBackupDatabase",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBackupDatabaseResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBackupDatabaseResponse({}));
  }

  /**
   * Queries the databases that are involved in a backup file.
   * 
   * @remarks
   * > This operation is phased out.
   * 
   * @param request - DescribeBackupDatabaseRequest
   * @returns DescribeBackupDatabaseResponse
   */
  async describeBackupDatabase(request: $_model.DescribeBackupDatabaseRequest): Promise<$_model.DescribeBackupDatabaseResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBackupDatabaseWithOptions(request, runtime);
  }

  /**
   * Queries the backup settings of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeBackupPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBackupPolicyResponse
   */
  async describeBackupPolicyWithOptions(request: $_model.DescribeBackupPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBackupPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupPolicyMode)) {
      query["BackupPolicyMode"] = request.backupPolicyMode;
    }

    if (!$dara.isNull(request.compressType)) {
      query["CompressType"] = request.compressType;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.releasedKeepPolicy)) {
      query["ReleasedKeepPolicy"] = request.releasedKeepPolicy;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBackupPolicy",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBackupPolicyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBackupPolicyResponse({}));
  }

  /**
   * Queries the backup settings of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeBackupPolicyRequest
   * @returns DescribeBackupPolicyResponse
   */
  async describeBackupPolicy(request: $_model.DescribeBackupPolicyRequest): Promise<$_model.DescribeBackupPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBackupPolicyWithOptions(request, runtime);
  }

  /**
   * Queries the backup tasks of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeBackupTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBackupTasksResponse
   */
  async describeBackupTasksWithOptions(request: $_model.DescribeBackupTasksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBackupTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupJobId)) {
      query["BackupJobId"] = request.backupJobId;
    }

    if (!$dara.isNull(request.backupJobStatus)) {
      query["BackupJobStatus"] = request.backupJobStatus;
    }

    if (!$dara.isNull(request.backupMode)) {
      query["BackupMode"] = request.backupMode;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.flag)) {
      query["Flag"] = request.flag;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBackupTasks",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBackupTasksResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBackupTasksResponse({}));
  }

  /**
   * Queries the backup tasks of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeBackupTasksRequest
   * @returns DescribeBackupTasksResponse
   */
  async describeBackupTasks(request: $_model.DescribeBackupTasksRequest): Promise<$_model.DescribeBackupTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBackupTasksWithOptions(request, runtime);
  }

  /**
   * Queries the data backup files of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeBackupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBackupsResponse
   */
  async describeBackupsWithOptions(request: $_model.DescribeBackupsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBackupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.backupMode)) {
      query["BackupMode"] = request.backupMode;
    }

    if (!$dara.isNull(request.backupStatus)) {
      query["BackupStatus"] = request.backupStatus;
    }

    if (!$dara.isNull(request.backupType)) {
      query["BackupType"] = request.backupType;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBackups",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBackupsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBackupsResponse({}));
  }

  /**
   * Queries the data backup files of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeBackupsRequest
   * @returns DescribeBackupsResponse
   */
  async describeBackups(request: $_model.DescribeBackupsRequest): Promise<$_model.DescribeBackupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBackupsWithOptions(request, runtime);
  }

  /**
   * Queries the binary log files of an instance that runs MySQL or MariaDB or the write-ahead logging (WAL) files of an instance that runs PostgreSQL.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   MariaDB
   * ### Usage notes
   * *   If the return value of the **DownloadLink** parameter is NULL, ApsaraDB RDS does not provide a download URL.
   * *   If the return value of the **DownloadLink** parameter is not NULL, ApsaraDB RDS provides a URL for you to download backup files. The expiration time of the URL is specified by the **LinkExpiredTime** parameter. You must download the backup files before the expiration time.
   * *   If you use a RAM user to download backup files, you must grant permissions to the RAM user. For more information, see [Grant backup file download permissions to a RAM user with read-only permissions](https://help.aliyun.com/document_detail/100043.html).
   * *   Each log file that is returned by this operation contains the log entries that are generated over the time range that is specified by the StartTime and EndTime parameters.
   * 
   * @param request - DescribeBinlogFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBinlogFilesResponse
   */
  async describeBinlogFilesWithOptions(request: $_model.DescribeBinlogFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeBinlogFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBinlogFiles",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeBinlogFilesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeBinlogFilesResponse({}));
  }

  /**
   * Queries the binary log files of an instance that runs MySQL or MariaDB or the write-ahead logging (WAL) files of an instance that runs PostgreSQL.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   MariaDB
   * ### Usage notes
   * *   If the return value of the **DownloadLink** parameter is NULL, ApsaraDB RDS does not provide a download URL.
   * *   If the return value of the **DownloadLink** parameter is not NULL, ApsaraDB RDS provides a URL for you to download backup files. The expiration time of the URL is specified by the **LinkExpiredTime** parameter. You must download the backup files before the expiration time.
   * *   If you use a RAM user to download backup files, you must grant permissions to the RAM user. For more information, see [Grant backup file download permissions to a RAM user with read-only permissions](https://help.aliyun.com/document_detail/100043.html).
   * *   Each log file that is returned by this operation contains the log entries that are generated over the time range that is specified by the StartTime and EndTime parameters.
   * 
   * @param request - DescribeBinlogFilesRequest
   * @returns DescribeBinlogFilesResponse
   */
  async describeBinlogFiles(request: $_model.DescribeBinlogFilesRequest): Promise<$_model.DescribeBinlogFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBinlogFilesWithOptions(request, runtime);
  }

  /**
   * Queries the character sets that are supported by an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeCharacterSetNameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCharacterSetNameResponse
   */
  async describeCharacterSetNameWithOptions(request: $_model.DescribeCharacterSetNameRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCharacterSetNameResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCharacterSetName",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCharacterSetNameResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCharacterSetNameResponse({}));
  }

  /**
   * Queries the character sets that are supported by an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeCharacterSetNameRequest
   * @returns DescribeCharacterSetNameResponse
   */
  async describeCharacterSetName(request: $_model.DescribeCharacterSetNameRequest): Promise<$_model.DescribeCharacterSetNameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCharacterSetNameWithOptions(request, runtime);
  }

  /**
   * Queries the details about the instance types of an instance by using the code of the instance types.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeClassDetailsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeClassDetailsResponse
   */
  async describeClassDetailsWithOptions(request: $_model.DescribeClassDetailsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeClassDetailsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.classCode)) {
      query["ClassCode"] = request.classCode;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.commodityCode)) {
      query["CommodityCode"] = request.commodityCode;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeClassDetails",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeClassDetailsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeClassDetailsResponse({}));
  }

  /**
   * Queries the details about the instance types of an instance by using the code of the instance types.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeClassDetailsRequest
   * @returns DescribeClassDetailsResponse
   */
  async describeClassDetails(request: $_model.DescribeClassDetailsRequest): Promise<$_model.DescribeClassDetailsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeClassDetailsWithOptions(request, runtime);
  }

  /**
   * Query the details about the assessment report for cloud migration to an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * 
   * @param request - DescribeCloudMigrationPrecheckResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCloudMigrationPrecheckResultResponse
   */
  async describeCloudMigrationPrecheckResultWithOptions(request: $_model.DescribeCloudMigrationPrecheckResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCloudMigrationPrecheckResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIpAddress)) {
      query["SourceIpAddress"] = request.sourceIpAddress;
    }

    if (!$dara.isNull(request.sourcePort)) {
      query["SourcePort"] = request.sourcePort;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCloudMigrationPrecheckResult",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCloudMigrationPrecheckResultResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCloudMigrationPrecheckResultResponse({}));
  }

  /**
   * Query the details about the assessment report for cloud migration to an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * 
   * @param request - DescribeCloudMigrationPrecheckResultRequest
   * @returns DescribeCloudMigrationPrecheckResultResponse
   */
  async describeCloudMigrationPrecheckResult(request: $_model.DescribeCloudMigrationPrecheckResultRequest): Promise<$_model.DescribeCloudMigrationPrecheckResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCloudMigrationPrecheckResultWithOptions(request, runtime);
  }

  /**
   * Queries the details about the cloud migration task of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * 
   * @param request - DescribeCloudMigrationResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCloudMigrationResultResponse
   */
  async describeCloudMigrationResultWithOptions(request: $_model.DescribeCloudMigrationResultRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCloudMigrationResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sourceIpAddress)) {
      query["SourceIpAddress"] = request.sourceIpAddress;
    }

    if (!$dara.isNull(request.sourcePort)) {
      query["SourcePort"] = request.sourcePort;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCloudMigrationResult",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCloudMigrationResultResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCloudMigrationResultResponse({}));
  }

  /**
   * Queries the details about the cloud migration task of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * 
   * @param request - DescribeCloudMigrationResultRequest
   * @returns DescribeCloudMigrationResultResponse
   */
  async describeCloudMigrationResult(request: $_model.DescribeCloudMigrationResultRequest): Promise<$_model.DescribeCloudMigrationResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCloudMigrationResultWithOptions(request, runtime);
  }

  /**
   * Queries the character set collations and time zones that are available for use in ApsaraDB RDS for SQL Server.
   * 
   * @remarks
   * ### Supported database engine
   * SQL Server
   * 
   * @param request - DescribeCollationTimeZonesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCollationTimeZonesResponse
   */
  async describeCollationTimeZonesWithOptions(request: $_model.DescribeCollationTimeZonesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCollationTimeZonesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCollationTimeZones",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCollationTimeZonesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCollationTimeZonesResponse({}));
  }

  /**
   * Queries the character set collations and time zones that are available for use in ApsaraDB RDS for SQL Server.
   * 
   * @remarks
   * ### Supported database engine
   * SQL Server
   * 
   * @param request - DescribeCollationTimeZonesRequest
   * @returns DescribeCollationTimeZonesResponse
   */
  async describeCollationTimeZones(request: $_model.DescribeCollationTimeZonesRequest): Promise<$_model.DescribeCollationTimeZonesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCollationTimeZonesWithOptions(request, runtime);
  }

  /**
   * Queries the databases and tables whose data is included in a cross-region backup file of an instance.
   * 
   * @remarks
   * ApsaraDB RDS for MySQL instances support cross-region backup and restoration. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](https://help.aliyun.com/document_detail/120824.html) and [Restore the data of an ApsaraDB RDS for MySQL instance across regions](https://help.aliyun.com/document_detail/120875.html).
   * Before you call this operation, make sure that the instance runs one of the following database engines:
   * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](https://help.aliyun.com/document_detail/120824.html).
   * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](https://help.aliyun.com/document_detail/187923.html).
   * *   PostgreSQL. For more information, see [Enable cross-region backups for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html).
   * 
   * @param request - DescribeCrossBackupMetaListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCrossBackupMetaListResponse
   */
  async describeCrossBackupMetaListWithOptions(request: $_model.DescribeCrossBackupMetaListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCrossBackupMetaListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupSetId)) {
      query["BackupSetId"] = request.backupSetId;
    }

    if (!$dara.isNull(request.getDbName)) {
      query["GetDbName"] = request.getDbName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageIndex)) {
      query["PageIndex"] = request.pageIndex;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.pattern)) {
      query["Pattern"] = request.pattern;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCrossBackupMetaList",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCrossBackupMetaListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCrossBackupMetaListResponse({}));
  }

  /**
   * Queries the databases and tables whose data is included in a cross-region backup file of an instance.
   * 
   * @remarks
   * ApsaraDB RDS for MySQL instances support cross-region backup and restoration. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](https://help.aliyun.com/document_detail/120824.html) and [Restore the data of an ApsaraDB RDS for MySQL instance across regions](https://help.aliyun.com/document_detail/120875.html).
   * Before you call this operation, make sure that the instance runs one of the following database engines:
   * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](https://help.aliyun.com/document_detail/120824.html).
   * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](https://help.aliyun.com/document_detail/187923.html).
   * *   PostgreSQL. For more information, see [Enable cross-region backups for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html).
   * 
   * @param request - DescribeCrossBackupMetaListRequest
   * @returns DescribeCrossBackupMetaListResponse
   */
  async describeCrossBackupMetaList(request: $_model.DescribeCrossBackupMetaListRequest): Promise<$_model.DescribeCrossBackupMetaListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCrossBackupMetaListWithOptions(request, runtime);
  }

  /**
   * Queries the instances for which the cross-region backup feature is enabled in a region and the cross-region backup settings of these instances.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * 
   * @param request - DescribeCrossRegionBackupDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCrossRegionBackupDBInstanceResponse
   */
  async describeCrossRegionBackupDBInstanceWithOptions(request: $_model.DescribeCrossRegionBackupDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCrossRegionBackupDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCrossRegionBackupDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCrossRegionBackupDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCrossRegionBackupDBInstanceResponse({}));
  }

  /**
   * Queries the instances for which the cross-region backup feature is enabled in a region and the cross-region backup settings of these instances.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * 
   * @param request - DescribeCrossRegionBackupDBInstanceRequest
   * @returns DescribeCrossRegionBackupDBInstanceResponse
   */
  async describeCrossRegionBackupDBInstance(request: $_model.DescribeCrossRegionBackupDBInstanceRequest): Promise<$_model.DescribeCrossRegionBackupDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCrossRegionBackupDBInstanceWithOptions(request, runtime);
  }

  /**
   * Queries the cross-region data backup files of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   ApsaraDB RDS for MySQL instances with local disks
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * ### [](#)References
   * >  Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * >  For more information about how to query cross-region log backup files, see DescribeCrossRegionLogBackupFiles.
   * 
   * @param request - DescribeCrossRegionBackupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCrossRegionBackupsResponse
   */
  async describeCrossRegionBackupsWithOptions(request: $_model.DescribeCrossRegionBackupsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCrossRegionBackupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.crossBackupId)) {
      query["CrossBackupId"] = request.crossBackupId;
    }

    if (!$dara.isNull(request.crossBackupRegion)) {
      query["CrossBackupRegion"] = request.crossBackupRegion;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCrossRegionBackups",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCrossRegionBackupsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCrossRegionBackupsResponse({}));
  }

  /**
   * Queries the cross-region data backup files of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   ApsaraDB RDS for MySQL instances with local disks
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * ### [](#)References
   * >  Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * >  For more information about how to query cross-region log backup files, see DescribeCrossRegionLogBackupFiles.
   * 
   * @param request - DescribeCrossRegionBackupsRequest
   * @returns DescribeCrossRegionBackupsResponse
   */
  async describeCrossRegionBackups(request: $_model.DescribeCrossRegionBackupsRequest): Promise<$_model.DescribeCrossRegionBackupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCrossRegionBackupsWithOptions(request, runtime);
  }

  /**
   * Queries the cross-region log backup files of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * >  For more information about how to query cross-region data backup files, see [DescribeCrossRegionBackups](https://help.aliyun.com/document_detail/121733.html).
   * 
   * @param request - DescribeCrossRegionLogBackupFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCrossRegionLogBackupFilesResponse
   */
  async describeCrossRegionLogBackupFilesWithOptions(request: $_model.DescribeCrossRegionLogBackupFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCrossRegionLogBackupFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.crossBackupRegion)) {
      query["CrossBackupRegion"] = request.crossBackupRegion;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCrossRegionLogBackupFiles",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCrossRegionLogBackupFilesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCrossRegionLogBackupFilesResponse({}));
  }

  /**
   * Queries the cross-region log backup files of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * >  For more information about how to query cross-region data backup files, see [DescribeCrossRegionBackups](https://help.aliyun.com/document_detail/121733.html).
   * 
   * @param request - DescribeCrossRegionLogBackupFilesRequest
   * @returns DescribeCrossRegionLogBackupFilesResponse
   */
  async describeCrossRegionLogBackupFiles(request: $_model.DescribeCrossRegionLogBackupFilesRequest): Promise<$_model.DescribeCrossRegionLogBackupFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCrossRegionLogBackupFilesWithOptions(request, runtime);
  }

  /**
   * 查询实例最新变配订单
   * 
   * @param request - DescribeCurrentModifyOrderRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCurrentModifyOrderResponse
   */
  async describeCurrentModifyOrderWithOptions(request: $_model.DescribeCurrentModifyOrderRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCurrentModifyOrderResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.dbInstanceId)) {
      query["DbInstanceId"] = request.dbInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCurrentModifyOrder",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCurrentModifyOrderResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCurrentModifyOrderResponse({}));
  }

  /**
   * 查询实例最新变配订单
   * 
   * @param request - DescribeCurrentModifyOrderRequest
   * @returns DescribeCurrentModifyOrderResponse
   */
  async describeCurrentModifyOrder(request: $_model.DescribeCurrentModifyOrderRequest): Promise<$_model.DescribeCurrentModifyOrderResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCurrentModifyOrderWithOptions(request, runtime);
  }

  /**
   * 查询实例资源使用情况
   * 
   * @param request - DescribeCustinsResourceInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeCustinsResourceInfoResponse
   */
  async describeCustinsResourceInfoWithOptions(request: $_model.DescribeCustinsResourceInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeCustinsResourceInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceIds)) {
      query["DBInstanceIds"] = request.DBInstanceIds;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeCustinsResourceInfo",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeCustinsResourceInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeCustinsResourceInfoResponse({}));
  }

  /**
   * 查询实例资源使用情况
   * 
   * @param request - DescribeCustinsResourceInfoRequest
   * @returns DescribeCustinsResourceInfoResponse
   */
  async describeCustinsResourceInfo(request: $_model.DescribeCustinsResourceInfoRequest): Promise<$_model.DescribeCustinsResourceInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeCustinsResourceInfoWithOptions(request, runtime);
  }

  /**
   * Queries the details of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeDBInstanceAttributeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceAttributeResponse
   */
  async describeDBInstanceAttributeWithOptions(request: $_model.DescribeDBInstanceAttributeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceAttributeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.expired)) {
      query["Expired"] = request.expired;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceAttribute",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceAttributeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceAttributeResponse({}));
  }

  /**
   * Queries the details of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeDBInstanceAttributeRequest
   * @returns DescribeDBInstanceAttributeResponse
   */
  async describeDBInstanceAttribute(request: $_model.DescribeDBInstanceAttributeRequest): Promise<$_model.DescribeDBInstanceAttributeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceAttributeWithOptions(request, runtime);
  }

  /**
   * Queries information about the tags that are added to an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDBInstanceByTagsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceByTagsResponse
   */
  async describeDBInstanceByTagsWithOptions(request: $_model.DescribeDBInstanceByTagsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceByTagsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.proxyId)) {
      query["proxyId"] = request.proxyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceByTags",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceByTagsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceByTagsResponse({}));
  }

  /**
   * Queries information about the tags that are added to an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDBInstanceByTagsRequest
   * @returns DescribeDBInstanceByTagsResponse
   */
  async describeDBInstanceByTags(request: $_model.DescribeDBInstanceByTagsRequest): Promise<$_model.DescribeDBInstanceByTagsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceByTagsWithOptions(request, runtime);
  }

  /**
   * 获取实例链路诊断信息
   * 
   * @param request - DescribeDBInstanceConnectivityRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceConnectivityResponse
   */
  async describeDBInstanceConnectivityWithOptions(request: $_model.DescribeDBInstanceConnectivityRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceConnectivityResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceConnectivity",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceConnectivityResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceConnectivityResponse({}));
  }

  /**
   * 获取实例链路诊断信息
   * 
   * @param request - DescribeDBInstanceConnectivityRequest
   * @returns DescribeDBInstanceConnectivityResponse
   */
  async describeDBInstanceConnectivity(request: $_model.DescribeDBInstanceConnectivityRequest): Promise<$_model.DescribeDBInstanceConnectivityResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceConnectivityWithOptions(request, runtime);
  }

  /**
   * You can call the DescribeDBInstanceDetail operation to query the details of an instance.
   * 
   * @remarks
   * This operation is phased out.
   * 
   * @param request - DescribeDBInstanceDetailRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceDetailResponse
   */
  async describeDBInstanceDetailWithOptions(request: $_model.DescribeDBInstanceDetailRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceDetailResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceDetail",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceDetailResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceDetailResponse({}));
  }

  /**
   * You can call the DescribeDBInstanceDetail operation to query the details of an instance.
   * 
   * @remarks
   * This operation is phased out.
   * 
   * @param request - DescribeDBInstanceDetailRequest
   * @returns DescribeDBInstanceDetailResponse
   */
  async describeDBInstanceDetail(request: $_model.DescribeDBInstanceDetailRequest): Promise<$_model.DescribeDBInstanceDetailResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceDetailWithOptions(request, runtime);
  }

  /**
   * You can call the DescribeDBInstanceEncryptionKey operation to check whether disk encryption is enabled for an instance. You can also query details about the keys that are used for disk encryption. This operation is supported for instances that run MySQL, SQL Server, or PostgreSQL.
   * 
   * @param request - DescribeDBInstanceEncryptionKeyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceEncryptionKeyResponse
   */
  async describeDBInstanceEncryptionKeyWithOptions(request: $_model.DescribeDBInstanceEncryptionKeyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceEncryptionKeyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.encryptionKey)) {
      query["EncryptionKey"] = request.encryptionKey;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.targetRegionId)) {
      query["TargetRegionId"] = request.targetRegionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceEncryptionKey",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceEncryptionKeyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceEncryptionKeyResponse({}));
  }

  /**
   * You can call the DescribeDBInstanceEncryptionKey operation to check whether disk encryption is enabled for an instance. You can also query details about the keys that are used for disk encryption. This operation is supported for instances that run MySQL, SQL Server, or PostgreSQL.
   * 
   * @param request - DescribeDBInstanceEncryptionKeyRequest
   * @returns DescribeDBInstanceEncryptionKeyResponse
   */
  async describeDBInstanceEncryptionKey(request: $_model.DescribeDBInstanceEncryptionKeyRequest): Promise<$_model.DescribeDBInstanceEncryptionKeyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceEncryptionKeyWithOptions(request, runtime);
  }

  /**
   * Queries the information about the endpoints of an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * MySQL
   * 
   * @param request - DescribeDBInstanceEndpointsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceEndpointsResponse
   */
  async describeDBInstanceEndpointsWithOptions(request: $_model.DescribeDBInstanceEndpointsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceEndpointsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceEndpointId)) {
      query["DBInstanceEndpointId"] = request.DBInstanceEndpointId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceEndpoints",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceEndpointsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceEndpointsResponse({}));
  }

  /**
   * Queries the information about the endpoints of an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * MySQL
   * 
   * @param request - DescribeDBInstanceEndpointsRequest
   * @returns DescribeDBInstanceEndpointsResponse
   */
  async describeDBInstanceEndpoints(request: $_model.DescribeDBInstanceEndpointsRequest): Promise<$_model.DescribeDBInstanceEndpointsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceEndpointsWithOptions(request, runtime);
  }

  /**
   * Queries the high availability mode and data replication mode of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Query the data replication mode of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96055.html)
   * *   [Query the data replication mode of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/151265.html)
   * *   [Query the data replication mode of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/415433.html)
   * 
   * @param request - DescribeDBInstanceHAConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceHAConfigResponse
   */
  async describeDBInstanceHAConfigWithOptions(request: $_model.DescribeDBInstanceHAConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceHAConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceHAConfig",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceHAConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceHAConfigResponse({}));
  }

  /**
   * Queries the high availability mode and data replication mode of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Query the data replication mode of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96055.html)
   * *   [Query the data replication mode of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/151265.html)
   * *   [Query the data replication mode of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/415433.html)
   * 
   * @param request - DescribeDBInstanceHAConfigRequest
   * @returns DescribeDBInstanceHAConfigResponse
   */
  async describeDBInstanceHAConfig(request: $_model.DescribeDBInstanceHAConfigRequest): Promise<$_model.DescribeDBInstanceHAConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceHAConfigWithOptions(request, runtime);
  }

  /**
   * Queries the IP address whitelist of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeDBInstanceIPArrayListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceIPArrayListResponse
   */
  async describeDBInstanceIPArrayListWithOptions(request: $_model.DescribeDBInstanceIPArrayListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceIPArrayListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.whitelistNetworkType)) {
      query["WhitelistNetworkType"] = request.whitelistNetworkType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceIPArrayList",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceIPArrayListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceIPArrayListResponse({}));
  }

  /**
   * Queries the IP address whitelist of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeDBInstanceIPArrayListRequest
   * @returns DescribeDBInstanceIPArrayListResponse
   */
  async describeDBInstanceIPArrayList(request: $_model.DescribeDBInstanceIPArrayListRequest): Promise<$_model.DescribeDBInstanceIPArrayListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceIPArrayListWithOptions(request, runtime);
  }

  /**
   * Queries the internal IP address and hostname of the Elastic Compute Service (ECS) instance on which the ApsaraDB RDS for SQL Server instance runs.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * SQL Server
   * ### [](#)Prerequisites
   * *   The RDS instance runs RDS Basic Edition, RDS High-availability Edition, or RDS Cluster Edition. If your RDS instance runs RDS High-availability Edition, make sure that the instance runs SQL Server 2012 or later.
   * *   The RDS instance belongs to a general-purpose or dedicated instance family. The shared instance family is not supported.
   * *   If the RDS instance runs RDS Basic Edition, the instance is created on or after September 02, 2022. You can view the Creation Time parameter of an instance in the Status section of the Basic Information page in the ApsaraDB RDS console.
   * ### [](#)References
   * >  Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Configure a distributed transaction whitelist](https://help.aliyun.com/document_detail/124321.html)
   * *   [Connect Kingdee K/3 WISE to an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/124188.html)
   * 
   * @param request - DescribeDBInstanceIpHostnameRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceIpHostnameResponse
   */
  async describeDBInstanceIpHostnameWithOptions(request: $_model.DescribeDBInstanceIpHostnameRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceIpHostnameResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceIpHostname",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceIpHostnameResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceIpHostnameResponse({}));
  }

  /**
   * Queries the internal IP address and hostname of the Elastic Compute Service (ECS) instance on which the ApsaraDB RDS for SQL Server instance runs.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * SQL Server
   * ### [](#)Prerequisites
   * *   The RDS instance runs RDS Basic Edition, RDS High-availability Edition, or RDS Cluster Edition. If your RDS instance runs RDS High-availability Edition, make sure that the instance runs SQL Server 2012 or later.
   * *   The RDS instance belongs to a general-purpose or dedicated instance family. The shared instance family is not supported.
   * *   If the RDS instance runs RDS Basic Edition, the instance is created on or after September 02, 2022. You can view the Creation Time parameter of an instance in the Status section of the Basic Information page in the ApsaraDB RDS console.
   * ### [](#)References
   * >  Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Configure a distributed transaction whitelist](https://help.aliyun.com/document_detail/124321.html)
   * *   [Connect Kingdee K/3 WISE to an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/124188.html)
   * 
   * @param request - DescribeDBInstanceIpHostnameRequest
   * @returns DescribeDBInstanceIpHostnameResponse
   */
  async describeDBInstanceIpHostname(request: $_model.DescribeDBInstanceIpHostnameRequest): Promise<$_model.DescribeDBInstanceIpHostnameResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceIpHostnameWithOptions(request, runtime);
  }

  /**
   * Queries the Enhanced Monitoring metrics that are displayed for an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [View the Enhanced Monitoring metrics](https://help.aliyun.com/document_detail/299200.html)
   * 
   * @param request - DescribeDBInstanceMetricsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceMetricsResponse
   */
  async describeDBInstanceMetricsWithOptions(request: $_model.DescribeDBInstanceMetricsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceMetricsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceMetrics",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceMetricsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceMetricsResponse({}));
  }

  /**
   * Queries the Enhanced Monitoring metrics that are displayed for an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [View the Enhanced Monitoring metrics](https://help.aliyun.com/document_detail/299200.html)
   * 
   * @param request - DescribeDBInstanceMetricsRequest
   * @returns DescribeDBInstanceMetricsResponse
   */
  async describeDBInstanceMetrics(request: $_model.DescribeDBInstanceMetricsRequest): Promise<$_model.DescribeDBInstanceMetricsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceMetricsWithOptions(request, runtime);
  }

  /**
   * Queries the monitoring frequency of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDBInstanceMonitorRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceMonitorResponse
   */
  async describeDBInstanceMonitorWithOptions(request: $_model.DescribeDBInstanceMonitorRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceMonitorResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceMonitor",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceMonitorResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceMonitorResponse({}));
  }

  /**
   * Queries the monitoring frequency of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDBInstanceMonitorRequest
   * @returns DescribeDBInstanceMonitorResponse
   */
  async describeDBInstanceMonitor(request: $_model.DescribeDBInstanceMonitorRequest): Promise<$_model.DescribeDBInstanceMonitorResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceMonitorWithOptions(request, runtime);
  }

  /**
   * Queries all endpoints of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDBInstanceNetInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceNetInfoResponse
   */
  async describeDBInstanceNetInfoWithOptions(request: $_model.DescribeDBInstanceNetInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceNetInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceNetRWSplitType)) {
      query["DBInstanceNetRWSplitType"] = request.DBInstanceNetRWSplitType;
    }

    if (!$dara.isNull(request.flag)) {
      query["Flag"] = request.flag;
    }

    if (!$dara.isNull(request.generalGroupName)) {
      query["GeneralGroupName"] = request.generalGroupName;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceNetInfo",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceNetInfoResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceNetInfoResponse({}));
  }

  /**
   * Queries all endpoints of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDBInstanceNetInfoRequest
   * @returns DescribeDBInstanceNetInfoResponse
   */
  async describeDBInstanceNetInfo(request: $_model.DescribeDBInstanceNetInfoRequest): Promise<$_model.DescribeDBInstanceNetInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceNetInfoWithOptions(request, runtime);
  }

  /**
   * Queries all endpoints of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDBInstanceNetInfoForChannelRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceNetInfoForChannelResponse
   */
  async describeDBInstanceNetInfoForChannelWithOptions(request: $_model.DescribeDBInstanceNetInfoForChannelRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceNetInfoForChannelResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceNetRWSplitType)) {
      query["DBInstanceNetRWSplitType"] = request.DBInstanceNetRWSplitType;
    }

    if (!$dara.isNull(request.flag)) {
      query["Flag"] = request.flag;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceNetInfoForChannel",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceNetInfoForChannelResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceNetInfoForChannelResponse({}));
  }

  /**
   * Queries all endpoints of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDBInstanceNetInfoForChannelRequest
   * @returns DescribeDBInstanceNetInfoForChannelResponse
   */
  async describeDBInstanceNetInfoForChannel(request: $_model.DescribeDBInstanceNetInfoForChannelRequest): Promise<$_model.DescribeDBInstanceNetInfoForChannelResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceNetInfoForChannelWithOptions(request, runtime);
  }

  /**
   * Queries the performance metrics of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDBInstancePerformanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstancePerformanceResponse
   */
  async describeDBInstancePerformanceWithOptions(request: $_model.DescribeDBInstancePerformanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstancePerformanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.key)) {
      query["Key"] = request.key;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstancePerformance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstancePerformanceResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstancePerformanceResponse({}));
  }

  /**
   * Queries the performance metrics of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDBInstancePerformanceRequest
   * @returns DescribeDBInstancePerformanceResponse
   */
  async describeDBInstancePerformance(request: $_model.DescribeDBInstancePerformanceRequest): Promise<$_model.DescribeDBInstancePerformanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstancePerformanceWithOptions(request, runtime);
  }

  /**
   * The operation is phased out.
   * 
   * @deprecated OpenAPI DescribeDBInstancePromoteActivity is deprecated
   * 
   * @param request - DescribeDBInstancePromoteActivityRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstancePromoteActivityResponse
   */
  // Deprecated
  async describeDBInstancePromoteActivityWithOptions(request: $_model.DescribeDBInstancePromoteActivityRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstancePromoteActivityResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliUid)) {
      query["AliUid"] = request.aliUid;
    }

    if (!$dara.isNull(request.dbInstanceName)) {
      query["DbInstanceName"] = request.dbInstanceName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstancePromoteActivity",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstancePromoteActivityResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstancePromoteActivityResponse({}));
  }

  /**
   * The operation is phased out.
   * 
   * @deprecated OpenAPI DescribeDBInstancePromoteActivity is deprecated
   * 
   * @param request - DescribeDBInstancePromoteActivityRequest
   * @returns DescribeDBInstancePromoteActivityResponse
   */
  // Deprecated
  async describeDBInstancePromoteActivity(request: $_model.DescribeDBInstancePromoteActivityRequest): Promise<$_model.DescribeDBInstancePromoteActivityResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstancePromoteActivityWithOptions(request, runtime);
  }

  /**
   * Queries the settings of shared proxies that are enabled on an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)Feature description
   * This operation is used to query the shared proxy settings of an instance that runs MySQL or the read/write splitting settings of an instance that runs SQL Server. For more information about how to query the dedicated proxy settings of an ApsaraDB RDS for MySQL instance, see [DescribeDBProxy](https://help.aliyun.com/document_detail/610506.html).
   * ### [](#)Prerequisites
   * Before you call this operation, make sure that the following requirements are met:
   * *   The shared proxy feature must be enabled for the primary instance.
   * *   The read/write splitting feature must be enabled for the primary instance.
   * 
   * @param request - DescribeDBInstanceProxyConfigurationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceProxyConfigurationResponse
   */
  async describeDBInstanceProxyConfigurationWithOptions(request: $_model.DescribeDBInstanceProxyConfigurationRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceProxyConfigurationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceProxyConfiguration",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceProxyConfigurationResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceProxyConfigurationResponse({}));
  }

  /**
   * Queries the settings of shared proxies that are enabled on an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)Feature description
   * This operation is used to query the shared proxy settings of an instance that runs MySQL or the read/write splitting settings of an instance that runs SQL Server. For more information about how to query the dedicated proxy settings of an ApsaraDB RDS for MySQL instance, see [DescribeDBProxy](https://help.aliyun.com/document_detail/610506.html).
   * ### [](#)Prerequisites
   * Before you call this operation, make sure that the following requirements are met:
   * *   The shared proxy feature must be enabled for the primary instance.
   * *   The read/write splitting feature must be enabled for the primary instance.
   * 
   * @param request - DescribeDBInstanceProxyConfigurationRequest
   * @returns DescribeDBInstanceProxyConfigurationResponse
   */
  async describeDBInstanceProxyConfiguration(request: $_model.DescribeDBInstanceProxyConfigurationRequest): Promise<$_model.DescribeDBInstanceProxyConfigurationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceProxyConfigurationWithOptions(request, runtime);
  }

  /**
   * Queries the status and configurations of a native replication instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [ApsaraDB RDS for MySQL native replication instances](https://help.aliyun.com/document_detail/2856487.html)
   * 
   * @param request - DescribeDBInstanceReplicationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceReplicationResponse
   */
  async describeDBInstanceReplicationWithOptions(request: $_model.DescribeDBInstanceReplicationRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceReplicationResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceReplication",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceReplicationResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceReplicationResponse({}));
  }

  /**
   * Queries the status and configurations of a native replication instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [ApsaraDB RDS for MySQL native replication instances](https://help.aliyun.com/document_detail/2856487.html)
   * 
   * @param request - DescribeDBInstanceReplicationRequest
   * @returns DescribeDBInstanceReplicationResponse
   */
  async describeDBInstanceReplication(request: $_model.DescribeDBInstanceReplicationRequest): Promise<$_model.DescribeDBInstanceReplicationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceReplicationWithOptions(request, runtime);
  }

  /**
   * Queries the SSL configurations of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - DescribeDBInstanceSSLRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceSSLResponse
   */
  async describeDBInstanceSSLWithOptions(request: $_model.DescribeDBInstanceSSLRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceSSLResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceSSL",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceSSLResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceSSLResponse({}));
  }

  /**
   * Queries the SSL configurations of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - DescribeDBInstanceSSLRequest
   * @returns DescribeDBInstanceSSLResponse
   */
  async describeDBInstanceSSL(request: $_model.DescribeDBInstanceSSLRequest): Promise<$_model.DescribeDBInstanceSSLResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceSSLWithOptions(request, runtime);
  }

  /**
   * Queries the security group rules that are configured for an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Configure security group settings for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/2392322.html)
   * 
   * @param request - DescribeDBInstanceSecurityGroupRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceSecurityGroupRuleResponse
   */
  async describeDBInstanceSecurityGroupRuleWithOptions(request: $_model.DescribeDBInstanceSecurityGroupRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceSecurityGroupRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceSecurityGroupRule",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceSecurityGroupRuleResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceSecurityGroupRuleResponse({}));
  }

  /**
   * Queries the security group rules that are configured for an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Configure security group settings for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/2392322.html)
   * 
   * @param request - DescribeDBInstanceSecurityGroupRuleRequest
   * @returns DescribeDBInstanceSecurityGroupRuleResponse
   */
  async describeDBInstanceSecurityGroupRule(request: $_model.DescribeDBInstanceSecurityGroupRuleRequest): Promise<$_model.DescribeDBInstanceSecurityGroupRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceSecurityGroupRuleWithOptions(request, runtime);
  }

  /**
   * Queries the status of the Transparent Data Encryption (TDE) feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * 
   * @param request - DescribeDBInstanceTDERequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstanceTDEResponse
   */
  async describeDBInstanceTDEWithOptions(request: $_model.DescribeDBInstanceTDERequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstanceTDEResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstanceTDE",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstanceTDEResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstanceTDEResponse({}));
  }

  /**
   * Queries the status of the Transparent Data Encryption (TDE) feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * 
   * @param request - DescribeDBInstanceTDERequest
   * @returns DescribeDBInstanceTDEResponse
   */
  async describeDBInstanceTDE(request: $_model.DescribeDBInstanceTDERequest): Promise<$_model.DescribeDBInstanceTDEResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstanceTDEWithOptions(request, runtime);
  }

  /**
   * Queries instances.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDBInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstancesResponse
   */
  async describeDBInstancesWithOptions(request: $_model.DescribeDBInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.category)) {
      query["Category"] = request.category;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.connectionMode)) {
      query["ConnectionMode"] = request.connectionMode;
    }

    if (!$dara.isNull(request.connectionString)) {
      query["ConnectionString"] = request.connectionString;
    }

    if (!$dara.isNull(request.DBInstanceClass)) {
      query["DBInstanceClass"] = request.DBInstanceClass;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceStatus)) {
      query["DBInstanceStatus"] = request.DBInstanceStatus;
    }

    if (!$dara.isNull(request.DBInstanceType)) {
      query["DBInstanceType"] = request.DBInstanceType;
    }

    if (!$dara.isNull(request.dedicatedHostGroupId)) {
      query["DedicatedHostGroupId"] = request.dedicatedHostGroupId;
    }

    if (!$dara.isNull(request.dedicatedHostId)) {
      query["DedicatedHostId"] = request.dedicatedHostId;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.expired)) {
      query["Expired"] = request.expired;
    }

    if (!$dara.isNull(request.filter)) {
      query["Filter"] = request.filter;
    }

    if (!$dara.isNull(request.instanceLevel)) {
      query["InstanceLevel"] = request.instanceLevel;
    }

    if (!$dara.isNull(request.instanceNetworkType)) {
      query["InstanceNetworkType"] = request.instanceNetworkType;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.tags)) {
      query["Tags"] = request.tags;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    if (!$dara.isNull(request.proxyId)) {
      query["proxyId"] = request.proxyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstances",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstancesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstancesResponse({}));
  }

  /**
   * Queries instances.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDBInstancesRequest
   * @returns DescribeDBInstancesResponse
   */
  async describeDBInstances(request: $_model.DescribeDBInstancesRequest): Promise<$_model.DescribeDBInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstancesWithOptions(request, runtime);
  }

  /**
   * Queries the instances.
   * 
   * @remarks
   * >  The DescribeDBInstancesAsCsv operation is phased out. You can call the DescribeDBInstances operation.
   * 
   * @deprecated OpenAPI DescribeDBInstancesAsCsv is deprecated, please use Rds::2014-08-15::DescribeDBInstances instead.
   * 
   * @param request - DescribeDBInstancesAsCsvRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstancesAsCsvResponse
   */
  // Deprecated
  async describeDBInstancesAsCsvWithOptions(request: $_model.DescribeDBInstancesAsCsvRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstancesAsCsvResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.cachedAsync)) {
      query["CachedAsync"] = request.cachedAsync;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.exportKey)) {
      query["ExportKey"] = request.exportKey;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstancesAsCsv",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstancesAsCsvResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstancesAsCsvResponse({}));
  }

  /**
   * Queries the instances.
   * 
   * @remarks
   * >  The DescribeDBInstancesAsCsv operation is phased out. You can call the DescribeDBInstances operation.
   * 
   * @deprecated OpenAPI DescribeDBInstancesAsCsv is deprecated, please use Rds::2014-08-15::DescribeDBInstances instead.
   * 
   * @param request - DescribeDBInstancesAsCsvRequest
   * @returns DescribeDBInstancesAsCsvResponse
   */
  // Deprecated
  async describeDBInstancesAsCsv(request: $_model.DescribeDBInstancesAsCsvRequest): Promise<$_model.DescribeDBInstancesAsCsvResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstancesAsCsvWithOptions(request, runtime);
  }

  /**
   * Queries the information about an ApsaraDB RDS instance based on the remaining subscription duration of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeDBInstancesByExpireTimeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstancesByExpireTimeResponse
   */
  async describeDBInstancesByExpireTimeWithOptions(request: $_model.DescribeDBInstancesByExpireTimeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstancesByExpireTimeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.expirePeriod)) {
      query["ExpirePeriod"] = request.expirePeriod;
    }

    if (!$dara.isNull(request.expired)) {
      query["Expired"] = request.expired;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.tags)) {
      query["Tags"] = request.tags;
    }

    if (!$dara.isNull(request.proxyId)) {
      query["proxyId"] = request.proxyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstancesByExpireTime",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstancesByExpireTimeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstancesByExpireTimeResponse({}));
  }

  /**
   * Queries the information about an ApsaraDB RDS instance based on the remaining subscription duration of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeDBInstancesByExpireTimeRequest
   * @returns DescribeDBInstancesByExpireTimeResponse
   */
  async describeDBInstancesByExpireTime(request: $_model.DescribeDBInstancesByExpireTimeRequest): Promise<$_model.DescribeDBInstancesByExpireTimeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstancesByExpireTimeWithOptions(request, runtime);
  }

  /**
   * You can call the DescribeDBInstancePerformance operation to query the performance of instances.
   * 
   * @remarks
   * This operation is phased out.
   * 
   * @param request - DescribeDBInstancesByPerformanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstancesByPerformanceResponse
   */
  async describeDBInstancesByPerformanceWithOptions(request: $_model.DescribeDBInstancesByPerformanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstancesByPerformanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sortKey)) {
      query["SortKey"] = request.sortKey;
    }

    if (!$dara.isNull(request.sortMethod)) {
      query["SortMethod"] = request.sortMethod;
    }

    if (!$dara.isNull(request.tags)) {
      query["Tags"] = request.tags;
    }

    if (!$dara.isNull(request.proxyId)) {
      query["proxyId"] = request.proxyId;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstancesByPerformance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstancesByPerformanceResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstancesByPerformanceResponse({}));
  }

  /**
   * You can call the DescribeDBInstancePerformance operation to query the performance of instances.
   * 
   * @remarks
   * This operation is phased out.
   * 
   * @param request - DescribeDBInstancesByPerformanceRequest
   * @returns DescribeDBInstancesByPerformanceResponse
   */
  async describeDBInstancesByPerformance(request: $_model.DescribeDBInstancesByPerformanceRequest): Promise<$_model.DescribeDBInstancesByPerformanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstancesByPerformanceWithOptions(request, runtime);
  }

  /**
   * Queries a list of instances.
   * 
   * @remarks
   * This operation is phased out.
   * 
   * @deprecated OpenAPI DescribeDBInstancesForClone is deprecated, please use Rds::2014-08-15::DescribeDBInstances instead.
   * 
   * @param request - DescribeDBInstancesForCloneRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBInstancesForCloneResponse
   */
  // Deprecated
  async describeDBInstancesForCloneWithOptions(request: $_model.DescribeDBInstancesForCloneRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBInstancesForCloneResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.connectionMode)) {
      query["ConnectionMode"] = request.connectionMode;
    }

    if (!$dara.isNull(request.currentInstanceId)) {
      query["CurrentInstanceId"] = request.currentInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceClass)) {
      query["DBInstanceClass"] = request.DBInstanceClass;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceStatus)) {
      query["DBInstanceStatus"] = request.DBInstanceStatus;
    }

    if (!$dara.isNull(request.DBInstanceType)) {
      query["DBInstanceType"] = request.DBInstanceType;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.expired)) {
      query["Expired"] = request.expired;
    }

    if (!$dara.isNull(request.instanceNetworkType)) {
      query["InstanceNetworkType"] = request.instanceNetworkType;
    }

    if (!$dara.isNull(request.nodeType)) {
      query["NodeType"] = request.nodeType;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.searchKey)) {
      query["SearchKey"] = request.searchKey;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    if (!$dara.isNull(request.proxyId)) {
      query["proxyId"] = request.proxyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBInstancesForClone",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBInstancesForCloneResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBInstancesForCloneResponse({}));
  }

  /**
   * Queries a list of instances.
   * 
   * @remarks
   * This operation is phased out.
   * 
   * @deprecated OpenAPI DescribeDBInstancesForClone is deprecated, please use Rds::2014-08-15::DescribeDBInstances instead.
   * 
   * @param request - DescribeDBInstancesForCloneRequest
   * @returns DescribeDBInstancesForCloneResponse
   */
  // Deprecated
  async describeDBInstancesForClone(request: $_model.DescribeDBInstancesForCloneRequest): Promise<$_model.DescribeDBInstancesForCloneResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBInstancesForCloneWithOptions(request, runtime);
  }

  /**
   * Queries minor engine versions that are available for an ApsaraDB RDS for MySQL instance or an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)Usage notes
   * Before you purchase or upgrade an instance that runs MySQL or PostgreSQL, you can call the DescribeDBMiniEngineVersions operation to query the minor engine versions that are available for the instance.
   * 
   * @param request - DescribeDBMiniEngineVersionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBMiniEngineVersionsResponse
   */
  async describeDBMiniEngineVersionsWithOptions(request: $_model.DescribeDBMiniEngineVersionsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBMiniEngineVersionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.dedicatedHostGroupId)) {
      query["DedicatedHostGroupId"] = request.dedicatedHostGroupId;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.minorVersionTag)) {
      query["MinorVersionTag"] = request.minorVersionTag;
    }

    if (!$dara.isNull(request.nodeType)) {
      query["NodeType"] = request.nodeType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.storageType)) {
      query["StorageType"] = request.storageType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBMiniEngineVersions",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBMiniEngineVersionsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBMiniEngineVersionsResponse({}));
  }

  /**
   * Queries minor engine versions that are available for an ApsaraDB RDS for MySQL instance or an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)Usage notes
   * Before you purchase or upgrade an instance that runs MySQL or PostgreSQL, you can call the DescribeDBMiniEngineVersions operation to query the minor engine versions that are available for the instance.
   * 
   * @param request - DescribeDBMiniEngineVersionsRequest
   * @returns DescribeDBMiniEngineVersionsResponse
   */
  async describeDBMiniEngineVersions(request: $_model.DescribeDBMiniEngineVersionsRequest): Promise<$_model.DescribeDBMiniEngineVersionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBMiniEngineVersionsWithOptions(request, runtime);
  }

  /**
   * Queries the settings of the database proxy feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * 
   * @param request - DescribeDBProxyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBProxyResponse
   */
  async describeDBProxyWithOptions(request: $_model.DescribeDBProxyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBProxyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBProxyEngineType)) {
      query["DBProxyEngineType"] = request.DBProxyEngineType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBProxy",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBProxyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBProxyResponse({}));
  }

  /**
   * Queries the settings of the database proxy feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * 
   * @param request - DescribeDBProxyRequest
   * @returns DescribeDBProxyResponse
   */
  async describeDBProxy(request: $_model.DescribeDBProxyRequest): Promise<$_model.DescribeDBProxyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBProxyWithOptions(request, runtime);
  }

  /**
   * Queries the information about the database proxy endpoints of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * 
   * @param request - DescribeDBProxyEndpointRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBProxyEndpointResponse
   */
  async describeDBProxyEndpointWithOptions(request: $_model.DescribeDBProxyEndpointRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBProxyEndpointResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBProxyConnectString)) {
      query["DBProxyConnectString"] = request.DBProxyConnectString;
    }

    if (!$dara.isNull(request.DBProxyEndpointId)) {
      query["DBProxyEndpointId"] = request.DBProxyEndpointId;
    }

    if (!$dara.isNull(request.DBProxyEngineType)) {
      query["DBProxyEngineType"] = request.DBProxyEngineType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBProxyEndpoint",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBProxyEndpointResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBProxyEndpointResponse({}));
  }

  /**
   * Queries the information about the database proxy endpoints of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * 
   * @param request - DescribeDBProxyEndpointRequest
   * @returns DescribeDBProxyEndpointResponse
   */
  async describeDBProxyEndpoint(request: $_model.DescribeDBProxyEndpointRequest): Promise<$_model.DescribeDBProxyEndpointResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBProxyEndpointWithOptions(request, runtime);
  }

  /**
   * Queries the performance data of the database proxy for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * >  Starting October 17, 2023, ApsaraDB RDS provides a dedicated proxy free of charge for each ApsaraDB RDS for MySQL instance on RDS Cluster Edition. For more information, see [[Special offers/Price changes\\] One proxy is provided free of charge for ApsaraDB RDS for MySQL instances on RDS Cluster Edition](~~2555466~~).
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [View the monitoring data of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/194241.html)
   * *   [View the monitoring data of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/418275.html)
   * 
   * @param request - DescribeDBProxyPerformanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDBProxyPerformanceResponse
   */
  async describeDBProxyPerformanceWithOptions(request: $_model.DescribeDBProxyPerformanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDBProxyPerformanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBProxyEngineType)) {
      query["DBProxyEngineType"] = request.DBProxyEngineType;
    }

    if (!$dara.isNull(request.DBProxyInstanceType)) {
      query["DBProxyInstanceType"] = request.DBProxyInstanceType;
    }

    if (!$dara.isNull(request.dimension)) {
      query["Dimension"] = request.dimension;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.metricsName)) {
      query["MetricsName"] = request.metricsName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDBProxyPerformance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDBProxyPerformanceResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDBProxyPerformanceResponse({}));
  }

  /**
   * Queries the performance data of the database proxy for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * >  Starting October 17, 2023, ApsaraDB RDS provides a dedicated proxy free of charge for each ApsaraDB RDS for MySQL instance on RDS Cluster Edition. For more information, see [[Special offers/Price changes\\] One proxy is provided free of charge for ApsaraDB RDS for MySQL instances on RDS Cluster Edition](~~2555466~~).
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [View the monitoring data of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/194241.html)
   * *   [View the monitoring data of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/418275.html)
   * 
   * @param request - DescribeDBProxyPerformanceRequest
   * @returns DescribeDBProxyPerformanceResponse
   */
  async describeDBProxyPerformance(request: $_model.DescribeDBProxyPerformanceRequest): Promise<$_model.DescribeDBProxyPerformanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDBProxyPerformanceWithOptions(request, runtime);
  }

  /**
   * Queries the distributed transaction whitelists of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Configures a distributed transaction whitelist for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/124321.html)
   * 
   * @param request - DescribeDTCSecurityIpHostsForSQLServerRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDTCSecurityIpHostsForSQLServerResponse
   */
  async describeDTCSecurityIpHostsForSQLServerWithOptions(request: $_model.DescribeDTCSecurityIpHostsForSQLServerRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDTCSecurityIpHostsForSQLServerResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDTCSecurityIpHostsForSQLServer",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDTCSecurityIpHostsForSQLServerResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDTCSecurityIpHostsForSQLServerResponse({}));
  }

  /**
   * Queries the distributed transaction whitelists of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Configures a distributed transaction whitelist for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/124321.html)
   * 
   * @param request - DescribeDTCSecurityIpHostsForSQLServerRequest
   * @returns DescribeDTCSecurityIpHostsForSQLServerResponse
   */
  async describeDTCSecurityIpHostsForSQLServer(request: $_model.DescribeDTCSecurityIpHostsForSQLServerRequest): Promise<$_model.DescribeDTCSecurityIpHostsForSQLServerResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDTCSecurityIpHostsForSQLServerWithOptions(request, runtime);
  }

  /**
   * Queries the details about the databases on an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDatabasesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDatabasesResponse
   */
  async describeDatabasesWithOptions(request: $_model.DescribeDatabasesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDatabasesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.DBStatus)) {
      query["DBStatus"] = request.DBStatus;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDatabases",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDatabasesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDatabasesResponse({}));
  }

  /**
   * Queries the details about the databases on an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeDatabasesRequest
   * @returns DescribeDatabasesResponse
   */
  async describeDatabases(request: $_model.DescribeDatabasesRequest): Promise<$_model.DescribeDatabasesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDatabasesWithOptions(request, runtime);
  }

  /**
   * Queries information about an ApsaraDB MyBase dedicated cluster.
   * 
   * @remarks
   * Dedicated clusters allow you to manage a number of instances in a cluster at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](https://help.aliyun.com/document_detail/141455.html)
   * 
   * @param request - DescribeDedicatedHostGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDedicatedHostGroupsResponse
   */
  async describeDedicatedHostGroupsWithOptions(request: $_model.DescribeDedicatedHostGroupsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDedicatedHostGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dedicatedHostGroupId)) {
      query["DedicatedHostGroupId"] = request.dedicatedHostGroupId;
    }

    if (!$dara.isNull(request.imageCategory)) {
      query["ImageCategory"] = request.imageCategory;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDedicatedHostGroups",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDedicatedHostGroupsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDedicatedHostGroupsResponse({}));
  }

  /**
   * Queries information about an ApsaraDB MyBase dedicated cluster.
   * 
   * @remarks
   * Dedicated clusters allow you to manage a number of instances in a cluster at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](https://help.aliyun.com/document_detail/141455.html)
   * 
   * @param request - DescribeDedicatedHostGroupsRequest
   * @returns DescribeDedicatedHostGroupsResponse
   */
  async describeDedicatedHostGroups(request: $_model.DescribeDedicatedHostGroupsRequest): Promise<$_model.DescribeDedicatedHostGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDedicatedHostGroupsWithOptions(request, runtime);
  }

  /**
   * Queries the information about the hosts in a dedicated cluster.
   * 
   * @remarks
   * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](https://help.aliyun.com/document_detail/141455.html)
   * 
   * @param request - DescribeDedicatedHostsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDedicatedHostsResponse
   */
  async describeDedicatedHostsWithOptions(request: $_model.DescribeDedicatedHostsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDedicatedHostsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.allocationStatus)) {
      query["AllocationStatus"] = request.allocationStatus;
    }

    if (!$dara.isNull(request.dedicatedHostGroupId)) {
      query["DedicatedHostGroupId"] = request.dedicatedHostGroupId;
    }

    if (!$dara.isNull(request.dedicatedHostId)) {
      query["DedicatedHostId"] = request.dedicatedHostId;
    }

    if (!$dara.isNull(request.hostStatus)) {
      query["HostStatus"] = request.hostStatus;
    }

    if (!$dara.isNull(request.hostType)) {
      query["HostType"] = request.hostType;
    }

    if (!$dara.isNull(request.orderId)) {
      query["OrderId"] = request.orderId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDedicatedHosts",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDedicatedHostsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDedicatedHostsResponse({}));
  }

  /**
   * Queries the information about the hosts in a dedicated cluster.
   * 
   * @remarks
   * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](https://help.aliyun.com/document_detail/141455.html)
   * 
   * @param request - DescribeDedicatedHostsRequest
   * @returns DescribeDedicatedHostsResponse
   */
  async describeDedicatedHosts(request: $_model.DescribeDedicatedHostsRequest): Promise<$_model.DescribeDedicatedHostsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDedicatedHostsWithOptions(request, runtime);
  }

  /**
   * Queries the data backup files of an ApsaraDB RDS instance that is released.
   * 
   * @remarks
   * ### Supported database engine
   * MySQL
   * > This operation is available only for instances that use local disks.
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * For more information about how to retain the data backup files of an instance after the instance is released, see [Configure automatic backup](https://help.aliyun.com/document_detail/98818.html).
   * 
   * @param request - DescribeDetachedBackupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDetachedBackupsResponse
   */
  async describeDetachedBackupsWithOptions(request: $_model.DescribeDetachedBackupsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeDetachedBackupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.backupMode)) {
      query["BackupMode"] = request.backupMode;
    }

    if (!$dara.isNull(request.backupStatus)) {
      query["BackupStatus"] = request.backupStatus;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDetachedBackups",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeDetachedBackupsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeDetachedBackupsResponse({}));
  }

  /**
   * Queries the data backup files of an ApsaraDB RDS instance that is released.
   * 
   * @remarks
   * ### Supported database engine
   * MySQL
   * > This operation is available only for instances that use local disks.
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * For more information about how to retain the data backup files of an instance after the instance is released, see [Configure automatic backup](https://help.aliyun.com/document_detail/98818.html).
   * 
   * @param request - DescribeDetachedBackupsRequest
   * @returns DescribeDetachedBackupsResponse
   */
  async describeDetachedBackups(request: $_model.DescribeDetachedBackupsRequest): Promise<$_model.DescribeDetachedBackupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDetachedBackupsWithOptions(request, runtime);
  }

  /**
   * Queries the error logs of an instance over a specific time range.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeErrorLogsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeErrorLogsResponse
   */
  async describeErrorLogsWithOptions(request: $_model.DescribeErrorLogsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeErrorLogsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeErrorLogs",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeErrorLogsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeErrorLogsResponse({}));
  }

  /**
   * Queries the error logs of an instance over a specific time range.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeErrorLogsRequest
   * @returns DescribeErrorLogsResponse
   */
  async describeErrorLogs(request: $_model.DescribeErrorLogsRequest): Promise<$_model.DescribeErrorLogsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeErrorLogsWithOptions(request, runtime);
  }

  /**
   * Queries historical events of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Historical events of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/129759.html)
   * *   [Historical events of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/131008.html)
   * *   [Historical events of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/131013.html)
   * *   [Historical events of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/131010.html)
   * 
   * @param request - DescribeEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeEventsResponse
   */
  async describeEventsWithOptions(request: $_model.DescribeEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeEvents",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeEventsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeEventsResponse({}));
  }

  /**
   * Queries historical events of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Historical events of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/129759.html)
   * *   [Historical events of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/131008.html)
   * *   [Historical events of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/131013.html)
   * *   [Historical events of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/131010.html)
   * 
   * @param request - DescribeEventsRequest
   * @returns DescribeEventsResponse
   */
  async describeEvents(request: $_model.DescribeEventsRequest): Promise<$_model.DescribeEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeEventsWithOptions(request, runtime);
  }

  /**
   * Queries the information about a global active database cluster or information about all global active database clusters in a region.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * 
   * @param request - DescribeGadInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeGadInstancesResponse
   */
  async describeGadInstancesWithOptions(request: $_model.DescribeGadInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeGadInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.gadInstanceName)) {
      query["GadInstanceName"] = request.gadInstanceName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeGadInstances",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeGadInstancesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeGadInstancesResponse({}));
  }

  /**
   * Queries the information about a global active database cluster or information about all global active database clusters in a region.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * 
   * @param request - DescribeGadInstancesRequest
   * @returns DescribeGadInstancesResponse
   */
  async describeGadInstances(request: $_model.DescribeGadInstancesRequest): Promise<$_model.DescribeGadInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeGadInstancesWithOptions(request, runtime);
  }

  /**
   * Queries the availability check method of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * [What is availability detection?](https://help.aliyun.com/document_detail/207467.html)
   * 
   * @param request - DescribeHADiagnoseConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHADiagnoseConfigResponse
   */
  async describeHADiagnoseConfigWithOptions(request: $_model.DescribeHADiagnoseConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHADiagnoseConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHADiagnoseConfig",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHADiagnoseConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHADiagnoseConfigResponse({}));
  }

  /**
   * Queries the availability check method of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * [What is availability detection?](https://help.aliyun.com/document_detail/207467.html)
   * 
   * @param request - DescribeHADiagnoseConfigRequest
   * @returns DescribeHADiagnoseConfigResponse
   */
  async describeHADiagnoseConfig(request: $_model.DescribeHADiagnoseConfigRequest): Promise<$_model.DescribeHADiagnoseConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHADiagnoseConfigWithOptions(request, runtime);
  }

  /**
   * Queries the settings of the automatic primary/secondary switchover feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeHASwitchConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHASwitchConfigResponse
   */
  async describeHASwitchConfigWithOptions(request: $_model.DescribeHASwitchConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHASwitchConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHASwitchConfig",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHASwitchConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHASwitchConfigResponse({}));
  }

  /**
   * Queries the settings of the automatic primary/secondary switchover feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeHASwitchConfigRequest
   * @returns DescribeHASwitchConfigResponse
   */
  async describeHASwitchConfig(request: $_model.DescribeHASwitchConfigRequest): Promise<$_model.DescribeHASwitchConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHASwitchConfigWithOptions(request, runtime);
  }

  /**
   * Queries historical events in the event center.
   * 
   * @param request - DescribeHistoryEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHistoryEventsResponse
   */
  async describeHistoryEventsWithOptions(request: $_model.DescribeHistoryEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHistoryEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.archiveStatus)) {
      query["ArchiveStatus"] = request.archiveStatus;
    }

    if (!$dara.isNull(request.eventCategory)) {
      query["EventCategory"] = request.eventCategory;
    }

    if (!$dara.isNull(request.eventId)) {
      query["EventId"] = request.eventId;
    }

    if (!$dara.isNull(request.eventLevel)) {
      query["EventLevel"] = request.eventLevel;
    }

    if (!$dara.isNull(request.eventStatus)) {
      query["EventStatus"] = request.eventStatus;
    }

    if (!$dara.isNull(request.eventType)) {
      query["EventType"] = request.eventType;
    }

    if (!$dara.isNull(request.fromStartTime)) {
      query["FromStartTime"] = request.fromStartTime;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.toStartTime)) {
      query["ToStartTime"] = request.toStartTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHistoryEvents",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHistoryEventsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHistoryEventsResponse({}));
  }

  /**
   * Queries historical events in the event center.
   * 
   * @param request - DescribeHistoryEventsRequest
   * @returns DescribeHistoryEventsResponse
   */
  async describeHistoryEvents(request: $_model.DescribeHistoryEventsRequest): Promise<$_model.DescribeHistoryEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHistoryEventsWithOptions(request, runtime);
  }

  /**
   * Queries the statistics of historical events in the event center.
   * 
   * @param request - DescribeHistoryEventsStatRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHistoryEventsStatResponse
   */
  async describeHistoryEventsStatWithOptions(request: $_model.DescribeHistoryEventsStatRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHistoryEventsStatResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.archiveStatus)) {
      query["ArchiveStatus"] = request.archiveStatus;
    }

    if (!$dara.isNull(request.fromStartTime)) {
      query["FromStartTime"] = request.fromStartTime;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.toStartTime)) {
      query["ToStartTime"] = request.toStartTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHistoryEventsStat",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHistoryEventsStatResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHistoryEventsStatResponse({}));
  }

  /**
   * Queries the statistics of historical events in the event center.
   * 
   * @param request - DescribeHistoryEventsStatRequest
   * @returns DescribeHistoryEventsStatResponse
   */
  async describeHistoryEventsStat(request: $_model.DescribeHistoryEventsStatRequest): Promise<$_model.DescribeHistoryEventsStatResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHistoryEventsStatWithOptions(request, runtime);
  }

  /**
   * Queries the historical tasks that are created within 30 days.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Tasks of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/474275.html)
   * *   [Tasks of an ApsaraDB RDS for PostrgreSQL instance](https://help.aliyun.com/document_detail/474537.html)
   * *   [Tasks of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/614826.html)
   * 
   * @param request - DescribeHistoryTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHistoryTasksResponse
   */
  async describeHistoryTasksWithOptions(request: $_model.DescribeHistoryTasksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHistoryTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fromExecTime)) {
      query["FromExecTime"] = request.fromExecTime;
    }

    if (!$dara.isNull(request.fromStartTime)) {
      query["FromStartTime"] = request.fromStartTime;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceType)) {
      query["InstanceType"] = request.instanceType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    if (!$dara.isNull(request.toExecTime)) {
      query["ToExecTime"] = request.toExecTime;
    }

    if (!$dara.isNull(request.toStartTime)) {
      query["ToStartTime"] = request.toStartTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHistoryTasks",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHistoryTasksResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHistoryTasksResponse({}));
  }

  /**
   * Queries the historical tasks that are created within 30 days.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Tasks of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/474275.html)
   * *   [Tasks of an ApsaraDB RDS for PostrgreSQL instance](https://help.aliyun.com/document_detail/474537.html)
   * *   [Tasks of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/614826.html)
   * 
   * @param request - DescribeHistoryTasksRequest
   * @returns DescribeHistoryTasksResponse
   */
  async describeHistoryTasks(request: $_model.DescribeHistoryTasksRequest): Promise<$_model.DescribeHistoryTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHistoryTasksWithOptions(request, runtime);
  }

  /**
   * Collects tasks in the task center.
   * 
   * @param request - DescribeHistoryTasksStatRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHistoryTasksStatResponse
   */
  async describeHistoryTasksStatWithOptions(request: $_model.DescribeHistoryTasksStatRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHistoryTasksStatResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fromExecTime)) {
      query["FromExecTime"] = request.fromExecTime;
    }

    if (!$dara.isNull(request.fromStartTime)) {
      query["FromStartTime"] = request.fromStartTime;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    if (!$dara.isNull(request.toExecTime)) {
      query["ToExecTime"] = request.toExecTime;
    }

    if (!$dara.isNull(request.toStartTime)) {
      query["ToStartTime"] = request.toStartTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHistoryTasksStat",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHistoryTasksStatResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHistoryTasksStatResponse({}));
  }

  /**
   * Collects tasks in the task center.
   * 
   * @param request - DescribeHistoryTasksStatRequest
   * @returns DescribeHistoryTasksStatResponse
   */
  async describeHistoryTasksStat(request: $_model.DescribeHistoryTasksStatRequest): Promise<$_model.DescribeHistoryTasksStatResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHistoryTasksStatWithOptions(request, runtime);
  }

  /**
   * 查询主机组弹性策略参数
   * 
   * @param request - DescribeHostGroupElasticStrategyParametersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHostGroupElasticStrategyParametersResponse
   */
  async describeHostGroupElasticStrategyParametersWithOptions(request: $_model.DescribeHostGroupElasticStrategyParametersRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHostGroupElasticStrategyParametersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dedicatedHostGroupName)) {
      query["DedicatedHostGroupName"] = request.dedicatedHostGroupName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHostGroupElasticStrategyParameters",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHostGroupElasticStrategyParametersResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHostGroupElasticStrategyParametersResponse({}));
  }

  /**
   * 查询主机组弹性策略参数
   * 
   * @param request - DescribeHostGroupElasticStrategyParametersRequest
   * @returns DescribeHostGroupElasticStrategyParametersResponse
   */
  async describeHostGroupElasticStrategyParameters(request: $_model.DescribeHostGroupElasticStrategyParametersRequest): Promise<$_model.DescribeHostGroupElasticStrategyParametersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHostGroupElasticStrategyParametersWithOptions(request, runtime);
  }

  /**
   * Queries the webshell URL that is used to connect to the host of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   SQL Server
   * ### [](#)Prerequisite
   * *   The instance meets the following requirements:
   *     *   The instance resides in a region other than the China (Zhangjiakou) region.
   *     *   The instance runs RDS Basic Edition, RDS Cluster Edition, or RDS High-availability Edition. If your instance runs RDS High-availability Edition, make sure that the instance runs SQL Server 2012 or later.
   *     *   The instance belongs to the general-purpose or dedicated instance family. The shared instance family is not supported.
   *     *   The instance resides in a virtual private cloud (VPC). For more information about how to change the network type of an RDS instance, see [Change the network type](https://help.aliyun.com/document_detail/95707.html).
   *     *   If the instance runs RDS High-availability Edition or RDS Cluster Edition, the instance is created on or after January 1, 2021. If the instance runs RDS Basic Edition, the instance is created on or after September 02, 2022. You can view the **Creation Time** parameter of an instance in the **Status** section of the **Basic Information** page in the ApsaraDB RDS console.
   * *   Your **Alibaba Cloud account** is used for logons.
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Create a host account and use the host account for logons](https://help.aliyun.com/document_detail/354862.html)
   * 
   * @param request - DescribeHostWebShellRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeHostWebShellResponse
   */
  async describeHostWebShellWithOptions(request: $_model.DescribeHostWebShellRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeHostWebShellResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.accountPassword)) {
      query["AccountPassword"] = request.accountPassword;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.hostName)) {
      query["HostName"] = request.hostName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionID)) {
      query["RegionID"] = request.regionID;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeHostWebShell",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeHostWebShellResponse>(await this.callApi(params, req, runtime), new $_model.DescribeHostWebShellResponse({}));
  }

  /**
   * Queries the webshell URL that is used to connect to the host of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   SQL Server
   * ### [](#)Prerequisite
   * *   The instance meets the following requirements:
   *     *   The instance resides in a region other than the China (Zhangjiakou) region.
   *     *   The instance runs RDS Basic Edition, RDS Cluster Edition, or RDS High-availability Edition. If your instance runs RDS High-availability Edition, make sure that the instance runs SQL Server 2012 or later.
   *     *   The instance belongs to the general-purpose or dedicated instance family. The shared instance family is not supported.
   *     *   The instance resides in a virtual private cloud (VPC). For more information about how to change the network type of an RDS instance, see [Change the network type](https://help.aliyun.com/document_detail/95707.html).
   *     *   If the instance runs RDS High-availability Edition or RDS Cluster Edition, the instance is created on or after January 1, 2021. If the instance runs RDS Basic Edition, the instance is created on or after September 02, 2022. You can view the **Creation Time** parameter of an instance in the **Status** section of the **Basic Information** page in the ApsaraDB RDS console.
   * *   Your **Alibaba Cloud account** is used for logons.
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Create a host account and use the host account for logons](https://help.aliyun.com/document_detail/354862.html)
   * 
   * @param request - DescribeHostWebShellRequest
   * @returns DescribeHostWebShellResponse
   */
  async describeHostWebShell(request: $_model.DescribeHostWebShellRequest): Promise<$_model.DescribeHostWebShellResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeHostWebShellWithOptions(request, runtime);
  }

  /**
   * Queries the automatic renewal status of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeInstanceAutoRenewalAttributeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInstanceAutoRenewalAttributeResponse
   */
  async describeInstanceAutoRenewalAttributeWithOptions(request: $_model.DescribeInstanceAutoRenewalAttributeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeInstanceAutoRenewalAttributeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.proxyId)) {
      query["proxyId"] = request.proxyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeInstanceAutoRenewalAttribute",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeInstanceAutoRenewalAttributeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeInstanceAutoRenewalAttributeResponse({}));
  }

  /**
   * Queries the automatic renewal status of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeInstanceAutoRenewalAttributeRequest
   * @returns DescribeInstanceAutoRenewalAttributeResponse
   */
  async describeInstanceAutoRenewalAttribute(request: $_model.DescribeInstanceAutoRenewalAttributeRequest): Promise<$_model.DescribeInstanceAutoRenewalAttributeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeInstanceAutoRenewalAttributeWithOptions(request, runtime);
  }

  /**
   * Queries the cross-region backup settings of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * 
   * @param request - DescribeInstanceCrossBackupPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInstanceCrossBackupPolicyResponse
   */
  async describeInstanceCrossBackupPolicyWithOptions(request: $_model.DescribeInstanceCrossBackupPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeInstanceCrossBackupPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeInstanceCrossBackupPolicy",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeInstanceCrossBackupPolicyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeInstanceCrossBackupPolicyResponse({}));
  }

  /**
   * Queries the cross-region backup settings of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * 
   * @param request - DescribeInstanceCrossBackupPolicyRequest
   * @returns DescribeInstanceCrossBackupPolicyResponse
   */
  async describeInstanceCrossBackupPolicy(request: $_model.DescribeInstanceCrossBackupPolicyRequest): Promise<$_model.DescribeInstanceCrossBackupPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeInstanceCrossBackupPolicyWithOptions(request, runtime);
  }

  /**
   * Queries the reserved keywords of an instance. The reserved keywords cannot be used for the usernames of accounts or the names of databases.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeInstanceKeywordsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInstanceKeywordsResponse
   */
  async describeInstanceKeywordsWithOptions(request: $_model.DescribeInstanceKeywordsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeInstanceKeywordsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.key)) {
      query["Key"] = request.key;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeInstanceKeywords",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeInstanceKeywordsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeInstanceKeywordsResponse({}));
  }

  /**
   * Queries the reserved keywords of an instance. The reserved keywords cannot be used for the usernames of accounts or the names of databases.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - DescribeInstanceKeywordsRequest
   * @returns DescribeInstanceKeywordsResponse
   */
  async describeInstanceKeywords(request: $_model.DescribeInstanceKeywordsRequest): Promise<$_model.DescribeInstanceKeywordsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeInstanceKeywordsWithOptions(request, runtime);
  }

  /**
   * Queries associated whitelists by instance name.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - DescribeInstanceLinkedWhitelistTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInstanceLinkedWhitelistTemplateResponse
   */
  async describeInstanceLinkedWhitelistTemplateWithOptions(request: $_model.DescribeInstanceLinkedWhitelistTemplateRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeInstanceLinkedWhitelistTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.insName)) {
      query["InsName"] = request.insName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeInstanceLinkedWhitelistTemplate",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeInstanceLinkedWhitelistTemplateResponse>(await this.callApi(params, req, runtime), new $_model.DescribeInstanceLinkedWhitelistTemplateResponse({}));
  }

  /**
   * Queries associated whitelists by instance name.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - DescribeInstanceLinkedWhitelistTemplateRequest
   * @returns DescribeInstanceLinkedWhitelistTemplateResponse
   */
  async describeInstanceLinkedWhitelistTemplate(request: $_model.DescribeInstanceLinkedWhitelistTemplateRequest): Promise<$_model.DescribeInstanceLinkedWhitelistTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeInstanceLinkedWhitelistTemplateWithOptions(request, runtime);
  }

  /**
   * Checks whether the specified resource of Key Management Service (KMS) is associated with an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * 
   * @param request - DescribeKmsAssociateResourcesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeKmsAssociateResourcesResponse
   */
  async describeKmsAssociateResourcesWithOptions(request: $_model.DescribeKmsAssociateResourcesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeKmsAssociateResourcesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.kmsResourceId)) {
      query["KmsResourceId"] = request.kmsResourceId;
    }

    if (!$dara.isNull(request.kmsResourceRegionId)) {
      query["KmsResourceRegionId"] = request.kmsResourceRegionId;
    }

    if (!$dara.isNull(request.kmsResourceType)) {
      query["KmsResourceType"] = request.kmsResourceType;
    }

    if (!$dara.isNull(request.kmsResourceUser)) {
      query["KmsResourceUser"] = request.kmsResourceUser;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeKmsAssociateResources",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeKmsAssociateResourcesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeKmsAssociateResourcesResponse({}));
  }

  /**
   * Checks whether the specified resource of Key Management Service (KMS) is associated with an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * 
   * @param request - DescribeKmsAssociateResourcesRequest
   * @returns DescribeKmsAssociateResourcesResponse
   */
  async describeKmsAssociateResources(request: $_model.DescribeKmsAssociateResourcesRequest): Promise<$_model.DescribeKmsAssociateResourcesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeKmsAssociateResourcesWithOptions(request, runtime);
  }

  /**
   * Queries the time range to which an RDS instance can be restored.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   MariaDB
   * 
   * @param request - DescribeLocalAvailableRecoveryTimeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLocalAvailableRecoveryTimeResponse
   */
  async describeLocalAvailableRecoveryTimeWithOptions(request: $_model.DescribeLocalAvailableRecoveryTimeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLocalAvailableRecoveryTimeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.region)) {
      query["Region"] = request.region;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLocalAvailableRecoveryTime",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLocalAvailableRecoveryTimeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLocalAvailableRecoveryTimeResponse({}));
  }

  /**
   * Queries the time range to which an RDS instance can be restored.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   MariaDB
   * 
   * @param request - DescribeLocalAvailableRecoveryTimeRequest
   * @returns DescribeLocalAvailableRecoveryTimeResponse
   */
  async describeLocalAvailableRecoveryTime(request: $_model.DescribeLocalAvailableRecoveryTimeRequest): Promise<$_model.DescribeLocalAvailableRecoveryTimeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLocalAvailableRecoveryTimeWithOptions(request, runtime);
  }

  /**
   * Queries the log backup files of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * SQL Server
   * >  You can call the DescribeBinlogFiles operation to query the log files of instances that run different database engines.
   * 
   * @param request - DescribeLogBackupFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeLogBackupFilesResponse
   */
  async describeLogBackupFilesWithOptions(request: $_model.DescribeLogBackupFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeLogBackupFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeLogBackupFiles",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeLogBackupFilesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeLogBackupFilesResponse({}));
  }

  /**
   * Queries the log backup files of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * SQL Server
   * >  You can call the DescribeBinlogFiles operation to query the log files of instances that run different database engines.
   * 
   * @param request - DescribeLogBackupFilesRequest
   * @returns DescribeLogBackupFilesResponse
   */
  async describeLogBackupFiles(request: $_model.DescribeLogBackupFilesRequest): Promise<$_model.DescribeLogBackupFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeLogBackupFilesWithOptions(request, runtime);
  }

  /**
   * 获取RDS营销项目中待升级实例信息
   * 
   * @param request - DescribeMarketingActivityRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeMarketingActivityResponse
   */
  async describeMarketingActivityWithOptions(request: $_model.DescribeMarketingActivityRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeMarketingActivityResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.aliUid)) {
      query["AliUid"] = request.aliUid;
    }

    if (!$dara.isNull(request.bid)) {
      query["Bid"] = request.bid;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.upgradeCode)) {
      query["UpgradeCode"] = request.upgradeCode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeMarketingActivity",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeMarketingActivityResponse>(await this.callApi(params, req, runtime), new $_model.DescribeMarketingActivityResponse({}));
  }

  /**
   * 获取RDS营销项目中待升级实例信息
   * 
   * @param request - DescribeMarketingActivityRequest
   * @returns DescribeMarketingActivityResponse
   */
  async describeMarketingActivity(request: $_model.DescribeMarketingActivityRequest): Promise<$_model.DescribeMarketingActivityResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeMarketingActivityWithOptions(request, runtime);
  }

  /**
   * 查询全密态规则
   * 
   * @param request - DescribeMaskingRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeMaskingRulesResponse
   */
  async describeMaskingRulesWithOptions(request: $_model.DescribeMaskingRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeMaskingRulesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeMaskingRules",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeMaskingRulesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeMaskingRulesResponse({}));
  }

  /**
   * 查询全密态规则
   * 
   * @param request - DescribeMaskingRulesRequest
   * @returns DescribeMaskingRulesResponse
   */
  async describeMaskingRules(request: $_model.DescribeMaskingRulesRequest): Promise<$_model.DescribeMaskingRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeMaskingRulesWithOptions(request, runtime);
  }

  /**
   * Queries the information about the databases and tables that can be restored from a specified backup set.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * > This operation is available for RDS instances that run MySQL 8.0, MySQL 5.7, and MySQL 5.6 on RDS High-availability Edition with local disks.
   * ### [](#)Description
   * Before you call the [RestoreTable](https://help.aliyun.com/document_detail/131510.html) operation to restore individual databases or tables of an ApsaraDB RDS for MySQL instance, you can call this operation to query the information about the databases and tables that can be restored. For more information, see [Restore individual databases and tables of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/103175.html).
   * 
   * @param request - DescribeMetaListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeMetaListResponse
   */
  async describeMetaListWithOptions(request: $_model.DescribeMetaListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeMetaListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupSetID)) {
      query["BackupSetID"] = request.backupSetID;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.getDbName)) {
      query["GetDbName"] = request.getDbName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageIndex)) {
      query["PageIndex"] = request.pageIndex;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.pattern)) {
      query["Pattern"] = request.pattern;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.restoreTime)) {
      query["RestoreTime"] = request.restoreTime;
    }

    if (!$dara.isNull(request.restoreType)) {
      query["RestoreType"] = request.restoreType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeMetaList",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeMetaListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeMetaListResponse({}));
  }

  /**
   * Queries the information about the databases and tables that can be restored from a specified backup set.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * > This operation is available for RDS instances that run MySQL 8.0, MySQL 5.7, and MySQL 5.6 on RDS High-availability Edition with local disks.
   * ### [](#)Description
   * Before you call the [RestoreTable](https://help.aliyun.com/document_detail/131510.html) operation to restore individual databases or tables of an ApsaraDB RDS for MySQL instance, you can call this operation to query the information about the databases and tables that can be restored. For more information, see [Restore individual databases and tables of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/103175.html).
   * 
   * @param request - DescribeMetaListRequest
   * @returns DescribeMetaListResponse
   */
  async describeMetaList(request: $_model.DescribeMetaListRequest): Promise<$_model.DescribeMetaListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeMetaListWithOptions(request, runtime);
  }

  /**
   * Queries a task that is used to import the backup data of an ApsaraDB RDS for SQL Server instance to an Object Storage Service (OSS) bucket.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   SQL Server
   * 
   * @param request - DescribeMigrateTaskByIdRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeMigrateTaskByIdResponse
   */
  async describeMigrateTaskByIdWithOptions(request: $_model.DescribeMigrateTaskByIdRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeMigrateTaskByIdResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.migrateTaskId)) {
      query["MigrateTaskId"] = request.migrateTaskId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeMigrateTaskById",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeMigrateTaskByIdResponse>(await this.callApi(params, req, runtime), new $_model.DescribeMigrateTaskByIdResponse({}));
  }

  /**
   * Queries a task that is used to import the backup data of an ApsaraDB RDS for SQL Server instance to an Object Storage Service (OSS) bucket.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   SQL Server
   * 
   * @param request - DescribeMigrateTaskByIdRequest
   * @returns DescribeMigrateTaskByIdResponse
   */
  async describeMigrateTaskById(request: $_model.DescribeMigrateTaskByIdRequest): Promise<$_model.DescribeMigrateTaskByIdResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeMigrateTaskByIdWithOptions(request, runtime);
  }

  /**
   * Queries the tasks that are created to migrate the backup data of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   SQL Server
   * ### [](#)Usage notes
   * This operation allows you to query the migration tasks that are created for the instance over the last week.
   * ### [](#)Precautions
   * *   This operation is supported only for migration tasks that are created to migrate full backup files.
   * *   This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.
   * 
   * @param request - DescribeMigrateTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeMigrateTasksResponse
   */
  async describeMigrateTasksWithOptions(request: $_model.DescribeMigrateTasksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeMigrateTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeMigrateTasks",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeMigrateTasksResponse>(await this.callApi(params, req, runtime), new $_model.DescribeMigrateTasksResponse({}));
  }

  /**
   * Queries the tasks that are created to migrate the backup data of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   SQL Server
   * ### [](#)Usage notes
   * This operation allows you to query the migration tasks that are created for the instance over the last week.
   * ### [](#)Precautions
   * *   This operation is supported only for migration tasks that are created to migrate full backup files.
   * *   This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.
   * 
   * @param request - DescribeMigrateTasksRequest
   * @returns DescribeMigrateTasksResponse
   */
  async describeMigrateTasks(request: $_model.DescribeMigrateTasksRequest): Promise<$_model.DescribeMigrateTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeMigrateTasksWithOptions(request, runtime);
  }

  /**
   * Queries the details about the modifications to the pg_hba.conf file of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS PostgreSQL
   * 
   * @param request - DescribeModifyPGHbaConfigLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeModifyPGHbaConfigLogResponse
   */
  async describeModifyPGHbaConfigLogWithOptions(request: $_model.DescribeModifyPGHbaConfigLogRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeModifyPGHbaConfigLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeModifyPGHbaConfigLog",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeModifyPGHbaConfigLogResponse>(await this.callApi(params, req, runtime), new $_model.DescribeModifyPGHbaConfigLogResponse({}));
  }

  /**
   * Queries the details about the modifications to the pg_hba.conf file of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS PostgreSQL
   * 
   * @param request - DescribeModifyPGHbaConfigLogRequest
   * @returns DescribeModifyPGHbaConfigLogResponse
   */
  async describeModifyPGHbaConfigLog(request: $_model.DescribeModifyPGHbaConfigLogRequest): Promise<$_model.DescribeModifyPGHbaConfigLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeModifyPGHbaConfigLogWithOptions(request, runtime);
  }

  /**
   * Queries the parameter modification logs of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeModifyParameterLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeModifyParameterLogResponse
   */
  async describeModifyParameterLogWithOptions(request: $_model.DescribeModifyParameterLogRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeModifyParameterLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeModifyParameterLog",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeModifyParameterLogResponse>(await this.callApi(params, req, runtime), new $_model.DescribeModifyParameterLogResponse({}));
  }

  /**
   * Queries the parameter modification logs of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeModifyParameterLogRequest
   * @returns DescribeModifyParameterLogResponse
   */
  async describeModifyParameterLog(request: $_model.DescribeModifyParameterLogRequest): Promise<$_model.DescribeModifyParameterLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeModifyParameterLogWithOptions(request, runtime);
  }

  /**
   * Queries the backup files that are included in a backup data migration task of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   SQL Server
   * ### [Usage notes](#)
   * This operation is not supported for instances that run SQL Server 2017 EE or SQL Server 2019 EE.
   * 
   * @param request - DescribeOssDownloadsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeOssDownloadsResponse
   */
  async describeOssDownloadsWithOptions(request: $_model.DescribeOssDownloadsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeOssDownloadsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.migrateTaskId)) {
      query["MigrateTaskId"] = request.migrateTaskId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeOssDownloads",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeOssDownloadsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeOssDownloadsResponse({}));
  }

  /**
   * Queries the backup files that are included in a backup data migration task of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   SQL Server
   * ### [Usage notes](#)
   * This operation is not supported for instances that run SQL Server 2017 EE or SQL Server 2019 EE.
   * 
   * @param request - DescribeOssDownloadsRequest
   * @returns DescribeOssDownloadsResponse
   */
  async describeOssDownloads(request: $_model.DescribeOssDownloadsRequest): Promise<$_model.DescribeOssDownloadsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeOssDownloadsWithOptions(request, runtime);
  }

  /**
   * Queries the configuration of the pg_hba.conf file of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS PostgreSQL
   * 
   * @param request - DescribePGHbaConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePGHbaConfigResponse
   */
  async describePGHbaConfigWithOptions(request: $_model.DescribePGHbaConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePGHbaConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePGHbaConfig",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePGHbaConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribePGHbaConfigResponse({}));
  }

  /**
   * Queries the configuration of the pg_hba.conf file of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS PostgreSQL
   * 
   * @param request - DescribePGHbaConfigRequest
   * @returns DescribePGHbaConfigResponse
   */
  async describePGHbaConfig(request: $_model.DescribePGHbaConfigRequest): Promise<$_model.DescribePGHbaConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePGHbaConfigWithOptions(request, runtime);
  }

  /**
   * Queries the information about a parameter template.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use a parameter template for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/130565.html)
   * *   [Use a parameter template for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/457176.html)
   * 
   * @param request - DescribeParameterGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeParameterGroupResponse
   */
  async describeParameterGroupWithOptions(request: $_model.DescribeParameterGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeParameterGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.parameterGroupId)) {
      query["ParameterGroupId"] = request.parameterGroupId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeParameterGroup",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeParameterGroupResponse>(await this.callApi(params, req, runtime), new $_model.DescribeParameterGroupResponse({}));
  }

  /**
   * Queries the information about a parameter template.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use a parameter template for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/130565.html)
   * *   [Use a parameter template for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/457176.html)
   * 
   * @param request - DescribeParameterGroupRequest
   * @returns DescribeParameterGroupResponse
   */
  async describeParameterGroup(request: $_model.DescribeParameterGroupRequest): Promise<$_model.DescribeParameterGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeParameterGroupWithOptions(request, runtime);
  }

  /**
   * Queries the parameter templates that are available in a region.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/130565.html)
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/457176.html)
   * 
   * @param request - DescribeParameterGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeParameterGroupsResponse
   */
  async describeParameterGroupsWithOptions(request: $_model.DescribeParameterGroupsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeParameterGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.enableDetail)) {
      query["EnableDetail"] = request.enableDetail;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeParameterGroups",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeParameterGroupsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeParameterGroupsResponse({}));
  }

  /**
   * Queries the parameter templates that are available in a region.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/130565.html)
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/457176.html)
   * 
   * @param request - DescribeParameterGroupsRequest
   * @returns DescribeParameterGroupsResponse
   */
  async describeParameterGroups(request: $_model.DescribeParameterGroupsRequest): Promise<$_model.DescribeParameterGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeParameterGroupsWithOptions(request, runtime);
  }

  /**
   * Queries parameter templates.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeParameterTemplatesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeParameterTemplatesResponse
   */
  async describeParameterTemplatesWithOptions(request: $_model.DescribeParameterTemplatesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeParameterTemplatesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.category)) {
      query["Category"] = request.category;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeParameterTemplates",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeParameterTemplatesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeParameterTemplatesResponse({}));
  }

  /**
   * Queries parameter templates.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeParameterTemplatesRequest
   * @returns DescribeParameterTemplatesResponse
   */
  async describeParameterTemplates(request: $_model.DescribeParameterTemplatesRequest): Promise<$_model.DescribeParameterTemplatesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeParameterTemplatesWithOptions(request, runtime);
  }

  /**
   * Queries the parameter settings of an instance.
   * 
   * @remarks
   * ### Applicable engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeParametersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeParametersResponse
   */
  async describeParametersWithOptions(request: $_model.DescribeParametersRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeParametersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeParameters",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeParametersResponse>(await this.callApi(params, req, runtime), new $_model.DescribeParametersResponse({}));
  }

  /**
   * Queries the parameter settings of an instance.
   * 
   * @remarks
   * ### Applicable engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeParametersRequest
   * @returns DescribeParametersResponse
   */
  async describeParameters(request: $_model.DescribeParametersRequest): Promise<$_model.DescribeParametersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeParametersWithOptions(request, runtime);
  }

  /**
   * Queries extensions that are installed on a database.
   * 
   * @remarks
   * ### Supported database engines
   * RDS PostgreSQL
   * ### References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Manage extensions](https://help.aliyun.com/document_detail/2402409.html)
   * 
   * @param request - DescribePostgresExtensionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePostgresExtensionsResponse
   */
  async describePostgresExtensionsWithOptions(request: $_model.DescribePostgresExtensionsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePostgresExtensionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePostgresExtensions",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePostgresExtensionsResponse>(await this.callApi(params, req, runtime), new $_model.DescribePostgresExtensionsResponse({}));
  }

  /**
   * Queries extensions that are installed on a database.
   * 
   * @remarks
   * ### Supported database engines
   * RDS PostgreSQL
   * ### References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Manage extensions](https://help.aliyun.com/document_detail/2402409.html)
   * 
   * @param request - DescribePostgresExtensionsRequest
   * @returns DescribePostgresExtensionsResponse
   */
  async describePostgresExtensions(request: $_model.DescribePostgresExtensionsRequest): Promise<$_model.DescribePostgresExtensionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePostgresExtensionsWithOptions(request, runtime);
  }

  /**
   * Queries the price of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param tmpReq - DescribePriceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribePriceResponse
   */
  async describePriceWithOptions(tmpReq: $_model.DescribePriceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribePriceResponse> {
    tmpReq.validate();
    let request = new $_model.DescribePriceShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.DBNode)) {
      request.DBNodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBNode, "DBNode", "json");
    }

    if (!$dara.isNull(tmpReq.serverlessConfig)) {
      request.serverlessConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.serverlessConfig, "ServerlessConfig", "json");
    }

    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.commodityCode)) {
      query["CommodityCode"] = request.commodityCode;
    }

    if (!$dara.isNull(request.DBInstanceClass)) {
      query["DBInstanceClass"] = request.DBInstanceClass;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceStorage)) {
      query["DBInstanceStorage"] = request.DBInstanceStorage;
    }

    if (!$dara.isNull(request.DBInstanceStorageType)) {
      query["DBInstanceStorageType"] = request.DBInstanceStorageType;
    }

    if (!$dara.isNull(request.DBNodeShrink)) {
      query["DBNode"] = request.DBNodeShrink;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.instanceUsedType)) {
      query["InstanceUsedType"] = request.instanceUsedType;
    }

    if (!$dara.isNull(request.orderType)) {
      query["OrderType"] = request.orderType;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.quantity)) {
      query["Quantity"] = request.quantity;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.serverlessConfigShrink)) {
      query["ServerlessConfig"] = request.serverlessConfigShrink;
    }

    if (!$dara.isNull(request.timeType)) {
      query["TimeType"] = request.timeType;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribePrice",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribePriceResponse>(await this.callApi(params, req, runtime), new $_model.DescribePriceResponse({}));
  }

  /**
   * Queries the price of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribePriceRequest
   * @returns DescribePriceResponse
   */
  async describePrice(request: $_model.DescribePriceRequest): Promise<$_model.DescribePriceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describePriceWithOptions(request, runtime);
  }

  /**
   * 查询RDS快捷售卖配置
   * 
   * @param request - DescribeQuickSaleConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeQuickSaleConfigResponse
   */
  async describeQuickSaleConfigWithOptions(request: $_model.DescribeQuickSaleConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeQuickSaleConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.commodity)) {
      query["Commodity"] = request.commodity;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeQuickSaleConfig",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeQuickSaleConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeQuickSaleConfigResponse({}));
  }

  /**
   * 查询RDS快捷售卖配置
   * 
   * @param request - DescribeQuickSaleConfigRequest
   * @returns DescribeQuickSaleConfigResponse
   */
  async describeQuickSaleConfig(request: $_model.DescribeQuickSaleConfigRequest): Promise<$_model.DescribeQuickSaleConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeQuickSaleConfigWithOptions(request, runtime);
  }

  /**
   * Queries the kubeconfig file of a Container Service for Kubernetes (ACK) cluster in which an RDS Custom instance resides.
   * 
   * @remarks
   * Kubeconfig files store identity and authentication information that is used by clients to access ACK clusters. To use kubectl to manage an ACK cluster, you must use the kubeconfig file to connect to the ACK cluster. We recommend that you keep kubeconfig files confidential and revoke kubeconfig files that are not in use. This helps prevent data leaks caused by the disclosure of kubeconfig files.
   * 
   * @param request - DescribeRCClusterConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCClusterConfigResponse
   */
  async describeRCClusterConfigWithOptions(request: $_model.DescribeRCClusterConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCClusterConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.temporaryDurationMinutes)) {
      query["TemporaryDurationMinutes"] = request.temporaryDurationMinutes;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCClusterConfig",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCClusterConfigResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCClusterConfigResponse({}));
  }

  /**
   * Queries the kubeconfig file of a Container Service for Kubernetes (ACK) cluster in which an RDS Custom instance resides.
   * 
   * @remarks
   * Kubeconfig files store identity and authentication information that is used by clients to access ACK clusters. To use kubectl to manage an ACK cluster, you must use the kubeconfig file to connect to the ACK cluster. We recommend that you keep kubeconfig files confidential and revoke kubeconfig files that are not in use. This helps prevent data leaks caused by the disclosure of kubeconfig files.
   * 
   * @param request - DescribeRCClusterConfigRequest
   * @returns DescribeRCClusterConfigResponse
   */
  async describeRCClusterConfig(request: $_model.DescribeRCClusterConfigRequest): Promise<$_model.DescribeRCClusterConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCClusterConfigWithOptions(request, runtime);
  }

  /**
   * Queries the RDS custom nodes in a Container Service for Kubernetes (ACK) cluster.
   * 
   * @param request - DescribeRCClusterNodesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCClusterNodesResponse
   */
  async describeRCClusterNodesWithOptions(request: $_model.DescribeRCClusterNodesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCClusterNodesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCClusterNodes",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCClusterNodesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCClusterNodesResponse({}));
  }

  /**
   * Queries the RDS custom nodes in a Container Service for Kubernetes (ACK) cluster.
   * 
   * @param request - DescribeRCClusterNodesRequest
   * @returns DescribeRCClusterNodesResponse
   */
  async describeRCClusterNodes(request: $_model.DescribeRCClusterNodesRequest): Promise<$_model.DescribeRCClusterNodesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCClusterNodesWithOptions(request, runtime);
  }

  /**
   * Queries Container Service for Kubernetes (ACK) clusters to which RDS Custom nodes reside in a specific region.
   * 
   * @param request - DescribeRCClustersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCClustersResponse
   */
  async describeRCClustersWithOptions(request: $_model.DescribeRCClustersRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCClustersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.profile)) {
      query["Profile"] = request.profile;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCClusters",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCClustersResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCClustersResponse({}));
  }

  /**
   * Queries Container Service for Kubernetes (ACK) clusters to which RDS Custom nodes reside in a specific region.
   * 
   * @param request - DescribeRCClustersRequest
   * @returns DescribeRCClustersResponse
   */
  async describeRCClusters(request: $_model.DescribeRCClustersRequest): Promise<$_model.DescribeRCClustersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCClustersWithOptions(request, runtime);
  }

  /**
   * Queries the details of one or more deployment sets for RDS Custom instances. Before you call this operation, you must specify parameters such as DeploymentSetIds, Strategy, and DeploymentSetName.
   * 
   * @param request - DescribeRCDeploymentSetsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCDeploymentSetsResponse
   */
  async describeRCDeploymentSetsWithOptions(request: $_model.DescribeRCDeploymentSetsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCDeploymentSetsResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCDeploymentSets",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCDeploymentSetsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCDeploymentSetsResponse({}));
  }

  /**
   * Queries the details of one or more deployment sets for RDS Custom instances. Before you call this operation, you must specify parameters such as DeploymentSetIds, Strategy, and DeploymentSetName.
   * 
   * @param request - DescribeRCDeploymentSetsRequest
   * @returns DescribeRCDeploymentSetsResponse
   */
  async describeRCDeploymentSets(request: $_model.DescribeRCDeploymentSetsRequest): Promise<$_model.DescribeRCDeploymentSetsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCDeploymentSetsWithOptions(request, runtime);
  }

  /**
   * Queries the disk information about an RDS Custom instance.
   * 
   * @param request - DescribeRCDisksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCDisksResponse
   */
  async describeRCDisksWithOptions(request: $_model.DescribeRCDisksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCDisksResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCDisks",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCDisksResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCDisksResponse({}));
  }

  /**
   * Queries the disk information about an RDS Custom instance.
   * 
   * @param request - DescribeRCDisksRequest
   * @returns DescribeRCDisksResponse
   */
  async describeRCDisks(request: $_model.DescribeRCDisksRequest): Promise<$_model.DescribeRCDisksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCDisksWithOptions(request, runtime);
  }

  /**
   * Queries custom images that can be used to create an RDS Custom instance. Before you call this operation, you must specify parameters such as RegionId.
   * 
   * @param request - DescribeRCImageListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCImageListResponse
   */
  async describeRCImageListWithOptions(request: $_model.DescribeRCImageListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCImageListResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCImageList",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCImageListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCImageListResponse({}));
  }

  /**
   * Queries custom images that can be used to create an RDS Custom instance. Before you call this operation, you must specify parameters such as RegionId.
   * 
   * @param request - DescribeRCImageListRequest
   * @returns DescribeRCImageListResponse
   */
  async describeRCImageList(request: $_model.DescribeRCImageListRequest): Promise<$_model.DescribeRCImageListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCImageListWithOptions(request, runtime);
  }

  /**
   * Queries the details of an RDS Custom instance.
   * 
   * @param request - DescribeRCInstanceAttributeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCInstanceAttributeResponse
   */
  async describeRCInstanceAttributeWithOptions(request: $_model.DescribeRCInstanceAttributeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCInstanceAttributeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.privateIpAddress)) {
      query["PrivateIpAddress"] = request.privateIpAddress;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCInstanceAttribute",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCInstanceAttributeResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCInstanceAttributeResponse({}));
  }

  /**
   * Queries the details of an RDS Custom instance.
   * 
   * @param request - DescribeRCInstanceAttributeRequest
   * @returns DescribeRCInstanceAttributeResponse
   */
  async describeRCInstanceAttribute(request: $_model.DescribeRCInstanceAttributeRequest): Promise<$_model.DescribeRCInstanceAttributeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCInstanceAttributeWithOptions(request, runtime);
  }

  /**
   * 查询RDS Custom实例被DDos攻击的数量
   * 
   * @param request - DescribeRCInstanceDdosCountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCInstanceDdosCountResponse
   */
  async describeRCInstanceDdosCountWithOptions(request: $_model.DescribeRCInstanceDdosCountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCInstanceDdosCountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ddosRegionId)) {
      query["DdosRegionId"] = request.ddosRegionId;
    }

    if (!$dara.isNull(request.instanceType)) {
      query["InstanceType"] = request.instanceType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCInstanceDdosCount",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCInstanceDdosCountResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCInstanceDdosCountResponse({}));
  }

  /**
   * 查询RDS Custom实例被DDos攻击的数量
   * 
   * @param request - DescribeRCInstanceDdosCountRequest
   * @returns DescribeRCInstanceDdosCountResponse
   */
  async describeRCInstanceDdosCount(request: $_model.DescribeRCInstanceDdosCountRequest): Promise<$_model.DescribeRCInstanceDdosCountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCInstanceDdosCountWithOptions(request, runtime);
  }

  /**
   * 查询指定实例系统事件信息
   * 
   * @param request - DescribeRCInstanceHistoryEventsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCInstanceHistoryEventsResponse
   */
  async describeRCInstanceHistoryEventsWithOptions(request: $_model.DescribeRCInstanceHistoryEventsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCInstanceHistoryEventsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.eventCycleStatus)) {
      query["EventCycleStatus"] = request.eventCycleStatus;
    }

    if (!$dara.isNull(request.eventId)) {
      query["EventId"] = request.eventId;
    }

    if (!$dara.isNull(request.eventType)) {
      query["EventType"] = request.eventType;
    }

    if (!$dara.isNull(request.impactLevel)) {
      query["ImpactLevel"] = request.impactLevel;
    }

    if (!$dara.isNull(request.instanceEventCycleStatus)) {
      query["InstanceEventCycleStatus"] = request.instanceEventCycleStatus;
    }

    if (!$dara.isNull(request.instanceEventType)) {
      query["InstanceEventType"] = request.instanceEventType;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.maxResults)) {
      query["MaxResults"] = request.maxResults;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.eventPublishTime)) {
      query["EventPublishTime"] = request.eventPublishTime;
    }

    if (!$dara.isNull(request.notBefore)) {
      query["NotBefore"] = request.notBefore;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCInstanceHistoryEvents",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCInstanceHistoryEventsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCInstanceHistoryEventsResponse({}));
  }

  /**
   * 查询指定实例系统事件信息
   * 
   * @param request - DescribeRCInstanceHistoryEventsRequest
   * @returns DescribeRCInstanceHistoryEventsResponse
   */
  async describeRCInstanceHistoryEvents(request: $_model.DescribeRCInstanceHistoryEventsRequest): Promise<$_model.DescribeRCInstanceHistoryEventsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCInstanceHistoryEventsWithOptions(request, runtime);
  }

  /**
   * 查询RDS Custom实例的公网IP
   * 
   * @param request - DescribeRCInstanceIpAddressRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCInstanceIpAddressResponse
   */
  async describeRCInstanceIpAddressWithOptions(request: $_model.DescribeRCInstanceIpAddressRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCInstanceIpAddressResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentPage)) {
      query["CurrentPage"] = request.currentPage;
    }

    if (!$dara.isNull(request.ddosRegionId)) {
      query["DdosRegionId"] = request.ddosRegionId;
    }

    if (!$dara.isNull(request.ddosStatus)) {
      query["DdosStatus"] = request.ddosStatus;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceIp)) {
      query["InstanceIp"] = request.instanceIp;
    }

    if (!$dara.isNull(request.instanceName)) {
      query["InstanceName"] = request.instanceName;
    }

    if (!$dara.isNull(request.instanceType)) {
      query["InstanceType"] = request.instanceType;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCInstanceIpAddress",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCInstanceIpAddressResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCInstanceIpAddressResponse({}));
  }

  /**
   * 查询RDS Custom实例的公网IP
   * 
   * @param request - DescribeRCInstanceIpAddressRequest
   * @returns DescribeRCInstanceIpAddressResponse
   */
  async describeRCInstanceIpAddress(request: $_model.DescribeRCInstanceIpAddressRequest): Promise<$_model.DescribeRCInstanceIpAddressResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCInstanceIpAddressWithOptions(request, runtime);
  }

  /**
   * Queries the instance families of RDS Custom instances.
   * 
   * @param request - DescribeRCInstanceTypeFamiliesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCInstanceTypeFamiliesResponse
   */
  async describeRCInstanceTypeFamiliesWithOptions(request: $_model.DescribeRCInstanceTypeFamiliesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCInstanceTypeFamiliesResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCInstanceTypeFamilies",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCInstanceTypeFamiliesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCInstanceTypeFamiliesResponse({}));
  }

  /**
   * Queries the instance families of RDS Custom instances.
   * 
   * @param request - DescribeRCInstanceTypeFamiliesRequest
   * @returns DescribeRCInstanceTypeFamiliesResponse
   */
  async describeRCInstanceTypeFamilies(request: $_model.DescribeRCInstanceTypeFamiliesRequest): Promise<$_model.DescribeRCInstanceTypeFamiliesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCInstanceTypeFamiliesWithOptions(request, runtime);
  }

  /**
   * Queries the instance types of RDS Custom instances.
   * 
   * @param tmpReq - DescribeRCInstanceTypesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCInstanceTypesResponse
   */
  async describeRCInstanceTypesWithOptions(tmpReq: $_model.DescribeRCInstanceTypesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCInstanceTypesResponse> {
    tmpReq.validate();
    let request = new $_model.DescribeRCInstanceTypesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.instanceType)) {
      request.instanceTypeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceType, "InstanceType", "simple");
    }

    let query = { };
    if (!$dara.isNull(request.commodityCode)) {
      query["CommodityCode"] = request.commodityCode;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.instanceTypeShrink)) {
      query["InstanceType"] = request.instanceTypeShrink;
    }

    if (!$dara.isNull(request.instanceTypeFamily)) {
      query["InstanceTypeFamily"] = request.instanceTypeFamily;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCInstanceTypes",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCInstanceTypesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCInstanceTypesResponse({}));
  }

  /**
   * Queries the instance types of RDS Custom instances.
   * 
   * @param request - DescribeRCInstanceTypesRequest
   * @returns DescribeRCInstanceTypesResponse
   */
  async describeRCInstanceTypes(request: $_model.DescribeRCInstanceTypesRequest): Promise<$_model.DescribeRCInstanceTypesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCInstanceTypesWithOptions(request, runtime);
  }

  /**
   * Queries the Virtual Network Computing (VNC) logon address of an RDS Custom instance.
   * 
   * @remarks
   * The address returned is valid only for 15 seconds. If you do not use the returned address to establish a connection within 15 seconds, the address expires and you must call the operation again to obtain a new address.
   * 
   * @param request - DescribeRCInstanceVncUrlRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCInstanceVncUrlResponse
   */
  async describeRCInstanceVncUrlWithOptions(request: $_model.DescribeRCInstanceVncUrlRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCInstanceVncUrlResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbType)) {
      query["DbType"] = request.dbType;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCInstanceVncUrl",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCInstanceVncUrlResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCInstanceVncUrlResponse({}));
  }

  /**
   * Queries the Virtual Network Computing (VNC) logon address of an RDS Custom instance.
   * 
   * @remarks
   * The address returned is valid only for 15 seconds. If you do not use the returned address to establish a connection within 15 seconds, the address expires and you must call the operation again to obtain a new address.
   * 
   * @param request - DescribeRCInstanceVncUrlRequest
   * @returns DescribeRCInstanceVncUrlResponse
   */
  async describeRCInstanceVncUrl(request: $_model.DescribeRCInstanceVncUrlRequest): Promise<$_model.DescribeRCInstanceVncUrlResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCInstanceVncUrlWithOptions(request, runtime);
  }

  /**
   * Queries the details of an RDS Custom instance.
   * 
   * @param request - DescribeRCInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCInstancesResponse
   */
  async describeRCInstancesWithOptions(request: $_model.DescribeRCInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.hostIp)) {
      query["HostIp"] = request.hostIp;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.publicIp)) {
      query["PublicIp"] = request.publicIp;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCInstances",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCInstancesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCInstancesResponse({}));
  }

  /**
   * Queries the details of an RDS Custom instance.
   * 
   * @param request - DescribeRCInstancesRequest
   * @returns DescribeRCInstancesResponse
   */
  async describeRCInstances(request: $_model.DescribeRCInstancesRequest): Promise<$_model.DescribeRCInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCInstancesWithOptions(request, runtime);
  }

  /**
   * Queries the monitoring data of a metric for an RDS Custom instance.
   * 
   * @param request - DescribeRCMetricListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCMetricListResponse
   */
  async describeRCMetricListWithOptions(request: $_model.DescribeRCMetricListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCMetricListResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCMetricList",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCMetricListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCMetricListResponse({}));
  }

  /**
   * Queries the monitoring data of a metric for an RDS Custom instance.
   * 
   * @param request - DescribeRCMetricListRequest
   * @returns DescribeRCMetricListResponse
   */
  async describeRCMetricList(request: $_model.DescribeRCMetricListRequest): Promise<$_model.DescribeRCMetricListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCMetricListWithOptions(request, runtime);
  }

  /**
   * Queries the configuration information about the edge node pool of an RDS Custom instance.
   * 
   * @param request - DescribeRCNodePoolRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCNodePoolResponse
   */
  async describeRCNodePoolWithOptions(request: $_model.DescribeRCNodePoolRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCNodePoolResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCNodePool",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCNodePoolResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCNodePoolResponse({}));
  }

  /**
   * Queries the configuration information about the edge node pool of an RDS Custom instance.
   * 
   * @param request - DescribeRCNodePoolRequest
   * @returns DescribeRCNodePoolResponse
   */
  async describeRCNodePool(request: $_model.DescribeRCNodePoolRequest): Promise<$_model.DescribeRCNodePoolResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCNodePoolWithOptions(request, runtime);
  }

  /**
   * 查询RC安全组
   * 
   * @param request - DescribeRCSecurityGroupListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCSecurityGroupListResponse
   */
  async describeRCSecurityGroupListWithOptions(request: $_model.DescribeRCSecurityGroupListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCSecurityGroupListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.securityGroupId)) {
      query["SecurityGroupId"] = request.securityGroupId;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCSecurityGroupList",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCSecurityGroupListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCSecurityGroupListResponse({}));
  }

  /**
   * 查询RC安全组
   * 
   * @param request - DescribeRCSecurityGroupListRequest
   * @returns DescribeRCSecurityGroupListResponse
   */
  async describeRCSecurityGroupList(request: $_model.DescribeRCSecurityGroupListRequest): Promise<$_model.DescribeRCSecurityGroupListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCSecurityGroupListWithOptions(request, runtime);
  }

  /**
   * 描述RC安全组规则
   * 
   * @param request - DescribeRCSecurityGroupPermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCSecurityGroupPermissionResponse
   */
  async describeRCSecurityGroupPermissionWithOptions(request: $_model.DescribeRCSecurityGroupPermissionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCSecurityGroupPermissionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.securityGroupId)) {
      query["SecurityGroupId"] = request.securityGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCSecurityGroupPermission",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCSecurityGroupPermissionResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCSecurityGroupPermissionResponse({}));
  }

  /**
   * 描述RC安全组规则
   * 
   * @param request - DescribeRCSecurityGroupPermissionRequest
   * @returns DescribeRCSecurityGroupPermissionResponse
   */
  async describeRCSecurityGroupPermission(request: $_model.DescribeRCSecurityGroupPermissionRequest): Promise<$_model.DescribeRCSecurityGroupPermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCSecurityGroupPermissionWithOptions(request, runtime);
  }

  /**
   * Queries the details of snapshots. The details include the status of the snapshots, the amount of remaining time required to create the snapshots, and the retention period of the automatic snapshots in days.
   * 
   * @param request - DescribeRCSnapshotsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRCSnapshotsResponse
   */
  async describeRCSnapshotsWithOptions(request: $_model.DescribeRCSnapshotsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRCSnapshotsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.diskId)) {
      query["DiskId"] = request.diskId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.snapshotIds)) {
      query["SnapshotIds"] = request.snapshotIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRCSnapshots",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRCSnapshotsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRCSnapshotsResponse({}));
  }

  /**
   * Queries the details of snapshots. The details include the status of the snapshots, the amount of remaining time required to create the snapshots, and the retention period of the automatic snapshots in days.
   * 
   * @param request - DescribeRCSnapshotsRequest
   * @returns DescribeRCSnapshotsResponse
   */
  async describeRCSnapshots(request: $_model.DescribeRCSnapshotsRequest): Promise<$_model.DescribeRCSnapshotsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRCSnapshotsWithOptions(request, runtime);
  }

  /**
   * This operation is deprecated.
   * 
   * @deprecated OpenAPI DescribeRdsResourceSettings is deprecated
   * 
   * @param request - DescribeRdsResourceSettingsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRdsResourceSettingsResponse
   */
  // Deprecated
  async describeRdsResourceSettingsWithOptions(request: $_model.DescribeRdsResourceSettingsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRdsResourceSettingsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceNiche)) {
      query["ResourceNiche"] = request.resourceNiche;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRdsResourceSettings",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRdsResourceSettingsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRdsResourceSettingsResponse({}));
  }

  /**
   * This operation is deprecated.
   * 
   * @deprecated OpenAPI DescribeRdsResourceSettings is deprecated
   * 
   * @param request - DescribeRdsResourceSettingsRequest
   * @returns DescribeRdsResourceSettingsResponse
   */
  // Deprecated
  async describeRdsResourceSettings(request: $_model.DescribeRdsResourceSettingsRequest): Promise<$_model.DescribeRdsResourceSettingsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRdsResourceSettingsWithOptions(request, runtime);
  }

  /**
   * Queries the latency of data replication between a primary instance and its read-only instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * 
   * @param request - DescribeReadDBInstanceDelayRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeReadDBInstanceDelayResponse
   */
  async describeReadDBInstanceDelayWithOptions(request: $_model.DescribeReadDBInstanceDelayRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeReadDBInstanceDelayResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.readInstanceId)) {
      query["ReadInstanceId"] = request.readInstanceId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeReadDBInstanceDelay",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeReadDBInstanceDelayResponse>(await this.callApi(params, req, runtime), new $_model.DescribeReadDBInstanceDelayResponse({}));
  }

  /**
   * Queries the latency of data replication between a primary instance and its read-only instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * 
   * @param request - DescribeReadDBInstanceDelayRequest
   * @returns DescribeReadDBInstanceDelayResponse
   */
  async describeReadDBInstanceDelay(request: $_model.DescribeReadDBInstanceDelayRequest): Promise<$_model.DescribeReadDBInstanceDelayResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeReadDBInstanceDelayWithOptions(request, runtime);
  }

  /**
   * Queries the regions.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeRegionInfosRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRegionInfosResponse
   */
  async describeRegionInfosWithOptions(request: $_model.DescribeRegionInfosRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRegionInfosResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRegionInfos",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRegionInfosResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRegionInfosResponse({}));
  }

  /**
   * Queries the regions.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeRegionInfosRequest
   * @returns DescribeRegionInfosResponse
   */
  async describeRegionInfos(request: $_model.DescribeRegionInfosRequest): Promise<$_model.DescribeRegionInfosResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRegionInfosWithOptions(request, runtime);
  }

  /**
   * Queries the details of all regions and zones for ApsaraDB RDS. The regions that are no longer supported are also queried. Exercise caution when you call this operation.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeRegionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRegionsResponse
   */
  async describeRegionsWithOptions(request: $_model.DescribeRegionsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRegionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.acceptLanguage)) {
      query["AcceptLanguage"] = request.acceptLanguage;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRegions",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRegionsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRegionsResponse({}));
  }

  /**
   * Queries the details of all regions and zones for ApsaraDB RDS. The regions that are no longer supported are also queried. Exercise caution when you call this operation.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeRegionsRequest
   * @returns DescribeRegionsResponse
   */
  async describeRegions(request: $_model.DescribeRegionsRequest): Promise<$_model.DescribeRegionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRegionsWithOptions(request, runtime);
  }

  /**
   * Queries the renewal fees for a subscription instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeRenewalPriceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeRenewalPriceResponse
   */
  async describeRenewalPriceWithOptions(request: $_model.DescribeRenewalPriceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeRenewalPriceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.businessInfo)) {
      query["BusinessInfo"] = request.businessInfo;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceClass)) {
      query["DBInstanceClass"] = request.DBInstanceClass;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.orderType)) {
      query["OrderType"] = request.orderType;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.quantity)) {
      query["Quantity"] = request.quantity;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.timeType)) {
      query["TimeType"] = request.timeType;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeRenewalPrice",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeRenewalPriceResponse>(await this.callApi(params, req, runtime), new $_model.DescribeRenewalPriceResponse({}));
  }

  /**
   * Queries the renewal fees for a subscription instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeRenewalPriceRequest
   * @returns DescribeRenewalPriceResponse
   */
  async describeRenewalPrice(request: $_model.DescribeRenewalPriceRequest): Promise<$_model.DescribeRenewalPriceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeRenewalPriceWithOptions(request, runtime);
  }

  /**
   * Queries the operation logs of the data synchronization task for a specified ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   PostgreSQL
   * 
   * @param request - DescribeReplicationLinkLogsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeReplicationLinkLogsResponse
   */
  async describeReplicationLinkLogsWithOptions(request: $_model.DescribeReplicationLinkLogsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeReplicationLinkLogsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.taskName)) {
      query["TaskName"] = request.taskName;
    }

    if (!$dara.isNull(request.taskType)) {
      query["TaskType"] = request.taskType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeReplicationLinkLogs",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeReplicationLinkLogsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeReplicationLinkLogsResponse({}));
  }

  /**
   * Queries the operation logs of the data synchronization task for a specified ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   PostgreSQL
   * 
   * @param request - DescribeReplicationLinkLogsRequest
   * @returns DescribeReplicationLinkLogsResponse
   */
  async describeReplicationLinkLogs(request: $_model.DescribeReplicationLinkLogsRequest): Promise<$_model.DescribeReplicationLinkLogsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeReplicationLinkLogsWithOptions(request, runtime);
  }

  /**
   * 概览页资源详情
   * 
   * @param request - DescribeResourceDetailsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeResourceDetailsResponse
   */
  async describeResourceDetailsWithOptions(request: $_model.DescribeResourceDetailsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeResourceDetailsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeResourceDetails",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeResourceDetailsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeResourceDetailsResponse({}));
  }

  /**
   * 概览页资源详情
   * 
   * @param request - DescribeResourceDetailsRequest
   * @returns DescribeResourceDetailsResponse
   */
  async describeResourceDetails(request: $_model.DescribeResourceDetailsRequest): Promise<$_model.DescribeResourceDetailsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeResourceDetailsWithOptions(request, runtime);
  }

  /**
   * Queries the storage usage of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeResourceUsageRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeResourceUsageResponse
   */
  async describeResourceUsageWithOptions(request: $_model.DescribeResourceUsageRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeResourceUsageResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeResourceUsage",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeResourceUsageResponse>(await this.callApi(params, req, runtime), new $_model.DescribeResourceUsageResponse({}));
  }

  /**
   * Queries the storage usage of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeResourceUsageRequest
   * @returns DescribeResourceUsageResponse
   */
  async describeResourceUsage(request: $_model.DescribeResourceUsageRequest): Promise<$_model.DescribeResourceUsageResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeResourceUsageWithOptions(request, runtime);
  }

  /**
   * Queries the status of the SQL Explorer (SQL Audit) feature for an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * 
   * @param request - DescribeSQLCollectorPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSQLCollectorPolicyResponse
   */
  async describeSQLCollectorPolicyWithOptions(request: $_model.DescribeSQLCollectorPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSQLCollectorPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSQLCollectorPolicy",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSQLCollectorPolicyResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSQLCollectorPolicyResponse({}));
  }

  /**
   * Queries the status of the SQL Explorer (SQL Audit) feature for an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * 
   * @param request - DescribeSQLCollectorPolicyRequest
   * @returns DescribeSQLCollectorPolicyResponse
   */
  async describeSQLCollectorPolicy(request: $_model.DescribeSQLCollectorPolicyRequest): Promise<$_model.DescribeSQLCollectorPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSQLCollectorPolicyWithOptions(request, runtime);
  }

  /**
   * Queries the retention period of the log files that are generated by the SQL Explorer feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * 
   * @param request - DescribeSQLCollectorRetentionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSQLCollectorRetentionResponse
   */
  async describeSQLCollectorRetentionWithOptions(request: $_model.DescribeSQLCollectorRetentionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSQLCollectorRetentionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSQLCollectorRetention",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSQLCollectorRetentionResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSQLCollectorRetentionResponse({}));
  }

  /**
   * Queries the retention period of the log files that are generated by the SQL Explorer feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * 
   * @param request - DescribeSQLCollectorRetentionRequest
   * @returns DescribeSQLCollectorRetentionResponse
   */
  async describeSQLCollectorRetention(request: $_model.DescribeSQLCollectorRetentionRequest): Promise<$_model.DescribeSQLCollectorRetentionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSQLCollectorRetentionWithOptions(request, runtime);
  }

  /**
   * Queries the log files that are generated by the SQL Explorer (SQL Audit) feature for an instance. The DescribeSQLLogFiles operation does not return the log files that are generated by the SQL Explorer feature and manually exported from the ApsaraDB RDS console. The DescribeSQLLogFiles operation returns the SQL Explorer log files that are generated by calling the DescribeSQLLogRecords operation with the request parameter Form set to File.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   *     **
   *     **Note** If your instance runs SQL Server, only SQL Server 2008 R2 is supported.
   * ### [](#)Precautions
   * *   The DescribeSQLLogFiles operation does not return the log files that are generated by SQL Explorer Trial Edition for an ApsaraDB RDS for MySQL instance.
   * *   The DescribeSQLLogFiles operation does not return the log files that are generated by the SQL Explorer feature and manually exported from the ApsaraDB RDS console. The DescribeSQLLogFiles operation returns the SQL Explorer log files that are generated by calling the [DescribeSQLLogRecords](https://help.aliyun.com/document_detail/610533.html) operation with the request parameter **Form** set to **File**.
   * *   The exported files are retained for only two days.
   *     **
   *     **Note** If you have enabled Database Autonomy Service (DAS) Enterprise Edition V2 or V3 and have enabled the SQL Explorer and Audit feature, the exported files are retained for seven days. You can call the [DescribeSqlLogConfig](https://help.aliyun.com/document_detail/2778837.html) operation to query the information about the enabled DAS Enterprise Edition.
   * 
   * @param request - DescribeSQLLogFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSQLLogFilesResponse
   */
  async describeSQLLogFilesWithOptions(request: $_model.DescribeSQLLogFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSQLLogFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.fileName)) {
      query["FileName"] = request.fileName;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSQLLogFiles",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSQLLogFilesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSQLLogFilesResponse({}));
  }

  /**
   * Queries the log files that are generated by the SQL Explorer (SQL Audit) feature for an instance. The DescribeSQLLogFiles operation does not return the log files that are generated by the SQL Explorer feature and manually exported from the ApsaraDB RDS console. The DescribeSQLLogFiles operation returns the SQL Explorer log files that are generated by calling the DescribeSQLLogRecords operation with the request parameter Form set to File.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   *     **
   *     **Note** If your instance runs SQL Server, only SQL Server 2008 R2 is supported.
   * ### [](#)Precautions
   * *   The DescribeSQLLogFiles operation does not return the log files that are generated by SQL Explorer Trial Edition for an ApsaraDB RDS for MySQL instance.
   * *   The DescribeSQLLogFiles operation does not return the log files that are generated by the SQL Explorer feature and manually exported from the ApsaraDB RDS console. The DescribeSQLLogFiles operation returns the SQL Explorer log files that are generated by calling the [DescribeSQLLogRecords](https://help.aliyun.com/document_detail/610533.html) operation with the request parameter **Form** set to **File**.
   * *   The exported files are retained for only two days.
   *     **
   *     **Note** If you have enabled Database Autonomy Service (DAS) Enterprise Edition V2 or V3 and have enabled the SQL Explorer and Audit feature, the exported files are retained for seven days. You can call the [DescribeSqlLogConfig](https://help.aliyun.com/document_detail/2778837.html) operation to query the information about the enabled DAS Enterprise Edition.
   * 
   * @param request - DescribeSQLLogFilesRequest
   * @returns DescribeSQLLogFilesResponse
   */
  async describeSQLLogFiles(request: $_model.DescribeSQLLogFilesRequest): Promise<$_model.DescribeSQLLogFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSQLLogFilesWithOptions(request, runtime);
  }

  /**
   * Queries the logs that are generated by the SQL Explorer (SQL Audit) feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [Usage notes](#)
   * *   You can call this operation up to 1,000 times per minute per account. The calls initiated by using both your Alibaba Cloud account and RAM users within your Alibaba Cloud account are counted.
   * *   This operation cannot be used to query the logs that are generated by SQL Explorer Trial Edition for an ApsaraDB RDS for MySQL instance.
   * *   When you call this operation and set the **Form** parameter to **File** to generate an audit file, a maximum of 1 million log entries can be recorded in the audit file, and you cannot filter log entries by keyword.
   * 
   * @param request - DescribeSQLLogRecordsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSQLLogRecordsResponse
   */
  async describeSQLLogRecordsWithOptions(request: $_model.DescribeSQLLogRecordsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSQLLogRecordsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.database)) {
      query["Database"] = request.database;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.form)) {
      query["Form"] = request.form;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.queryKeywords)) {
      query["QueryKeywords"] = request.queryKeywords;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.SQLId)) {
      query["SQLId"] = request.SQLId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.user)) {
      query["User"] = request.user;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSQLLogRecords",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSQLLogRecordsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSQLLogRecordsResponse({}));
  }

  /**
   * Queries the logs that are generated by the SQL Explorer (SQL Audit) feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [Usage notes](#)
   * *   You can call this operation up to 1,000 times per minute per account. The calls initiated by using both your Alibaba Cloud account and RAM users within your Alibaba Cloud account are counted.
   * *   This operation cannot be used to query the logs that are generated by SQL Explorer Trial Edition for an ApsaraDB RDS for MySQL instance.
   * *   When you call this operation and set the **Form** parameter to **File** to generate an audit file, a maximum of 1 million log entries can be recorded in the audit file, and you cannot filter log entries by keyword.
   * 
   * @param request - DescribeSQLLogRecordsRequest
   * @returns DescribeSQLLogRecordsResponse
   */
  async describeSQLLogRecords(request: $_model.DescribeSQLLogRecordsRequest): Promise<$_model.DescribeSQLLogRecordsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSQLLogRecordsWithOptions(request, runtime);
  }

  /**
   * Queries SQL log reports.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeSQLLogReportListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSQLLogReportListResponse
   */
  async describeSQLLogReportListWithOptions(request: $_model.DescribeSQLLogReportListRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSQLLogReportListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSQLLogReportList",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSQLLogReportListResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSQLLogReportListResponse({}));
  }

  /**
   * Queries SQL log reports.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeSQLLogReportListRequest
   * @returns DescribeSQLLogReportListResponse
   */
  async describeSQLLogReportList(request: $_model.DescribeSQLLogReportListRequest): Promise<$_model.DescribeSQLLogReportListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSQLLogReportListWithOptions(request, runtime);
  }

  /**
   * Queries the credential of a user who uses the Data API feature.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   MySQL
   * 
   * @param request - DescribeSecretsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSecretsResponse
   */
  async describeSecretsWithOptions(request: $_model.DescribeSecretsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSecretsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.acceptLanguage)) {
      query["AcceptLanguage"] = request.acceptLanguage;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.dbInstanceId)) {
      query["DbInstanceId"] = request.dbInstanceId;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSecrets",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSecretsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSecretsResponse({}));
  }

  /**
   * Queries the credential of a user who uses the Data API feature.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   MySQL
   * 
   * @param request - DescribeSecretsRequest
   * @returns DescribeSecretsResponse
   */
  async describeSecrets(request: $_model.DescribeSecretsRequest): Promise<$_model.DescribeSecretsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSecretsWithOptions(request, runtime);
  }

  /**
   * Queries ECS security groups to which an instance is added.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure a security group for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/201042.html)
   * *   [Configure a security group for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206310.html)
   * *   [Configure a security group for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/2392322.html)
   * 
   * @param request - DescribeSecurityGroupConfigurationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSecurityGroupConfigurationResponse
   */
  async describeSecurityGroupConfigurationWithOptions(request: $_model.DescribeSecurityGroupConfigurationRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSecurityGroupConfigurationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSecurityGroupConfiguration",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSecurityGroupConfigurationResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSecurityGroupConfigurationResponse({}));
  }

  /**
   * Queries ECS security groups to which an instance is added.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure a security group for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/201042.html)
   * *   [Configure a security group for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206310.html)
   * *   [Configure a security group for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/2392322.html)
   * 
   * @param request - DescribeSecurityGroupConfigurationRequest
   * @returns DescribeSecurityGroupConfigurationResponse
   */
  async describeSecurityGroupConfiguration(request: $_model.DescribeSecurityGroupConfigurationRequest): Promise<$_model.DescribeSecurityGroupConfigurationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSecurityGroupConfigurationWithOptions(request, runtime);
  }

  /**
   * Queries all replication slots of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * 
   * @param request - DescribeSlotsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSlotsResponse
   */
  async describeSlotsWithOptions(request: $_model.DescribeSlotsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSlotsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSlots",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSlotsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSlotsResponse({}));
  }

  /**
   * Queries all replication slots of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * 
   * @param request - DescribeSlotsRequest
   * @returns DescribeSlotsResponse
   */
  async describeSlots(request: $_model.DescribeSlotsRequest): Promise<$_model.DescribeSlotsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSlotsWithOptions(request, runtime);
  }

  /**
   * Queries the slow log details of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### Precautions
   * The response parameters returned by this operation are updated every minute.
   * 
   * @param request - DescribeSlowLogRecordsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSlowLogRecordsResponse
   */
  async describeSlowLogRecordsWithOptions(request: $_model.DescribeSlowLogRecordsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSlowLogRecordsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.SQLHASH)) {
      query["SQLHASH"] = request.SQLHASH;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSlowLogRecords",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSlowLogRecordsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSlowLogRecordsResponse({}));
  }

  /**
   * Queries the slow log details of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### Precautions
   * The response parameters returned by this operation are updated every minute.
   * 
   * @param request - DescribeSlowLogRecordsRequest
   * @returns DescribeSlowLogRecordsResponse
   */
  async describeSlowLogRecords(request: $_model.DescribeSlowLogRecordsRequest): Promise<$_model.DescribeSlowLogRecordsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSlowLogRecordsWithOptions(request, runtime);
  }

  /**
   * Queries the statistics on slow query logs.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   *     **
   *     **Note** This operation is not supported for RDS instances that run MySQL 5.7 on RDS Basic Edition.
   * *   SQL Server
   *     **
   *     **Note** This operation is supported only for RDS instances that run SQL Server 2008 R2.
   * *   MariaDB
   * ### [](#)Prerequisites
   * *   Slow query logs are not collected in real time and may show a latency of 6 to 8 hours.
   * *   If the return result is empty, check whether the StartTime and EndTime parameters are in UTC. If yes, no slow logs are generated within the specified time range.
   * *   Starting from September 01, 2024, the template algorithm for slow queries is optimized. When you call the operation, you must change the value of the **SQLHASH** parameter. For more information, see [[Notice\\] Optimization of the template algorithm for slow queries](~~2845725~~).
   * 
   * @param request - DescribeSlowLogsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSlowLogsResponse
   */
  async describeSlowLogsWithOptions(request: $_model.DescribeSlowLogsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSlowLogsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.sortKey)) {
      query["SortKey"] = request.sortKey;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSlowLogs",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSlowLogsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSlowLogsResponse({}));
  }

  /**
   * Queries the statistics on slow query logs.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   *     **
   *     **Note** This operation is not supported for RDS instances that run MySQL 5.7 on RDS Basic Edition.
   * *   SQL Server
   *     **
   *     **Note** This operation is supported only for RDS instances that run SQL Server 2008 R2.
   * *   MariaDB
   * ### [](#)Prerequisites
   * *   Slow query logs are not collected in real time and may show a latency of 6 to 8 hours.
   * *   If the return result is empty, check whether the StartTime and EndTime parameters are in UTC. If yes, no slow logs are generated within the specified time range.
   * *   Starting from September 01, 2024, the template algorithm for slow queries is optimized. When you call the operation, you must change the value of the **SQLHASH** parameter. For more information, see [[Notice\\] Optimization of the template algorithm for slow queries](~~2845725~~).
   * 
   * @param request - DescribeSlowLogsRequest
   * @returns DescribeSlowLogsResponse
   */
  async describeSlowLogs(request: $_model.DescribeSlowLogsRequest): Promise<$_model.DescribeSlowLogsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSlowLogsWithOptions(request, runtime);
  }

  /**
   * Checks whether the disk of an ApsaraDB RDS for SQL Server instance can be resized online.
   * 
   * @remarks
   * ### Supported database engine
   * SQL Server
   * 
   * @param request - DescribeSupportOnlineResizeDiskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeSupportOnlineResizeDiskResponse
   */
  async describeSupportOnlineResizeDiskWithOptions(request: $_model.DescribeSupportOnlineResizeDiskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeSupportOnlineResizeDiskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeSupportOnlineResizeDisk",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeSupportOnlineResizeDiskResponse>(await this.callApi(params, req, runtime), new $_model.DescribeSupportOnlineResizeDiskResponse({}));
  }

  /**
   * Checks whether the disk of an ApsaraDB RDS for SQL Server instance can be resized online.
   * 
   * @remarks
   * ### Supported database engine
   * SQL Server
   * 
   * @param request - DescribeSupportOnlineResizeDiskRequest
   * @returns DescribeSupportOnlineResizeDiskResponse
   */
  async describeSupportOnlineResizeDisk(request: $_model.DescribeSupportOnlineResizeDiskRequest): Promise<$_model.DescribeSupportOnlineResizeDiskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeSupportOnlineResizeDiskWithOptions(request, runtime);
  }

  /**
   * Queries tags of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [Usage notes](#)
   * *   If an instance ID is specified, all tags that are added to this instance are queried, and other filter conditions are invalid.
   * *   If you specify only TagKey, the results that match the specified TagKey are returned. If you specify both TagKey and TagValue, the results that match both the specified TagKey and TagValue are returned.
   * 
   * @param request - DescribeTagsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTagsResponse
   */
  async describeTagsWithOptions(request: $_model.DescribeTagsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeTagsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.tags)) {
      query["Tags"] = request.tags;
    }

    if (!$dara.isNull(request.proxyId)) {
      query["proxyId"] = request.proxyId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeTags",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeTagsResponse>(await this.callApi(params, req, runtime), new $_model.DescribeTagsResponse({}));
  }

  /**
   * Queries tags of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [Usage notes](#)
   * *   If an instance ID is specified, all tags that are added to this instance are queried, and other filter conditions are invalid.
   * *   If you specify only TagKey, the results that match the specified TagKey are returned. If you specify both TagKey and TagValue, the results that match both the specified TagKey and TagValue are returned.
   * 
   * @param request - DescribeTagsRequest
   * @returns DescribeTagsResponse
   */
  async describeTags(request: $_model.DescribeTagsRequest): Promise<$_model.DescribeTagsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeTagsWithOptions(request, runtime);
  }

  /**
   * You can call the DescribeTasks operation to query the tasks that are running on an instance.
   * 
   * @remarks
   * This operation is phased out.
   * 
   * @param request - DescribeTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTasksResponse
   */
  async describeTasksWithOptions(request: $_model.DescribeTasksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.taskAction)) {
      query["TaskAction"] = request.taskAction;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeTasks",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeTasksResponse>(await this.callApi(params, req, runtime), new $_model.DescribeTasksResponse({}));
  }

  /**
   * You can call the DescribeTasks operation to query the tasks that are running on an instance.
   * 
   * @remarks
   * This operation is phased out.
   * 
   * @param request - DescribeTasksRequest
   * @returns DescribeTasksResponse
   */
  async describeTasks(request: $_model.DescribeTasksRequest): Promise<$_model.DescribeTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeTasksWithOptions(request, runtime);
  }

  /**
   * Queries the check report for a major engine version upgrade of an ApsaraDB RDS for MySQL instance or ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * PostgreSQL
   * ### [](#)References
   * > Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Check report for the major engine version upgrade of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/2794383.html)
   * *   [Upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/203309.html)
   * *   [Introduction to the check report of a major engine version upgrade for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/218391.html)
   * 
   * @param request - DescribeUpgradeMajorVersionPrecheckTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUpgradeMajorVersionPrecheckTaskResponse
   */
  async describeUpgradeMajorVersionPrecheckTaskWithOptions(request: $_model.DescribeUpgradeMajorVersionPrecheckTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUpgradeMajorVersionPrecheckTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.targetMajorVersion)) {
      query["TargetMajorVersion"] = request.targetMajorVersion;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUpgradeMajorVersionPrecheckTask",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUpgradeMajorVersionPrecheckTaskResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUpgradeMajorVersionPrecheckTaskResponse({}));
  }

  /**
   * Queries the check report for a major engine version upgrade of an ApsaraDB RDS for MySQL instance or ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * PostgreSQL
   * ### [](#)References
   * > Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Check report for the major engine version upgrade of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/2794383.html)
   * *   [Upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/203309.html)
   * *   [Introduction to the check report of a major engine version upgrade for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/218391.html)
   * 
   * @param request - DescribeUpgradeMajorVersionPrecheckTaskRequest
   * @returns DescribeUpgradeMajorVersionPrecheckTaskResponse
   */
  async describeUpgradeMajorVersionPrecheckTask(request: $_model.DescribeUpgradeMajorVersionPrecheckTaskRequest): Promise<$_model.DescribeUpgradeMajorVersionPrecheckTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUpgradeMajorVersionPrecheckTaskWithOptions(request, runtime);
  }

  /**
   * Queries the historical tasks for major engine version upgrades of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * PostgreSQL
   * 
   * @param request - DescribeUpgradeMajorVersionTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeUpgradeMajorVersionTasksResponse
   */
  async describeUpgradeMajorVersionTasksWithOptions(request: $_model.DescribeUpgradeMajorVersionTasksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeUpgradeMajorVersionTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.targetMajorVersion)) {
      query["TargetMajorVersion"] = request.targetMajorVersion;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeUpgradeMajorVersionTasks",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeUpgradeMajorVersionTasksResponse>(await this.callApi(params, req, runtime), new $_model.DescribeUpgradeMajorVersionTasksResponse({}));
  }

  /**
   * Queries the historical tasks for major engine version upgrades of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * PostgreSQL
   * 
   * @param request - DescribeUpgradeMajorVersionTasksRequest
   * @returns DescribeUpgradeMajorVersionTasksResponse
   */
  async describeUpgradeMajorVersionTasks(request: $_model.DescribeUpgradeMajorVersionTasksRequest): Promise<$_model.DescribeUpgradeMajorVersionTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeUpgradeMajorVersionTasksWithOptions(request, runtime);
  }

  /**
   * Queries the details of vSwitch that are available in a virtual private cloud (VPC).
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeVSwitchesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeVSwitchesResponse
   */
  async describeVSwitchesWithOptions(request: $_model.DescribeVSwitchesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeVSwitchesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dedicatedHostGroupId)) {
      query["DedicatedHostGroupId"] = request.dedicatedHostGroupId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeVSwitches",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeVSwitchesResponse>(await this.callApi(params, req, runtime), new $_model.DescribeVSwitchesResponse({}));
  }

  /**
   * Queries the details of vSwitch that are available in a virtual private cloud (VPC).
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - DescribeVSwitchesRequest
   * @returns DescribeVSwitchesResponse
   */
  async describeVSwitches(request: $_model.DescribeVSwitchesRequest): Promise<$_model.DescribeVSwitchesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeVSwitchesWithOptions(request, runtime);
  }

  /**
   * Queries information about the specified IP whitelist.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - DescribeWhitelistTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWhitelistTemplateResponse
   */
  async describeWhitelistTemplateWithOptions(request: $_model.DescribeWhitelistTemplateRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWhitelistTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWhitelistTemplate",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWhitelistTemplateResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWhitelistTemplateResponse({}));
  }

  /**
   * Queries information about the specified IP whitelist.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - DescribeWhitelistTemplateRequest
   * @returns DescribeWhitelistTemplateResponse
   */
  async describeWhitelistTemplate(request: $_model.DescribeWhitelistTemplateRequest): Promise<$_model.DescribeWhitelistTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWhitelistTemplateWithOptions(request, runtime);
  }

  /**
   * Queries associated instances by whitelist template.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - DescribeWhitelistTemplateLinkedInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeWhitelistTemplateLinkedInstanceResponse
   */
  async describeWhitelistTemplateLinkedInstanceWithOptions(request: $_model.DescribeWhitelistTemplateLinkedInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DescribeWhitelistTemplateLinkedInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.templateId)) {
      body["TemplateId"] = request.templateId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeWhitelistTemplateLinkedInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DescribeWhitelistTemplateLinkedInstanceResponse>(await this.callApi(params, req, runtime), new $_model.DescribeWhitelistTemplateLinkedInstanceResponse({}));
  }

  /**
   * Queries associated instances by whitelist template.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - DescribeWhitelistTemplateLinkedInstanceRequest
   * @returns DescribeWhitelistTemplateLinkedInstanceResponse
   */
  async describeWhitelistTemplateLinkedInstance(request: $_model.DescribeWhitelistTemplateLinkedInstanceRequest): Promise<$_model.DescribeWhitelistTemplateLinkedInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeWhitelistTemplateLinkedInstanceWithOptions(request, runtime);
  }

  /**
   * You can call the DestroyDBInstance operation to destroy an instance. The instance is in the Locked state.
   * 
   * @remarks
   * The DestroyDBInstance operation is phased out.
   * 
   * @param request - DestroyDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DestroyDBInstanceResponse
   */
  async destroyDBInstanceWithOptions(request: $_model.DestroyDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DestroyDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DestroyDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DestroyDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.DestroyDBInstanceResponse({}));
  }

  /**
   * You can call the DestroyDBInstance operation to destroy an instance. The instance is in the Locked state.
   * 
   * @remarks
   * The DestroyDBInstance operation is phased out.
   * 
   * @param request - DestroyDBInstanceRequest
   * @returns DestroyDBInstanceResponse
   */
  async destroyDBInstance(request: $_model.DestroyDBInstanceRequest): Promise<$_model.DestroyDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.destroyDBInstanceWithOptions(request, runtime);
  }

  /**
   * Removes a unit node from a global active database cluster.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * ### [Usage notes](#)
   * This operation can be used to remove only unit nodes.
   * 
   * @param request - DetachGadInstanceMemberRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DetachGadInstanceMemberResponse
   */
  async detachGadInstanceMemberWithOptions(request: $_model.DetachGadInstanceMemberRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DetachGadInstanceMemberResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.gadInstanceName)) {
      query["GadInstanceName"] = request.gadInstanceName;
    }

    if (!$dara.isNull(request.memberInstanceName)) {
      query["MemberInstanceName"] = request.memberInstanceName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DetachGadInstanceMember",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DetachGadInstanceMemberResponse>(await this.callApi(params, req, runtime), new $_model.DetachGadInstanceMemberResponse({}));
  }

  /**
   * Removes a unit node from a global active database cluster.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * ### [Usage notes](#)
   * This operation can be used to remove only unit nodes.
   * 
   * @param request - DetachGadInstanceMemberRequest
   * @returns DetachGadInstanceMemberResponse
   */
  async detachGadInstanceMember(request: $_model.DetachGadInstanceMemberRequest): Promise<$_model.DetachGadInstanceMemberResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.detachGadInstanceMemberWithOptions(request, runtime);
  }

  /**
   * Detaches a pay-as-you-go data disk or a system disk from an RDS Custom instance.
   * 
   * @param request - DetachRCDiskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DetachRCDiskResponse
   */
  async detachRCDiskWithOptions(request: $_model.DetachRCDiskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DetachRCDiskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.deleteWithInstance)) {
      query["DeleteWithInstance"] = request.deleteWithInstance;
    }

    if (!$dara.isNull(request.diskId)) {
      query["DiskId"] = request.diskId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DetachRCDisk",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DetachRCDiskResponse>(await this.callApi(params, req, runtime), new $_model.DetachRCDiskResponse({}));
  }

  /**
   * Detaches a pay-as-you-go data disk or a system disk from an RDS Custom instance.
   * 
   * @param request - DetachRCDiskRequest
   * @returns DetachRCDiskResponse
   */
  async detachRCDisk(request: $_model.DetachRCDiskRequest): Promise<$_model.DetachRCDiskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.detachRCDiskWithOptions(request, runtime);
  }

  /**
   * Disassociates a whitelist template from an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - DetachWhitelistTemplateToInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DetachWhitelistTemplateToInstanceResponse
   */
  async detachWhitelistTemplateToInstanceWithOptions(request: $_model.DetachWhitelistTemplateToInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.DetachWhitelistTemplateToInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.insName)) {
      query["InsName"] = request.insName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DetachWhitelistTemplateToInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.DetachWhitelistTemplateToInstanceResponse>(await this.callApi(params, req, runtime), new $_model.DetachWhitelistTemplateToInstanceResponse({}));
  }

  /**
   * Disassociates a whitelist template from an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - DetachWhitelistTemplateToInstanceRequest
   * @returns DetachWhitelistTemplateToInstanceResponse
   */
  async detachWhitelistTemplateToInstance(request: $_model.DetachWhitelistTemplateToInstanceRequest): Promise<$_model.DetachWhitelistTemplateToInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.detachWhitelistTemplateToInstanceWithOptions(request, runtime);
  }

  /**
   * 评估紧急本地扩容磁盘解锁可使用的磁盘空间
   * 
   * @param request - EvaluateLocalExtendDiskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns EvaluateLocalExtendDiskResponse
   */
  async evaluateLocalExtendDiskWithOptions(request: $_model.EvaluateLocalExtendDiskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.EvaluateLocalExtendDiskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.storage)) {
      query["Storage"] = request.storage;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "EvaluateLocalExtendDisk",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.EvaluateLocalExtendDiskResponse>(await this.callApi(params, req, runtime), new $_model.EvaluateLocalExtendDiskResponse({}));
  }

  /**
   * 评估紧急本地扩容磁盘解锁可使用的磁盘空间
   * 
   * @param request - EvaluateLocalExtendDiskRequest
   * @returns EvaluateLocalExtendDiskResponse
   */
  async evaluateLocalExtendDisk(request: $_model.EvaluateLocalExtendDiskRequest): Promise<$_model.EvaluateLocalExtendDiskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.evaluateLocalExtendDiskWithOptions(request, runtime);
  }

  /**
   * Queries the topology of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * RDS MySQL
   * 
   * @param request - GetDBInstanceTopologyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDBInstanceTopologyResponse
   */
  async getDBInstanceTopologyWithOptions(request: $_model.GetDBInstanceTopologyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetDBInstanceTopologyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDBInstanceTopology",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetDBInstanceTopologyResponse>(await this.callApi(params, req, runtime), new $_model.GetDBInstanceTopologyResponse({}));
  }

  /**
   * Queries the topology of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * RDS MySQL
   * 
   * @param request - GetDBInstanceTopologyRequest
   * @returns GetDBInstanceTopologyResponse
   */
  async getDBInstanceTopology(request: $_model.GetDBInstanceTopologyRequest): Promise<$_model.GetDBInstanceTopologyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDBInstanceTopologyWithOptions(request, runtime);
  }

  /**
   * Queries the SSL encryption settings for a dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS MySQL
   * 
   * @param request - GetDbProxyInstanceSslRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetDbProxyInstanceSslResponse
   */
  async getDbProxyInstanceSslWithOptions(request: $_model.GetDbProxyInstanceSslRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GetDbProxyInstanceSslResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBProxyEngineType)) {
      query["DBProxyEngineType"] = request.DBProxyEngineType;
    }

    if (!$dara.isNull(request.dbInstanceId)) {
      query["DbInstanceId"] = request.dbInstanceId;
    }

    if (!$dara.isNull(request.dbInstanceId)) {
      query["DbInstanceId"] = request.dbInstanceId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetDbProxyInstanceSsl",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GetDbProxyInstanceSslResponse>(await this.callApi(params, req, runtime), new $_model.GetDbProxyInstanceSslResponse({}));
  }

  /**
   * Queries the SSL encryption settings for a dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS MySQL
   * 
   * @param request - GetDbProxyInstanceSslRequest
   * @returns GetDbProxyInstanceSslResponse
   */
  async getDbProxyInstanceSsl(request: $_model.GetDbProxyInstanceSslRequest): Promise<$_model.GetDbProxyInstanceSslResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getDbProxyInstanceSslWithOptions(request, runtime);
  }

  /**
   * Grants an account the permissions on a database of an instance.
   * 
   * @remarks
   * Each account can be granted permissions on one or more databases. Before you call this operation, make sure that the instance is in the Running state.
   * > This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition or run PostgreSQL with local disks.
   * 
   * @param request - GrantAccountPrivilegeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GrantAccountPrivilegeResponse
   */
  async grantAccountPrivilegeWithOptions(request: $_model.GrantAccountPrivilegeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GrantAccountPrivilegeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.accountPrivilege)) {
      query["AccountPrivilege"] = request.accountPrivilege;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GrantAccountPrivilege",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GrantAccountPrivilegeResponse>(await this.callApi(params, req, runtime), new $_model.GrantAccountPrivilegeResponse({}));
  }

  /**
   * Grants an account the permissions on a database of an instance.
   * 
   * @remarks
   * Each account can be granted permissions on one or more databases. Before you call this operation, make sure that the instance is in the Running state.
   * > This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition or run PostgreSQL with local disks.
   * 
   * @param request - GrantAccountPrivilegeRequest
   * @returns GrantAccountPrivilegeResponse
   */
  async grantAccountPrivilege(request: $_model.GrantAccountPrivilegeRequest): Promise<$_model.GrantAccountPrivilegeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.grantAccountPrivilegeWithOptions(request, runtime);
  }

  /**
   * Grant permissions to a service account.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Grant permissions to the service account of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96102.html)
   * *   [Grant permissions to the service account of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95693.html)
   * 
   * @param request - GrantOperatorPermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GrantOperatorPermissionResponse
   */
  async grantOperatorPermissionWithOptions(request: $_model.GrantOperatorPermissionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.GrantOperatorPermissionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.expiredTime)) {
      query["ExpiredTime"] = request.expiredTime;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.privileges)) {
      query["Privileges"] = request.privileges;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GrantOperatorPermission",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.GrantOperatorPermissionResponse>(await this.callApi(params, req, runtime), new $_model.GrantOperatorPermissionResponse({}));
  }

  /**
   * Grant permissions to a service account.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Grant permissions to the service account of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96102.html)
   * *   [Grant permissions to the service account of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95693.html)
   * 
   * @param request - GrantOperatorPermissionRequest
   * @returns GrantOperatorPermissionResponse
   */
  async grantOperatorPermission(request: $_model.GrantOperatorPermissionRequest): Promise<$_model.GrantOperatorPermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.grantOperatorPermissionWithOptions(request, runtime);
  }

  /**
   * Imports the backup data of a self-managed instance that runs MySQL 5.7 to an ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * ### [](#)Description
   * A full backup file contains the data of a self-managed MySQL instance. You can restore the data of a self-managed MySQL instance from a full backup file to an ApsaraDB RDS for MySQL instance.
   * ### [](#)Usage notes
   * Before you call this operation, make sure that the following requirements are met:
   * *   The self-managed MySQL instance runs MySQL 5.7 and is backed up by using XtraBackup. The name of the backup file ends with `_qp.xb`. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](https://help.aliyun.com/document_detail/251779.html).
   * *   The full backup file of the self-managed MySQL instance is uploaded to an Object Storage Service (OSS) bucket in the region of the ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](https://help.aliyun.com/document_detail/251779.html).
   * >  This operation is supported only for MySQL 5.7.
   * 
   * @param request - ImportUserBackupFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ImportUserBackupFileResponse
   */
  async importUserBackupFileWithOptions(request: $_model.ImportUserBackupFileRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ImportUserBackupFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupFile)) {
      query["BackupFile"] = request.backupFile;
    }

    if (!$dara.isNull(request.bucketRegion)) {
      query["BucketRegion"] = request.bucketRegion;
    }

    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.restoreSize)) {
      query["RestoreSize"] = request.restoreSize;
    }

    if (!$dara.isNull(request.retention)) {
      query["Retention"] = request.retention;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ImportUserBackupFile",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ImportUserBackupFileResponse>(await this.callApi(params, req, runtime), new $_model.ImportUserBackupFileResponse({}));
  }

  /**
   * Imports the backup data of a self-managed instance that runs MySQL 5.7 to an ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * ### [](#)Description
   * A full backup file contains the data of a self-managed MySQL instance. You can restore the data of a self-managed MySQL instance from a full backup file to an ApsaraDB RDS for MySQL instance.
   * ### [](#)Usage notes
   * Before you call this operation, make sure that the following requirements are met:
   * *   The self-managed MySQL instance runs MySQL 5.7 and is backed up by using XtraBackup. The name of the backup file ends with `_qp.xb`. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](https://help.aliyun.com/document_detail/251779.html).
   * *   The full backup file of the self-managed MySQL instance is uploaded to an Object Storage Service (OSS) bucket in the region of the ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](https://help.aliyun.com/document_detail/251779.html).
   * >  This operation is supported only for MySQL 5.7.
   * 
   * @param request - ImportUserBackupFileRequest
   * @returns ImportUserBackupFileResponse
   */
  async importUserBackupFile(request: $_model.ImportUserBackupFileRequest): Promise<$_model.ImportUserBackupFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.importUserBackupFileWithOptions(request, runtime);
  }

  /**
   * Queries the specification details of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - ListClassesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListClassesResponse
   */
  async listClassesWithOptions(request: $_model.ListClassesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListClassesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.commodityCode)) {
      query["CommodityCode"] = request.commodityCode;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.orderType)) {
      query["OrderType"] = request.orderType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListClasses",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListClassesResponse>(await this.callApi(params, req, runtime), new $_model.ListClassesResponse({}));
  }

  /**
   * Queries the specification details of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - ListClassesRequest
   * @returns ListClassesResponse
   */
  async listClasses(request: $_model.ListClassesRequest): Promise<$_model.ListClassesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listClassesWithOptions(request, runtime);
  }

  /**
   * Queries the tags that are added to one or more instances.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - ListTagResourcesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTagResourcesResponse
   */
  async listTagResourcesWithOptions(request: $_model.ListTagResourcesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListTagResourcesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTagResources",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListTagResourcesResponse>(await this.callApi(params, req, runtime), new $_model.ListTagResourcesResponse({}));
  }

  /**
   * Queries the tags that are added to one or more instances.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * 
   * @param request - ListTagResourcesRequest
   * @returns ListTagResourcesResponse
   */
  async listTagResources(request: $_model.ListTagResourcesRequest): Promise<$_model.ListTagResourcesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTagResourcesWithOptions(request, runtime);
  }

  /**
   * Queries the details about the full backup files that are imported into an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * ### [](#)Feature description
   * *   A full backup file contains the data of a self-managed MySQL database. You can restore the data of a self-managed MySQL database from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](https://help.aliyun.com/document_detail/251779.html).
   * *   Before you call the [CreateDBInstance](https://help.aliyun.com/document_detail/26228.html) operation to create an ApsaraDB RDS for MySQL instance into which you want to import full backup files, you can call this operation to query the IDs of full backup files.
   * *   You can call the [ImportUserBackupFile](https://help.aliyun.com/document_detail/260266.html) operation to import a full backup file into an ApsaraDB RDS for MySQL instance.
   * 
   * @param request - ListUserBackupFilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListUserBackupFilesResponse
   */
  async listUserBackupFilesWithOptions(request: $_model.ListUserBackupFilesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ListUserBackupFilesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.ossUrl)) {
      query["OssUrl"] = request.ossUrl;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.status)) {
      query["Status"] = request.status;
    }

    if (!$dara.isNull(request.tags)) {
      query["Tags"] = request.tags;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListUserBackupFiles",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ListUserBackupFilesResponse>(await this.callApi(params, req, runtime), new $_model.ListUserBackupFilesResponse({}));
  }

  /**
   * Queries the details about the full backup files that are imported into an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * ### [](#)Feature description
   * *   A full backup file contains the data of a self-managed MySQL database. You can restore the data of a self-managed MySQL database from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](https://help.aliyun.com/document_detail/251779.html).
   * *   Before you call the [CreateDBInstance](https://help.aliyun.com/document_detail/26228.html) operation to create an ApsaraDB RDS for MySQL instance into which you want to import full backup files, you can call this operation to query the IDs of full backup files.
   * *   You can call the [ImportUserBackupFile](https://help.aliyun.com/document_detail/260266.html) operation to import a full backup file into an ApsaraDB RDS for MySQL instance.
   * 
   * @param request - ListUserBackupFilesRequest
   * @returns ListUserBackupFilesResponse
   */
  async listUserBackupFiles(request: $_model.ListUserBackupFilesRequest): Promise<$_model.ListUserBackupFilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listUserBackupFilesWithOptions(request, runtime);
  }

  /**
   * Locks an account of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Lock an account of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/147649.html)
   * 
   * @param request - LockAccountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns LockAccountResponse
   */
  async lockAccountWithOptions(request: $_model.LockAccountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.LockAccountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "LockAccount",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.LockAccountResponse>(await this.callApi(params, req, runtime), new $_model.LockAccountResponse({}));
  }

  /**
   * Locks an account of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Lock an account of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/147649.html)
   * 
   * @param request - LockAccountRequest
   * @returns LockAccountResponse
   */
  async lockAccount(request: $_model.LockAccountRequest): Promise<$_model.LockAccountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.lockAccountWithOptions(request, runtime);
  }

  /**
   * Migrates an instance to a different zone.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Migrate an ApsaraDB RDS for MySQL instance across zones in the same region](https://help.aliyun.com/document_detail/96746.html)
   * *   [Migrate an ApsaraDB RDS for PostgreSQL instance across zones in the same region](https://help.aliyun.com/document_detail/96746.html)
   * *   [Migrate an ApsaraDB RDS for SQL Server instance across zones in the same region](https://help.aliyun.com/document_detail/95658.html)
   * 
   * @param request - MigrateConnectionToOtherZoneRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MigrateConnectionToOtherZoneResponse
   */
  async migrateConnectionToOtherZoneWithOptions(request: $_model.MigrateConnectionToOtherZoneRequest, runtime: $dara.RuntimeOptions): Promise<$_model.MigrateConnectionToOtherZoneResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.connectionString)) {
      query["ConnectionString"] = request.connectionString;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "MigrateConnectionToOtherZone",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.MigrateConnectionToOtherZoneResponse>(await this.callApi(params, req, runtime), new $_model.MigrateConnectionToOtherZoneResponse({}));
  }

  /**
   * Migrates an instance to a different zone.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Migrate an ApsaraDB RDS for MySQL instance across zones in the same region](https://help.aliyun.com/document_detail/96746.html)
   * *   [Migrate an ApsaraDB RDS for PostgreSQL instance across zones in the same region](https://help.aliyun.com/document_detail/96746.html)
   * *   [Migrate an ApsaraDB RDS for SQL Server instance across zones in the same region](https://help.aliyun.com/document_detail/95658.html)
   * 
   * @param request - MigrateConnectionToOtherZoneRequest
   * @returns MigrateConnectionToOtherZoneResponse
   */
  async migrateConnectionToOtherZone(request: $_model.MigrateConnectionToOtherZoneRequest): Promise<$_model.MigrateConnectionToOtherZoneResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.migrateConnectionToOtherZoneWithOptions(request, runtime);
  }

  /**
   * Migrates an instance across hosts in a dedicated cluster.
   * 
   * @remarks
   * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](https://help.aliyun.com/document_detail/141455.html)
   * 
   * @param request - MigrateDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MigrateDBInstanceResponse
   */
  async migrateDBInstanceWithOptions(request: $_model.MigrateDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.MigrateDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.dedicatedHostGroupId)) {
      query["DedicatedHostGroupId"] = request.dedicatedHostGroupId;
    }

    if (!$dara.isNull(request.effectiveTime)) {
      query["EffectiveTime"] = request.effectiveTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.specifiedTime)) {
      query["SpecifiedTime"] = request.specifiedTime;
    }

    if (!$dara.isNull(request.targetDedicatedHostIdForMaster)) {
      query["TargetDedicatedHostIdForMaster"] = request.targetDedicatedHostIdForMaster;
    }

    if (!$dara.isNull(request.targetDedicatedHostIdForSlave)) {
      query["TargetDedicatedHostIdForSlave"] = request.targetDedicatedHostIdForSlave;
    }

    if (!$dara.isNull(request.zoneIdForFollower)) {
      query["ZoneIdForFollower"] = request.zoneIdForFollower;
    }

    if (!$dara.isNull(request.zoneIdForLog)) {
      query["ZoneIdForLog"] = request.zoneIdForLog;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "MigrateDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.MigrateDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.MigrateDBInstanceResponse({}));
  }

  /**
   * Migrates an instance across hosts in a dedicated cluster.
   * 
   * @remarks
   * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](https://help.aliyun.com/document_detail/141455.html)
   * 
   * @param request - MigrateDBInstanceRequest
   * @returns MigrateDBInstanceResponse
   */
  async migrateDBInstance(request: $_model.MigrateDBInstanceRequest): Promise<$_model.MigrateDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.migrateDBInstanceWithOptions(request, runtime);
  }

  /**
   * Changes the zone of a node from an ApsaraDB RDS for MySQL instance that runs RDS Cluster Edition.
   * 
   * @param tmpReq - MigrateDBNodesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MigrateDBNodesResponse
   */
  async migrateDBNodesWithOptions(tmpReq: $_model.MigrateDBNodesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.MigrateDBNodesResponse> {
    tmpReq.validate();
    let request = new $_model.MigrateDBNodesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.DBNode)) {
      request.DBNodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBNode, "DBNode", "json");
    }

    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBNodeShrink)) {
      query["DBNode"] = request.DBNodeShrink;
    }

    if (!$dara.isNull(request.effectiveTime)) {
      query["EffectiveTime"] = request.effectiveTime;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.switchTime)) {
      query["SwitchTime"] = request.switchTime;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "MigrateDBNodes",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.MigrateDBNodesResponse>(await this.callApi(params, req, runtime), new $_model.MigrateDBNodesResponse({}));
  }

  /**
   * Changes the zone of a node from an ApsaraDB RDS for MySQL instance that runs RDS Cluster Edition.
   * 
   * @param request - MigrateDBNodesRequest
   * @returns MigrateDBNodesResponse
   */
  async migrateDBNodes(request: $_model.MigrateDBNodesRequest): Promise<$_model.MigrateDBNodesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.migrateDBNodesWithOptions(request, runtime);
  }

  /**
   * Changes the whitelist mode of an instance from the standard whitelist mode to the enhanced whitelist mode.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Change the whitelist mode of an ApsaraDB RDS for MySQL instance to the enhanced whitelist mode](https://help.aliyun.com/document_detail/96117.html)
   * *   [Change the whitelist mode of an ApsaraDB RDS for PostgreSQL instance to the enhanced whitelist mode](https://help.aliyun.com/document_detail/96767.html)
   * 
   * @param request - MigrateSecurityIPModeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MigrateSecurityIPModeResponse
   */
  async migrateSecurityIPModeWithOptions(request: $_model.MigrateSecurityIPModeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.MigrateSecurityIPModeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "MigrateSecurityIPMode",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.MigrateSecurityIPModeResponse>(await this.callApi(params, req, runtime), new $_model.MigrateSecurityIPModeResponse({}));
  }

  /**
   * Changes the whitelist mode of an instance from the standard whitelist mode to the enhanced whitelist mode.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Change the whitelist mode of an ApsaraDB RDS for MySQL instance to the enhanced whitelist mode](https://help.aliyun.com/document_detail/96117.html)
   * *   [Change the whitelist mode of an ApsaraDB RDS for PostgreSQL instance to the enhanced whitelist mode](https://help.aliyun.com/document_detail/96767.html)
   * 
   * @param request - MigrateSecurityIPModeRequest
   * @returns MigrateSecurityIPModeResponse
   */
  async migrateSecurityIPMode(request: $_model.MigrateSecurityIPModeRequest): Promise<$_model.MigrateSecurityIPModeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.migrateSecurityIPModeWithOptions(request, runtime);
  }

  /**
   * Migrates an instance across zones in the same region.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Migrate an ApsaraDB RDS for MySQL instance across zones in the same region](https://help.aliyun.com/document_detail/96053.html)
   * *   [Migrate an ApsaraDB RDS for PostgreSQL instance across zones in the same region](https://help.aliyun.com/document_detail/96746.html)
   * *   [Migrate an ApsaraDB RDS for SQL Server instance across zones in the same region](https://help.aliyun.com/document_detail/95658.html)
   * 
   * @param request - MigrateToOtherZoneRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns MigrateToOtherZoneResponse
   */
  async migrateToOtherZoneWithOptions(request: $_model.MigrateToOtherZoneRequest, runtime: $dara.RuntimeOptions): Promise<$_model.MigrateToOtherZoneResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.category)) {
      query["Category"] = request.category;
    }

    if (!$dara.isNull(request.DBInstanceClass)) {
      query["DBInstanceClass"] = request.DBInstanceClass;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceStorage)) {
      query["DBInstanceStorage"] = request.DBInstanceStorage;
    }

    if (!$dara.isNull(request.DBInstanceStorageType)) {
      query["DBInstanceStorageType"] = request.DBInstanceStorageType;
    }

    if (!$dara.isNull(request.effectiveTime)) {
      query["EffectiveTime"] = request.effectiveTime;
    }

    if (!$dara.isNull(request.ioAccelerationEnabled)) {
      query["IoAccelerationEnabled"] = request.ioAccelerationEnabled;
    }

    if (!$dara.isNull(request.isModifySpec)) {
      query["IsModifySpec"] = request.isModifySpec;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.switchTime)) {
      query["SwitchTime"] = request.switchTime;
    }

    if (!$dara.isNull(request.VPCId)) {
      query["VPCId"] = request.VPCId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    if (!$dara.isNull(request.zoneIdSlave1)) {
      query["ZoneIdSlave1"] = request.zoneIdSlave1;
    }

    if (!$dara.isNull(request.zoneIdSlave2)) {
      query["ZoneIdSlave2"] = request.zoneIdSlave2;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "MigrateToOtherZone",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.MigrateToOtherZoneResponse>(await this.callApi(params, req, runtime), new $_model.MigrateToOtherZoneResponse({}));
  }

  /**
   * Migrates an instance across zones in the same region.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Migrate an ApsaraDB RDS for MySQL instance across zones in the same region](https://help.aliyun.com/document_detail/96053.html)
   * *   [Migrate an ApsaraDB RDS for PostgreSQL instance across zones in the same region](https://help.aliyun.com/document_detail/96746.html)
   * *   [Migrate an ApsaraDB RDS for SQL Server instance across zones in the same region](https://help.aliyun.com/document_detail/95658.html)
   * 
   * @param request - MigrateToOtherZoneRequest
   * @returns MigrateToOtherZoneResponse
   */
  async migrateToOtherZone(request: $_model.MigrateToOtherZoneRequest): Promise<$_model.MigrateToOtherZoneResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.migrateToOtherZoneWithOptions(request, runtime);
  }

  /**
   * Modifies the AD domain information about an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Connect an RDS instance to a self-managed domain](https://help.aliyun.com/document_detail/170734.html)
   * 
   * @param request - ModifyADInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyADInfoResponse
   */
  async modifyADInfoWithOptions(request: $_model.ModifyADInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyADInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ADAccountName)) {
      query["ADAccountName"] = request.ADAccountName;
    }

    if (!$dara.isNull(request.ADDNS)) {
      query["ADDNS"] = request.ADDNS;
    }

    if (!$dara.isNull(request.ADPassword)) {
      query["ADPassword"] = request.ADPassword;
    }

    if (!$dara.isNull(request.ADServerIpAddress)) {
      query["ADServerIpAddress"] = request.ADServerIpAddress;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyADInfo",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyADInfoResponse>(await this.callApi(params, req, runtime), new $_model.ModifyADInfoResponse({}));
  }

  /**
   * Modifies the AD domain information about an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Connect an RDS instance to a self-managed domain](https://help.aliyun.com/document_detail/170734.html)
   * 
   * @param request - ModifyADInfoRequest
   * @returns ModifyADInfoResponse
   */
  async modifyADInfo(request: $_model.ModifyADInfoRequest): Promise<$_model.ModifyADInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyADInfoWithOptions(request, runtime);
  }

  /**
   * Checks whether a password policy is applied to an account.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   SQL Server
   * 
   * @param request - ModifyAccountCheckPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAccountCheckPolicyResponse
   */
  async modifyAccountCheckPolicyWithOptions(request: $_model.ModifyAccountCheckPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyAccountCheckPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.checkPolicy)) {
      query["CheckPolicy"] = request.checkPolicy;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAccountCheckPolicy",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyAccountCheckPolicyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyAccountCheckPolicyResponse({}));
  }

  /**
   * Checks whether a password policy is applied to an account.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   SQL Server
   * 
   * @param request - ModifyAccountCheckPolicyRequest
   * @returns ModifyAccountCheckPolicyResponse
   */
  async modifyAccountCheckPolicy(request: $_model.ModifyAccountCheckPolicyRequest): Promise<$_model.ModifyAccountCheckPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAccountCheckPolicyWithOptions(request, runtime);
  }

  /**
   * Modifies the description of a database account.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - ModifyAccountDescriptionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAccountDescriptionResponse
   */
  async modifyAccountDescriptionWithOptions(request: $_model.ModifyAccountDescriptionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyAccountDescriptionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountDescription)) {
      query["AccountDescription"] = request.accountDescription;
    }

    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAccountDescription",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyAccountDescriptionResponse>(await this.callApi(params, req, runtime), new $_model.ModifyAccountDescriptionResponse({}));
  }

  /**
   * Modifies the description of a database account.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - ModifyAccountDescriptionRequest
   * @returns ModifyAccountDescriptionResponse
   */
  async modifyAccountDescription(request: $_model.ModifyAccountDescriptionRequest): Promise<$_model.ModifyAccountDescriptionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAccountDescriptionWithOptions(request, runtime);
  }

  /**
   * 修改全密态用户权限
   * 
   * @param request - ModifyAccountMaskingPrivilegeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAccountMaskingPrivilegeResponse
   */
  async modifyAccountMaskingPrivilegeWithOptions(request: $_model.ModifyAccountMaskingPrivilegeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyAccountMaskingPrivilegeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.expireTime)) {
      query["ExpireTime"] = request.expireTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.privilege)) {
      query["Privilege"] = request.privilege;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.userName)) {
      query["UserName"] = request.userName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAccountMaskingPrivilege",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyAccountMaskingPrivilegeResponse>(await this.callApi(params, req, runtime), new $_model.ModifyAccountMaskingPrivilegeResponse({}));
  }

  /**
   * 修改全密态用户权限
   * 
   * @param request - ModifyAccountMaskingPrivilegeRequest
   * @returns ModifyAccountMaskingPrivilegeResponse
   */
  async modifyAccountMaskingPrivilege(request: $_model.ModifyAccountMaskingPrivilegeRequest): Promise<$_model.ModifyAccountMaskingPrivilegeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAccountMaskingPrivilegeWithOptions(request, runtime);
  }

  /**
   * Modifies the password policy for an account of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * SQL Server (This parameter is unavailable for ApsaraDB RDS for SQL Server instances that belong to the shared instance family and run SQL Server 2008 R2.)
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Create a custom password policy for an account of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95640.html)
   * 
   * @param request - ModifyAccountSecurityPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAccountSecurityPolicyResponse
   */
  async modifyAccountSecurityPolicyWithOptions(request: $_model.ModifyAccountSecurityPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyAccountSecurityPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.groupPolicy)) {
      query["GroupPolicy"] = request.groupPolicy;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAccountSecurityPolicy",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyAccountSecurityPolicyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyAccountSecurityPolicyResponse({}));
  }

  /**
   * Modifies the password policy for an account of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * SQL Server (This parameter is unavailable for ApsaraDB RDS for SQL Server instances that belong to the shared instance family and run SQL Server 2008 R2.)
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Create a custom password policy for an account of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95640.html)
   * 
   * @param request - ModifyAccountSecurityPolicyRequest
   * @returns ModifyAccountSecurityPolicyResponse
   */
  async modifyAccountSecurityPolicy(request: $_model.ModifyAccountSecurityPolicyRequest): Promise<$_model.ModifyAccountSecurityPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAccountSecurityPolicyWithOptions(request, runtime);
  }

  /**
   * Enables or disables the event history feature of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [View the event history of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/129759.html)
   * *   [View the event history of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/131008.html)
   * *   [View the event history of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/131013.html)
   * *   [View the event history of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/131010.html)
   * 
   * @param request - ModifyActionEventPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyActionEventPolicyResponse
   */
  async modifyActionEventPolicyWithOptions(request: $_model.ModifyActionEventPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyActionEventPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.enableEventLog)) {
      query["EnableEventLog"] = request.enableEventLog;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyActionEventPolicy",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyActionEventPolicyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyActionEventPolicyResponse({}));
  }

  /**
   * Enables or disables the event history feature of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [View the event history of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/129759.html)
   * *   [View the event history of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/131008.html)
   * *   [View the event history of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/131013.html)
   * *   [View the event history of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/131010.html)
   * 
   * @param request - ModifyActionEventPolicyRequest
   * @returns ModifyActionEventPolicyResponse
   */
  async modifyActionEventPolicy(request: $_model.ModifyActionEventPolicyRequest): Promise<$_model.ModifyActionEventPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyActionEventPolicyWithOptions(request, runtime);
  }

  /**
   * Changes the switching time of scheduled O\\\\\\&M tasks for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Scheduled events for ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/104183.html)
   * *   [Scheduled events for ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/104452.html)
   * *   [Scheduled events for ApsaraDB RDS for SQL Server instances](https://help.aliyun.com/document_detail/104451.html)
   * *   [Scheduled events for ApsaraDB RDS for MariaDB instances](https://help.aliyun.com/document_detail/104454.html)
   * 
   * @param request - ModifyActiveOperationTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyActiveOperationTasksResponse
   */
  async modifyActiveOperationTasksWithOptions(request: $_model.ModifyActiveOperationTasksRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyActiveOperationTasksResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ids)) {
      query["Ids"] = request.ids;
    }

    if (!$dara.isNull(request.immediateStart)) {
      query["ImmediateStart"] = request.immediateStart;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.switchTime)) {
      query["SwitchTime"] = request.switchTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyActiveOperationTasks",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyActiveOperationTasksResponse>(await this.callApi(params, req, runtime), new $_model.ModifyActiveOperationTasksResponse({}));
  }

  /**
   * Changes the switching time of scheduled O\\\\\\&M tasks for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Scheduled events for ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/104183.html)
   * *   [Scheduled events for ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/104452.html)
   * *   [Scheduled events for ApsaraDB RDS for SQL Server instances](https://help.aliyun.com/document_detail/104451.html)
   * *   [Scheduled events for ApsaraDB RDS for MariaDB instances](https://help.aliyun.com/document_detail/104454.html)
   * 
   * @param request - ModifyActiveOperationTasksRequest
   * @returns ModifyActiveOperationTasksResponse
   */
  async modifyActiveOperationTasks(request: $_model.ModifyActiveOperationTasksRequest): Promise<$_model.ModifyActiveOperationTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyActiveOperationTasksWithOptions(request, runtime);
  }

  /**
   * Modifies the backup policy settings of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Configure an automatic backup policy for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/98818.html)
   * *   [Configure an automatic backup policy for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96772.html)
   * *   [Configure an automatic backup policy for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95717.html)
   * *   [Configure an automatic backup policy for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97147.html)
   * 
   * @param request - ModifyBackupPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyBackupPolicyResponse
   */
  async modifyBackupPolicyWithOptions(request: $_model.ModifyBackupPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyBackupPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.archiveBackupKeepCount)) {
      query["ArchiveBackupKeepCount"] = request.archiveBackupKeepCount;
    }

    if (!$dara.isNull(request.archiveBackupKeepPolicy)) {
      query["ArchiveBackupKeepPolicy"] = request.archiveBackupKeepPolicy;
    }

    if (!$dara.isNull(request.archiveBackupRetentionPeriod)) {
      query["ArchiveBackupRetentionPeriod"] = request.archiveBackupRetentionPeriod;
    }

    if (!$dara.isNull(request.backupInterval)) {
      query["BackupInterval"] = request.backupInterval;
    }

    if (!$dara.isNull(request.backupLog)) {
      query["BackupLog"] = request.backupLog;
    }

    if (!$dara.isNull(request.backupMethod)) {
      query["BackupMethod"] = request.backupMethod;
    }

    if (!$dara.isNull(request.backupPolicyMode)) {
      query["BackupPolicyMode"] = request.backupPolicyMode;
    }

    if (!$dara.isNull(request.backupPriority)) {
      query["BackupPriority"] = request.backupPriority;
    }

    if (!$dara.isNull(request.backupRetentionPeriod)) {
      query["BackupRetentionPeriod"] = request.backupRetentionPeriod;
    }

    if (!$dara.isNull(request.category)) {
      query["Category"] = request.category;
    }

    if (!$dara.isNull(request.compressType)) {
      query["CompressType"] = request.compressType;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.enableBackupLog)) {
      query["EnableBackupLog"] = request.enableBackupLog;
    }

    if (!$dara.isNull(request.enableIncrementDataBackup)) {
      query["EnableIncrementDataBackup"] = request.enableIncrementDataBackup;
    }

    if (!$dara.isNull(request.highSpaceUsageProtection)) {
      query["HighSpaceUsageProtection"] = request.highSpaceUsageProtection;
    }

    if (!$dara.isNull(request.localLogRetentionHours)) {
      query["LocalLogRetentionHours"] = request.localLogRetentionHours;
    }

    if (!$dara.isNull(request.localLogRetentionSpace)) {
      query["LocalLogRetentionSpace"] = request.localLogRetentionSpace;
    }

    if (!$dara.isNull(request.logBackupFrequency)) {
      query["LogBackupFrequency"] = request.logBackupFrequency;
    }

    if (!$dara.isNull(request.logBackupLocalRetentionNumber)) {
      query["LogBackupLocalRetentionNumber"] = request.logBackupLocalRetentionNumber;
    }

    if (!$dara.isNull(request.logBackupRetentionPeriod)) {
      query["LogBackupRetentionPeriod"] = request.logBackupRetentionPeriod;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.preferredBackupPeriod)) {
      query["PreferredBackupPeriod"] = request.preferredBackupPeriod;
    }

    if (!$dara.isNull(request.preferredBackupTime)) {
      query["PreferredBackupTime"] = request.preferredBackupTime;
    }

    if (!$dara.isNull(request.releasedKeepPolicy)) {
      query["ReleasedKeepPolicy"] = request.releasedKeepPolicy;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyBackupPolicy",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyBackupPolicyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyBackupPolicyResponse({}));
  }

  /**
   * Modifies the backup policy settings of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Configure an automatic backup policy for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/98818.html)
   * *   [Configure an automatic backup policy for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96772.html)
   * *   [Configure an automatic backup policy for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95717.html)
   * *   [Configure an automatic backup policy for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97147.html)
   * 
   * @param request - ModifyBackupPolicyRequest
   * @returns ModifyBackupPolicyResponse
   */
  async modifyBackupPolicy(request: $_model.ModifyBackupPolicyRequest): Promise<$_model.ModifyBackupPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyBackupPolicyWithOptions(request, runtime);
  }

  /**
   * Modifies the character set collation and time zone of system databases on an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS SQL Server
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Change the character set collation and the time zone of system databases](https://help.aliyun.com/document_detail/95700.html)
   * 
   * @param request - ModifyCollationTimeZoneRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCollationTimeZoneResponse
   */
  async modifyCollationTimeZoneWithOptions(request: $_model.ModifyCollationTimeZoneRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyCollationTimeZoneResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.collation)) {
      query["Collation"] = request.collation;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.timezone)) {
      query["Timezone"] = request.timezone;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCollationTimeZone",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyCollationTimeZoneResponse>(await this.callApi(params, req, runtime), new $_model.ModifyCollationTimeZoneResponse({}));
  }

  /**
   * Modifies the character set collation and time zone of system databases on an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS SQL Server
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Change the character set collation and the time zone of system databases](https://help.aliyun.com/document_detail/95700.html)
   * 
   * @param request - ModifyCollationTimeZoneRequest
   * @returns ModifyCollationTimeZoneResponse
   */
  async modifyCollationTimeZone(request: $_model.ModifyCollationTimeZoneRequest): Promise<$_model.ModifyCollationTimeZoneResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCollationTimeZoneWithOptions(request, runtime);
  }

  /**
   * 修改实例资源
   * 
   * @param request - ModifyCustinsResourceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyCustinsResourceResponse
   */
  async modifyCustinsResourceWithOptions(request: $_model.ModifyCustinsResourceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyCustinsResourceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.adjustDeadline)) {
      query["AdjustDeadline"] = request.adjustDeadline;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.increaseRatio)) {
      query["IncreaseRatio"] = request.increaseRatio;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.restoreOriginalSpecification)) {
      query["RestoreOriginalSpecification"] = request.restoreOriginalSpecification;
    }

    if (!$dara.isNull(request.targetValue)) {
      query["TargetValue"] = request.targetValue;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyCustinsResource",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyCustinsResourceResponse>(await this.callApi(params, req, runtime), new $_model.ModifyCustinsResourceResponse({}));
  }

  /**
   * 修改实例资源
   * 
   * @param request - ModifyCustinsResourceRequest
   * @returns ModifyCustinsResourceResponse
   */
  async modifyCustinsResource(request: $_model.ModifyCustinsResourceRequest): Promise<$_model.ModifyCustinsResourceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyCustinsResourceWithOptions(request, runtime);
  }

  /**
   * Modifies the description of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - ModifyDBDescriptionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBDescriptionResponse
   */
  async modifyDBDescriptionWithOptions(request: $_model.ModifyDBDescriptionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBDescriptionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBDescription)) {
      query["DBDescription"] = request.DBDescription;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBDescription",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBDescriptionResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBDescriptionResponse({}));
  }

  /**
   * Modifies the description of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * 
   * @param request - ModifyDBDescriptionRequest
   * @returns ModifyDBDescriptionResponse
   */
  async modifyDBDescription(request: $_model.ModifyDBDescriptionRequest): Promise<$_model.ModifyDBDescriptionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBDescriptionWithOptions(request, runtime);
  }

  /**
   * Changes the method that is used to update the minor engine version of an ApsaraDB RDS for MySQL instance or an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Modify automatic update settings for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96059.html)
   * *   [Modify automatic update settings for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html)
   * 
   * @param request - ModifyDBInstanceAutoUpgradeMinorVersionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceAutoUpgradeMinorVersionResponse
   */
  async modifyDBInstanceAutoUpgradeMinorVersionWithOptions(request: $_model.ModifyDBInstanceAutoUpgradeMinorVersionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceAutoUpgradeMinorVersionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoUpgradeMinorVersion)) {
      query["AutoUpgradeMinorVersion"] = request.autoUpgradeMinorVersion;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceAutoUpgradeMinorVersion",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceAutoUpgradeMinorVersionResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceAutoUpgradeMinorVersionResponse({}));
  }

  /**
   * Changes the method that is used to update the minor engine version of an ApsaraDB RDS for MySQL instance or an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Modify automatic update settings for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96059.html)
   * *   [Modify automatic update settings for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html)
   * 
   * @param request - ModifyDBInstanceAutoUpgradeMinorVersionRequest
   * @returns ModifyDBInstanceAutoUpgradeMinorVersionResponse
   */
  async modifyDBInstanceAutoUpgradeMinorVersion(request: $_model.ModifyDBInstanceAutoUpgradeMinorVersionRequest): Promise<$_model.ModifyDBInstanceAutoUpgradeMinorVersionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceAutoUpgradeMinorVersionWithOptions(request, runtime);
  }

  /**
   * Modifies the configuration item of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * *   SQL Server
   * >  The configuration items that are supported are pgbouncer and clear_errorlog. For more information, see [PgBouncer of ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/2398301.html) and [Error log cleanup of ApsaraDB RDS for SQL Server instances](https://help.aliyun.com/document_detail/95645.html).
   * 
   * @param request - ModifyDBInstanceConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceConfigResponse
   */
  async modifyDBInstanceConfigWithOptions(request: $_model.ModifyDBInstanceConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.configName)) {
      query["ConfigName"] = request.configName;
    }

    if (!$dara.isNull(request.configValue)) {
      query["ConfigValue"] = request.configValue;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.switchTime)) {
      query["SwitchTime"] = request.switchTime;
    }

    if (!$dara.isNull(request.switchTimeMode)) {
      query["SwitchTimeMode"] = request.switchTimeMode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceConfig",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceConfigResponse({}));
  }

  /**
   * Modifies the configuration item of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * *   SQL Server
   * >  The configuration items that are supported are pgbouncer and clear_errorlog. For more information, see [PgBouncer of ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/2398301.html) and [Error log cleanup of ApsaraDB RDS for SQL Server instances](https://help.aliyun.com/document_detail/95645.html).
   * 
   * @param request - ModifyDBInstanceConfigRequest
   * @returns ModifyDBInstanceConfigResponse
   */
  async modifyDBInstanceConfig(request: $_model.ModifyDBInstanceConfigRequest): Promise<$_model.ModifyDBInstanceConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the endpoint and port of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation:
   * *   [Change the endpoint and port number of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96163.html)
   * *   [Change the endpoint and port number of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96788.html)
   * *   [Change the endpoint and port number of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95740.html)
   * *   [Change the endpoint and port number of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97157.html)
   * 
   * @param request - ModifyDBInstanceConnectionStringRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceConnectionStringResponse
   */
  async modifyDBInstanceConnectionStringWithOptions(request: $_model.ModifyDBInstanceConnectionStringRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceConnectionStringResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.babelfishPort)) {
      query["BabelfishPort"] = request.babelfishPort;
    }

    if (!$dara.isNull(request.connectionStringPrefix)) {
      query["ConnectionStringPrefix"] = request.connectionStringPrefix;
    }

    if (!$dara.isNull(request.currentConnectionString)) {
      query["CurrentConnectionString"] = request.currentConnectionString;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.generalGroupName)) {
      query["GeneralGroupName"] = request.generalGroupName;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.PGBouncerPort)) {
      query["PGBouncerPort"] = request.PGBouncerPort;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceConnectionString",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceConnectionStringResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceConnectionStringResponse({}));
  }

  /**
   * Modifies the endpoint and port of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation:
   * *   [Change the endpoint and port number of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96163.html)
   * *   [Change the endpoint and port number of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96788.html)
   * *   [Change the endpoint and port number of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95740.html)
   * *   [Change the endpoint and port number of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97157.html)
   * 
   * @param request - ModifyDBInstanceConnectionStringRequest
   * @returns ModifyDBInstanceConnectionStringResponse
   */
  async modifyDBInstanceConnectionString(request: $_model.ModifyDBInstanceConnectionStringRequest): Promise<$_model.ModifyDBInstanceConnectionStringResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceConnectionStringWithOptions(request, runtime);
  }

  /**
   * Configures the replication latency for a read-only ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure a data replication latency for a read-only ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96056.html)
   * 
   * @param request - ModifyDBInstanceDelayedReplicationTimeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceDelayedReplicationTimeResponse
   */
  async modifyDBInstanceDelayedReplicationTimeWithOptions(request: $_model.ModifyDBInstanceDelayedReplicationTimeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceDelayedReplicationTimeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.readSQLReplicationTime)) {
      query["ReadSQLReplicationTime"] = request.readSQLReplicationTime;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceDelayedReplicationTime",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceDelayedReplicationTimeResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceDelayedReplicationTimeResponse({}));
  }

  /**
   * Configures the replication latency for a read-only ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure a data replication latency for a read-only ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96056.html)
   * 
   * @param request - ModifyDBInstanceDelayedReplicationTimeRequest
   * @returns ModifyDBInstanceDelayedReplicationTimeResponse
   */
  async modifyDBInstanceDelayedReplicationTime(request: $_model.ModifyDBInstanceDelayedReplicationTimeRequest): Promise<$_model.ModifyDBInstanceDelayedReplicationTimeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceDelayedReplicationTimeWithOptions(request, runtime);
  }

  /**
   * Enable or disable the release protection feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Enable and disable instance release protection for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/414512.html)
   * *   [Enable and disable instance release protection for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/471512.html)
   * *   [Enable and disable instance release protection for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/416209.html)
   * *   [Enable and disable release protection for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/414512.html)
   * 
   * @param request - ModifyDBInstanceDeletionProtectionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceDeletionProtectionResponse
   */
  async modifyDBInstanceDeletionProtectionWithOptions(request: $_model.ModifyDBInstanceDeletionProtectionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceDeletionProtectionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.deletionProtection)) {
      query["DeletionProtection"] = request.deletionProtection;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceDeletionProtection",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceDeletionProtectionResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceDeletionProtectionResponse({}));
  }

  /**
   * Enable or disable the release protection feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Enable and disable instance release protection for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/414512.html)
   * *   [Enable and disable instance release protection for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/471512.html)
   * *   [Enable and disable instance release protection for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/416209.html)
   * *   [Enable and disable release protection for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/414512.html)
   * 
   * @param request - ModifyDBInstanceDeletionProtectionRequest
   * @returns ModifyDBInstanceDeletionProtectionResponse
   */
  async modifyDBInstanceDeletionProtection(request: $_model.ModifyDBInstanceDeletionProtectionRequest): Promise<$_model.ModifyDBInstanceDeletionProtectionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceDeletionProtectionWithOptions(request, runtime);
  }

  /**
   * You can call the ModifyDBInstanceDescription operation to modify the name of an instance.
   * 
   * @param request - ModifyDBInstanceDescriptionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceDescriptionResponse
   */
  async modifyDBInstanceDescriptionWithOptions(request: $_model.ModifyDBInstanceDescriptionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceDescriptionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceDescription)) {
      query["DBInstanceDescription"] = request.DBInstanceDescription;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceDescription",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceDescriptionResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceDescriptionResponse({}));
  }

  /**
   * You can call the ModifyDBInstanceDescription operation to modify the name of an instance.
   * 
   * @param request - ModifyDBInstanceDescriptionRequest
   * @returns ModifyDBInstanceDescriptionResponse
   */
  async modifyDBInstanceDescription(request: $_model.ModifyDBInstanceDescriptionRequest): Promise<$_model.ModifyDBInstanceDescriptionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceDescriptionWithOptions(request, runtime);
  }

  /**
   * Modifies the weight of an endpoint for an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * MySQL
   * 
   * @param tmpReq - ModifyDBInstanceEndpointRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceEndpointResponse
   */
  async modifyDBInstanceEndpointWithOptions(tmpReq: $_model.ModifyDBInstanceEndpointRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceEndpointResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyDBInstanceEndpointShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.nodeItems)) {
      request.nodeItemsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodeItems, "NodeItems", "json");
    }

    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceEndpointDescription)) {
      query["DBInstanceEndpointDescription"] = request.DBInstanceEndpointDescription;
    }

    if (!$dara.isNull(request.DBInstanceEndpointId)) {
      query["DBInstanceEndpointId"] = request.DBInstanceEndpointId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.nodeItemsShrink)) {
      query["NodeItems"] = request.nodeItemsShrink;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceEndpoint",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceEndpointResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceEndpointResponse({}));
  }

  /**
   * Modifies the weight of an endpoint for an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * MySQL
   * 
   * @param request - ModifyDBInstanceEndpointRequest
   * @returns ModifyDBInstanceEndpointResponse
   */
  async modifyDBInstanceEndpoint(request: $_model.ModifyDBInstanceEndpointRequest): Promise<$_model.ModifyDBInstanceEndpointResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceEndpointWithOptions(request, runtime);
  }

  /**
   * Modifies the information about the endpoint of an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)Precautions
   * *   You can modify the following information about the endpoint of an instance: the public and internal endpoints, the public and internal ports, and the virtual private cloud (VPC), vSwitch, and IP address of the internal endpoint.
   * *   The VPC and vSwitch must be modified at the same time. If you specify the VPC, vSwitch, and IP address of the internal endpoint, you do not need to specify the endpoint and port. If you specify the endpoint and port, you do not need to specify the VPC, vSwitch, and IP address of the internal endpoint.
   * 
   * @param request - ModifyDBInstanceEndpointAddressRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceEndpointAddressResponse
   */
  async modifyDBInstanceEndpointAddressWithOptions(request: $_model.ModifyDBInstanceEndpointAddressRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceEndpointAddressResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.connectionString)) {
      query["ConnectionString"] = request.connectionString;
    }

    if (!$dara.isNull(request.connectionStringPrefix)) {
      query["ConnectionStringPrefix"] = request.connectionStringPrefix;
    }

    if (!$dara.isNull(request.DBInstanceEndpointId)) {
      query["DBInstanceEndpointId"] = request.DBInstanceEndpointId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.privateIpAddress)) {
      query["PrivateIpAddress"] = request.privateIpAddress;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceEndpointAddress",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceEndpointAddressResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceEndpointAddressResponse({}));
  }

  /**
   * Modifies the information about the endpoint of an instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)Precautions
   * *   You can modify the following information about the endpoint of an instance: the public and internal endpoints, the public and internal ports, and the virtual private cloud (VPC), vSwitch, and IP address of the internal endpoint.
   * *   The VPC and vSwitch must be modified at the same time. If you specify the VPC, vSwitch, and IP address of the internal endpoint, you do not need to specify the endpoint and port. If you specify the endpoint and port, you do not need to specify the VPC, vSwitch, and IP address of the internal endpoint.
   * 
   * @param request - ModifyDBInstanceEndpointAddressRequest
   * @returns ModifyDBInstanceEndpointAddressResponse
   */
  async modifyDBInstanceEndpointAddress(request: $_model.ModifyDBInstanceEndpointAddressRequest): Promise<$_model.ModifyDBInstanceEndpointAddressResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceEndpointAddressWithOptions(request, runtime);
  }

  /**
   * Changes the high availability (HA) and data replication mode of an instance.
   * 
   * @param request - ModifyDBInstanceHAConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceHAConfigResponse
   */
  async modifyDBInstanceHAConfigWithOptions(request: $_model.ModifyDBInstanceHAConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceHAConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dbInstanceId)) {
      query["DbInstanceId"] = request.dbInstanceId;
    }

    if (!$dara.isNull(request.HAMode)) {
      query["HAMode"] = request.HAMode;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.syncMode)) {
      query["SyncMode"] = request.syncMode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceHAConfig",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceHAConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceHAConfigResponse({}));
  }

  /**
   * Changes the high availability (HA) and data replication mode of an instance.
   * 
   * @param request - ModifyDBInstanceHAConfigRequest
   * @returns ModifyDBInstanceHAConfigResponse
   */
  async modifyDBInstanceHAConfig(request: $_model.ModifyDBInstanceHAConfigRequest): Promise<$_model.ModifyDBInstanceHAConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceHAConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the maintenance window of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Set a maintenance window for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96052.html)
   * *   [Set a maintenance window for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96799.html)
   * *   [Set a maintenance window for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95657.html)
   * *   [Set a maintenance window for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97473.html)
   * 
   * @param request - ModifyDBInstanceMaintainTimeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceMaintainTimeResponse
   */
  async modifyDBInstanceMaintainTimeWithOptions(request: $_model.ModifyDBInstanceMaintainTimeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceMaintainTimeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.maintainTime)) {
      query["MaintainTime"] = request.maintainTime;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceMaintainTime",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceMaintainTimeResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceMaintainTimeResponse({}));
  }

  /**
   * Modifies the maintenance window of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Set a maintenance window for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96052.html)
   * *   [Set a maintenance window for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96799.html)
   * *   [Set a maintenance window for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95657.html)
   * *   [Set a maintenance window for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97473.html)
   * 
   * @param request - ModifyDBInstanceMaintainTimeRequest
   * @returns ModifyDBInstanceMaintainTimeResponse
   */
  async modifyDBInstanceMaintainTime(request: $_model.ModifyDBInstanceMaintainTimeRequest): Promise<$_model.ModifyDBInstanceMaintainTimeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceMaintainTimeWithOptions(request, runtime);
  }

  /**
   * Modifies the Enhanced Monitoring metrics that are displayed for an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [View the Enhanced Monitoring metrics](https://help.aliyun.com/document_detail/299200.html)
   * 
   * @param request - ModifyDBInstanceMetricsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceMetricsResponse
   */
  async modifyDBInstanceMetricsWithOptions(request: $_model.ModifyDBInstanceMetricsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceMetricsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.metricsConfig)) {
      query["MetricsConfig"] = request.metricsConfig;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.scope)) {
      query["Scope"] = request.scope;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceMetrics",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceMetricsResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceMetricsResponse({}));
  }

  /**
   * Modifies the Enhanced Monitoring metrics that are displayed for an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [View the Enhanced Monitoring metrics](https://help.aliyun.com/document_detail/299200.html)
   * 
   * @param request - ModifyDBInstanceMetricsRequest
   * @returns ModifyDBInstanceMetricsResponse
   */
  async modifyDBInstanceMetrics(request: $_model.ModifyDBInstanceMetricsRequest): Promise<$_model.ModifyDBInstanceMetricsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceMetricsWithOptions(request, runtime);
  }

  /**
   * Modifies a monitoring frequency.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)Usage notes
   * If you use the Every 5 Seconds monitoring frequency, you are charged additional fees. Before you call this operation, make sure that you understand the [billing methods and pricing](https://help.aliyun.com/document_detail/45020.html) of ApsaraDB RDS.
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure the monitoring frequency for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96112.html)
   * *   [Configure the monitoring frequency for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95710.html)
   * 
   * @param request - ModifyDBInstanceMonitorRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceMonitorResponse
   */
  async modifyDBInstanceMonitorWithOptions(request: $_model.ModifyDBInstanceMonitorRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceMonitorResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceMonitor",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceMonitorResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceMonitorResponse({}));
  }

  /**
   * Modifies a monitoring frequency.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)Usage notes
   * If you use the Every 5 Seconds monitoring frequency, you are charged additional fees. Before you call this operation, make sure that you understand the [billing methods and pricing](https://help.aliyun.com/document_detail/45020.html) of ApsaraDB RDS.
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure the monitoring frequency for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96112.html)
   * *   [Configure the monitoring frequency for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95710.html)
   * 
   * @param request - ModifyDBInstanceMonitorRequest
   * @returns ModifyDBInstanceMonitorResponse
   */
  async modifyDBInstanceMonitor(request: $_model.ModifyDBInstanceMonitorRequest): Promise<$_model.ModifyDBInstanceMonitorResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceMonitorWithOptions(request, runtime);
  }

  /**
   * Changes the expiration time of the classic network endpoint of an instance in hybrid access mode.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)References
   * *   [Configure the hybrid access solution for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96110.html)
   * *   [Configure the hybrid access solution for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95708.html)
   * 
   * @param request - ModifyDBInstanceNetworkExpireTimeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceNetworkExpireTimeResponse
   */
  async modifyDBInstanceNetworkExpireTimeWithOptions(request: $_model.ModifyDBInstanceNetworkExpireTimeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceNetworkExpireTimeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.classicExpiredDays)) {
      query["ClassicExpiredDays"] = request.classicExpiredDays;
    }

    if (!$dara.isNull(request.connectionString)) {
      query["ConnectionString"] = request.connectionString;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceNetworkExpireTime",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceNetworkExpireTimeResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceNetworkExpireTimeResponse({}));
  }

  /**
   * Changes the expiration time of the classic network endpoint of an instance in hybrid access mode.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)References
   * *   [Configure the hybrid access solution for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96110.html)
   * *   [Configure the hybrid access solution for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95708.html)
   * 
   * @param request - ModifyDBInstanceNetworkExpireTimeRequest
   * @returns ModifyDBInstanceNetworkExpireTimeResponse
   */
  async modifyDBInstanceNetworkExpireTime(request: $_model.ModifyDBInstanceNetworkExpireTimeRequest): Promise<$_model.ModifyDBInstanceNetworkExpireTimeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceNetworkExpireTimeWithOptions(request, runtime);
  }

  /**
   * Changes the network type of an ApsaraDB RDS instance from classic network to VPC
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Change the network type of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96109.html)
   * *   [Change the network type of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96761.html)
   * *   [Change the network type of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95707.html)
   * 
   * @param request - ModifyDBInstanceNetworkTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceNetworkTypeResponse
   */
  async modifyDBInstanceNetworkTypeWithOptions(request: $_model.ModifyDBInstanceNetworkTypeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceNetworkTypeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.classicExpiredDays)) {
      query["ClassicExpiredDays"] = request.classicExpiredDays;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.instanceNetworkType)) {
      query["InstanceNetworkType"] = request.instanceNetworkType;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.privateIpAddress)) {
      query["PrivateIpAddress"] = request.privateIpAddress;
    }

    if (!$dara.isNull(request.readWriteSplittingClassicExpiredDays)) {
      query["ReadWriteSplittingClassicExpiredDays"] = request.readWriteSplittingClassicExpiredDays;
    }

    if (!$dara.isNull(request.readWriteSplittingPrivateIpAddress)) {
      query["ReadWriteSplittingPrivateIpAddress"] = request.readWriteSplittingPrivateIpAddress;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.retainClassic)) {
      query["RetainClassic"] = request.retainClassic;
    }

    if (!$dara.isNull(request.VPCId)) {
      query["VPCId"] = request.VPCId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceNetworkType",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceNetworkTypeResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceNetworkTypeResponse({}));
  }

  /**
   * Changes the network type of an ApsaraDB RDS instance from classic network to VPC
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Change the network type of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96109.html)
   * *   [Change the network type of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96761.html)
   * *   [Change the network type of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95707.html)
   * 
   * @param request - ModifyDBInstanceNetworkTypeRequest
   * @returns ModifyDBInstanceNetworkTypeResponse
   */
  async modifyDBInstanceNetworkType(request: $_model.ModifyDBInstanceNetworkTypeRequest): Promise<$_model.ModifyDBInstanceNetworkTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceNetworkTypeWithOptions(request, runtime);
  }

  /**
   * Changes the billing method of an instance from pay-as-you-go to subscription.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * >  Fees of an instance are changed if the call is successful. Before you call this operation, carefully read the following topics:
   * *   [Change the billing method of an ApsaraDB RDS for MySQL instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/96048.html)
   * *   [Change the billing method of an ApsaraDB RDS for PostgreSQL instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/96743.html)
   * *   [Change the billing method of an ApsaraDB RDS for SQL Server instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/95631.html)
   * *   [Change the billing method of an ApsaraDB RDS for MariaDB instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/97120.html)
   * 
   * @param request - ModifyDBInstancePayTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstancePayTypeResponse
   */
  async modifyDBInstancePayTypeWithOptions(request: $_model.ModifyDBInstancePayTypeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstancePayTypeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstancePayType",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstancePayTypeResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstancePayTypeResponse({}));
  }

  /**
   * Changes the billing method of an instance from pay-as-you-go to subscription.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * >  Fees of an instance are changed if the call is successful. Before you call this operation, carefully read the following topics:
   * *   [Change the billing method of an ApsaraDB RDS for MySQL instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/96048.html)
   * *   [Change the billing method of an ApsaraDB RDS for PostgreSQL instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/96743.html)
   * *   [Change the billing method of an ApsaraDB RDS for SQL Server instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/95631.html)
   * *   [Change the billing method of an ApsaraDB RDS for MariaDB instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/97120.html)
   * 
   * @param request - ModifyDBInstancePayTypeRequest
   * @returns ModifyDBInstancePayTypeResponse
   */
  async modifyDBInstancePayType(request: $_model.ModifyDBInstancePayTypeRequest): Promise<$_model.ModifyDBInstancePayTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstancePayTypeWithOptions(request, runtime);
  }

  /**
   * Enables or disables the native replication feature of ApsaraDB RDS for MySQL.
   * 
   * @remarks
   * If you want to enable the native replication feature for an ApsaraDB RDS for MySQL instance, the following requirements must be met:
   * *   The RDS instance runs MySQL 5.7.
   * *   The RDS instance runs RDS Basic Edition.
   * *   The RDS instance uses the pay-as-you-go or subscription billing method.
   * *   The RDS instance runs a minor engine version of 20240930 or later.
   * For more information, see [Enable the native replication feature](https://help.aliyun.com/document_detail/2856530.html).
   * 
   * @param request - ModifyDBInstanceReplicationSwitchRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceReplicationSwitchResponse
   */
  async modifyDBInstanceReplicationSwitchWithOptions(request: $_model.ModifyDBInstanceReplicationSwitchRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceReplicationSwitchResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.externalReplication)) {
      query["ExternalReplication"] = request.externalReplication;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceReplicationSwitch",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceReplicationSwitchResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceReplicationSwitchResponse({}));
  }

  /**
   * Enables or disables the native replication feature of ApsaraDB RDS for MySQL.
   * 
   * @remarks
   * If you want to enable the native replication feature for an ApsaraDB RDS for MySQL instance, the following requirements must be met:
   * *   The RDS instance runs MySQL 5.7.
   * *   The RDS instance runs RDS Basic Edition.
   * *   The RDS instance uses the pay-as-you-go or subscription billing method.
   * *   The RDS instance runs a minor engine version of 20240930 or later.
   * For more information, see [Enable the native replication feature](https://help.aliyun.com/document_detail/2856530.html).
   * 
   * @param request - ModifyDBInstanceReplicationSwitchRequest
   * @returns ModifyDBInstanceReplicationSwitchResponse
   */
  async modifyDBInstanceReplicationSwitch(request: $_model.ModifyDBInstanceReplicationSwitchRequest): Promise<$_model.ModifyDBInstanceReplicationSwitchResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceReplicationSwitchWithOptions(request, runtime);
  }

  /**
   * Modifies the SSL encryption settings of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Use the SSL encryption feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96120.html)
   * *   [Use the SSL encryption feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/229517.html)
   * *   [Use the SSL encryption feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95715.html)
   * 
   * @param request - ModifyDBInstanceSSLRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceSSLResponse
   */
  async modifyDBInstanceSSLWithOptions(request: $_model.ModifyDBInstanceSSLRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceSSLResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ACL)) {
      query["ACL"] = request.ACL;
    }

    if (!$dara.isNull(request.CAType)) {
      query["CAType"] = request.CAType;
    }

    if (!$dara.isNull(request.certificate)) {
      query["Certificate"] = request.certificate;
    }

    if (!$dara.isNull(request.clientCACert)) {
      query["ClientCACert"] = request.clientCACert;
    }

    if (!$dara.isNull(request.clientCAEnabled)) {
      query["ClientCAEnabled"] = request.clientCAEnabled;
    }

    if (!$dara.isNull(request.clientCertRevocationList)) {
      query["ClientCertRevocationList"] = request.clientCertRevocationList;
    }

    if (!$dara.isNull(request.clientCrlEnabled)) {
      query["ClientCrlEnabled"] = request.clientCrlEnabled;
    }

    if (!$dara.isNull(request.connectionString)) {
      query["ConnectionString"] = request.connectionString;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.forceEncryption)) {
      query["ForceEncryption"] = request.forceEncryption;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.passWord)) {
      query["PassWord"] = request.passWord;
    }

    if (!$dara.isNull(request.replicationACL)) {
      query["ReplicationACL"] = request.replicationACL;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.SSLEnabled)) {
      query["SSLEnabled"] = request.SSLEnabled;
    }

    if (!$dara.isNull(request.serverCert)) {
      query["ServerCert"] = request.serverCert;
    }

    if (!$dara.isNull(request.serverKey)) {
      query["ServerKey"] = request.serverKey;
    }

    if (!$dara.isNull(request.tlsVersion)) {
      query["TlsVersion"] = request.tlsVersion;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceSSL",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceSSLResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceSSLResponse({}));
  }

  /**
   * Modifies the SSL encryption settings of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Use the SSL encryption feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96120.html)
   * *   [Use the SSL encryption feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/229517.html)
   * *   [Use the SSL encryption feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95715.html)
   * 
   * @param request - ModifyDBInstanceSSLRequest
   * @returns ModifyDBInstanceSSLResponse
   */
  async modifyDBInstanceSSL(request: $_model.ModifyDBInstanceSSLRequest): Promise<$_model.ModifyDBInstanceSSLResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceSSLWithOptions(request, runtime);
  }

  /**
   * Modifies a security group rule that is configured for an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Configure security group settings for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/2392322.html)
   * 
   * @param request - ModifyDBInstanceSecurityGroupRuleRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceSecurityGroupRuleResponse
   */
  async modifyDBInstanceSecurityGroupRuleWithOptions(request: $_model.ModifyDBInstanceSecurityGroupRuleRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceSecurityGroupRuleResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.ipProtocol)) {
      query["IpProtocol"] = request.ipProtocol;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.portRange)) {
      query["PortRange"] = request.portRange;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityGroupRuleId)) {
      query["SecurityGroupRuleId"] = request.securityGroupRuleId;
    }

    if (!$dara.isNull(request.sourceCidrIp)) {
      query["SourceCidrIp"] = request.sourceCidrIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceSecurityGroupRule",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceSecurityGroupRuleResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceSecurityGroupRuleResponse({}));
  }

  /**
   * Modifies a security group rule that is configured for an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Configure security group settings for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/2392322.html)
   * 
   * @param request - ModifyDBInstanceSecurityGroupRuleRequest
   * @returns ModifyDBInstanceSecurityGroupRuleResponse
   */
  async modifyDBInstanceSecurityGroupRule(request: $_model.ModifyDBInstanceSecurityGroupRuleRequest): Promise<$_model.ModifyDBInstanceSecurityGroupRuleResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceSecurityGroupRuleWithOptions(request, runtime);
  }

  /**
   * Changes the instance type and storage capacity of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Billing details
   * [Fees for specification changes](https://help.aliyun.com/document_detail/57178.html) are generated if the call is successful. Before you call this operation, carefully read the following topics.
   * ### [](#)References
   * *   [Change the specifications of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96061.html)
   * *   [Change the specifications of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96750.html)
   * *   [Change the specifications of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95665.html)
   * *   [Change the specifications of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97129.html)
   * 
   * @param tmpReq - ModifyDBInstanceSpecRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceSpecResponse
   */
  async modifyDBInstanceSpecWithOptions(tmpReq: $_model.ModifyDBInstanceSpecRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceSpecResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyDBInstanceSpecShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.serverlessConfiguration)) {
      request.serverlessConfigurationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.serverlessConfiguration, "ServerlessConfiguration", "json");
    }

    let query = { };
    if (!$dara.isNull(request.allowMajorVersionUpgrade)) {
      query["AllowMajorVersionUpgrade"] = request.allowMajorVersionUpgrade;
    }

    if (!$dara.isNull(request.autoUseCoupon)) {
      query["AutoUseCoupon"] = request.autoUseCoupon;
    }

    if (!$dara.isNull(request.burstingEnabled)) {
      query["BurstingEnabled"] = request.burstingEnabled;
    }

    if (!$dara.isNull(request.category)) {
      query["Category"] = request.category;
    }

    if (!$dara.isNull(request.coldDataEnabled)) {
      query["ColdDataEnabled"] = request.coldDataEnabled;
    }

    if (!$dara.isNull(request.compressionMode)) {
      query["CompressionMode"] = request.compressionMode;
    }

    if (!$dara.isNull(request.DBInstanceClass)) {
      query["DBInstanceClass"] = request.DBInstanceClass;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceStorage)) {
      query["DBInstanceStorage"] = request.DBInstanceStorage;
    }

    if (!$dara.isNull(request.DBInstanceStorageType)) {
      query["DBInstanceStorageType"] = request.DBInstanceStorageType;
    }

    if (!$dara.isNull(request.dedicatedHostGroupId)) {
      query["DedicatedHostGroupId"] = request.dedicatedHostGroupId;
    }

    if (!$dara.isNull(request.direction)) {
      query["Direction"] = request.direction;
    }

    if (!$dara.isNull(request.effectiveTime)) {
      query["EffectiveTime"] = request.effectiveTime;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.ioAccelerationEnabled)) {
      query["IoAccelerationEnabled"] = request.ioAccelerationEnabled;
    }

    if (!$dara.isNull(request.optimizedWrites)) {
      query["OptimizedWrites"] = request.optimizedWrites;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.promotionCode)) {
      query["PromotionCode"] = request.promotionCode;
    }

    if (!$dara.isNull(request.readOnlyDBInstanceClass)) {
      query["ReadOnlyDBInstanceClass"] = request.readOnlyDBInstanceClass;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.serverlessConfigurationShrink)) {
      query["ServerlessConfiguration"] = request.serverlessConfigurationShrink;
    }

    if (!$dara.isNull(request.sourceBiz)) {
      query["SourceBiz"] = request.sourceBiz;
    }

    if (!$dara.isNull(request.switchTime)) {
      query["SwitchTime"] = request.switchTime;
    }

    if (!$dara.isNull(request.targetMinorVersion)) {
      query["TargetMinorVersion"] = request.targetMinorVersion;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    if (!$dara.isNull(request.zoneIdSlave1)) {
      query["ZoneIdSlave1"] = request.zoneIdSlave1;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceSpec",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceSpecResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceSpecResponse({}));
  }

  /**
   * Changes the instance type and storage capacity of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Billing details
   * [Fees for specification changes](https://help.aliyun.com/document_detail/57178.html) are generated if the call is successful. Before you call this operation, carefully read the following topics.
   * ### [](#)References
   * *   [Change the specifications of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96061.html)
   * *   [Change the specifications of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96750.html)
   * *   [Change the specifications of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95665.html)
   * *   [Change the specifications of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97129.html)
   * 
   * @param request - ModifyDBInstanceSpecRequest
   * @returns ModifyDBInstanceSpecResponse
   */
  async modifyDBInstanceSpec(request: $_model.ModifyDBInstanceSpecRequest): Promise<$_model.ModifyDBInstanceSpecResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceSpecWithOptions(request, runtime);
  }

  /**
   * Enables the Transparent Data Encryption (TDE) feature for an ApsaraDB RDS instance and modifies the TDE status for the instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Configure TDE for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96121.html)
   * *   [Configure TDE for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/465652.html)
   * *   [Configure TDE for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95716.html)
   * 
   * @param request - ModifyDBInstanceTDERequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBInstanceTDEResponse
   */
  async modifyDBInstanceTDEWithOptions(request: $_model.ModifyDBInstanceTDERequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBInstanceTDEResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.certificate)) {
      query["Certificate"] = request.certificate;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.encryptionKey)) {
      query["EncryptionKey"] = request.encryptionKey;
    }

    if (!$dara.isNull(request.isRotate)) {
      query["IsRotate"] = request.isRotate;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.passWord)) {
      query["PassWord"] = request.passWord;
    }

    if (!$dara.isNull(request.privateKey)) {
      query["PrivateKey"] = request.privateKey;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.roleArn)) {
      query["RoleArn"] = request.roleArn;
    }

    if (!$dara.isNull(request.TDEStatus)) {
      query["TDEStatus"] = request.TDEStatus;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBInstanceTDE",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBInstanceTDEResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBInstanceTDEResponse({}));
  }

  /**
   * Enables the Transparent Data Encryption (TDE) feature for an ApsaraDB RDS instance and modifies the TDE status for the instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Configure TDE for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96121.html)
   * *   [Configure TDE for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/465652.html)
   * *   [Configure TDE for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95716.html)
   * 
   * @param request - ModifyDBInstanceTDERequest
   * @returns ModifyDBInstanceTDEResponse
   */
  async modifyDBInstanceTDE(request: $_model.ModifyDBInstanceTDERequest): Promise<$_model.ModifyDBInstanceTDEResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBInstanceTDEWithOptions(request, runtime);
  }

  /**
   * Changes the specifications, storage type, and storage capacity of an ApsaraDB RDS for MySQL instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   MySQL
   * ### [](#)References
   * [Change instance specifications](https://help.aliyun.com/document_detail/2627998.html)
   * >  Fees of an instance are changed if the call is successful. Before you call this operation, carefully read the related topics.
   * 
   * @param tmpReq - ModifyDBNodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBNodeResponse
   */
  async modifyDBNodeWithOptions(tmpReq: $_model.ModifyDBNodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBNodeResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyDBNodeShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.DBNode)) {
      request.DBNodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBNode, "DBNode", "json");
    }

    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceStorage)) {
      query["DBInstanceStorage"] = request.DBInstanceStorage;
    }

    if (!$dara.isNull(request.DBInstanceStorageType)) {
      query["DBInstanceStorageType"] = request.DBInstanceStorageType;
    }

    if (!$dara.isNull(request.DBNodeShrink)) {
      query["DBNode"] = request.DBNodeShrink;
    }

    if (!$dara.isNull(request.dryRun)) {
      query["DryRun"] = request.dryRun;
    }

    if (!$dara.isNull(request.effectiveTime)) {
      query["EffectiveTime"] = request.effectiveTime;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.produceAsync)) {
      query["ProduceAsync"] = request.produceAsync;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBNode",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBNodeResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBNodeResponse({}));
  }

  /**
   * Changes the specifications, storage type, and storage capacity of an ApsaraDB RDS for MySQL instance that runs RDS Cluster Edition.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   MySQL
   * ### [](#)References
   * [Change instance specifications](https://help.aliyun.com/document_detail/2627998.html)
   * >  Fees of an instance are changed if the call is successful. Before you call this operation, carefully read the related topics.
   * 
   * @param request - ModifyDBNodeRequest
   * @returns ModifyDBNodeResponse
   */
  async modifyDBNode(request: $_model.ModifyDBNodeRequest): Promise<$_model.ModifyDBNodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBNodeWithOptions(request, runtime);
  }

  /**
   * Enables or modifies the database proxy feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * >  Starting October 17, 2023, ApsaraDB RDS for MySQL instances that run RDS Cluster Edition offer one free-of-charge dedicated database proxy for each unit in phases. For more information, see [[Special offers/Price changes\\] One dedicated proxy is provided free of charge for ApsaraDB RDS for MySQL instances on RDS Cluster Edition](~~2555466~~).
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Enable the database proxy feature of ApsaraDB RDS for MySQL](https://help.aliyun.com/document_detail/197456.html)
   * *   [Enable the database proxy feature of ApsaraDB RDS for PostgreSQL](https://help.aliyun.com/document_detail/418272.html)
   * 
   * @param tmpReq - ModifyDBProxyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBProxyResponse
   */
  async modifyDBProxyWithOptions(tmpReq: $_model.ModifyDBProxyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBProxyResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyDBProxyShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.DBProxyNodes)) {
      request.DBProxyNodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBProxyNodes, "DBProxyNodes", "json");
    }

    let query = { };
    if (!$dara.isNull(request.configDBProxyService)) {
      query["ConfigDBProxyService"] = request.configDBProxyService;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBProxyEngineType)) {
      query["DBProxyEngineType"] = request.DBProxyEngineType;
    }

    if (!$dara.isNull(request.DBProxyInstanceNum)) {
      query["DBProxyInstanceNum"] = request.DBProxyInstanceNum;
    }

    if (!$dara.isNull(request.DBProxyInstanceType)) {
      query["DBProxyInstanceType"] = request.DBProxyInstanceType;
    }

    if (!$dara.isNull(request.DBProxyNodesShrink)) {
      query["DBProxyNodes"] = request.DBProxyNodesShrink;
    }

    if (!$dara.isNull(request.instanceNetworkType)) {
      query["InstanceNetworkType"] = request.instanceNetworkType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.persistentConnectionStatus)) {
      query["PersistentConnectionStatus"] = request.persistentConnectionStatus;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.VPCId)) {
      query["VPCId"] = request.VPCId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBProxy",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBProxyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBProxyResponse({}));
  }

  /**
   * Enables or modifies the database proxy feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * >  Starting October 17, 2023, ApsaraDB RDS for MySQL instances that run RDS Cluster Edition offer one free-of-charge dedicated database proxy for each unit in phases. For more information, see [[Special offers/Price changes\\] One dedicated proxy is provided free of charge for ApsaraDB RDS for MySQL instances on RDS Cluster Edition](~~2555466~~).
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Enable the database proxy feature of ApsaraDB RDS for MySQL](https://help.aliyun.com/document_detail/197456.html)
   * *   [Enable the database proxy feature of ApsaraDB RDS for PostgreSQL](https://help.aliyun.com/document_detail/418272.html)
   * 
   * @param request - ModifyDBProxyRequest
   * @returns ModifyDBProxyResponse
   */
  async modifyDBProxy(request: $_model.ModifyDBProxyRequest): Promise<$_model.ModifyDBProxyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBProxyWithOptions(request, runtime);
  }

  /**
   * Modifies the connection settings for a database proxy endpoint.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Configure the connection settings for a database proxy endpoint for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/2621331.html)
   * *   [Configure the connection settings for a database proxy endpoint for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/418273.html)
   * 
   * @param request - ModifyDBProxyEndpointRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBProxyEndpointResponse
   */
  async modifyDBProxyEndpointWithOptions(request: $_model.ModifyDBProxyEndpointRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBProxyEndpointResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.causalConsistReadTimeout)) {
      query["CausalConsistReadTimeout"] = request.causalConsistReadTimeout;
    }

    if (!$dara.isNull(request.configDBProxyFeatures)) {
      query["ConfigDBProxyFeatures"] = request.configDBProxyFeatures;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBProxyEndpointId)) {
      query["DBProxyEndpointId"] = request.DBProxyEndpointId;
    }

    if (!$dara.isNull(request.DBProxyEngineType)) {
      query["DBProxyEngineType"] = request.DBProxyEngineType;
    }

    if (!$dara.isNull(request.dbEndpointAliases)) {
      query["DbEndpointAliases"] = request.dbEndpointAliases;
    }

    if (!$dara.isNull(request.dbEndpointMinSlaveCount)) {
      query["DbEndpointMinSlaveCount"] = request.dbEndpointMinSlaveCount;
    }

    if (!$dara.isNull(request.dbEndpointOperator)) {
      query["DbEndpointOperator"] = request.dbEndpointOperator;
    }

    if (!$dara.isNull(request.dbEndpointReadWriteMode)) {
      query["DbEndpointReadWriteMode"] = request.dbEndpointReadWriteMode;
    }

    if (!$dara.isNull(request.dbEndpointType)) {
      query["DbEndpointType"] = request.dbEndpointType;
    }

    if (!$dara.isNull(request.effectiveSpecificTime)) {
      query["EffectiveSpecificTime"] = request.effectiveSpecificTime;
    }

    if (!$dara.isNull(request.effectiveTime)) {
      query["EffectiveTime"] = request.effectiveTime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.readOnlyInstanceDistributionType)) {
      query["ReadOnlyInstanceDistributionType"] = request.readOnlyInstanceDistributionType;
    }

    if (!$dara.isNull(request.readOnlyInstanceMaxDelayTime)) {
      query["ReadOnlyInstanceMaxDelayTime"] = request.readOnlyInstanceMaxDelayTime;
    }

    if (!$dara.isNull(request.readOnlyInstanceWeight)) {
      query["ReadOnlyInstanceWeight"] = request.readOnlyInstanceWeight;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.vpcId)) {
      query["VpcId"] = request.vpcId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBProxyEndpoint",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBProxyEndpointResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBProxyEndpointResponse({}));
  }

  /**
   * Modifies the connection settings for a database proxy endpoint.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Configure the connection settings for a database proxy endpoint for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/2621331.html)
   * *   [Configure the connection settings for a database proxy endpoint for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/418273.html)
   * 
   * @param request - ModifyDBProxyEndpointRequest
   * @returns ModifyDBProxyEndpointResponse
   */
  async modifyDBProxyEndpoint(request: $_model.ModifyDBProxyEndpointRequest): Promise<$_model.ModifyDBProxyEndpointResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBProxyEndpointWithOptions(request, runtime);
  }

  /**
   * Modifies the database proxy endpoint of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Configure the database proxy endpoint of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/184921.html)
   * *   [Configure the database proxy endpoint of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/418274.html)
   * 
   * @param request - ModifyDBProxyEndpointAddressRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBProxyEndpointAddressResponse
   */
  async modifyDBProxyEndpointAddressWithOptions(request: $_model.ModifyDBProxyEndpointAddressRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBProxyEndpointAddressResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBProxyConnectStringNetType)) {
      query["DBProxyConnectStringNetType"] = request.DBProxyConnectStringNetType;
    }

    if (!$dara.isNull(request.DBProxyEndpointId)) {
      query["DBProxyEndpointId"] = request.DBProxyEndpointId;
    }

    if (!$dara.isNull(request.DBProxyEngineType)) {
      query["DBProxyEngineType"] = request.DBProxyEngineType;
    }

    if (!$dara.isNull(request.DBProxyNewConnectString)) {
      query["DBProxyNewConnectString"] = request.DBProxyNewConnectString;
    }

    if (!$dara.isNull(request.DBProxyNewConnectStringPort)) {
      query["DBProxyNewConnectStringPort"] = request.DBProxyNewConnectStringPort;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBProxyEndpointAddress",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBProxyEndpointAddressResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBProxyEndpointAddressResponse({}));
  }

  /**
   * Modifies the database proxy endpoint of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Configure the database proxy endpoint of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/184921.html)
   * *   [Configure the database proxy endpoint of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/418274.html)
   * 
   * @param request - ModifyDBProxyEndpointAddressRequest
   * @returns ModifyDBProxyEndpointAddressResponse
   */
  async modifyDBProxyEndpointAddress(request: $_model.ModifyDBProxyEndpointAddressRequest): Promise<$_model.ModifyDBProxyEndpointAddressResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBProxyEndpointAddressWithOptions(request, runtime);
  }

  /**
   * Changes the configuration of a database proxy for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * >  Starting October 17, 2023, ApsaraDB RDS for MySQL instances that run RDS Cluster Edition offer one free-of-charge dedicated database proxy for each unit in phases. For more information, see [[Special offers/Price changes\\] One dedicated proxy is provided free of charge for ApsaraDB RDS for MySQL instances on RDS Cluster Edition](~~2555466~~).
   * 
   * @param tmpReq - ModifyDBProxyInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDBProxyInstanceResponse
   */
  async modifyDBProxyInstanceWithOptions(tmpReq: $_model.ModifyDBProxyInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDBProxyInstanceResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyDBProxyInstanceShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.DBProxyNodes)) {
      request.DBProxyNodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBProxyNodes, "DBProxyNodes", "json");
    }

    if (!$dara.isNull(tmpReq.migrateAZ)) {
      request.migrateAZShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.migrateAZ, "MigrateAZ", "json");
    }

    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBProxyEngineType)) {
      query["DBProxyEngineType"] = request.DBProxyEngineType;
    }

    if (!$dara.isNull(request.DBProxyInstanceNum)) {
      query["DBProxyInstanceNum"] = request.DBProxyInstanceNum;
    }

    if (!$dara.isNull(request.DBProxyInstanceType)) {
      query["DBProxyInstanceType"] = request.DBProxyInstanceType;
    }

    if (!$dara.isNull(request.DBProxyNodesShrink)) {
      query["DBProxyNodes"] = request.DBProxyNodesShrink;
    }

    if (!$dara.isNull(request.effectiveSpecificTime)) {
      query["EffectiveSpecificTime"] = request.effectiveSpecificTime;
    }

    if (!$dara.isNull(request.effectiveTime)) {
      query["EffectiveTime"] = request.effectiveTime;
    }

    if (!$dara.isNull(request.migrateAZShrink)) {
      query["MigrateAZ"] = request.migrateAZShrink;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.vSwitchIds)) {
      query["VSwitchIds"] = request.vSwitchIds;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDBProxyInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDBProxyInstanceResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDBProxyInstanceResponse({}));
  }

  /**
   * Changes the configuration of a database proxy for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * >  Starting October 17, 2023, ApsaraDB RDS for MySQL instances that run RDS Cluster Edition offer one free-of-charge dedicated database proxy for each unit in phases. For more information, see [[Special offers/Price changes\\] One dedicated proxy is provided free of charge for ApsaraDB RDS for MySQL instances on RDS Cluster Edition](~~2555466~~).
   * 
   * @param request - ModifyDBProxyInstanceRequest
   * @returns ModifyDBProxyInstanceResponse
   */
  async modifyDBProxyInstance(request: $_model.ModifyDBProxyInstanceRequest): Promise<$_model.ModifyDBProxyInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDBProxyInstanceWithOptions(request, runtime);
  }

  /**
   * Configures a distributed transaction whitelist for an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Configure a distributed transaction whitelist](https://help.aliyun.com/document_detail/124321.html)
   * 
   * @param request - ModifyDTCSecurityIpHostsForSQLServerRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDTCSecurityIpHostsForSQLServerResponse
   */
  async modifyDTCSecurityIpHostsForSQLServerWithOptions(request: $_model.ModifyDTCSecurityIpHostsForSQLServerRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDTCSecurityIpHostsForSQLServerResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityIpHosts)) {
      query["SecurityIpHosts"] = request.securityIpHosts;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.whiteListGroupName)) {
      query["WhiteListGroupName"] = request.whiteListGroupName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDTCSecurityIpHostsForSQLServer",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDTCSecurityIpHostsForSQLServerResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDTCSecurityIpHostsForSQLServerResponse({}));
  }

  /**
   * Configures a distributed transaction whitelist for an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Configure a distributed transaction whitelist](https://help.aliyun.com/document_detail/124321.html)
   * 
   * @param request - ModifyDTCSecurityIpHostsForSQLServerRequest
   * @returns ModifyDTCSecurityIpHostsForSQLServerResponse
   */
  async modifyDTCSecurityIpHostsForSQLServer(request: $_model.ModifyDTCSecurityIpHostsForSQLServerRequest): Promise<$_model.ModifyDTCSecurityIpHostsForSQLServerResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDTCSecurityIpHostsForSQLServerWithOptions(request, runtime);
  }

  /**
   * Configures automatic storage expansion for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure automatic storage expansion for ApsaraDB RDS for MySQL](https://help.aliyun.com/document_detail/173826.html)
   * *   [Configure automatic storage expansion for ApsaraDB RDS for PostgreSQL](https://help.aliyun.com/document_detail/432496.html)
   * 
   * @param request - ModifyDasInstanceConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDasInstanceConfigResponse
   */
  async modifyDasInstanceConfigWithOptions(request: $_model.ModifyDasInstanceConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDasInstanceConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.storageAutoScale)) {
      query["StorageAutoScale"] = request.storageAutoScale;
    }

    if (!$dara.isNull(request.storageThreshold)) {
      query["StorageThreshold"] = request.storageThreshold;
    }

    if (!$dara.isNull(request.storageUpperBound)) {
      query["StorageUpperBound"] = request.storageUpperBound;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDasInstanceConfig",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDasInstanceConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDasInstanceConfigResponse({}));
  }

  /**
   * Configures automatic storage expansion for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure automatic storage expansion for ApsaraDB RDS for MySQL](https://help.aliyun.com/document_detail/173826.html)
   * *   [Configure automatic storage expansion for ApsaraDB RDS for PostgreSQL](https://help.aliyun.com/document_detail/432496.html)
   * 
   * @param request - ModifyDasInstanceConfigRequest
   * @returns ModifyDasInstanceConfigResponse
   */
  async modifyDasInstanceConfig(request: $_model.ModifyDasInstanceConfigRequest): Promise<$_model.ModifyDasInstanceConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDasInstanceConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the property settings of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   SQL Server
   * ### [](#)References
   * You can call this operation to modify the database properties of an ApsaraDB RDS for SQL Server instance and archive data from an instance that uses cloud disks to an Object Storage Service (OSS) bucket. Before you call this operation to archive data to an OSS bucket, you must enable the data archiving feature in the ApsaraDB RDS console. For more information, see [Modify database properties](https://help.aliyun.com/document_detail/2401398.html) and [Archive cloud disk data to an OSS bucket](https://help.aliyun.com/document_detail/2767189.html).
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * 
   * @param request - ModifyDatabaseConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDatabaseConfigResponse
   */
  async modifyDatabaseConfigWithOptions(request: $_model.ModifyDatabaseConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDatabaseConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.databasePropertyName)) {
      query["DatabasePropertyName"] = request.databasePropertyName;
    }

    if (!$dara.isNull(request.databasePropertyValue)) {
      query["DatabasePropertyValue"] = request.databasePropertyValue;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDatabaseConfig",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDatabaseConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDatabaseConfigResponse({}));
  }

  /**
   * Modifies the property settings of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   SQL Server
   * ### [](#)References
   * You can call this operation to modify the database properties of an ApsaraDB RDS for SQL Server instance and archive data from an instance that uses cloud disks to an Object Storage Service (OSS) bucket. Before you call this operation to archive data to an OSS bucket, you must enable the data archiving feature in the ApsaraDB RDS console. For more information, see [Modify database properties](https://help.aliyun.com/document_detail/2401398.html) and [Archive cloud disk data to an OSS bucket](https://help.aliyun.com/document_detail/2767189.html).
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * 
   * @param request - ModifyDatabaseConfigRequest
   * @returns ModifyDatabaseConfigResponse
   */
  async modifyDatabaseConfig(request: $_model.ModifyDatabaseConfigRequest): Promise<$_model.ModifyDatabaseConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDatabaseConfigWithOptions(request, runtime);
  }

  /**
   * Configures SSL encryption for an dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS MySQL
   * ### [](#)References
   * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation:
   * [Configure SSL encryption for a proxy endpoint](https://help.aliyun.com/document_detail/188164.html)
   * 
   * @param request - ModifyDbProxyInstanceSslRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDbProxyInstanceSslResponse
   */
  async modifyDbProxyInstanceSslWithOptions(request: $_model.ModifyDbProxyInstanceSslRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyDbProxyInstanceSslResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBProxyEngineType)) {
      query["DBProxyEngineType"] = request.DBProxyEngineType;
    }

    if (!$dara.isNull(request.dbInstanceId)) {
      query["DbInstanceId"] = request.dbInstanceId;
    }

    if (!$dara.isNull(request.dbInstanceId)) {
      query["DbInstanceId"] = request.dbInstanceId;
    }

    if (!$dara.isNull(request.dbProxyConnectString)) {
      query["DbProxyConnectString"] = request.dbProxyConnectString;
    }

    if (!$dara.isNull(request.dbProxyEndpointId)) {
      query["DbProxyEndpointId"] = request.dbProxyEndpointId;
    }

    if (!$dara.isNull(request.dbProxySslEnabled)) {
      query["DbProxySslEnabled"] = request.dbProxySslEnabled;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDbProxyInstanceSsl",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyDbProxyInstanceSslResponse>(await this.callApi(params, req, runtime), new $_model.ModifyDbProxyInstanceSslResponse({}));
  }

  /**
   * Configures SSL encryption for an dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS MySQL
   * ### [](#)References
   * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation:
   * [Configure SSL encryption for a proxy endpoint](https://help.aliyun.com/document_detail/188164.html)
   * 
   * @param request - ModifyDbProxyInstanceSslRequest
   * @returns ModifyDbProxyInstanceSslResponse
   */
  async modifyDbProxyInstanceSsl(request: $_model.ModifyDbProxyInstanceSslRequest): Promise<$_model.ModifyDbProxyInstanceSslResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDbProxyInstanceSslWithOptions(request, runtime);
  }

  /**
   * Modifies information about the events in the event center.
   * 
   * @param request - ModifyEventInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyEventInfoResponse
   */
  async modifyEventInfoWithOptions(request: $_model.ModifyEventInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyEventInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.actionParams)) {
      query["ActionParams"] = request.actionParams;
    }

    if (!$dara.isNull(request.eventAction)) {
      query["EventAction"] = request.eventAction;
    }

    if (!$dara.isNull(request.eventId)) {
      query["EventId"] = request.eventId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyEventInfo",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyEventInfoResponse>(await this.callApi(params, req, runtime), new $_model.ModifyEventInfoResponse({}));
  }

  /**
   * Modifies information about the events in the event center.
   * 
   * @param request - ModifyEventInfoRequest
   * @returns ModifyEventInfoResponse
   */
  async modifyEventInfo(request: $_model.ModifyEventInfoRequest): Promise<$_model.ModifyEventInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyEventInfoWithOptions(request, runtime);
  }

  /**
   * Change the availability check method of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [What is availability check?](https://help.aliyun.com/document_detail/207467.html)
   * 
   * @param request - ModifyHADiagnoseConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyHADiagnoseConfigResponse
   */
  async modifyHADiagnoseConfigWithOptions(request: $_model.ModifyHADiagnoseConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyHADiagnoseConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.tcpConnectionType)) {
      query["TcpConnectionType"] = request.tcpConnectionType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyHADiagnoseConfig",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyHADiagnoseConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyHADiagnoseConfigResponse({}));
  }

  /**
   * Change the availability check method of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [What is availability check?](https://help.aliyun.com/document_detail/207467.html)
   * 
   * @param request - ModifyHADiagnoseConfigRequest
   * @returns ModifyHADiagnoseConfigResponse
   */
  async modifyHADiagnoseConfig(request: $_model.ModifyHADiagnoseConfigRequest): Promise<$_model.ModifyHADiagnoseConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyHADiagnoseConfigWithOptions(request, runtime);
  }

  /**
   * Enables or disables the automatic primary/secondary switchover feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96054.html)
   * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96747.html)
   * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95659.html)
   * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97127.html)
   * 
   * @param request - ModifyHASwitchConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyHASwitchConfigResponse
   */
  async modifyHASwitchConfigWithOptions(request: $_model.ModifyHASwitchConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyHASwitchConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.HAConfig)) {
      query["HAConfig"] = request.HAConfig;
    }

    if (!$dara.isNull(request.manualHATime)) {
      query["ManualHATime"] = request.manualHATime;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyHASwitchConfig",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyHASwitchConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyHASwitchConfigResponse({}));
  }

  /**
   * Enables or disables the automatic primary/secondary switchover feature for an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96054.html)
   * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96747.html)
   * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95659.html)
   * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97127.html)
   * 
   * @param request - ModifyHASwitchConfigRequest
   * @returns ModifyHASwitchConfigResponse
   */
  async modifyHASwitchConfig(request: $_model.ModifyHASwitchConfigRequest): Promise<$_model.ModifyHASwitchConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyHASwitchConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the auto-renewal settings of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * >Notice: Fees are generated if the call is successful. Before you call this operation, carefully read the following topics:
   * *   [Use the auto-renewal feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96049.html)
   * *   [Use the auto-renewal feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96740.html)
   * *   [Use the auto-renewal feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95635.html)
   * *   [Use the auto-renewal feature for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97121.html)
   * 
   * @param request - ModifyInstanceAutoRenewalAttributeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyInstanceAutoRenewalAttributeResponse
   */
  async modifyInstanceAutoRenewalAttributeWithOptions(request: $_model.ModifyInstanceAutoRenewalAttributeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyInstanceAutoRenewalAttributeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.duration)) {
      query["Duration"] = request.duration;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyInstanceAutoRenewalAttribute",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyInstanceAutoRenewalAttributeResponse>(await this.callApi(params, req, runtime), new $_model.ModifyInstanceAutoRenewalAttributeResponse({}));
  }

  /**
   * Modifies the auto-renewal settings of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * >Notice: Fees are generated if the call is successful. Before you call this operation, carefully read the following topics:
   * *   [Use the auto-renewal feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96049.html)
   * *   [Use the auto-renewal feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96740.html)
   * *   [Use the auto-renewal feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95635.html)
   * *   [Use the auto-renewal feature for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97121.html)
   * 
   * @param request - ModifyInstanceAutoRenewalAttributeRequest
   * @returns ModifyInstanceAutoRenewalAttributeResponse
   */
  async modifyInstanceAutoRenewalAttribute(request: $_model.ModifyInstanceAutoRenewalAttributeRequest): Promise<$_model.ModifyInstanceAutoRenewalAttributeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyInstanceAutoRenewalAttributeWithOptions(request, runtime);
  }

  /**
   * Modifies the cross-region backup settings of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * 
   * @param request - ModifyInstanceCrossBackupPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyInstanceCrossBackupPolicyResponse
   */
  async modifyInstanceCrossBackupPolicyWithOptions(request: $_model.ModifyInstanceCrossBackupPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyInstanceCrossBackupPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupEnabled)) {
      query["BackupEnabled"] = request.backupEnabled;
    }

    if (!$dara.isNull(request.crossBackupRegion)) {
      query["CrossBackupRegion"] = request.crossBackupRegion;
    }

    if (!$dara.isNull(request.crossBackupType)) {
      query["CrossBackupType"] = request.crossBackupType;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.logBackupEnabled)) {
      query["LogBackupEnabled"] = request.logBackupEnabled;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.retentType)) {
      query["RetentType"] = request.retentType;
    }

    if (!$dara.isNull(request.retention)) {
      query["Retention"] = request.retention;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyInstanceCrossBackupPolicy",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyInstanceCrossBackupPolicyResponse>(await this.callApi(params, req, runtime), new $_model.ModifyInstanceCrossBackupPolicyResponse({}));
  }

  /**
   * Modifies the cross-region backup settings of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206671.html)
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/187923.html)
   * 
   * @param request - ModifyInstanceCrossBackupPolicyRequest
   * @returns ModifyInstanceCrossBackupPolicyResponse
   */
  async modifyInstanceCrossBackupPolicy(request: $_model.ModifyInstanceCrossBackupPolicyRequest): Promise<$_model.ModifyInstanceCrossBackupPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyInstanceCrossBackupPolicyWithOptions(request, runtime);
  }

  /**
   * 修改全密态规则
   * 
   * @param tmpReq - ModifyMaskingRulesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyMaskingRulesResponse
   */
  async modifyMaskingRulesWithOptions(tmpReq: $_model.ModifyMaskingRulesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyMaskingRulesResponse> {
    tmpReq.validate();
    let request = new $_model.ModifyMaskingRulesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.ruleConfig)) {
      request.ruleConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ruleConfig, "RuleConfig", "json");
    }

    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.defaultAlgo)) {
      query["DefaultAlgo"] = request.defaultAlgo;
    }

    if (!$dara.isNull(request.enabled)) {
      query["Enabled"] = request.enabled;
    }

    if (!$dara.isNull(request.maskingAlgo)) {
      query["MaskingAlgo"] = request.maskingAlgo;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.ruleConfigShrink)) {
      query["RuleConfig"] = request.ruleConfigShrink;
    }

    if (!$dara.isNull(request.ruleName)) {
      query["RuleName"] = request.ruleName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyMaskingRules",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyMaskingRulesResponse>(await this.callApi(params, req, runtime), new $_model.ModifyMaskingRulesResponse({}));
  }

  /**
   * 修改全密态规则
   * 
   * @param request - ModifyMaskingRulesRequest
   * @returns ModifyMaskingRulesResponse
   */
  async modifyMaskingRules(request: $_model.ModifyMaskingRulesRequest): Promise<$_model.ModifyMaskingRulesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyMaskingRulesWithOptions(request, runtime);
  }

  /**
   * Modifies the pg_hba.conf file of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS PostgreSQL
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Connect an ApsaraDB RDS for PostgreSQL instance to a self-managed AD domain](https://help.aliyun.com/document_detail/349288.html)
   * *   [The pg_hba.conf File](https://www.postgresql.org/docs/11/auth-pg-hba-conf.html)
   * 
   * @param request - ModifyPGHbaConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyPGHbaConfigResponse
   */
  async modifyPGHbaConfigWithOptions(request: $_model.ModifyPGHbaConfigRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyPGHbaConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.hbaItem)) {
      query["HbaItem"] = request.hbaItem;
    }

    if (!$dara.isNull(request.opsType)) {
      query["OpsType"] = request.opsType;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyPGHbaConfig",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyPGHbaConfigResponse>(await this.callApi(params, req, runtime), new $_model.ModifyPGHbaConfigResponse({}));
  }

  /**
   * Modifies the pg_hba.conf file of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * RDS PostgreSQL
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Connect an ApsaraDB RDS for PostgreSQL instance to a self-managed AD domain](https://help.aliyun.com/document_detail/349288.html)
   * *   [The pg_hba.conf File](https://www.postgresql.org/docs/11/auth-pg-hba-conf.html)
   * 
   * @param request - ModifyPGHbaConfigRequest
   * @returns ModifyPGHbaConfigResponse
   */
  async modifyPGHbaConfig(request: $_model.ModifyPGHbaConfigRequest): Promise<$_model.ModifyPGHbaConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyPGHbaConfigWithOptions(request, runtime);
  }

  /**
   * Modifies the parameter values of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Modify the parameters of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96063.html)
   * *   [Modify the parameters of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96751.html)
   * *   [Modify the parameters of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95667.html)
   * *   [Modify the parameters of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97130.html)
   * 
   * @param request - ModifyParameterRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyParameterResponse
   */
  async modifyParameterWithOptions(request: $_model.ModifyParameterRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyParameterResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.forcerestart)) {
      query["Forcerestart"] = request.forcerestart;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.parameterGroupId)) {
      query["ParameterGroupId"] = request.parameterGroupId;
    }

    if (!$dara.isNull(request.parameters)) {
      query["Parameters"] = request.parameters;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.switchTime)) {
      query["SwitchTime"] = request.switchTime;
    }

    if (!$dara.isNull(request.switchTimeMode)) {
      query["SwitchTimeMode"] = request.switchTimeMode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyParameter",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyParameterResponse>(await this.callApi(params, req, runtime), new $_model.ModifyParameterResponse({}));
  }

  /**
   * Modifies the parameter values of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Modify the parameters of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96063.html)
   * *   [Modify the parameters of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96751.html)
   * *   [Modify the parameters of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95667.html)
   * *   [Modify the parameters of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97130.html)
   * 
   * @param request - ModifyParameterRequest
   * @returns ModifyParameterResponse
   */
  async modifyParameter(request: $_model.ModifyParameterRequest): Promise<$_model.ModifyParameterResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyParameterWithOptions(request, runtime);
  }

  /**
   * Modifies the parameter template of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/130565.html)
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/457176.html)
   * 
   * @param request - ModifyParameterGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyParameterGroupResponse
   */
  async modifyParameterGroupWithOptions(request: $_model.ModifyParameterGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyParameterGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.modifyMode)) {
      query["ModifyMode"] = request.modifyMode;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.parameterGroupDesc)) {
      query["ParameterGroupDesc"] = request.parameterGroupDesc;
    }

    if (!$dara.isNull(request.parameterGroupId)) {
      query["ParameterGroupId"] = request.parameterGroupId;
    }

    if (!$dara.isNull(request.parameterGroupName)) {
      query["ParameterGroupName"] = request.parameterGroupName;
    }

    if (!$dara.isNull(request.parameters)) {
      query["Parameters"] = request.parameters;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyParameterGroup",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyParameterGroupResponse>(await this.callApi(params, req, runtime), new $_model.ModifyParameterGroupResponse({}));
  }

  /**
   * Modifies the parameter template of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/130565.html)
   * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/457176.html)
   * 
   * @param request - ModifyParameterGroupRequest
   * @returns ModifyParameterGroupResponse
   */
  async modifyParameterGroup(request: $_model.ModifyParameterGroupRequest): Promise<$_model.ModifyParameterGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyParameterGroupWithOptions(request, runtime);
  }

  /**
   * Modifies the disk type or performance level (PL) of the cloud disks of an RDS Custom instance.
   * 
   * @remarks
   * >  To minimize the impacts on your business, we recommend that you change specifications during off-peak hours.
   * Take note of the following items:
   * *   For a pay-as-you-go Enterprise SSD (ESSD), you can upgrade or downgrade its PL. However, you cannot downgrade the performance level to PL0.
   * *   The ESSD must be in the In Use (In_Use) or Unattached (Available) state.
   * *   If the ESSD is attached to an instance, the instance must be in the Running or Stopped state. The instance cannot be in the Expired state or stopped due to overdue payments.
   * *   The performance level of an ESSD is limited by the capacity of the ESSD. If you cannot upgrade the PL of an ESSD, you can expand the capacity of the ESSD.
   * 
   * @param request - ModifyRCDiskSpecRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyRCDiskSpecResponse
   */
  async modifyRCDiskSpecWithOptions(request: $_model.ModifyRCDiskSpecRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyRCDiskSpecResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.diskCategory)) {
      query["DiskCategory"] = request.diskCategory;
    }

    if (!$dara.isNull(request.diskId)) {
      query["DiskId"] = request.diskId;
    }

    if (!$dara.isNull(request.dryRun)) {
      query["DryRun"] = request.dryRun;
    }

    if (!$dara.isNull(request.performanceLevel)) {
      query["PerformanceLevel"] = request.performanceLevel;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyRCDiskSpec",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyRCDiskSpecResponse>(await this.callApi(params, req, runtime), new $_model.ModifyRCDiskSpecResponse({}));
  }

  /**
   * Modifies the disk type or performance level (PL) of the cloud disks of an RDS Custom instance.
   * 
   * @remarks
   * >  To minimize the impacts on your business, we recommend that you change specifications during off-peak hours.
   * Take note of the following items:
   * *   For a pay-as-you-go Enterprise SSD (ESSD), you can upgrade or downgrade its PL. However, you cannot downgrade the performance level to PL0.
   * *   The ESSD must be in the In Use (In_Use) or Unattached (Available) state.
   * *   If the ESSD is attached to an instance, the instance must be in the Running or Stopped state. The instance cannot be in the Expired state or stopped due to overdue payments.
   * *   The performance level of an ESSD is limited by the capacity of the ESSD. If you cannot upgrade the PL of an ESSD, you can expand the capacity of the ESSD.
   * 
   * @param request - ModifyRCDiskSpecRequest
   * @returns ModifyRCDiskSpecResponse
   */
  async modifyRCDiskSpec(request: $_model.ModifyRCDiskSpecRequest): Promise<$_model.ModifyRCDiskSpecResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyRCDiskSpecWithOptions(request, runtime);
  }

  /**
   * Upgrades or downgrades the instance type of a subscription RDS Custom instance. The new instance type takes effect for the remaining lifecycle of the instance.
   * 
   * @remarks
   * Before you call this operation, make sure that you are familiar with the billing methods, pricing, and refund rules of RDS Custom.
   * Before you call this operation, take note of the following items:
   * *   You cannot change the instance type of an expired instance. You can renew the instance and try again.
   * *   When you downgrade the instance type of an instance, take note of the following items:
   *     *   The instance must be in the Stopped state.
   *     *   The price difference is refunded to the payment account you used. Vouchers that have been redeemed are not refundable.
   * *   The operation is asynchronous. Wait 5 to 10 seconds for the instance type change to complete. Then, restart the instance by calling the RebootInstance operation or by using the console for the instance type change to take effect. If you restart only the operating system of the instance, the instance type change does not take effect. If the instance is in the Stopped state, you need only to start the instance. You do not need to restart the instance after it enters the Running state.
   * 
   * @param request - ModifyRCInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyRCInstanceResponse
   */
  async modifyRCInstanceWithOptions(request: $_model.ModifyRCInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyRCInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.direction)) {
      query["Direction"] = request.direction;
    }

    if (!$dara.isNull(request.dryRun)) {
      query["DryRun"] = request.dryRun;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceType)) {
      query["InstanceType"] = request.instanceType;
    }

    if (!$dara.isNull(request.rebootTime)) {
      query["RebootTime"] = request.rebootTime;
    }

    if (!$dara.isNull(request.rebootWhenFinished)) {
      query["RebootWhenFinished"] = request.rebootWhenFinished;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyRCInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyRCInstanceResponse>(await this.callApi(params, req, runtime), new $_model.ModifyRCInstanceResponse({}));
  }

  /**
   * Upgrades or downgrades the instance type of a subscription RDS Custom instance. The new instance type takes effect for the remaining lifecycle of the instance.
   * 
   * @remarks
   * Before you call this operation, make sure that you are familiar with the billing methods, pricing, and refund rules of RDS Custom.
   * Before you call this operation, take note of the following items:
   * *   You cannot change the instance type of an expired instance. You can renew the instance and try again.
   * *   When you downgrade the instance type of an instance, take note of the following items:
   *     *   The instance must be in the Stopped state.
   *     *   The price difference is refunded to the payment account you used. Vouchers that have been redeemed are not refundable.
   * *   The operation is asynchronous. Wait 5 to 10 seconds for the instance type change to complete. Then, restart the instance by calling the RebootInstance operation or by using the console for the instance type change to take effect. If you restart only the operating system of the instance, the instance type change does not take effect. If the instance is in the Stopped state, you need only to start the instance. You do not need to restart the instance after it enters the Running state.
   * 
   * @param request - ModifyRCInstanceRequest
   * @returns ModifyRCInstanceResponse
   */
  async modifyRCInstance(request: $_model.ModifyRCInstanceRequest): Promise<$_model.ModifyRCInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyRCInstanceWithOptions(request, runtime);
  }

  /**
   * Modifies specific attributes of an RDS Custom instance, such as the password or hostname.
   * 
   * @param request - ModifyRCInstanceAttributeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyRCInstanceAttributeResponse
   */
  async modifyRCInstanceAttributeWithOptions(request: $_model.ModifyRCInstanceAttributeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyRCInstanceAttributeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.hostName)) {
      query["HostName"] = request.hostName;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.password)) {
      query["Password"] = request.password;
    }

    if (!$dara.isNull(request.reboot)) {
      query["Reboot"] = request.reboot;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.securityGroupId)) {
      query["SecurityGroupId"] = request.securityGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyRCInstanceAttribute",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyRCInstanceAttributeResponse>(await this.callApi(params, req, runtime), new $_model.ModifyRCInstanceAttributeResponse({}));
  }

  /**
   * Modifies specific attributes of an RDS Custom instance, such as the password or hostname.
   * 
   * @param request - ModifyRCInstanceAttributeRequest
   * @returns ModifyRCInstanceAttributeResponse
   */
  async modifyRCInstanceAttribute(request: $_model.ModifyRCInstanceAttributeRequest): Promise<$_model.ModifyRCInstanceAttributeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyRCInstanceAttributeWithOptions(request, runtime);
  }

  /**
   * Modifies the billing method of an RDS Custom instance or cloud disks. You can call this operation to change the billing method of instances between pay-as-you-go and subscription.
   * 
   * @param request - ModifyRCInstanceChargeTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyRCInstanceChargeTypeResponse
   */
  async modifyRCInstanceChargeTypeWithOptions(request: $_model.ModifyRCInstanceChargeTypeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyRCInstanceChargeTypeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.autoUseCoupon)) {
      query["AutoUseCoupon"] = request.autoUseCoupon;
    }

    if (!$dara.isNull(request.businessInfo)) {
      query["BusinessInfo"] = request.businessInfo;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.dryRun)) {
      query["DryRun"] = request.dryRun;
    }

    if (!$dara.isNull(request.includeDataDisks)) {
      query["IncludeDataDisks"] = request.includeDataDisks;
    }

    if (!$dara.isNull(request.instanceChargeType)) {
      query["InstanceChargeType"] = request.instanceChargeType;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceIds)) {
      query["InstanceIds"] = request.instanceIds;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.promotionCode)) {
      query["PromotionCode"] = request.promotionCode;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyRCInstanceChargeType",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyRCInstanceChargeTypeResponse>(await this.callApi(params, req, runtime), new $_model.ModifyRCInstanceChargeTypeResponse({}));
  }

  /**
   * Modifies the billing method of an RDS Custom instance or cloud disks. You can call this operation to change the billing method of instances between pay-as-you-go and subscription.
   * 
   * @param request - ModifyRCInstanceChargeTypeRequest
   * @returns ModifyRCInstanceChargeTypeResponse
   */
  async modifyRCInstanceChargeType(request: $_model.ModifyRCInstanceChargeTypeRequest): Promise<$_model.ModifyRCInstanceChargeTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyRCInstanceChargeTypeWithOptions(request, runtime);
  }

  /**
   * Modifies the name of an RDS Custom instance.
   * 
   * @param request - ModifyRCInstanceDescriptionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyRCInstanceDescriptionResponse
   */
  async modifyRCInstanceDescriptionWithOptions(request: $_model.ModifyRCInstanceDescriptionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyRCInstanceDescriptionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceDescription)) {
      query["InstanceDescription"] = request.instanceDescription;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyRCInstanceDescription",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyRCInstanceDescriptionResponse>(await this.callApi(params, req, runtime), new $_model.ModifyRCInstanceDescriptionResponse({}));
  }

  /**
   * Modifies the name of an RDS Custom instance.
   * 
   * @param request - ModifyRCInstanceDescriptionRequest
   * @returns ModifyRCInstanceDescriptionResponse
   */
  async modifyRCInstanceDescription(request: $_model.ModifyRCInstanceDescriptionRequest): Promise<$_model.ModifyRCInstanceDescriptionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyRCInstanceDescriptionWithOptions(request, runtime);
  }

  /**
   * Modifies the key pair of an RDS Custom instance.
   * 
   * @param request - ModifyRCInstanceKeyPairRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyRCInstanceKeyPairResponse
   */
  async modifyRCInstanceKeyPairWithOptions(request: $_model.ModifyRCInstanceKeyPairRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyRCInstanceKeyPairResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.keyPairName)) {
      query["KeyPairName"] = request.keyPairName;
    }

    if (!$dara.isNull(request.reboot)) {
      query["Reboot"] = request.reboot;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyRCInstanceKeyPair",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyRCInstanceKeyPairResponse>(await this.callApi(params, req, runtime), new $_model.ModifyRCInstanceKeyPairResponse({}));
  }

  /**
   * Modifies the key pair of an RDS Custom instance.
   * 
   * @param request - ModifyRCInstanceKeyPairRequest
   * @returns ModifyRCInstanceKeyPairResponse
   */
  async modifyRCInstanceKeyPair(request: $_model.ModifyRCInstanceKeyPairRequest): Promise<$_model.ModifyRCInstanceKeyPairResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyRCInstanceKeyPairWithOptions(request, runtime);
  }

  /**
   * Modifies the public bandwidth of an RDS Custom for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * Custom for SQL Server
   * 
   * @param request - ModifyRCInstanceNetworkSpecRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyRCInstanceNetworkSpecResponse
   */
  async modifyRCInstanceNetworkSpecWithOptions(request: $_model.ModifyRCInstanceNetworkSpecRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyRCInstanceNetworkSpecResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.internetMaxBandwidthOut)) {
      query["InternetMaxBandwidthOut"] = request.internetMaxBandwidthOut;
    }

    if (!$dara.isNull(request.networkChargeType)) {
      query["NetworkChargeType"] = request.networkChargeType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyRCInstanceNetworkSpec",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyRCInstanceNetworkSpecResponse>(await this.callApi(params, req, runtime), new $_model.ModifyRCInstanceNetworkSpecResponse({}));
  }

  /**
   * Modifies the public bandwidth of an RDS Custom for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * Custom for SQL Server
   * 
   * @param request - ModifyRCInstanceNetworkSpecRequest
   * @returns ModifyRCInstanceNetworkSpecResponse
   */
  async modifyRCInstanceNetworkSpec(request: $_model.ModifyRCInstanceNetworkSpecRequest): Promise<$_model.ModifyRCInstanceNetworkSpecResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyRCInstanceNetworkSpecWithOptions(request, runtime);
  }

  /**
   * 修改RC安全组规则
   * 
   * @param request - ModifyRCSecurityGroupPermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyRCSecurityGroupPermissionResponse
   */
  async modifyRCSecurityGroupPermissionWithOptions(request: $_model.ModifyRCSecurityGroupPermissionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyRCSecurityGroupPermissionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.destCidrIp)) {
      query["DestCidrIp"] = request.destCidrIp;
    }

    if (!$dara.isNull(request.direction)) {
      query["Direction"] = request.direction;
    }

    if (!$dara.isNull(request.ipProtocol)) {
      query["IpProtocol"] = request.ipProtocol;
    }

    if (!$dara.isNull(request.policy)) {
      query["Policy"] = request.policy;
    }

    if (!$dara.isNull(request.portRange)) {
      query["PortRange"] = request.portRange;
    }

    if (!$dara.isNull(request.priority)) {
      query["Priority"] = request.priority;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.securityGroupId)) {
      query["SecurityGroupId"] = request.securityGroupId;
    }

    if (!$dara.isNull(request.securityGroupRuleId)) {
      query["SecurityGroupRuleId"] = request.securityGroupRuleId;
    }

    if (!$dara.isNull(request.sourceCidrIp)) {
      query["SourceCidrIp"] = request.sourceCidrIp;
    }

    if (!$dara.isNull(request.sourcePortRange)) {
      query["SourcePortRange"] = request.sourcePortRange;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyRCSecurityGroupPermission",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyRCSecurityGroupPermissionResponse>(await this.callApi(params, req, runtime), new $_model.ModifyRCSecurityGroupPermissionResponse({}));
  }

  /**
   * 修改RC安全组规则
   * 
   * @param request - ModifyRCSecurityGroupPermissionRequest
   * @returns ModifyRCSecurityGroupPermissionResponse
   */
  async modifyRCSecurityGroupPermission(request: $_model.ModifyRCSecurityGroupPermissionRequest): Promise<$_model.ModifyRCSecurityGroupPermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyRCSecurityGroupPermissionWithOptions(request, runtime);
  }

  /**
   * Modifies the latency threshold of the read/write splitting link and the read weights of a primary instance and its read-only instances.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)Prerequisites
   * Before you call this operation, make sure that the following requirements are met:
   * *   The shared proxy feature is enabled for your ApsaraDB RDS for MySQL instance.
   * *   The read/write splitting feature is enabled for your ApsaraDB RDS for MySQL instance.
   * *   The instance must run one of the following database engine versions and RDS editions:
   *     *   MySQL 5.7 on RDS High-availability Edition with local disks
   *     *   MySQL 5.6
   *     *   SQL Server on RDS Cluster Edition
   * 
   * @param request - ModifyReadWriteSplittingConnectionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyReadWriteSplittingConnectionResponse
   */
  async modifyReadWriteSplittingConnectionWithOptions(request: $_model.ModifyReadWriteSplittingConnectionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyReadWriteSplittingConnectionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.connectionStringPrefix)) {
      query["ConnectionStringPrefix"] = request.connectionStringPrefix;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.distributionType)) {
      query["DistributionType"] = request.distributionType;
    }

    if (!$dara.isNull(request.maxDelayTime)) {
      query["MaxDelayTime"] = request.maxDelayTime;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.weight)) {
      query["Weight"] = request.weight;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyReadWriteSplittingConnection",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyReadWriteSplittingConnectionResponse>(await this.callApi(params, req, runtime), new $_model.ModifyReadWriteSplittingConnectionResponse({}));
  }

  /**
   * Modifies the latency threshold of the read/write splitting link and the read weights of a primary instance and its read-only instances.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### [](#)Prerequisites
   * Before you call this operation, make sure that the following requirements are met:
   * *   The shared proxy feature is enabled for your ApsaraDB RDS for MySQL instance.
   * *   The read/write splitting feature is enabled for your ApsaraDB RDS for MySQL instance.
   * *   The instance must run one of the following database engine versions and RDS editions:
   *     *   MySQL 5.7 on RDS High-availability Edition with local disks
   *     *   MySQL 5.6
   *     *   SQL Server on RDS Cluster Edition
   * 
   * @param request - ModifyReadWriteSplittingConnectionRequest
   * @returns ModifyReadWriteSplittingConnectionResponse
   */
  async modifyReadWriteSplittingConnection(request: $_model.ModifyReadWriteSplittingConnectionRequest): Promise<$_model.ModifyReadWriteSplittingConnectionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyReadWriteSplittingConnectionWithOptions(request, runtime);
  }

  /**
   * Modifies the latency at which a read-only ApsaraDB RDS for MySQL instance replicates data from its primary instance.
   * 
   * @remarks
   * ### Supported database engines
   * RDS MySQL
   * ### References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Set the data replication latency of a read-only ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96056.html)
   * 
   * @param request - ModifyReadonlyInstanceDelayReplicationTimeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyReadonlyInstanceDelayReplicationTimeResponse
   */
  async modifyReadonlyInstanceDelayReplicationTimeWithOptions(request: $_model.ModifyReadonlyInstanceDelayReplicationTimeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyReadonlyInstanceDelayReplicationTimeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.readSQLReplicationTime)) {
      query["ReadSQLReplicationTime"] = request.readSQLReplicationTime;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyReadonlyInstanceDelayReplicationTime",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyReadonlyInstanceDelayReplicationTimeResponse>(await this.callApi(params, req, runtime), new $_model.ModifyReadonlyInstanceDelayReplicationTimeResponse({}));
  }

  /**
   * Modifies the latency at which a read-only ApsaraDB RDS for MySQL instance replicates data from its primary instance.
   * 
   * @remarks
   * ### Supported database engines
   * RDS MySQL
   * ### References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Set the data replication latency of a read-only ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96056.html)
   * 
   * @param request - ModifyReadonlyInstanceDelayReplicationTimeRequest
   * @returns ModifyReadonlyInstanceDelayReplicationTimeResponse
   */
  async modifyReadonlyInstanceDelayReplicationTime(request: $_model.ModifyReadonlyInstanceDelayReplicationTimeRequest): Promise<$_model.ModifyReadonlyInstanceDelayReplicationTimeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyReadonlyInstanceDelayReplicationTimeWithOptions(request, runtime);
  }

  /**
   * Moves an ApsaraDB RDS instance to a specified resource group.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Transfer resources across resource groups](https://help.aliyun.com/document_detail/94487.html)
   * 
   * @param request - ModifyResourceGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyResourceGroupResponse
   */
  async modifyResourceGroupWithOptions(request: $_model.ModifyResourceGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyResourceGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyResourceGroup",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyResourceGroupResponse>(await this.callApi(params, req, runtime), new $_model.ModifyResourceGroupResponse({}));
  }

  /**
   * Moves an ApsaraDB RDS instance to a specified resource group.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Transfer resources across resource groups](https://help.aliyun.com/document_detail/94487.html)
   * 
   * @param request - ModifyResourceGroupRequest
   * @returns ModifyResourceGroupResponse
   */
  async modifyResourceGroup(request: $_model.ModifyResourceGroupRequest): Promise<$_model.ModifyResourceGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyResourceGroupWithOptions(request, runtime);
  }

  /**
   * This operation can still be called but is no longer maintained. This operation enables or disables the SQL Explorer (SQL Audit) feature for an instance.
   * 
   * @remarks
   * This operation can still be called but is no longer maintained. We recommend that you call the [ModifySqlLogConfig](https://help.aliyun.com/document_detail/2778835.html) operation instead of this operation.
   * 
   * @param request - ModifySQLCollectorPolicyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifySQLCollectorPolicyResponse
   */
  async modifySQLCollectorPolicyWithOptions(request: $_model.ModifySQLCollectorPolicyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifySQLCollectorPolicyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.SQLCollectorStatus)) {
      query["SQLCollectorStatus"] = request.SQLCollectorStatus;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifySQLCollectorPolicy",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifySQLCollectorPolicyResponse>(await this.callApi(params, req, runtime), new $_model.ModifySQLCollectorPolicyResponse({}));
  }

  /**
   * This operation can still be called but is no longer maintained. This operation enables or disables the SQL Explorer (SQL Audit) feature for an instance.
   * 
   * @remarks
   * This operation can still be called but is no longer maintained. We recommend that you call the [ModifySqlLogConfig](https://help.aliyun.com/document_detail/2778835.html) operation instead of this operation.
   * 
   * @param request - ModifySQLCollectorPolicyRequest
   * @returns ModifySQLCollectorPolicyResponse
   */
  async modifySQLCollectorPolicy(request: $_model.ModifySQLCollectorPolicyRequest): Promise<$_model.ModifySQLCollectorPolicyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifySQLCollectorPolicyWithOptions(request, runtime);
  }

  /**
   * Changes the retention period of the log files that are generated by the SQL Explorer feature for an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * RDS MySQL
   * ### Precautions
   * After you shorten the log backup retention period, log backup files that are stored longer than the specified log backup retention period are immediately deleted.
   * ### References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Use the SQL Explorer and Audit feature](https://help.aliyun.com/document_detail/476574.html)
   * 
   * @param request - ModifySQLCollectorRetentionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifySQLCollectorRetentionResponse
   */
  async modifySQLCollectorRetentionWithOptions(request: $_model.ModifySQLCollectorRetentionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifySQLCollectorRetentionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.configValue)) {
      query["ConfigValue"] = request.configValue;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifySQLCollectorRetention",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifySQLCollectorRetentionResponse>(await this.callApi(params, req, runtime), new $_model.ModifySQLCollectorRetentionResponse({}));
  }

  /**
   * Changes the retention period of the log files that are generated by the SQL Explorer feature for an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * RDS MySQL
   * ### Precautions
   * After you shorten the log backup retention period, log backup files that are stored longer than the specified log backup retention period are immediately deleted.
   * ### References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Use the SQL Explorer and Audit feature](https://help.aliyun.com/document_detail/476574.html)
   * 
   * @param request - ModifySQLCollectorRetentionRequest
   * @returns ModifySQLCollectorRetentionResponse
   */
  async modifySQLCollectorRetention(request: $_model.ModifySQLCollectorRetentionRequest): Promise<$_model.ModifySQLCollectorRetentionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifySQLCollectorRetentionWithOptions(request, runtime);
  }

  /**
   * Changes the ECS security groups to which an instance is added.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure a security group for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/201042.html)
   * *   [Configure a security group for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206310.html)
   * *   [Configure a security group for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/2392322.html)
   * 
   * @param request - ModifySecurityGroupConfigurationRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifySecurityGroupConfigurationResponse
   */
  async modifySecurityGroupConfigurationWithOptions(request: $_model.ModifySecurityGroupConfigurationRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifySecurityGroupConfigurationResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityGroupId)) {
      query["SecurityGroupId"] = request.securityGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifySecurityGroupConfiguration",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifySecurityGroupConfigurationResponse>(await this.callApi(params, req, runtime), new $_model.ModifySecurityGroupConfigurationResponse({}));
  }

  /**
   * Changes the ECS security groups to which an instance is added.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Configure a security group for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/201042.html)
   * *   [Configure a security group for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/206310.html)
   * *   [Configure a security group for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/2392322.html)
   * 
   * @param request - ModifySecurityGroupConfigurationRequest
   * @returns ModifySecurityGroupConfigurationResponse
   */
  async modifySecurityGroupConfiguration(request: $_model.ModifySecurityGroupConfigurationRequest): Promise<$_model.ModifySecurityGroupConfigurationResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifySecurityGroupConfigurationWithOptions(request, runtime);
  }

  /**
   * Modifies the IP address whitelist of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Configure an IP address whitelist for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96118.html)
   * *   [Configure an IP address whitelist for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/43187.html)
   * *   [Configure an IP address whitelist for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/43186.html)
   * *   [Configure an IP address whitelist for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/90336.html)
   * 
   * @param request - ModifySecurityIpsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifySecurityIpsResponse
   */
  async modifySecurityIpsWithOptions(request: $_model.ModifySecurityIpsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifySecurityIpsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceIPArrayAttribute)) {
      query["DBInstanceIPArrayAttribute"] = request.DBInstanceIPArrayAttribute;
    }

    if (!$dara.isNull(request.DBInstanceIPArrayName)) {
      query["DBInstanceIPArrayName"] = request.DBInstanceIPArrayName;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.freshWhiteListReadins)) {
      query["FreshWhiteListReadins"] = request.freshWhiteListReadins;
    }

    if (!$dara.isNull(request.modifyMode)) {
      query["ModifyMode"] = request.modifyMode;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityIPType)) {
      query["SecurityIPType"] = request.securityIPType;
    }

    if (!$dara.isNull(request.securityIps)) {
      query["SecurityIps"] = request.securityIps;
    }

    if (!$dara.isNull(request.whitelistNetworkType)) {
      query["WhitelistNetworkType"] = request.whitelistNetworkType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifySecurityIps",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifySecurityIpsResponse>(await this.callApi(params, req, runtime), new $_model.ModifySecurityIpsResponse({}));
  }

  /**
   * Modifies the IP address whitelist of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Configure an IP address whitelist for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96118.html)
   * *   [Configure an IP address whitelist for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/43187.html)
   * *   [Configure an IP address whitelist for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/43186.html)
   * *   [Configure an IP address whitelist for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/90336.html)
   * 
   * @param request - ModifySecurityIpsRequest
   * @returns ModifySecurityIpsResponse
   */
  async modifySecurityIps(request: $_model.ModifySecurityIpsRequest): Promise<$_model.ModifySecurityIpsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifySecurityIpsWithOptions(request, runtime);
  }

  /**
   * Modifies information about the historical tasks in the task center.
   * 
   * @param request - ModifyTaskInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyTaskInfoResponse
   */
  async modifyTaskInfoWithOptions(request: $_model.ModifyTaskInfoRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyTaskInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.actionParams)) {
      query["ActionParams"] = request.actionParams;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.securityToken)) {
      query["SecurityToken"] = request.securityToken;
    }

    if (!$dara.isNull(request.stepName)) {
      query["StepName"] = request.stepName;
    }

    if (!$dara.isNull(request.taskAction)) {
      query["TaskAction"] = request.taskAction;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyTaskInfo",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyTaskInfoResponse>(await this.callApi(params, req, runtime), new $_model.ModifyTaskInfoResponse({}));
  }

  /**
   * Modifies information about the historical tasks in the task center.
   * 
   * @param request - ModifyTaskInfoRequest
   * @returns ModifyTaskInfoResponse
   */
  async modifyTaskInfo(request: $_model.ModifyTaskInfoRequest): Promise<$_model.ModifyTaskInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyTaskInfoWithOptions(request, runtime);
  }

  /**
   * Edits a whitelist. You can call this operation to create, modify, or delete a whitelist.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - ModifyWhitelistTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyWhitelistTemplateResponse
   */
  async modifyWhitelistTemplateWithOptions(request: $_model.ModifyWhitelistTemplateRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ModifyWhitelistTemplateResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ipWhitelist)) {
      query["IpWhitelist"] = request.ipWhitelist;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.templateId)) {
      query["TemplateId"] = request.templateId;
    }

    if (!$dara.isNull(request.templateName)) {
      query["TemplateName"] = request.templateName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyWhitelistTemplate",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ModifyWhitelistTemplateResponse>(await this.callApi(params, req, runtime), new $_model.ModifyWhitelistTemplateResponse({}));
  }

  /**
   * Edits a whitelist. You can call this operation to create, modify, or delete a whitelist.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * 
   * @param request - ModifyWhitelistTemplateRequest
   * @returns ModifyWhitelistTemplateResponse
   */
  async modifyWhitelistTemplate(request: $_model.ModifyWhitelistTemplateRequest): Promise<$_model.ModifyWhitelistTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyWhitelistTemplateWithOptions(request, runtime);
  }

  /**
   * 删除节点创建订单预检查
   * 
   * @param tmpReq - PreCheckCreateOrderForDeleteDBNodesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PreCheckCreateOrderForDeleteDBNodesResponse
   */
  async preCheckCreateOrderForDeleteDBNodesWithOptions(tmpReq: $_model.PreCheckCreateOrderForDeleteDBNodesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.PreCheckCreateOrderForDeleteDBNodesResponse> {
    tmpReq.validate();
    let request = new $_model.PreCheckCreateOrderForDeleteDBNodesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.DBNodeId)) {
      request.DBNodeIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBNodeId, "DBNodeId", "json");
    }

    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.businessInfo)) {
      query["BusinessInfo"] = request.businessInfo;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.commodityCode)) {
      query["CommodityCode"] = request.commodityCode;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBNodeIdShrink)) {
      query["DBNodeId"] = request.DBNodeIdShrink;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.nodeType)) {
      query["NodeType"] = request.nodeType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.promotionCode)) {
      query["PromotionCode"] = request.promotionCode;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resource)) {
      query["Resource"] = request.resource;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PreCheckCreateOrderForDeleteDBNodes",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.PreCheckCreateOrderForDeleteDBNodesResponse>(await this.callApi(params, req, runtime), new $_model.PreCheckCreateOrderForDeleteDBNodesResponse({}));
  }

  /**
   * 删除节点创建订单预检查
   * 
   * @param request - PreCheckCreateOrderForDeleteDBNodesRequest
   * @returns PreCheckCreateOrderForDeleteDBNodesResponse
   */
  async preCheckCreateOrderForDeleteDBNodes(request: $_model.PreCheckCreateOrderForDeleteDBNodesRequest): Promise<$_model.PreCheckCreateOrderForDeleteDBNodesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.preCheckCreateOrderForDeleteDBNodesWithOptions(request, runtime);
  }

  /**
   * Clears the on-premises logs of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### Description
   * The system automatically uploads log backup files to Object Storage Service (OSS) buckets. If the remaining storage of an instance is insufficient, you can call this operation to upload the log backup files of the instance to OSS buckets. After the upload is complete, the system deletes these files from the instance to release storage. This operation is called to upload log backup files from an instance to OSS buckets and then delete these files from the instance. If the instance runs SQL Server, transaction log backup files are compressed before they are uploaded.
   * ### Precautions
   * *   When you upload log backup files, the data restoration feature is not affected.
   * *   This operation is called to release storage. The backup storage usage is not reduced.
   * *   The OSS buckets to which log backup files are uploaded are provided by the system. You do not need to purchase these OSS buckets. In addition, you cannot access these OSS buckets.
   * 
   * @param request - PurgeDBInstanceLogRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PurgeDBInstanceLogResponse
   */
  async purgeDBInstanceLogWithOptions(request: $_model.PurgeDBInstanceLogRequest, runtime: $dara.RuntimeOptions): Promise<$_model.PurgeDBInstanceLogResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PurgeDBInstanceLog",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.PurgeDBInstanceLogResponse>(await this.callApi(params, req, runtime), new $_model.PurgeDBInstanceLogResponse({}));
  }

  /**
   * Clears the on-premises logs of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### Description
   * The system automatically uploads log backup files to Object Storage Service (OSS) buckets. If the remaining storage of an instance is insufficient, you can call this operation to upload the log backup files of the instance to OSS buckets. After the upload is complete, the system deletes these files from the instance to release storage. This operation is called to upload log backup files from an instance to OSS buckets and then delete these files from the instance. If the instance runs SQL Server, transaction log backup files are compressed before they are uploaded.
   * ### Precautions
   * *   When you upload log backup files, the data restoration feature is not affected.
   * *   This operation is called to release storage. The backup storage usage is not reduced.
   * *   The OSS buckets to which log backup files are uploaded are provided by the system. You do not need to purchase these OSS buckets. In addition, you cannot access these OSS buckets.
   * 
   * @param request - PurgeDBInstanceLogRequest
   * @returns PurgeDBInstanceLogResponse
   */
  async purgeDBInstanceLog(request: $_model.PurgeDBInstanceLogRequest): Promise<$_model.PurgeDBInstanceLogResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.purgeDBInstanceLogWithOptions(request, runtime);
  }

  /**
   * Queries the notifications of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### Feature description
   * The notifications are highlighted at the top of the ApsaraDB RDS console. The notifications include renewal reminders and reminders of instance creation failures.
   * After you call this operation to query notifications, you can call the [ConfirmNotify](https://help.aliyun.com/document_detail/610444.html) operation to mark the notifications as confirmed, which means that you understand the content of the notifications.
   * 
   * @param request - QueryNotifyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryNotifyResponse
   */
  async queryNotifyWithOptions(request: $_model.QueryNotifyRequest, runtime: $dara.RuntimeOptions): Promise<$_model.QueryNotifyResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.from)) {
      body["From"] = request.from;
    }

    if (!$dara.isNull(request.pageNumber)) {
      body["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      body["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.to)) {
      body["To"] = request.to;
    }

    if (!$dara.isNull(request.withConfirmed)) {
      body["WithConfirmed"] = request.withConfirmed;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryNotify",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.QueryNotifyResponse>(await this.callApi(params, req, runtime), new $_model.QueryNotifyResponse({}));
  }

  /**
   * Queries the notifications of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### Feature description
   * The notifications are highlighted at the top of the ApsaraDB RDS console. The notifications include renewal reminders and reminders of instance creation failures.
   * After you call this operation to query notifications, you can call the [ConfirmNotify](https://help.aliyun.com/document_detail/610444.html) operation to mark the notifications as confirmed, which means that you understand the content of the notifications.
   * 
   * @param request - QueryNotifyRequest
   * @returns QueryNotifyResponse
   */
  async queryNotify(request: $_model.QueryNotifyRequest): Promise<$_model.QueryNotifyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryNotifyWithOptions(request, runtime);
  }

  /**
   * rds机器人热点问题
   * 
   * @param request - QueryRecommendByCodeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryRecommendByCodeResponse
   */
  async queryRecommendByCodeWithOptions(request: $_model.QueryRecommendByCodeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.QueryRecommendByCodeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.code)) {
      query["Code"] = request.code;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryRecommendByCode",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.QueryRecommendByCodeResponse>(await this.callApi(params, req, runtime), new $_model.QueryRecommendByCodeResponse({}));
  }

  /**
   * rds机器人热点问题
   * 
   * @param request - QueryRecommendByCodeRequest
   * @returns QueryRecommendByCodeResponse
   */
  async queryRecommendByCode(request: $_model.QueryRecommendByCodeRequest): Promise<$_model.QueryRecommendByCodeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryRecommendByCodeWithOptions(request, runtime);
  }

  /**
   * Restarts an RDS Custom instance that is in the Running state.
   * 
   * @param request - RebootRCInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RebootRCInstanceResponse
   */
  async rebootRCInstanceWithOptions(request: $_model.RebootRCInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RebootRCInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dryRun)) {
      query["DryRun"] = request.dryRun;
    }

    if (!$dara.isNull(request.forceStop)) {
      query["ForceStop"] = request.forceStop;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RebootRCInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RebootRCInstanceResponse>(await this.callApi(params, req, runtime), new $_model.RebootRCInstanceResponse({}));
  }

  /**
   * Restarts an RDS Custom instance that is in the Running state.
   * 
   * @param request - RebootRCInstanceRequest
   * @returns RebootRCInstanceResponse
   */
  async rebootRCInstance(request: $_model.RebootRCInstanceRequest): Promise<$_model.RebootRCInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.rebootRCInstanceWithOptions(request, runtime);
  }

  /**
   * Restarts multiple RDS Custom instances at a time.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * 
   * @param tmpReq - RebootRCInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RebootRCInstancesResponse
   */
  async rebootRCInstancesWithOptions(tmpReq: $_model.RebootRCInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RebootRCInstancesResponse> {
    tmpReq.validate();
    let request = new $_model.RebootRCInstancesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.instanceIds)) {
      request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, "InstanceIds", "json");
    }

    let query = { };
    if (!$dara.isNull(request.batchOptimization)) {
      query["BatchOptimization"] = request.batchOptimization;
    }

    if (!$dara.isNull(request.forceReboot)) {
      query["ForceReboot"] = request.forceReboot;
    }

    if (!$dara.isNull(request.instanceIdsShrink)) {
      query["InstanceIds"] = request.instanceIdsShrink;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RebootRCInstances",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RebootRCInstancesResponse>(await this.callApi(params, req, runtime), new $_model.RebootRCInstancesResponse({}));
  }

  /**
   * Restarts multiple RDS Custom instances at a time.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * 
   * @param request - RebootRCInstancesRequest
   * @returns RebootRCInstancesResponse
   */
  async rebootRCInstances(request: $_model.RebootRCInstancesRequest): Promise<$_model.RebootRCInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.rebootRCInstancesWithOptions(request, runtime);
  }

  /**
   * Rebuilds the secondary instance of a primary instance in a dedicated cluster.
   * 
   * @remarks
   * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](https://help.aliyun.com/document_detail/141455.html)
   * 
   * @param request - RebuildDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RebuildDBInstanceResponse
   */
  async rebuildDBInstanceWithOptions(request: $_model.RebuildDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RebuildDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.dedicatedHostGroupId)) {
      query["DedicatedHostGroupId"] = request.dedicatedHostGroupId;
    }

    if (!$dara.isNull(request.dedicatedHostId)) {
      query["DedicatedHostId"] = request.dedicatedHostId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.rebuildNodeType)) {
      query["RebuildNodeType"] = request.rebuildNodeType;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RebuildDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RebuildDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.RebuildDBInstanceResponse({}));
  }

  /**
   * Rebuilds the secondary instance of a primary instance in a dedicated cluster.
   * 
   * @remarks
   * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](https://help.aliyun.com/document_detail/141455.html)
   * 
   * @param request - RebuildDBInstanceRequest
   * @returns RebuildDBInstanceResponse
   */
  async rebuildDBInstance(request: $_model.RebuildDBInstanceRequest): Promise<$_model.RebuildDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.rebuildDBInstanceWithOptions(request, runtime);
  }

  /**
   * Re-creates a data synchronization link for a disaster recovery ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   PostgreSQL
   * 
   * @param request - RebuildReplicationLinkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RebuildReplicationLinkResponse
   */
  async rebuildReplicationLinkWithOptions(request: $_model.RebuildReplicationLinkRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RebuildReplicationLinkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RebuildReplicationLink",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RebuildReplicationLinkResponse>(await this.callApi(params, req, runtime), new $_model.RebuildReplicationLinkResponse({}));
  }

  /**
   * Re-creates a data synchronization link for a disaster recovery ApsaraDB RDS instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * *   PostgreSQL
   * 
   * @param request - RebuildReplicationLinkRequest
   * @returns RebuildReplicationLinkResponse
   */
  async rebuildReplicationLink(request: $_model.RebuildReplicationLinkRequest): Promise<$_model.RebuildReplicationLinkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.rebuildReplicationLinkWithOptions(request, runtime);
  }

  /**
   * Switches a primary instance to a disaster recovery instance or a disaster recovery instance to a primary instance.
   * 
   * @remarks
   * The operation is phased out.
   * 
   * @param request - ReceiveDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ReceiveDBInstanceResponse
   */
  async receiveDBInstanceWithOptions(request: $_model.ReceiveDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ReceiveDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.guardDBInstanceId)) {
      query["GuardDBInstanceId"] = request.guardDBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ReceiveDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ReceiveDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.ReceiveDBInstanceResponse({}));
  }

  /**
   * Switches a primary instance to a disaster recovery instance or a disaster recovery instance to a primary instance.
   * 
   * @remarks
   * The operation is phased out.
   * 
   * @param request - ReceiveDBInstanceRequest
   * @returns ReceiveDBInstanceResponse
   */
  async receiveDBInstance(request: $_model.ReceiveDBInstanceRequest): Promise<$_model.ReceiveDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.receiveDBInstanceWithOptions(request, runtime);
  }

  /**
   * Restores backup data of an ApsaraDB RDS for SQL Server instance to an existing instance or a new instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * SQL Server 2012 or later
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Restore the data of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95722.html)
   * 
   * @param request - RecoveryDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RecoveryDBInstanceResponse
   */
  async recoveryDBInstanceWithOptions(request: $_model.RecoveryDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RecoveryDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.DBInstanceClass)) {
      query["DBInstanceClass"] = request.DBInstanceClass;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceStorage)) {
      query["DBInstanceStorage"] = request.DBInstanceStorage;
    }

    if (!$dara.isNull(request.DBInstanceStorageType)) {
      query["DBInstanceStorageType"] = request.DBInstanceStorageType;
    }

    if (!$dara.isNull(request.dbNames)) {
      query["DbNames"] = request.dbNames;
    }

    if (!$dara.isNull(request.instanceNetworkType)) {
      query["InstanceNetworkType"] = request.instanceNetworkType;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.privateIpAddress)) {
      query["PrivateIpAddress"] = request.privateIpAddress;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.restoreTime)) {
      query["RestoreTime"] = request.restoreTime;
    }

    if (!$dara.isNull(request.targetDBInstanceId)) {
      query["TargetDBInstanceId"] = request.targetDBInstanceId;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    if (!$dara.isNull(request.VPCId)) {
      query["VPCId"] = request.VPCId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RecoveryDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RecoveryDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.RecoveryDBInstanceResponse({}));
  }

  /**
   * Restores backup data of an ApsaraDB RDS for SQL Server instance to an existing instance or a new instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * SQL Server 2012 or later
   * ### [](#)References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Restore the data of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95722.html)
   * 
   * @param request - RecoveryDBInstanceRequest
   * @returns RecoveryDBInstanceResponse
   */
  async recoveryDBInstance(request: $_model.RecoveryDBInstanceRequest): Promise<$_model.RecoveryDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.recoveryDBInstanceWithOptions(request, runtime);
  }

  /**
   * Releases the public endpoint of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * *   [Release the public endpoint of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/26128.html)
   * *   [Release the public endpoint of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/97738.html)
   * *   [Release the public endpoint of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/97736.html)
   * *   [Release the public endpoint of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97740.html)
   * 
   * @param request - ReleaseInstanceConnectionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ReleaseInstanceConnectionResponse
   */
  async releaseInstanceConnectionWithOptions(request: $_model.ReleaseInstanceConnectionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ReleaseInstanceConnectionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentConnectionString)) {
      query["CurrentConnectionString"] = request.currentConnectionString;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.instanceNetworkType)) {
      query["InstanceNetworkType"] = request.instanceNetworkType;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ReleaseInstanceConnection",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ReleaseInstanceConnectionResponse>(await this.callApi(params, req, runtime), new $_model.ReleaseInstanceConnectionResponse({}));
  }

  /**
   * Releases the public endpoint of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * *   [Release the public endpoint of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/26128.html)
   * *   [Release the public endpoint of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/97738.html)
   * *   [Release the public endpoint of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/97736.html)
   * *   [Release the public endpoint of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97740.html)
   * 
   * @param request - ReleaseInstanceConnectionRequest
   * @returns ReleaseInstanceConnectionResponse
   */
  async releaseInstanceConnection(request: $_model.ReleaseInstanceConnectionRequest): Promise<$_model.ReleaseInstanceConnectionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.releaseInstanceConnectionWithOptions(request, runtime);
  }

  /**
   * Releases the public endpoint of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Release the public endpoint of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/26128.html)
   * *   [Release the public endpoint of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/97738.html)
   * *   [Release the public endpoint of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/97736.html)
   * *   [Release the public endpoint of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97740.html)
   * 
   * @param request - ReleaseInstancePublicConnectionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ReleaseInstancePublicConnectionResponse
   */
  async releaseInstancePublicConnectionWithOptions(request: $_model.ReleaseInstancePublicConnectionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ReleaseInstancePublicConnectionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.currentConnectionString)) {
      query["CurrentConnectionString"] = request.currentConnectionString;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ReleaseInstancePublicConnection",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ReleaseInstancePublicConnectionResponse>(await this.callApi(params, req, runtime), new $_model.ReleaseInstancePublicConnectionResponse({}));
  }

  /**
   * Releases the public endpoint of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Release the public endpoint of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/26128.html)
   * *   [Release the public endpoint of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/97738.html)
   * *   [Release the public endpoint of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/97736.html)
   * *   [Release the public endpoint of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97740.html)
   * 
   * @param request - ReleaseInstancePublicConnectionRequest
   * @returns ReleaseInstancePublicConnectionResponse
   */
  async releaseInstancePublicConnection(request: $_model.ReleaseInstancePublicConnectionRequest): Promise<$_model.ReleaseInstancePublicConnectionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.releaseInstancePublicConnectionWithOptions(request, runtime);
  }

  /**
   * Releases the read/write splitting endpoint of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### Prerequisites
   * Before you call this operation, make sure that the following requirements are met:
   * *   The shared proxy feature is enabled for your ApsaraDB RDS for MySQL instance.
   * *   The read/write splitting feature is enabled for the instance.
   * *   The instance must run one of the following database engine versions and RDS editions:
   *     *   MySQL 5.7 on RDS High-availability Edition (with local disks)
   *     *   MySQL 5.6
   *     *   SQL Server on RDS Cluster Edition
   * 
   * @param request - ReleaseReadWriteSplittingConnectionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ReleaseReadWriteSplittingConnectionResponse
   */
  async releaseReadWriteSplittingConnectionWithOptions(request: $_model.ReleaseReadWriteSplittingConnectionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ReleaseReadWriteSplittingConnectionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ReleaseReadWriteSplittingConnection",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ReleaseReadWriteSplittingConnectionResponse>(await this.callApi(params, req, runtime), new $_model.ReleaseReadWriteSplittingConnectionResponse({}));
  }

  /**
   * Releases the read/write splitting endpoint of an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### Prerequisites
   * Before you call this operation, make sure that the following requirements are met:
   * *   The shared proxy feature is enabled for your ApsaraDB RDS for MySQL instance.
   * *   The read/write splitting feature is enabled for the instance.
   * *   The instance must run one of the following database engine versions and RDS editions:
   *     *   MySQL 5.7 on RDS High-availability Edition (with local disks)
   *     *   MySQL 5.6
   *     *   SQL Server on RDS Cluster Edition
   * 
   * @param request - ReleaseReadWriteSplittingConnectionRequest
   * @returns ReleaseReadWriteSplittingConnectionResponse
   */
  async releaseReadWriteSplittingConnection(request: $_model.ReleaseReadWriteSplittingConnectionRequest): Promise<$_model.ReleaseReadWriteSplittingConnectionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.releaseReadWriteSplittingConnectionWithOptions(request, runtime);
  }

  /**
   * Removes tags from an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Usage notes
   * *   A maximum of 10 tags can be removed in a single request.
   * *   If a tag is removed from all instances to which the tag is added, the tag is automatically deleted.
   * *   If you specify only TagKey, all tags that match the TagKey condition are removed.
   * *   You must specify at least TagKey or a pair of TagKey and TagValue.
   * 
   * @param request - RemoveTagsFromResourceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RemoveTagsFromResourceResponse
   */
  async removeTagsFromResourceWithOptions(request: $_model.RemoveTagsFromResourceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RemoveTagsFromResourceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.tags)) {
      query["Tags"] = request.tags;
    }

    if (!$dara.isNull(request.proxyId)) {
      query["proxyId"] = request.proxyId;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RemoveTagsFromResource",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RemoveTagsFromResourceResponse>(await this.callApi(params, req, runtime), new $_model.RemoveTagsFromResourceResponse({}));
  }

  /**
   * Removes tags from an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Usage notes
   * *   A maximum of 10 tags can be removed in a single request.
   * *   If a tag is removed from all instances to which the tag is added, the tag is automatically deleted.
   * *   If you specify only TagKey, all tags that match the TagKey condition are removed.
   * *   You must specify at least TagKey or a pair of TagKey and TagValue.
   * 
   * @param request - RemoveTagsFromResourceRequest
   * @returns RemoveTagsFromResourceResponse
   */
  async removeTagsFromResource(request: $_model.RemoveTagsFromResourceRequest): Promise<$_model.RemoveTagsFromResourceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.removeTagsFromResourceWithOptions(request, runtime);
  }

  /**
   * Manually renews an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * >  Fees of an instance are changed if the call is successful. Before you call this operation, carefully read the following topics:
   * *   [Manually renew an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96050.html)
   * *   [Manually renew an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96741.html)
   * *   [Manually renew an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95637.html)
   * *   [Manually renew an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97122.html)
   * 
   * @param request - RenewInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RenewInstanceResponse
   */
  async renewInstanceWithOptions(request: $_model.RenewInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RenewInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.autoUseCoupon)) {
      query["AutoUseCoupon"] = request.autoUseCoupon;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.promotionCode)) {
      query["PromotionCode"] = request.promotionCode;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RenewInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RenewInstanceResponse>(await this.callApi(params, req, runtime), new $_model.RenewInstanceResponse({}));
  }

  /**
   * Manually renews an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * >  Fees of an instance are changed if the call is successful. Before you call this operation, carefully read the following topics:
   * *   [Manually renew an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96050.html)
   * *   [Manually renew an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96741.html)
   * *   [Manually renew an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95637.html)
   * *   [Manually renew an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97122.html)
   * 
   * @param request - RenewInstanceRequest
   * @returns RenewInstanceResponse
   */
  async renewInstance(request: $_model.RenewInstanceRequest): Promise<$_model.RenewInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.renewInstanceWithOptions(request, runtime);
  }

  /**
   * Renews a subscription RDS Custom instance.
   * 
   * @param request - RenewRCInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RenewRCInstanceResponse
   */
  async renewRCInstanceWithOptions(request: $_model.RenewRCInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RenewRCInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.autoUseCoupon)) {
      query["AutoUseCoupon"] = request.autoUseCoupon;
    }

    if (!$dara.isNull(request.businessInfo)) {
      query["BusinessInfo"] = request.businessInfo;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.commodityCode)) {
      query["CommodityCode"] = request.commodityCode;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.periodAlign)) {
      query["PeriodAlign"] = request.periodAlign;
    }

    if (!$dara.isNull(request.promotionCode)) {
      query["PromotionCode"] = request.promotionCode;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resource)) {
      query["Resource"] = request.resource;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.timeType)) {
      query["TimeType"] = request.timeType;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RenewRCInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RenewRCInstanceResponse>(await this.callApi(params, req, runtime), new $_model.RenewRCInstanceResponse({}));
  }

  /**
   * Renews a subscription RDS Custom instance.
   * 
   * @param request - RenewRCInstanceRequest
   * @returns RenewRCInstanceResponse
   */
  async renewRCInstance(request: $_model.RenewRCInstanceRequest): Promise<$_model.RenewRCInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.renewRCInstanceWithOptions(request, runtime);
  }

  /**
   * Reinstalls the operating system (OS) of an RDS Custom instance.
   * 
   * @remarks
   *   The instance must be in the Stopped state.
   * *   If you reinstall the system, the data on the original system disk is lost. Exercise caution when you perform this operation.
   * 
   * @param request - ReplaceRCInstanceSystemDiskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ReplaceRCInstanceSystemDiskResponse
   */
  async replaceRCInstanceSystemDiskWithOptions(request: $_model.ReplaceRCInstanceSystemDiskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ReplaceRCInstanceSystemDiskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.isLocalDisk)) {
      query["IsLocalDisk"] = request.isLocalDisk;
    }

    if (!$dara.isNull(request.keyPairName)) {
      query["KeyPairName"] = request.keyPairName;
    }

    if (!$dara.isNull(request.password)) {
      query["Password"] = request.password;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ReplaceRCInstanceSystemDisk",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ReplaceRCInstanceSystemDiskResponse>(await this.callApi(params, req, runtime), new $_model.ReplaceRCInstanceSystemDiskResponse({}));
  }

  /**
   * Reinstalls the operating system (OS) of an RDS Custom instance.
   * 
   * @remarks
   *   The instance must be in the Stopped state.
   * *   If you reinstall the system, the data on the original system disk is lost. Exercise caution when you perform this operation.
   * 
   * @param request - ReplaceRCInstanceSystemDiskRequest
   * @returns ReplaceRCInstanceSystemDiskResponse
   */
  async replaceRCInstanceSystemDisk(request: $_model.ReplaceRCInstanceSystemDiskRequest): Promise<$_model.ReplaceRCInstanceSystemDiskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.replaceRCInstanceSystemDiskWithOptions(request, runtime);
  }

  /**
   * Resets the permissions of the privileged account.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Reset of the permissions of privileged accounts](https://help.aliyun.com/document_detail/140724.html)
   * 
   * @param request - ResetAccountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ResetAccountResponse
   */
  async resetAccountWithOptions(request: $_model.ResetAccountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ResetAccountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.accountPassword)) {
      query["AccountPassword"] = request.accountPassword;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ResetAccount",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ResetAccountResponse>(await this.callApi(params, req, runtime), new $_model.ResetAccountResponse({}));
  }

  /**
   * Resets the permissions of the privileged account.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Reset of the permissions of privileged accounts](https://help.aliyun.com/document_detail/140724.html)
   * 
   * @param request - ResetAccountRequest
   * @returns ResetAccountResponse
   */
  async resetAccount(request: $_model.ResetAccountRequest): Promise<$_model.ResetAccountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.resetAccountWithOptions(request, runtime);
  }

  /**
   * Resets the password of a database account.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Reset the password of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96100.html)
   * *   [Reset the password of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96814.html)
   * *   [Reset the password of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95691.html)
   * *   [Reset the password of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97133.html)
   * 
   * @param request - ResetAccountPasswordRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ResetAccountPasswordResponse
   */
  async resetAccountPasswordWithOptions(request: $_model.ResetAccountPasswordRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ResetAccountPasswordResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.accountPassword)) {
      query["AccountPassword"] = request.accountPassword;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ResetAccountPassword",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ResetAccountPasswordResponse>(await this.callApi(params, req, runtime), new $_model.ResetAccountPasswordResponse({}));
  }

  /**
   * Resets the password of a database account.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Reset the password of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96100.html)
   * *   [Reset the password of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96814.html)
   * *   [Reset the password of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95691.html)
   * *   [Reset the password of an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97133.html)
   * 
   * @param request - ResetAccountPasswordRequest
   * @returns ResetAccountPasswordResponse
   */
  async resetAccountPassword(request: $_model.ResetAccountPasswordRequest): Promise<$_model.ResetAccountPasswordResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.resetAccountPasswordWithOptions(request, runtime);
  }

  /**
   * Expand the storage capacity of an RDS Custom instance.
   * 
   * @param request - ResizeRCInstanceDiskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ResizeRCInstanceDiskResponse
   */
  async resizeRCInstanceDiskWithOptions(request: $_model.ResizeRCInstanceDiskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.ResizeRCInstanceDiskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.diskId)) {
      query["DiskId"] = request.diskId;
    }

    if (!$dara.isNull(request.dryRun)) {
      query["DryRun"] = request.dryRun;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.newSize)) {
      query["NewSize"] = request.newSize;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ResizeRCInstanceDisk",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.ResizeRCInstanceDiskResponse>(await this.callApi(params, req, runtime), new $_model.ResizeRCInstanceDiskResponse({}));
  }

  /**
   * Expand the storage capacity of an RDS Custom instance.
   * 
   * @param request - ResizeRCInstanceDiskRequest
   * @returns ResizeRCInstanceDiskResponse
   */
  async resizeRCInstanceDisk(request: $_model.ResizeRCInstanceDiskRequest): Promise<$_model.ResizeRCInstanceDiskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.resizeRCInstanceDiskWithOptions(request, runtime);
  }

  /**
   * Restarts an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * ### References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Restart an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96051.html)
   * *   [Restart an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96798.html)
   * *   [Restart an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95656.html)
   * *   [Restart an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97472.html)
   * 
   * @param request - RestartDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RestartDBInstanceResponse
   */
  async restartDBInstanceWithOptions(request: $_model.RestartDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RestartDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RestartDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RestartDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.RestartDBInstanceResponse({}));
  }

  /**
   * Restarts an instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   RDS MySQL
   * *   RDS PostgreSQL
   * *   RDS SQL Server
   * *   RDS MariaDB
   * ### References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Restart an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96051.html)
   * *   [Restart an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96798.html)
   * *   [Restart an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95656.html)
   * *   [Restart an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97472.html)
   * 
   * @param request - RestartDBInstanceRequest
   * @returns RestartDBInstanceResponse
   */
  async restartDBInstance(request: $_model.RestartDBInstanceRequest): Promise<$_model.RestartDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.restartDBInstanceWithOptions(request, runtime);
  }

  /**
   * Restores data to an existing instance across regions.
   * 
   * @remarks
   * >  Before restoration, you can call the CheckCreateDdrDBInstance operation to check whether a cross-region backup set can be used for cross-region restoration.
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Restore the data of an ApsaraDB RDS for MySQL instance across regions](https://help.aliyun.com/document_detail/120875.html)
   * 
   * @param request - RestoreDdrTableRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RestoreDdrTableResponse
   */
  async restoreDdrTableWithOptions(request: $_model.RestoreDdrTableRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RestoreDdrTableResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.restoreTime)) {
      query["RestoreTime"] = request.restoreTime;
    }

    if (!$dara.isNull(request.restoreType)) {
      query["RestoreType"] = request.restoreType;
    }

    if (!$dara.isNull(request.sourceDBInstanceName)) {
      query["SourceDBInstanceName"] = request.sourceDBInstanceName;
    }

    if (!$dara.isNull(request.sourceRegion)) {
      query["SourceRegion"] = request.sourceRegion;
    }

    if (!$dara.isNull(request.tableMeta)) {
      query["TableMeta"] = request.tableMeta;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RestoreDdrTable",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RestoreDdrTableResponse>(await this.callApi(params, req, runtime), new $_model.RestoreDdrTableResponse({}));
  }

  /**
   * Restores data to an existing instance across regions.
   * 
   * @remarks
   * >  Before restoration, you can call the CheckCreateDdrDBInstance operation to check whether a cross-region backup set can be used for cross-region restoration.
   * ### [](#)Supported database engines
   * MySQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/120824.html)
   * *   [Restore the data of an ApsaraDB RDS for MySQL instance across regions](https://help.aliyun.com/document_detail/120875.html)
   * 
   * @param request - RestoreDdrTableRequest
   * @returns RestoreDdrTableResponse
   */
  async restoreDdrTable(request: $_model.RestoreDdrTableRequest): Promise<$_model.RestoreDdrTableResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.restoreDdrTableWithOptions(request, runtime);
  }

  /**
   * Restores individual databases or tables of an instance to the original instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Restore individual databases and tables of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/103175.html)
   * *   [Restore individual databases and tables of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/613672.html)
   * 
   * @param request - RestoreTableRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RestoreTableResponse
   */
  async restoreTableWithOptions(request: $_model.RestoreTableRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RestoreTableResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.instantRecovery)) {
      query["InstantRecovery"] = request.instantRecovery;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.restoreTime)) {
      query["RestoreTime"] = request.restoreTime;
    }

    if (!$dara.isNull(request.tableMeta)) {
      query["TableMeta"] = request.tableMeta;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RestoreTable",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RestoreTableResponse>(await this.callApi(params, req, runtime), new $_model.RestoreTableResponse({}));
  }

  /**
   * Restores individual databases or tables of an instance to the original instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Restore individual databases and tables of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/103175.html)
   * *   [Restore individual databases and tables of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/613672.html)
   * 
   * @param request - RestoreTableRequest
   * @returns RestoreTableResponse
   */
  async restoreTable(request: $_model.RestoreTableRequest): Promise<$_model.RestoreTableResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.restoreTableWithOptions(request, runtime);
  }

  /**
   * Removes the permissions on a database of an ApsaraDB RDS instance from an account.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Prerequisites
   * *   The instance is in the Running state.
   * *   The database is in the Running state.
   * ### [](#)Precautions
   * *   The permissions that can be revoked include SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, and TRIGGER.
   * *   This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition and run PostgreSQL.
   * 
   * @param request - RevokeAccountPrivilegeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RevokeAccountPrivilegeResponse
   */
  async revokeAccountPrivilegeWithOptions(request: $_model.RevokeAccountPrivilegeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RevokeAccountPrivilegeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBName)) {
      query["DBName"] = request.DBName;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RevokeAccountPrivilege",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RevokeAccountPrivilegeResponse>(await this.callApi(params, req, runtime), new $_model.RevokeAccountPrivilegeResponse({}));
  }

  /**
   * Removes the permissions on a database of an ApsaraDB RDS instance from an account.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Prerequisites
   * *   The instance is in the Running state.
   * *   The database is in the Running state.
   * ### [](#)Precautions
   * *   The permissions that can be revoked include SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, and TRIGGER.
   * *   This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition and run PostgreSQL.
   * 
   * @param request - RevokeAccountPrivilegeRequest
   * @returns RevokeAccountPrivilegeResponse
   */
  async revokeAccountPrivilege(request: $_model.RevokeAccountPrivilegeRequest): Promise<$_model.RevokeAccountPrivilegeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.revokeAccountPrivilegeWithOptions(request, runtime);
  }

  /**
   * Revokes permissions from the service account of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Grant permissions to the service account of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96102.html)
   * *   [Grant permissions to the service account of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146887.html)
   * *   [Grant permissions to the service account of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95693.html)
   * 
   * @param request - RevokeOperatorPermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RevokeOperatorPermissionResponse
   */
  async revokeOperatorPermissionWithOptions(request: $_model.RevokeOperatorPermissionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RevokeOperatorPermissionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RevokeOperatorPermission",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RevokeOperatorPermissionResponse>(await this.callApi(params, req, runtime), new $_model.RevokeOperatorPermissionResponse({}));
  }

  /**
   * Revokes permissions from the service account of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Grant permissions to the service account of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96102.html)
   * *   [Grant permissions to the service account of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146887.html)
   * *   [Grant permissions to the service account of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95693.html)
   * 
   * @param request - RevokeOperatorPermissionRequest
   * @returns RevokeOperatorPermissionResponse
   */
  async revokeOperatorPermission(request: $_model.RevokeOperatorPermissionRequest): Promise<$_model.RevokeOperatorPermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.revokeOperatorPermissionWithOptions(request, runtime);
  }

  /**
   * 删除RC安全组规则
   * 
   * @param tmpReq - RevokeRCSecurityGroupPermissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RevokeRCSecurityGroupPermissionResponse
   */
  async revokeRCSecurityGroupPermissionWithOptions(tmpReq: $_model.RevokeRCSecurityGroupPermissionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RevokeRCSecurityGroupPermissionResponse> {
    tmpReq.validate();
    let request = new $_model.RevokeRCSecurityGroupPermissionShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.securityGroupRuleIdList)) {
      request.securityGroupRuleIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.securityGroupRuleIdList, "SecurityGroupRuleIdList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.direction)) {
      query["Direction"] = request.direction;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.securityGroupId)) {
      query["SecurityGroupId"] = request.securityGroupId;
    }

    if (!$dara.isNull(request.securityGroupRuleIdListShrink)) {
      query["SecurityGroupRuleIdList"] = request.securityGroupRuleIdListShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RevokeRCSecurityGroupPermission",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RevokeRCSecurityGroupPermissionResponse>(await this.callApi(params, req, runtime), new $_model.RevokeRCSecurityGroupPermissionResponse({}));
  }

  /**
   * 删除RC安全组规则
   * 
   * @param request - RevokeRCSecurityGroupPermissionRequest
   * @returns RevokeRCSecurityGroupPermissionResponse
   */
  async revokeRCSecurityGroupPermission(request: $_model.RevokeRCSecurityGroupPermissionRequest): Promise<$_model.RevokeRCSecurityGroupPermissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.revokeRCSecurityGroupPermissionWithOptions(request, runtime);
  }

  /**
   * Creates one or more subscription RDS Custom instances. Before you call this operation, you must specify parameters such as ImageId, InstanceType, VSwitchId, and SecurityGroupId.
   * 
   * @remarks
   *   Before you create RDS Custom instances, you must submit a ticket to add your Alibaba Cloud account to a whitelist.
   * *   You can create only subscription RDS Custom instances.
   * *   Subscription RDS Custom instances are supported in the China (Shanghai), China (Shenzhen), China (Beijing), and China (Hangzhou) regions.
   * 
   * @param tmpReq - RunRCInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RunRCInstancesResponse
   */
  async runRCInstancesWithOptions(tmpReq: $_model.RunRCInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.RunRCInstancesResponse> {
    tmpReq.validate();
    let request = new $_model.RunRCInstancesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.createAckEdgeParam)) {
      request.createAckEdgeParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.createAckEdgeParam, "CreateAckEdgeParam", "json");
    }

    if (!$dara.isNull(tmpReq.dataDisk)) {
      request.dataDiskShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataDisk, "DataDisk", "json");
    }

    if (!$dara.isNull(tmpReq.systemDisk)) {
      request.systemDiskShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.systemDisk, "SystemDisk", "json");
    }

    let query = { };
    if (!$dara.isNull(request.amount)) {
      query["Amount"] = request.amount;
    }

    if (!$dara.isNull(request.autoPay)) {
      query["AutoPay"] = request.autoPay;
    }

    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.createAckEdgeParamShrink)) {
      query["CreateAckEdgeParam"] = request.createAckEdgeParamShrink;
    }

    if (!$dara.isNull(request.createExtraParam)) {
      query["CreateExtraParam"] = request.createExtraParam;
    }

    if (!$dara.isNull(request.createMode)) {
      query["CreateMode"] = request.createMode;
    }

    if (!$dara.isNull(request.dataDiskShrink)) {
      query["DataDisk"] = request.dataDiskShrink;
    }

    if (!$dara.isNull(request.deploymentSetId)) {
      query["DeploymentSetId"] = request.deploymentSetId;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.dryRun)) {
      query["DryRun"] = request.dryRun;
    }

    if (!$dara.isNull(request.hostName)) {
      query["HostName"] = request.hostName;
    }

    if (!$dara.isNull(request.imageId)) {
      query["ImageId"] = request.imageId;
    }

    if (!$dara.isNull(request.instanceChargeType)) {
      query["InstanceChargeType"] = request.instanceChargeType;
    }

    if (!$dara.isNull(request.instanceName)) {
      query["InstanceName"] = request.instanceName;
    }

    if (!$dara.isNull(request.instanceType)) {
      query["InstanceType"] = request.instanceType;
    }

    if (!$dara.isNull(request.internetChargeType)) {
      query["InternetChargeType"] = request.internetChargeType;
    }

    if (!$dara.isNull(request.internetMaxBandwidthOut)) {
      query["InternetMaxBandwidthOut"] = request.internetMaxBandwidthOut;
    }

    if (!$dara.isNull(request.ioOptimized)) {
      query["IoOptimized"] = request.ioOptimized;
    }

    if (!$dara.isNull(request.keyPairName)) {
      query["KeyPairName"] = request.keyPairName;
    }

    if (!$dara.isNull(request.password)) {
      query["Password"] = request.password;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.periodUnit)) {
      query["PeriodUnit"] = request.periodUnit;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.securityEnhancementStrategy)) {
      query["SecurityEnhancementStrategy"] = request.securityEnhancementStrategy;
    }

    if (!$dara.isNull(request.securityGroupId)) {
      query["SecurityGroupId"] = request.securityGroupId;
    }

    if (!$dara.isNull(request.spotStrategy)) {
      query["SpotStrategy"] = request.spotStrategy;
    }

    if (!$dara.isNull(request.supportCase)) {
      query["SupportCase"] = request.supportCase;
    }

    if (!$dara.isNull(request.systemDiskShrink)) {
      query["SystemDisk"] = request.systemDiskShrink;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    if (!$dara.isNull(request.userData)) {
      query["UserData"] = request.userData;
    }

    if (!$dara.isNull(request.userDataInBase64)) {
      query["UserDataInBase64"] = request.userDataInBase64;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RunRCInstances",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.RunRCInstancesResponse>(await this.callApi(params, req, runtime), new $_model.RunRCInstancesResponse({}));
  }

  /**
   * Creates one or more subscription RDS Custom instances. Before you call this operation, you must specify parameters such as ImageId, InstanceType, VSwitchId, and SecurityGroupId.
   * 
   * @remarks
   *   Before you create RDS Custom instances, you must submit a ticket to add your Alibaba Cloud account to a whitelist.
   * *   You can create only subscription RDS Custom instances.
   * *   Subscription RDS Custom instances are supported in the China (Shanghai), China (Shenzhen), China (Beijing), and China (Hangzhou) regions.
   * 
   * @param request - RunRCInstancesRequest
   * @returns RunRCInstancesResponse
   */
  async runRCInstances(request: $_model.RunRCInstancesRequest): Promise<$_model.RunRCInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.runRCInstancesWithOptions(request, runtime);
  }

  /**
   * Resumes an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Start an ApsaraDB RDS for SQL instance](https://help.aliyun.com/document_detail/462504.html)
   * 
   * @param request - StartDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartDBInstanceResponse
   */
  async startDBInstanceWithOptions(request: $_model.StartDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceTransType)) {
      query["DBInstanceTransType"] = request.DBInstanceTransType;
    }

    if (!$dara.isNull(request.dedicatedHostGroupId)) {
      query["DedicatedHostGroupId"] = request.dedicatedHostGroupId;
    }

    if (!$dara.isNull(request.effectiveTime)) {
      query["EffectiveTime"] = request.effectiveTime;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.specifiedTime)) {
      query["SpecifiedTime"] = request.specifiedTime;
    }

    if (!$dara.isNull(request.storage)) {
      query["Storage"] = request.storage;
    }

    if (!$dara.isNull(request.targetDBInstanceClass)) {
      query["TargetDBInstanceClass"] = request.targetDBInstanceClass;
    }

    if (!$dara.isNull(request.targetDedicatedHostIdForLog)) {
      query["TargetDedicatedHostIdForLog"] = request.targetDedicatedHostIdForLog;
    }

    if (!$dara.isNull(request.targetDedicatedHostIdForMaster)) {
      query["TargetDedicatedHostIdForMaster"] = request.targetDedicatedHostIdForMaster;
    }

    if (!$dara.isNull(request.targetDedicatedHostIdForSlave)) {
      query["TargetDedicatedHostIdForSlave"] = request.targetDedicatedHostIdForSlave;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.StartDBInstanceResponse({}));
  }

  /**
   * Resumes an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### [](#)References
   * >  Before you call this operation, read the following topics and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Start an ApsaraDB RDS for SQL instance](https://help.aliyun.com/document_detail/462504.html)
   * 
   * @param request - StartDBInstanceRequest
   * @returns StartDBInstanceResponse
   */
  async startDBInstance(request: $_model.StartDBInstanceRequest): Promise<$_model.StartDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startDBInstanceWithOptions(request, runtime);
  }

  /**
   * Starts RDS Custom instances that are in the Stopped state. After the operation is successfully called, the instances enter the Starting state.
   * 
   * @param request - StartRCInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartRCInstanceResponse
   */
  async startRCInstanceWithOptions(request: $_model.StartRCInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartRCInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartRCInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartRCInstanceResponse>(await this.callApi(params, req, runtime), new $_model.StartRCInstanceResponse({}));
  }

  /**
   * Starts RDS Custom instances that are in the Stopped state. After the operation is successfully called, the instances enter the Starting state.
   * 
   * @param request - StartRCInstanceRequest
   * @returns StartRCInstanceResponse
   */
  async startRCInstance(request: $_model.StartRCInstanceRequest): Promise<$_model.StartRCInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startRCInstanceWithOptions(request, runtime);
  }

  /**
   * Starts multiple RDS Custom instances at a time.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * 
   * @param tmpReq - StartRCInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartRCInstancesResponse
   */
  async startRCInstancesWithOptions(tmpReq: $_model.StartRCInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StartRCInstancesResponse> {
    tmpReq.validate();
    let request = new $_model.StartRCInstancesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.instanceIds)) {
      request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, "InstanceIds", "json");
    }

    let query = { };
    if (!$dara.isNull(request.batchOptimization)) {
      query["BatchOptimization"] = request.batchOptimization;
    }

    if (!$dara.isNull(request.instanceIdsShrink)) {
      query["InstanceIds"] = request.instanceIdsShrink;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartRCInstances",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StartRCInstancesResponse>(await this.callApi(params, req, runtime), new $_model.StartRCInstancesResponse({}));
  }

  /**
   * Starts multiple RDS Custom instances at a time.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * 
   * @param request - StartRCInstancesRequest
   * @returns StartRCInstancesResponse
   */
  async startRCInstances(request: $_model.StartRCInstancesRequest): Promise<$_model.StartRCInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startRCInstancesWithOptions(request, runtime);
  }

  /**
   * Suspends an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   *   [Suspend an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/462504.html)
   * 
   * @param request - StopDBInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopDBInstanceResponse
   */
  async stopDBInstanceWithOptions(request: $_model.StopDBInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopDBInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopDBInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopDBInstanceResponse>(await this.callApi(params, req, runtime), new $_model.StopDBInstanceResponse({}));
  }

  /**
   * Suspends an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   *   [Suspend an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/462504.html)
   * 
   * @param request - StopDBInstanceRequest
   * @returns StopDBInstanceResponse
   */
  async stopDBInstance(request: $_model.StopDBInstanceRequest): Promise<$_model.StopDBInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopDBInstanceWithOptions(request, runtime);
  }

  /**
   * Stops an RDS Custom instance that is in the Running state. After the operation is successfully called, the status of the RDS Custom instance changes from Stopping to Stopped.
   * 
   * @param request - StopRCInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopRCInstanceResponse
   */
  async stopRCInstanceWithOptions(request: $_model.StopRCInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopRCInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.forceStop)) {
      query["ForceStop"] = request.forceStop;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopRCInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopRCInstanceResponse>(await this.callApi(params, req, runtime), new $_model.StopRCInstanceResponse({}));
  }

  /**
   * Stops an RDS Custom instance that is in the Running state. After the operation is successfully called, the status of the RDS Custom instance changes from Stopping to Stopped.
   * 
   * @param request - StopRCInstanceRequest
   * @returns StopRCInstanceResponse
   */
  async stopRCInstance(request: $_model.StopRCInstanceRequest): Promise<$_model.StopRCInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopRCInstanceWithOptions(request, runtime);
  }

  /**
   * Stops multiple RDS Custom instances at a time.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * 
   * @param tmpReq - StopRCInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StopRCInstancesResponse
   */
  async stopRCInstancesWithOptions(tmpReq: $_model.StopRCInstancesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.StopRCInstancesResponse> {
    tmpReq.validate();
    let request = new $_model.StopRCInstancesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.instanceIds)) {
      request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, "InstanceIds", "json");
    }

    let query = { };
    if (!$dara.isNull(request.batchOptimization)) {
      query["BatchOptimization"] = request.batchOptimization;
    }

    if (!$dara.isNull(request.forceStop)) {
      query["ForceStop"] = request.forceStop;
    }

    if (!$dara.isNull(request.instanceIdsShrink)) {
      query["InstanceIds"] = request.instanceIdsShrink;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StopRCInstances",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.StopRCInstancesResponse>(await this.callApi(params, req, runtime), new $_model.StopRCInstancesResponse({}));
  }

  /**
   * Stops multiple RDS Custom instances at a time.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * 
   * @param request - StopRCInstancesRequest
   * @returns StopRCInstancesResponse
   */
  async stopRCInstances(request: $_model.StopRCInstancesRequest): Promise<$_model.StopRCInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.stopRCInstancesWithOptions(request, runtime);
  }

  /**
   * Switches workloads between primary and secondary ApsaraDB RDS instances.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Switch workloads between primary and secondary ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/96054.html)
   * *   [Switch workloads between primary and secondary ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/96747.html)
   * *   [Switch workloads between primary and secondary ApsaraDB RDS for SQL Server instances](https://help.aliyun.com/document_detail/95659.html)
   * *   [Switch workloads between primary and secondary ApsaraDB RDS for MariaDB instances](https://help.aliyun.com/document_detail/97127.html)
   * 
   * @param request - SwitchDBInstanceHARequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SwitchDBInstanceHAResponse
   */
  async switchDBInstanceHAWithOptions(request: $_model.SwitchDBInstanceHARequest, runtime: $dara.RuntimeOptions): Promise<$_model.SwitchDBInstanceHAResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.effectiveTime)) {
      query["EffectiveTime"] = request.effectiveTime;
    }

    if (!$dara.isNull(request.force)) {
      query["Force"] = request.force;
    }

    if (!$dara.isNull(request.nodeId)) {
      query["NodeId"] = request.nodeId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SwitchDBInstanceHA",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SwitchDBInstanceHAResponse>(await this.callApi(params, req, runtime), new $_model.SwitchDBInstanceHAResponse({}));
  }

  /**
   * Switches workloads between primary and secondary ApsaraDB RDS instances.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Switch workloads between primary and secondary ApsaraDB RDS for MySQL instances](https://help.aliyun.com/document_detail/96054.html)
   * *   [Switch workloads between primary and secondary ApsaraDB RDS for PostgreSQL instances](https://help.aliyun.com/document_detail/96747.html)
   * *   [Switch workloads between primary and secondary ApsaraDB RDS for SQL Server instances](https://help.aliyun.com/document_detail/95659.html)
   * *   [Switch workloads between primary and secondary ApsaraDB RDS for MariaDB instances](https://help.aliyun.com/document_detail/97127.html)
   * 
   * @param request - SwitchDBInstanceHARequest
   * @returns SwitchDBInstanceHAResponse
   */
  async switchDBInstanceHA(request: $_model.SwitchDBInstanceHARequest): Promise<$_model.SwitchDBInstanceHAResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.switchDBInstanceHAWithOptions(request, runtime);
  }

  /**
   * Switches between internal and public endpoints of an instance in the classic network.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### Prerequisites
   * *   The instance is connected by using its internal or public endpoint.
   * *   The instance is in the Running state.
   * *   The number of times that you have switched the instance between its internal and public endpoints within the last 24 hours does not reach 20.
   * *   The instance resides in the classic network.
   * ### Usage notes
   * After the endpoint that is used to connect to the instance is changed, you must update the endpoint information in the code of your application and restart the application.
   * 
   * @param request - SwitchDBInstanceNetTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SwitchDBInstanceNetTypeResponse
   */
  async switchDBInstanceNetTypeWithOptions(request: $_model.SwitchDBInstanceNetTypeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SwitchDBInstanceNetTypeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.connectionStringPrefix)) {
      query["ConnectionStringPrefix"] = request.connectionStringPrefix;
    }

    if (!$dara.isNull(request.connectionStringType)) {
      query["ConnectionStringType"] = request.connectionStringType;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.port)) {
      query["Port"] = request.port;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SwitchDBInstanceNetType",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SwitchDBInstanceNetTypeResponse>(await this.callApi(params, req, runtime), new $_model.SwitchDBInstanceNetTypeResponse({}));
  }

  /**
   * Switches between internal and public endpoints of an instance in the classic network.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   SQL Server
   * ### Prerequisites
   * *   The instance is connected by using its internal or public endpoint.
   * *   The instance is in the Running state.
   * *   The number of times that you have switched the instance between its internal and public endpoints within the last 24 hours does not reach 20.
   * *   The instance resides in the classic network.
   * ### Usage notes
   * After the endpoint that is used to connect to the instance is changed, you must update the endpoint information in the code of your application and restart the application.
   * 
   * @param request - SwitchDBInstanceNetTypeRequest
   * @returns SwitchDBInstanceNetTypeResponse
   */
  async switchDBInstanceNetType(request: $_model.SwitchDBInstanceNetTypeRequest): Promise<$_model.SwitchDBInstanceNetTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.switchDBInstanceNetTypeWithOptions(request, runtime);
  }

  /**
   * Changes the virtual private cloud (VPC) and vSwitch for an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Change the VPC and vSwitch for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/137567.html)
   * *   [Change the vSwitch for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146885.html)
   * *   [Change the VPC and vSwitch for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/347675.html)
   * 
   * @param request - SwitchDBInstanceVpcRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SwitchDBInstanceVpcResponse
   */
  async switchDBInstanceVpcWithOptions(request: $_model.SwitchDBInstanceVpcRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SwitchDBInstanceVpcResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.privateIpAddress)) {
      query["PrivateIpAddress"] = request.privateIpAddress;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.VPCId)) {
      query["VPCId"] = request.VPCId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SwitchDBInstanceVpc",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SwitchDBInstanceVpcResponse>(await this.callApi(params, req, runtime), new $_model.SwitchDBInstanceVpcResponse({}));
  }

  /**
   * Changes the virtual private cloud (VPC) and vSwitch for an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Change the VPC and vSwitch for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/137567.html)
   * *   [Change the vSwitch for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146885.html)
   * *   [Change the VPC and vSwitch for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/347675.html)
   * 
   * @param request - SwitchDBInstanceVpcRequest
   * @returns SwitchDBInstanceVpcResponse
   */
  async switchDBInstanceVpc(request: $_model.SwitchDBInstanceVpcRequest): Promise<$_model.SwitchDBInstanceVpcResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.switchDBInstanceVpcWithOptions(request, runtime);
  }

  /**
   * Performs a zero-downtime workload switchover after the major engine version upgrade of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * Supported database engine
   * *   PostgreSQL
   * 
   * @param request - SwitchOverMajorVersionUpgradeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SwitchOverMajorVersionUpgradeResponse
   */
  async switchOverMajorVersionUpgradeWithOptions(request: $_model.SwitchOverMajorVersionUpgradeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SwitchOverMajorVersionUpgradeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceName)) {
      query["DBInstanceName"] = request.DBInstanceName;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.switchoverTimeout)) {
      query["SwitchoverTimeout"] = request.switchoverTimeout;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SwitchOverMajorVersionUpgrade",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SwitchOverMajorVersionUpgradeResponse>(await this.callApi(params, req, runtime), new $_model.SwitchOverMajorVersionUpgradeResponse({}));
  }

  /**
   * Performs a zero-downtime workload switchover after the major engine version upgrade of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * Supported database engine
   * *   PostgreSQL
   * 
   * @param request - SwitchOverMajorVersionUpgradeRequest
   * @returns SwitchOverMajorVersionUpgradeResponse
   */
  async switchOverMajorVersionUpgrade(request: $_model.SwitchOverMajorVersionUpgradeRequest): Promise<$_model.SwitchOverMajorVersionUpgradeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.switchOverMajorVersionUpgradeWithOptions(request, runtime);
  }

  /**
   * Switches the data synchronization link to synchronize data from a disaster recovery (DR) instance to the primary ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * 
   * @param request - SwitchReplicationLinkRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SwitchReplicationLinkResponse
   */
  async switchReplicationLinkWithOptions(request: $_model.SwitchReplicationLinkRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SwitchReplicationLinkResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.targetInstanceName)) {
      query["TargetInstanceName"] = request.targetInstanceName;
    }

    if (!$dara.isNull(request.targetInstanceRegionId)) {
      query["TargetInstanceRegionId"] = request.targetInstanceRegionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SwitchReplicationLink",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SwitchReplicationLinkResponse>(await this.callApi(params, req, runtime), new $_model.SwitchReplicationLinkResponse({}));
  }

  /**
   * Switches the data synchronization link to synchronize data from a disaster recovery (DR) instance to the primary ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * 
   * @param request - SwitchReplicationLinkRequest
   * @returns SwitchReplicationLinkResponse
   */
  async switchReplicationLink(request: $_model.SwitchReplicationLinkRequest): Promise<$_model.SwitchReplicationLinkResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.switchReplicationLinkWithOptions(request, runtime);
  }

  /**
   * Synchronizes a custom key pair to an RDS Custom instance. If you change the key pair that you created for your RDS Custom instance and you want the change to immediately take effect on the RDS Custom instance, you can call this operation to synchronize the new key pair to the RDS Custom instance. For example, you delete a key pair that has the same name as another key pair and recreate the key pair.
   * 
   * @param request - SyncRCKeyPairRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SyncRCKeyPairResponse
   */
  async syncRCKeyPairWithOptions(request: $_model.SyncRCKeyPairRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SyncRCKeyPairResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.keyPairName)) {
      query["KeyPairName"] = request.keyPairName;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.syncMode)) {
      query["SyncMode"] = request.syncMode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SyncRCKeyPair",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SyncRCKeyPairResponse>(await this.callApi(params, req, runtime), new $_model.SyncRCKeyPairResponse({}));
  }

  /**
   * Synchronizes a custom key pair to an RDS Custom instance. If you change the key pair that you created for your RDS Custom instance and you want the change to immediately take effect on the RDS Custom instance, you can call this operation to synchronize the new key pair to the RDS Custom instance. For example, you delete a key pair that has the same name as another key pair and recreate the key pair.
   * 
   * @param request - SyncRCKeyPairRequest
   * @returns SyncRCKeyPairResponse
   */
  async syncRCKeyPair(request: $_model.SyncRCKeyPairRequest): Promise<$_model.SyncRCKeyPairResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.syncRCKeyPairWithOptions(request, runtime);
  }

  /**
   * Adds security group rules to an RDS Custom for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Introduction to ApsaraDB RDS Custom](https://help.aliyun.com/document_detail/2864363.html)
   * 
   * @param request - SyncRCSecurityGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SyncRCSecurityGroupResponse
   */
  async syncRCSecurityGroupWithOptions(request: $_model.SyncRCSecurityGroupRequest, runtime: $dara.RuntimeOptions): Promise<$_model.SyncRCSecurityGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.securityGroupId)) {
      query["SecurityGroupId"] = request.securityGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SyncRCSecurityGroup",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.SyncRCSecurityGroupResponse>(await this.callApi(params, req, runtime), new $_model.SyncRCSecurityGroupResponse({}));
  }

  /**
   * Adds security group rules to an RDS Custom for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Introduction to ApsaraDB RDS Custom](https://help.aliyun.com/document_detail/2864363.html)
   * 
   * @param request - SyncRCSecurityGroupRequest
   * @returns SyncRCSecurityGroupResponse
   */
  async syncRCSecurityGroup(request: $_model.SyncRCSecurityGroupRequest): Promise<$_model.SyncRCSecurityGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.syncRCSecurityGroupWithOptions(request, runtime);
  }

  /**
   * Creates and adds tags to one or more instances.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Create tags for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96149.html)
   * *   [Create tags for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96777.html)
   * *   [Create tags for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95726.html)
   * *   [Create tags for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97152.html)
   * 
   * @param request - TagResourcesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TagResourcesResponse
   */
  async tagResourcesWithOptions(request: $_model.TagResourcesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.TagResourcesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "TagResources",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.TagResourcesResponse>(await this.callApi(params, req, runtime), new $_model.TagResourcesResponse({}));
  }

  /**
   * Creates and adds tags to one or more instances.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Create tags for an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96149.html)
   * *   [Create tags for an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/96777.html)
   * *   [Create tags for an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/95726.html)
   * *   [Create tags for an ApsaraDB RDS for MariaDB instance](https://help.aliyun.com/document_detail/97152.html)
   * 
   * @param request - TagResourcesRequest
   * @returns TagResourcesResponse
   */
  async tagResources(request: $_model.TagResourcesRequest): Promise<$_model.TagResourcesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.tagResourcesWithOptions(request, runtime);
  }

  /**
   * Terminates an ongoing migration task of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   SQL Server
   * 
   * @param request - TerminateMigrateTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TerminateMigrateTaskResponse
   */
  async terminateMigrateTaskWithOptions(request: $_model.TerminateMigrateTaskRequest, runtime: $dara.RuntimeOptions): Promise<$_model.TerminateMigrateTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.migrateTaskId)) {
      query["MigrateTaskId"] = request.migrateTaskId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "TerminateMigrateTask",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.TerminateMigrateTaskResponse>(await this.callApi(params, req, runtime), new $_model.TerminateMigrateTaskResponse({}));
  }

  /**
   * Terminates an ongoing migration task of an ApsaraDB RDS for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   SQL Server
   * 
   * @param request - TerminateMigrateTaskRequest
   * @returns TerminateMigrateTaskResponse
   */
  async terminateMigrateTask(request: $_model.TerminateMigrateTaskRequest): Promise<$_model.TerminateMigrateTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.terminateMigrateTaskWithOptions(request, runtime);
  }

  /**
   * Changes the billing method of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Fees are generated if the call is successful. Before you call this operation, you must read the following documentation.
   * *   [Change the billing method of an ApsaraDB RDS for MySQL instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/96048.html) or [Change the billing method of an ApsaraDB RDS for MySQL instance from subscription to pay-as-you-go](https://help.aliyun.com/document_detail/161875.html)
   * *   [Change the billing method of an ApsaraDB RDS for PostgreSQL instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/96743.html) or [Change the billing method of an ApsaraDB RDS for PostgreSQL instance from subscription to pay-as-you-go](https://help.aliyun.com/document_detail/162756.html)
   * *   [Change the billing method of an ApsaraDB RDS for SQL Server instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/95631.html) or [Change the billing method of an ApsaraDB RDS for SQL Server instance from subscription to pay-as-you-go](https://help.aliyun.com/document_detail/162755.html)
   * *   [Change the billing method of an ApsaraDB RDS for MariaDB instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/97120.html) or [Change the billing method of an ApsaraDB RDS for MariaDB instance from subscription to pay-as-you-go](https://help.aliyun.com/document_detail/169252.html)
   * 
   * @param request - TransformDBInstancePayTypeRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TransformDBInstancePayTypeResponse
   */
  async transformDBInstancePayTypeWithOptions(request: $_model.TransformDBInstancePayTypeRequest, runtime: $dara.RuntimeOptions): Promise<$_model.TransformDBInstancePayTypeResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.autoRenew)) {
      query["AutoRenew"] = request.autoRenew;
    }

    if (!$dara.isNull(request.autoUseCoupon)) {
      query["AutoUseCoupon"] = request.autoUseCoupon;
    }

    if (!$dara.isNull(request.businessInfo)) {
      query["BusinessInfo"] = request.businessInfo;
    }

    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.promotionCode)) {
      query["PromotionCode"] = request.promotionCode;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "TransformDBInstancePayType",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.TransformDBInstancePayTypeResponse>(await this.callApi(params, req, runtime), new $_model.TransformDBInstancePayTypeResponse({}));
  }

  /**
   * Changes the billing method of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### References
   * > Fees are generated if the call is successful. Before you call this operation, you must read the following documentation.
   * *   [Change the billing method of an ApsaraDB RDS for MySQL instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/96048.html) or [Change the billing method of an ApsaraDB RDS for MySQL instance from subscription to pay-as-you-go](https://help.aliyun.com/document_detail/161875.html)
   * *   [Change the billing method of an ApsaraDB RDS for PostgreSQL instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/96743.html) or [Change the billing method of an ApsaraDB RDS for PostgreSQL instance from subscription to pay-as-you-go](https://help.aliyun.com/document_detail/162756.html)
   * *   [Change the billing method of an ApsaraDB RDS for SQL Server instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/95631.html) or [Change the billing method of an ApsaraDB RDS for SQL Server instance from subscription to pay-as-you-go](https://help.aliyun.com/document_detail/162755.html)
   * *   [Change the billing method of an ApsaraDB RDS for MariaDB instance from pay-as-you-go to subscription](https://help.aliyun.com/document_detail/97120.html) or [Change the billing method of an ApsaraDB RDS for MariaDB instance from subscription to pay-as-you-go](https://help.aliyun.com/document_detail/169252.html)
   * 
   * @param request - TransformDBInstancePayTypeRequest
   * @returns TransformDBInstancePayTypeResponse
   */
  async transformDBInstancePayType(request: $_model.TransformDBInstancePayTypeRequest): Promise<$_model.TransformDBInstancePayTypeResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.transformDBInstancePayTypeWithOptions(request, runtime);
  }

  /**
   * Unbinds a elastic IP address (EIP) from an RDS Custom for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Introduction to ApsaraDB RDS Custom](https://help.aliyun.com/document_detail/2864363.html)
   * 
   * @param request - UnassociateEipAddressWithRCInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UnassociateEipAddressWithRCInstanceResponse
   */
  async unassociateEipAddressWithRCInstanceWithOptions(request: $_model.UnassociateEipAddressWithRCInstanceRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UnassociateEipAddressWithRCInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.allocationId)) {
      query["AllocationId"] = request.allocationId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UnassociateEipAddressWithRCInstance",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UnassociateEipAddressWithRCInstanceResponse>(await this.callApi(params, req, runtime), new $_model.UnassociateEipAddressWithRCInstanceResponse({}));
  }

  /**
   * Unbinds a elastic IP address (EIP) from an RDS Custom for SQL Server instance.
   * 
   * @remarks
   * ### [](#)Supported database engine
   * SQL Server
   * ### [](#)References
   * [Introduction to ApsaraDB RDS Custom](https://help.aliyun.com/document_detail/2864363.html)
   * 
   * @param request - UnassociateEipAddressWithRCInstanceRequest
   * @returns UnassociateEipAddressWithRCInstanceResponse
   */
  async unassociateEipAddressWithRCInstance(request: $_model.UnassociateEipAddressWithRCInstanceRequest): Promise<$_model.UnassociateEipAddressWithRCInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.unassociateEipAddressWithRCInstanceWithOptions(request, runtime);
  }

  /**
   * Unlocks a database account of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### Supported database engine
   * PostgreSQL
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Lock an account of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/147649.html)
   * 
   * @param request - UnlockAccountRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UnlockAccountResponse
   */
  async unlockAccountWithOptions(request: $_model.UnlockAccountRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UnlockAccountResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accountName)) {
      query["AccountName"] = request.accountName;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UnlockAccount",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UnlockAccountResponse>(await this.callApi(params, req, runtime), new $_model.UnlockAccountResponse({}));
  }

  /**
   * Unlocks a database account of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### Supported database engine
   * PostgreSQL
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Lock an account of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/147649.html)
   * 
   * @param request - UnlockAccountRequest
   * @returns UnlockAccountResponse
   */
  async unlockAccount(request: $_model.UnlockAccountRequest): Promise<$_model.UnlockAccountResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.unlockAccountWithOptions(request, runtime);
  }

  /**
   * Removes tags from one or more instances.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Usage notes
   * *   You can remove up to 20 tags at a time.
   * *   If a tag is removed from an instance and is not added to other instances, the tag is automatically deleted.
   * 
   * @param request - UntagResourcesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UntagResourcesResponse
   */
  async untagResourcesWithOptions(request: $_model.UntagResourcesRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UntagResourcesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.all)) {
      query["All"] = request.all;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.tagKey)) {
      query["TagKey"] = request.tagKey;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UntagResources",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UntagResourcesResponse>(await this.callApi(params, req, runtime), new $_model.UntagResourcesResponse({}));
  }

  /**
   * Removes tags from one or more instances.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * *   MariaDB
   * ### [](#)Usage notes
   * *   You can remove up to 20 tags at a time.
   * *   If a tag is removed from an instance and is not added to other instances, the tag is automatically deleted.
   * 
   * @param request - UntagResourcesRequest
   * @returns UntagResourcesResponse
   */
  async untagResources(request: $_model.UntagResourcesRequest): Promise<$_model.UntagResourcesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.untagResourcesWithOptions(request, runtime);
  }

  /**
   * Updates the version of an extension on a database.
   * 
   * @remarks
   * ### Supported database engines
   * RDS PostgreSQL
   * ### References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Manage extensions](https://help.aliyun.com/document_detail/2402409.html)
   * 
   * @param request - UpdatePostgresExtensionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdatePostgresExtensionsResponse
   */
  async updatePostgresExtensionsWithOptions(request: $_model.UpdatePostgresExtensionsRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdatePostgresExtensionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBNames)) {
      query["DBNames"] = request.DBNames;
    }

    if (!$dara.isNull(request.extensions)) {
      query["Extensions"] = request.extensions;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdatePostgresExtensions",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdatePostgresExtensionsResponse>(await this.callApi(params, req, runtime), new $_model.UpdatePostgresExtensionsResponse({}));
  }

  /**
   * Updates the version of an extension on a database.
   * 
   * @remarks
   * ### Supported database engines
   * RDS PostgreSQL
   * ### References
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Manage extensions](https://help.aliyun.com/document_detail/2402409.html)
   * 
   * @param request - UpdatePostgresExtensionsRequest
   * @returns UpdatePostgresExtensionsResponse
   */
  async updatePostgresExtensions(request: $_model.UpdatePostgresExtensionsRequest): Promise<$_model.UpdatePostgresExtensionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updatePostgresExtensionsWithOptions(request, runtime);
  }

  /**
   * Modifies the description and retention period of a full backup file.
   * 
   * @remarks
   * ### Supported database engines
   * RDS MySQL
   * ### References
   * A full backup file contains the data of a self-managed MySQL database. You can restore the data of a self-managed MySQL database from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 or MySQL 8.0 instance to an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/251779.html).
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * 
   * @param request - UpdateUserBackupFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpdateUserBackupFileResponse
   */
  async updateUserBackupFileWithOptions(request: $_model.UpdateUserBackupFileRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpdateUserBackupFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.backupId)) {
      query["BackupId"] = request.backupId;
    }

    if (!$dara.isNull(request.comment)) {
      query["Comment"] = request.comment;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.retention)) {
      query["Retention"] = request.retention;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpdateUserBackupFile",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpdateUserBackupFileResponse>(await this.callApi(params, req, runtime), new $_model.UpdateUserBackupFileResponse({}));
  }

  /**
   * Modifies the description and retention period of a full backup file.
   * 
   * @remarks
   * ### Supported database engines
   * RDS MySQL
   * ### References
   * A full backup file contains the data of a self-managed MySQL database. You can restore the data of a self-managed MySQL database from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 or MySQL 8.0 instance to an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/251779.html).
   * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * 
   * @param request - UpdateUserBackupFileRequest
   * @returns UpdateUserBackupFileResponse
   */
  async updateUserBackupFile(request: $_model.UpdateUserBackupFileRequest): Promise<$_model.UpdateUserBackupFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.updateUserBackupFileWithOptions(request, runtime);
  }

  /**
   * Upgrades the major engine version of an ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### Supported database engine
   * MySQL
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Upgrade the major engine version of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96058.html)
   * 
   * @param request - UpgradeDBInstanceEngineVersionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpgradeDBInstanceEngineVersionResponse
   */
  async upgradeDBInstanceEngineVersionWithOptions(request: $_model.UpgradeDBInstanceEngineVersionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpgradeDBInstanceEngineVersionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.clientToken)) {
      query["ClientToken"] = request.clientToken;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.effectiveTime)) {
      query["EffectiveTime"] = request.effectiveTime;
    }

    if (!$dara.isNull(request.engineVersion)) {
      query["EngineVersion"] = request.engineVersion;
    }

    if (!$dara.isNull(request.ownerAccount)) {
      query["OwnerAccount"] = request.ownerAccount;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpgradeDBInstanceEngineVersion",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpgradeDBInstanceEngineVersionResponse>(await this.callApi(params, req, runtime), new $_model.UpgradeDBInstanceEngineVersionResponse({}));
  }

  /**
   * Upgrades the major engine version of an ApsaraDB RDS for MySQL instance.
   * 
   * @remarks
   * ### Supported database engine
   * MySQL
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * [Upgrade the major engine version of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96058.html)
   * 
   * @param request - UpgradeDBInstanceEngineVersionRequest
   * @returns UpgradeDBInstanceEngineVersionResponse
   */
  async upgradeDBInstanceEngineVersion(request: $_model.UpgradeDBInstanceEngineVersionRequest): Promise<$_model.UpgradeDBInstanceEngineVersionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.upgradeDBInstanceEngineVersionWithOptions(request, runtime);
  }

  /**
   * Updates the minor engine version of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Update the minor engine version of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96059.html)
   * *   [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html)
   * *   [Update the minor engine version of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/213582.html)
   * 
   * @param request - UpgradeDBInstanceKernelVersionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpgradeDBInstanceKernelVersionResponse
   */
  async upgradeDBInstanceKernelVersionWithOptions(request: $_model.UpgradeDBInstanceKernelVersionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpgradeDBInstanceKernelVersionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.switchTime)) {
      query["SwitchTime"] = request.switchTime;
    }

    if (!$dara.isNull(request.targetMinorVersion)) {
      query["TargetMinorVersion"] = request.targetMinorVersion;
    }

    if (!$dara.isNull(request.upgradeTime)) {
      query["UpgradeTime"] = request.upgradeTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpgradeDBInstanceKernelVersion",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpgradeDBInstanceKernelVersionResponse>(await this.callApi(params, req, runtime), new $_model.UpgradeDBInstanceKernelVersionResponse({}));
  }

  /**
   * Updates the minor engine version of an ApsaraDB RDS instance.
   * 
   * @remarks
   * ### Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * *   SQL Server
   * ### References
   * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
   * *   [Update the minor engine version of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/96059.html)
   * *   [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html)
   * *   [Update the minor engine version of an ApsaraDB RDS for SQL Server instance](https://help.aliyun.com/document_detail/213582.html)
   * 
   * @param request - UpgradeDBInstanceKernelVersionRequest
   * @returns UpgradeDBInstanceKernelVersionResponse
   */
  async upgradeDBInstanceKernelVersion(request: $_model.UpgradeDBInstanceKernelVersionRequest): Promise<$_model.UpgradeDBInstanceKernelVersionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.upgradeDBInstanceKernelVersionWithOptions(request, runtime);
  }

  /**
   * Initiates a task to upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### Supported database engine
   * PostgreSQL
   * ### References
   * Fees are generated if the call is successful. Before you call this operation, read the following documentation and make sure that you fully understand the billing rules, prerequisites, and impacts of this operation.
   * [Upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/203309.html)
   * 
   * @param request - UpgradeDBInstanceMajorVersionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpgradeDBInstanceMajorVersionResponse
   */
  async upgradeDBInstanceMajorVersionWithOptions(request: $_model.UpgradeDBInstanceMajorVersionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpgradeDBInstanceMajorVersionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.collectStatMode)) {
      query["CollectStatMode"] = request.collectStatMode;
    }

    if (!$dara.isNull(request.DBInstanceClass)) {
      query["DBInstanceClass"] = request.DBInstanceClass;
    }

    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBInstanceStorage)) {
      query["DBInstanceStorage"] = request.DBInstanceStorage;
    }

    if (!$dara.isNull(request.DBInstanceStorageType)) {
      query["DBInstanceStorageType"] = request.DBInstanceStorageType;
    }

    if (!$dara.isNull(request.instanceNetworkType)) {
      query["InstanceNetworkType"] = request.instanceNetworkType;
    }

    if (!$dara.isNull(request.payType)) {
      query["PayType"] = request.payType;
    }

    if (!$dara.isNull(request.period)) {
      query["Period"] = request.period;
    }

    if (!$dara.isNull(request.privateIpAddress)) {
      query["PrivateIpAddress"] = request.privateIpAddress;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.switchOver)) {
      query["SwitchOver"] = request.switchOver;
    }

    if (!$dara.isNull(request.switchTime)) {
      query["SwitchTime"] = request.switchTime;
    }

    if (!$dara.isNull(request.switchTimeMode)) {
      query["SwitchTimeMode"] = request.switchTimeMode;
    }

    if (!$dara.isNull(request.targetMajorVersion)) {
      query["TargetMajorVersion"] = request.targetMajorVersion;
    }

    if (!$dara.isNull(request.upgradeMode)) {
      query["UpgradeMode"] = request.upgradeMode;
    }

    if (!$dara.isNull(request.usedTime)) {
      query["UsedTime"] = request.usedTime;
    }

    if (!$dara.isNull(request.VPCId)) {
      query["VPCId"] = request.VPCId;
    }

    if (!$dara.isNull(request.vSwitchId)) {
      query["VSwitchId"] = request.vSwitchId;
    }

    if (!$dara.isNull(request.zoneId)) {
      query["ZoneId"] = request.zoneId;
    }

    if (!$dara.isNull(request.zoneIdSlave1)) {
      query["ZoneIdSlave1"] = request.zoneIdSlave1;
    }

    if (!$dara.isNull(request.zoneIdSlave2)) {
      query["ZoneIdSlave2"] = request.zoneIdSlave2;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpgradeDBInstanceMajorVersion",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpgradeDBInstanceMajorVersionResponse>(await this.callApi(params, req, runtime), new $_model.UpgradeDBInstanceMajorVersionResponse({}));
  }

  /**
   * Initiates a task to upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### Supported database engine
   * PostgreSQL
   * ### References
   * Fees are generated if the call is successful. Before you call this operation, read the following documentation and make sure that you fully understand the billing rules, prerequisites, and impacts of this operation.
   * [Upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/203309.html)
   * 
   * @param request - UpgradeDBInstanceMajorVersionRequest
   * @returns UpgradeDBInstanceMajorVersionResponse
   */
  async upgradeDBInstanceMajorVersion(request: $_model.UpgradeDBInstanceMajorVersionRequest): Promise<$_model.UpgradeDBInstanceMajorVersionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.upgradeDBInstanceMajorVersionWithOptions(request, runtime);
  }

  /**
   * Performs a precheck before the upgrade of the major engine version of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### Supported database engine
   * PostgreSQL
   * ### References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/203309.html)
   * 
   * @param request - UpgradeDBInstanceMajorVersionPrecheckRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpgradeDBInstanceMajorVersionPrecheckResponse
   */
  async upgradeDBInstanceMajorVersionPrecheckWithOptions(request: $_model.UpgradeDBInstanceMajorVersionPrecheckRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpgradeDBInstanceMajorVersionPrecheckResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.targetMajorVersion)) {
      query["TargetMajorVersion"] = request.targetMajorVersion;
    }

    if (!$dara.isNull(request.upgradeMode)) {
      query["UpgradeMode"] = request.upgradeMode;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpgradeDBInstanceMajorVersionPrecheck",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpgradeDBInstanceMajorVersionPrecheckResponse>(await this.callApi(params, req, runtime), new $_model.UpgradeDBInstanceMajorVersionPrecheckResponse({}));
  }

  /**
   * Performs a precheck before the upgrade of the major engine version of an ApsaraDB RDS for PostgreSQL instance.
   * 
   * @remarks
   * ### Supported database engine
   * PostgreSQL
   * ### References
   * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * [Upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/203309.html)
   * 
   * @param request - UpgradeDBInstanceMajorVersionPrecheckRequest
   * @returns UpgradeDBInstanceMajorVersionPrecheckResponse
   */
  async upgradeDBInstanceMajorVersionPrecheck(request: $_model.UpgradeDBInstanceMajorVersionPrecheckRequest): Promise<$_model.UpgradeDBInstanceMajorVersionPrecheckResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.upgradeDBInstanceMajorVersionPrecheckWithOptions(request, runtime);
  }

  /**
   * Upgrades the database proxy version of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * >  Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Upgrade the database proxy version of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/197465.html)
   * *   [Upgrade the database proxy version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/418469.html)
   * 
   * @param request - UpgradeDBProxyInstanceKernelVersionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UpgradeDBProxyInstanceKernelVersionResponse
   */
  async upgradeDBProxyInstanceKernelVersionWithOptions(request: $_model.UpgradeDBProxyInstanceKernelVersionRequest, runtime: $dara.RuntimeOptions): Promise<$_model.UpgradeDBProxyInstanceKernelVersionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.DBInstanceId)) {
      query["DBInstanceId"] = request.DBInstanceId;
    }

    if (!$dara.isNull(request.DBProxyEngineType)) {
      query["DBProxyEngineType"] = request.DBProxyEngineType;
    }

    if (!$dara.isNull(request.ownerId)) {
      query["OwnerId"] = request.ownerId;
    }

    if (!$dara.isNull(request.resourceOwnerAccount)) {
      query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
    }

    if (!$dara.isNull(request.resourceOwnerId)) {
      query["ResourceOwnerId"] = request.resourceOwnerId;
    }

    if (!$dara.isNull(request.switchTime)) {
      query["SwitchTime"] = request.switchTime;
    }

    if (!$dara.isNull(request.upgradeTime)) {
      query["UpgradeTime"] = request.upgradeTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UpgradeDBProxyInstanceKernelVersion",
      version: "2014-08-15",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<$_model.UpgradeDBProxyInstanceKernelVersionResponse>(await this.callApi(params, req, runtime), new $_model.UpgradeDBProxyInstanceKernelVersionResponse({}));
  }

  /**
   * Upgrades the database proxy version of an instance.
   * 
   * @remarks
   * ### [](#)Supported database engines
   * *   MySQL
   * *   PostgreSQL
   * ### [](#)References
   * >  Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
   * *   [Upgrade the database proxy version of an ApsaraDB RDS for MySQL instance](https://help.aliyun.com/document_detail/197465.html)
   * *   [Upgrade the database proxy version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/418469.html)
   * 
   * @param request - UpgradeDBProxyInstanceKernelVersionRequest
   * @returns UpgradeDBProxyInstanceKernelVersionResponse
   */
  async upgradeDBProxyInstanceKernelVersion(request: $_model.UpgradeDBProxyInstanceKernelVersionRequest): Promise<$_model.UpgradeDBProxyInstanceKernelVersionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.upgradeDBProxyInstanceKernelVersionWithOptions(request, runtime);
  }

}
