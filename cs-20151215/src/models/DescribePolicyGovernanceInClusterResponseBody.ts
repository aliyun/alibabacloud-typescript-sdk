// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DescribePolicyGovernanceInClusterResponseBodyAdmitLogLog extends $dara.Model {
  /**
   * @remarks
   * The cluster ID.
   * 
   * @example
   * c8155823d057948c69a****
   */
  clusterId?: string;
  /**
   * @remarks
   * The policy type.
   * 
   * @example
   * ACKAllowedRepos
   */
  constraintKind?: string;
  /**
   * @remarks
   * The message that appears when an event is generated by a policy.
   * 
   * @example
   * d4hdhs*****
   */
  msg?: string;
  /**
   * @remarks
   * The resource type.
   * 
   * @example
   * Pod
   */
  resourceKind?: string;
  /**
   * @remarks
   * The resource name.
   * 
   * @example
   * nginx-deployment-basic2-84ccb74bfc-df22p
   */
  resourceName?: string;
  /**
   * @remarks
   * The namespace to which the resource belongs.
   * 
   * @example
   * default
   */
  resourceNamespace?: string;
  static names(): { [key: string]: string } {
    return {
      clusterId: 'cluster_id',
      constraintKind: 'constraint_kind',
      msg: 'msg',
      resourceKind: 'resource_kind',
      resourceName: 'resource_name',
      resourceNamespace: 'resource_namespace',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clusterId: 'string',
      constraintKind: 'string',
      msg: 'string',
      resourceKind: 'string',
      resourceName: 'string',
      resourceNamespace: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGovernanceInClusterResponseBodyAdmitLog extends $dara.Model {
  /**
   * @remarks
   * The number of audit log entries.
   * 
   * @example
   * 100
   */
  count?: number;
  /**
   * @remarks
   * The audit log content.
   */
  log?: DescribePolicyGovernanceInClusterResponseBodyAdmitLogLog;
  /**
   * @remarks
   * The status of the query. Valid values:
   * 
   * *   `Complete`: The query succeeded and the complete query result is returned.
   * *   `Incomplete`: The query succeeded but the query result is incomplete. To obtain the complete query result, you must repeat the request.
   * 
   * @example
   * Complete
   */
  progress?: string;
  static names(): { [key: string]: string } {
    return {
      count: 'count',
      log: 'log',
      progress: 'progress',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: 'number',
      log: DescribePolicyGovernanceInClusterResponseBodyAdmitLogLog,
      progress: 'string',
    };
  }

  validate() {
    if(this.log && typeof (this.log as any).validate === 'function') {
      (this.log as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGovernanceInClusterResponseBodyOnState extends $dara.Model {
  /**
   * @remarks
   * The number of policies that are enabled.
   * 
   * @example
   * 3
   */
  enabledCount?: number;
  /**
   * @remarks
   * The severity level of the policy.
   * 
   * @example
   * high
   */
  severity?: string;
  /**
   * @remarks
   * The total number of policies of the severity level.
   * 
   * @example
   * 8
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      enabledCount: 'enabled_count',
      severity: 'severity',
      total: 'total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      enabledCount: 'number',
      severity: 'string',
      total: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGovernanceInClusterResponseBodyTotalViolationsDeny extends $dara.Model {
  /**
   * @remarks
   * The severity level of the policy.
   * 
   * @example
   * high
   */
  severity?: string;
  /**
   * @remarks
   * The number of blocking events that are triggered.
   * 
   * @example
   * 0
   */
  violations?: number;
  static names(): { [key: string]: string } {
    return {
      severity: 'severity',
      violations: 'violations',
    };
  }

  static types(): { [key: string]: any } {
    return {
      severity: 'string',
      violations: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGovernanceInClusterResponseBodyTotalViolationsWarn extends $dara.Model {
  /**
   * @remarks
   * The severity level of the policy.
   * 
   * @example
   * low
   */
  severity?: string;
  /**
   * @remarks
   * The number of alerting events that are triggered.
   * 
   * @example
   * 5
   */
  violations?: number;
  static names(): { [key: string]: string } {
    return {
      severity: 'severity',
      violations: 'violations',
    };
  }

  static types(): { [key: string]: any } {
    return {
      severity: 'string',
      violations: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGovernanceInClusterResponseBodyTotalViolations extends $dara.Model {
  /**
   * @remarks
   * Details about the blocking events that are triggered by the policies of each severity level.
   */
  deny?: DescribePolicyGovernanceInClusterResponseBodyTotalViolationsDeny;
  /**
   * @remarks
   * Details about the alerting events that are triggered by the policies of each severity level.
   */
  warn?: DescribePolicyGovernanceInClusterResponseBodyTotalViolationsWarn;
  static names(): { [key: string]: string } {
    return {
      deny: 'deny',
      warn: 'warn',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deny: DescribePolicyGovernanceInClusterResponseBodyTotalViolationsDeny,
      warn: DescribePolicyGovernanceInClusterResponseBodyTotalViolationsWarn,
    };
  }

  validate() {
    if(this.deny && typeof (this.deny as any).validate === 'function') {
      (this.deny as any).validate();
    }
    if(this.warn && typeof (this.warn as any).validate === 'function') {
      (this.warn as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGovernanceInClusterResponseBodyViolationsDeny extends $dara.Model {
  /**
   * @remarks
   * The policy description.
   * 
   * @example
   * Requires container images to begin with a repo string from a specified list.
   */
  policyDescription?: string;
  /**
   * @remarks
   * The policy name.
   * 
   * @example
   * policy-gatekeeper-ackallowedrepos
   */
  policyName?: string;
  /**
   * @remarks
   * The severity level of the policy.
   * 
   * @example
   * high
   */
  severity?: string;
  /**
   * @remarks
   * The total number of blocking events that are triggered by the policy.
   * 
   * @example
   * 11
   */
  violations?: number;
  static names(): { [key: string]: string } {
    return {
      policyDescription: 'policyDescription',
      policyName: 'policyName',
      severity: 'severity',
      violations: 'violations',
    };
  }

  static types(): { [key: string]: any } {
    return {
      policyDescription: 'string',
      policyName: 'string',
      severity: 'string',
      violations: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGovernanceInClusterResponseBodyViolationsWarn extends $dara.Model {
  /**
   * @remarks
   * The policy description.
   * 
   * @example
   * Controls Linux capabilities.
   */
  policyDescription?: string;
  /**
   * @remarks
   * The policy name.
   * 
   * @example
   * policy-gatekeeper-ackpspcapabilities
   */
  policyName?: string;
  /**
   * @remarks
   * The severity level of the policy.
   * 
   * @example
   * high
   */
  severity?: string;
  /**
   * @remarks
   * The total number of alerting events that are triggered by the policy.
   * 
   * @example
   * 81
   */
  violations?: number;
  static names(): { [key: string]: string } {
    return {
      policyDescription: 'policyDescription',
      policyName: 'policyName',
      severity: 'severity',
      violations: 'violations',
    };
  }

  static types(): { [key: string]: any } {
    return {
      policyDescription: 'string',
      policyName: 'string',
      severity: 'string',
      violations: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGovernanceInClusterResponseBodyViolations extends $dara.Model {
  /**
   * @remarks
   * Details about the blocking events that are triggered by each policy.
   */
  deny?: DescribePolicyGovernanceInClusterResponseBodyViolationsDeny;
  /**
   * @remarks
   * Details about the alerting events that are triggered by the policies of each severity level.
   */
  warn?: DescribePolicyGovernanceInClusterResponseBodyViolationsWarn;
  static names(): { [key: string]: string } {
    return {
      deny: 'deny',
      warn: 'warn',
    };
  }

  static types(): { [key: string]: any } {
    return {
      deny: DescribePolicyGovernanceInClusterResponseBodyViolationsDeny,
      warn: DescribePolicyGovernanceInClusterResponseBodyViolationsWarn,
    };
  }

  validate() {
    if(this.deny && typeof (this.deny as any).validate === 'function') {
      (this.deny as any).validate();
    }
    if(this.warn && typeof (this.warn as any).validate === 'function') {
      (this.warn as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePolicyGovernanceInClusterResponseBody extends $dara.Model {
  /**
   * @remarks
   * The audit logs of the policies in the cluster.
   */
  admitLog?: DescribePolicyGovernanceInClusterResponseBodyAdmitLog;
  /**
   * @remarks
   * Details about the policies of different severity levels that are enabled for the cluster.
   */
  onState?: DescribePolicyGovernanceInClusterResponseBodyOnState[];
  /**
   * @remarks
   * Details about the blocking and alerting events that are triggered by policies of different severity levels.
   */
  totalViolations?: DescribePolicyGovernanceInClusterResponseBodyTotalViolations;
  /**
   * @remarks
   * Details about the blocking and alerting events that are triggered by different policies.
   */
  violations?: DescribePolicyGovernanceInClusterResponseBodyViolations;
  static names(): { [key: string]: string } {
    return {
      admitLog: 'admit_log',
      onState: 'on_state',
      totalViolations: 'totalViolations',
      violations: 'violations',
    };
  }

  static types(): { [key: string]: any } {
    return {
      admitLog: DescribePolicyGovernanceInClusterResponseBodyAdmitLog,
      onState: { 'type': 'array', 'itemType': DescribePolicyGovernanceInClusterResponseBodyOnState },
      totalViolations: DescribePolicyGovernanceInClusterResponseBodyTotalViolations,
      violations: DescribePolicyGovernanceInClusterResponseBodyViolations,
    };
  }

  validate() {
    if(this.admitLog && typeof (this.admitLog as any).validate === 'function') {
      (this.admitLog as any).validate();
    }
    if(Array.isArray(this.onState)) {
      $dara.Model.validateArray(this.onState);
    }
    if(this.totalViolations && typeof (this.totalViolations as any).validate === 'function') {
      (this.totalViolations as any).validate();
    }
    if(this.violations && typeof (this.violations as any).validate === 'function') {
      (this.violations as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

