// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi extends $dara.Model {
  /**
   * @remarks
   * The ID of the API.
   * 
   * @example
   * eb6e54c1576d41149746e8e69b0a0792
   */
  apiId?: string;
  /**
   * @remarks
   * The name of the API.
   * 
   * @example
   * gw_rado_tissot_
   */
  apiName?: string;
  /**
   * @remarks
   * The deployment time. Format: yyyy-mm-ddhh:mm:ss.
   * 
   * @example
   * 2021-06-1113:57:38
   */
  deployedTime?: string;
  /**
   * @remarks
   * The description of the API.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The ID of the API group to which the API belongs. This ID is generated by the system and globally unique.
   * 
   * @example
   * 3013a55c0c44483f984d26df27120513
   */
  groupId?: string;
  /**
   * @remarks
   * The name of the API group.
   * 
   * @example
   * DMS_DEFAULT_GROUP_408589
   */
  groupName?: string;
  /**
   * @remarks
   * The last modification time (UTC) of the API.
   * 
   * @example
   * 2021-06-11T13:57:38+08:00
   */
  modifiedTime?: string;
  /**
   * @remarks
   * The time when the API was purchased.
   * 
   * @example
   * 2021-06-11T13:57:38+08:00
   */
  purchasedTime?: string;
  /**
   * @remarks
   * The ID of the region in which the API is located.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The name of the runtime environment. Valid values:
   * 
   * *   **RELEASE**
   * *   **PRE**
   * *   **TEST**
   * 
   * @example
   * TEST
   */
  stageName?: string;
  /**
   * @remarks
   * Indicates whether the API is public. Valid values:
   * 
   * *   **PUBLIC**
   * *   **PRIVATE**
   * 
   * @example
   * PUBLIC
   */
  visibility?: string;
  static names(): { [key: string]: string } {
    return {
      apiId: 'ApiId',
      apiName: 'ApiName',
      deployedTime: 'DeployedTime',
      description: 'Description',
      groupId: 'GroupId',
      groupName: 'GroupName',
      modifiedTime: 'ModifiedTime',
      purchasedTime: 'PurchasedTime',
      regionId: 'RegionId',
      stageName: 'StageName',
      visibility: 'Visibility',
    };
  }

  static types(): { [key: string]: any } {
    return {
      apiId: 'string',
      apiName: 'string',
      deployedTime: 'string',
      description: 'string',
      groupId: 'string',
      groupName: 'string',
      modifiedTime: 'string',
      purchasedTime: 'string',
      regionId: 'string',
      stageName: 'string',
      visibility: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

