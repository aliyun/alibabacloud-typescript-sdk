// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';
import { DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedAppTag } from "./DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedAppTag";


export class DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp extends $dara.Model {
  /**
   * @remarks
   * The application description.
   * 
   * @example
   * Production application
   */
  appDescription?: string;
  /**
   * @remarks
   * The application ID, which is generated by the system and globally unique.
   * 
   * @example
   * 2386789
   */
  appId?: number;
  /**
   * @remarks
   * The application name.
   * 
   * @example
   * Weather
   */
  appName?: string;
  /**
   * @remarks
   * The application name.
   * 
   * @example
   * 2018-10-05T16:00:00Z
   */
  authVaildTime?: string;
  /**
   * @remarks
   * The authorization source. Valid values:
   * 
   * *   **CONSOLE**
   * *   **API**
   * 
   * @example
   * CONSOLE
   */
  authorizationSource?: string;
  /**
   * @remarks
   * The authorization time (UTC).
   * 
   * @example
   * 2016-07-21T06:17:20Z
   */
  authorizedTime?: string;
  /**
   * @remarks
   * The authorization description.
   * 
   * @example
   * Queries weather based on the region name
   */
  description?: string;
  /**
   * @remarks
   * The authorizer. Valid values:
   * 
   * *   **PROVIDER**: API owner
   * *   **CONSUMER**: API caller
   * 
   * @example
   * PROVIDER
   */
  operator?: string;
  /**
   * @remarks
   * The environment alias.
   * 
   * @example
   * Production
   */
  stageAlias?: string;
  /**
   * @remarks
   * The environment to which the API is published. Valid values:
   * 
   * *   **RELEASE**: the production environment
   * *   **PRE**: the staging environment
   * *   **TEST**: the test environment
   * 
   * @example
   * RELEASE
   */
  stageName?: string;
  /**
   * @remarks
   * The key of the tag.
   */
  tag?: DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedAppTag;
  static names(): { [key: string]: string } {
    return {
      appDescription: 'AppDescription',
      appId: 'AppId',
      appName: 'AppName',
      authVaildTime: 'AuthVaildTime',
      authorizationSource: 'AuthorizationSource',
      authorizedTime: 'AuthorizedTime',
      description: 'Description',
      operator: 'Operator',
      stageAlias: 'StageAlias',
      stageName: 'StageName',
      tag: 'Tag',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appDescription: 'string',
      appId: 'number',
      appName: 'string',
      authVaildTime: 'string',
      authorizationSource: 'string',
      authorizedTime: 'string',
      description: 'string',
      operator: 'string',
      stageAlias: 'string',
      stageName: 'string',
      tag: DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedAppTag,
    };
  }

  validate() {
    if(this.tag && typeof (this.tag as any).validate === 'function') {
      (this.tag as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

