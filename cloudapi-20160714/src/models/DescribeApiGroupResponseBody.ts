// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DescribeApiGroupResponseBodyCustomDomainsDomainItem extends $dara.Model {
  /**
   * @remarks
   * The alias of the associated environment.
   * 
   * @example
   * TEST1
   */
  bindStageAlias?: string;
  /**
   * @remarks
   * The environment in which the associated API group runs.
   * 
   * @example
   * TEST
   */
  bindStageName?: string;
  /**
   * @remarks
   * The SSL certificate ID, which is automatically generated by the system.
   * 
   * @example
   * 6EF60BEC-0242-43AF-BB20-270359FB54A7
   */
  certificateId?: string;
  /**
   * @remarks
   * The name of the SSL certificate.
   * 
   * @example
   * myCertificate
   */
  certificateName?: string;
  /**
   * @remarks
   * The time when the certificate expires.
   * 
   * @example
   * 2635123476000
   */
  certificateValidEnd?: number;
  /**
   * @remarks
   * The time when the certificate takes effect.
   * 
   * @example
   * 1689043476000
   */
  certificateValidStart?: number;
  /**
   * @remarks
   * The type of the custom domain name.
   * 
   * @example
   * intranet
   */
  customDomainType?: string;
  /**
   * @remarks
   * The binding status of the custom domain name. Valid values:
   * 
   * *   **BINDING**: The domain name is bound.
   * *   **BOUND**: The domain name is not bound.
   * 
   * @example
   * BINDING
   */
  domainBindingStatus?: string;
  /**
   * @remarks
   * The domain name resolution status. Valid values:
   * 
   * *   **RESOLVED**
   * *   **UNRESOLVED**
   * 
   * @example
   * RESOLVED
   */
  domainCNAMEStatus?: string;
  /**
   * @remarks
   * The validity status of the domain name. Valid values:
   * 
   * *   **NORMAL**: The domain name is valid.
   * *   **ABNORMAL**: The domain name is invalid. This status affects API calls and needs to be rectified as soon as possible.
   * 
   * @example
   * ABNORMAL
   */
  domainLegalStatus?: string;
  /**
   * @remarks
   * The domain name.
   * 
   * @example
   * api.demo.com
   */
  domainName?: string;
  /**
   * @remarks
   * Remarks about the domain name, such as the cause of an exception.
   * 
   * @example
   * Indicates that the domain name does not have an ICP filing.
   */
  domainRemark?: string;
  /**
   * @remarks
   * The status of the domain that uses the WebSocket feature.
   * 
   * @example
   * CLOSE
   */
  domainWebSocketStatus?: string;
  /**
   * @remarks
   * Indicates whether to redirect HTTP requests to HTTPS.
   * 
   * @example
   * false
   */
  isHttpRedirectToHttps?: boolean;
  /**
   * @remarks
   * The wildcard domain name mode.
   * 
   * @example
   * [\\"{test}.test.com\\"]
   */
  wildcardDomainPatterns?: string;
  static names(): { [key: string]: string } {
    return {
      bindStageAlias: 'BindStageAlias',
      bindStageName: 'BindStageName',
      certificateId: 'CertificateId',
      certificateName: 'CertificateName',
      certificateValidEnd: 'CertificateValidEnd',
      certificateValidStart: 'CertificateValidStart',
      customDomainType: 'CustomDomainType',
      domainBindingStatus: 'DomainBindingStatus',
      domainCNAMEStatus: 'DomainCNAMEStatus',
      domainLegalStatus: 'DomainLegalStatus',
      domainName: 'DomainName',
      domainRemark: 'DomainRemark',
      domainWebSocketStatus: 'DomainWebSocketStatus',
      isHttpRedirectToHttps: 'IsHttpRedirectToHttps',
      wildcardDomainPatterns: 'WildcardDomainPatterns',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bindStageAlias: 'string',
      bindStageName: 'string',
      certificateId: 'string',
      certificateName: 'string',
      certificateValidEnd: 'number',
      certificateValidStart: 'number',
      customDomainType: 'string',
      domainBindingStatus: 'string',
      domainCNAMEStatus: 'string',
      domainLegalStatus: 'string',
      domainName: 'string',
      domainRemark: 'string',
      domainWebSocketStatus: 'string',
      isHttpRedirectToHttps: 'boolean',
      wildcardDomainPatterns: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiGroupResponseBodyCustomDomains extends $dara.Model {
  domainItem?: DescribeApiGroupResponseBodyCustomDomainsDomainItem[];
  static names(): { [key: string]: string } {
    return {
      domainItem: 'DomainItem',
    };
  }

  static types(): { [key: string]: any } {
    return {
      domainItem: { 'type': 'array', 'itemType': DescribeApiGroupResponseBodyCustomDomainsDomainItem },
    };
  }

  validate() {
    if(Array.isArray(this.domainItem)) {
      $dara.Model.validateArray(this.domainItem);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiGroupResponseBodyStageItemsStageInfo extends $dara.Model {
  /**
   * @remarks
   * The environment description.
   * 
   * @example
   * MYTEST
   */
  description?: string;
  /**
   * @remarks
   * The environment ID.
   * 
   * @example
   * 123e8dc7bbe01613b5b1d726c2a7888e
   */
  stageId?: string;
  /**
   * @remarks
   * The environment name.
   * 
   * @example
   * TEST
   */
  stageName?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      stageId: 'StageId',
      stageName: 'StageName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      stageId: 'string',
      stageName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiGroupResponseBodyStageItems extends $dara.Model {
  stageInfo?: DescribeApiGroupResponseBodyStageItemsStageInfo[];
  static names(): { [key: string]: string } {
    return {
      stageInfo: 'StageInfo',
    };
  }

  static types(): { [key: string]: any } {
    return {
      stageInfo: { 'type': 'array', 'itemType': DescribeApiGroupResponseBodyStageItemsStageInfo },
    };
  }

  validate() {
    if(Array.isArray(this.stageInfo)) {
      $dara.Model.validateArray(this.stageInfo);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeApiGroupResponseBody extends $dara.Model {
  /**
   * @remarks
   * The root path of the API.
   * 
   * @example
   * /qqq
   */
  basePath?: string;
  /**
   * @remarks
   * The billing status of the API group.
   * 
   * *   **NORMAL**: The API group is normal.
   * *   **LOCKED**: The API group is locked due to overdue payments.
   * 
   * @example
   * NORMAL
   */
  billingStatus?: string;
  /**
   * @remarks
   * The products on Alibaba Cloud Marketplace.
   * 
   * @example
   * false
   */
  cloudMarketCommodity?: boolean;
  /**
   * @remarks
   * The CloudMonitor application group.
   * 
   * @example
   * 217008423
   */
  cmsMonitorGroup?: string;
  /**
   * @remarks
   * The list of associated tags. Separate multiple tags with commas (,).
   * 
   * @example
   * depart:dep1
   */
  compatibleFlags?: string;
  /**
   * @remarks
   * The creation time (UTC) of the API group.
   * 
   * @example
   * 2016-08-01T06:53:02Z
   */
  createdTime?: string;
  /**
   * @remarks
   * The custom appcode configuration.
   * 
   * @example
   * {"location":"HEADER","name":"myAppCodeHeader"}
   */
  customAppCodeConfig?: string;
  /**
   * @remarks
   * The details about the custom domain name.
   */
  customDomains?: DescribeApiGroupResponseBodyCustomDomains;
  /**
   * @remarks
   * The custom trace configuration.
   * 
   * @example
   * {\\"parameterLocation\\":\\"HEADER\\",\\"parameterName\\":\\"traceId\\"}
   */
  customTraceConfig?: string;
  /**
   * @remarks
   * The list of custom configuration items.
   * 
   * @example
   * removeResponseServerHeader
   */
  customerConfigs?: string;
  /**
   * @remarks
   * The type of exclusive instance where the group is located
   * 
   * - VPC fusion type exclusive instance: vpc_connect
   * - Traditional type exclusive instance: normal
   * 
   * @example
   * normal
   */
  dedicatedInstanceType?: string;
  /**
   * @remarks
   * The default domain name.
   * 
   * @example
   * mkt.api.gaore.com
   */
  defaultDomain?: string;
  /**
   * @remarks
   * The description of the API group.
   * 
   * @example
   * New weather informations.
   */
  description?: string;
  /**
   * @remarks
   * Indicates whether access over the public second-level domain name is enabled. Valid values:
   * 
   * *   true
   * *   false
   * 
   * @example
   * false
   */
  disableInnerDomain?: boolean;
  /**
   * @remarks
   * The ID of the API group. This ID is generated by the system and globally unique.
   * 
   * @example
   * 523e8dc7bbe04613b5b1d726c2a7889d
   */
  groupId?: string;
  /**
   * @remarks
   * The name of the group to which the API belongs.
   * 
   * @example
   * NewWeather
   */
  groupName?: string;
  /**
   * @remarks
   * The HTTPS policy.
   * 
   * @example
   * HTTPS2_TLS1_0
   */
  httpsPolicy?: string;
  /**
   * @remarks
   * The validity status of the API group. Valid values:
   * 
   * *   **NORMAL**: The API group is normal.
   * *   **LOCKED**: The API group is locked because it is not valid.
   * 
   * @example
   * NORMAL
   */
  illegalStatus?: string;
  /**
   * @remarks
   * The ID of the instance.
   * 
   * @example
   * apigateway-cn-v6419k43xxxxx
   */
  instanceId?: string;
  /**
   * @remarks
   * The type of the instance.
   * 
   * *   CLASSIC_SHARED: shared instance that uses the classic network configuration
   * *   VPC_SHARED: shared instance that uses VPC
   * *   VPC_DEDICATED: dedicated instance that uses VPC
   * 
   * @example
   * VPC_SHARED
   */
  instanceType?: string;
  /**
   * @remarks
   * The IPv6 status.
   * 
   * @example
   * UNBIND
   */
  ipv6Status?: string;
  /**
   * @remarks
   * The reason for the failure of the group migration instance task. When the value of the MigrationStatus parameter is Failed, it is not empty.
   * 
   * @example
   * The current instance conflicts with the target instance.
   */
  migrationError?: string;
  /**
   * @remarks
   * Group migration instance task status
   * 
   * - Running
   * - Success
   * - Failed
   * 
   * @example
   * Fail
   */
  migrationStatus?: string;
  /**
   * @remarks
   * The last modification time (UTC) of the API group.
   * 
   * @example
   * 2016-08-01T06:54:32Z
   */
  modifiedTime?: string;
  /**
   * @remarks
   * Specifies whether to pass headers.
   * 
   * @example
   * eagleeye-rpcid,x-b3-traceid
   */
  passthroughHeaders?: string;
  /**
   * @remarks
   * The region to which the API group belongs.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 03442A3D-3B7D-434C-8A95-A5FEB989B519
   */
  requestId?: string;
  /**
   * @remarks
   * The runtime environment information.
   */
  stageItems?: DescribeApiGroupResponseBodyStageItems;
  /**
   * @remarks
   * The status of the API group.
   * 
   * *   **NORMAL**: The API group is normal.
   * *   **DELETE**: The API group is deleted.
   * 
   * @example
   * NORMAL
   */
  status?: string;
  /**
   * @remarks
   * The second-level domain name automatically assigned to the API group.
   * 
   * @example
   * 27d50c0f2e54b359919923d908bb015-cn-hangzhou.alicloudapi.com
   */
  subDomain?: string;
  /**
   * @remarks
   * The upper QPS limit of the API group. The default value is 500. You can increase the upper limit by submitting an application.
   * 
   * @example
   * 500
   */
  trafficLimit?: number;
  /**
   * @remarks
   * The user log settings.
   * 
   * @example
   * {\\"requestBody\\":true,\\"responseBody\\":true,\\"queryString\\":\\"test\\",\\"requestHeaders\\":\\"test\\",\\"responseHeaders\\":\\"test\\",\\"jwtClaims\\":\\"test\\"}
   */
  userLogConfig?: string;
  /**
   * @remarks
   * The VPC domain name.
   * 
   * @example
   * e4****7151954***acbd9f7****1058a-ap-southeast-1-vpc.alicloudapi.com
   */
  vpcDomain?: string;
  /**
   * @remarks
   * The VPC SLB domain name.
   * 
   * @example
   * 257e9d450e924d00b976b0ecfb7184c2-cn-beijing-intranet.alicloudapi.com
   */
  vpcSlbIntranetDomain?: string;
  static names(): { [key: string]: string } {
    return {
      basePath: 'BasePath',
      billingStatus: 'BillingStatus',
      cloudMarketCommodity: 'CloudMarketCommodity',
      cmsMonitorGroup: 'CmsMonitorGroup',
      compatibleFlags: 'CompatibleFlags',
      createdTime: 'CreatedTime',
      customAppCodeConfig: 'CustomAppCodeConfig',
      customDomains: 'CustomDomains',
      customTraceConfig: 'CustomTraceConfig',
      customerConfigs: 'CustomerConfigs',
      dedicatedInstanceType: 'DedicatedInstanceType',
      defaultDomain: 'DefaultDomain',
      description: 'Description',
      disableInnerDomain: 'DisableInnerDomain',
      groupId: 'GroupId',
      groupName: 'GroupName',
      httpsPolicy: 'HttpsPolicy',
      illegalStatus: 'IllegalStatus',
      instanceId: 'InstanceId',
      instanceType: 'InstanceType',
      ipv6Status: 'Ipv6Status',
      migrationError: 'MigrationError',
      migrationStatus: 'MigrationStatus',
      modifiedTime: 'ModifiedTime',
      passthroughHeaders: 'PassthroughHeaders',
      regionId: 'RegionId',
      requestId: 'RequestId',
      stageItems: 'StageItems',
      status: 'Status',
      subDomain: 'SubDomain',
      trafficLimit: 'TrafficLimit',
      userLogConfig: 'UserLogConfig',
      vpcDomain: 'VpcDomain',
      vpcSlbIntranetDomain: 'VpcSlbIntranetDomain',
    };
  }

  static types(): { [key: string]: any } {
    return {
      basePath: 'string',
      billingStatus: 'string',
      cloudMarketCommodity: 'boolean',
      cmsMonitorGroup: 'string',
      compatibleFlags: 'string',
      createdTime: 'string',
      customAppCodeConfig: 'string',
      customDomains: DescribeApiGroupResponseBodyCustomDomains,
      customTraceConfig: 'string',
      customerConfigs: 'string',
      dedicatedInstanceType: 'string',
      defaultDomain: 'string',
      description: 'string',
      disableInnerDomain: 'boolean',
      groupId: 'string',
      groupName: 'string',
      httpsPolicy: 'string',
      illegalStatus: 'string',
      instanceId: 'string',
      instanceType: 'string',
      ipv6Status: 'string',
      migrationError: 'string',
      migrationStatus: 'string',
      modifiedTime: 'string',
      passthroughHeaders: 'string',
      regionId: 'string',
      requestId: 'string',
      stageItems: DescribeApiGroupResponseBodyStageItems,
      status: 'string',
      subDomain: 'string',
      trafficLimit: 'number',
      userLogConfig: 'string',
      vpcDomain: 'string',
      vpcSlbIntranetDomain: 'string',
    };
  }

  validate() {
    if(this.customDomains && typeof (this.customDomains as any).validate === 'function') {
      (this.customDomains as any).validate();
    }
    if(this.stageItems && typeof (this.stageItems as any).validate === 'function') {
      (this.stageItems as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

