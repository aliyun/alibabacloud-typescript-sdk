// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi extends $dara.Model {
  /**
   * @remarks
   * The unique identifier of the API, which is automatically generated by the system.
   * 
   * @example
   * baacc592e63a4cb6a41920d9d3f91f38
   */
  apiId?: string;
  /**
   * @remarks
   * The name of the API
   * 
   * @example
   * AreaWeather
   */
  apiName?: string;
  /**
   * @remarks
   * The expiration time of the authorization in UTC.
   * 
   * @example
   * 2018-10-05T16:00:00Z
   */
  authVaildTime?: string;
  /**
   * @remarks
   * The authorization source. Valid values:
   * 
   * *   **CONSOLE**
   * *   **API**
   * 
   * @example
   * CONSOLE
   */
  authorizationSource?: string;
  /**
   * @remarks
   * The authorization time in UTC.
   * 
   * @example
   * 2016-07-21T06:17:20
   */
  authorizedTime?: string;
  /**
   * @remarks
   * Authorization description
   * 
   * @example
   * Queries weather based on the region name
   */
  description?: string;
  /**
   * @remarks
   * The ID of the API group. This ID is generated by the system and globally unique.
   * 
   * @example
   * 523e8dc7bbe04613b5b1d726c2a7889d
   */
  groupId?: string;
  /**
   * @remarks
   * The name of the API group.
   * 
   * @example
   * Weather
   */
  groupName?: string;
  /**
   * @remarks
   * The authorizer. Valid values:
   * 
   * *   **PROVIDER:** API owner
   * *   **CONSUMER:** API caller
   * 
   * @example
   * PROVIDER
   */
  operator?: string;
  /**
   * @remarks
   * The region to which the API belongs.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The name of the runtime environment. Valid values:
   * 
   * *   **RELEASE**
   * *   **TEST**: the test environment
   * 
   * @example
   * RELEASE
   */
  stageName?: string;
  static names(): { [key: string]: string } {
    return {
      apiId: 'ApiId',
      apiName: 'ApiName',
      authVaildTime: 'AuthVaildTime',
      authorizationSource: 'AuthorizationSource',
      authorizedTime: 'AuthorizedTime',
      description: 'Description',
      groupId: 'GroupId',
      groupName: 'GroupName',
      operator: 'Operator',
      regionId: 'RegionId',
      stageName: 'StageName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      apiId: 'string',
      apiName: 'string',
      authVaildTime: 'string',
      authorizationSource: 'string',
      authorizedTime: 'string',
      description: 'string',
      groupId: 'string',
      groupName: 'string',
      operator: 'string',
      regionId: 'string',
      stageName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

