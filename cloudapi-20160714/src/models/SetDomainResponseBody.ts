// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class SetDomainResponseBody extends $dara.Model {
  /**
   * @remarks
   * The binding status of the custom domain name. Valid values:
   * 
   * *   **BINDING**: The domain name has been bound.
   * *   **BOUND**: The domain name has not been bound.
   * 
   * @example
   * BINDING
   */
  domainBindingStatus?: string;
  /**
   * @remarks
   * The validity status of the domain name. Valid values:
   * 
   * *   **NORMAL**: The domain name is valid.
   * *   **ABNORMAL**: The domain name is invalid. This status affects API calls and must be resolved as soon as possible.
   * 
   * @example
   * NORMAL
   */
  domainLegalStatus?: string;
  /**
   * @remarks
   * The custom domain name.
   * 
   * @example
   * api.demo.com
   */
  domainName?: string;
  /**
   * @remarks
   * The remarks on the domain name, such as the cause of an exception.
   * 
   * @example
   * None
   */
  domainRemark?: string;
  /**
   * @remarks
   * The status of the domain name that uses the WebSocket feature.
   * 
   * @example
   * NORMAL
   */
  domainWebSocketStatus?: string;
  /**
   * @remarks
   * The ID of the API group. This ID is generated by the system and globally unique.
   * 
   * @example
   * 927d50c0f2e54b359919923d908bb015
   */
  groupId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 0AA90E87-3506-5AA6-AFFB-A4D53B4F6231
   */
  requestId?: string;
  /**
   * @remarks
   * The second-level domain name assigned to the API group. This domain name is used to test API calls.
   * 
   * @example
   * xxx-cn-hangzhou.alicloudapi.com
   */
  subDomain?: string;
  static names(): { [key: string]: string } {
    return {
      domainBindingStatus: 'DomainBindingStatus',
      domainLegalStatus: 'DomainLegalStatus',
      domainName: 'DomainName',
      domainRemark: 'DomainRemark',
      domainWebSocketStatus: 'DomainWebSocketStatus',
      groupId: 'GroupId',
      requestId: 'RequestId',
      subDomain: 'SubDomain',
    };
  }

  static types(): { [key: string]: any } {
    return {
      domainBindingStatus: 'string',
      domainLegalStatus: 'string',
      domainName: 'string',
      domainRemark: 'string',
      domainWebSocketStatus: 'string',
      groupId: 'string',
      requestId: 'string',
      subDomain: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

