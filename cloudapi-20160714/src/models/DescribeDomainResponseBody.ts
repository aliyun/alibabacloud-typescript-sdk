// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DescribeDomainResponseBody extends $dara.Model {
  /**
   * @remarks
   * The content of the certificate.
   * 
   * @example
   * xxx
   */
  certificateBody?: string;
  /**
   * @remarks
   * The unique ID of the SSL certificate, which is automatically generated by the system.
   * 
   * @example
   * 6EF60BEC-0242-43AF-BB20-270359FB54A7
   */
  certificateId?: string;
  /**
   * @remarks
   * The name of the SSL certificate.
   * 
   * @example
   * myCertificate
   */
  certificateName?: string;
  /**
   * @remarks
   * The private key of the SSL certificate.
   * 
   * @example
   * xxx
   */
  certificatePrivateKey?: string;
  /**
   * @remarks
   * 证书失效时间戳（毫秒）
   * 
   * @example
   * 1704038400000
   */
  certificateValidEnd?: number;
  /**
   * @remarks
   * 证书生效时间戳（毫秒）
   * 
   * @example
   * 1672502400000
   */
  certificateValidStart?: number;
  /**
   * @remarks
   * The binding status of the custom domain name. Valid values:
   * 
   * *   BINDING: The domain name has been bound.
   * *   BOUND: The domain name has not been bound.
   * 
   * @example
   * BINDING
   */
  domainBindingStatus?: string;
  /**
   * @remarks
   * The domain name resolution status. Valid values:
   * 
   * *   RESOLVED: The domain name has been resolved.
   * *   UNRESOLVED: The domain name has not been resolved.
   * 
   * @example
   * RESOLVED
   */
  domainCNAMEStatus?: string;
  /**
   * @remarks
   * The validity status of the domain name. Valid values:
   * 
   * *   NORMAL
   * *   ABNORMAL: This status affects API calls and must be resolved as soon as possible.
   * 
   * @example
   * NORMAL
   */
  domainLegalStatus?: string;
  /**
   * @remarks
   * The custom domain name.
   * 
   * @example
   * api.demo.com
   */
  domainName?: string;
  /**
   * @remarks
   * Remarks about the domain name, such as the cause of an exception.
   * 
   * @example
   * The domain name does not have an ICP filing.
   */
  domainRemark?: string;
  /**
   * @remarks
   * The status of the domain name that uses WebSocket.
   * 
   * @example
   * NORMAL
   */
  domainWebSocketStatus?: string;
  /**
   * @remarks
   * The ID of the API group. This ID is generated by the system and globally unique.
   * 
   * @example
   * 927d50c0f2e54b359919923d908bb015
   */
  groupId?: string;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * 6EF60BEC-0242-43AF-BB20-270359FB54A7
   */
  requestId?: string;
  /**
   * @remarks
   * The second-level domain name that is automatically assigned to the API group.
   * 
   * @example
   * xxx-cn-hangzhou.alicloudapi.com
   */
  subDomain?: string;
  static names(): { [key: string]: string } {
    return {
      certificateBody: 'CertificateBody',
      certificateId: 'CertificateId',
      certificateName: 'CertificateName',
      certificatePrivateKey: 'CertificatePrivateKey',
      certificateValidEnd: 'CertificateValidEnd',
      certificateValidStart: 'CertificateValidStart',
      domainBindingStatus: 'DomainBindingStatus',
      domainCNAMEStatus: 'DomainCNAMEStatus',
      domainLegalStatus: 'DomainLegalStatus',
      domainName: 'DomainName',
      domainRemark: 'DomainRemark',
      domainWebSocketStatus: 'DomainWebSocketStatus',
      groupId: 'GroupId',
      requestId: 'RequestId',
      subDomain: 'SubDomain',
    };
  }

  static types(): { [key: string]: any } {
    return {
      certificateBody: 'string',
      certificateId: 'string',
      certificateName: 'string',
      certificatePrivateKey: 'string',
      certificateValidEnd: 'number',
      certificateValidStart: 'number',
      domainBindingStatus: 'string',
      domainCNAMEStatus: 'string',
      domainLegalStatus: 'string',
      domainName: 'string',
      domainRemark: 'string',
      domainWebSocketStatus: 'string',
      groupId: 'string',
      requestId: 'string',
      subDomain: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

