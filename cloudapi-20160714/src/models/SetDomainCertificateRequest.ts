// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class SetDomainCertificateRequest extends $dara.Model {
  /**
   * @remarks
   * The content of the CA certificate.
   * 
   * @example
   * Content of the CA certificate
   */
  caCertificateBody?: string;
  /**
   * @remarks
   * The content of the certificate.
   * 
   * @example
   * For more information, see the following request examples
   */
  certificateBody?: string;
  /**
   * @remarks
   * The name of the SSL certificate.
   * 
   * This parameter is required.
   * 
   * @example
   * test_cert
   */
  certificateName?: string;
  /**
   * @remarks
   * The private key of the SSL certificate.
   * 
   * @example
   * For more information, see the following request examples
   */
  certificatePrivateKey?: string;
  /**
   * @remarks
   * If pass ssl_client_s_dn of the cert to backend header \\"X-Client-S-Dn\\".
   * 
   * @example
   * True
   */
  clientCertSDnPassThrough?: boolean;
  /**
   * @remarks
   * The custom domain name.
   * 
   * This parameter is required.
   * 
   * @example
   * api.demo.com
   */
  domainName?: string;
  /**
   * @remarks
   * The ID of the API group. This ID is generated by the system and globally unique.
   * 
   * This parameter is required.
   * 
   * @example
   * 927d50c0f2e54b359919923d908bb015
   */
  groupId?: string;
  securityToken?: string;
  /**
   * @remarks
   * If enable ssl OCSP cache.
   * 
   * @example
   * True
   */
  sslOcspCacheEnable?: boolean;
  /**
   * @remarks
   * If enable ssl OCSP.
   * 
   * @example
   * True
   */
  sslOcspEnable?: boolean;
  /**
   * @remarks
   * The certificate verification depth.
   * 
   * @example
   * 2
   */
  sslVerifyDepth?: string;
  static names(): { [key: string]: string } {
    return {
      caCertificateBody: 'CaCertificateBody',
      certificateBody: 'CertificateBody',
      certificateName: 'CertificateName',
      certificatePrivateKey: 'CertificatePrivateKey',
      clientCertSDnPassThrough: 'ClientCertSDnPassThrough',
      domainName: 'DomainName',
      groupId: 'GroupId',
      securityToken: 'SecurityToken',
      sslOcspCacheEnable: 'SslOcspCacheEnable',
      sslOcspEnable: 'SslOcspEnable',
      sslVerifyDepth: 'SslVerifyDepth',
    };
  }

  static types(): { [key: string]: any } {
    return {
      caCertificateBody: 'string',
      certificateBody: 'string',
      certificateName: 'string',
      certificatePrivateKey: 'string',
      clientCertSDnPassThrough: 'boolean',
      domainName: 'string',
      groupId: 'string',
      securityToken: 'string',
      sslOcspCacheEnable: 'boolean',
      sslOcspEnable: 'boolean',
      sslVerifyDepth: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

