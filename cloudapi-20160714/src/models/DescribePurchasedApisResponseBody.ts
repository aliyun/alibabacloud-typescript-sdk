// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi extends $dara.Model {
  /**
   * @remarks
   * The ID of the API.
   * 
   * @example
   * eb6e54c1576d41149746e8e69b0a0792
   */
  apiId?: string;
  /**
   * @remarks
   * The name of the API.
   * 
   * @example
   * gw_rado_tissot_
   */
  apiName?: string;
  /**
   * @remarks
   * The deployment time. Format: yyyy-mm-ddhh:mm:ss.
   * 
   * @example
   * 2021-06-1113:57:38
   */
  deployedTime?: string;
  /**
   * @remarks
   * The description of the API.
   * 
   * @example
   * test
   */
  description?: string;
  /**
   * @remarks
   * The ID of the API group to which the API belongs. This ID is generated by the system and globally unique.
   * 
   * @example
   * 3013a55c0c44483f984d26df27120513
   */
  groupId?: string;
  /**
   * @remarks
   * The name of the API group.
   * 
   * @example
   * DMS_DEFAULT_GROUP_408589
   */
  groupName?: string;
  /**
   * @remarks
   * The last modification time (UTC) of the API.
   * 
   * @example
   * 2021-06-11T13:57:38+08:00
   */
  modifiedTime?: string;
  /**
   * @remarks
   * The time when the API was purchased.
   * 
   * @example
   * 2021-06-11T13:57:38+08:00
   */
  purchasedTime?: string;
  /**
   * @remarks
   * The ID of the region in which the API is located.
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  /**
   * @remarks
   * The name of the runtime environment. Valid values:
   * 
   * *   **RELEASE**
   * *   **PRE**
   * *   **TEST**
   * 
   * @example
   * TEST
   */
  stageName?: string;
  /**
   * @remarks
   * Indicates whether the API is public. Valid values:
   * 
   * *   **PUBLIC**
   * *   **PRIVATE**
   * 
   * @example
   * PUBLIC
   */
  visibility?: string;
  static names(): { [key: string]: string } {
    return {
      apiId: 'ApiId',
      apiName: 'ApiName',
      deployedTime: 'DeployedTime',
      description: 'Description',
      groupId: 'GroupId',
      groupName: 'GroupName',
      modifiedTime: 'ModifiedTime',
      purchasedTime: 'PurchasedTime',
      regionId: 'RegionId',
      stageName: 'StageName',
      visibility: 'Visibility',
    };
  }

  static types(): { [key: string]: any } {
    return {
      apiId: 'string',
      apiName: 'string',
      deployedTime: 'string',
      description: 'string',
      groupId: 'string',
      groupName: 'string',
      modifiedTime: 'string',
      purchasedTime: 'string',
      regionId: 'string',
      stageName: 'string',
      visibility: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePurchasedApisResponseBodyPurchasedApis extends $dara.Model {
  purchasedApi?: DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi[];
  static names(): { [key: string]: string } {
    return {
      purchasedApi: 'PurchasedApi',
    };
  }

  static types(): { [key: string]: any } {
    return {
      purchasedApi: { 'type': 'array', 'itemType': DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi },
    };
  }

  validate() {
    if(Array.isArray(this.purchasedApi)) {
      $dara.Model.validateArray(this.purchasedApi);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribePurchasedApisResponseBody extends $dara.Model {
  /**
   * @remarks
   * The page number of the returned page.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * The number of entries returned on each page.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * The monitoring information about API call delays. The returned information is an array consisting of purchased APIs.
   */
  purchasedApis?: DescribePurchasedApisResponseBodyPurchasedApis;
  /**
   * @remarks
   * The ID of the request.
   * 
   * @example
   * CE5722A6-AE78-4741-A9B0-6C817D360510
   */
  requestId?: string;
  /**
   * @remarks
   * The total number of returned entries.
   * 
   * @example
   * 20
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      purchasedApis: 'PurchasedApis',
      requestId: 'RequestId',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNumber: 'number',
      pageSize: 'number',
      purchasedApis: DescribePurchasedApisResponseBodyPurchasedApis,
      requestId: 'string',
      totalCount: 'number',
    };
  }

  validate() {
    if(this.purchasedApis && typeof (this.purchasedApis as any).validate === 'function') {
      (this.purchasedApis as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

