// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class ModifyApiGroupRequestTag extends $dara.Model {
  /**
   * @remarks
   * The key of the tag.
   * 
   * This parameter is required.
   * 
   * @example
   * env
   */
  key?: string;
  /**
   * @remarks
   * The value of the tag.
   * 
   * This parameter is required.
   * 
   * @example
   * uat
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyApiGroupRequest extends $dara.Model {
  /**
   * @remarks
   * The root path of the API.
   * 
   * @example
   * /eeee
   */
  basePath?: string;
  /**
   * @remarks
   * The list of associated tags. Separate multiple tags with commas (,).
   * 
   * @example
   * depart:dep1
   */
  compatibleFlags?: string;
  /**
   * @remarks
   * The custom appcode configuration.
   * 
   * @example
   * {"location":"HEADER","name":"myAppCodeHeader"}
   */
  customAppCodeConfig?: string;
  /**
   * @remarks
   * The custom trace configuration.
   * 
   * @example
   * {\\"parameterLocation\\":\\"HEADER\\",\\"parameterName\\":\\"traceId\\"}
   */
  customTraceConfig?: string;
  /**
   * @remarks
   * The data of custom configuration items.
   * 
   * @example
   * removeResponseServerHeader
   */
  customerConfigs?: string;
  /**
   * @remarks
   * The default domain name.
   * 
   * @example
   * mkt.api.gaore.com
   */
  defaultDomain?: string;
  /**
   * @remarks
   * The API group description that you want to specify, which cannot exceed 180 characters. If this parameter is not specified, the group description is not modified.
   * 
   * @example
   * New weather informations.
   */
  description?: string;
  /**
   * @remarks
   * If filter AppCode for backend.
   * 
   * @example
   * false
   */
  filterAppCodeForBackend?: string;
  /**
   * @remarks
   * The ID of the API group. This ID is generated by the system and globally unique.
   * 
   * This parameter is required.
   * 
   * @example
   * 523e8dc7bbe04613b5b1d726c2a7889d
   */
  groupId?: string;
  /**
   * @remarks
   * The API group name must be globally unique. The name must be 4 to 50 characters in length. It must start with a letter and can contain letters, digits, and underscores (_). If this parameter is not specified, the group name is not modified.
   * 
   * @example
   * NewWeather
   */
  groupName?: string;
  /**
   * @remarks
   * Specifies whether to pass headers.
   * 
   * @example
   * eagleeye-rpcid,x-b3-traceid,host
   */
  passthroughHeaders?: string;
  /**
   * @remarks
   * The RPC mode.
   * 
   * @example
   * {}
   */
  rpcPattern?: string;
  rpsLimitForServerless?: string;
  securityToken?: string;
  /**
   * @remarks
   * If support SSE.
   * 
   * @example
   * true
   * 
   * **if can be null:**
   * true
   */
  supportSSE?: string;
  /**
   * @remarks
   * The object tags that match the lifecycle rule. You can specify multiple tags.
   * 
   * @example
   * Keyï¼Œ Value
   */
  tag?: ModifyApiGroupRequestTag[];
  /**
   * @remarks
   * The user log configuration.
   * 
   * @example
   * {\\"requestBody\\":false,\\"responseBody\\":false,\\"queryString\\":\\"\\",\\"requestHeaders\\":\\"\\",\\"responseHeaders\\":\\"\\",\\"jwtClaims\\":\\"\\"}
   */
  userLogConfig?: string;
  static names(): { [key: string]: string } {
    return {
      basePath: 'BasePath',
      compatibleFlags: 'CompatibleFlags',
      customAppCodeConfig: 'CustomAppCodeConfig',
      customTraceConfig: 'CustomTraceConfig',
      customerConfigs: 'CustomerConfigs',
      defaultDomain: 'DefaultDomain',
      description: 'Description',
      filterAppCodeForBackend: 'FilterAppCodeForBackend',
      groupId: 'GroupId',
      groupName: 'GroupName',
      passthroughHeaders: 'PassthroughHeaders',
      rpcPattern: 'RpcPattern',
      rpsLimitForServerless: 'RpsLimitForServerless',
      securityToken: 'SecurityToken',
      supportSSE: 'SupportSSE',
      tag: 'Tag',
      userLogConfig: 'UserLogConfig',
    };
  }

  static types(): { [key: string]: any } {
    return {
      basePath: 'string',
      compatibleFlags: 'string',
      customAppCodeConfig: 'string',
      customTraceConfig: 'string',
      customerConfigs: 'string',
      defaultDomain: 'string',
      description: 'string',
      filterAppCodeForBackend: 'string',
      groupId: 'string',
      groupName: 'string',
      passthroughHeaders: 'string',
      rpcPattern: 'string',
      rpsLimitForServerless: 'string',
      securityToken: 'string',
      supportSSE: 'string',
      tag: { 'type': 'array', 'itemType': ModifyApiGroupRequestTag },
      userLogConfig: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

