// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class ModifyHostShareKeyRequest extends $dara.Model {
  /**
   * @remarks
   * The ID of the shared key whose information you want to modify.
   * 
   * This parameter is required.
   * 
   * @example
   * 10247
   */
  hostShareKeyId?: string;
  /**
   * @remarks
   * The name of the shared key.
   * 
   * @example
   * name
   */
  hostShareKeyName?: string;
  /**
   * @remarks
   * The bastion host ID.
   * 
   * >  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.
   * 
   * This parameter is required.
   * 
   * @example
   * bastionhost-cn-st220aw****
   */
  instanceId?: string;
  /**
   * @remarks
   * The password of the private key. Specify a Base64-encoded string.
   * 
   * @example
   * ****
   */
  passPhrase?: string;
  /**
   * @remarks
   * The private key. Specify a Base64-encoded string.
   * 
   * >  Only Rivest-Shamir-Adleman (RSA) keys that are generated by using the ssh-keygen command and keys that are generated by using the Ed25519 algorithm are supported.
   * 
   * @example
   * ****
   */
  privateKey?: string;
  /**
   * @remarks
   * The region ID of the bastion host.
   * 
   * >  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).
   * 
   * @example
   * cn-hangzhou
   */
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      hostShareKeyId: 'HostShareKeyId',
      hostShareKeyName: 'HostShareKeyName',
      instanceId: 'InstanceId',
      passPhrase: 'PassPhrase',
      privateKey: 'PrivateKey',
      regionId: 'RegionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hostShareKeyId: 'string',
      hostShareKeyName: 'string',
      instanceId: 'string',
      passPhrase: 'string',
      privateKey: 'string',
      regionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

