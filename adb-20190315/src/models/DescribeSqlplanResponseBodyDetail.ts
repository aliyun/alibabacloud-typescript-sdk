// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DescribeSQLPlanResponseBodyDetail extends $dara.Model {
  /**
   * @remarks
   * The total CPU time consumed by all operators on multithreaded servers when the SQL statement is executed. Unit: milliseconds.
   * 
   * @example
   * 6100
   */
  CPUTime?: number;
  /**
   * @remarks
   * The IP address of the client that is used to execute the SQL statement.
   * 
   * @example
   * 172.16.***.***
   */
  clientIP?: string;
  /**
   * @remarks
   * The name of the database on which the SQL statement was executed.
   * 
   * @example
   * adb_demo
   */
  database?: string;
  /**
   * @remarks
   * The total number of rows generated by the SQL statement.
   * 
   * @example
   * 1
   */
  outputRows?: number;
  /**
   * @remarks
   * The total amount of data generated by the SQL statement. Unit: bytes.
   * 
   * @example
   * 9
   */
  outputSize?: number;
  /**
   * @remarks
   * The maximum memory usage when the SQL statement is executed. Unit: bytes.
   * 
   * @example
   * 441802
   */
  peakMemory?: number;
  /**
   * @remarks
   * The amount of time consumed to generate the execution plan of the SQL statement. Unit: milliseconds.
   * 
   * @example
   * 86
   */
  planningTime?: number;
  /**
   * @remarks
   * The amount of time consumed to queue the SQL statement. Unit: milliseconds.
   * 
   * @example
   * 0
   */
  queuedTime?: number;
  /**
   * @remarks
   * The SQL statement.
   * 
   * @example
   * INSERT OVERWRITE INTO hdfs_import_external\\nSELECT *\\nFROM adb_hdfs_import_source
   */
  SQL?: string;
  /**
   * @remarks
   * The execution start time of the SQL statement. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1622102683243
   */
  startTime?: string;
  /**
   * @remarks
   * The final execution state of the SQL statement. Valid values:
   * 
   * *   FINISHED
   * *   FAILED
   * 
   * @example
   * FINISHED
   */
  state?: string;
  /**
   * @remarks
   * The total number of stages in the SQL statement.
   * 
   * @example
   * 4
   */
  totalStage?: number;
  /**
   * @remarks
   * The total number of tasks in the SQL statement.
   * 
   * @example
   * 4
   */
  totalTask?: number;
  /**
   * @remarks
   * The total amount of time consumed to execute the SQL statement. Unit: milliseconds.
   * 
   * @example
   * 2340
   */
  totalTime?: number;
  /**
   * @remarks
   * The name of the user who submitted the SQL statement.
   * 
   * @example
   * test_acc
   */
  user?: string;
  static names(): { [key: string]: string } {
    return {
      CPUTime: 'CPUTime',
      clientIP: 'ClientIP',
      database: 'Database',
      outputRows: 'OutputRows',
      outputSize: 'OutputSize',
      peakMemory: 'PeakMemory',
      planningTime: 'PlanningTime',
      queuedTime: 'QueuedTime',
      SQL: 'SQL',
      startTime: 'StartTime',
      state: 'State',
      totalStage: 'TotalStage',
      totalTask: 'TotalTask',
      totalTime: 'TotalTime',
      user: 'User',
    };
  }

  static types(): { [key: string]: any } {
    return {
      CPUTime: 'number',
      clientIP: 'string',
      database: 'string',
      outputRows: 'number',
      outputSize: 'number',
      peakMemory: 'number',
      planningTime: 'number',
      queuedTime: 'number',
      SQL: 'string',
      startTime: 'string',
      state: 'string',
      totalStage: 'number',
      totalTask: 'number',
      totalTime: 'number',
      user: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

