// This file is auto-generated, don't edit it
import * as $dara from '@darabonba/typescript';


export class DescribeSQLPlanResponseBodyDetail extends $dara.Model {
  /**
   * @remarks
   * The total CPU time consumed by all operators on multithreaded servers when the SQL statement is executed. Unit: milliseconds.
   * 
   * @example
   * 6100
   */
  CPUTime?: number;
  /**
   * @remarks
   * The IP address of the client that is used to execute the SQL statement.
   * 
   * @example
   * 172.16.***.***
   */
  clientIP?: string;
  /**
   * @remarks
   * The name of the database on which the SQL statement was executed.
   * 
   * @example
   * adb_demo
   */
  database?: string;
  /**
   * @remarks
   * The total number of rows generated by the SQL statement.
   * 
   * @example
   * 1
   */
  outputRows?: number;
  /**
   * @remarks
   * The total amount of data generated by the SQL statement. Unit: bytes.
   * 
   * @example
   * 9
   */
  outputSize?: number;
  /**
   * @remarks
   * The maximum memory usage when the SQL statement is executed. Unit: bytes.
   * 
   * @example
   * 441802
   */
  peakMemory?: number;
  /**
   * @remarks
   * The amount of time consumed to generate the execution plan of the SQL statement. Unit: milliseconds.
   * 
   * @example
   * 86
   */
  planningTime?: number;
  /**
   * @remarks
   * The amount of time consumed to queue the SQL statement. Unit: milliseconds.
   * 
   * @example
   * 0
   */
  queuedTime?: number;
  /**
   * @remarks
   * The SQL statement.
   * 
   * @example
   * INSERT OVERWRITE INTO hdfs_import_external\\nSELECT *\\nFROM adb_hdfs_import_source
   */
  SQL?: string;
  /**
   * @remarks
   * The execution start time of the SQL statement. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
   * 
   * @example
   * 1622102683243
   */
  startTime?: string;
  /**
   * @remarks
   * The final execution state of the SQL statement. Valid values:
   * 
   * *   FINISHED
   * *   FAILED
   * 
   * @example
   * FINISHED
   */
  state?: string;
  /**
   * @remarks
   * The total number of stages in the SQL statement.
   * 
   * @example
   * 4
   */
  totalStage?: number;
  /**
   * @remarks
   * The total number of tasks in the SQL statement.
   * 
   * @example
   * 4
   */
  totalTask?: number;
  /**
   * @remarks
   * The total amount of time consumed to execute the SQL statement. Unit: milliseconds.
   * 
   * @example
   * 2340
   */
  totalTime?: number;
  /**
   * @remarks
   * The name of the user who submitted the SQL statement.
   * 
   * @example
   * test_acc
   */
  user?: string;
  static names(): { [key: string]: string } {
    return {
      CPUTime: 'CPUTime',
      clientIP: 'ClientIP',
      database: 'Database',
      outputRows: 'OutputRows',
      outputSize: 'OutputSize',
      peakMemory: 'PeakMemory',
      planningTime: 'PlanningTime',
      queuedTime: 'QueuedTime',
      SQL: 'SQL',
      startTime: 'StartTime',
      state: 'State',
      totalStage: 'TotalStage',
      totalTask: 'TotalTask',
      totalTime: 'TotalTime',
      user: 'User',
    };
  }

  static types(): { [key: string]: any } {
    return {
      CPUTime: 'number',
      clientIP: 'string',
      database: 'string',
      outputRows: 'number',
      outputSize: 'number',
      peakMemory: 'number',
      planningTime: 'number',
      queuedTime: 'number',
      SQL: 'string',
      startTime: 'string',
      state: 'string',
      totalStage: 'number',
      totalTask: 'number',
      totalTime: 'number',
      user: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSQLPlanResponseBodyStageList extends $dara.Model {
  /**
   * @remarks
   * The average `CPU Time` value on each compute node in the stage. Unit: milliseconds.
   * 
   * @example
   * 5984
   */
  CPUTimeAvg?: number;
  /**
   * @remarks
   * The maximum `CPU Time` value on each compute node in the stage. Unit: milliseconds.
   * 
   * @example
   * 5984
   */
  CPUTimeMax?: number;
  /**
   * @remarks
   * The minimum `CPU Time` value on each compute node in the stage. Unit: milliseconds.
   * 
   * @example
   * 47
   */
  CPUTimeMin?: number;
  /**
   * @remarks
   * The average amount of input data on each compute node in the stage. Unit: bytes.
   * 
   * @example
   * 173
   */
  inputSizeAvg?: number;
  /**
   * @remarks
   * The maximum amount of input data on each compute node in the stage. Unit: byte.
   * 
   * @example
   * 173
   */
  inputSizeMax?: number;
  /**
   * @remarks
   * The minimum amount of input data on each compute node in the stage. Unit: bytes.
   * 
   * @example
   * 173
   */
  inputSizeMin?: number;
  /**
   * @remarks
   * The total CPU time consumed by all operators in the stage, which is equivalent to the total CPU time of the stage. You can use this parameter to determine which parts of the stage consume a large amount of computing resources. Unit: milliseconds.
   * 
   * @example
   * 5984
   */
  operatorCost?: number;
  /**
   * @remarks
   * The maximum memory usage when the SQL statement is executed. Unit: bytes.
   * 
   * @example
   * 74208
   */
  peakMemory?: number;
  /**
   * @remarks
   * The average amount of data scanned by a scan operator on each storage node in the stage. Unit: bytes.
   * 
   * @example
   * 0
   */
  scanSizeAvg?: number;
  /**
   * @remarks
   * The maximum amount of data scanned by a scan operator on each storage node in the stage. Unit: bytes.
   * 
   * @example
   * 0
   */
  scanSizeMax?: number;
  /**
   * @remarks
   * The minimum amount of data scanned by a scan operator on each storage node in the stage. Unit: bytes.
   * 
   * @example
   * 0
   */
  scanSizeMin?: number;
  /**
   * @remarks
   * The average amount of time consumed by a scan operator to read data on each storage node in the stage. Unit: milliseconds.
   * 
   * @example
   * 0
   */
  scanTimeAvg?: number;
  /**
   * @remarks
   * The maximum amount of time consumed by a scan operator to read data on each storage node in the stage. Unit: milliseconds.
   * 
   * @example
   * 0
   */
  scanTimeMax?: number;
  /**
   * @remarks
   * The minimum amount of time consumed by a scan operator to read data on each storage node in the stage. Unit: milliseconds.
   * 
   * @example
   * 0
   */
  scanTimeMin?: number;
  /**
   * @remarks
   * The stage ID.
   * 
   * @example
   * 1
   */
  stageId?: number;
  /**
   * @remarks
   * The final execution state of the stage. Valid values:
   * 
   * *   FINISHED
   * *   CANCELED
   * *   ABORTED
   * *   FAILED
   * 
   * @example
   * FINISHED
   */
  state?: string;
  static names(): { [key: string]: string } {
    return {
      CPUTimeAvg: 'CPUTimeAvg',
      CPUTimeMax: 'CPUTimeMax',
      CPUTimeMin: 'CPUTimeMin',
      inputSizeAvg: 'InputSizeAvg',
      inputSizeMax: 'InputSizeMax',
      inputSizeMin: 'InputSizeMin',
      operatorCost: 'OperatorCost',
      peakMemory: 'PeakMemory',
      scanSizeAvg: 'ScanSizeAvg',
      scanSizeMax: 'ScanSizeMax',
      scanSizeMin: 'ScanSizeMin',
      scanTimeAvg: 'ScanTimeAvg',
      scanTimeMax: 'ScanTimeMax',
      scanTimeMin: 'ScanTimeMin',
      stageId: 'StageId',
      state: 'State',
    };
  }

  static types(): { [key: string]: any } {
    return {
      CPUTimeAvg: 'number',
      CPUTimeMax: 'number',
      CPUTimeMin: 'number',
      inputSizeAvg: 'number',
      inputSizeMax: 'number',
      inputSizeMin: 'number',
      operatorCost: 'number',
      peakMemory: 'number',
      scanSizeAvg: 'number',
      scanSizeMax: 'number',
      scanSizeMin: 'number',
      scanTimeAvg: 'number',
      scanTimeMax: 'number',
      scanTimeMin: 'number',
      stageId: 'number',
      state: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeSQLPlanResponseBody extends $dara.Model {
  /**
   * @remarks
   * The execution information about the SQL statement.
   */
  detail?: DescribeSQLPlanResponseBodyDetail;
  /**
   * @remarks
   * The original information about the SQL statement.
   * 
   * @example
   * {\\"queryId\\":\\"20210527_160443_10581_hdhzr\\",\\"session\\":{\\"queryId\\":\\"20210527_160443_10581_hdhzr\\",\\"hasSharedStage\\":false,\\"parentId\\":0}}
   */
  originInfo?: string;
  /**
   * @remarks
   * The request ID.
   * 
   * @example
   * 22D6DEF0-CBC7-4388-A41C-D5FD62******
   */
  requestId?: string;
  /**
   * @remarks
   * The queried plan in different stages.
   */
  stageList?: DescribeSQLPlanResponseBodyStageList[];
  static names(): { [key: string]: string } {
    return {
      detail: 'Detail',
      originInfo: 'OriginInfo',
      requestId: 'RequestId',
      stageList: 'StageList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      detail: DescribeSQLPlanResponseBodyDetail,
      originInfo: 'string',
      requestId: 'string',
      stageList: { 'type': 'array', 'itemType': DescribeSQLPlanResponseBodyStageList },
    };
  }

  validate() {
    if(this.detail && typeof (this.detail as any).validate === 'function') {
      (this.detail as any).validate();
    }
    if(Array.isArray(this.stageList)) {
      $dara.Model.validateArray(this.stageList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

