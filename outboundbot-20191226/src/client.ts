// This file is auto-generated, don't edit it
/**
 */
import OpenApi from '@alicloud/openapi-core';
import { OpenApiUtil, $OpenApiUtil } from '@alicloud/openapi-core';
import * as $dara from '@darabonba/typescript';

export class CreateAgentProfileResponseBodyData extends $dara.Model {
  /**
   * @example
   * 37ca3ca1ac4b4e57adf3da5b5d939d04
   */
  agentProfileId?: string;
  /**
   * @example
   * default-survey
   */
  agentProfileTemplateId?: string;
  /**
   * @remarks
   * agent type
   * 
   * @example
   * “”
   */
  agentType?: string;
  /**
   * @example
   * 1739333534000
   */
  createTime?: string;
  description?: string;
  /**
   * @example
   * 1e16c663-0339-4064-9d57-07f772e78f21
   */
  instanceId?: string;
  /**
   * @example
   * [{\\"type\\":\\"TransferToAgent\\",\\"instructions\\":[{\\"code\\":\\"Transfer0\\",\\"skillGroupId\\":\\"123\\",\\"skillGroupName\\":\\"123\\"}]
   */
  instructionJson?: string;
  labelsJson?: string;
  /**
   * @example
   * model_001
   */
  model?: string;
  /**
   * @example
   * ""
   */
  modelConfig?: string;
  /**
   * @example
   * prompt
   */
  prompt?: string;
  promptJson?: string;
  scenario?: string;
  /**
   * @example
   * d13ad2d3-3fe6-4352-b38b-bd6559047de8
   */
  scriptId?: string;
  /**
   * @example
   * True
   */
  system?: boolean;
  /**
   * @example
   * 1737077564000
   */
  updateTime?: string;
  variablesJson?: string;
  static names(): { [key: string]: string } {
    return {
      agentProfileId: 'AgentProfileId',
      agentProfileTemplateId: 'AgentProfileTemplateId',
      agentType: 'AgentType',
      createTime: 'CreateTime',
      description: 'Description',
      instanceId: 'InstanceId',
      instructionJson: 'InstructionJson',
      labelsJson: 'LabelsJson',
      model: 'Model',
      modelConfig: 'ModelConfig',
      prompt: 'Prompt',
      promptJson: 'PromptJson',
      scenario: 'Scenario',
      scriptId: 'ScriptId',
      system: 'System',
      updateTime: 'UpdateTime',
      variablesJson: 'VariablesJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentProfileId: 'string',
      agentProfileTemplateId: 'string',
      agentType: 'string',
      createTime: 'string',
      description: 'string',
      instanceId: 'string',
      instructionJson: 'string',
      labelsJson: 'string',
      model: 'string',
      modelConfig: 'string',
      prompt: 'string',
      promptJson: 'string',
      scenario: 'string',
      scriptId: 'string',
      system: 'boolean',
      updateTime: 'string',
      variablesJson: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAnnotationMissionResponseBodyData extends $dara.Model {
  message?: string;
  /**
   * @example
   * True
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      message: 'Message',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      message: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime extends $dara.Model {
  /**
   * @example
   * 09:00:00
   */
  beginTime?: string;
  /**
   * @example
   * 12:00:00
   */
  endTime?: string;
  static names(): { [key: string]: string } {
    return {
      beginTime: 'BeginTime',
      endTime: 'EndTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beginTime: 'string',
      endTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBatchJobsResponseBodyBatchJobStrategy extends $dara.Model {
  /**
   * @example
   * {}
   */
  customized?: string;
  /**
   * @example
   * 2209702074000
   */
  endTime?: number;
  /**
   * @example
   * CONTINUE
   */
  followUpStrategy?: string;
  /**
   * @example
   * false
   */
  isTemplate?: boolean;
  /**
   * @example
   * 3
   */
  maxAttemptsPerDay?: number;
  /**
   * @example
   * 10
   */
  minAttemptInterval?: number;
  /**
   * @example
   * Once
   */
  repeatBy?: string;
  repeatDays?: string[];
  /**
   * @example
   * LocalFirst
   */
  routingStrategy?: string;
  /**
   * @example
   * 1578550074000
   */
  startTime?: number;
  strategyDescription?: string;
  /**
   * @example
   * f718798d-96be-40e4-bef6-317b54855708
   */
  strategyId?: string;
  strategyName?: string;
  /**
   * @example
   * Repeatable
   */
  type?: string;
  workingTime?: CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime[];
  static names(): { [key: string]: string } {
    return {
      customized: 'Customized',
      endTime: 'EndTime',
      followUpStrategy: 'FollowUpStrategy',
      isTemplate: 'IsTemplate',
      maxAttemptsPerDay: 'MaxAttemptsPerDay',
      minAttemptInterval: 'MinAttemptInterval',
      repeatBy: 'RepeatBy',
      repeatDays: 'RepeatDays',
      routingStrategy: 'RoutingStrategy',
      startTime: 'StartTime',
      strategyDescription: 'StrategyDescription',
      strategyId: 'StrategyId',
      strategyName: 'StrategyName',
      type: 'Type',
      workingTime: 'WorkingTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      customized: 'string',
      endTime: 'number',
      followUpStrategy: 'string',
      isTemplate: 'boolean',
      maxAttemptsPerDay: 'number',
      minAttemptInterval: 'number',
      repeatBy: 'string',
      repeatDays: { 'type': 'array', 'itemType': 'string' },
      routingStrategy: 'string',
      startTime: 'number',
      strategyDescription: 'string',
      strategyId: 'string',
      strategyName: 'string',
      type: 'string',
      workingTime: { 'type': 'array', 'itemType': CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime },
    };
  }

  validate() {
    if(Array.isArray(this.repeatDays)) {
      $dara.Model.validateArray(this.repeatDays);
    }
    if(Array.isArray(this.workingTime)) {
      $dara.Model.validateArray(this.workingTime);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBatchJobsResponseBodyBatchJob extends $dara.Model {
  /**
   * @example
   * 5a7e8b09-baf9-4cab-b540-c971f47a7146
   */
  batchJobId?: string;
  callingNumbers?: string[];
  /**
   * @example
   * 1579068424000
   */
  creationTime?: number;
  /**
   * @example
   * 52e80b02-0126-4556-a1e6-ef5b3747ed53/a9a3ddc7-d7d7-48cd-82b5-b31bb5510e71_2a66f8ad-dfbb-4980-9b84-439171295a11.xlsx
   */
  jobFilePath?: string;
  jobGroupDescription?: string;
  jobGroupName?: string;
  /**
   * @example
   * 6cea9bed-63e6-439e-ae4c-b3333efff53d
   */
  scenarioId?: string;
  strategy?: CreateBatchJobsResponseBodyBatchJobStrategy;
  static names(): { [key: string]: string } {
    return {
      batchJobId: 'BatchJobId',
      callingNumbers: 'CallingNumbers',
      creationTime: 'CreationTime',
      jobFilePath: 'JobFilePath',
      jobGroupDescription: 'JobGroupDescription',
      jobGroupName: 'JobGroupName',
      scenarioId: 'ScenarioId',
      strategy: 'Strategy',
    };
  }

  static types(): { [key: string]: any } {
    return {
      batchJobId: 'string',
      callingNumbers: { 'type': 'array', 'itemType': 'string' },
      creationTime: 'number',
      jobFilePath: 'string',
      jobGroupDescription: 'string',
      jobGroupName: 'string',
      scenarioId: 'string',
      strategy: CreateBatchJobsResponseBodyBatchJobStrategy,
    };
  }

  validate() {
    if(Array.isArray(this.callingNumbers)) {
      $dara.Model.validateArray(this.callingNumbers);
    }
    if(this.strategy && typeof (this.strategy as any).validate === 'function') {
      (this.strategy as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBatchRepeatJobResponseBodyJobGroup extends $dara.Model {
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  id?: string;
  /**
   * @example
   * 1
   */
  minConcurrency?: number;
  /**
   * @example
   * 3
   */
  priority?: string;
  /**
   * @example
   * 30
   */
  ringingDuration?: number;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      minConcurrency: 'MinConcurrency',
      priority: 'Priority',
      ringingDuration: 'RingingDuration',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      minConcurrency: 'number',
      priority: 'string',
      ringingDuration: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentRequestIntentDefinition extends $dara.Model {
  aliasName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  intentName?: string;
  static names(): { [key: string]: string } {
    return {
      aliasName: 'AliasName',
      intentName: 'IntentName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      aliasName: 'string',
      intentName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentLgfRequestLgfDefinition extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  ruleText?: string;
  static names(): { [key: string]: string } {
    return {
      intentId: 'IntentId',
      ruleText: 'RuleText',
    };
  }

  static types(): { [key: string]: any } {
    return {
      intentId: 'number',
      ruleText: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentUserSayRequestUserSayDefinition extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  content?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10717802
   */
  intentId?: number;
  static names(): { [key: string]: string } {
    return {
      content: 'Content',
      intentId: 'IntentId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      intentId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateInstanceResponseBodyInstance extends $dara.Model {
  /**
   * @example
   * 1578469042851
   */
  creationTime?: number;
  /**
   * @example
   * 435986
   */
  creatorId?: number;
  /**
   * @example
   * xxx
   */
  creatorName?: string;
  instanceDescription?: string;
  /**
   * @example
   * 90515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  instanceId?: string;
  instanceName?: string;
  /**
   * @example
   * 4
   */
  maxConcurrentConversation?: number;
  /**
   * @example
   * xxxx
   */
  ownerName?: string;
  /**
   * @example
   * 90515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  resourceGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      creationTime: 'CreationTime',
      creatorId: 'CreatorId',
      creatorName: 'CreatorName',
      instanceDescription: 'InstanceDescription',
      instanceId: 'InstanceId',
      instanceName: 'InstanceName',
      maxConcurrentConversation: 'MaxConcurrentConversation',
      ownerName: 'OwnerName',
      resourceGroupId: 'ResourceGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creationTime: 'number',
      creatorId: 'number',
      creatorName: 'string',
      instanceDescription: 'string',
      instanceId: 'string',
      instanceName: 'string',
      maxConcurrentConversation: 'number',
      ownerName: 'string',
      resourceGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateInstanceBindNumberResponseBodyDataList extends $dara.Model {
  /**
   * @example
   * 96b847ad-2683-4794-b7b4-7ef094fb81f6
   */
  instanceId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateInstanceBindNumberResponseBodyData extends $dara.Model {
  list?: CreateInstanceBindNumberResponseBodyDataList[];
  static names(): { [key: string]: string } {
    return {
      list: 'List',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': CreateInstanceBindNumberResponseBodyDataList },
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobGroupResponseBodyJobGroupExportProgress extends $dara.Model {
  /**
   * @example
   * https://***.oss-cn-shanghai.aliyuncs.com/sample
   */
  fileHttpUrl?: string;
  /**
   * @example
   * 1
   */
  progress?: string;
  /**
   * @example
   * FINISHED
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      fileHttpUrl: 'FileHttpUrl',
      progress: 'Progress',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileHttpUrl: 'string',
      progress: 'string',
      status: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobGroupResponseBodyJobGroupRecallStrategy extends $dara.Model {
  emptyNumberIgnore?: boolean;
  inArrearsIgnore?: boolean;
  outOfServiceIgnore?: boolean;
  static names(): { [key: string]: string } {
    return {
      emptyNumberIgnore: 'EmptyNumberIgnore',
      inArrearsIgnore: 'InArrearsIgnore',
      outOfServiceIgnore: 'OutOfServiceIgnore',
    };
  }

  static types(): { [key: string]: any } {
    return {
      emptyNumberIgnore: 'boolean',
      inArrearsIgnore: 'boolean',
      outOfServiceIgnore: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobGroupResponseBodyJobGroupStrategyWorkingTime extends $dara.Model {
  /**
   * @example
   * 09:00:00
   */
  beginTime?: string;
  /**
   * @example
   * 12:00:00
   */
  endTime?: string;
  static names(): { [key: string]: string } {
    return {
      beginTime: 'BeginTime',
      endTime: 'EndTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beginTime: 'string',
      endTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobGroupResponseBodyJobGroupStrategy extends $dara.Model {
  /**
   * @example
   * {}
   */
  customized?: string;
  /**
   * @example
   * 2209702074000
   */
  endTime?: number;
  /**
   * @example
   * CONTINUE
   */
  followUpStrategy?: string;
  /**
   * @example
   * false
   */
  isTemplate?: boolean;
  /**
   * @example
   * 3
   */
  maxAttemptsPerDay?: number;
  /**
   * @example
   * 3
   */
  minAttemptInterval?: number;
  /**
   * @example
   * Once
   */
  repeatBy?: string;
  repeatDays?: string[];
  /**
   * @example
   * LocalFirst
   */
  routingStrategy?: string;
  /**
   * @example
   * 1578550074000
   */
  startTime?: number;
  strategyDescription?: string;
  /**
   * @example
   * cc9a436e-03b0-4ada-8364-77ec2290aa39
   */
  strategyId?: string;
  strategyName?: string;
  /**
   * @example
   * Repeatable
   */
  type?: string;
  workingTime?: CreateJobGroupResponseBodyJobGroupStrategyWorkingTime[];
  static names(): { [key: string]: string } {
    return {
      customized: 'Customized',
      endTime: 'EndTime',
      followUpStrategy: 'FollowUpStrategy',
      isTemplate: 'IsTemplate',
      maxAttemptsPerDay: 'MaxAttemptsPerDay',
      minAttemptInterval: 'MinAttemptInterval',
      repeatBy: 'RepeatBy',
      repeatDays: 'RepeatDays',
      routingStrategy: 'RoutingStrategy',
      startTime: 'StartTime',
      strategyDescription: 'StrategyDescription',
      strategyId: 'StrategyId',
      strategyName: 'StrategyName',
      type: 'Type',
      workingTime: 'WorkingTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      customized: 'string',
      endTime: 'number',
      followUpStrategy: 'string',
      isTemplate: 'boolean',
      maxAttemptsPerDay: 'number',
      minAttemptInterval: 'number',
      repeatBy: 'string',
      repeatDays: { 'type': 'array', 'itemType': 'string' },
      routingStrategy: 'string',
      startTime: 'number',
      strategyDescription: 'string',
      strategyId: 'string',
      strategyName: 'string',
      type: 'string',
      workingTime: { 'type': 'array', 'itemType': CreateJobGroupResponseBodyJobGroupStrategyWorkingTime },
    };
  }

  validate() {
    if(Array.isArray(this.repeatDays)) {
      $dara.Model.validateArray(this.repeatDays);
    }
    if(Array.isArray(this.workingTime)) {
      $dara.Model.validateArray(this.workingTime);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobGroupResponseBodyJobGroup extends $dara.Model {
  callingNumbers?: string[];
  /**
   * @example
   * 1578550074361
   */
  creationTime?: number;
  exportProgress?: CreateJobGroupResponseBodyJobGroupExportProgress;
  /**
   * @example
   * 744ff448-2b4c-40d4-94ca-51f246905b0f
   */
  jobDataParsingTaskId?: string;
  /**
   * @example
   * UPLOADED/JOB/b3865dc3-40fa-4afd-9fe4-dc7cda305a24/229eac13-379d-4abe-96e0-8cf026b56c0b_template (1).xlsx
   */
  jobFilePath?: string;
  jobGroupDescription?: string;
  /**
   * @example
   * c62e6789-28a8-41db-941e-171a01d3b3b9
   */
  jobGroupId?: string;
  jobGroupName?: string;
  /**
   * @example
   * 1
   */
  minConcurrency?: number;
  /**
   * @example
   * 1628425608429
   */
  modifyTime?: string;
  priority?: string;
  recallCallingNumbers?: string[];
  recallStrategy?: CreateJobGroupResponseBodyJobGroupRecallStrategy;
  /**
   * @example
   * 30
   */
  ringingDuration?: number;
  /**
   * @example
   * 6cea9bed-63e6-439e-ae4c-b3333efff53d
   */
  scenarioId?: string;
  scriptName?: string;
  /**
   * @example
   * 1628425608429
   */
  scriptVersion?: string;
  /**
   * @example
   * Scheduling
   */
  status?: string;
  strategy?: CreateJobGroupResponseBodyJobGroupStrategy;
  static names(): { [key: string]: string } {
    return {
      callingNumbers: 'CallingNumbers',
      creationTime: 'CreationTime',
      exportProgress: 'ExportProgress',
      jobDataParsingTaskId: 'JobDataParsingTaskId',
      jobFilePath: 'JobFilePath',
      jobGroupDescription: 'JobGroupDescription',
      jobGroupId: 'JobGroupId',
      jobGroupName: 'JobGroupName',
      minConcurrency: 'MinConcurrency',
      modifyTime: 'ModifyTime',
      priority: 'Priority',
      recallCallingNumbers: 'RecallCallingNumbers',
      recallStrategy: 'RecallStrategy',
      ringingDuration: 'RingingDuration',
      scenarioId: 'ScenarioId',
      scriptName: 'ScriptName',
      scriptVersion: 'ScriptVersion',
      status: 'Status',
      strategy: 'Strategy',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumbers: { 'type': 'array', 'itemType': 'string' },
      creationTime: 'number',
      exportProgress: CreateJobGroupResponseBodyJobGroupExportProgress,
      jobDataParsingTaskId: 'string',
      jobFilePath: 'string',
      jobGroupDescription: 'string',
      jobGroupId: 'string',
      jobGroupName: 'string',
      minConcurrency: 'number',
      modifyTime: 'string',
      priority: 'string',
      recallCallingNumbers: { 'type': 'array', 'itemType': 'string' },
      recallStrategy: CreateJobGroupResponseBodyJobGroupRecallStrategy,
      ringingDuration: 'number',
      scenarioId: 'string',
      scriptName: 'string',
      scriptVersion: 'string',
      status: 'string',
      strategy: CreateJobGroupResponseBodyJobGroupStrategy,
    };
  }

  validate() {
    if(Array.isArray(this.callingNumbers)) {
      $dara.Model.validateArray(this.callingNumbers);
    }
    if(this.exportProgress && typeof (this.exportProgress as any).validate === 'function') {
      (this.exportProgress as any).validate();
    }
    if(Array.isArray(this.recallCallingNumbers)) {
      $dara.Model.validateArray(this.recallCallingNumbers);
    }
    if(this.recallStrategy && typeof (this.recallStrategy as any).validate === 'function') {
      (this.recallStrategy as any).validate();
    }
    if(this.strategy && typeof (this.strategy as any).validate === 'function') {
      (this.strategy as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateScriptResponseBodyScript extends $dara.Model {
  /**
   * @example
   * DRAFTED
   */
  debugStatus?: string;
  industry?: string;
  /**
   * @example
   * true
   */
  isDebugDrafted?: boolean;
  /**
   * @example
   * true
   */
  isDrafted?: boolean;
  nluAccessType?: string;
  nluEngine?: string;
  scene?: string;
  scriptDescription?: string;
  /**
   * @example
   * 8c58d3e0-bf27-4685-a5a5-65872ec5abc4
   */
  scriptId?: string;
  scriptName?: string;
  /**
   * @example
   * DRAFTED
   */
  status?: string;
  /**
   * @example
   * 1578474045152
   */
  updateTime?: number;
  static names(): { [key: string]: string } {
    return {
      debugStatus: 'DebugStatus',
      industry: 'Industry',
      isDebugDrafted: 'IsDebugDrafted',
      isDrafted: 'IsDrafted',
      nluAccessType: 'NluAccessType',
      nluEngine: 'NluEngine',
      scene: 'Scene',
      scriptDescription: 'ScriptDescription',
      scriptId: 'ScriptId',
      scriptName: 'ScriptName',
      status: 'Status',
      updateTime: 'UpdateTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      debugStatus: 'string',
      industry: 'string',
      isDebugDrafted: 'boolean',
      isDrafted: 'boolean',
      nluAccessType: 'string',
      nluEngine: 'string',
      scene: 'string',
      scriptDescription: 'string',
      scriptId: 'string',
      scriptName: 'string',
      status: 'string',
      updateTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBeebotIntentResponseBodyIntent extends $dara.Model {
  aliasName?: string;
  /**
   * @example
   * 2025-04-21 10:29:59.+0800
   */
  createTime?: string;
  /**
   * @example
   * 1252504
   */
  createUserId?: string;
  /**
   * @example
   * xxx@voice-navigator-testonaliyun.com
   */
  createUserName?: string;
  /**
   * @example
   * 10717802
   */
  intentId?: number;
  intentName?: string;
  /**
   * @example
   * 2025-04-21 15:52:57.+0800
   */
  modifyTime?: string;
  /**
   * @example
   * 1252504
   */
  modifyUserId?: string;
  /**
   * @example
   * xxx@voice-navigator-testonaliyun.com
   */
  modifyUserName?: string;
  static names(): { [key: string]: string } {
    return {
      aliasName: 'AliasName',
      createTime: 'CreateTime',
      createUserId: 'CreateUserId',
      createUserName: 'CreateUserName',
      intentId: 'IntentId',
      intentName: 'IntentName',
      modifyTime: 'ModifyTime',
      modifyUserId: 'ModifyUserId',
      modifyUserName: 'ModifyUserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      aliasName: 'string',
      createTime: 'string',
      createUserId: 'string',
      createUserName: 'string',
      intentId: 'number',
      intentName: 'string',
      modifyTime: 'string',
      modifyUserId: 'string',
      modifyUserName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDialogueNodeStatisticsResponseBodyHangUpDialogueNodes extends $dara.Model {
  hangUpNum?: number;
  nodeId?: string;
  nodeName?: string;
  rateDisplay?: string;
  static names(): { [key: string]: string } {
    return {
      hangUpNum: 'HangUpNum',
      nodeId: 'NodeId',
      nodeName: 'NodeName',
      rateDisplay: 'RateDisplay',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hangUpNum: 'number',
      nodeId: 'string',
      nodeName: 'string',
      rateDisplay: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes extends $dara.Model {
  /**
   * @example
   * f06f7c9f-2895-4b30-a8c2-6ecccb9c9f89
   */
  groupId?: string;
  /**
   * @example
   * 2
   */
  hangUpNum?: number;
  /**
   * @example
   * 12
   */
  hitNum?: number;
  /**
   * @remarks
   * id
   * 
   * @example
   * 123
   */
  id?: string;
  /**
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @example
   * 2
   */
  noAnswerNum?: number;
  /**
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  nodeId?: string;
  /**
   * @example
   * xxx
   */
  nodeName?: string;
  static names(): { [key: string]: string } {
    return {
      groupId: 'GroupId',
      hangUpNum: 'HangUpNum',
      hitNum: 'HitNum',
      id: 'Id',
      instanceId: 'InstanceId',
      noAnswerNum: 'NoAnswerNum',
      nodeId: 'NodeId',
      nodeName: 'NodeName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupId: 'string',
      hangUpNum: 'number',
      hitNum: 'number',
      id: 'string',
      instanceId: 'string',
      noAnswerNum: 'number',
      nodeId: 'string',
      nodeName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGlobalQuestionResponseBodyGlobalQuestion extends $dara.Model {
  answers?: string;
  /**
   * @example
   * f160ec2e-94f2-4c03-87be-ece5b52d5dd9
   */
  globalQuestionId?: string;
  globalQuestionName?: string;
  /**
   * @example
   * COMMON
   */
  globalQuestionType?: string;
  questions?: string;
  /**
   * @example
   * 290e06a5-6de2-4cc8-8a9c-72b7c152256c
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      answers: 'Answers',
      globalQuestionId: 'GlobalQuestionId',
      globalQuestionName: 'GlobalQuestionName',
      globalQuestionType: 'GlobalQuestionType',
      questions: 'Questions',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      answers: 'string',
      globalQuestionId: 'string',
      globalQuestionName: 'string',
      globalQuestionType: 'string',
      questions: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress extends $dara.Model {
  /**
   * @example
   * 5
   */
  cancelledNum?: number;
  /**
   * @example
   * 5
   */
  executingNum?: number;
  /**
   * @example
   * 5
   */
  failedNum?: number;
  /**
   * @example
   * 5
   */
  pausedNum?: number;
  /**
   * @example
   * 5
   */
  schedulingNum?: number;
  /**
   * @example
   * 5
   */
  totalCompletedNum?: number;
  /**
   * @example
   * 5
   */
  totalJobs?: number;
  /**
   * @example
   * 5
   */
  totalNotAnsweredNum?: number;
  static names(): { [key: string]: string } {
    return {
      cancelledNum: 'CancelledNum',
      executingNum: 'ExecutingNum',
      failedNum: 'FailedNum',
      pausedNum: 'PausedNum',
      schedulingNum: 'SchedulingNum',
      totalCompletedNum: 'TotalCompletedNum',
      totalJobs: 'TotalJobs',
      totalNotAnsweredNum: 'TotalNotAnsweredNum',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelledNum: 'number',
      executingNum: 'number',
      failedNum: 'number',
      pausedNum: 'number',
      schedulingNum: 'number',
      totalCompletedNum: 'number',
      totalJobs: 'number',
      totalNotAnsweredNum: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupExecutingInfoResponseBodyExecutingInfo extends $dara.Model {
  /**
   * @example
   * 5
   */
  callFailedNum?: number;
  /**
   * @example
   * 5
   */
  callNum?: number;
  /**
   * @example
   * xxx
   */
  creatorName?: string;
  /**
   * @example
   * 1640087774563
   */
  endTime?: number;
  /**
   * @example
   * 5
   */
  finishedNum?: number;
  /**
   * @example
   * 5
   */
  hangUpByClientNum?: number;
  /**
   * @example
   * {}
   */
  jobsProgress?: DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress;
  noInteractionNum?: number;
  /**
   * @example
   * 1640087774563
   */
  startTime?: number;
  /**
   * @example
   * 5
   */
  transferByIntentNum?: number;
  /**
   * @example
   * 5
   */
  transferByNoAnswer?: number;
  static names(): { [key: string]: string } {
    return {
      callFailedNum: 'CallFailedNum',
      callNum: 'CallNum',
      creatorName: 'CreatorName',
      endTime: 'EndTime',
      finishedNum: 'FinishedNum',
      hangUpByClientNum: 'HangUpByClientNum',
      jobsProgress: 'JobsProgress',
      noInteractionNum: 'NoInteractionNum',
      startTime: 'StartTime',
      transferByIntentNum: 'TransferByIntentNum',
      transferByNoAnswer: 'TransferByNoAnswer',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callFailedNum: 'number',
      callNum: 'number',
      creatorName: 'string',
      endTime: 'number',
      finishedNum: 'number',
      hangUpByClientNum: 'number',
      jobsProgress: DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress,
      noInteractionNum: 'number',
      startTime: 'number',
      transferByIntentNum: 'number',
      transferByNoAnswer: 'number',
    };
  }

  validate() {
    if(this.jobsProgress && typeof (this.jobsProgress as any).validate === 'function') {
      (this.jobsProgress as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInstanceResponseBodyInstance extends $dara.Model {
  /**
   * @example
   * 1578469042851
   */
  creationTime?: number;
  /**
   * @example
   * 435986
   */
  creatorId?: number;
  /**
   * @example
   * xxx
   */
  creatorName?: string;
  instanceDescription?: string;
  /**
   * @example
   * 90515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  instanceId?: string;
  instanceName?: string;
  /**
   * @example
   * 4
   */
  maxConcurrentConversation?: number;
  /**
   * @example
   * xxxx
   */
  ownerName?: string;
  /**
   * @example
   * 90515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  resourceGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      creationTime: 'CreationTime',
      creatorId: 'CreatorId',
      creatorName: 'CreatorName',
      instanceDescription: 'InstanceDescription',
      instanceId: 'InstanceId',
      instanceName: 'InstanceName',
      maxConcurrentConversation: 'MaxConcurrentConversation',
      ownerName: 'OwnerName',
      resourceGroupId: 'ResourceGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creationTime: 'number',
      creatorId: 'number',
      creatorName: 'string',
      instanceDescription: 'string',
      instanceId: 'string',
      instanceName: 'string',
      maxConcurrentConversation: 'number',
      ownerName: 'string',
      resourceGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeIntentResponseBodyIntent extends $dara.Model {
  /**
   * @example
   * 1578469042851
   */
  createTime?: number;
  intentDescription?: string;
  /**
   * @example
   * a8494b35-eefb-4c8a-887b-b60d2f0fa57a
   */
  intentId?: string;
  intentName?: string;
  keywords?: string;
  /**
   * @example
   * 6ef95fd5-558f-4ee8-af34-b2ede087a87c
   */
  scriptId?: string;
  /**
   * @example
   * 1578469042851
   */
  updateTime?: number;
  utterances?: string;
  static names(): { [key: string]: string } {
    return {
      createTime: 'CreateTime',
      intentDescription: 'IntentDescription',
      intentId: 'IntentId',
      intentName: 'IntentName',
      keywords: 'Keywords',
      scriptId: 'ScriptId',
      updateTime: 'UpdateTime',
      utterances: 'Utterances',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'number',
      intentDescription: 'string',
      intentId: 'string',
      intentName: 'string',
      keywords: 'string',
      scriptId: 'string',
      updateTime: 'number',
      utterances: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeIntentStatisticsResponseBodyGlobalIntents extends $dara.Model {
  /**
   * @example
   * 0c3f352f-d045-491d-9ce7-11f2d2b7775d
   */
  groupId?: string;
  /**
   * @example
   * 1
   */
  hitAfterNoAnswer?: number;
  /**
   * @example
   * 11
   */
  hitNum?: number;
  /**
   * @example
   * a4274627-265f-4e14-b2d6-4ee7d4f8593e
   */
  instanceId?: string;
  /**
   * @example
   * 21343425
   */
  intentId?: string;
  intentName?: string;
  /**
   * @example
   * GlobalIntent
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      groupId: 'GroupId',
      hitAfterNoAnswer: 'HitAfterNoAnswer',
      hitNum: 'HitNum',
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      intentName: 'IntentName',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupId: 'string',
      hitAfterNoAnswer: 'number',
      hitNum: 'number',
      instanceId: 'string',
      intentId: 'string',
      intentName: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer extends $dara.Model {
  groupId?: string;
  hitAfterNoAnswer?: number;
  /**
   * @example
   * a4274627-265f-4e14-b2d6-4ee7d4f8593e
   */
  instanceId?: string;
  intentId?: string;
  intentName?: string;
  static names(): { [key: string]: string } {
    return {
      groupId: 'GroupId',
      hitAfterNoAnswer: 'HitAfterNoAnswer',
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      intentName: 'IntentName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupId: 'string',
      hitAfterNoAnswer: 'number',
      instanceId: 'string',
      intentId: 'string',
      intentName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeIntentStatisticsResponseBodyProcessIntents extends $dara.Model {
  /**
   * @example
   * 0c3f352f-d045-491d-9ce7-11f2d2b7775d
   */
  groupId?: string;
  /**
   * @example
   * 1
   */
  hitAfterNoAnswer?: number;
  /**
   * @example
   * 10
   */
  hitNum?: number;
  /**
   * @example
   * a4274627-265f-4e14-b2d6-4ee7d4f8593e
   */
  instanceId?: string;
  /**
   * @example
   * 12343
   */
  intentId?: string;
  intentName?: string;
  rateDisplay?: string;
  /**
   * @example
   * ProcessIntent
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      groupId: 'GroupId',
      hitAfterNoAnswer: 'HitAfterNoAnswer',
      hitNum: 'HitNum',
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      intentName: 'IntentName',
      rateDisplay: 'RateDisplay',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      groupId: 'string',
      hitAfterNoAnswer: 'number',
      hitNum: 'number',
      instanceId: 'string',
      intentId: 'string',
      intentName: 'string',
      rateDisplay: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobResponseBodyJobContacts extends $dara.Model {
  /**
   * @example
   * db3db762-e421-44c9-9a01-cb423470757c
   */
  contactId?: string;
  contactName?: string;
  honorific?: string;
  /**
   * @example
   * 72dcd26b-f12d-4c27-b3af-18f6aed5b160
   */
  jobId?: string;
  /**
   * @example
   * 1358****8888
   */
  phoneNumber?: string;
  /**
   * @example
   * 2fa6bac3-06da-4315-82ab-72d6fd3a6f34
   */
  referenceId?: string;
  /**
   * @example
   * *
   */
  role?: string;
  /**
   * @example
   * Available
   */
  state?: string;
  static names(): { [key: string]: string } {
    return {
      contactId: 'ContactId',
      contactName: 'ContactName',
      honorific: 'Honorific',
      jobId: 'JobId',
      phoneNumber: 'PhoneNumber',
      referenceId: 'ReferenceId',
      role: 'Role',
      state: 'State',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactId: 'string',
      contactName: 'string',
      honorific: 'string',
      jobId: 'string',
      phoneNumber: 'string',
      referenceId: 'string',
      role: 'string',
      state: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobResponseBodyJobExtras extends $dara.Model {
  /**
   * @example
   * djrq
   */
  key?: string;
  /**
   * @example
   * 2019-08-21 09:49:59.0
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobResponseBodyJobScript extends $dara.Model {
  /**
   * @example
   * {\\"AppKey\\":\\"3GHttnsvir1FeWWb\\"}
   */
  asrConfig?: string;
  /**
   * @example
   * chatbot-cn-EJfqqa***
   */
  chatbotId?: string;
  /**
   * @example
   * DRAFTED
   */
  debugStatus?: string;
  industry?: string;
  /**
   * @example
   * true
   */
  isDebugDrafted?: boolean;
  /**
   * @example
   * true
   */
  isDrafted?: boolean;
  /**
   * @example
   * true
   */
  miniPlaybackConfigEnabled?: boolean;
  name?: string;
  scene?: string;
  scriptDescription?: string;
  /**
   * @example
   * 810b5872-57f0-4b27-80ab-7b3f4d8a6374
   */
  scriptId?: string;
  /**
   * @example
   * DRAFTED
   */
  status?: string;
  /**
   * @example
   * {\\"voice\\":\\"xiaobei\\",\\"volume\\":\\"50\\",\\"speechRate\\":\\"-150\\",\\"pitchRate\\":\\"0\\"}
   */
  ttsConfig?: string;
  /**
   * @example
   * 1578881227000
   */
  updateTime?: number;
  static names(): { [key: string]: string } {
    return {
      asrConfig: 'AsrConfig',
      chatbotId: 'ChatbotId',
      debugStatus: 'DebugStatus',
      industry: 'Industry',
      isDebugDrafted: 'IsDebugDrafted',
      isDrafted: 'IsDrafted',
      miniPlaybackConfigEnabled: 'MiniPlaybackConfigEnabled',
      name: 'Name',
      scene: 'Scene',
      scriptDescription: 'ScriptDescription',
      scriptId: 'ScriptId',
      status: 'Status',
      ttsConfig: 'TtsConfig',
      updateTime: 'UpdateTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asrConfig: 'string',
      chatbotId: 'string',
      debugStatus: 'string',
      industry: 'string',
      isDebugDrafted: 'boolean',
      isDrafted: 'boolean',
      miniPlaybackConfigEnabled: 'boolean',
      name: 'string',
      scene: 'string',
      scriptDescription: 'string',
      scriptId: 'string',
      status: 'string',
      ttsConfig: 'string',
      updateTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobResponseBodyJobSummary extends $dara.Model {
  /**
   * @example
   * {}
   */
  category?: string;
  /**
   * @example
   * 5
   */
  content?: string;
  /**
   * @example
   * score
   */
  summaryName?: string;
  static names(): { [key: string]: string } {
    return {
      category: 'Category',
      content: 'Content',
      summaryName: 'SummaryName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'string',
      content: 'string',
      summaryName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobResponseBodyJobTasksContact extends $dara.Model {
  /**
   * @example
   * db3db762-e421-44c9-9a01-cb423470757c
   */
  contactId?: string;
  contactName?: string;
  honorific?: string;
  /**
   * @example
   * b72425bd-7871-4050-838e-033d80d754b7
   */
  jobId?: string;
  /**
   * @example
   * 1351****8888
   */
  phoneNumber?: string;
  /**
   * @example
   * 2fa6bac3-06da-4315-82ab-72d6fd3a6f34
   */
  referenceId?: string;
  /**
   * @example
   * *
   */
  role?: string;
  /**
   * @example
   * Available
   */
  state?: string;
  static names(): { [key: string]: string } {
    return {
      contactId: 'ContactId',
      contactName: 'ContactName',
      honorific: 'Honorific',
      jobId: 'JobId',
      phoneNumber: 'PhoneNumber',
      referenceId: 'ReferenceId',
      role: 'Role',
      state: 'State',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactId: 'string',
      contactName: 'string',
      honorific: 'string',
      jobId: 'string',
      phoneNumber: 'string',
      referenceId: 'string',
      role: 'string',
      state: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobResponseBodyJobTasksConversationSummary extends $dara.Model {
  /**
   * @example
   * {}
   */
  category?: string;
  /**
   * @example
   * 5
   */
  content?: string;
  /**
   * @example
   * score
   */
  summaryName?: string;
  static names(): { [key: string]: string } {
    return {
      category: 'Category',
      content: 'Content',
      summaryName: 'SummaryName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'string',
      content: 'string',
      summaryName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobResponseBodyJobTasksConversation extends $dara.Model {
  /**
   * @example
   * Broadcast
   */
  action?: string;
  /**
   * @example
   * {}
   */
  actionParams?: string;
  script?: string;
  /**
   * @example
   * fd279983-93b9-b13b-9a34-64e5df473225
   */
  sequenceId?: string;
  /**
   * @example
   * Robot
   */
  speaker?: string;
  /**
   * @example
   * []
   */
  summary?: DescribeJobResponseBodyJobTasksConversationSummary[];
  /**
   * @example
   * 1579068424883
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      action: 'Action',
      actionParams: 'ActionParams',
      script: 'Script',
      sequenceId: 'SequenceId',
      speaker: 'Speaker',
      summary: 'Summary',
      timestamp: 'Timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      action: 'string',
      actionParams: 'string',
      script: 'string',
      sequenceId: 'string',
      speaker: 'string',
      summary: { 'type': 'array', 'itemType': DescribeJobResponseBodyJobTasksConversationSummary },
      timestamp: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.summary)) {
      $dara.Model.validateArray(this.summary);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobResponseBodyJobTasks extends $dara.Model {
  /**
   * @example
   * 1579068424883
   */
  actualTime?: number;
  /**
   * @example
   * 1
   */
  brief?: string;
  /**
   * @example
   * 1528189846043
   */
  callId?: string;
  /**
   * @example
   * 135****8888
   */
  calledNumber?: string;
  /**
   * @example
   * 0571****3106
   */
  callingNumber?: string;
  /**
   * @example
   * 1234
   */
  chatbotId?: string;
  /**
   * @example
   * {}
   */
  contact?: DescribeJobResponseBodyJobTasksContact;
  /**
   * @example
   * []
   */
  conversation?: DescribeJobResponseBodyJobTasksConversation[];
  /**
   * @example
   * 120
   */
  duration?: number;
  /**
   * @example
   * FINISHED
   */
  endReason?: string;
  /**
   * @example
   * 1579068424883
   */
  endTime?: number;
  /**
   * @example
   * client
   */
  hangUpDirection?: string;
  /**
   * @example
   * b72425bd-7871-4050-838e-033d80d754b7
   */
  jobId?: string;
  /**
   * @example
   * 1579068424883
   */
  planedTime?: number;
  realRingingDuration?: number;
  /**
   * @example
   * 25
   */
  ringingDuration?: number;
  /**
   * @example
   * ade80092-03d9-4f4d-ad4f-ab8a247d3150
   */
  scenarioId?: string;
  /**
   * @example
   * 200
   */
  sipCode?: string;
  sipDuration?: number;
  /**
   * @example
   * Succeeded
   */
  status?: string;
  /**
   * @example
   * ff44709e-39a6-43ba-959b-20fcabe3e496
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      actualTime: 'ActualTime',
      brief: 'Brief',
      callId: 'CallId',
      calledNumber: 'CalledNumber',
      callingNumber: 'CallingNumber',
      chatbotId: 'ChatbotId',
      contact: 'Contact',
      conversation: 'Conversation',
      duration: 'Duration',
      endReason: 'EndReason',
      endTime: 'EndTime',
      hangUpDirection: 'HangUpDirection',
      jobId: 'JobId',
      planedTime: 'PlanedTime',
      realRingingDuration: 'RealRingingDuration',
      ringingDuration: 'RingingDuration',
      scenarioId: 'ScenarioId',
      sipCode: 'SipCode',
      sipDuration: 'SipDuration',
      status: 'Status',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualTime: 'number',
      brief: 'string',
      callId: 'string',
      calledNumber: 'string',
      callingNumber: 'string',
      chatbotId: 'string',
      contact: DescribeJobResponseBodyJobTasksContact,
      conversation: { 'type': 'array', 'itemType': DescribeJobResponseBodyJobTasksConversation },
      duration: 'number',
      endReason: 'string',
      endTime: 'number',
      hangUpDirection: 'string',
      jobId: 'string',
      planedTime: 'number',
      realRingingDuration: 'number',
      ringingDuration: 'number',
      scenarioId: 'string',
      sipCode: 'string',
      sipDuration: 'number',
      status: 'string',
      taskId: 'string',
    };
  }

  validate() {
    if(this.contact && typeof (this.contact as any).validate === 'function') {
      (this.contact as any).validate();
    }
    if(Array.isArray(this.conversation)) {
      $dara.Model.validateArray(this.conversation);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobResponseBodyJob extends $dara.Model {
  /**
   * @example
   * 1640068026385
   */
  actualTime?: number;
  /**
   * @example
   * 137****7777
   */
  calledNumber?: string;
  /**
   * @example
   * ["057126883106"]
   */
  callingNumbers?: string[];
  /**
   * @example
   * []
   */
  contacts?: DescribeJobResponseBodyJobContacts[];
  /**
   * @example
   * -
   */
  dsReport?: string;
  /**
   * @example
   * 1
   */
  endReason?: number;
  /**
   * @example
   * []
   */
  extras?: DescribeJobResponseBodyJobExtras[];
  /**
   * @example
   * NoAnswer
   */
  failureReason?: string;
  /**
   * @example
   * d5971d98-7312-4f0e-a918-a17d67133e28
   */
  instanceId?: string;
  /**
   * @example
   * fce6c599-8ede-40e3-9f78-0928eda7b4e8
   */
  jobGroupId?: string;
  /**
   * @example
   * b72425bd-7871-4050-838e-033d80d754b7
   */
  jobId?: string;
  /**
   * @example
   * 1640068026385
   */
  nextExecutionTime?: number;
  /**
   * @example
   * 5
   */
  priority?: number;
  /**
   * @example
   * d5971d98-7312-4f0e-a918-a17d67133e28
   */
  referenceId?: string;
  /**
   * @example
   * ade80092-03d9-4f4d-ad4f-ab8a247d3150
   */
  scenarioId?: string;
  script?: DescribeJobResponseBodyJobScript;
  /**
   * @example
   * Succeeded
   */
  status?: string;
  /**
   * @example
   * c8a2b7f2-ad1a-4865-b872-d0080d9802d9
   */
  strategyId?: string;
  /**
   * @example
   * []
   */
  summary?: DescribeJobResponseBodyJobSummary[];
  /**
   * @example
   * 1
   */
  systemPriority?: number;
  /**
   * @example
   * []
   */
  tasks?: DescribeJobResponseBodyJobTasks[];
  static names(): { [key: string]: string } {
    return {
      actualTime: 'ActualTime',
      calledNumber: 'CalledNumber',
      callingNumbers: 'CallingNumbers',
      contacts: 'Contacts',
      dsReport: 'DsReport',
      endReason: 'EndReason',
      extras: 'Extras',
      failureReason: 'FailureReason',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      jobId: 'JobId',
      nextExecutionTime: 'NextExecutionTime',
      priority: 'Priority',
      referenceId: 'ReferenceId',
      scenarioId: 'ScenarioId',
      script: 'Script',
      status: 'Status',
      strategyId: 'StrategyId',
      summary: 'Summary',
      systemPriority: 'SystemPriority',
      tasks: 'Tasks',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualTime: 'number',
      calledNumber: 'string',
      callingNumbers: { 'type': 'array', 'itemType': 'string' },
      contacts: { 'type': 'array', 'itemType': DescribeJobResponseBodyJobContacts },
      dsReport: 'string',
      endReason: 'number',
      extras: { 'type': 'array', 'itemType': DescribeJobResponseBodyJobExtras },
      failureReason: 'string',
      instanceId: 'string',
      jobGroupId: 'string',
      jobId: 'string',
      nextExecutionTime: 'number',
      priority: 'number',
      referenceId: 'string',
      scenarioId: 'string',
      script: DescribeJobResponseBodyJobScript,
      status: 'string',
      strategyId: 'string',
      summary: { 'type': 'array', 'itemType': DescribeJobResponseBodyJobSummary },
      systemPriority: 'number',
      tasks: { 'type': 'array', 'itemType': DescribeJobResponseBodyJobTasks },
    };
  }

  validate() {
    if(Array.isArray(this.callingNumbers)) {
      $dara.Model.validateArray(this.callingNumbers);
    }
    if(Array.isArray(this.contacts)) {
      $dara.Model.validateArray(this.contacts);
    }
    if(Array.isArray(this.extras)) {
      $dara.Model.validateArray(this.extras);
    }
    if(this.script && typeof (this.script as any).validate === 'function') {
      (this.script as any).validate();
    }
    if(Array.isArray(this.summary)) {
      $dara.Model.validateArray(this.summary);
    }
    if(Array.isArray(this.tasks)) {
      $dara.Model.validateArray(this.tasks);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobDataParsingTaskProgressResponseBodyProgress extends $dara.Model {
  /**
   * @example
   * Permission.JobStatus
   */
  failErrorCode?: string;
  /**
   * @example
   * CreateCorpus
   */
  failReason?: string;
  feedbackUrl?: string;
  /**
   * @example
   * 2
   */
  handledJobCount?: number;
  /**
   * @example
   * Pending
   */
  status?: string;
  /**
   * @example
   * 3
   */
  totalJobCount?: number;
  static names(): { [key: string]: string } {
    return {
      failErrorCode: 'FailErrorCode',
      failReason: 'FailReason',
      feedbackUrl: 'FeedbackUrl',
      handledJobCount: 'HandledJobCount',
      status: 'Status',
      totalJobCount: 'TotalJobCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      failErrorCode: 'string',
      failReason: 'string',
      feedbackUrl: 'string',
      handledJobCount: 'number',
      status: 'string',
      totalJobCount: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupResponseBodyJobGroupExportProgress extends $dara.Model {
  /**
   * @example
   * https://oss-cn-shanghai.aliyuncs.com/xx.zip
   */
  fileHttpUrl?: string;
  /**
   * @example
   * 1
   */
  progress?: string;
  /**
   * @example
   * FINISHED
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      fileHttpUrl: 'FileHttpUrl',
      progress: 'Progress',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileHttpUrl: 'string',
      progress: 'string',
      status: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupResponseBodyJobGroupFlashSmsExtras extends $dara.Model {
  configId?: string;
  templateId?: string;
  static names(): { [key: string]: string } {
    return {
      configId: 'ConfigId',
      templateId: 'TemplateId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configId: 'string',
      templateId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupResponseBodyJobGroupProgressBriefs extends $dara.Model {
  /**
   * @example
   * score
   */
  key?: string;
  /**
   * @example
   * 5
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupResponseBodyJobGroupProgressCategories extends $dara.Model {
  /**
   * @example
   * success
   */
  key?: string;
  /**
   * @example
   * 10
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupResponseBodyJobGroupProgress extends $dara.Model {
  briefs?: DescribeJobGroupResponseBodyJobGroupProgressBriefs[];
  /**
   * @example
   * 0
   */
  cancelled?: number;
  categories?: DescribeJobGroupResponseBodyJobGroupProgressCategories[];
  /**
   * @example
   * 1000
   */
  duration?: number;
  /**
   * @example
   * 2
   */
  executing?: number;
  /**
   * @example
   * 0
   */
  failed?: number;
  /**
   * @example
   * 0
   */
  paused?: number;
  /**
   * @example
   * 5
   */
  scheduling?: number;
  /**
   * @example
   * 1578881227404
   */
  startTime?: number;
  /**
   * @example
   * Executing
   */
  status?: string;
  /**
   * @example
   * 2
   */
  totalCompleted?: number;
  /**
   * @example
   * 10
   */
  totalJobs?: number;
  /**
   * @example
   * 1
   */
  totalNotAnswered?: number;
  static names(): { [key: string]: string } {
    return {
      briefs: 'Briefs',
      cancelled: 'Cancelled',
      categories: 'Categories',
      duration: 'Duration',
      executing: 'Executing',
      failed: 'Failed',
      paused: 'Paused',
      scheduling: 'Scheduling',
      startTime: 'StartTime',
      status: 'Status',
      totalCompleted: 'TotalCompleted',
      totalJobs: 'TotalJobs',
      totalNotAnswered: 'TotalNotAnswered',
    };
  }

  static types(): { [key: string]: any } {
    return {
      briefs: { 'type': 'array', 'itemType': DescribeJobGroupResponseBodyJobGroupProgressBriefs },
      cancelled: 'number',
      categories: { 'type': 'array', 'itemType': DescribeJobGroupResponseBodyJobGroupProgressCategories },
      duration: 'number',
      executing: 'number',
      failed: 'number',
      paused: 'number',
      scheduling: 'number',
      startTime: 'number',
      status: 'string',
      totalCompleted: 'number',
      totalJobs: 'number',
      totalNotAnswered: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.briefs)) {
      $dara.Model.validateArray(this.briefs);
    }
    if(Array.isArray(this.categories)) {
      $dara.Model.validateArray(this.categories);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupResponseBodyJobGroupRecallStrategy extends $dara.Model {
  /**
   * @example
   * false
   */
  emptyNumberIgnore?: boolean;
  /**
   * @example
   * false
   */
  inArrearsIgnore?: boolean;
  /**
   * @example
   * false
   */
  outOfServiceIgnore?: boolean;
  static names(): { [key: string]: string } {
    return {
      emptyNumberIgnore: 'EmptyNumberIgnore',
      inArrearsIgnore: 'InArrearsIgnore',
      outOfServiceIgnore: 'OutOfServiceIgnore',
    };
  }

  static types(): { [key: string]: any } {
    return {
      emptyNumberIgnore: 'boolean',
      inArrearsIgnore: 'boolean',
      outOfServiceIgnore: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupResponseBodyJobGroupResult extends $dara.Model {
  /**
   * @example
   * 1
   */
  clientHangupNum?: number;
  /**
   * @example
   * 1
   */
  finishedNum?: number;
  /**
   * @example
   * 1
   */
  noInteractNum?: number;
  /**
   * @example
   * 1
   */
  timeoutHangupNum?: number;
  /**
   * @example
   * 1
   */
  unrecognizedNum?: number;
  static names(): { [key: string]: string } {
    return {
      clientHangupNum: 'ClientHangupNum',
      finishedNum: 'FinishedNum',
      noInteractNum: 'NoInteractNum',
      timeoutHangupNum: 'TimeoutHangupNum',
      unrecognizedNum: 'UnrecognizedNum',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientHangupNum: 'number',
      finishedNum: 'number',
      noInteractNum: 'number',
      timeoutHangupNum: 'number',
      unrecognizedNum: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime extends $dara.Model {
  /**
   * @example
   * 09:00:00
   */
  beginTime?: string;
  /**
   * @example
   * 12:00:00
   */
  endTime?: string;
  static names(): { [key: string]: string } {
    return {
      beginTime: 'BeginTime',
      endTime: 'EndTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beginTime: 'string',
      endTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupResponseBodyJobGroupStrategy extends $dara.Model {
  /**
   * @example
   * {}
   */
  customized?: string;
  /**
   * @example
   * 1579881227404
   */
  endTime?: number;
  /**
   * @example
   * NONE
   */
  followUpStrategy?: string;
  /**
   * @example
   * false
   */
  isTemplate?: boolean;
  /**
   * @example
   * 2
   */
  maxAttemptsPerDay?: number;
  /**
   * @example
   * 10
   */
  minAttemptInterval?: number;
  /**
   * @example
   * Once
   */
  repeatBy?: string;
  repeatDays?: string[];
  repeatable?: boolean;
  /**
   * @example
   * LocalFirst
   */
  routingStrategy?: string;
  /**
   * @example
   * 1578881227404
   */
  startTime?: number;
  strategyDescription?: string;
  /**
   * @example
   * a2bff22c-2604-4df2-83d6-5952e2438c5a
   */
  strategyId?: string;
  strategyName?: string;
  /**
   * @example
   * Repeatable
   */
  type?: string;
  workingTime?: DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime[];
  static names(): { [key: string]: string } {
    return {
      customized: 'Customized',
      endTime: 'EndTime',
      followUpStrategy: 'FollowUpStrategy',
      isTemplate: 'IsTemplate',
      maxAttemptsPerDay: 'MaxAttemptsPerDay',
      minAttemptInterval: 'MinAttemptInterval',
      repeatBy: 'RepeatBy',
      repeatDays: 'RepeatDays',
      repeatable: 'Repeatable',
      routingStrategy: 'RoutingStrategy',
      startTime: 'StartTime',
      strategyDescription: 'StrategyDescription',
      strategyId: 'StrategyId',
      strategyName: 'StrategyName',
      type: 'Type',
      workingTime: 'WorkingTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      customized: 'string',
      endTime: 'number',
      followUpStrategy: 'string',
      isTemplate: 'boolean',
      maxAttemptsPerDay: 'number',
      minAttemptInterval: 'number',
      repeatBy: 'string',
      repeatDays: { 'type': 'array', 'itemType': 'string' },
      repeatable: 'boolean',
      routingStrategy: 'string',
      startTime: 'number',
      strategyDescription: 'string',
      strategyId: 'string',
      strategyName: 'string',
      type: 'string',
      workingTime: { 'type': 'array', 'itemType': DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime },
    };
  }

  validate() {
    if(Array.isArray(this.repeatDays)) {
      $dara.Model.validateArray(this.repeatDays);
    }
    if(Array.isArray(this.workingTime)) {
      $dara.Model.validateArray(this.workingTime);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupResponseBodyJobGroup extends $dara.Model {
  callingNumbers?: string[];
  /**
   * @example
   * 1578881227404
   */
  creationTime?: number;
  exportProgress?: DescribeJobGroupResponseBodyJobGroupExportProgress;
  flashSmsExtras?: DescribeJobGroupResponseBodyJobGroupFlashSmsExtras;
  /**
   * @example
   * da37319b-6c83-4268-9f19-814aed62e401/a5a9a310-b902-4674-a6e1-29975cbaa312_100.xlsx
   */
  jobDataParsingTaskId?: string;
  /**
   * @example
   * da37319b-6c83-4268-9f19-814aed62e401/a5a9a310-b902-4674-a6e1-29975cbaa312_100.xlsx
   */
  jobFilePath?: string;
  jobGroupDescription?: string;
  /**
   * @example
   * 46a9ad0c-3e11-44da-a9a7-2c21bf5ce185
   */
  jobGroupId?: string;
  jobGroupName?: string;
  /**
   * @example
   * 1
   */
  minConcurrency?: number;
  /**
   * @example
   * 1578881227404
   */
  modifyTime?: string;
  /**
   * @example
   * 1
   */
  priority?: string;
  progress?: DescribeJobGroupResponseBodyJobGroupProgress;
  recallCallingNumbers?: string[];
  recallStrategy?: DescribeJobGroupResponseBodyJobGroupRecallStrategy;
  result?: DescribeJobGroupResponseBodyJobGroupResult;
  /**
   * @example
   * 30
   */
  ringingDuration?: number;
  /**
   * @example
   * fce6c599-8ede-40e3-9f78-0928eda7b4e8
   */
  scenarioId?: string;
  /**
   * @example
   * 49f00b0d-78ac-4d51-91de-a9e8e92b8470
   */
  scriptId?: string;
  scriptName?: string;
  /**
   * @example
   * 49f00b0d-78ac-4d51-91de-a9e8e92b8470
   */
  scriptVersion?: string;
  /**
   * @example
   * Completed
   */
  status?: string;
  strategy?: DescribeJobGroupResponseBodyJobGroupStrategy;
  static names(): { [key: string]: string } {
    return {
      callingNumbers: 'CallingNumbers',
      creationTime: 'CreationTime',
      exportProgress: 'ExportProgress',
      flashSmsExtras: 'FlashSmsExtras',
      jobDataParsingTaskId: 'JobDataParsingTaskId',
      jobFilePath: 'JobFilePath',
      jobGroupDescription: 'JobGroupDescription',
      jobGroupId: 'JobGroupId',
      jobGroupName: 'JobGroupName',
      minConcurrency: 'MinConcurrency',
      modifyTime: 'ModifyTime',
      priority: 'Priority',
      progress: 'Progress',
      recallCallingNumbers: 'RecallCallingNumbers',
      recallStrategy: 'RecallStrategy',
      result: 'Result',
      ringingDuration: 'RingingDuration',
      scenarioId: 'ScenarioId',
      scriptId: 'ScriptId',
      scriptName: 'ScriptName',
      scriptVersion: 'ScriptVersion',
      status: 'Status',
      strategy: 'Strategy',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumbers: { 'type': 'array', 'itemType': 'string' },
      creationTime: 'number',
      exportProgress: DescribeJobGroupResponseBodyJobGroupExportProgress,
      flashSmsExtras: DescribeJobGroupResponseBodyJobGroupFlashSmsExtras,
      jobDataParsingTaskId: 'string',
      jobFilePath: 'string',
      jobGroupDescription: 'string',
      jobGroupId: 'string',
      jobGroupName: 'string',
      minConcurrency: 'number',
      modifyTime: 'string',
      priority: 'string',
      progress: DescribeJobGroupResponseBodyJobGroupProgress,
      recallCallingNumbers: { 'type': 'array', 'itemType': 'string' },
      recallStrategy: DescribeJobGroupResponseBodyJobGroupRecallStrategy,
      result: DescribeJobGroupResponseBodyJobGroupResult,
      ringingDuration: 'number',
      scenarioId: 'string',
      scriptId: 'string',
      scriptName: 'string',
      scriptVersion: 'string',
      status: 'string',
      strategy: DescribeJobGroupResponseBodyJobGroupStrategy,
    };
  }

  validate() {
    if(Array.isArray(this.callingNumbers)) {
      $dara.Model.validateArray(this.callingNumbers);
    }
    if(this.exportProgress && typeof (this.exportProgress as any).validate === 'function') {
      (this.exportProgress as any).validate();
    }
    if(this.flashSmsExtras && typeof (this.flashSmsExtras as any).validate === 'function') {
      (this.flashSmsExtras as any).validate();
    }
    if(this.progress && typeof (this.progress as any).validate === 'function') {
      (this.progress as any).validate();
    }
    if(Array.isArray(this.recallCallingNumbers)) {
      $dara.Model.validateArray(this.recallCallingNumbers);
    }
    if(this.recallStrategy && typeof (this.recallStrategy as any).validate === 'function') {
      (this.recallStrategy as any).validate();
    }
    if(this.result && typeof (this.result as any).validate === 'function') {
      (this.result as any).validate();
    }
    if(this.strategy && typeof (this.strategy as any).validate === 'function') {
      (this.strategy as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion extends $dara.Model {
  /**
   * @example
   * 3.mkv
   */
  fileName?: string;
  /**
   * @example
   * 93
   */
  fileSize?: number;
  /**
   * @example
   * 402681645884289024
   */
  versionId?: string;
  static names(): { [key: string]: string } {
    return {
      fileName: 'FileName',
      fileSize: 'FileSize',
      versionId: 'VersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileName: 'string',
      fileSize: 'number',
      versionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNumberDistrictInfoStatusResponseBodyParsingVersion extends $dara.Model {
  /**
   * @example
   * template (3).xlsx
   */
  fileName?: string;
  /**
   * @example
   * 659968
   */
  fileSize?: number;
  /**
   * @example
   * 10
   */
  parseProgress?: number;
  /**
   * @example
   * 64615
   */
  versionId?: string;
  static names(): { [key: string]: string } {
    return {
      fileName: 'FileName',
      fileSize: 'FileSize',
      parseProgress: 'ParseProgress',
      versionId: 'VersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileName: 'string',
      fileSize: 'number',
      parseProgress: 'number',
      versionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScriptResponseBodyScriptNluProfile extends $dara.Model {
  fcFunction?: string;
  fcHttpTriggerUrl?: string;
  fcRegion?: string;
  static names(): { [key: string]: string } {
    return {
      fcFunction: 'FcFunction',
      fcHttpTriggerUrl: 'FcHttpTriggerUrl',
      fcRegion: 'FcRegion',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fcFunction: 'string',
      fcHttpTriggerUrl: 'string',
      fcRegion: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScriptResponseBodyScript extends $dara.Model {
  agentId?: number;
  agentKey?: string;
  agentLlm?: boolean;
  /**
   * @example
   * {\\"AppKey\\":\\"3GHttnsvir1FeWWb\\"}
   */
  asrConfig?: string;
  chatConfig?: string;
  /**
   * @example
   * chatbot-cn-EJfqqa***
   */
  chatbotId?: string;
  /**
   * @example
   * DRAFTED
   */
  debugStatus?: string;
  /**
   * @example
   * true
   */
  emotionEnable?: boolean;
  industry?: string;
  /**
   * @example
   * true
   */
  isDebugDrafted?: boolean;
  /**
   * @example
   * true
   */
  isDrafted?: boolean;
  /**
   * @example
   * true
   */
  longWaitEnable?: boolean;
  /**
   * @example
   * true
   */
  miniPlaybackEnable?: boolean;
  /**
   * @example
   * true
   */
  newBargeInEnable?: boolean;
  nluEngine?: string;
  nluProfile?: DescribeScriptResponseBodyScriptNluProfile;
  scene?: string;
  scriptDescription?: string;
  /**
   * @example
   * 810b5872-57f0-4b27-80ab-7b3f4d8a6374
   */
  scriptId?: string;
  scriptName?: string;
  /**
   * @example
   * DRAFTED
   */
  status?: string;
  /**
   * @example
   * {\\"voice\\":\\"xiaobei\\",\\"volume\\":\\"50\\",\\"speechRate\\":\\"-150\\",\\"pitchRate\\":\\"0\\"}
   */
  ttsConfig?: string;
  /**
   * @example
   * 1578881227000
   */
  updateTime?: number;
  static names(): { [key: string]: string } {
    return {
      agentId: 'AgentId',
      agentKey: 'AgentKey',
      agentLlm: 'AgentLlm',
      asrConfig: 'AsrConfig',
      chatConfig: 'ChatConfig',
      chatbotId: 'ChatbotId',
      debugStatus: 'DebugStatus',
      emotionEnable: 'EmotionEnable',
      industry: 'Industry',
      isDebugDrafted: 'IsDebugDrafted',
      isDrafted: 'IsDrafted',
      longWaitEnable: 'LongWaitEnable',
      miniPlaybackEnable: 'MiniPlaybackEnable',
      newBargeInEnable: 'NewBargeInEnable',
      nluEngine: 'NluEngine',
      nluProfile: 'NluProfile',
      scene: 'Scene',
      scriptDescription: 'ScriptDescription',
      scriptId: 'ScriptId',
      scriptName: 'ScriptName',
      status: 'Status',
      ttsConfig: 'TtsConfig',
      updateTime: 'UpdateTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentId: 'number',
      agentKey: 'string',
      agentLlm: 'boolean',
      asrConfig: 'string',
      chatConfig: 'string',
      chatbotId: 'string',
      debugStatus: 'string',
      emotionEnable: 'boolean',
      industry: 'string',
      isDebugDrafted: 'boolean',
      isDrafted: 'boolean',
      longWaitEnable: 'boolean',
      miniPlaybackEnable: 'boolean',
      newBargeInEnable: 'boolean',
      nluEngine: 'string',
      nluProfile: DescribeScriptResponseBodyScriptNluProfile,
      scene: 'string',
      scriptDescription: 'string',
      scriptId: 'string',
      scriptName: 'string',
      status: 'string',
      ttsConfig: 'string',
      updateTime: 'number',
    };
  }

  validate() {
    if(this.nluProfile && typeof (this.nluProfile as any).validate === 'function') {
      (this.nluProfile as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig extends $dara.Model {
  /**
   * @example
   * 291cfc6a-8703-4bdd-a99d-9cba32d5288a
   */
  instanceId?: string;
  scriptContent?: string;
  /**
   * @example
   * 947e0875-b5d4-4b33-b18c-7b2cf85bcb4f
   */
  scriptId?: string;
  /**
   * @example
   * 2a07b634-e15d-445f-bbcb-fc4ea2df7b87
   */
  scriptVoiceConfigId?: string;
  scriptWaveformRelation?: string;
  /**
   * @example
   * DIALOGUE_FLOW
   */
  source?: string;
  /**
   * @example
   * WAVEFORM
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptContent: 'ScriptContent',
      scriptId: 'ScriptId',
      scriptVoiceConfigId: 'ScriptVoiceConfigId',
      scriptWaveformRelation: 'ScriptWaveformRelation',
      source: 'Source',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptContent: 'string',
      scriptId: 'string',
      scriptVoiceConfigId: 'string',
      scriptWaveformRelation: 'string',
      source: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTTSConfigResponseBodyTTSConfig extends $dara.Model {
  appKey?: string;
  /**
   * @example
   * 947e0875-b5d4-4b33-b18c-7b2cf85bcb4f
   */
  instanceId?: string;
  /**
   * @example
   * Managed
   */
  nlsServiceType?: string;
  /**
   * @example
   * -150
   */
  speechRate?: string;
  /**
   * @example
   * xiaoyun
   */
  voice?: string;
  /**
   * @example
   * 100
   */
  volume?: string;
  static names(): { [key: string]: string } {
    return {
      appKey: 'AppKey',
      instanceId: 'InstanceId',
      nlsServiceType: 'NlsServiceType',
      speechRate: 'SpeechRate',
      voice: 'Voice',
      volume: 'Volume',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appKey: 'string',
      instanceId: 'string',
      nlsServiceType: 'string',
      speechRate: 'string',
      voice: 'string',
      volume: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagHitsSummaryResponseBodyTagGroups extends $dara.Model {
  /**
   * @remarks
   * ID
   * 
   * @example
   * 8bb6f8ca-85a3-49f8-86a5-3127902a2156
   */
  id?: string;
  /**
   * @example
   * 84fc7c41-f918-4a47-b742-a439b35a8567
   */
  scriptId?: string;
  tagGroup?: string;
  /**
   * @example
   * 0
   */
  tagGroupIndex?: number;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      scriptId: 'ScriptId',
      tagGroup: 'TagGroup',
      tagGroupIndex: 'TagGroupIndex',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      scriptId: 'string',
      tagGroup: 'string',
      tagGroupIndex: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagHitsSummaryResponseBodyTagHitsList extends $dara.Model {
  /**
   * @example
   * 1
   */
  hitCount?: number;
  tagGroup?: string;
  tagName?: string;
  static names(): { [key: string]: string } {
    return {
      hitCount: 'HitCount',
      tagGroup: 'TagGroup',
      tagName: 'TagName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hitCount: 'number',
      tagGroup: 'string',
      tagName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTenantBindNumberResponseBodyDataList extends $dara.Model {
  /**
   * @example
   * e2d7a184-7d6c-45d4-ac24-34ab48f54669
   */
  instanceId?: string;
  /**
   * @example
   * xxxx
   */
  instanceName?: string;
  /**
   * @example
   * true
   */
  isBinding?: boolean;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      instanceName: 'InstanceName',
      isBinding: 'IsBinding',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      instanceName: 'string',
      isBinding: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTenantBindNumberResponseBodyData extends $dara.Model {
  list?: DescribeTenantBindNumberResponseBodyDataList[];
  static names(): { [key: string]: string } {
    return {
      list: 'List',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': DescribeTenantBindNumberResponseBodyDataList },
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DialogueResponseBodyFeedback extends $dara.Model {
  /**
   * @example
   * broadcast
   */
  action?: string;
  actionParams?: string;
  content?: string;
  /**
   * @remarks
   * 已废弃
   * 
   * @example
   * “”
   */
  contentParams?: string;
  /**
   * @example
   * true
   */
  interruptible?: boolean;
  static names(): { [key: string]: string } {
    return {
      action: 'Action',
      actionParams: 'ActionParams',
      content: 'Content',
      contentParams: 'ContentParams',
      interruptible: 'Interruptible',
    };
  }

  static types(): { [key: string]: any } {
    return {
      action: 'string',
      actionParams: 'string',
      content: 'string',
      contentParams: 'string',
      interruptible: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadRecordingResponseBodyDownloadParams extends $dara.Model {
  /**
   * @example
   * 281eb174-3865-41c1-9274-7b6813edadab.wav
   */
  fileName?: string;
  /**
   * @example
   * http://tiangong-staging.oss-cn-shanghai.aliyuncs.com/record/281eb174-3865-41c1-9274-7b6813edadab.wav?Expires=1578624046&OSSAccessKeyId=LTAI****cqw&Signature=dL2dxWS6VcdZrvG9xOMOBMSP3Fg%3D
   */
  signatureUrl?: string;
  voiceSliceRecordingListJson?: string;
  static names(): { [key: string]: string } {
    return {
      fileName: 'FileName',
      signatureUrl: 'SignatureUrl',
      voiceSliceRecordingListJson: 'VoiceSliceRecordingListJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileName: 'string',
      signatureUrl: 'string',
      voiceSliceRecordingListJson: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadScriptRecordingResponseBodyDownloadParams extends $dara.Model {
  /**
   * @example
   * 281eb174-3865-41c1-9274-7b6813edadab.wav
   */
  fileName?: string;
  /**
   * @example
   * http://tiangong-staging.oss-cn-shanghai.aliyuncs.com/record/281eb174-3865-41c1-9274-7b6813edadab.wav?Expires=1578624046&OSSAccessKeyId=LTAI****cqw&Signature=dL2dxWS6VcdZrvG9xOMOBMSP3Fg%3D
   */
  signatureUrl?: string;
  static names(): { [key: string]: string } {
    return {
      fileName: 'FileName',
      signatureUrl: 'SignatureUrl',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileName: 'string',
      signatureUrl: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportScriptResponseBodyDownloadParams extends $dara.Model {
  /**
   * @example
   * http://tiangong-staging.oss-cn-shanghai.aliyuncs.com/record/281eb174-3865-41c1-9274-7b6813edadab.wav?Expires=1578624046&OSSAccessKeyId=LTAI****cqw&Signature=dL2dxWS6VcdZrvG9xOMOBMSP3Fg%3D
   */
  signatureUrl?: string;
  static names(): { [key: string]: string } {
    return {
      signatureUrl: 'SignatureUrl',
    };
  }

  static types(): { [key: string]: any } {
    return {
      signatureUrl: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GenerateUploadUrlResponseBodyData extends $dara.Model {
  /**
   * @example
   * LTAIvKWEr4DoFSqz
   */
  accessId?: string;
  /**
   * @example
   * 1742960933
   */
  expire?: number;
  /**
   * @example
   * pload/file/874d7371-791b-4281-935c-637630a37785/874d7371-791b-4281-935c-637630a37785_9bd7916d-a340-4925-a911-92390cbe0f33.json
   */
  folder?: string;
  /**
   * @example
   * https://cloudagentbot-online.oss-cn-hangzhou.aliyuncs.com
   */
  host?: string;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * eyJleHBpcmF0aW9uIjoiMjAyNS0wMy0yNlQwMzo0ODo1My4wMzVaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsNTI0Mjg4MF0sWyJzdGFydHMtd2l0aCIsIiRrZXkiLCJ1cGxvYWQvZmlsZS84NzRkNzM3MS03OTFiLTQyODEtOTM1Yy02Mzc2MzBhMzc3ODUvIl1dfQ==",
   */
  policy?: string;
  /**
   * @example
   * I6d1ONWVuTj5i0Kz4Vn+V0lC6v4=
   */
  signature?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      accessId: 'AccessId',
      expire: 'Expire',
      folder: 'Folder',
      host: 'Host',
      message: 'Message',
      policy: 'Policy',
      signature: 'Signature',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessId: 'string',
      expire: 'number',
      folder: 'string',
      host: 'string',
      message: 'string',
      policy: 'string',
      signature: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAgentProfileResponseBodyData extends $dara.Model {
  /**
   * @example
   * 37ca3ca1ac4b4e57adf3da5b5d939d04
   */
  agentProfileId?: string;
  /**
   * @example
   * default-survey
   */
  agentProfileTemplateId?: string;
  /**
   * @remarks
   * agent type
   * 
   * @example
   * ""
   */
  agentType?: string;
  /**
   * @example
   * []
   */
  apiPluginJson?: string;
  /**
   * @example
   * 1741338619000
   */
  createTime?: string;
  description?: string;
  /**
   * @example
   * 7f04f92c-ccfc-4f8f-a816-6902023be5c6
   */
  instanceId?: string;
  /**
   * @example
   * [{"type":"TransferToAgent","instructions":[{"code":"Transfer0","skillGroupId":"123","skillGroupName":"123"}],"timeoutEnable":false},{"type":"CollectNumber","instructions":[]}]
   */
  instructionJson?: string;
  labelsJson?: string;
  /**
   * @example
   * model_002
   */
  model?: string;
  /**
   * @example
   * {}
   */
  modelConfig?: string;
  /**
   * @example
   * {"chatbotInstanceId":"chatbot-cn-j7eiVJZRmb","faqCategoryIds":[30000474726],"llmAgentId":"1246206","llmAgentInstanceId":"outbound_05efb75a-95df-438e-9b9b-8f2c857d5498","llmAgentKey":"d682716514814815ae77757c0bcbda01_p_outbound_public"}
   */
  nluConfigJson?: string;
  /**
   * @example
   * ""
   */
  prompt?: string;
  promptJson?: string;
  scenario?: string;
  /**
   * @example
   * d13ad2d3-3fe6-4352-b38b-bd6559047de8
   */
  scriptId?: string;
  /**
   * @example
   * false
   */
  system?: boolean;
  /**
   * @example
   * 1741338619000
   */
  updateTime?: string;
  variablesJson?: string;
  static names(): { [key: string]: string } {
    return {
      agentProfileId: 'AgentProfileId',
      agentProfileTemplateId: 'AgentProfileTemplateId',
      agentType: 'AgentType',
      apiPluginJson: 'ApiPluginJson',
      createTime: 'CreateTime',
      description: 'Description',
      instanceId: 'InstanceId',
      instructionJson: 'InstructionJson',
      labelsJson: 'LabelsJson',
      model: 'Model',
      modelConfig: 'ModelConfig',
      nluConfigJson: 'NluConfigJson',
      prompt: 'Prompt',
      promptJson: 'PromptJson',
      scenario: 'Scenario',
      scriptId: 'ScriptId',
      system: 'System',
      updateTime: 'UpdateTime',
      variablesJson: 'VariablesJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentProfileId: 'string',
      agentProfileTemplateId: 'string',
      agentType: 'string',
      apiPluginJson: 'string',
      createTime: 'string',
      description: 'string',
      instanceId: 'string',
      instructionJson: 'string',
      labelsJson: 'string',
      model: 'string',
      modelConfig: 'string',
      nluConfigJson: 'string',
      prompt: 'string',
      promptJson: 'string',
      scenario: 'string',
      scriptId: 'string',
      system: 'boolean',
      updateTime: 'string',
      variablesJson: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAgentProfileTemplateResponseBodyData extends $dara.Model {
  /**
   * @example
   * default-survey
   */
  agentProfileTemplateId?: string;
  /**
   * @example
   * 1720766491000
   */
  createTime?: string;
  description?: string;
  name?: string;
  promptSchema?: string;
  /**
   * @example
   * 1720766491000
   */
  updateTime?: string;
  static names(): { [key: string]: string } {
    return {
      agentProfileTemplateId: 'AgentProfileTemplateId',
      createTime: 'CreateTime',
      description: 'Description',
      name: 'Name',
      promptSchema: 'PromptSchema',
      updateTime: 'UpdateTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentProfileTemplateId: 'string',
      createTime: 'string',
      description: 'string',
      name: 'string',
      promptSchema: 'string',
      updateTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAnnotationMissionSummaryResponseBodyDataAsrSummaryInfo extends $dara.Model {
  /**
   * @example
   * 1
   */
  addCustomizationDataCount?: number;
  /**
   * @example
   * 1
   */
  addVocabularyDataCount?: number;
  /**
   * @example
   * 1
   */
  annotationInvalid?: number;
  /**
   * @example
   * 1
   */
  characterCorrectRate?: number;
  /**
   * @example
   * 1
   */
  characterErrorRate?: number;
  /**
   * @example
   * 1
   */
  chatTotalCount?: number;
  /**
   * @example
   * 1
   */
  noAnnotation?: number;
  /**
   * @example
   * 1
   */
  sentenceErrorRate?: number;
  /**
   * @example
   * 1
   */
  wordErrorRate?: number;
  static names(): { [key: string]: string } {
    return {
      addCustomizationDataCount: 'AddCustomizationDataCount',
      addVocabularyDataCount: 'AddVocabularyDataCount',
      annotationInvalid: 'AnnotationInvalid',
      characterCorrectRate: 'CharacterCorrectRate',
      characterErrorRate: 'CharacterErrorRate',
      chatTotalCount: 'ChatTotalCount',
      noAnnotation: 'NoAnnotation',
      sentenceErrorRate: 'SentenceErrorRate',
      wordErrorRate: 'WordErrorRate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      addCustomizationDataCount: 'number',
      addVocabularyDataCount: 'number',
      annotationInvalid: 'number',
      characterCorrectRate: 'number',
      characterErrorRate: 'number',
      chatTotalCount: 'number',
      noAnnotation: 'number',
      sentenceErrorRate: 'number',
      wordErrorRate: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAnnotationMissionSummaryResponseBodyDataIntentSummaryInfo extends $dara.Model {
  /**
   * @example
   * 1
   */
  annotationCorrectCount?: number;
  /**
   * @example
   * 1
   */
  annotationInvalid?: number;
  /**
   * @example
   * 1
   */
  chatTotalCount?: number;
  /**
   * @example
   * 1
   */
  intentUserSayCount?: number;
  /**
   * @example
   * 1
   */
  intentionNotCoveredCount?: number;
  /**
   * @example
   * 1
   */
  matchErrorCount?: number;
  /**
   * @example
   * 1
   */
  noAnnotation?: number;
  /**
   * @example
   * 1
   */
  translationUnrecognizedCount?: number;
  static names(): { [key: string]: string } {
    return {
      annotationCorrectCount: 'AnnotationCorrectCount',
      annotationInvalid: 'AnnotationInvalid',
      chatTotalCount: 'ChatTotalCount',
      intentUserSayCount: 'IntentUserSayCount',
      intentionNotCoveredCount: 'IntentionNotCoveredCount',
      matchErrorCount: 'MatchErrorCount',
      noAnnotation: 'NoAnnotation',
      translationUnrecognizedCount: 'TranslationUnrecognizedCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationCorrectCount: 'number',
      annotationInvalid: 'number',
      chatTotalCount: 'number',
      intentUserSayCount: 'number',
      intentionNotCoveredCount: 'number',
      matchErrorCount: 'number',
      noAnnotation: 'number',
      translationUnrecognizedCount: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAnnotationMissionSummaryResponseBodyDataTagSummaryInfoTagSummaryInfoDetailList extends $dara.Model {
  /**
   * @example
   * 3
   */
  count?: number;
  name?: string;
  static names(): { [key: string]: string } {
    return {
      count: 'Count',
      name: 'Name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      count: 'number',
      name: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAnnotationMissionSummaryResponseBodyDataTagSummaryInfo extends $dara.Model {
  tagSummaryInfoDetailList?: GetAnnotationMissionSummaryResponseBodyDataTagSummaryInfoTagSummaryInfoDetailList[];
  static names(): { [key: string]: string } {
    return {
      tagSummaryInfoDetailList: 'TagSummaryInfoDetailList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tagSummaryInfoDetailList: { 'type': 'array', 'itemType': GetAnnotationMissionSummaryResponseBodyDataTagSummaryInfoTagSummaryInfoDetailList },
    };
  }

  validate() {
    if(Array.isArray(this.tagSummaryInfoDetailList)) {
      $dara.Model.validateArray(this.tagSummaryInfoDetailList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAnnotationMissionSummaryResponseBodyData extends $dara.Model {
  /**
   * @example
   * b3f2c931-5180-43ca-b4aa-2baee2d73c8b
   */
  annotationMissionId?: string;
  asrSummaryInfo?: GetAnnotationMissionSummaryResponseBodyDataAsrSummaryInfo;
  intentSummaryInfo?: GetAnnotationMissionSummaryResponseBodyDataIntentSummaryInfo;
  /**
   * @example
   * You are not authorized to perform this action. CDR:View privileges are required.
   */
  message?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  tagSummaryInfo?: GetAnnotationMissionSummaryResponseBodyDataTagSummaryInfo;
  static names(): { [key: string]: string } {
    return {
      annotationMissionId: 'AnnotationMissionId',
      asrSummaryInfo: 'AsrSummaryInfo',
      intentSummaryInfo: 'IntentSummaryInfo',
      message: 'Message',
      success: 'Success',
      tagSummaryInfo: 'TagSummaryInfo',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionId: 'string',
      asrSummaryInfo: GetAnnotationMissionSummaryResponseBodyDataAsrSummaryInfo,
      intentSummaryInfo: GetAnnotationMissionSummaryResponseBodyDataIntentSummaryInfo,
      message: 'string',
      success: 'boolean',
      tagSummaryInfo: GetAnnotationMissionSummaryResponseBodyDataTagSummaryInfo,
    };
  }

  validate() {
    if(this.asrSummaryInfo && typeof (this.asrSummaryInfo as any).validate === 'function') {
      (this.asrSummaryInfo as any).validate();
    }
    if(this.intentSummaryInfo && typeof (this.intentSummaryInfo as any).validate === 'function') {
      (this.intentSummaryInfo as any).validate();
    }
    if(this.tagSummaryInfo && typeof (this.tagSummaryInfo as any).validate === 'function') {
      (this.tagSummaryInfo as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAnnotationMissionTagInfoListResponseBodyDataAnnotationMissionTagInfoList extends $dara.Model {
  annotationMissionTagInfoDescription?: string;
  /**
   * @example
   * e1ee87ea-ebad-4079-aebb-1c56a4ef0c06
   */
  annotationMissionTagInfoId?: string;
  annotationMissionTagInfoName?: string;
  /**
   * @example
   * false
   */
  delete?: boolean;
  /**
   * @example
   * 3c3b8d1d-deff-48d9-9318-addc80ae5b1e
   */
  instanceId?: string;
  /**
   * @example
   * DING_ORG_dingbd9daecdb7aaed3bffe93478753d9884
   */
  tenantId?: string;
  static names(): { [key: string]: string } {
    return {
      annotationMissionTagInfoDescription: 'AnnotationMissionTagInfoDescription',
      annotationMissionTagInfoId: 'AnnotationMissionTagInfoId',
      annotationMissionTagInfoName: 'AnnotationMissionTagInfoName',
      delete: 'Delete',
      instanceId: 'InstanceId',
      tenantId: 'TenantId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionTagInfoDescription: 'string',
      annotationMissionTagInfoId: 'string',
      annotationMissionTagInfoName: 'string',
      delete: 'boolean',
      instanceId: 'string',
      tenantId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAnnotationMissionTagInfoListResponseBodyData extends $dara.Model {
  annotationMissionTagInfoList?: GetAnnotationMissionTagInfoListResponseBodyDataAnnotationMissionTagInfoList[];
  /**
   * @example
   * CDR \\"job-efbaeefc-4d45-4e79-83f7-b33b0769c969\\" doesn\\"t exists.
   */
  message?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      annotationMissionTagInfoList: 'AnnotationMissionTagInfoList',
      message: 'Message',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionTagInfoList: { 'type': 'array', 'itemType': GetAnnotationMissionTagInfoListResponseBodyDataAnnotationMissionTagInfoList },
      message: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.annotationMissionTagInfoList)) {
      $dara.Model.validateArray(this.annotationMissionTagInfoList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetBaseStrategyPeriodResponseBodyWorkingTime extends $dara.Model {
  /**
   * @example
   * 00:00:00
   */
  beginTime?: string;
  /**
   * @example
   * 0
   */
  beginTimeMillis?: number;
  /**
   * @example
   * 00:00:00
   */
  endTime?: string;
  /**
   * @example
   * 0
   */
  endTimeMillis?: number;
  static names(): { [key: string]: string } {
    return {
      beginTime: 'BeginTime',
      beginTimeMillis: 'BeginTimeMillis',
      endTime: 'EndTime',
      endTimeMillis: 'EndTimeMillis',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beginTime: 'string',
      beginTimeMillis: 'number',
      endTime: 'string',
      endTimeMillis: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContactBlockListResponseBodyContactBlocklistListList extends $dara.Model {
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  contactBlockListId?: string;
  /**
   * @example
   * 1640077685465
   */
  creationTime?: number;
  /**
   * @example
   * xxx
   */
  creator?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  instanceId?: string;
  /**
   * @example
   * xxx
   */
  name?: string;
  /**
   * @example
   * xxx
   */
  operator?: string;
  /**
   * @example
   * 1388888888
   */
  phoneNumber?: string;
  /**
   * @example
   * xxxx
   */
  remark?: string;
  static names(): { [key: string]: string } {
    return {
      contactBlockListId: 'ContactBlockListId',
      creationTime: 'CreationTime',
      creator: 'Creator',
      instanceId: 'InstanceId',
      name: 'Name',
      operator: 'Operator',
      phoneNumber: 'PhoneNumber',
      remark: 'Remark',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactBlockListId: 'string',
      creationTime: 'number',
      creator: 'string',
      instanceId: 'string',
      name: 'string',
      operator: 'string',
      phoneNumber: 'string',
      remark: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContactBlockListResponseBodyContactBlocklistList extends $dara.Model {
  /**
   * @example
   * []
   */
  list?: GetContactBlockListResponseBodyContactBlocklistListList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 100
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': GetContactBlockListResponseBodyContactBlocklistListList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContactWhiteListResponseBodyContactWhitelistListList extends $dara.Model {
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  contactWhiteListId?: string;
  /**
   * @example
   * 1640174411848
   */
  creationTime?: number;
  creator?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  instanceId?: string;
  name?: string;
  /**
   * @example
   * xxx
   */
  operator?: string;
  /**
   * @example
   * 13959999999
   */
  phoneNumber?: string;
  /**
   * @example
   * xxxx
   */
  remark?: string;
  static names(): { [key: string]: string } {
    return {
      contactWhiteListId: 'ContactWhiteListId',
      creationTime: 'CreationTime',
      creator: 'Creator',
      instanceId: 'InstanceId',
      name: 'Name',
      operator: 'Operator',
      phoneNumber: 'PhoneNumber',
      remark: 'Remark',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactWhiteListId: 'string',
      creationTime: 'number',
      creator: 'string',
      instanceId: 'string',
      name: 'string',
      operator: 'string',
      phoneNumber: 'string',
      remark: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContactWhiteListResponseBodyContactWhitelistList extends $dara.Model {
  /**
   * @example
   * {}
   */
  list?: GetContactWhiteListResponseBodyContactWhitelistListList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 100
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': GetContactWhiteListResponseBodyContactWhitelistListList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetJobDataUploadParamsResponseBodyUploadParams extends $dara.Model {
  /**
   * @example
   * LTAIvKWEr4DoFSqz
   */
  accessId?: string;
  /**
   * @example
   * 1741855527
   */
  expire?: number;
  /**
   * @example
   * UPLOADED/SCRIPT/136a055e-3d07-46c6-853a-731b3a2973de/18dc6d79-338f-413c-a5a8-dcce5f05b41a_9bd7916d-a340-4925-a911-92390cbe0f33.json
   */
  folder?: string;
  /**
   * @example
   * https://cloudagentbot-online.oss-cn-hangzhou.aliyuncs.com
   */
  host?: string;
  /**
   * @example
   * eyJleHBpcmF0aW9uIjoiMjAyNS0wMy0xM1QwODo0NToyNy4zMzFaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsNTI0Mjg4MDBdLFsic3RhcnRzLXdpdGgiLCIka2V5IiwiVVBMT0FERUQvU0NSSVBULzEzNmEwNTVlLTNkMDctNDZjNi04NTNhLTczMWIzYTI5NzNkZS8iXV19
   */
  policy?: string;
  /**
   * @example
   * MD4CHQCiECtjdsP+fstJDcqsPt+GbWxSWPzGQxeQiblzAh0AuidaKc5JY5AkHFIE+qiQI3izJQQbpUoG0paPTw==
   */
  signature?: string;
  static names(): { [key: string]: string } {
    return {
      accessId: 'AccessId',
      expire: 'Expire',
      folder: 'Folder',
      host: 'Host',
      policy: 'Policy',
      signature: 'Signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessId: 'string',
      expire: 'number',
      folder: 'string',
      host: 'string',
      policy: 'string',
      signature: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRealtimeConcurrencyReportResponseBodyReportsList extends $dara.Model {
  /**
   * @example
   * 85bf7efa-a07c-498a-850e-99a5849b8589
   */
  instanceId?: string;
  instanceName?: string;
  /**
   * @example
   * c62e6789-28a8-41db-941e-171a01d3b3b9
   */
  jobGroupId?: string;
  jobGroupName?: string;
  /**
   * @example
   * 2
   */
  maxConcurrencyLimit?: number;
  /**
   * @example
   * 0
   */
  minConcurrencyLimit?: number;
  /**
   * @example
   * 1
   */
  occupiedConcurrencyCount?: number;
  /**
   * @example
   * 1743474900488
   */
  reportDate?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      instanceName: 'InstanceName',
      jobGroupId: 'JobGroupId',
      jobGroupName: 'JobGroupName',
      maxConcurrencyLimit: 'MaxConcurrencyLimit',
      minConcurrencyLimit: 'MinConcurrencyLimit',
      occupiedConcurrencyCount: 'OccupiedConcurrencyCount',
      reportDate: 'ReportDate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      instanceName: 'string',
      jobGroupId: 'string',
      jobGroupName: 'string',
      maxConcurrencyLimit: 'number',
      minConcurrencyLimit: 'number',
      occupiedConcurrencyCount: 'number',
      reportDate: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRealtimeConcurrencyReportResponseBodyReports extends $dara.Model {
  list?: GetRealtimeConcurrencyReportResponseBodyReportsList[];
  /**
   * @example
   * 2
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 16
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': GetRealtimeConcurrencyReportResponseBodyReportsList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSummaryInfoResponseBodyAgentBotInstanceSummaryList extends $dara.Model {
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  instanceId?: string;
  /**
   * @example
   * 12
   */
  totalCallCount?: number;
  /**
   * @example
   * 10
   */
  totalCallTime?: number;
  /**
   * @example
   * 10
   */
  usedRecordingStorageSpace?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      totalCallCount: 'TotalCallCount',
      totalCallTime: 'TotalCallTime',
      usedRecordingStorageSpace: 'UsedRecordingStorageSpace',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      totalCallCount: 'number',
      totalCallTime: 'number',
      usedRecordingStorageSpace: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskByUuidResponseBodyTaskConversations extends $dara.Model {
  action?: string;
  script?: string;
  sequenceId?: string;
  speaker?: string;
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      action: 'Action',
      script: 'Script',
      sequenceId: 'SequenceId',
      speaker: 'Speaker',
      timestamp: 'Timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      action: 'string',
      script: 'string',
      sequenceId: 'string',
      speaker: 'string',
      timestamp: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskByUuidResponseBodyTask extends $dara.Model {
  /**
   * @example
   * 1640090211434
   */
  actualTime?: number;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  callId?: string;
  /**
   * @example
   * 13777777777
   */
  calledNumber?: string;
  /**
   * @example
   * 057190294
   */
  callingNumber?: string;
  conversations?: GetTaskByUuidResponseBodyTaskConversations[];
  /**
   * @example
   * 1640090211434
   */
  endReason?: number;
  /**
   * @example
   * 1640090211434
   */
  endTime?: number;
  /**
   * @example
   * 2
   */
  id?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  instanceId?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  jobGroupId?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  jobId?: string;
  /**
   * @example
   * 1640090211434
   */
  plannedTime?: number;
  static names(): { [key: string]: string } {
    return {
      actualTime: 'ActualTime',
      callId: 'CallId',
      calledNumber: 'CalledNumber',
      callingNumber: 'CallingNumber',
      conversations: 'Conversations',
      endReason: 'EndReason',
      endTime: 'EndTime',
      id: 'Id',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      jobId: 'JobId',
      plannedTime: 'PlannedTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualTime: 'number',
      callId: 'string',
      calledNumber: 'string',
      callingNumber: 'string',
      conversations: { 'type': 'array', 'itemType': GetTaskByUuidResponseBodyTaskConversations },
      endReason: 'number',
      endTime: 'number',
      id: 'string',
      instanceId: 'string',
      jobGroupId: 'string',
      jobId: 'string',
      plannedTime: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.conversations)) {
      $dara.Model.validateArray(this.conversations);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAgentProfilesResponseBodyData extends $dara.Model {
  /**
   * @example
   * 37ca3ca1ac4b4e57adf3da5b5d939d04
   */
  agentProfileId?: string;
  /**
   * @example
   * default-survey
   */
  agentProfileTemplateId?: string;
  /**
   * @remarks
   * agent type
   * 
   * @example
   * “”
   */
  agentType?: string;
  /**
   * @example
   * 1721701525327
   */
  createTime?: string;
  description?: string;
  /**
   * @example
   * e49ad122-15a1-443a-a102-84a78a93be79
   */
  instanceId?: string;
  /**
   * @example
   * [{"type":"TransferToAgent","instructions":[{"code":"Transfer0","skillGroupId":"123","skillGroupName":"123"}],"timeoutEnable":false},{"type":"CollectNumber","instructions":[]}]
   */
  instructionJson?: string;
  labelsJson?: string;
  /**
   * @example
   * model_002
   */
  model?: string;
  /**
   * @example
   * {}
   */
  modelConfig?: string;
  /**
   * @example
   * “”
   */
  prompt?: string;
  promptJson?: string;
  scenario?: string;
  /**
   * @example
   * 43972417-0657-452a-81c2-c59d8245a9b2
   */
  scriptId?: string;
  /**
   * @example
   * false
   */
  system?: boolean;
  /**
   * @example
   * 1721701525327
   */
  updateTime?: string;
  variablesJson?: string;
  static names(): { [key: string]: string } {
    return {
      agentProfileId: 'AgentProfileId',
      agentProfileTemplateId: 'AgentProfileTemplateId',
      agentType: 'AgentType',
      createTime: 'CreateTime',
      description: 'Description',
      instanceId: 'InstanceId',
      instructionJson: 'InstructionJson',
      labelsJson: 'LabelsJson',
      model: 'Model',
      modelConfig: 'ModelConfig',
      prompt: 'Prompt',
      promptJson: 'PromptJson',
      scenario: 'Scenario',
      scriptId: 'ScriptId',
      system: 'System',
      updateTime: 'UpdateTime',
      variablesJson: 'VariablesJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentProfileId: 'string',
      agentProfileTemplateId: 'string',
      agentType: 'string',
      createTime: 'string',
      description: 'string',
      instanceId: 'string',
      instructionJson: 'string',
      labelsJson: 'string',
      model: 'string',
      modelConfig: 'string',
      prompt: 'string',
      promptJson: 'string',
      scenario: 'string',
      scriptId: 'string',
      system: 'boolean',
      updateTime: 'string',
      variablesJson: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAllTenantBindNumberBindingResponseBodyDataList extends $dara.Model {
  billingType?: string;
  /**
   * @example
   * b5bfb844-ce85-4779-bc8f-161fba46aa07
   */
  bindingId?: string;
  instanceNameList?: string[];
  /**
   * @example
   * 15005059355
   */
  number?: string;
  /**
   * @example
   * {\\"rateLimitPeriod\\":\\"1\\",\\"rateLimitCount\\":\\"1\\"}
   */
  serializedParams?: string;
  trunkName?: string;
  static names(): { [key: string]: string } {
    return {
      billingType: 'BillingType',
      bindingId: 'BindingId',
      instanceNameList: 'InstanceNameList',
      number: 'Number',
      serializedParams: 'SerializedParams',
      trunkName: 'TrunkName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      billingType: 'string',
      bindingId: 'string',
      instanceNameList: { 'type': 'array', 'itemType': 'string' },
      number: 'string',
      serializedParams: 'string',
      trunkName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.instanceNameList)) {
      $dara.Model.validateArray(this.instanceNameList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAllTenantBindNumberBindingResponseBodyData extends $dara.Model {
  list?: ListAllTenantBindNumberBindingResponseBodyDataList[];
  static names(): { [key: string]: string } {
    return {
      list: 'List',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ListAllTenantBindNumberBindingResponseBodyDataList },
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionResponseBodyDataAnnotationMissionList extends $dara.Model {
  /**
   * @example
   * 1
   */
  annotationMissionDataSourceType?: number;
  annotationMissionDebugDataSourceList?: number[];
  /**
   * @example
   * ddce607f-f537-4ebd-9914-cf45671defb9
   */
  annotationMissionId?: string;
  annotationMissionName?: string;
  /**
   * @example
   * 1
   */
  annotationStatus?: number;
  /**
   * @example
   * 1684511999000
   */
  conversationTimeEndFilter?: number;
  /**
   * @example
   * 1683216000000
   */
  conversationTimeStartFilter?: number;
  /**
   * @example
   * 1676170339515
   */
  createTime?: number;
  /**
   * @example
   * false
   */
  excludeOtherMissionSession?: boolean;
  /**
   * @example
   * 1683443903785
   */
  finishTime?: number;
  /**
   * @example
   * 32be9d94-1346-4c4a-a4d0-ccd379f87013
   */
  instanceId?: string;
  /**
   * @example
   * 1
   */
  samplingCount?: number;
  samplingDescription?: string;
  /**
   * @example
   * 1
   */
  samplingRate?: number;
  /**
   * @example
   * 1
   */
  samplingType?: number;
  sessionEndReasonFilterList?: number[];
  /**
   * @example
   * 1
   */
  sessionFinishCount?: number;
  /**
   * @example
   * 1
   */
  sessionTotalCount?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionDataSourceType: 'AnnotationMissionDataSourceType',
      annotationMissionDebugDataSourceList: 'AnnotationMissionDebugDataSourceList',
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionName: 'AnnotationMissionName',
      annotationStatus: 'AnnotationStatus',
      conversationTimeEndFilter: 'ConversationTimeEndFilter',
      conversationTimeStartFilter: 'ConversationTimeStartFilter',
      createTime: 'CreateTime',
      excludeOtherMissionSession: 'ExcludeOtherMissionSession',
      finishTime: 'FinishTime',
      instanceId: 'InstanceId',
      samplingCount: 'SamplingCount',
      samplingDescription: 'SamplingDescription',
      samplingRate: 'SamplingRate',
      samplingType: 'SamplingType',
      sessionEndReasonFilterList: 'SessionEndReasonFilterList',
      sessionFinishCount: 'SessionFinishCount',
      sessionTotalCount: 'SessionTotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionDataSourceType: 'number',
      annotationMissionDebugDataSourceList: { 'type': 'array', 'itemType': 'number' },
      annotationMissionId: 'string',
      annotationMissionName: 'string',
      annotationStatus: 'number',
      conversationTimeEndFilter: 'number',
      conversationTimeStartFilter: 'number',
      createTime: 'number',
      excludeOtherMissionSession: 'boolean',
      finishTime: 'number',
      instanceId: 'string',
      samplingCount: 'number',
      samplingDescription: 'string',
      samplingRate: 'number',
      samplingType: 'number',
      sessionEndReasonFilterList: { 'type': 'array', 'itemType': 'number' },
      sessionFinishCount: 'number',
      sessionTotalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.annotationMissionDebugDataSourceList)) {
      $dara.Model.validateArray(this.annotationMissionDebugDataSourceList);
    }
    if(Array.isArray(this.sessionEndReasonFilterList)) {
      $dara.Model.validateArray(this.sessionEndReasonFilterList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionResponseBodyData extends $dara.Model {
  annotationMissionList?: ListAnnotationMissionResponseBodyDataAnnotationMissionList[];
  /**
   * @example
   * CDR \\"job-c7b8a817-b8e8-40f3-b7ad-f28dcea218ff\\" doesn\\"t exists.
   */
  message?: string;
  /**
   * @example
   * 1
   */
  pageIndex?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 30
   */
  totalCount?: number;
  /**
   * @example
   * 4
   */
  totalPageCount?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionList: 'AnnotationMissionList',
      message: 'Message',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
      success: 'Success',
      totalCount: 'TotalCount',
      totalPageCount: 'TotalPageCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionList: { 'type': 'array', 'itemType': ListAnnotationMissionResponseBodyDataAnnotationMissionList },
      message: 'string',
      pageIndex: 'number',
      pageSize: 'number',
      success: 'boolean',
      totalCount: 'number',
      totalPageCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.annotationMissionList)) {
      $dara.Model.validateArray(this.annotationMissionList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatCustomizationDataInfoList extends $dara.Model {
  /**
   * @remarks
   * id
   */
  annotationMissionChatCustomizationDataInfoId?: string;
  /**
   * @remarks
   * chat id
   */
  annotationMissionChatId?: string;
  /**
   * @example
   * 2f03b24a-fda2-4501-90ba-0a9a59f8dd9d
   */
  annotationMissionId?: string;
  annotationMissionSessionId?: string;
  content?: string;
  /**
   * @example
   * true
   */
  create?: boolean;
  /**
   * @example
   * 1682216045619
   */
  createTime?: number;
  customizationDataDescription?: string;
  /**
   * @remarks
   * id
   */
  customizationDataId?: string;
  customizationDataName?: string;
  customizationDataWeight?: number;
  /**
   * @example
   * true
   */
  delete?: boolean;
  /**
   * @example
   * d3fbfca8-4208-4d4b-a53a-c4dba5e43a66
   */
  instanceId?: string;
  /**
   * @example
   * 1679552585384
   */
  modifiedTime?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionChatCustomizationDataInfoId: 'AnnotationMissionChatCustomizationDataInfoId',
      annotationMissionChatId: 'AnnotationMissionChatId',
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionId: 'AnnotationMissionSessionId',
      content: 'Content',
      create: 'Create',
      createTime: 'CreateTime',
      customizationDataDescription: 'CustomizationDataDescription',
      customizationDataId: 'CustomizationDataId',
      customizationDataName: 'CustomizationDataName',
      customizationDataWeight: 'CustomizationDataWeight',
      delete: 'Delete',
      instanceId: 'InstanceId',
      modifiedTime: 'ModifiedTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionChatCustomizationDataInfoId: 'string',
      annotationMissionChatId: 'string',
      annotationMissionId: 'string',
      annotationMissionSessionId: 'string',
      content: 'string',
      create: 'boolean',
      createTime: 'number',
      customizationDataDescription: 'string',
      customizationDataId: 'string',
      customizationDataName: 'string',
      customizationDataWeight: 'number',
      delete: 'boolean',
      instanceId: 'string',
      modifiedTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatIntentUserSayInfoList extends $dara.Model {
  /**
   * @remarks
   * chat id
   * 
   * @example
   * 77343553-cbc2-4487-a35c-869f1e86c573
   */
  annotationMissionChatId?: string;
  /**
   * @remarks
   * id
   */
  annotationMissionChatIntentUserSayInfoId?: string;
  /**
   * @example
   * 77343553-cbc2-4487-a35c-869f1e86c573
   */
  annotationMissionId?: string;
  /**
   * @example
   * 77343553-cbc2-4487-a35c-869f1e86c573
   */
  annotationMissionSessionId?: string;
  /**
   * @example
   * 77343553-cbc2-4487-a35c-869f1e86c573
   */
  botId?: string;
  content?: string;
  /**
   * @example
   * false
   */
  create?: boolean;
  /**
   * @example
   * 1682216045619
   */
  createTime?: number;
  /**
   * @example
   * true
   */
  delete?: boolean;
  /**
   * @example
   * 77343553-cbc2-4487-a35c-869f1e86c573
   */
  dialogId?: number;
  /**
   * @example
   * 77343553-cbc2-4487-a35c-869f1e86c573
   */
  instanceId?: string;
  /**
   * @example
   * 77343553-cbc2-4487-a35c-869f1e86c573
   */
  intentId?: number;
  /**
   * @example
   * 1682216045619
   */
  modifiedTime?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionChatId: 'AnnotationMissionChatId',
      annotationMissionChatIntentUserSayInfoId: 'AnnotationMissionChatIntentUserSayInfoId',
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionId: 'AnnotationMissionSessionId',
      botId: 'BotId',
      content: 'Content',
      create: 'Create',
      createTime: 'CreateTime',
      delete: 'Delete',
      dialogId: 'DialogId',
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      modifiedTime: 'ModifiedTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionChatId: 'string',
      annotationMissionChatIntentUserSayInfoId: 'string',
      annotationMissionId: 'string',
      annotationMissionSessionId: 'string',
      botId: 'string',
      content: 'string',
      create: 'boolean',
      createTime: 'number',
      delete: 'boolean',
      dialogId: 'number',
      instanceId: 'string',
      intentId: 'number',
      modifiedTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatTagInfoList extends $dara.Model {
  /**
   * @remarks
   * chat id
   */
  annotationMissionChatId?: string;
  /**
   * @remarks
   * id
   */
  annotationMissionChatTagInfoId?: string;
  /**
   * @example
   * e7272cbb-a60d-4b41-b5c4-8863edc0b8f7
   */
  annotationMissionId?: string;
  annotationMissionSessionId?: string;
  /**
   * @remarks
   * tag id
   */
  annotationMissionTagInfoId?: string;
  annotationMissionTagInfoName?: string;
  /**
   * @example
   * true
   */
  create?: boolean;
  /**
   * @example
   * 1686797050000
   */
  createTime?: number;
  /**
   * @example
   * true
   */
  delete?: boolean;
  /**
   * @example
   * 32be9d94-1346-4c4a-a4d0-ccd379f87013
   */
  instanceId?: string;
  /**
   * @example
   * 1679019660000
   */
  modifiedTime?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionChatId: 'AnnotationMissionChatId',
      annotationMissionChatTagInfoId: 'AnnotationMissionChatTagInfoId',
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionId: 'AnnotationMissionSessionId',
      annotationMissionTagInfoId: 'AnnotationMissionTagInfoId',
      annotationMissionTagInfoName: 'AnnotationMissionTagInfoName',
      create: 'Create',
      createTime: 'CreateTime',
      delete: 'Delete',
      instanceId: 'InstanceId',
      modifiedTime: 'ModifiedTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionChatId: 'string',
      annotationMissionChatTagInfoId: 'string',
      annotationMissionId: 'string',
      annotationMissionSessionId: 'string',
      annotationMissionTagInfoId: 'string',
      annotationMissionTagInfoName: 'string',
      create: 'boolean',
      createTime: 'number',
      delete: 'boolean',
      instanceId: 'string',
      modifiedTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatVocabularyInfoList extends $dara.Model {
  /**
   * @remarks
   * chat id
   * 
   * @example
   * 77343553-cbc2-4487-a35c-869f1e86c573
   */
  annotationMissionChatId?: string;
  /**
   * @remarks
   * id
   */
  annotationMissionChatVocabularyInfoId?: string;
  /**
   * @example
   * b3f2c931-5180-43ca-b4aa-2baee2d73c8b
   */
  annotationMissionId?: string;
  /**
   * @example
   * 77343553-cbc2-4487-a35c-869f1e86c573
   */
  annotationMissionSessionId?: string;
  /**
   * @example
   * true
   */
  create?: boolean;
  /**
   * @example
   * 1675218421941
   */
  createTime?: number;
  /**
   * @example
   * true
   */
  delete?: boolean;
  /**
   * @example
   * 818961ce-d9ba-4f88-89ca-2a04b24bdf01
   */
  instanceId?: string;
  /**
   * @example
   * 1676272557653
   */
  modifiedTime?: number;
  vocabulary?: string;
  vocabularyDescription?: string;
  /**
   * @example
   * 77343553-cbc2-4487-a35c-869f1e86c573
   */
  vocabularyId?: string;
  vocabularyName?: string;
  vocabularyWeight?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionChatId: 'AnnotationMissionChatId',
      annotationMissionChatVocabularyInfoId: 'AnnotationMissionChatVocabularyInfoId',
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionId: 'AnnotationMissionSessionId',
      create: 'Create',
      createTime: 'CreateTime',
      delete: 'Delete',
      instanceId: 'InstanceId',
      modifiedTime: 'ModifiedTime',
      vocabulary: 'Vocabulary',
      vocabularyDescription: 'VocabularyDescription',
      vocabularyId: 'VocabularyId',
      vocabularyName: 'VocabularyName',
      vocabularyWeight: 'VocabularyWeight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionChatId: 'string',
      annotationMissionChatVocabularyInfoId: 'string',
      annotationMissionId: 'string',
      annotationMissionSessionId: 'string',
      create: 'boolean',
      createTime: 'number',
      delete: 'boolean',
      instanceId: 'string',
      modifiedTime: 'number',
      vocabulary: 'string',
      vocabularyDescription: 'string',
      vocabularyId: 'string',
      vocabularyName: 'string',
      vocabularyWeight: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatList extends $dara.Model {
  annotationAsrResult?: string;
  annotationMissionChatCustomizationDataInfoList?: ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatCustomizationDataInfoList[];
  /**
   * @remarks
   * chat id
   * 
   * @example
   * 40669e52-c1c8-487f-9593-29749086bdc9
   */
  annotationMissionChatId?: string;
  annotationMissionChatIntentUserSayInfoList?: ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatIntentUserSayInfoList[];
  annotationMissionChatTagInfoList?: ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatTagInfoList[];
  annotationMissionChatVocabularyInfoList?: ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatVocabularyInfoList[];
  /**
   * @example
   * 03f56192-fa8a-40dc-9558-39b357f0618f
   */
  annotationMissionId?: string;
  annotationMissionSessionId?: string;
  /**
   * @example
   * 1
   */
  annotationStatus?: number;
  /**
   * @example
   * {\\"Answer\\": u\\"\\u53c2\\u8003\\u6587\\u6863\\uff1ahttps://help.aliyun.com/document_detail/215402.html\\", \\"QuestionId\\": 371159, \\"Uuid\\": \\"ac14000116781568127896224d0044\\"}
   */
  answer?: string;
  asrAnnotationStatus?: number;
  /**
   * @example
   * 1682216045619
   */
  createTime?: number;
  /**
   * @example
   * 77343553-cbc2-4487-a35c-869f1e86c573
   */
  instanceId?: string;
  intentAnnotationStatus?: number;
  /**
   * @example
   * 1571649300000
   */
  modifiedTime?: number;
  /**
   * @example
   * 1682390676403
   */
  occurTime?: number;
  originalAsrResult?: string;
  /**
   * @example
   * 380578077
   */
  sequenceId?: string;
  subStatus?: number;
  tagAnnotationStatus?: number;
  /**
   * @example
   * 1
   */
  translationError?: number;
  static names(): { [key: string]: string } {
    return {
      annotationAsrResult: 'AnnotationAsrResult',
      annotationMissionChatCustomizationDataInfoList: 'AnnotationMissionChatCustomizationDataInfoList',
      annotationMissionChatId: 'AnnotationMissionChatId',
      annotationMissionChatIntentUserSayInfoList: 'AnnotationMissionChatIntentUserSayInfoList',
      annotationMissionChatTagInfoList: 'AnnotationMissionChatTagInfoList',
      annotationMissionChatVocabularyInfoList: 'AnnotationMissionChatVocabularyInfoList',
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionId: 'AnnotationMissionSessionId',
      annotationStatus: 'AnnotationStatus',
      answer: 'Answer',
      asrAnnotationStatus: 'AsrAnnotationStatus',
      createTime: 'CreateTime',
      instanceId: 'InstanceId',
      intentAnnotationStatus: 'IntentAnnotationStatus',
      modifiedTime: 'ModifiedTime',
      occurTime: 'OccurTime',
      originalAsrResult: 'OriginalAsrResult',
      sequenceId: 'SequenceId',
      subStatus: 'SubStatus',
      tagAnnotationStatus: 'TagAnnotationStatus',
      translationError: 'TranslationError',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationAsrResult: 'string',
      annotationMissionChatCustomizationDataInfoList: { 'type': 'array', 'itemType': ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatCustomizationDataInfoList },
      annotationMissionChatId: 'string',
      annotationMissionChatIntentUserSayInfoList: { 'type': 'array', 'itemType': ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatIntentUserSayInfoList },
      annotationMissionChatTagInfoList: { 'type': 'array', 'itemType': ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatTagInfoList },
      annotationMissionChatVocabularyInfoList: { 'type': 'array', 'itemType': ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatVocabularyInfoList },
      annotationMissionId: 'string',
      annotationMissionSessionId: 'string',
      annotationStatus: 'number',
      answer: 'string',
      asrAnnotationStatus: 'number',
      createTime: 'number',
      instanceId: 'string',
      intentAnnotationStatus: 'number',
      modifiedTime: 'number',
      occurTime: 'number',
      originalAsrResult: 'string',
      sequenceId: 'string',
      subStatus: 'number',
      tagAnnotationStatus: 'number',
      translationError: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.annotationMissionChatCustomizationDataInfoList)) {
      $dara.Model.validateArray(this.annotationMissionChatCustomizationDataInfoList);
    }
    if(Array.isArray(this.annotationMissionChatIntentUserSayInfoList)) {
      $dara.Model.validateArray(this.annotationMissionChatIntentUserSayInfoList);
    }
    if(Array.isArray(this.annotationMissionChatTagInfoList)) {
      $dara.Model.validateArray(this.annotationMissionChatTagInfoList);
    }
    if(Array.isArray(this.annotationMissionChatVocabularyInfoList)) {
      $dara.Model.validateArray(this.annotationMissionChatVocabularyInfoList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionList extends $dara.Model {
  annotationMissionChatList?: ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatList[];
  /**
   * @example
   * 64ba5ac9-a4e1-4333-b03c-9d4a588c9f6c
   */
  annotationMissionId?: string;
  /**
   * @remarks
   * ID
   * 
   * @example
   * 64ba5ac9-a4e1-4333-b03c-9d4a588c9f6c
   */
  annotationMissionSessionId?: string;
  /**
   * @example
   * 1
   */
  annotationStatus?: number;
  /**
   * @example
   * 1691117009000
   */
  createTime?: number;
  /**
   * @example
   * true
   */
  debugConversation?: boolean;
  /**
   * @example
   * a4274627-265f-4e14-b2d6-4ee7d4f8593e
   */
  instanceId?: string;
  /**
   * @example
   * 2f642da1-b00b-4dd6-ac7d-dcbeefd13ff3
   */
  jobGroupId?: string;
  /**
   * @example
   * 42da7cde-a5e8-45cc-b9d2-828711d95b30
   */
  jobId?: string;
  /**
   * @example
   * 1677987898384
   */
  modifiedTime?: number;
  /**
   * @example
   * 408d6c4d-23e2-41f6-bbdd-f919a8297aa4
   */
  scriptId?: string;
  /**
   * @example
   * 40669e52-c1c8-487f-9593-29749086bdc9
   */
  sessionId?: string;
  /**
   * @example
   * 1
   */
  version?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionChatList: 'AnnotationMissionChatList',
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionId: 'AnnotationMissionSessionId',
      annotationStatus: 'AnnotationStatus',
      createTime: 'CreateTime',
      debugConversation: 'DebugConversation',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      jobId: 'JobId',
      modifiedTime: 'ModifiedTime',
      scriptId: 'ScriptId',
      sessionId: 'SessionId',
      version: 'Version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionChatList: { 'type': 'array', 'itemType': ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatList },
      annotationMissionId: 'string',
      annotationMissionSessionId: 'string',
      annotationStatus: 'number',
      createTime: 'number',
      debugConversation: 'boolean',
      instanceId: 'string',
      jobGroupId: 'string',
      jobId: 'string',
      modifiedTime: 'number',
      scriptId: 'string',
      sessionId: 'string',
      version: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.annotationMissionChatList)) {
      $dara.Model.validateArray(this.annotationMissionChatList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionSessionResponseBodyData extends $dara.Model {
  /**
   * @example
   * b3f2c931-5180-43ca-b4aa-2baee2d73c8b
   */
  annotationMissionId?: string;
  annotationMissionSessionList?: ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionList[];
  /**
   * @example
   * bp.java.nopowerContact
   */
  message?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 30
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionList: 'AnnotationMissionSessionList',
      message: 'Message',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionId: 'string',
      annotationMissionSessionList: { 'type': 'array', 'itemType': ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionList },
      message: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.annotationMissionSessionList)) {
      $dara.Model.validateArray(this.annotationMissionSessionList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListApiPluginsResponseBodyApiPlugins extends $dara.Model {
  description?: string;
  draftedConfigJson?: string;
  /**
   * @example
   * 1666230851000
   */
  gmtCreate?: number;
  /**
   * @example
   * 1641891940000
   */
  gmtModified?: number;
  /**
   * @example
   * 7c0e5b5e-a839-4999-8301-2c7d07a1f16f
   */
  instanceId?: string;
  name?: string;
  publishedConfigJson?: string;
  /**
   * @example
   * Drafted
   */
  status?: string;
  /**
   * @example
   * Function
   */
  type?: string;
  /**
   * @example
   * e1a3c448-20cf-4586-8aa2-4cdca75f7c20
   */
  uuid?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      draftedConfigJson: 'DraftedConfigJson',
      gmtCreate: 'GmtCreate',
      gmtModified: 'GmtModified',
      instanceId: 'InstanceId',
      name: 'Name',
      publishedConfigJson: 'PublishedConfigJson',
      status: 'Status',
      type: 'Type',
      uuid: 'Uuid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      draftedConfigJson: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      instanceId: 'string',
      name: 'string',
      publishedConfigJson: 'string',
      status: 'string',
      type: 'string',
      uuid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListBeebotIntentResponseBodyIntents extends $dara.Model {
  aliasName?: string;
  /**
   * @example
   * 2025-04-21 16:03:15.+0800
   */
  createTime?: string;
  /**
   * @example
   * 1252504
   */
  createUserId?: string;
  /**
   * @example
   * xxx@voice-navigator-testonaliyun.com
   */
  createUserName?: string;
  /**
   * @example
   * 10717802
   */
  intentId?: number;
  intentName?: string;
  /**
   * @example
   * 2025-04-21 16:03:15.+0800
   */
  modifyTime?: string;
  /**
   * @example
   * 1252504
   */
  modifyUserId?: string;
  /**
   * @example
   * xxx@voice-navigator-testonaliyun.com
   */
  modifyUserName?: string;
  static names(): { [key: string]: string } {
    return {
      aliasName: 'AliasName',
      createTime: 'CreateTime',
      createUserId: 'CreateUserId',
      createUserName: 'CreateUserName',
      intentId: 'IntentId',
      intentName: 'IntentName',
      modifyTime: 'ModifyTime',
      modifyUserId: 'ModifyUserId',
      modifyUserName: 'ModifyUserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      aliasName: 'string',
      createTime: 'string',
      createUserId: 'string',
      createUserName: 'string',
      intentId: 'number',
      intentName: 'string',
      modifyTime: 'string',
      modifyUserId: 'string',
      modifyUserName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListBeebotIntentLgfResponseBodyLgfs extends $dara.Model {
  /**
   * @example
   * 2025-04-21 10:54:18.+0800
   */
  createTime?: string;
  /**
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @example
   * 5666117
   */
  lgfId?: number;
  /**
   * @example
   * 2025-04-21 10:54:18.+0800
   */
  modifyTime?: string;
  ruleText?: string;
  static names(): { [key: string]: string } {
    return {
      createTime: 'CreateTime',
      intentId: 'IntentId',
      lgfId: 'LgfId',
      modifyTime: 'ModifyTime',
      ruleText: 'RuleText',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'string',
      intentId: 'number',
      lgfId: 'number',
      modifyTime: 'string',
      ruleText: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListBeebotIntentUserSayResponseBodyUserSays extends $dara.Model {
  content?: string;
  /**
   * @example
   * 2025-04-21 14:16:05.+0800
   */
  createTime?: string;
  /**
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @example
   * 2025-04-21 14:16:05.+0800
   */
  modifyTime?: string;
  /**
   * @example
   * 17448458
   */
  userSayId?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'Content',
      createTime: 'CreateTime',
      intentId: 'IntentId',
      modifyTime: 'ModifyTime',
      userSayId: 'UserSayId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      createTime: 'string',
      intentId: 'number',
      modifyTime: 'string',
      userSayId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListChatbotInstancesResponseBodyBots extends $dara.Model {
  /**
   * @example
   * https://ccrm.wengine.cn/ccrm/system/common/fileDownload/noToken?fileId=975cdeaa064846e3b6004abd9ba1d7c8
   */
  avatar?: string;
  /**
   * @example
   * 2022-01-18T02:36:00Z
   */
  createTime?: string;
  /**
   * @example
   * e874fcf0-d2f4-4e62-9377-b6f35fe55210
   */
  instanceId?: string;
  introduction?: string;
  /**
   * @example
   * zh-cn
   */
  languageCode?: string;
  name?: string;
  /**
   * @example
   * Asia/Shanghai
   */
  timeZone?: string;
  static names(): { [key: string]: string } {
    return {
      avatar: 'Avatar',
      createTime: 'CreateTime',
      instanceId: 'InstanceId',
      introduction: 'Introduction',
      languageCode: 'LanguageCode',
      name: 'Name',
      timeZone: 'TimeZone',
    };
  }

  static types(): { [key: string]: any } {
    return {
      avatar: 'string',
      createTime: 'string',
      instanceId: 'string',
      introduction: 'string',
      languageCode: 'string',
      name: 'string',
      timeZone: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDialogueFlowsResponseBodyDialogueFlows extends $dara.Model {
  dialogueFlowDefinition?: string;
  /**
   * @example
   * dae01529-3c3e-458e-b07a-97643d09ebb9
   */
  dialogueFlowId?: string;
  dialogueFlowName?: string;
  /**
   * @example
   * MainFlow
   */
  dialogueFlowType?: string;
  /**
   * @example
   * 2d5aa451-661f-4f08-b0c4-28eec78decc4
   */
  scriptId?: string;
  /**
   * @example
   * 1569220563549
   */
  scriptVersion?: string;
  static names(): { [key: string]: string } {
    return {
      dialogueFlowDefinition: 'DialogueFlowDefinition',
      dialogueFlowId: 'DialogueFlowId',
      dialogueFlowName: 'DialogueFlowName',
      dialogueFlowType: 'DialogueFlowType',
      scriptId: 'ScriptId',
      scriptVersion: 'ScriptVersion',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dialogueFlowDefinition: 'string',
      dialogueFlowId: 'string',
      dialogueFlowName: 'string',
      dialogueFlowType: 'string',
      scriptId: 'string',
      scriptVersion: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles extends $dara.Model {
  /**
   * @example
   * UPLOADED/RECORDING/d5c651b3-3c0f-44b8-aafd-40526f2fb43d/dd33377f-abad-471b-84dd-04aed572ce60_2.wav
   */
  fileId?: string;
  /**
   * @example
   * 10
   */
  progress?: number;
  /**
   * @example
   * Empty
   */
  status?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      fileId: 'FileId',
      progress: 'Progress',
      status: 'Status',
      title: 'Title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileId: 'string',
      progress: 'number',
      status: 'string',
      title: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDownloadTasksResponseBodyDownloadTasksList extends $dara.Model {
  downloadTaskFiles?: ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles[];
  /**
   * @example
   * 1646792941
   */
  expireTime?: number;
  /**
   * @example
   * Empty
   */
  status?: string;
  /**
   * @example
   * 6b0e547e-501c-480a-812f-d27e28e74f9a
   */
  taskId?: string;
  title?: string;
  static names(): { [key: string]: string } {
    return {
      downloadTaskFiles: 'DownloadTaskFiles',
      expireTime: 'ExpireTime',
      status: 'Status',
      taskId: 'TaskId',
      title: 'Title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downloadTaskFiles: { 'type': 'array', 'itemType': ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles },
      expireTime: 'number',
      status: 'string',
      taskId: 'string',
      title: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.downloadTaskFiles)) {
      $dara.Model.validateArray(this.downloadTaskFiles);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDownloadTasksResponseBodyDownloadTasks extends $dara.Model {
  list?: ListDownloadTasksResponseBodyDownloadTasksList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @example
   * 2
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ListDownloadTasksResponseBodyDownloadTasksList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListFlashSmsTemplatesResponseBodyData extends $dara.Model {
  templateContent?: string;
  /**
   * @example
   * 17*******************01
   */
  templateId?: string;
  templateName?: string;
  static names(): { [key: string]: string } {
    return {
      templateContent: 'TemplateContent',
      templateId: 'TemplateId',
      templateName: 'TemplateName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      templateContent: 'string',
      templateId: 'string',
      templateName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListGlobalQuestionsResponseBodyGlobalQuestionsList extends $dara.Model {
  answers?: string;
  /**
   * @example
   * 53c27755-d41e-46a6-bb3c-4f66f257d50c
   */
  globalQuestionId?: string;
  globalQuestionName?: string;
  /**
   * @example
   * SYSTEM
   */
  globalQuestionType?: string;
  questions?: string;
  /**
   * @example
   * aa279896-64a6-4182-864c-4f2b04ec8d17
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      answers: 'Answers',
      globalQuestionId: 'GlobalQuestionId',
      globalQuestionName: 'GlobalQuestionName',
      globalQuestionType: 'GlobalQuestionType',
      questions: 'Questions',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      answers: 'string',
      globalQuestionId: 'string',
      globalQuestionName: 'string',
      globalQuestionType: 'string',
      questions: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListGlobalQuestionsResponseBodyGlobalQuestions extends $dara.Model {
  list?: ListGlobalQuestionsResponseBodyGlobalQuestionsList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 12
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ListGlobalQuestionsResponseBodyGlobalQuestionsList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesRequestTag extends $dara.Model {
  /**
   * @example
   * name
   */
  key?: string;
  /**
   * @example
   * xxx
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesResponseBodyInstancesResourceTags extends $dara.Model {
  /**
   * @example
   * age
   */
  key?: string;
  /**
   * @example
   * 20
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesResponseBodyInstances extends $dara.Model {
  /**
   * @example
   * 1578469042851
   */
  creationTime?: number;
  /**
   * @example
   * 34234
   */
  creatorId?: number;
  /**
   * @example
   * xxx
   */
  creatorName?: string;
  instanceDescription?: string;
  /**
   * @example
   * 90515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  instanceId?: string;
  instanceName?: string;
  isPreset?: boolean;
  /**
   * @example
   * 10
   */
  maxConcurrentConversation?: number;
  /**
   * @example
   * xxx
   */
  ownerName?: string;
  /**
   * @example
   * 90515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  resourceGroupId?: string;
  /**
   * @example
   * []
   */
  resourceTags?: ListInstancesResponseBodyInstancesResourceTags[];
  static names(): { [key: string]: string } {
    return {
      creationTime: 'CreationTime',
      creatorId: 'CreatorId',
      creatorName: 'CreatorName',
      instanceDescription: 'InstanceDescription',
      instanceId: 'InstanceId',
      instanceName: 'InstanceName',
      isPreset: 'IsPreset',
      maxConcurrentConversation: 'MaxConcurrentConversation',
      ownerName: 'OwnerName',
      resourceGroupId: 'ResourceGroupId',
      resourceTags: 'ResourceTags',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creationTime: 'number',
      creatorId: 'number',
      creatorName: 'string',
      instanceDescription: 'string',
      instanceId: 'string',
      instanceName: 'string',
      isPreset: 'boolean',
      maxConcurrentConversation: 'number',
      ownerName: 'string',
      resourceGroupId: 'string',
      resourceTags: { 'type': 'array', 'itemType': ListInstancesResponseBodyInstancesResourceTags },
    };
  }

  validate() {
    if(Array.isArray(this.resourceTags)) {
      $dara.Model.validateArray(this.resourceTags);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentionsResponseBodyDataIntentListRuleCheck extends $dara.Model {
  error?: string[];
  /**
   * @example
   * true
   */
  strict?: boolean;
  text?: string;
  warning?: string[];
  static names(): { [key: string]: string } {
    return {
      error: 'Error',
      strict: 'Strict',
      text: 'Text',
      warning: 'Warning',
    };
  }

  static types(): { [key: string]: any } {
    return {
      error: { 'type': 'array', 'itemType': 'string' },
      strict: 'boolean',
      text: 'string',
      warning: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.error)) {
      $dara.Model.validateArray(this.error);
    }
    if(Array.isArray(this.warning)) {
      $dara.Model.validateArray(this.warning);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentionsResponseBodyDataIntentListSlotFeedbackFunctionsSwitch extends $dara.Model {
  /**
   * @example
   * b9932604-08ae-4525-bbe5-c8cce3066070
   */
  id?: string;
  /**
   * @example
   * SQL_SUB_QUERY
   */
  label?: string;
  name?: string;
  /**
   * @example
   * PASSKEY
   */
  type?: string;
  /**
   * @example
   * BASE_VALIDATE_FILTER_SWITCH
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      label: 'Label',
      name: 'Name',
      type: 'Type',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      label: 'string',
      name: 'string',
      type: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentionsResponseBodyDataIntentListSlotFeedbackFunctions extends $dara.Model {
  /**
   * @example
   * test
   */
  aliyunFunction?: string;
  /**
   * @example
   * test
   */
  aliyunService?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * GA setup for HPC cn4-HPC-EndUserServer-GlobalAccelerator
   */
  description?: string;
  /**
   * @example
   * cn-hangzhou.log.aliyuncs.com
   */
  endPoint?: string;
  /**
   * @example
   * count
   */
  function?: string;
  name?: string;
  params?: { [key: string]: any };
  switch?: ListIntentionsResponseBodyDataIntentListSlotFeedbackFunctionsSwitch[];
  /**
   * @example
   * cluster
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      aliyunFunction: 'AliyunFunction',
      aliyunService: 'AliyunService',
      code: 'Code',
      description: 'Description',
      endPoint: 'EndPoint',
      function: 'Function',
      name: 'Name',
      params: 'Params',
      switch: 'Switch',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      aliyunFunction: 'string',
      aliyunService: 'string',
      code: 'string',
      description: 'string',
      endPoint: 'string',
      function: 'string',
      name: 'string',
      params: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
      switch: { 'type': 'array', 'itemType': ListIntentionsResponseBodyDataIntentListSlotFeedbackFunctionsSwitch },
      type: 'string',
    };
  }

  validate() {
    if(this.params) {
      $dara.Model.validateMap(this.params);
    }
    if(Array.isArray(this.switch)) {
      $dara.Model.validateArray(this.switch);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentionsResponseBodyDataIntentListSlotTags extends $dara.Model {
  /**
   * @example
   * 17448458
   */
  userSayId?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      userSayId: 'UserSayId',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userSayId: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentionsResponseBodyDataIntentListSlot extends $dara.Model {
  feedbackFunctions?: ListIntentionsResponseBodyDataIntentListSlotFeedbackFunctions[];
  /**
   * @example
   * test
   */
  feedbackType?: string;
  /**
   * @example
   * 9ec31b50-32b8-11eb-9478-19d2d885afdb
   */
  id?: string;
  /**
   * @example
   * false
   */
  isArray?: boolean;
  /**
   * @example
   * false
   */
  isEncrypt?: boolean;
  /**
   * @example
   * false
   */
  isInteractive?: boolean;
  /**
   * @example
   * true
   */
  isNecessary?: boolean;
  /**
   * @example
   * 0
   */
  lifeSpan?: number;
  name?: string;
  question?: string[];
  tags?: ListIntentionsResponseBodyDataIntentListSlotTags[];
  value?: string;
  static names(): { [key: string]: string } {
    return {
      feedbackFunctions: 'FeedbackFunctions',
      feedbackType: 'FeedbackType',
      id: 'Id',
      isArray: 'IsArray',
      isEncrypt: 'IsEncrypt',
      isInteractive: 'IsInteractive',
      isNecessary: 'IsNecessary',
      lifeSpan: 'LifeSpan',
      name: 'Name',
      question: 'Question',
      tags: 'Tags',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      feedbackFunctions: { 'type': 'array', 'itemType': ListIntentionsResponseBodyDataIntentListSlotFeedbackFunctions },
      feedbackType: 'string',
      id: 'string',
      isArray: 'boolean',
      isEncrypt: 'boolean',
      isInteractive: 'boolean',
      isNecessary: 'boolean',
      lifeSpan: 'number',
      name: 'string',
      question: { 'type': 'array', 'itemType': 'string' },
      tags: { 'type': 'array', 'itemType': ListIntentionsResponseBodyDataIntentListSlotTags },
      value: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.feedbackFunctions)) {
      $dara.Model.validateArray(this.feedbackFunctions);
    }
    if(Array.isArray(this.question)) {
      $dara.Model.validateArray(this.question);
    }
    if(Array.isArray(this.tags)) {
      $dara.Model.validateArray(this.tags);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentionsResponseBodyDataIntentListUserSayUserSayData extends $dara.Model {
  /**
   * @example
   * 9ec31b50-32b8-11eb-9478-19d2d885afdb
   */
  slotId?: string;
  text?: string;
  static names(): { [key: string]: string } {
    return {
      slotId: 'SlotId',
      text: 'Text',
    };
  }

  static types(): { [key: string]: any } {
    return {
      slotId: 'string',
      text: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentionsResponseBodyDataIntentListUserSay extends $dara.Model {
  /**
   * @example
   * 1234567
   */
  fromId?: string;
  /**
   * @example
   * 17448458
   */
  id?: string;
  /**
   * @example
   * true
   */
  strict?: boolean;
  userSayData?: ListIntentionsResponseBodyDataIntentListUserSayUserSayData[];
  static names(): { [key: string]: string } {
    return {
      fromId: 'FromId',
      id: 'Id',
      strict: 'Strict',
      userSayData: 'UserSayData',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fromId: 'string',
      id: 'string',
      strict: 'boolean',
      userSayData: { 'type': 'array', 'itemType': ListIntentionsResponseBodyDataIntentListUserSayUserSayData },
    };
  }

  validate() {
    if(Array.isArray(this.userSayData)) {
      $dara.Model.validateArray(this.userSayData);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentionsResponseBodyDataIntentList extends $dara.Model {
  alias?: string[];
  /**
   * @example
   * chatbot-cn-n7QmzrUnNe
   */
  botId?: number;
  /**
   * @example
   * 111
   */
  botName?: string;
  /**
   * @example
   * 50099
   */
  dialogId?: string;
  /**
   * @example
   * 10717802
   */
  id?: number;
  /**
   * @example
   * zh-cn
   */
  language?: string;
  name?: string;
  ruleCheck?: ListIntentionsResponseBodyDataIntentListRuleCheck[];
  slot?: ListIntentionsResponseBodyDataIntentListSlot[];
  /**
   * @example
   * 43258
   */
  tableId?: number;
  /**
   * @example
   * 0
   */
  type?: number;
  userSay?: ListIntentionsResponseBodyDataIntentListUserSay[];
  static names(): { [key: string]: string } {
    return {
      alias: 'Alias',
      botId: 'BotId',
      botName: 'BotName',
      dialogId: 'DialogId',
      id: 'Id',
      language: 'Language',
      name: 'Name',
      ruleCheck: 'RuleCheck',
      slot: 'Slot',
      tableId: 'TableId',
      type: 'Type',
      userSay: 'UserSay',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: { 'type': 'array', 'itemType': 'string' },
      botId: 'number',
      botName: 'string',
      dialogId: 'string',
      id: 'number',
      language: 'string',
      name: 'string',
      ruleCheck: { 'type': 'array', 'itemType': ListIntentionsResponseBodyDataIntentListRuleCheck },
      slot: { 'type': 'array', 'itemType': ListIntentionsResponseBodyDataIntentListSlot },
      tableId: 'number',
      type: 'number',
      userSay: { 'type': 'array', 'itemType': ListIntentionsResponseBodyDataIntentListUserSay },
    };
  }

  validate() {
    if(Array.isArray(this.alias)) {
      $dara.Model.validateArray(this.alias);
    }
    if(Array.isArray(this.ruleCheck)) {
      $dara.Model.validateArray(this.ruleCheck);
    }
    if(Array.isArray(this.slot)) {
      $dara.Model.validateArray(this.slot);
    }
    if(Array.isArray(this.userSay)) {
      $dara.Model.validateArray(this.userSay);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentionsResponseBodyData extends $dara.Model {
  /**
   * @example
   * chatbot-cn-n7QmzrUnNe
   */
  botId?: string;
  intentList?: ListIntentionsResponseBodyDataIntentList[];
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      botId: 'BotId',
      intentList: 'IntentList',
      message: 'Message',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      botId: 'string',
      intentList: { 'type': 'array', 'itemType': ListIntentionsResponseBodyDataIntentList },
      message: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.intentList)) {
      $dara.Model.validateArray(this.intentList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentsResponseBodyIntentsList extends $dara.Model {
  /**
   * @example
   * 1578469042851
   */
  createTime?: number;
  intentDescription?: string;
  /**
   * @example
   * a8494b35-eefb-4c8a-887b-b60d2f0fa57a
   */
  intentId?: string;
  intentName?: string;
  keywords?: string;
  /**
   * @example
   * 6ef95fd5-558f-4ee8-af34-b2ede087a87c
   */
  scriptId?: string;
  /**
   * @example
   * 1578469042851
   */
  updateTime?: number;
  utterances?: string;
  static names(): { [key: string]: string } {
    return {
      createTime: 'CreateTime',
      intentDescription: 'IntentDescription',
      intentId: 'IntentId',
      intentName: 'IntentName',
      keywords: 'Keywords',
      scriptId: 'ScriptId',
      updateTime: 'UpdateTime',
      utterances: 'Utterances',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'number',
      intentDescription: 'string',
      intentId: 'string',
      intentName: 'string',
      keywords: 'string',
      scriptId: 'string',
      updateTime: 'number',
      utterances: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentsResponseBodyIntents extends $dara.Model {
  list?: ListIntentsResponseBodyIntentsList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 20
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ListIntentsResponseBodyIntentsList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsResponseBodyJobGroupsListExportProgress extends $dara.Model {
  /**
   * @example
   * http://www.xxx.com/xxx
   */
  fileHttpUrl?: string;
  /**
   * @example
   * 50
   */
  progress?: string;
  /**
   * @example
   * PENDING
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      fileHttpUrl: 'FileHttpUrl',
      progress: 'Progress',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileHttpUrl: 'string',
      progress: 'string',
      status: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsResponseBodyJobGroupsListProgress extends $dara.Model {
  /**
   * @example
   * 5
   */
  cancelledNum?: number;
  /**
   * @example
   * 1578550074361
   */
  duration?: number;
  /**
   * @example
   * 10
   */
  executingNum?: number;
  /**
   * @example
   * 5
   */
  failedNum?: number;
  /**
   * @example
   * 5
   */
  pausedNum?: number;
  /**
   * @example
   * 10
   */
  scheduling?: number;
  /**
   * @example
   * 1578550074361
   */
  startTime?: number;
  status?: string;
  /**
   * @example
   * 3
   */
  totalCompleted?: number;
  /**
   * @example
   * 20
   */
  totalJobs?: number;
  /**
   * @example
   * 1
   */
  totalNotAnswered?: number;
  static names(): { [key: string]: string } {
    return {
      cancelledNum: 'CancelledNum',
      duration: 'Duration',
      executingNum: 'ExecutingNum',
      failedNum: 'FailedNum',
      pausedNum: 'PausedNum',
      scheduling: 'Scheduling',
      startTime: 'StartTime',
      status: 'Status',
      totalCompleted: 'TotalCompleted',
      totalJobs: 'TotalJobs',
      totalNotAnswered: 'TotalNotAnswered',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelledNum: 'number',
      duration: 'number',
      executingNum: 'number',
      failedNum: 'number',
      pausedNum: 'number',
      scheduling: 'number',
      startTime: 'number',
      status: 'string',
      totalCompleted: 'number',
      totalJobs: 'number',
      totalNotAnswered: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsResponseBodyJobGroupsListStrategy extends $dara.Model {
  endTime?: number;
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'number',
      startTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsResponseBodyJobGroupsList extends $dara.Model {
  /**
   * @example
   * 1578550074361
   */
  creationTime?: number;
  /**
   * @example
   * {}
   */
  exportProgress?: ListJobGroupsResponseBodyJobGroupsListExportProgress;
  /**
   * @example
   * c62e6789-28a8-41db-941e-171a01d3b3b9
   */
  jobDataParsingTaskId?: string;
  jobGroupDescription?: string;
  /**
   * @example
   * c62e6789-28a8-41db-941e-171a01d3b3b9
   */
  jobGroupId?: string;
  jobGroupName?: string;
  minConcurrency?: number;
  /**
   * @example
   * 1578550074361
   */
  modifyTime?: string;
  /**
   * @example
   * {}
   */
  progress?: ListJobGroupsResponseBodyJobGroupsListProgress;
  /**
   * @example
   * c62e6789-28a8-41db-941e-171a01d3b3b9
   */
  scriptId?: string;
  scriptName?: string;
  scriptVersion?: string;
  /**
   * @example
   * Draft
   */
  status?: string;
  /**
   * @example
   * {}
   */
  strategy?: ListJobGroupsResponseBodyJobGroupsListStrategy;
  /**
   * @example
   * 10
   */
  totalCallNum?: number;
  static names(): { [key: string]: string } {
    return {
      creationTime: 'CreationTime',
      exportProgress: 'ExportProgress',
      jobDataParsingTaskId: 'JobDataParsingTaskId',
      jobGroupDescription: 'JobGroupDescription',
      jobGroupId: 'JobGroupId',
      jobGroupName: 'JobGroupName',
      minConcurrency: 'MinConcurrency',
      modifyTime: 'ModifyTime',
      progress: 'Progress',
      scriptId: 'ScriptId',
      scriptName: 'ScriptName',
      scriptVersion: 'ScriptVersion',
      status: 'Status',
      strategy: 'Strategy',
      totalCallNum: 'TotalCallNum',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creationTime: 'number',
      exportProgress: ListJobGroupsResponseBodyJobGroupsListExportProgress,
      jobDataParsingTaskId: 'string',
      jobGroupDescription: 'string',
      jobGroupId: 'string',
      jobGroupName: 'string',
      minConcurrency: 'number',
      modifyTime: 'string',
      progress: ListJobGroupsResponseBodyJobGroupsListProgress,
      scriptId: 'string',
      scriptName: 'string',
      scriptVersion: 'string',
      status: 'string',
      strategy: ListJobGroupsResponseBodyJobGroupsListStrategy,
      totalCallNum: 'number',
    };
  }

  validate() {
    if(this.exportProgress && typeof (this.exportProgress as any).validate === 'function') {
      (this.exportProgress as any).validate();
    }
    if(this.progress && typeof (this.progress as any).validate === 'function') {
      (this.progress as any).validate();
    }
    if(this.strategy && typeof (this.strategy as any).validate === 'function') {
      (this.strategy as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsResponseBodyJobGroups extends $dara.Model {
  list?: ListJobGroupsResponseBodyJobGroupsList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 100
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ListJobGroupsResponseBodyJobGroupsList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsAsyncResponseBodyJobGroupsExportProgress extends $dara.Model {
  /**
   * @example
   * http://
   */
  fileHttpUrl?: string;
  /**
   * @example
   * 50
   */
  progress?: string;
  /**
   * @example
   * PENDING
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      fileHttpUrl: 'FileHttpUrl',
      progress: 'Progress',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileHttpUrl: 'string',
      progress: 'string',
      status: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsAsyncResponseBodyJobGroupsProgress extends $dara.Model {
  /**
   * @example
   * 10
   */
  cancelledNum?: number;
  /**
   * @example
   * 1000
   */
  duration?: number;
  /**
   * @example
   * 20
   */
  executingNum?: number;
  /**
   * @example
   * 10
   */
  failedNum?: number;
  /**
   * @example
   * 10
   */
  pausedNum?: number;
  /**
   * @example
   * 20
   */
  scheduling?: number;
  /**
   * @example
   * 1640316786259
   */
  startTime?: number;
  status?: string;
  /**
   * @example
   * 10
   */
  totalCompleted?: number;
  /**
   * @example
   * 100
   */
  totalJobs?: number;
  /**
   * @example
   * 1
   */
  totalNotAnswered?: number;
  static names(): { [key: string]: string } {
    return {
      cancelledNum: 'CancelledNum',
      duration: 'Duration',
      executingNum: 'ExecutingNum',
      failedNum: 'FailedNum',
      pausedNum: 'PausedNum',
      scheduling: 'Scheduling',
      startTime: 'StartTime',
      status: 'Status',
      totalCompleted: 'TotalCompleted',
      totalJobs: 'TotalJobs',
      totalNotAnswered: 'TotalNotAnswered',
    };
  }

  static types(): { [key: string]: any } {
    return {
      cancelledNum: 'number',
      duration: 'number',
      executingNum: 'number',
      failedNum: 'number',
      pausedNum: 'number',
      scheduling: 'number',
      startTime: 'number',
      status: 'string',
      totalCompleted: 'number',
      totalJobs: 'number',
      totalNotAnswered: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsAsyncResponseBodyJobGroupsStrategy extends $dara.Model {
  /**
   * @example
   * 1640316786259
   */
  endTime?: number;
  /**
   * @example
   * 1640316786259
   */
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      endTime: 'EndTime',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endTime: 'number',
      startTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsAsyncResponseBodyJobGroups extends $dara.Model {
  /**
   * @example
   * 1640316786259
   */
  creationTime?: number;
  /**
   * @example
   * {}
   */
  exportProgress?: ListJobGroupsAsyncResponseBodyJobGroupsExportProgress;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  jobDataParsingTaskId?: string;
  /**
   * @example
   * xxx
   */
  jobGroupDescription?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  jobGroupId?: string;
  /**
   * @example
   * xxx
   */
  jobGroupName?: string;
  minConcurrency?: number;
  /**
   * @example
   * 1640316786259
   */
  modifyTime?: string;
  /**
   * @example
   * {}
   */
  progress?: ListJobGroupsAsyncResponseBodyJobGroupsProgress;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  scriptId?: string;
  /**
   * @example
   * xxxx
   */
  scriptName?: string;
  /**
   * @example
   * 111
   */
  scriptVersion?: string;
  /**
   * @example
   * Scheduling
   */
  status?: string;
  /**
   * @example
   * {}
   */
  strategy?: ListJobGroupsAsyncResponseBodyJobGroupsStrategy;
  /**
   * @example
   * 100
   */
  totalCallNum?: number;
  static names(): { [key: string]: string } {
    return {
      creationTime: 'CreationTime',
      exportProgress: 'ExportProgress',
      jobDataParsingTaskId: 'JobDataParsingTaskId',
      jobGroupDescription: 'JobGroupDescription',
      jobGroupId: 'JobGroupId',
      jobGroupName: 'JobGroupName',
      minConcurrency: 'MinConcurrency',
      modifyTime: 'ModifyTime',
      progress: 'Progress',
      scriptId: 'ScriptId',
      scriptName: 'ScriptName',
      scriptVersion: 'ScriptVersion',
      status: 'Status',
      strategy: 'Strategy',
      totalCallNum: 'TotalCallNum',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creationTime: 'number',
      exportProgress: ListJobGroupsAsyncResponseBodyJobGroupsExportProgress,
      jobDataParsingTaskId: 'string',
      jobGroupDescription: 'string',
      jobGroupId: 'string',
      jobGroupName: 'string',
      minConcurrency: 'number',
      modifyTime: 'string',
      progress: ListJobGroupsAsyncResponseBodyJobGroupsProgress,
      scriptId: 'string',
      scriptName: 'string',
      scriptVersion: 'string',
      status: 'string',
      strategy: ListJobGroupsAsyncResponseBodyJobGroupsStrategy,
      totalCallNum: 'number',
    };
  }

  validate() {
    if(this.exportProgress && typeof (this.exportProgress as any).validate === 'function') {
      (this.exportProgress as any).validate();
    }
    if(this.progress && typeof (this.progress as any).validate === 'function') {
      (this.progress as any).validate();
    }
    if(this.strategy && typeof (this.strategy as any).validate === 'function') {
      (this.strategy as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsResponseBodyJobsContacts extends $dara.Model {
  /**
   * @example
   * db3db762-e421-44c9-9a01-cb423470757c
   */
  contactId?: string;
  contactName?: string;
  honorific?: string;
  /**
   * @example
   * 72dcd26b-f12d-4c27-b3af-18f6aed5b160
   */
  jobId?: string;
  /**
   * @example
   * 135****8888
   */
  phoneNumber?: string;
  /**
   * @example
   * 2fa6bac3-06da-4315-82ab-72d6fd3a6f34
   */
  referenceId?: string;
  /**
   * @example
   * *
   */
  role?: string;
  /**
   * @example
   * Available
   */
  state?: string;
  static names(): { [key: string]: string } {
    return {
      contactId: 'ContactId',
      contactName: 'ContactName',
      honorific: 'Honorific',
      jobId: 'JobId',
      phoneNumber: 'PhoneNumber',
      referenceId: 'ReferenceId',
      role: 'Role',
      state: 'State',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactId: 'string',
      contactName: 'string',
      honorific: 'string',
      jobId: 'string',
      phoneNumber: 'string',
      referenceId: 'string',
      role: 'string',
      state: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsResponseBodyJobsExtras extends $dara.Model {
  /**
   * @example
   * name
   */
  key?: string;
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsResponseBodyJobsSummary extends $dara.Model {
  /**
   * @example
   * {}
   */
  category?: string;
  /**
   * @example
   * 5
   */
  content?: string;
  /**
   * @example
   * score
   */
  summaryName?: string;
  static names(): { [key: string]: string } {
    return {
      category: 'Category',
      content: 'Content',
      summaryName: 'SummaryName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'string',
      content: 'string',
      summaryName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsResponseBodyJobsTasksContact extends $dara.Model {
  /**
   * @example
   * db3db762-e421-44c9-9a01-cb423470757c
   */
  contactId?: string;
  contactName?: string;
  honorific?: string;
  /**
   * @example
   * b72425bd-7871-4050-838e-033d80d754b7
   */
  jobId?: string;
  /**
   * @example
   * 135****8888
   */
  phoneNumber?: string;
  /**
   * @example
   * 2fa6bac3-06da-4315-82ab-72d6fd3a6f34
   */
  referenceId?: string;
  /**
   * @example
   * *
   */
  role?: string;
  /**
   * @example
   * Available
   */
  state?: string;
  static names(): { [key: string]: string } {
    return {
      contactId: 'ContactId',
      contactName: 'ContactName',
      honorific: 'Honorific',
      jobId: 'JobId',
      phoneNumber: 'PhoneNumber',
      referenceId: 'ReferenceId',
      role: 'Role',
      state: 'State',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactId: 'string',
      contactName: 'string',
      honorific: 'string',
      jobId: 'string',
      phoneNumber: 'string',
      referenceId: 'string',
      role: 'string',
      state: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsResponseBodyJobsTasksConversationSummary extends $dara.Model {
  category?: string;
  content?: string;
  summaryName?: string;
  static names(): { [key: string]: string } {
    return {
      category: 'Category',
      content: 'Content',
      summaryName: 'SummaryName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'string',
      content: 'string',
      summaryName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsResponseBodyJobsTasksConversation extends $dara.Model {
  script?: string;
  /**
   * @example
   * Robot
   */
  speaker?: string;
  summary?: ListJobsResponseBodyJobsTasksConversationSummary[];
  /**
   * @example
   * 1579068424883
   */
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      script: 'Script',
      speaker: 'Speaker',
      summary: 'Summary',
      timestamp: 'Timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      script: 'string',
      speaker: 'string',
      summary: { 'type': 'array', 'itemType': ListJobsResponseBodyJobsTasksConversationSummary },
      timestamp: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.summary)) {
      $dara.Model.validateArray(this.summary);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsResponseBodyJobsTasks extends $dara.Model {
  /**
   * @example
   * 1579068424883
   */
  actualTime?: number;
  /**
   * @example
   * 1
   */
  brief?: string;
  /**
   * @example
   * 1528189846043
   */
  callId?: string;
  /**
   * @example
   * 135****8888
   */
  calledNumber?: string;
  /**
   * @example
   * 0571****3106
   */
  callingNumber?: string;
  /**
   * @example
   * 1234
   */
  chatbotId?: string;
  contact?: ListJobsResponseBodyJobsTasksContact;
  conversation?: ListJobsResponseBodyJobsTasksConversation[];
  /**
   * @example
   * 120
   */
  duration?: number;
  /**
   * @example
   * b72425bd-7871-4050-838e-033d80d754b7
   */
  jobId?: string;
  /**
   * @example
   * 1579068424883
   */
  planedTime?: number;
  /**
   * @example
   * ade80092-03d9-4f4d-ad4f-ab8a247d3150
   */
  scenarioId?: string;
  /**
   * @example
   * Succeeded
   */
  status?: string;
  /**
   * @example
   * ff44709e-39a6-43ba-959b-20fcabe3e496
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      actualTime: 'ActualTime',
      brief: 'Brief',
      callId: 'CallId',
      calledNumber: 'CalledNumber',
      callingNumber: 'CallingNumber',
      chatbotId: 'ChatbotId',
      contact: 'Contact',
      conversation: 'Conversation',
      duration: 'Duration',
      jobId: 'JobId',
      planedTime: 'PlanedTime',
      scenarioId: 'ScenarioId',
      status: 'Status',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualTime: 'number',
      brief: 'string',
      callId: 'string',
      calledNumber: 'string',
      callingNumber: 'string',
      chatbotId: 'string',
      contact: ListJobsResponseBodyJobsTasksContact,
      conversation: { 'type': 'array', 'itemType': ListJobsResponseBodyJobsTasksConversation },
      duration: 'number',
      jobId: 'string',
      planedTime: 'number',
      scenarioId: 'string',
      status: 'string',
      taskId: 'string',
    };
  }

  validate() {
    if(this.contact && typeof (this.contact as any).validate === 'function') {
      (this.contact as any).validate();
    }
    if(Array.isArray(this.conversation)) {
      $dara.Model.validateArray(this.conversation);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsResponseBodyJobs extends $dara.Model {
  callingNumbers?: string[];
  contacts?: ListJobsResponseBodyJobsContacts[];
  extras?: ListJobsResponseBodyJobsExtras[];
  /**
   * @example
   * NoAnswer
   */
  failureReason?: string;
  /**
   * @example
   * fce6c599-8ede-40e3-9f78-0928eda7b4e8
   */
  jobGroupId?: string;
  /**
   * @example
   * b72425bd-7871-4050-838e-033d80d754b7
   */
  jobId?: string;
  /**
   * @example
   * 5
   */
  priority?: number;
  /**
   * @example
   * d5971d98-7312-4f0e-a918-a17d67133e28
   */
  referenceId?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  scenarioId?: string;
  /**
   * @example
   * Succeeded
   */
  status?: string;
  /**
   * @example
   * c8a2b7f2-ad1a-4865-b872-d0080d9802d9
   */
  strategyId?: string;
  summary?: ListJobsResponseBodyJobsSummary[];
  /**
   * @example
   * 1
   */
  systemPriority?: number;
  tasks?: ListJobsResponseBodyJobsTasks[];
  static names(): { [key: string]: string } {
    return {
      callingNumbers: 'CallingNumbers',
      contacts: 'Contacts',
      extras: 'Extras',
      failureReason: 'FailureReason',
      jobGroupId: 'JobGroupId',
      jobId: 'JobId',
      priority: 'Priority',
      referenceId: 'ReferenceId',
      scenarioId: 'ScenarioId',
      status: 'Status',
      strategyId: 'StrategyId',
      summary: 'Summary',
      systemPriority: 'SystemPriority',
      tasks: 'Tasks',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumbers: { 'type': 'array', 'itemType': 'string' },
      contacts: { 'type': 'array', 'itemType': ListJobsResponseBodyJobsContacts },
      extras: { 'type': 'array', 'itemType': ListJobsResponseBodyJobsExtras },
      failureReason: 'string',
      jobGroupId: 'string',
      jobId: 'string',
      priority: 'number',
      referenceId: 'string',
      scenarioId: 'string',
      status: 'string',
      strategyId: 'string',
      summary: { 'type': 'array', 'itemType': ListJobsResponseBodyJobsSummary },
      systemPriority: 'number',
      tasks: { 'type': 'array', 'itemType': ListJobsResponseBodyJobsTasks },
    };
  }

  validate() {
    if(Array.isArray(this.callingNumbers)) {
      $dara.Model.validateArray(this.callingNumbers);
    }
    if(Array.isArray(this.contacts)) {
      $dara.Model.validateArray(this.contacts);
    }
    if(Array.isArray(this.extras)) {
      $dara.Model.validateArray(this.extras);
    }
    if(Array.isArray(this.summary)) {
      $dara.Model.validateArray(this.summary);
    }
    if(Array.isArray(this.tasks)) {
      $dara.Model.validateArray(this.tasks);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsByGroupResponseBodyJobsListContacts extends $dara.Model {
  /**
   * @example
   * db3db762-e421-44c9-9a01-cb423470757c
   */
  contactId?: string;
  contactName?: string;
  honorific?: string;
  /**
   * @example
   * 72dcd26b-f12d-4c27-b3af-18f6aed5b160
   */
  jobId?: string;
  /**
   * @example
   * 135****8888
   */
  phoneNumber?: string;
  /**
   * @example
   * 2fa6bac3-06da-4315-82ab-72d6fd3a6f34
   */
  referenceId?: string;
  /**
   * @example
   * *
   */
  role?: string;
  /**
   * @example
   * Available
   */
  state?: string;
  static names(): { [key: string]: string } {
    return {
      contactId: 'ContactId',
      contactName: 'ContactName',
      honorific: 'Honorific',
      jobId: 'JobId',
      phoneNumber: 'PhoneNumber',
      referenceId: 'ReferenceId',
      role: 'Role',
      state: 'State',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactId: 'string',
      contactName: 'string',
      honorific: 'string',
      jobId: 'string',
      phoneNumber: 'string',
      referenceId: 'string',
      role: 'string',
      state: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsByGroupResponseBodyJobsListExtras extends $dara.Model {
  /**
   * @example
   * djrq
   */
  key?: string;
  /**
   * @example
   * 2019-08-21 09:49:59.0
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsByGroupResponseBodyJobsListSummary extends $dara.Model {
  /**
   * @example
   * {}
   */
  category?: string;
  /**
   * @example
   * 5
   */
  content?: string;
  /**
   * @example
   * 62a860f5-a8b3-4b75-9512-c7e04bb7c8bc
   */
  conversationDetailId?: string;
  /**
   * @example
   * 88e56cfb-33f8-477a-907c-0fe83292d924
   */
  jobGroupId?: string;
  /**
   * @example
   * f102a853-5f5a-47fb-8869-b31ea74a9620
   */
  jobId?: string;
  /**
   * @example
   * 680f1905-81ae-4aab-99dd-2964dfb767fa
   */
  summaryId?: string;
  /**
   * @example
   * score
   */
  summaryName?: string;
  /**
   * @example
   * b0f35dd1-0337-402e-9c4f-3a6c2426950a
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      category: 'Category',
      content: 'Content',
      conversationDetailId: 'ConversationDetailId',
      jobGroupId: 'JobGroupId',
      jobId: 'JobId',
      summaryId: 'SummaryId',
      summaryName: 'SummaryName',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'string',
      content: 'string',
      conversationDetailId: 'string',
      jobGroupId: 'string',
      jobId: 'string',
      summaryId: 'string',
      summaryName: 'string',
      taskId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsByGroupResponseBodyJobsList extends $dara.Model {
  callingNumbers?: string[];
  contacts?: ListJobsByGroupResponseBodyJobsListContacts[];
  extras?: ListJobsByGroupResponseBodyJobsListExtras[];
  /**
   * @example
   * NoAnswer
   */
  failureReason?: string;
  /**
   * @example
   * fce6c599-8ede-40e3-9f78-0928eda7b4e8
   */
  jobGroupId?: string;
  /**
   * @example
   * b72425bd-7871-4050-838e-033d80d754b7
   */
  jobId?: string;
  /**
   * @example
   * 5
   */
  priority?: number;
  /**
   * @example
   * d5971d98-7312-4f0e-a918-a17d67133e28
   */
  referenceId?: string;
  /**
   * @example
   * ade80092-03d9-4f4d-ad4f-ab8a247d3150
   */
  scenarioId?: string;
  /**
   * @example
   * Succeeded
   */
  status?: string;
  /**
   * @example
   * c8a2b7f2-ad1a-4865-b872-d0080d9802d9
   */
  strategyId?: string;
  summary?: ListJobsByGroupResponseBodyJobsListSummary[];
  /**
   * @example
   * 1
   */
  systemPriority?: number;
  static names(): { [key: string]: string } {
    return {
      callingNumbers: 'CallingNumbers',
      contacts: 'Contacts',
      extras: 'Extras',
      failureReason: 'FailureReason',
      jobGroupId: 'JobGroupId',
      jobId: 'JobId',
      priority: 'Priority',
      referenceId: 'ReferenceId',
      scenarioId: 'ScenarioId',
      status: 'Status',
      strategyId: 'StrategyId',
      summary: 'Summary',
      systemPriority: 'SystemPriority',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumbers: { 'type': 'array', 'itemType': 'string' },
      contacts: { 'type': 'array', 'itemType': ListJobsByGroupResponseBodyJobsListContacts },
      extras: { 'type': 'array', 'itemType': ListJobsByGroupResponseBodyJobsListExtras },
      failureReason: 'string',
      jobGroupId: 'string',
      jobId: 'string',
      priority: 'number',
      referenceId: 'string',
      scenarioId: 'string',
      status: 'string',
      strategyId: 'string',
      summary: { 'type': 'array', 'itemType': ListJobsByGroupResponseBodyJobsListSummary },
      systemPriority: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.callingNumbers)) {
      $dara.Model.validateArray(this.callingNumbers);
    }
    if(Array.isArray(this.contacts)) {
      $dara.Model.validateArray(this.contacts);
    }
    if(Array.isArray(this.extras)) {
      $dara.Model.validateArray(this.extras);
    }
    if(Array.isArray(this.summary)) {
      $dara.Model.validateArray(this.summary);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsByGroupResponseBodyJobs extends $dara.Model {
  list?: ListJobsByGroupResponseBodyJobsList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ListJobsByGroupResponseBodyJobsList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOutboundCallNumbersResponseBodyOutboundCallNumbersList extends $dara.Model {
  /**
   * @example
   * 10088
   */
  number?: string;
  /**
   * @example
   * fa0e21e9-caab-4629-9121-1e341243d599
   */
  outboundCallNumberId?: string;
  /**
   * @example
   * 10
   */
  rateLimitCount?: string;
  /**
   * @example
   * 100
   */
  rateLimitPeriod?: string;
  static names(): { [key: string]: string } {
    return {
      number: 'Number',
      outboundCallNumberId: 'OutboundCallNumberId',
      rateLimitCount: 'RateLimitCount',
      rateLimitPeriod: 'RateLimitPeriod',
    };
  }

  static types(): { [key: string]: any } {
    return {
      number: 'string',
      outboundCallNumberId: 'string',
      rateLimitCount: 'string',
      rateLimitPeriod: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOutboundCallNumbersResponseBodyOutboundCallNumbers extends $dara.Model {
  list?: ListOutboundCallNumbersResponseBodyOutboundCallNumbersList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 10
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ListOutboundCallNumbersResponseBodyOutboundCallNumbersList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListResourceTagsResponseBodyResourceTagsList extends $dara.Model {
  /**
   * @example
   * name
   */
  key?: string;
  /**
   * @example
   * xxx
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListResourceTagsResponseBodyResourceTags extends $dara.Model {
  /**
   * @example
   * []
   */
  list?: ListResourceTagsResponseBodyResourceTagsList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 100
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ListResourceTagsResponseBodyResourceTagsList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSchedulerInstancesResponseBodySchedulerInstances extends $dara.Model {
  /**
   * @example
   * {}
   */
  baseStrategy?: string;
  /**
   * @example
   * CLOUD_CODE_PUBLISHER
   */
  business?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  instanceId?: string;
  /**
   * @example
   * 5
   */
  maxConcurrency?: number;
  /**
   * @example
   * 234852938
   */
  ownerId?: string;
  static names(): { [key: string]: string } {
    return {
      baseStrategy: 'BaseStrategy',
      business: 'Business',
      instanceId: 'InstanceId',
      maxConcurrency: 'MaxConcurrency',
      ownerId: 'OwnerId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baseStrategy: 'string',
      business: 'string',
      instanceId: 'string',
      maxConcurrency: 'number',
      ownerId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList extends $dara.Model {
  description?: string;
  /**
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @example
   * 1578965079000
   */
  publishTime?: number;
  /**
   * @example
   * 29420f65-8f1f-4009-b2f8-f4f7b5d59090
   */
  scriptId?: string;
  /**
   * @example
   * 1578965079000
   */
  scriptVersion?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      instanceId: 'InstanceId',
      publishTime: 'PublishTime',
      scriptId: 'ScriptId',
      scriptVersion: 'ScriptVersion',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      instanceId: 'string',
      publishTime: 'number',
      scriptId: 'string',
      scriptVersion: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptPublishHistoriesResponseBodyScriptPublishHistories extends $dara.Model {
  list?: ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 100
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptRecordingResponseBodyScriptRecordings extends $dara.Model {
  /**
   * @example
   * 2022-07-11T07:51:49.000+0000
   */
  gmtCreate?: number;
  /**
   * @example
   * 1654601332000
   */
  gmtModified?: number;
  /**
   * @example
   * 1654601332000
   */
  gmtUpload?: number;
  /**
   * @example
   * 1
   */
  innerId?: string;
  /**
   * @example
   * ff0fb845-9f90-46d3-9716-d36b8a1e753a
   */
  instanceId?: string;
  recordingContent?: string;
  /**
   * @example
   * 10
   */
  recordingDuration?: number;
  /**
   * @example
   * hello.wav
   */
  recordingName?: string;
  refId?: string;
  /**
   * @example
   * 6019b692-fd9e-4adb-8877-cef6a297b234
   */
  scriptId?: string;
  /**
   * @example
   * 8
   */
  state?: number;
  stateExtend?: string;
  /**
   * @example
   * 393674ed-3b5d-db44-0fda-615d05210178
   */
  storageUuid?: string;
  /**
   * @example
   * 0a77386e-6402-8d23-4adf-6ec13b3f404d
   */
  uuid?: string;
  static names(): { [key: string]: string } {
    return {
      gmtCreate: 'GmtCreate',
      gmtModified: 'GmtModified',
      gmtUpload: 'GmtUpload',
      innerId: 'InnerId',
      instanceId: 'InstanceId',
      recordingContent: 'RecordingContent',
      recordingDuration: 'RecordingDuration',
      recordingName: 'RecordingName',
      refId: 'RefId',
      scriptId: 'ScriptId',
      state: 'State',
      stateExtend: 'StateExtend',
      storageUuid: 'StorageUuid',
      uuid: 'Uuid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      gmtCreate: 'number',
      gmtModified: 'number',
      gmtUpload: 'number',
      innerId: 'string',
      instanceId: 'string',
      recordingContent: 'string',
      recordingDuration: 'number',
      recordingName: 'string',
      refId: 'string',
      scriptId: 'string',
      state: 'number',
      stateExtend: 'string',
      storageUuid: 'string',
      uuid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList extends $dara.Model {
  /**
   * @example
   * bdd49242-114c-4045-b1d1-25ccc1756c75
   */
  instanceId?: string;
  scriptContent?: string;
  /**
   * @example
   * a7441a05-43bb-4a2d-acb0-365f245d7a5b
   */
  scriptId?: string;
  /**
   * @example
   * 2c8fa91f-9856-4145-90f2-08252f09bc18
   */
  scriptVoiceConfigId?: string;
  /**
   * @example
   * ""
   */
  scriptWaveformRelation?: string;
  /**
   * @example
   * DIALOGUE_FLOW
   */
  source?: string;
  /**
   * @example
   * TTS
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptContent: 'ScriptContent',
      scriptId: 'ScriptId',
      scriptVoiceConfigId: 'ScriptVoiceConfigId',
      scriptWaveformRelation: 'ScriptWaveformRelation',
      source: 'Source',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptContent: 'string',
      scriptId: 'string',
      scriptVoiceConfigId: 'string',
      scriptWaveformRelation: 'string',
      source: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs extends $dara.Model {
  list?: ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 100
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptsResponseBodyScriptsListNluProfile extends $dara.Model {
  fcFunction?: string;
  fcHttpTriggerUrl?: string;
  fcRegion?: string;
  static names(): { [key: string]: string } {
    return {
      fcFunction: 'FcFunction',
      fcHttpTriggerUrl: 'FcHttpTriggerUrl',
      fcRegion: 'FcRegion',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fcFunction: 'string',
      fcHttpTriggerUrl: 'string',
      fcRegion: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptsResponseBodyScriptsList extends $dara.Model {
  agentKey?: string;
  agentLlm?: boolean;
  createTime?: number;
  /**
   * @example
   * DRAFTED
   */
  debugStatus?: string;
  /**
   * @example
   * false
   */
  emotionEnable?: boolean;
  industry?: string;
  /**
   * @example
   * true
   */
  isDebugDrafted?: boolean;
  /**
   * @example
   * true
   */
  isDrafted?: boolean;
  /**
   * @example
   * false
   */
  isPreset?: boolean;
  /**
   * @example
   * false
   */
  longWaitEnable?: boolean;
  /**
   * @example
   * false
   */
  miniPlaybackEnable?: boolean;
  /**
   * @example
   * false
   */
  newBargeInEnable?: boolean;
  nluAccessType?: string;
  nluEngine?: string;
  nluProfile?: ListScriptsResponseBodyScriptsListNluProfile;
  rejectReason?: string;
  scene?: string;
  scriptDescription?: string;
  /**
   * @example
   * 8d6a6e41-8093-49af-a9d1-0281878758ac
   */
  scriptId?: string;
  scriptName?: string;
  /**
   * @example
   * DRAFTED
   */
  status?: string;
  /**
   * @example
   * 1578965079000
   */
  updateTime?: number;
  agentId?: number;
  static names(): { [key: string]: string } {
    return {
      agentKey: 'AgentKey',
      agentLlm: 'AgentLlm',
      createTime: 'CreateTime',
      debugStatus: 'DebugStatus',
      emotionEnable: 'EmotionEnable',
      industry: 'Industry',
      isDebugDrafted: 'IsDebugDrafted',
      isDrafted: 'IsDrafted',
      isPreset: 'IsPreset',
      longWaitEnable: 'LongWaitEnable',
      miniPlaybackEnable: 'MiniPlaybackEnable',
      newBargeInEnable: 'NewBargeInEnable',
      nluAccessType: 'NluAccessType',
      nluEngine: 'NluEngine',
      nluProfile: 'NluProfile',
      rejectReason: 'RejectReason',
      scene: 'Scene',
      scriptDescription: 'ScriptDescription',
      scriptId: 'ScriptId',
      scriptName: 'ScriptName',
      status: 'Status',
      updateTime: 'UpdateTime',
      agentId: 'agentId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentKey: 'string',
      agentLlm: 'boolean',
      createTime: 'number',
      debugStatus: 'string',
      emotionEnable: 'boolean',
      industry: 'string',
      isDebugDrafted: 'boolean',
      isDrafted: 'boolean',
      isPreset: 'boolean',
      longWaitEnable: 'boolean',
      miniPlaybackEnable: 'boolean',
      newBargeInEnable: 'boolean',
      nluAccessType: 'string',
      nluEngine: 'string',
      nluProfile: ListScriptsResponseBodyScriptsListNluProfile,
      rejectReason: 'string',
      scene: 'string',
      scriptDescription: 'string',
      scriptId: 'string',
      scriptName: 'string',
      status: 'string',
      updateTime: 'number',
      agentId: 'number',
    };
  }

  validate() {
    if(this.nluProfile && typeof (this.nluProfile as any).validate === 'function') {
      (this.nluProfile as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptsResponseBodyScripts extends $dara.Model {
  list?: ListScriptsResponseBodyScriptsList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 15
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ListScriptsResponseBodyScriptsList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagResourcesRequestTag extends $dara.Model {
  /**
   * @example
   * Tag.1.Key=key1
   */
  key?: string;
  /**
   * @example
   * Tag.1.Value=value1
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagResourcesResponseBodyTagResources extends $dara.Model {
  /**
   * @example
   * b949ae1f-01dc-4191-ae5a-70fbe6772fd8
   */
  resourceId?: string;
  /**
   * @example
   * instance
   */
  resourceType?: string;
  /**
   * @example
   * key1
   */
  tagKey?: string;
  /**
   * @example
   * value1
   */
  tagValue?: string;
  static names(): { [key: string]: string } {
    return {
      resourceId: 'ResourceId',
      resourceType: 'ResourceType',
      tagKey: 'TagKey',
      tagValue: 'TagValue',
    };
  }

  static types(): { [key: string]: any } {
    return {
      resourceId: 'string',
      resourceType: 'string',
      tagKey: 'string',
      tagValue: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagsResponseBodyTagGroups extends $dara.Model {
  /**
   * @example
   * 8a4c6d3d-5ed6-44ca-b779-16c20f8862be
   */
  scriptId?: string;
  tagGroup?: string;
  /**
   * @example
   * 38c03261-9fe8-4b9b-8c3b-983a60319012
   */
  tagGroupId?: string;
  /**
   * @example
   * 1
   */
  tagGroupIndex?: number;
  static names(): { [key: string]: string } {
    return {
      scriptId: 'ScriptId',
      tagGroup: 'TagGroup',
      tagGroupId: 'TagGroupId',
      tagGroupIndex: 'TagGroupIndex',
    };
  }

  static types(): { [key: string]: any } {
    return {
      scriptId: 'string',
      tagGroup: 'string',
      tagGroupId: 'string',
      tagGroupIndex: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagsResponseBodyTags extends $dara.Model {
  /**
   * @example
   * 8a4c6d3d-5ed6-44ca-b779-16c20f8862be
   */
  scriptId?: string;
  tagGroup?: string;
  /**
   * @example
   * d62be647-6202-4b1f-9708-0baeec552635
   */
  tagId?: string;
  /**
   * @example
   * 1
   */
  tagIndex?: number;
  tagName?: string;
  static names(): { [key: string]: string } {
    return {
      scriptId: 'ScriptId',
      tagGroup: 'TagGroup',
      tagId: 'TagId',
      tagIndex: 'TagIndex',
      tagName: 'TagName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      scriptId: 'string',
      tagGroup: 'string',
      tagId: 'string',
      tagIndex: 'number',
      tagName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAgentProfileResponseBodyData extends $dara.Model {
  /**
   * @example
   * 3d7d253cfb77476da0cf3681bcf7b4e8
   */
  agentProfileId?: string;
  /**
   * @remarks
   * agent template id
   * 
   * @example
   * default-survey
   */
  agentProfileTemplateId?: string;
  /**
   * @remarks
   * agent type
   * 
   * @example
   * Human
   */
  agentType?: string;
  /**
   * @example
   * []
   */
  apiPluginJson?: string;
  /**
   * @example
   * 1721356124220
   */
  createTime?: string;
  description?: string;
  /**
   * @example
   * 788066f2-f160-458e-a3bb-83e1c9d5606d
   */
  instanceId?: string;
  /**
   * @example
   * [{"type":"TransferToAgent","instructions":[{"code":"Transfer0","skillGroupId":"123","skillGroupName":"123"}],"timeoutEnable":false},{"type":"CollectNumber","instructions":[]}]
   */
  instructionJson?: string;
  labelsJson?: string;
  /**
   * @example
   * model_002
   */
  model?: string;
  /**
   * @example
   * ""
   */
  modelConfig?: string;
  /**
   * @example
   * {"chatbotInstanceId":"chatbot-cn-j7eiVJZRmb","faqCategoryIds":[30000474726],"llmAgentId":"1246206","llmAgentInstanceId":"outbound_05efb75a-95df-438e-9b9b-8f2c857d5498","llmAgentKey":"d682716514814815ae77757c0bcbda01_p_outbound_public"}
   */
  nluConfigJson?: string;
  prompt?: string;
  promptJson?: string;
  /**
   * @example
   * default
   */
  scenario?: string;
  /**
   * @example
   * 3eacaec0-64ba-4008-9392-1d419b0d2673
   */
  scriptId?: string;
  /**
   * @example
   * true
   */
  system?: boolean;
  /**
   * @example
   * 1715416630.0
   */
  updateTime?: string;
  variablesJson?: string;
  static names(): { [key: string]: string } {
    return {
      agentProfileId: 'AgentProfileId',
      agentProfileTemplateId: 'AgentProfileTemplateId',
      agentType: 'AgentType',
      apiPluginJson: 'ApiPluginJson',
      createTime: 'CreateTime',
      description: 'Description',
      instanceId: 'InstanceId',
      instructionJson: 'InstructionJson',
      labelsJson: 'LabelsJson',
      model: 'Model',
      modelConfig: 'ModelConfig',
      nluConfigJson: 'NluConfigJson',
      prompt: 'Prompt',
      promptJson: 'PromptJson',
      scenario: 'Scenario',
      scriptId: 'ScriptId',
      system: 'System',
      updateTime: 'UpdateTime',
      variablesJson: 'VariablesJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentProfileId: 'string',
      agentProfileTemplateId: 'string',
      agentType: 'string',
      apiPluginJson: 'string',
      createTime: 'string',
      description: 'string',
      instanceId: 'string',
      instructionJson: 'string',
      labelsJson: 'string',
      model: 'string',
      modelConfig: 'string',
      nluConfigJson: 'string',
      prompt: 'string',
      promptJson: 'string',
      scenario: 'string',
      scriptId: 'string',
      system: 'boolean',
      updateTime: 'string',
      variablesJson: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAnnotationMissionResponseBodyData extends $dara.Model {
  /**
   * @example
   * The operation is not allowed. User state (DIALING) does not meet expectations (READY).
   */
  message?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      message: 'Message',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      message: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime extends $dara.Model {
  /**
   * @example
   * 1581937093000
   */
  beginTime?: string;
  /**
   * @example
   * 1581997093000
   */
  endTime?: string;
  static names(): { [key: string]: string } {
    return {
      beginTime: 'BeginTime',
      endTime: 'EndTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beginTime: 'string',
      endTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBatchJobsResponseBodyJobGroupStrategy extends $dara.Model {
  /**
   * @example
   * {}
   */
  customized?: string;
  /**
   * @example
   * 2209702074000
   */
  endTime?: number;
  /**
   * @example
   * CONTINUE
   */
  followUpStrategy?: string;
  /**
   * @example
   * false
   */
  isTemplate?: boolean;
  /**
   * @example
   * 3
   */
  maxAttemptsPerDay?: number;
  /**
   * @example
   * 10
   */
  minAttemptInterval?: number;
  /**
   * @example
   * Once
   */
  repeatBy?: string;
  repeatDays?: string[];
  /**
   * @example
   * LocalFirst
   */
  routingStrategy?: string;
  /**
   * @example
   * 1578550074000
   */
  startTime?: number;
  strategyDescription?: string;
  /**
   * @example
   * f718798d-96be-40e4-bef6-317b54855708
   */
  strategyId?: string;
  strategyName?: string;
  /**
   * @example
   * Repeatable
   */
  type?: string;
  workingTime?: ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime[];
  static names(): { [key: string]: string } {
    return {
      customized: 'Customized',
      endTime: 'EndTime',
      followUpStrategy: 'FollowUpStrategy',
      isTemplate: 'IsTemplate',
      maxAttemptsPerDay: 'MaxAttemptsPerDay',
      minAttemptInterval: 'MinAttemptInterval',
      repeatBy: 'RepeatBy',
      repeatDays: 'RepeatDays',
      routingStrategy: 'RoutingStrategy',
      startTime: 'StartTime',
      strategyDescription: 'StrategyDescription',
      strategyId: 'StrategyId',
      strategyName: 'StrategyName',
      type: 'Type',
      workingTime: 'WorkingTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      customized: 'string',
      endTime: 'number',
      followUpStrategy: 'string',
      isTemplate: 'boolean',
      maxAttemptsPerDay: 'number',
      minAttemptInterval: 'number',
      repeatBy: 'string',
      repeatDays: { 'type': 'array', 'itemType': 'string' },
      routingStrategy: 'string',
      startTime: 'number',
      strategyDescription: 'string',
      strategyId: 'string',
      strategyName: 'string',
      type: 'string',
      workingTime: { 'type': 'array', 'itemType': ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime },
    };
  }

  validate() {
    if(Array.isArray(this.repeatDays)) {
      $dara.Model.validateArray(this.repeatDays);
    }
    if(Array.isArray(this.workingTime)) {
      $dara.Model.validateArray(this.workingTime);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBatchJobsResponseBodyJobGroup extends $dara.Model {
  callingNumbers?: string[];
  /**
   * @example
   * 1579068424000
   */
  creationTime?: number;
  /**
   * @example
   * 52e80b02-0126-4556-a1e6-ef5b3747ed53/a9a3ddc7-d7d7-48cd-82b5-b31bb5510e71_2a66f8ad-dfbb-4980-9b84-439171295a11.xlsx
   */
  jobFilePath?: string;
  jobGroupDescription?: string;
  /**
   * @example
   * 5a7e8b09-baf9-4cab-b540-c971f47a7146
   */
  jobGroupId?: string;
  jobGroupName?: string;
  /**
   * @example
   * 6cea9bed-63e6-439e-ae4c-b3333efff53d
   */
  scenarioId?: string;
  strategy?: ModifyBatchJobsResponseBodyJobGroupStrategy;
  static names(): { [key: string]: string } {
    return {
      callingNumbers: 'CallingNumbers',
      creationTime: 'CreationTime',
      jobFilePath: 'JobFilePath',
      jobGroupDescription: 'JobGroupDescription',
      jobGroupId: 'JobGroupId',
      jobGroupName: 'JobGroupName',
      scenarioId: 'ScenarioId',
      strategy: 'Strategy',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumbers: { 'type': 'array', 'itemType': 'string' },
      creationTime: 'number',
      jobFilePath: 'string',
      jobGroupDescription: 'string',
      jobGroupId: 'string',
      jobGroupName: 'string',
      scenarioId: 'string',
      strategy: ModifyBatchJobsResponseBodyJobGroupStrategy,
    };
  }

  validate() {
    if(Array.isArray(this.callingNumbers)) {
      $dara.Model.validateArray(this.callingNumbers);
    }
    if(this.strategy && typeof (this.strategy as any).validate === 'function') {
      (this.strategy as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentRequestIntentDefinition extends $dara.Model {
  aliasName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  intentName?: string;
  static names(): { [key: string]: string } {
    return {
      aliasName: 'AliasName',
      intentName: 'IntentName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      aliasName: 'string',
      intentName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentLgfRequestLgfDefinition extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  ruleText?: string;
  static names(): { [key: string]: string } {
    return {
      intentId: 'IntentId',
      ruleText: 'RuleText',
    };
  }

  static types(): { [key: string]: any } {
    return {
      intentId: 'number',
      ruleText: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentUserSayRequestUserSayDefinition extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  content?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10717802
   */
  intentId?: number;
  static names(): { [key: string]: string } {
    return {
      content: 'Content',
      intentId: 'IntentId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      intentId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyInstanceResponseBodyInstance extends $dara.Model {
  /**
   * @example
   * 1578469042851
   */
  creationTime?: number;
  /**
   * @example
   * 123123
   */
  creatorId?: number;
  /**
   * @example
   * xxx
   */
  creatorName?: string;
  instanceDescription?: string;
  /**
   * @example
   * 90515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  instanceId?: string;
  instanceName?: string;
  /**
   * @example
   * 5
   */
  maxConcurrentConversation?: number;
  /**
   * @example
   * xxx
   */
  ownerName?: string;
  static names(): { [key: string]: string } {
    return {
      creationTime: 'CreationTime',
      creatorId: 'CreatorId',
      creatorName: 'CreatorName',
      instanceDescription: 'InstanceDescription',
      instanceId: 'InstanceId',
      instanceName: 'InstanceName',
      maxConcurrentConversation: 'MaxConcurrentConversation',
      ownerName: 'OwnerName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creationTime: 'number',
      creatorId: 'number',
      creatorName: 'string',
      instanceDescription: 'string',
      instanceId: 'string',
      instanceName: 'string',
      maxConcurrentConversation: 'number',
      ownerName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyJobGroupResponseBodyJobGroupExportProgress extends $dara.Model {
  /**
   * @example
   * https://***.oss-cn-shanghai.aliyuncs.com/sample
   */
  fileHttpUrl?: string;
  /**
   * @example
   * 1
   */
  progress?: string;
  /**
   * @example
   * FINISHED
   */
  status?: string;
  static names(): { [key: string]: string } {
    return {
      fileHttpUrl: 'FileHttpUrl',
      progress: 'Progress',
      status: 'Status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileHttpUrl: 'string',
      progress: 'string',
      status: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyJobGroupResponseBodyJobGroupRecallStrategy extends $dara.Model {
  /**
   * @example
   * false
   */
  emptyNumberIgnore?: boolean;
  /**
   * @example
   * false
   */
  inArrearsIgnore?: boolean;
  /**
   * @example
   * false
   */
  outOfServiceIgnore?: boolean;
  static names(): { [key: string]: string } {
    return {
      emptyNumberIgnore: 'EmptyNumberIgnore',
      inArrearsIgnore: 'InArrearsIgnore',
      outOfServiceIgnore: 'OutOfServiceIgnore',
    };
  }

  static types(): { [key: string]: any } {
    return {
      emptyNumberIgnore: 'boolean',
      inArrearsIgnore: 'boolean',
      outOfServiceIgnore: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime extends $dara.Model {
  /**
   * @example
   * 09:00:00
   */
  beginTime?: string;
  /**
   * @example
   * 12:00:00
   */
  endTime?: string;
  static names(): { [key: string]: string } {
    return {
      beginTime: 'BeginTime',
      endTime: 'EndTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beginTime: 'string',
      endTime: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyJobGroupResponseBodyJobGroupStrategy extends $dara.Model {
  /**
   * @example
   * {}
   */
  customized?: string;
  /**
   * @example
   * 2209702074000
   */
  endTime?: number;
  /**
   * @example
   * CONTINUE
   */
  followUpStrategy?: string;
  /**
   * @example
   * false
   */
  isTemplate?: boolean;
  /**
   * @example
   * 3
   */
  maxAttemptsPerDay?: number;
  /**
   * @example
   * 10
   */
  minAttemptInterval?: number;
  /**
   * @example
   * Once
   */
  repeatBy?: string;
  repeatDays?: string[];
  /**
   * @example
   * LocalFirst
   */
  routingStrategy?: string;
  /**
   * @example
   * 1578550074000
   */
  startTime?: number;
  strategyDescription?: string;
  /**
   * @example
   * f718798d-96be-40e4-bef6-317b54855708
   */
  strategyId?: string;
  strategyName?: string;
  /**
   * @example
   * Repeatable
   */
  type?: string;
  workingTime?: ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime[];
  static names(): { [key: string]: string } {
    return {
      customized: 'Customized',
      endTime: 'EndTime',
      followUpStrategy: 'FollowUpStrategy',
      isTemplate: 'IsTemplate',
      maxAttemptsPerDay: 'MaxAttemptsPerDay',
      minAttemptInterval: 'MinAttemptInterval',
      repeatBy: 'RepeatBy',
      repeatDays: 'RepeatDays',
      routingStrategy: 'RoutingStrategy',
      startTime: 'StartTime',
      strategyDescription: 'StrategyDescription',
      strategyId: 'StrategyId',
      strategyName: 'StrategyName',
      type: 'Type',
      workingTime: 'WorkingTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      customized: 'string',
      endTime: 'number',
      followUpStrategy: 'string',
      isTemplate: 'boolean',
      maxAttemptsPerDay: 'number',
      minAttemptInterval: 'number',
      repeatBy: 'string',
      repeatDays: { 'type': 'array', 'itemType': 'string' },
      routingStrategy: 'string',
      startTime: 'number',
      strategyDescription: 'string',
      strategyId: 'string',
      strategyName: 'string',
      type: 'string',
      workingTime: { 'type': 'array', 'itemType': ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime },
    };
  }

  validate() {
    if(Array.isArray(this.repeatDays)) {
      $dara.Model.validateArray(this.repeatDays);
    }
    if(Array.isArray(this.workingTime)) {
      $dara.Model.validateArray(this.workingTime);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyJobGroupResponseBodyJobGroup extends $dara.Model {
  callingNumbers?: string[];
  /**
   * @example
   * 1578550074361
   */
  creationTime?: number;
  exportProgress?: ModifyJobGroupResponseBodyJobGroupExportProgress;
  flashSmsExtras?: string;
  /**
   * @example
   * e37d28cb-0413-4816-85ed-fd354d025ea3
   */
  jobDataParsingTaskId?: string;
  jobFilePath?: string;
  jobGroupDescription?: string;
  /**
   * @example
   * c62e6789-28a8-41db-941e-171a01d3b3b9
   */
  jobGroupId?: string;
  jobGroupName?: string;
  /**
   * @example
   * 1
   */
  minConcurrency?: number;
  /**
   * @example
   * 1628425608429
   */
  modifyTime?: string;
  priority?: string;
  recallStrategy?: ModifyJobGroupResponseBodyJobGroupRecallStrategy;
  ringingDuration?: number;
  /**
   * @example
   * 6cea9bed-63e6-439e-ae4c-b3333efff53d
   */
  scenarioId?: string;
  scriptName?: string;
  /**
   * @example
   * 1628425608429
   */
  scriptVersion?: string;
  /**
   * @example
   * Scheduling
   */
  status?: string;
  strategy?: ModifyJobGroupResponseBodyJobGroupStrategy;
  static names(): { [key: string]: string } {
    return {
      callingNumbers: 'CallingNumbers',
      creationTime: 'CreationTime',
      exportProgress: 'ExportProgress',
      flashSmsExtras: 'FlashSmsExtras',
      jobDataParsingTaskId: 'JobDataParsingTaskId',
      jobFilePath: 'JobFilePath',
      jobGroupDescription: 'JobGroupDescription',
      jobGroupId: 'JobGroupId',
      jobGroupName: 'JobGroupName',
      minConcurrency: 'MinConcurrency',
      modifyTime: 'ModifyTime',
      priority: 'Priority',
      recallStrategy: 'RecallStrategy',
      ringingDuration: 'RingingDuration',
      scenarioId: 'ScenarioId',
      scriptName: 'ScriptName',
      scriptVersion: 'ScriptVersion',
      status: 'Status',
      strategy: 'Strategy',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumbers: { 'type': 'array', 'itemType': 'string' },
      creationTime: 'number',
      exportProgress: ModifyJobGroupResponseBodyJobGroupExportProgress,
      flashSmsExtras: 'string',
      jobDataParsingTaskId: 'string',
      jobFilePath: 'string',
      jobGroupDescription: 'string',
      jobGroupId: 'string',
      jobGroupName: 'string',
      minConcurrency: 'number',
      modifyTime: 'string',
      priority: 'string',
      recallStrategy: ModifyJobGroupResponseBodyJobGroupRecallStrategy,
      ringingDuration: 'number',
      scenarioId: 'string',
      scriptName: 'string',
      scriptVersion: 'string',
      status: 'string',
      strategy: ModifyJobGroupResponseBodyJobGroupStrategy,
    };
  }

  validate() {
    if(Array.isArray(this.callingNumbers)) {
      $dara.Model.validateArray(this.callingNumbers);
    }
    if(this.exportProgress && typeof (this.exportProgress as any).validate === 'function') {
      (this.exportProgress as any).validate();
    }
    if(this.recallStrategy && typeof (this.recallStrategy as any).validate === 'function') {
      (this.recallStrategy as any).validate();
    }
    if(this.strategy && typeof (this.strategy as any).validate === 'function') {
      (this.strategy as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyOutboundCallNumberResponseBodyOutboundCallNumber extends $dara.Model {
  /**
   * @example
   * 10088
   */
  number?: string;
  /**
   * @example
   * fa0e21e9-caab-4629-9121-1e341243d599
   */
  outboundCallNumberId?: string;
  /**
   * @example
   * 10
   */
  rateLimitCount?: string;
  /**
   * @example
   * 100
   */
  rateLimitPeriod?: string;
  static names(): { [key: string]: string } {
    return {
      number: 'Number',
      outboundCallNumberId: 'OutboundCallNumberId',
      rateLimitCount: 'RateLimitCount',
      rateLimitPeriod: 'RateLimitPeriod',
    };
  }

  static types(): { [key: string]: any } {
    return {
      number: 'string',
      outboundCallNumberId: 'string',
      rateLimitCount: 'string',
      rateLimitPeriod: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyScriptResponseBodyScript extends $dara.Model {
  /**
   * @example
   * DRAFTED
   */
  debugStatus?: string;
  industry?: string;
  /**
   * @example
   * true
   */
  isDebugDrafted?: boolean;
  /**
   * @example
   * true
   */
  isDrafted?: boolean;
  scene?: string;
  scriptDescription?: string;
  /**
   * @example
   * c153d0d8-ba04-41c0-8632-453944c9dd0b
   */
  scriptId?: string;
  scriptName?: string;
  /**
   * @example
   * PUBLISHED
   */
  status?: string;
  /**
   * @example
   * 1578881227000
   */
  updateTime?: number;
  static names(): { [key: string]: string } {
    return {
      debugStatus: 'DebugStatus',
      industry: 'Industry',
      isDebugDrafted: 'IsDebugDrafted',
      isDrafted: 'IsDrafted',
      scene: 'Scene',
      scriptDescription: 'ScriptDescription',
      scriptId: 'ScriptId',
      scriptName: 'ScriptName',
      status: 'Status',
      updateTime: 'UpdateTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      debugStatus: 'string',
      industry: 'string',
      isDebugDrafted: 'boolean',
      isDrafted: 'boolean',
      scene: 'string',
      scriptDescription: 'string',
      scriptId: 'string',
      scriptName: 'string',
      status: 'string',
      updateTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig extends $dara.Model {
  /**
   * @example
   * bdd49242-114c-4045-b1d1-25ccc1756c75
   */
  instanceId?: string;
  scriptContent?: string;
  /**
   * @example
   * 1d7a26e0-628b-4c3c-9918-7f2e23273f54
   */
  scriptId?: string;
  /**
   * @example
   * 4ddea690-6534-4c88-9cbd-0b5882ec64c0
   */
  scriptVoiceConfigId?: string;
  scriptWaveformRelation?: string;
  /**
   * @example
   * DIALOGUE_FLOW
   */
  source?: string;
  /**
   * @example
   * WAVEFORM
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptContent: 'ScriptContent',
      scriptId: 'ScriptId',
      scriptVoiceConfigId: 'ScriptVoiceConfigId',
      scriptWaveformRelation: 'ScriptWaveformRelation',
      source: 'Source',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptContent: 'string',
      scriptId: 'string',
      scriptVoiceConfigId: 'string',
      scriptWaveformRelation: 'string',
      source: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTTSConfigResponseBodyTTSConfig extends $dara.Model {
  /**
   * @example
   * 291cfc6a-8703-4bdd-a99d-9cba32d5288a
   */
  instanceId?: string;
  /**
   * @remarks
   * 语调
   * [-500,500]之间整数。默认值为0。
   * 
   * 大于0表示升高音高。
   * 
   * 小于0表示降低音高。
   */
  pitchRate?: string;
  /**
   * @example
   * 947e0875-b5d4-4b33-b18c-7b2cf85bcb4f
   */
  scriptId?: string;
  /**
   * @example
   * 50
   */
  speechRate?: string;
  /**
   * @example
   * 2a07b634-e15d-445f-bbcb-fc4ea2df7b87
   */
  TTSConfigId?: string;
  /**
   * @example
   * xiaoyun
   */
  voice?: string;
  /**
   * @example
   * 100
   */
  volume?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pitchRate: 'PitchRate',
      scriptId: 'ScriptId',
      speechRate: 'SpeechRate',
      TTSConfigId: 'TTSConfigId',
      voice: 'Voice',
      volume: 'Volume',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pitchRate: 'string',
      scriptId: 'string',
      speechRate: 'string',
      TTSConfigId: 'string',
      voice: 'string',
      volume: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTagGroupsResponseBodyTagGroups extends $dara.Model {
  /**
   * @example
   * 365b955d-6f4d-4ab5-a6e1-9a301307f4b1
   */
  scriptId?: string;
  tagGroup?: string;
  /**
   * @example
   * 54629be9-0746-464a-ab59-4830242cf644
   */
  tagGroupId?: string;
  /**
   * @example
   * 1
   */
  tagGroupIndex?: number;
  static names(): { [key: string]: string } {
    return {
      scriptId: 'ScriptId',
      tagGroup: 'TagGroup',
      tagGroupId: 'TagGroupId',
      tagGroupIndex: 'TagGroupIndex',
    };
  }

  static types(): { [key: string]: any } {
    return {
      scriptId: 'string',
      tagGroup: 'string',
      tagGroupId: 'string',
      tagGroupIndex: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTagGroupsResponseBodyTags extends $dara.Model {
  /**
   * @example
   * 365b955d-6f4d-4ab5-a6e1-9a301307f4b1
   */
  scriptId?: string;
  tagGroup?: string;
  /**
   * @example
   * 19b23e92-4ee3-4129-8c2e-e1968670d887
   */
  tagId?: string;
  /**
   * @example
   * 1
   */
  tagIndex?: number;
  tagName?: string;
  static names(): { [key: string]: string } {
    return {
      scriptId: 'ScriptId',
      tagGroup: 'TagGroup',
      tagId: 'TagId',
      tagIndex: 'TagIndex',
      tagName: 'TagName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      scriptId: 'string',
      tagGroup: 'string',
      tagId: 'string',
      tagIndex: 'number',
      tagName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsResponseBodyJobsListContacts extends $dara.Model {
  /**
   * @example
   * db3db762-e421-44c9-9a01-cb423470757c
   */
  contactId?: string;
  contactName?: string;
  honorific?: string;
  /**
   * @example
   * 72dcd26b-f12d-4c27-b3af-18f6aed5b160
   */
  jobId?: string;
  /**
   * @example
   * 135****8888
   */
  phoneNumber?: string;
  /**
   * @example
   * 2fa6bac3-06da-4315-82ab-72d6fd3a6f34
   */
  referenceId?: string;
  /**
   * @example
   * *
   */
  role?: string;
  /**
   * @example
   * Available
   */
  state?: string;
  static names(): { [key: string]: string } {
    return {
      contactId: 'ContactId',
      contactName: 'ContactName',
      honorific: 'Honorific',
      jobId: 'JobId',
      phoneNumber: 'PhoneNumber',
      referenceId: 'ReferenceId',
      role: 'Role',
      state: 'State',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactId: 'string',
      contactName: 'string',
      honorific: 'string',
      jobId: 'string',
      phoneNumber: 'string',
      referenceId: 'string',
      role: 'string',
      state: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsResponseBodyJobsListExtras extends $dara.Model {
  /**
   * @example
   * djrq
   */
  key?: string;
  /**
   * @example
   * 2019-08-21 09:49:59.0
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsResponseBodyJobsListSummary extends $dara.Model {
  /**
   * @example
   * {}
   */
  category?: string;
  /**
   * @example
   * 5
   */
  content?: string;
  /**
   * @example
   * 098b9b09-9223-4a8b-a422-99726f0457f3
   */
  conversationDetailId?: string;
  /**
   * @example
   * ba1ba502-d044-48c0-b710-0f1f840a7c53
   */
  groupId?: string;
  /**
   * @example
   * 994b8baf-7ef8-480c-b141-b7b6db77c4df
   */
  jobId?: string;
  /**
   * @example
   * dc67d544-df06-4625-ae48-13e3c9f72d8a
   */
  summaryId?: string;
  /**
   * @example
   * score
   */
  summaryName?: string;
  /**
   * @example
   * 9fdf7a81-6781-4ab8-92fb-1d4231ef365e
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      category: 'Category',
      content: 'Content',
      conversationDetailId: 'ConversationDetailId',
      groupId: 'GroupId',
      jobId: 'JobId',
      summaryId: 'SummaryId',
      summaryName: 'SummaryName',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      category: 'string',
      content: 'string',
      conversationDetailId: 'string',
      groupId: 'string',
      jobId: 'string',
      summaryId: 'string',
      summaryName: 'string',
      taskId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsResponseBodyJobsListTagHits extends $dara.Model {
  tagGroup?: string;
  tagName?: string;
  static names(): { [key: string]: string } {
    return {
      tagGroup: 'TagGroup',
      tagName: 'TagName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tagGroup: 'string',
      tagName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsResponseBodyJobsListTasksContact extends $dara.Model {
  /**
   * @example
   * db3db762-e421-44c9-9a01-cb423470757c
   */
  contactId?: string;
  contactName?: string;
  honorific?: string;
  /**
   * @example
   * b72425bd-7871-4050-838e-033d80d754b7
   */
  jobId?: string;
  /**
   * @example
   * 135****8888
   */
  phoneNumber?: string;
  /**
   * @example
   * 2fa6bac3-06da-4315-82ab-72d6fd3a6f34
   */
  referenceId?: string;
  /**
   * @example
   * *
   */
  role?: string;
  /**
   * @example
   * Available
   */
  state?: string;
  static names(): { [key: string]: string } {
    return {
      contactId: 'ContactId',
      contactName: 'ContactName',
      honorific: 'Honorific',
      jobId: 'JobId',
      phoneNumber: 'PhoneNumber',
      referenceId: 'ReferenceId',
      role: 'Role',
      state: 'State',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactId: 'string',
      contactName: 'string',
      honorific: 'string',
      jobId: 'string',
      phoneNumber: 'string',
      referenceId: 'string',
      role: 'string',
      state: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsResponseBodyJobsListTasks extends $dara.Model {
  /**
   * @example
   * 1579068424883
   */
  actualTime?: number;
  /**
   * @example
   * 1
   */
  brief?: string;
  /**
   * @example
   * 1528189846043
   */
  callId?: string;
  /**
   * @example
   * 135****8888
   */
  calledNumber?: string;
  /**
   * @example
   * 0571****3106
   */
  callingNumber?: string;
  /**
   * @example
   * 1234
   */
  chatbotId?: string;
  contact?: QueryJobsResponseBodyJobsListTasksContact;
  /**
   * @example
   * 120
   */
  duration?: number;
  /**
   * @example
   * b72425bd-7871-4050-838e-033d80d754b7
   */
  jobId?: string;
  /**
   * @example
   * 1579068424883
   */
  planedTime?: number;
  /**
   * @example
   * ade80092-03d9-4f4d-ad4f-ab8a247d3150
   */
  scenarioId?: string;
  /**
   * @example
   * Succeeded
   */
  status?: string;
  /**
   * @example
   * ff44709e-39a6-43ba-959b-20fcabe3e496
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      actualTime: 'ActualTime',
      brief: 'Brief',
      callId: 'CallId',
      calledNumber: 'CalledNumber',
      callingNumber: 'CallingNumber',
      chatbotId: 'ChatbotId',
      contact: 'Contact',
      duration: 'Duration',
      jobId: 'JobId',
      planedTime: 'PlanedTime',
      scenarioId: 'ScenarioId',
      status: 'Status',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualTime: 'number',
      brief: 'string',
      callId: 'string',
      calledNumber: 'string',
      callingNumber: 'string',
      chatbotId: 'string',
      contact: QueryJobsResponseBodyJobsListTasksContact,
      duration: 'number',
      jobId: 'string',
      planedTime: 'number',
      scenarioId: 'string',
      status: 'string',
      taskId: 'string',
    };
  }

  validate() {
    if(this.contact && typeof (this.contact as any).validate === 'function') {
      (this.contact as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsResponseBodyJobsList extends $dara.Model {
  callingNumbers?: string[];
  contacts?: QueryJobsResponseBodyJobsListContacts[];
  extras?: QueryJobsResponseBodyJobsListExtras[];
  /**
   * @example
   * NoAnswer
   */
  failureReason?: string;
  /**
   * @example
   * fce6c599-8ede-40e3-9f78-0928eda7b4e8
   */
  jobGroupId?: string;
  /**
   * @example
   * fce6c599-8ede-40e3-9f78-0928eda7b4e8
   */
  jobId?: string;
  /**
   * @example
   * 1
   */
  priority?: number;
  /**
   * @example
   * d5971d98-7312-4f0e-a918-a17d67133e28
   */
  referenceId?: string;
  /**
   * @example
   * ade80092-03d9-4f4d-ad4f-ab8a247d3150
   */
  scenarioId?: string;
  /**
   * @example
   * Succeeded
   */
  status?: string;
  /**
   * @example
   * c8a2b7f2-ad1a-4865-b872-d0080d9802d9
   */
  strategyId?: string;
  summary?: QueryJobsResponseBodyJobsListSummary[];
  tagHits?: QueryJobsResponseBodyJobsListTagHits[];
  tasks?: QueryJobsResponseBodyJobsListTasks[];
  static names(): { [key: string]: string } {
    return {
      callingNumbers: 'CallingNumbers',
      contacts: 'Contacts',
      extras: 'Extras',
      failureReason: 'FailureReason',
      jobGroupId: 'JobGroupId',
      jobId: 'JobId',
      priority: 'Priority',
      referenceId: 'ReferenceId',
      scenarioId: 'ScenarioId',
      status: 'Status',
      strategyId: 'StrategyId',
      summary: 'Summary',
      tagHits: 'TagHits',
      tasks: 'Tasks',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumbers: { 'type': 'array', 'itemType': 'string' },
      contacts: { 'type': 'array', 'itemType': QueryJobsResponseBodyJobsListContacts },
      extras: { 'type': 'array', 'itemType': QueryJobsResponseBodyJobsListExtras },
      failureReason: 'string',
      jobGroupId: 'string',
      jobId: 'string',
      priority: 'number',
      referenceId: 'string',
      scenarioId: 'string',
      status: 'string',
      strategyId: 'string',
      summary: { 'type': 'array', 'itemType': QueryJobsResponseBodyJobsListSummary },
      tagHits: { 'type': 'array', 'itemType': QueryJobsResponseBodyJobsListTagHits },
      tasks: { 'type': 'array', 'itemType': QueryJobsResponseBodyJobsListTasks },
    };
  }

  validate() {
    if(Array.isArray(this.callingNumbers)) {
      $dara.Model.validateArray(this.callingNumbers);
    }
    if(Array.isArray(this.contacts)) {
      $dara.Model.validateArray(this.contacts);
    }
    if(Array.isArray(this.extras)) {
      $dara.Model.validateArray(this.extras);
    }
    if(Array.isArray(this.summary)) {
      $dara.Model.validateArray(this.summary);
    }
    if(Array.isArray(this.tagHits)) {
      $dara.Model.validateArray(this.tagHits);
    }
    if(Array.isArray(this.tasks)) {
      $dara.Model.validateArray(this.tasks);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsResponseBodyJobs extends $dara.Model {
  list?: QueryJobsResponseBodyJobsList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': QueryJobsResponseBodyJobsList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsWithResultResponseBodyJobsListLatestTaskContact extends $dara.Model {
  honorific?: string;
  /**
   * @example
   * 63860deb-6218-45df-b1e0-76f2b166e790
   */
  id?: string;
  /**
   * @example
   * cc231a1d-3c05-4739-8926-193ecf4097ba
   */
  jobUuid?: string;
  name?: string;
  /**
   * @example
   * 1882020****
   */
  phoneNumber?: string;
  /**
   * @example
   * 134123****
   */
  preferredPhoneNumber?: string;
  /**
   * @example
   * C01
   */
  referenceId?: string;
  role?: string;
  /**
   * @example
   * 151
   */
  round?: number;
  /**
   * @example
   * Available
   */
  state?: string;
  static names(): { [key: string]: string } {
    return {
      honorific: 'Honorific',
      id: 'Id',
      jobUuid: 'JobUuid',
      name: 'Name',
      phoneNumber: 'PhoneNumber',
      preferredPhoneNumber: 'PreferredPhoneNumber',
      referenceId: 'ReferenceId',
      role: 'Role',
      round: 'Round',
      state: 'State',
    };
  }

  static types(): { [key: string]: any } {
    return {
      honorific: 'string',
      id: 'string',
      jobUuid: 'string',
      name: 'string',
      phoneNumber: 'string',
      preferredPhoneNumber: 'string',
      referenceId: 'string',
      role: 'string',
      round: 'number',
      state: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes extends $dara.Model {
  /**
   * @example
   * 0
   */
  code?: string;
  hint?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      hint: 'Hint',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      hint: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsWithResultResponseBodyJobsListLatestTaskExtras extends $dara.Model {
  /**
   * @remarks
   * Key
   */
  key?: string;
  /**
   * @remarks
   * Value
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits extends $dara.Model {
  tagGroup?: string;
  tagName?: string;
  static names(): { [key: string]: string } {
    return {
      tagGroup: 'TagGroup',
      tagName: 'TagName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tagGroup: 'string',
      tagName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsWithResultResponseBodyJobsListLatestTask extends $dara.Model {
  /**
   * @example
   * 40000
   */
  callDuration?: number;
  /**
   * @example
   * 40
   */
  callDurationDisplay?: string;
  /**
   * @example
   * 1615363297000
   */
  callTime?: number;
  contact?: QueryJobsWithResultResponseBodyJobsListLatestTaskContact;
  dialExceptionCodes?: QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes[];
  extras?: QueryJobsWithResultResponseBodyJobsListLatestTaskExtras[];
  /**
   * @example
   * true
   */
  hasAnswered?: boolean;
  /**
   * @example
   * false
   */
  hasHangUpByRejection?: boolean;
  /**
   * @example
   * true
   */
  hasLastPlaybackCompleted?: boolean;
  /**
   * @example
   * true
   */
  hasReachedEndOfFlow?: boolean;
  /**
   * @example
   * Succeeded
   */
  status?: string;
  statusName?: string;
  tagHits?: QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits[];
  /**
   * @example
   * FINISHED
   */
  taskEndReason?: string;
  static names(): { [key: string]: string } {
    return {
      callDuration: 'CallDuration',
      callDurationDisplay: 'CallDurationDisplay',
      callTime: 'CallTime',
      contact: 'Contact',
      dialExceptionCodes: 'DialExceptionCodes',
      extras: 'Extras',
      hasAnswered: 'HasAnswered',
      hasHangUpByRejection: 'HasHangUpByRejection',
      hasLastPlaybackCompleted: 'HasLastPlaybackCompleted',
      hasReachedEndOfFlow: 'HasReachedEndOfFlow',
      status: 'Status',
      statusName: 'StatusName',
      tagHits: 'TagHits',
      taskEndReason: 'TaskEndReason',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callDuration: 'number',
      callDurationDisplay: 'string',
      callTime: 'number',
      contact: QueryJobsWithResultResponseBodyJobsListLatestTaskContact,
      dialExceptionCodes: { 'type': 'array', 'itemType': QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes },
      extras: { 'type': 'array', 'itemType': QueryJobsWithResultResponseBodyJobsListLatestTaskExtras },
      hasAnswered: 'boolean',
      hasHangUpByRejection: 'boolean',
      hasLastPlaybackCompleted: 'boolean',
      hasReachedEndOfFlow: 'boolean',
      status: 'string',
      statusName: 'string',
      tagHits: { 'type': 'array', 'itemType': QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits },
      taskEndReason: 'string',
    };
  }

  validate() {
    if(this.contact && typeof (this.contact as any).validate === 'function') {
      (this.contact as any).validate();
    }
    if(Array.isArray(this.dialExceptionCodes)) {
      $dara.Model.validateArray(this.dialExceptionCodes);
    }
    if(Array.isArray(this.extras)) {
      $dara.Model.validateArray(this.extras);
    }
    if(Array.isArray(this.tagHits)) {
      $dara.Model.validateArray(this.tagHits);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsWithResultResponseBodyJobsList extends $dara.Model {
  /**
   * @example
   * cc231a1d-3c05-4739-8926-193ecf4097ba
   */
  id?: string;
  jobFailureReason?: string;
  latestTask?: QueryJobsWithResultResponseBodyJobsListLatestTask;
  /**
   * @example
   * Succeeded
   */
  status?: string;
  statusName?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'Id',
      jobFailureReason: 'JobFailureReason',
      latestTask: 'LatestTask',
      status: 'Status',
      statusName: 'StatusName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      jobFailureReason: 'string',
      latestTask: QueryJobsWithResultResponseBodyJobsListLatestTask,
      status: 'string',
      statusName: 'string',
    };
  }

  validate() {
    if(this.latestTask && typeof (this.latestTask as any).validate === 'function') {
      (this.latestTask as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsWithResultResponseBodyJobs extends $dara.Model {
  list?: QueryJobsWithResultResponseBodyJobsList[];
  /**
   * @example
   * 1
   */
  pageCount?: number;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 1
   */
  rowCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageCount: 'PageCount',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      rowCount: 'RowCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': QueryJobsWithResultResponseBodyJobsList },
      pageCount: 'number',
      pageNumber: 'number',
      pageSize: 'number',
      rowCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryScriptWaveformsResponseBodyScriptWaveforms extends $dara.Model {
  fileId?: string;
  fileName?: string;
  scriptContent?: string;
  scriptId?: string;
  scriptWaveformId?: string;
  static names(): { [key: string]: string } {
    return {
      fileId: 'FileId',
      fileName: 'FileName',
      scriptContent: 'ScriptContent',
      scriptId: 'ScriptId',
      scriptWaveformId: 'ScriptWaveformId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileId: 'string',
      fileName: 'string',
      scriptContent: 'string',
      scriptId: 'string',
      scriptWaveformId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryScriptsByStatusResponseBodyScriptsList extends $dara.Model {
  /**
   * @example
   * 1579055782000
   */
  appliedVersion?: string;
  /**
   * @example
   * PUBLISHED
   */
  debugStatus?: string;
  /**
   * @example
   * 1579055782000
   */
  debugVersion?: string;
  industry?: string;
  /**
   * @example
   * false
   */
  isDebugDrafted?: boolean;
  /**
   * @example
   * false
   */
  isDrafted?: boolean;
  scene?: string;
  scriptDescription?: string;
  /**
   * @example
   * fa0e21e9-caab-4629-9121-1e341243d599
   */
  scriptId?: string;
  scriptName?: string;
  /**
   * @example
   * PUBLISHED
   */
  status?: string;
  /**
   * @example
   * 1579055782000
   */
  updateTime?: number;
  static names(): { [key: string]: string } {
    return {
      appliedVersion: 'AppliedVersion',
      debugStatus: 'DebugStatus',
      debugVersion: 'DebugVersion',
      industry: 'Industry',
      isDebugDrafted: 'IsDebugDrafted',
      isDrafted: 'IsDrafted',
      scene: 'Scene',
      scriptDescription: 'ScriptDescription',
      scriptId: 'ScriptId',
      scriptName: 'ScriptName',
      status: 'Status',
      updateTime: 'UpdateTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appliedVersion: 'string',
      debugStatus: 'string',
      debugVersion: 'string',
      industry: 'string',
      isDebugDrafted: 'boolean',
      isDrafted: 'boolean',
      scene: 'string',
      scriptDescription: 'string',
      scriptId: 'string',
      scriptName: 'string',
      status: 'string',
      updateTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryScriptsByStatusResponseBodyScripts extends $dara.Model {
  list?: QueryScriptsByStatusResponseBodyScriptsList[];
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 1
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'List',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': QueryScriptsByStatusResponseBodyScriptsList },
      pageNumber: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.list)) {
      $dara.Model.validateArray(this.list);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatCustomizationDataInfoList extends $dara.Model {
  /**
   * @remarks
   * id
   */
  annotationMissionChatCustomizationDataInfoId?: string;
  /**
   * @remarks
   * chat id
   * 
   * @example
   * 977a45dc-b636-4407-9e98-9f572c709ada
   */
  annotationMissionChatId?: string;
  /**
   * @example
   * 03f56192-fa8a-40dc-9558-39b357f0618f
   */
  annotationMissionId?: string;
  /**
   * @example
   * 977a45dc-b636-4407-9e98-9f572c709ada
   */
  annotationMissionSessionId?: string;
  content?: string;
  /**
   * @example
   * true
   */
  create?: boolean;
  /**
   * @example
   * 1682316909210
   */
  createTime?: number;
  customizationDataDescription?: string;
  /**
   * @remarks
   * id
   * 
   * @example
   * 977a45dc-b636-4407-9e98-9f572c709ada
   */
  customizationDataId?: string;
  customizationDataName?: string;
  customizationDataWeight?: number;
  /**
   * @example
   * true
   */
  delete?: boolean;
  /**
   * @example
   * b598a47a-7c03-45fb-af6b-343950dd9512
   */
  instanceId?: string;
  /**
   * @example
   * 1673438100000
   */
  modifiedTime?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionChatCustomizationDataInfoId: 'AnnotationMissionChatCustomizationDataInfoId',
      annotationMissionChatId: 'AnnotationMissionChatId',
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionId: 'AnnotationMissionSessionId',
      content: 'Content',
      create: 'Create',
      createTime: 'CreateTime',
      customizationDataDescription: 'CustomizationDataDescription',
      customizationDataId: 'CustomizationDataId',
      customizationDataName: 'CustomizationDataName',
      customizationDataWeight: 'CustomizationDataWeight',
      delete: 'Delete',
      instanceId: 'InstanceId',
      modifiedTime: 'ModifiedTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionChatCustomizationDataInfoId: 'string',
      annotationMissionChatId: 'string',
      annotationMissionId: 'string',
      annotationMissionSessionId: 'string',
      content: 'string',
      create: 'boolean',
      createTime: 'number',
      customizationDataDescription: 'string',
      customizationDataId: 'string',
      customizationDataName: 'string',
      customizationDataWeight: 'number',
      delete: 'boolean',
      instanceId: 'string',
      modifiedTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatIntentUserSayInfoList extends $dara.Model {
  annotationMissionChatId?: string;
  annotationMissionChatIntentUserSayInfoId?: string;
  annotationMissionId?: string;
  annotationMissionSessionId?: string;
  botId?: string;
  content?: string;
  create?: boolean;
  createTime?: number;
  delete?: boolean;
  dialogId?: number;
  instanceId?: string;
  intentId?: number;
  modifiedTime?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionChatId: 'AnnotationMissionChatId',
      annotationMissionChatIntentUserSayInfoId: 'AnnotationMissionChatIntentUserSayInfoId',
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionId: 'AnnotationMissionSessionId',
      botId: 'BotId',
      content: 'Content',
      create: 'Create',
      createTime: 'CreateTime',
      delete: 'Delete',
      dialogId: 'DialogId',
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      modifiedTime: 'ModifiedTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionChatId: 'string',
      annotationMissionChatIntentUserSayInfoId: 'string',
      annotationMissionId: 'string',
      annotationMissionSessionId: 'string',
      botId: 'string',
      content: 'string',
      create: 'boolean',
      createTime: 'number',
      delete: 'boolean',
      dialogId: 'number',
      instanceId: 'string',
      intentId: 'number',
      modifiedTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatTagInfoList extends $dara.Model {
  /**
   * @remarks
   * chat id
   * 
   * @example
   * 977a45dc-b636-4407-9e98-9f572c709ada
   */
  annotationMissionChatId?: string;
  /**
   * @remarks
   * id
   */
  annotationMissionChatTagInfoId?: string;
  /**
   * @example
   * 977a45dc-b636-4407-9e98-9f572c709ada
   */
  annotationMissionId?: string;
  /**
   * @example
   * 977a45dc-b636-4407-9e98-9f572c709ada
   */
  annotationMissionSessionId?: string;
  /**
   * @remarks
   * tag id
   * 
   * @example
   * 977a45dc-b636-4407-9e98-9f572c709ada
   */
  annotationMissionTagInfoId?: string;
  /**
   * @example
   * -
   */
  annotationMissionTagInfoName?: string;
  /**
   * @example
   * true
   */
  create?: boolean;
  /**
   * @example
   * 1679710866060
   */
  createTime?: number;
  /**
   * @example
   * false
   */
  delete?: boolean;
  /**
   * @example
   * 32be9d94-1346-4c4a-a4d0-ccd379f87013
   */
  instanceId?: string;
  /**
   * @example
   * 1679710866060
   */
  modifiedTime?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionChatId: 'AnnotationMissionChatId',
      annotationMissionChatTagInfoId: 'AnnotationMissionChatTagInfoId',
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionId: 'AnnotationMissionSessionId',
      annotationMissionTagInfoId: 'AnnotationMissionTagInfoId',
      annotationMissionTagInfoName: 'AnnotationMissionTagInfoName',
      create: 'Create',
      createTime: 'CreateTime',
      delete: 'Delete',
      instanceId: 'InstanceId',
      modifiedTime: 'ModifiedTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionChatId: 'string',
      annotationMissionChatTagInfoId: 'string',
      annotationMissionId: 'string',
      annotationMissionSessionId: 'string',
      annotationMissionTagInfoId: 'string',
      annotationMissionTagInfoName: 'string',
      create: 'boolean',
      createTime: 'number',
      delete: 'boolean',
      instanceId: 'string',
      modifiedTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatVocabularyInfoList extends $dara.Model {
  /**
   * @remarks
   * chat id
   */
  annotationMissionChatId?: string;
  /**
   * @remarks
   * id
   */
  annotationMissionChatVocabularyInfoId?: string;
  /**
   * @example
   * 977a45dc-b636-4407-9e98-9f572c709ada
   */
  annotationMissionId?: string;
  annotationMissionSessionId?: string;
  /**
   * @example
   * false
   */
  create?: boolean;
  /**
   * @example
   * 1677552860720
   */
  createTime?: number;
  /**
   * @example
   * true
   */
  delete?: boolean;
  /**
   * @example
   * 77343553-cbc2-4487-a35c-869f1e86c573
   */
  instanceId?: string;
  /**
   * @example
   * 1679283408230
   */
  modifiedTime?: number;
  vocabulary?: string;
  vocabularyDescription?: string;
  vocabularyId?: string;
  vocabularyName?: string;
  vocabularyWeight?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionChatId: 'AnnotationMissionChatId',
      annotationMissionChatVocabularyInfoId: 'AnnotationMissionChatVocabularyInfoId',
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionId: 'AnnotationMissionSessionId',
      create: 'Create',
      createTime: 'CreateTime',
      delete: 'Delete',
      instanceId: 'InstanceId',
      modifiedTime: 'ModifiedTime',
      vocabulary: 'Vocabulary',
      vocabularyDescription: 'VocabularyDescription',
      vocabularyId: 'VocabularyId',
      vocabularyName: 'VocabularyName',
      vocabularyWeight: 'VocabularyWeight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionChatId: 'string',
      annotationMissionChatVocabularyInfoId: 'string',
      annotationMissionId: 'string',
      annotationMissionSessionId: 'string',
      create: 'boolean',
      createTime: 'number',
      delete: 'boolean',
      instanceId: 'string',
      modifiedTime: 'number',
      vocabulary: 'string',
      vocabularyDescription: 'string',
      vocabularyId: 'string',
      vocabularyName: 'string',
      vocabularyWeight: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatList extends $dara.Model {
  annotationAsrResult?: string;
  annotationMissionChatCustomizationDataInfoList?: SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatCustomizationDataInfoList[];
  /**
   * @remarks
   * chat id
   */
  annotationMissionChatId?: string;
  annotationMissionChatIntentUserSayInfoList?: SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatIntentUserSayInfoList[];
  annotationMissionChatTagInfoList?: SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatTagInfoList[];
  annotationMissionChatVocabularyInfoList?: SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatVocabularyInfoList[];
  /**
   * @example
   * ddce607f-f537-4ebd-9914-cf45671defb9
   */
  annotationMissionId?: string;
  annotationMissionSessionId?: string;
  /**
   * @example
   * 1
   */
  annotationStatus?: number;
  /**
   * @example
   * {\\"Answer\\": u\\"\\u53c2\\u8003\\u6587\\u6863\\uff1ahttps://help.aliyun.com/document_detail/181325.html\\", \\"QuestionId\\": 372858, \\"Uuid\\": \\"ac14000516762684770197536d0044\\"}
   */
  answer?: string;
  asrAnnotationStatus?: number;
  /**
   * @example
   * 1679629770336
   */
  createTime?: number;
  /**
   * @example
   * 5ec263fa-c8de-46f4-b844-6fb8275bb645
   */
  instanceId?: string;
  intentAnnotationStatus?: number;
  /**
   * @example
   * 1629360780000
   */
  modifiedTime?: number;
  /**
   * @example
   * 1682493047418
   */
  occurTime?: number;
  originalAsrResult?: string;
  /**
   * @example
   * 1475140522
   */
  sequenceId?: string;
  /**
   * @example
   * 1
   */
  subStatus?: number;
  /**
   * @example
   * 1
   */
  tagAnnotationStatus?: number;
  /**
   * @example
   * 1
   */
  translationError?: number;
  static names(): { [key: string]: string } {
    return {
      annotationAsrResult: 'AnnotationAsrResult',
      annotationMissionChatCustomizationDataInfoList: 'AnnotationMissionChatCustomizationDataInfoList',
      annotationMissionChatId: 'AnnotationMissionChatId',
      annotationMissionChatIntentUserSayInfoList: 'AnnotationMissionChatIntentUserSayInfoList',
      annotationMissionChatTagInfoList: 'AnnotationMissionChatTagInfoList',
      annotationMissionChatVocabularyInfoList: 'AnnotationMissionChatVocabularyInfoList',
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionId: 'AnnotationMissionSessionId',
      annotationStatus: 'AnnotationStatus',
      answer: 'Answer',
      asrAnnotationStatus: 'AsrAnnotationStatus',
      createTime: 'CreateTime',
      instanceId: 'InstanceId',
      intentAnnotationStatus: 'IntentAnnotationStatus',
      modifiedTime: 'ModifiedTime',
      occurTime: 'OccurTime',
      originalAsrResult: 'OriginalAsrResult',
      sequenceId: 'SequenceId',
      subStatus: 'SubStatus',
      tagAnnotationStatus: 'TagAnnotationStatus',
      translationError: 'TranslationError',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationAsrResult: 'string',
      annotationMissionChatCustomizationDataInfoList: { 'type': 'array', 'itemType': SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatCustomizationDataInfoList },
      annotationMissionChatId: 'string',
      annotationMissionChatIntentUserSayInfoList: { 'type': 'array', 'itemType': SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatIntentUserSayInfoList },
      annotationMissionChatTagInfoList: { 'type': 'array', 'itemType': SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatTagInfoList },
      annotationMissionChatVocabularyInfoList: { 'type': 'array', 'itemType': SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatVocabularyInfoList },
      annotationMissionId: 'string',
      annotationMissionSessionId: 'string',
      annotationStatus: 'number',
      answer: 'string',
      asrAnnotationStatus: 'number',
      createTime: 'number',
      instanceId: 'string',
      intentAnnotationStatus: 'number',
      modifiedTime: 'number',
      occurTime: 'number',
      originalAsrResult: 'string',
      sequenceId: 'string',
      subStatus: 'number',
      tagAnnotationStatus: 'number',
      translationError: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.annotationMissionChatCustomizationDataInfoList)) {
      $dara.Model.validateArray(this.annotationMissionChatCustomizationDataInfoList);
    }
    if(Array.isArray(this.annotationMissionChatIntentUserSayInfoList)) {
      $dara.Model.validateArray(this.annotationMissionChatIntentUserSayInfoList);
    }
    if(Array.isArray(this.annotationMissionChatTagInfoList)) {
      $dara.Model.validateArray(this.annotationMissionChatTagInfoList);
    }
    if(Array.isArray(this.annotationMissionChatVocabularyInfoList)) {
      $dara.Model.validateArray(this.annotationMissionChatVocabularyInfoList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionSessionListRequestAnnotationMissionSessionList extends $dara.Model {
  annotationMissionChatList?: SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatList[];
  /**
   * @example
   * c88cc004-de69-4eee-aa5f-2efed533a54e
   */
  annotationMissionId?: string;
  annotationMissionSessionId?: string;
  /**
   * @example
   * 1
   */
  annotationStatus?: number;
  /**
   * @example
   * 2023-04-14T02:01:23Z
   */
  createTime?: number;
  /**
   * @example
   * 77343553-cbc2-4487-a35c-869f1e86c573
   */
  instanceId?: string;
  /**
   * @example
   * 29e669bd-a9d1-4529-98cd-c2b0549bcf53
   */
  jobGroupId?: string;
  /**
   * @example
   * 593aaf5e-1275-4add-9990-22696385dc6e
   */
  jobId?: string;
  /**
   * @example
   * 1683858248778
   */
  modifiedTime?: number;
  /**
   * @example
   * e4f32632-2e56-4399-9fec-47bdbaeefdf6
   */
  scriptId?: string;
  /**
   * @example
   * e6271044-b4b2-4ad8-ade4-c720be023538
   */
  sessionId?: string;
  static names(): { [key: string]: string } {
    return {
      annotationMissionChatList: 'AnnotationMissionChatList',
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionId: 'AnnotationMissionSessionId',
      annotationStatus: 'AnnotationStatus',
      createTime: 'CreateTime',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      jobId: 'JobId',
      modifiedTime: 'ModifiedTime',
      scriptId: 'ScriptId',
      sessionId: 'SessionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionChatList: { 'type': 'array', 'itemType': SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatList },
      annotationMissionId: 'string',
      annotationMissionSessionId: 'string',
      annotationStatus: 'number',
      createTime: 'number',
      instanceId: 'string',
      jobGroupId: 'string',
      jobId: 'string',
      modifiedTime: 'number',
      scriptId: 'string',
      sessionId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.annotationMissionChatList)) {
      $dara.Model.validateArray(this.annotationMissionChatList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionSessionListResponseBodyDataSaveAnnotationMissionSessionListRequest extends $dara.Model {
  annotationMissionSessionListJsonString?: string;
  static names(): { [key: string]: string } {
    return {
      annotationMissionSessionListJsonString: 'AnnotationMissionSessionListJsonString',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionSessionListJsonString: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionSessionListResponseBodyData extends $dara.Model {
  message?: string;
  messageList?: string[];
  saveAnnotationMissionSessionListRequest?: SaveAnnotationMissionSessionListResponseBodyDataSaveAnnotationMissionSessionListRequest;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      message: 'Message',
      messageList: 'MessageList',
      saveAnnotationMissionSessionListRequest: 'SaveAnnotationMissionSessionListRequest',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      message: 'string',
      messageList: { 'type': 'array', 'itemType': 'string' },
      saveAnnotationMissionSessionListRequest: SaveAnnotationMissionSessionListResponseBodyDataSaveAnnotationMissionSessionListRequest,
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.messageList)) {
      $dara.Model.validateArray(this.messageList);
    }
    if(this.saveAnnotationMissionSessionListRequest && typeof (this.saveAnnotationMissionSessionListRequest as any).validate === 'function') {
      (this.saveAnnotationMissionSessionListRequest as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionTagInfoListRequestAnnotationMissionTagInfoList extends $dara.Model {
  annotationMissionTagInfoDescription?: string;
  /**
   * @remarks
   * tag id
   */
  annotationMissionTagInfoId?: string;
  annotationMissionTagInfoName?: string;
  /**
   * @example
   * true
   */
  delete?: boolean;
  /**
   * @example
   * bdbff6a5-1f68-4b41-8d37-6ff805ce165a
   */
  instanceId?: string;
  /**
   * @example
   * bdbff6a5-1f68-4b41-8d37-6ff805ce165a
   */
  tenantId?: string;
  static names(): { [key: string]: string } {
    return {
      annotationMissionTagInfoDescription: 'AnnotationMissionTagInfoDescription',
      annotationMissionTagInfoId: 'AnnotationMissionTagInfoId',
      annotationMissionTagInfoName: 'AnnotationMissionTagInfoName',
      delete: 'Delete',
      instanceId: 'InstanceId',
      tenantId: 'TenantId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionTagInfoDescription: 'string',
      annotationMissionTagInfoId: 'string',
      annotationMissionTagInfoName: 'string',
      delete: 'boolean',
      instanceId: 'string',
      tenantId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionTagInfoListResponseBodyData extends $dara.Model {
  execCount?: number;
  message?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      execCount: 'ExecCount',
      message: 'Message',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      execCount: 'number',
      message: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchTaskResponseBodySearchTaskInfoList extends $dara.Model {
  /**
   * @example
   * 1643436089677
   */
  actualTime?: number;
  /**
   * @example
   * 1646792941
   */
  callDuration?: number;
  /**
   * @example
   * ActualTime
   */
  callDurationDisplay?: string;
  /**
   * @example
   * 15205879599
   */
  calledNumber?: string;
  /**
   * @example
   * [{"code":"OutboundCallError.SipCodeError", "params":[{"key":"SipCode","value":"500"}]}]
   */
  dialException?: string;
  dialExceptionCodes?: string[];
  /**
   * @example
   * ["OutboundCallError.SipTrunkError"]
   */
  dialExceptionOld?: string;
  /**
   * @example
   * true
   */
  hasAnswered?: boolean;
  /**
   * @example
   * true
   */
  hasHangUpByRejection?: boolean;
  /**
   * @example
   * true
   */
  hasLastPlaybackCompleted?: boolean;
  /**
   * @example
   * true
   */
  hasReachedEndOfFlow?: boolean;
  /**
   * @example
   * 73df6283-26b2-402d-bad0-ffa489923ea1
   */
  instanceId?: string;
  /**
   * @example
   * 37db3113-ad34-4ba3-b930-468f016bbf95
   */
  jobGroupId?: string;
  jobGroupName?: string;
  /**
   * @example
   * 6203248e-e652-4ef8-a1eb-586ed7b54dc2
   */
  jobId?: string;
  /**
   * @example
   * Succeeded
   */
  jobStatus?: number;
  /**
   * @example
   * xxx
   */
  jobStatusName?: string;
  /**
   * @example
   * Scheduling
   */
  jobStatusString?: string;
  /**
   * @example
   * 10
   */
  recordingDuration?: number;
  scriptName?: string;
  /**
   * @example
   * 1646792941
   */
  taskCreateTime?: number;
  /**
   * @example
   * OutOfService
   */
  taskEndReason?: number;
  /**
   * @example
   * 479aea04-3a92-4ac3-935d-c8798c667850
   */
  taskId?: string;
  /**
   * @example
   * Success
   */
  taskStatus?: number;
  /**
   * @example
   * xxxx
   */
  taskStatusName?: string;
  /**
   * @example
   * Executing
   */
  taskStatusString?: string;
  /**
   * @example
   * 12334134
   */
  userId?: string;
  /**
   * @example
   * xxx
   */
  userName?: string;
  static names(): { [key: string]: string } {
    return {
      actualTime: 'ActualTime',
      callDuration: 'CallDuration',
      callDurationDisplay: 'CallDurationDisplay',
      calledNumber: 'CalledNumber',
      dialException: 'DialException',
      dialExceptionCodes: 'DialExceptionCodes',
      dialExceptionOld: 'DialExceptionOld',
      hasAnswered: 'HasAnswered',
      hasHangUpByRejection: 'HasHangUpByRejection',
      hasLastPlaybackCompleted: 'HasLastPlaybackCompleted',
      hasReachedEndOfFlow: 'HasReachedEndOfFlow',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      jobGroupName: 'JobGroupName',
      jobId: 'JobId',
      jobStatus: 'JobStatus',
      jobStatusName: 'JobStatusName',
      jobStatusString: 'JobStatusString',
      recordingDuration: 'RecordingDuration',
      scriptName: 'ScriptName',
      taskCreateTime: 'TaskCreateTime',
      taskEndReason: 'TaskEndReason',
      taskId: 'TaskId',
      taskStatus: 'TaskStatus',
      taskStatusName: 'TaskStatusName',
      taskStatusString: 'TaskStatusString',
      userId: 'UserId',
      userName: 'UserName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualTime: 'number',
      callDuration: 'number',
      callDurationDisplay: 'string',
      calledNumber: 'string',
      dialException: 'string',
      dialExceptionCodes: { 'type': 'array', 'itemType': 'string' },
      dialExceptionOld: 'string',
      hasAnswered: 'boolean',
      hasHangUpByRejection: 'boolean',
      hasLastPlaybackCompleted: 'boolean',
      hasReachedEndOfFlow: 'boolean',
      instanceId: 'string',
      jobGroupId: 'string',
      jobGroupName: 'string',
      jobId: 'string',
      jobStatus: 'number',
      jobStatusName: 'string',
      jobStatusString: 'string',
      recordingDuration: 'number',
      scriptName: 'string',
      taskCreateTime: 'number',
      taskEndReason: 'number',
      taskId: 'string',
      taskStatus: 'number',
      taskStatusName: 'string',
      taskStatusString: 'string',
      userId: 'string',
      userName: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.dialExceptionCodes)) {
      $dara.Model.validateArray(this.dialExceptionCodes);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartJobResponseBodyCallIds extends $dara.Model {
  /**
   * @example
   * c93cdd1c-f9b5-4758-be43-7a237a7eaa1d
   */
  key?: string;
  /**
   * @example
   * 62229628-45d8-41bd-a80f-6e4c0a39f79b
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartJobResponseBodyTaskIds extends $dara.Model {
  /**
   * @example
   * c93cdd1c-f9b5-4758-be43-7a237a7eaa1d
   */
  key?: string;
  /**
   * @example
   * 62229628-45d8-41bd-a80f-6e4c0a39f79b
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TagResourcesRequestTag extends $dara.Model {
  /**
   * @example
   * Tag.1.Key=key1
   */
  key?: string;
  /**
   * @example
   * Tag.1.Value=value1
   */
  value?: string;
  static names(): { [key: string]: string } {
    return {
      key: 'Key',
      value: 'Value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class WithdrawScriptReviewResponseBodyScript extends $dara.Model {
  /**
   * @example
   * PUBLISHED
   */
  debugStatus?: string;
  industry?: string;
  /**
   * @example
   * false
   */
  isDebugDrafted?: boolean;
  /**
   * @example
   * false
   */
  isDrafted?: boolean;
  scene?: string;
  scriptDescription?: string;
  /**
   * @example
   * e4e2a770-b97b-465a-80d8-06dca008c503
   */
  scriptId?: string;
  scriptName?: string;
  /**
   * @example
   * PUBLISHED
   */
  status?: string;
  /**
   * @example
   * 1578881227000
   */
  updateTime?: number;
  static names(): { [key: string]: string } {
    return {
      debugStatus: 'DebugStatus',
      industry: 'Industry',
      isDebugDrafted: 'IsDebugDrafted',
      isDrafted: 'IsDrafted',
      scene: 'Scene',
      scriptDescription: 'ScriptDescription',
      scriptId: 'ScriptId',
      scriptName: 'ScriptName',
      status: 'Status',
      updateTime: 'UpdateTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      debugStatus: 'string',
      industry: 'string',
      isDebugDrafted: 'boolean',
      isDrafted: 'boolean',
      scene: 'string',
      scriptDescription: 'string',
      scriptId: 'string',
      scriptName: 'string',
      status: 'string',
      updateTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyNumberDistrictInfoParsingResultRequest extends $dara.Model {
  /**
   * @example
   * ffaaa8f0-2de1-438c-ba66-5ac30d83a304
   */
  versionId?: string;
  static names(): { [key: string]: string } {
    return {
      versionId: 'VersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      versionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyNumberDistrictInfoParsingResultResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 91102861-AEB9-56C5-8F3A-A023A0E8B5F3
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyNumberDistrictInfoParsingResultResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ApplyNumberDistrictInfoParsingResultResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ApplyNumberDistrictInfoParsingResultResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AssignJobsRequest extends $dara.Model {
  callingNumber?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12f3dd08-0c55-44ce-9b64-e69d35ed3a76
   */
  instanceId?: string;
  /**
   * @example
   * false
   */
  isAsynchrony?: boolean;
  /**
   * @example
   * d004cfd2-6a81-491c-83c6-cbe186620c95
   */
  jobDataParsingTaskId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * d004cfd2-6a81-491c-83c6-cbe186620c95
   */
  jobGroupId?: string;
  jobsJson?: string[];
  /**
   * @example
   * json
   */
  rosterType?: string;
  strategyJson?: string;
  static names(): { [key: string]: string } {
    return {
      callingNumber: 'CallingNumber',
      instanceId: 'InstanceId',
      isAsynchrony: 'IsAsynchrony',
      jobDataParsingTaskId: 'JobDataParsingTaskId',
      jobGroupId: 'JobGroupId',
      jobsJson: 'JobsJson',
      rosterType: 'RosterType',
      strategyJson: 'StrategyJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumber: { 'type': 'array', 'itemType': 'string' },
      instanceId: 'string',
      isAsynchrony: 'boolean',
      jobDataParsingTaskId: 'string',
      jobGroupId: 'string',
      jobsJson: { 'type': 'array', 'itemType': 'string' },
      rosterType: 'string',
      strategyJson: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.callingNumber)) {
      $dara.Model.validateArray(this.callingNumber);
    }
    if(Array.isArray(this.jobsJson)) {
      $dara.Model.validateArray(this.jobsJson);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AssignJobsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * 390515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  jobGroupId?: string;
  jobsId?: string[];
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      jobGroupId: 'JobGroupId',
      jobsId: 'JobsId',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      jobGroupId: 'string',
      jobsId: { 'type': 'array', 'itemType': 'string' },
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.jobsId)) {
      $dara.Model.validateArray(this.jobsId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AssignJobsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: AssignJobsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: AssignJobsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelJobsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * false
   */
  all?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174952ab-9825-4cc9-a5e2-de82d7fa4cdd
   */
  instanceId?: string;
  /**
   * @example
   * 9f84892d-721a-4069-9975-668c8164d64e
   */
  jobGroupId?: string;
  /**
   * @example
   * edf45790-7200-4cbc-b157-8c0a5f400b75
   */
  jobId?: string[];
  /**
   * @example
   * 4a875676-b136-4087-88b4-de67c61fed69
   */
  jobReferenceId?: string[];
  /**
   * @example
   * 9cef0dd3-b9d6-4748-9a6f-77a8c3402bb1
   */
  scenarioId?: string;
  static names(): { [key: string]: string } {
    return {
      all: 'All',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      jobId: 'JobId',
      jobReferenceId: 'JobReferenceId',
      scenarioId: 'ScenarioId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      all: 'boolean',
      instanceId: 'string',
      jobGroupId: 'string',
      jobId: { 'type': 'array', 'itemType': 'string' },
      jobReferenceId: { 'type': 'array', 'itemType': 'string' },
      scenarioId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.jobId)) {
      $dara.Model.validateArray(this.jobId);
    }
    if(Array.isArray(this.jobReferenceId)) {
      $dara.Model.validateArray(this.jobReferenceId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelJobsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelJobsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CancelJobsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CancelJobsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChangeResourceGroupRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * rg-aeky6wvb7yzabqy
   */
  newResourceGroupId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ResourceId.1=b949ae1f-01dc-4191-ae5a-70fbe6772fd8
   */
  resourceId?: string;
  static names(): { [key: string]: string } {
    return {
      newResourceGroupId: 'NewResourceGroupId',
      resourceId: 'ResourceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      newResourceGroupId: 'string',
      resourceId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChangeResourceGroupResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ChangeResourceGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ChangeResourceGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ChangeResourceGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAgentProfileRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default-survey
   */
  agentProfileTemplateId?: string;
  /**
   * @example
   * 127.0.0.1
   */
  appIp?: string;
  description?: string;
  /**
   * @example
   * [30000474726]
   */
  faqCategoryIds?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @example
   * [{\\"type\\":\\"TransferToAgent\\",\\"instructions\\":[{\\"code\\":\\"Transfer0\\",\\"skillGroupId\\":\\"123\\",\\"skillGroupName\\":\\"123\\"}]
   */
  instructionJson?: string;
  labelsJson?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * model_001
   */
  model?: string;
  /**
   * @example
   * ""
   */
  modelConfig?: string;
  prompt?: string;
  promptJson?: string;
  scenario?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * aa279896-64a6-4182-864c-4f2b04ec8d17
   */
  scriptId?: string;
  variablesJson?: string;
  static names(): { [key: string]: string } {
    return {
      agentProfileTemplateId: 'AgentProfileTemplateId',
      appIp: 'AppIp',
      description: 'Description',
      faqCategoryIds: 'FaqCategoryIds',
      instanceId: 'InstanceId',
      instructionJson: 'InstructionJson',
      labelsJson: 'LabelsJson',
      model: 'Model',
      modelConfig: 'ModelConfig',
      prompt: 'Prompt',
      promptJson: 'PromptJson',
      scenario: 'Scenario',
      scriptId: 'ScriptId',
      variablesJson: 'VariablesJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentProfileTemplateId: 'string',
      appIp: 'string',
      description: 'string',
      faqCategoryIds: 'string',
      instanceId: 'string',
      instructionJson: 'string',
      labelsJson: 'string',
      model: 'string',
      modelConfig: 'string',
      prompt: 'string',
      promptJson: 'string',
      scenario: 'string',
      scriptId: 'string',
      variablesJson: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAgentProfileResponseBody extends $dara.Model {
  /**
   * @example
   * Ok
   */
  code?: string;
  data?: CreateAgentProfileResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: CreateAgentProfileResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAgentProfileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateAgentProfileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateAgentProfileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAnnotationMissionRequest extends $dara.Model {
  /**
   * @example
   * 1168702
   */
  agentId?: string;
  /**
   * @example
   * 9137ab9c27044921860030adf8590ec4_p_outbound_public
   */
  agentKey?: string;
  /**
   * @example
   * 1
   */
  annotationMissionDataSourceType?: number;
  annotationMissionDebugDataSourceList?: number[];
  /**
   * @example
   * [1]
   */
  annotationMissionDebugDataSourceListJsonString?: string;
  annotationMissionName?: string;
  /**
   * @example
   * chatbot-cn-fqEnFZBYnb
   */
  chatbotId?: string;
  /**
   * @example
   * 1682956800000
   */
  conversationTimeEndFilter?: number;
  /**
   * @example
   * 1683302400000
   */
  conversationTimeStartFilter?: number;
  /**
   * @example
   * true
   */
  excludeOtherSession?: boolean;
  /**
   * @example
   * True
   */
  finished?: boolean;
  /**
   * @example
   * bf3b51a5-e88a-4636-98b0-1a34725a085b
   */
  instanceId?: string;
  /**
   * @example
   * 1
   */
  samplingCount?: number;
  /**
   * @example
   * 1
   */
  samplingRate?: number;
  /**
   * @example
   * 1
   */
  samplingType?: number;
  /**
   * @example
   * 6236f21e-2e04-4dad-a47b-ae77e6a48325
   */
  scriptId?: string;
  sessionEndReasonFilterList?: number[];
  /**
   * @example
   * [1]
   */
  sessionEndReasonFilterListJsonString?: string;
  static names(): { [key: string]: string } {
    return {
      agentId: 'AgentId',
      agentKey: 'AgentKey',
      annotationMissionDataSourceType: 'AnnotationMissionDataSourceType',
      annotationMissionDebugDataSourceList: 'AnnotationMissionDebugDataSourceList',
      annotationMissionDebugDataSourceListJsonString: 'AnnotationMissionDebugDataSourceListJsonString',
      annotationMissionName: 'AnnotationMissionName',
      chatbotId: 'ChatbotId',
      conversationTimeEndFilter: 'ConversationTimeEndFilter',
      conversationTimeStartFilter: 'ConversationTimeStartFilter',
      excludeOtherSession: 'ExcludeOtherSession',
      finished: 'Finished',
      instanceId: 'InstanceId',
      samplingCount: 'SamplingCount',
      samplingRate: 'SamplingRate',
      samplingType: 'SamplingType',
      scriptId: 'ScriptId',
      sessionEndReasonFilterList: 'SessionEndReasonFilterList',
      sessionEndReasonFilterListJsonString: 'SessionEndReasonFilterListJsonString',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentId: 'string',
      agentKey: 'string',
      annotationMissionDataSourceType: 'number',
      annotationMissionDebugDataSourceList: { 'type': 'array', 'itemType': 'number' },
      annotationMissionDebugDataSourceListJsonString: 'string',
      annotationMissionName: 'string',
      chatbotId: 'string',
      conversationTimeEndFilter: 'number',
      conversationTimeStartFilter: 'number',
      excludeOtherSession: 'boolean',
      finished: 'boolean',
      instanceId: 'string',
      samplingCount: 'number',
      samplingRate: 'number',
      samplingType: 'number',
      scriptId: 'string',
      sessionEndReasonFilterList: { 'type': 'array', 'itemType': 'number' },
      sessionEndReasonFilterListJsonString: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.annotationMissionDebugDataSourceList)) {
      $dara.Model.validateArray(this.annotationMissionDebugDataSourceList);
    }
    if(Array.isArray(this.sessionEndReasonFilterList)) {
      $dara.Model.validateArray(this.sessionEndReasonFilterList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAnnotationMissionShrinkRequest extends $dara.Model {
  /**
   * @example
   * 1168702
   */
  agentId?: string;
  /**
   * @example
   * 9137ab9c27044921860030adf8590ec4_p_outbound_public
   */
  agentKey?: string;
  /**
   * @example
   * 1
   */
  annotationMissionDataSourceType?: number;
  annotationMissionDebugDataSourceListShrink?: string;
  /**
   * @example
   * [1]
   */
  annotationMissionDebugDataSourceListJsonString?: string;
  annotationMissionName?: string;
  /**
   * @example
   * chatbot-cn-fqEnFZBYnb
   */
  chatbotId?: string;
  /**
   * @example
   * 1682956800000
   */
  conversationTimeEndFilter?: number;
  /**
   * @example
   * 1683302400000
   */
  conversationTimeStartFilter?: number;
  /**
   * @example
   * true
   */
  excludeOtherSession?: boolean;
  /**
   * @example
   * True
   */
  finished?: boolean;
  /**
   * @example
   * bf3b51a5-e88a-4636-98b0-1a34725a085b
   */
  instanceId?: string;
  /**
   * @example
   * 1
   */
  samplingCount?: number;
  /**
   * @example
   * 1
   */
  samplingRate?: number;
  /**
   * @example
   * 1
   */
  samplingType?: number;
  /**
   * @example
   * 6236f21e-2e04-4dad-a47b-ae77e6a48325
   */
  scriptId?: string;
  sessionEndReasonFilterList?: number[];
  /**
   * @example
   * [1]
   */
  sessionEndReasonFilterListJsonString?: string;
  static names(): { [key: string]: string } {
    return {
      agentId: 'AgentId',
      agentKey: 'AgentKey',
      annotationMissionDataSourceType: 'AnnotationMissionDataSourceType',
      annotationMissionDebugDataSourceListShrink: 'AnnotationMissionDebugDataSourceList',
      annotationMissionDebugDataSourceListJsonString: 'AnnotationMissionDebugDataSourceListJsonString',
      annotationMissionName: 'AnnotationMissionName',
      chatbotId: 'ChatbotId',
      conversationTimeEndFilter: 'ConversationTimeEndFilter',
      conversationTimeStartFilter: 'ConversationTimeStartFilter',
      excludeOtherSession: 'ExcludeOtherSession',
      finished: 'Finished',
      instanceId: 'InstanceId',
      samplingCount: 'SamplingCount',
      samplingRate: 'SamplingRate',
      samplingType: 'SamplingType',
      scriptId: 'ScriptId',
      sessionEndReasonFilterList: 'SessionEndReasonFilterList',
      sessionEndReasonFilterListJsonString: 'SessionEndReasonFilterListJsonString',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentId: 'string',
      agentKey: 'string',
      annotationMissionDataSourceType: 'number',
      annotationMissionDebugDataSourceListShrink: 'string',
      annotationMissionDebugDataSourceListJsonString: 'string',
      annotationMissionName: 'string',
      chatbotId: 'string',
      conversationTimeEndFilter: 'number',
      conversationTimeStartFilter: 'number',
      excludeOtherSession: 'boolean',
      finished: 'boolean',
      instanceId: 'string',
      samplingCount: 'number',
      samplingRate: 'number',
      samplingType: 'number',
      scriptId: 'string',
      sessionEndReasonFilterList: { 'type': 'array', 'itemType': 'number' },
      sessionEndReasonFilterListJsonString: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.sessionEndReasonFilterList)) {
      $dara.Model.validateArray(this.sessionEndReasonFilterList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAnnotationMissionResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: CreateAnnotationMissionResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * True
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: CreateAnnotationMissionResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAnnotationMissionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateAnnotationMissionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateAnnotationMissionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBatchJobsRequest extends $dara.Model {
  batchJobDescription?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  batchJobName?: string;
  /**
   * @example
   * ["95187"]
   */
  callingNumber?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174952ab-9825-4cc9-a5e2-de82d7fa4cdd
   */
  instanceId?: string;
  /**
   * @example
   * 52e80b02-0126-4556-a1e6-ef5b3747ed53/a9a3ddc7-d7d7-48cd-82b5-b31bb5510e71_2a66f8ad-dfbb-4980-9b84-439171295a11.xlsx
   */
  jobFilePath?: string;
  /**
   * @example
   * c6a668d1-3145-4048-9101-cb3678bb8884
   */
  scenarioId?: string;
  /**
   * @example
   * b9ff4e88-65f9-4eb3-987c-11ba51f3f24d
   */
  scriptId?: string;
  strategyJson?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * false
   */
  submitted?: boolean;
  static names(): { [key: string]: string } {
    return {
      batchJobDescription: 'BatchJobDescription',
      batchJobName: 'BatchJobName',
      callingNumber: 'CallingNumber',
      instanceId: 'InstanceId',
      jobFilePath: 'JobFilePath',
      scenarioId: 'ScenarioId',
      scriptId: 'ScriptId',
      strategyJson: 'StrategyJson',
      submitted: 'Submitted',
    };
  }

  static types(): { [key: string]: any } {
    return {
      batchJobDescription: 'string',
      batchJobName: 'string',
      callingNumber: { 'type': 'array', 'itemType': 'string' },
      instanceId: 'string',
      jobFilePath: 'string',
      scenarioId: 'string',
      scriptId: 'string',
      strategyJson: 'string',
      submitted: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.callingNumber)) {
      $dara.Model.validateArray(this.callingNumber);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBatchJobsResponseBody extends $dara.Model {
  batchJob?: CreateBatchJobsResponseBodyBatchJob;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      batchJob: 'BatchJob',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      batchJob: CreateBatchJobsResponseBodyBatchJob,
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.batchJob && typeof (this.batchJob as any).validate === 'function') {
      (this.batchJob as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBatchJobsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateBatchJobsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateBatchJobsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBatchRepeatJobRequest extends $dara.Model {
  /**
   * @example
   * []
   */
  callingNumber?: string[];
  description?: string;
  /**
   * @example
   * Succeeded,NoInteraction,Failed,Cancelled
   */
  filterStatus?: string;
  flashSmsExtras?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2bfa5ae4-7185-4227-a3b8-328f26f11be1
   */
  instanceId?: string;
  /**
   * @example
   * 2
   */
  minConcurrency?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 24
   */
  name?: string;
  /**
   * @example
   * 10
   */
  priority?: string;
  recallCallingNumber?: string[];
  /**
   * @example
   * {\\"emptyNumberIgnore\\":false,\\"inArrearsIgnore\\":false,\\"outOfServiceIgnore\\":false}
   */
  recallStrategyJson?: string;
  /**
   * @example
   * 25
   */
  ringingDuration?: number;
  /**
   * @example
   * 0fe7f71c-8771-42ef-9bb1-19aa16ae7120
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c4f8a3d3-2e94-4bd4-aef8-e35f663d4847
   */
  sourceGroupId?: string;
  /**
   * @example
   * {\\"maxAttemptsPerDay\\":1,\\"minAttemptInterval\\":1,\\"routingStrategy\\":\\"LocalFirst\\"}
   */
  strategyJson?: string;
  static names(): { [key: string]: string } {
    return {
      callingNumber: 'CallingNumber',
      description: 'Description',
      filterStatus: 'FilterStatus',
      flashSmsExtras: 'FlashSmsExtras',
      instanceId: 'InstanceId',
      minConcurrency: 'MinConcurrency',
      name: 'Name',
      priority: 'Priority',
      recallCallingNumber: 'RecallCallingNumber',
      recallStrategyJson: 'RecallStrategyJson',
      ringingDuration: 'RingingDuration',
      scriptId: 'ScriptId',
      sourceGroupId: 'SourceGroupId',
      strategyJson: 'StrategyJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumber: { 'type': 'array', 'itemType': 'string' },
      description: 'string',
      filterStatus: 'string',
      flashSmsExtras: 'string',
      instanceId: 'string',
      minConcurrency: 'number',
      name: 'string',
      priority: 'string',
      recallCallingNumber: { 'type': 'array', 'itemType': 'string' },
      recallStrategyJson: 'string',
      ringingDuration: 'number',
      scriptId: 'string',
      sourceGroupId: 'string',
      strategyJson: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.callingNumber)) {
      $dara.Model.validateArray(this.callingNumber);
    }
    if(Array.isArray(this.recallCallingNumber)) {
      $dara.Model.validateArray(this.recallCallingNumber);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBatchRepeatJobResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * {}
   */
  jobGroup?: CreateBatchRepeatJobResponseBodyJobGroup;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      jobGroup: 'JobGroup',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      jobGroup: CreateBatchRepeatJobResponseBodyJobGroup,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.jobGroup && typeof (this.jobGroup as any).validate === 'function') {
      (this.jobGroup as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBatchRepeatJobResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateBatchRepeatJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateBatchRepeatJobResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  intentDefinition?: CreateBeebotIntentRequestIntentDefinition;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentDefinition: 'IntentDefinition',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentDefinition: CreateBeebotIntentRequestIntentDefinition,
      scriptId: 'string',
    };
  }

  validate() {
    if(this.intentDefinition && typeof (this.intentDefinition as any).validate === 'function') {
      (this.intentDefinition as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  intentDefinitionShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentDefinitionShrink: 'IntentDefinition',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentDefinitionShrink: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentResponseBody extends $dara.Model {
  /**
   * @example
   * 497CFAFF-48CC-161A-AD2C-252DED569037
   */
  beebotRequestId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      beebotRequestId: 'BeebotRequestId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      intentId: 'IntentId',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beebotRequestId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      intentId: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateBeebotIntentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateBeebotIntentResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentLgfRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  lgfDefinition?: CreateBeebotIntentLgfRequestLgfDefinition;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      lgfDefinition: 'LgfDefinition',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      lgfDefinition: CreateBeebotIntentLgfRequestLgfDefinition,
      scriptId: 'string',
    };
  }

  validate() {
    if(this.lgfDefinition && typeof (this.lgfDefinition as any).validate === 'function') {
      (this.lgfDefinition as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentLgfShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  lgfDefinitionShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      lgfDefinitionShrink: 'LgfDefinition',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      lgfDefinitionShrink: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentLgfResponseBody extends $dara.Model {
  /**
   * @example
   * 497CFAFF-48CC-161A-AD2C-252DED569037
   */
  beebotRequestId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * 5666117
   */
  lgfId?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * True
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      beebotRequestId: 'BeebotRequestId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      lgfId: 'LgfId',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beebotRequestId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      lgfId: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentLgfResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateBeebotIntentLgfResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateBeebotIntentLgfResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentUserSayRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userSayDefinition?: CreateBeebotIntentUserSayRequestUserSayDefinition;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
      userSayDefinition: 'UserSayDefinition',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
      userSayDefinition: CreateBeebotIntentUserSayRequestUserSayDefinition,
    };
  }

  validate() {
    if(this.userSayDefinition && typeof (this.userSayDefinition as any).validate === 'function') {
      (this.userSayDefinition as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentUserSayShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userSayDefinitionShrink?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
      userSayDefinitionShrink: 'UserSayDefinition',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
      userSayDefinitionShrink: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentUserSayResponseBody extends $dara.Model {
  /**
   * @example
   * 0B219FCB-EC71-1F08-BB1B-0E87C20158C8
   */
  beebotRequestId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 17448458
   */
  userSayId?: number;
  static names(): { [key: string]: string } {
    return {
      beebotRequestId: 'BeebotRequestId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      userSayId: 'UserSayId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beebotRequestId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      userSayId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBeebotIntentUserSayResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateBeebotIntentUserSayResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateBeebotIntentUserSayResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDialogueFlowRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * MainFlow
   */
  dialogueFlowType?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  dialogueName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174952ab-9825-4cc9-a5e2-de82d7fa4cdd
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * d0bf93dd-1a54-4f00-819e-c75502d38681
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      dialogueFlowType: 'DialogueFlowType',
      dialogueName: 'DialogueName',
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dialogueFlowType: 'string',
      dialogueName: 'string',
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDialogueFlowResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 390515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  dialogueFlowId?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      dialogueFlowId: 'DialogueFlowId',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dialogueFlowId: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDialogueFlowResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDialogueFlowResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDialogueFlowResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDownloadUrlRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 137da36b41304bcd999a0a7895dc6881
   */
  downloadTaskId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 6f91885fa24b4c408d8f4eb392fd8ae6
   */
  fileId?: string;
  static names(): { [key: string]: string } {
    return {
      downloadTaskId: 'DownloadTaskId',
      fileId: 'FileId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      downloadTaskId: 'string',
      fileId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDownloadUrlResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * http://www.xxx.com/xxx
   */
  fileHttpUrl?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * EC08CC41-6870-5594-939A-F758F057898F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      fileHttpUrl: 'FileHttpUrl',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      fileHttpUrl: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDownloadUrlResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateDownloadUrlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateDownloadUrlResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateGlobalQuestionRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  answers?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  globalQuestionName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * COMMON
   */
  globalQuestionType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174952ab-9825-4cc9-a5e2-de82d7fa4cdd
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  questions?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 36fea72b-d6fa-4974-ace7-19ffe3f622fb
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      answers: 'Answers',
      globalQuestionName: 'GlobalQuestionName',
      globalQuestionType: 'GlobalQuestionType',
      instanceId: 'InstanceId',
      questions: 'Questions',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      answers: 'string',
      globalQuestionName: 'string',
      globalQuestionType: 'string',
      instanceId: 'string',
      questions: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateGlobalQuestionResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * a546b616-724b-437f-bdb3-629a30c98567
   */
  globalQuestionId?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      globalQuestionId: 'GlobalQuestionId',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      globalQuestionId: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateGlobalQuestionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateGlobalQuestionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateGlobalQuestionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateInstanceRequest extends $dara.Model {
  callingNumber?: string[];
  instanceDescription?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  instanceName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 4
   */
  maxConcurrentConversation?: number;
  /**
   * @example
   * Provided
   */
  nluServiceType?: string;
  /**
   * @example
   * rg-acfmwd4qr3z773y
   */
  resourceGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      callingNumber: 'CallingNumber',
      instanceDescription: 'InstanceDescription',
      instanceName: 'InstanceName',
      maxConcurrentConversation: 'MaxConcurrentConversation',
      nluServiceType: 'NluServiceType',
      resourceGroupId: 'ResourceGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumber: { 'type': 'array', 'itemType': 'string' },
      instanceDescription: 'string',
      instanceName: 'string',
      maxConcurrentConversation: 'number',
      nluServiceType: 'string',
      resourceGroupId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.callingNumber)) {
      $dara.Model.validateArray(this.callingNumber);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateInstanceResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  instance?: CreateInstanceResponseBodyInstance;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      instance: 'Instance',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      instance: CreateInstanceResponseBodyInstance,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.instance && typeof (this.instance as any).validate === 'function') {
      (this.instance as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateInstanceBindNumberRequest extends $dara.Model {
  /**
   * @example
   * 1,2,4,5
   */
  instanceList?: string;
  /**
   * @example
   * 10088
   */
  number?: string;
  static names(): { [key: string]: string } {
    return {
      instanceList: 'InstanceList',
      number: 'Number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceList: 'string',
      number: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateInstanceBindNumberResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: CreateInstanceBindNumberResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: CreateInstanceBindNumberResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateInstanceBindNumberResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateInstanceBindNumberResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateInstanceBindNumberResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateIntentRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 361c8a53-0e29-42f3-8aa7-c7752d010399
   */
  instanceId?: string;
  intentDescription?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  intentName?: string;
  keywords?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * b06fad9a-cc74-4ab6-b3a5-8d062adebf2c
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  utterances?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentDescription: 'IntentDescription',
      intentName: 'IntentName',
      keywords: 'Keywords',
      scriptId: 'ScriptId',
      utterances: 'Utterances',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentDescription: 'string',
      intentName: 'string',
      keywords: 'string',
      scriptId: 'string',
      utterances: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateIntentResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * 390515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  intentId?: string;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      intentId: 'IntentId',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      intentId: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateIntentResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateIntentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateIntentResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobDataParsingTaskRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * b3865dc3-40fa-4afd-9fe4-dc7cda305a24
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  jobFilePath?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobFilePath: 'JobFilePath',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobFilePath: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobDataParsingTaskResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * d004cfd2-6a81-491c-83c6-cbe186620c95
   */
  jobDataParsingTaskId?: string;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      jobDataParsingTaskId: 'JobDataParsingTaskId',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      jobDataParsingTaskId: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobDataParsingTaskResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateJobDataParsingTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateJobDataParsingTaskResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobGroupRequest extends $dara.Model {
  callingNumber?: string[];
  flashSmsExtras?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174952ab-9825-4cc9-a5e2-de82d7fa4cdd
   */
  instanceId?: string;
  jobGroupDescription?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  jobGroupName?: string;
  /**
   * @example
   * 1
   */
  minConcurrency?: number;
  priority?: string;
  recallCallingNumber?: string[];
  /**
   * @example
   * {\\"emptyNumberIgnore\\":true,\\"inArrearsIgnore\\":true,\\"outOfServiceIgnore\\":true}
   */
  recallStrategyJson?: string;
  /**
   * @example
   * 25
   */
  ringingDuration?: number;
  /**
   * @example
   * c6a668d1-3145-4048-9101-cb3678bb8884
   */
  scenarioId?: string;
  /**
   * @example
   * b9ff4e88-65f9-4eb3-987c-11ba51f3f24d
   */
  scriptId?: string;
  /**
   * @example
   * {\\"maxAttemptsPerDay\\":1,\\"name\\":\\"fa16dc2e-f778-44ab-8f25-54b7901df82a\\",\\"startTime\\":1640157314127,\\"endTime\\":1640160914127,\\"minAttemptInterval\\":10}
   */
  strategyJson?: string;
  static names(): { [key: string]: string } {
    return {
      callingNumber: 'CallingNumber',
      flashSmsExtras: 'FlashSmsExtras',
      instanceId: 'InstanceId',
      jobGroupDescription: 'JobGroupDescription',
      jobGroupName: 'JobGroupName',
      minConcurrency: 'MinConcurrency',
      priority: 'Priority',
      recallCallingNumber: 'RecallCallingNumber',
      recallStrategyJson: 'RecallStrategyJson',
      ringingDuration: 'RingingDuration',
      scenarioId: 'ScenarioId',
      scriptId: 'ScriptId',
      strategyJson: 'StrategyJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumber: { 'type': 'array', 'itemType': 'string' },
      flashSmsExtras: 'string',
      instanceId: 'string',
      jobGroupDescription: 'string',
      jobGroupName: 'string',
      minConcurrency: 'number',
      priority: 'string',
      recallCallingNumber: { 'type': 'array', 'itemType': 'string' },
      recallStrategyJson: 'string',
      ringingDuration: 'number',
      scenarioId: 'string',
      scriptId: 'string',
      strategyJson: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.callingNumber)) {
      $dara.Model.validateArray(this.callingNumber);
    }
    if(Array.isArray(this.recallCallingNumber)) {
      $dara.Model.validateArray(this.recallCallingNumber);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobGroupResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  jobGroup?: CreateJobGroupResponseBodyJobGroup;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      jobGroup: 'JobGroup',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      jobGroup: CreateJobGroupResponseBodyJobGroup,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.jobGroup && typeof (this.jobGroup as any).validate === 'function') {
      (this.jobGroup as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateJobGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateJobGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobGroupExportTaskRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * a4274627-265f-4e14-b2d6-4ee7d4f8593e
   */
  instanceId?: string;
  /**
   * @example
   * baf6dfdc-eb79-4c63-ab19-c56388b1fbdd
   */
  jobGroupId?: string;
  /**
   * @example
   * []
   */
  option?: string[];
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      option: 'Option',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobGroupId: 'string',
      option: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.option)) {
      $dara.Model.validateArray(this.option);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobGroupExportTaskResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 744b27f3-437f-4a8c-a181-f668e492fd24
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      taskId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateJobGroupExportTaskResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateJobGroupExportTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateJobGroupExportTaskResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNumberDistrictInfoDownloadUrlRequest extends $dara.Model {
  /**
   * @example
   * KZpaNWMgXEfneopGBMGN9fH35b62NJjN
   */
  versionId?: string;
  static names(): { [key: string]: string } {
    return {
      versionId: 'VersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      versionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNumberDistrictInfoDownloadUrlResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * http://www.xxx.com/xxx
   */
  fileHttpUrl?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 1364f208-982d-4d0c-89aa-d56e22b47589
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      fileHttpUrl: 'FileHttpUrl',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      fileHttpUrl: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNumberDistrictInfoDownloadUrlResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateNumberDistrictInfoDownloadUrlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateNumberDistrictInfoDownloadUrlResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNumberDistrictInfoParsingTaskRequest extends $dara.Model {
  filePath?: string;
  /**
   * @example
   * 190464
   */
  fileSize?: number;
  static names(): { [key: string]: string } {
    return {
      filePath: 'FilePath',
      fileSize: 'FileSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      filePath: 'string',
      fileSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNumberDistrictInfoParsingTaskResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * The operation is not allowed. User state (DIALING) does not meet expectations (READY).
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNumberDistrictInfoParsingTaskResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateNumberDistrictInfoParsingTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateNumberDistrictInfoParsingTaskResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOutboundCallNumberRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174952ab-9825-4cc9-a5e2-de82d7fa4cdd
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 95187
   */
  number?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 20
   */
  rateLimitCount?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 120
   */
  rateLimitPeriod?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      number: 'Number',
      rateLimitCount: 'RateLimitCount',
      rateLimitPeriod: 'RateLimitPeriod',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      number: 'string',
      rateLimitCount: 'number',
      rateLimitPeriod: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOutboundCallNumberResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 390515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  outboundCallNumberId?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      outboundCallNumberId: 'OutboundCallNumberId',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      outboundCallNumberId: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOutboundCallNumberResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateOutboundCallNumberResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateOutboundCallNumberResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateScriptRequest extends $dara.Model {
  agentId?: number;
  agentKey?: string;
  agentLlm?: boolean;
  /**
   * @example
   * {\\"appKey\\":\\"kknxKIhTTUcpCzYX\\",\\"maxEndSilence\\":\\"400\\",\\"silenceTimeout\\":\\"5\\"}
   */
  asrConfig?: string;
  /**
   * @example
   * chatbot-cn-IfaUfqaUnb
   */
  chatbotId?: string;
  /**
   * @example
   * true
   */
  emotionEnable?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  industry?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c46001bc-3ead-4bfd-9a69-4b5b66a4a3f4
   */
  instanceId?: string;
  /**
   * @example
   * true
   */
  longWaitEnable?: boolean;
  /**
   * @example
   * true
   */
  miniPlaybackEnable?: boolean;
  /**
   * @example
   * true
   */
  newBargeInEnable?: boolean;
  nluAccessType?: string;
  nluEngine?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  scene?: string;
  /**
   * @example
   * []
   */
  scriptContent?: string[];
  scriptDescription?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  scriptName?: string;
  scriptNluProfileJsonString?: string;
  /**
   * @example
   * []
   */
  scriptWaveform?: string[];
  /**
   * @example
   * {\\"voice\\":\\"aixia\\",\\"volume\\":\\"50\\",\\"speechRate\\":\\"-150\\",\\"pitchRate\\":\\"0\\"}
   */
  ttsConfig?: string;
  static names(): { [key: string]: string } {
    return {
      agentId: 'AgentId',
      agentKey: 'AgentKey',
      agentLlm: 'AgentLlm',
      asrConfig: 'AsrConfig',
      chatbotId: 'ChatbotId',
      emotionEnable: 'EmotionEnable',
      industry: 'Industry',
      instanceId: 'InstanceId',
      longWaitEnable: 'LongWaitEnable',
      miniPlaybackEnable: 'MiniPlaybackEnable',
      newBargeInEnable: 'NewBargeInEnable',
      nluAccessType: 'NluAccessType',
      nluEngine: 'NluEngine',
      scene: 'Scene',
      scriptContent: 'ScriptContent',
      scriptDescription: 'ScriptDescription',
      scriptName: 'ScriptName',
      scriptNluProfileJsonString: 'ScriptNluProfileJsonString',
      scriptWaveform: 'ScriptWaveform',
      ttsConfig: 'TtsConfig',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentId: 'number',
      agentKey: 'string',
      agentLlm: 'boolean',
      asrConfig: 'string',
      chatbotId: 'string',
      emotionEnable: 'boolean',
      industry: 'string',
      instanceId: 'string',
      longWaitEnable: 'boolean',
      miniPlaybackEnable: 'boolean',
      newBargeInEnable: 'boolean',
      nluAccessType: 'string',
      nluEngine: 'string',
      scene: 'string',
      scriptContent: { 'type': 'array', 'itemType': 'string' },
      scriptDescription: 'string',
      scriptName: 'string',
      scriptNluProfileJsonString: 'string',
      scriptWaveform: { 'type': 'array', 'itemType': 'string' },
      ttsConfig: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.scriptContent)) {
      $dara.Model.validateArray(this.scriptContent);
    }
    if(Array.isArray(this.scriptWaveform)) {
      $dara.Model.validateArray(this.scriptWaveform);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateScriptResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  script?: CreateScriptResponseBodyScript;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      script: 'Script',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      script: CreateScriptResponseBodyScript,
      success: 'boolean',
    };
  }

  validate() {
    if(this.script && typeof (this.script as any).validate === 'function') {
      (this.script as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateScriptResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateScriptResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateScriptResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateScriptWaveformRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  fileId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  fileName?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  scriptContent?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      fileId: 'FileId',
      fileName: 'FileName',
      instanceId: 'InstanceId',
      scriptContent: 'ScriptContent',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileId: 'string',
      fileName: 'string',
      instanceId: 'string',
      scriptContent: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateScriptWaveformResponseBody extends $dara.Model {
  code?: string;
  httpStatusCode?: number;
  message?: string;
  requestId?: string;
  scriptWaveformId?: string;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      scriptWaveformId: 'ScriptWaveformId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      scriptWaveformId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateScriptWaveformResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateScriptWaveformResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateScriptWaveformResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTagRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174952ab-9825-4cc9-a5e2-de82d7fa4cdd
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 797203ac-3874-422f-838f-d4cd63c72681
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  tagGroup?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  tagName?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
      tagGroup: 'TagGroup',
      tagName: 'TagName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
      tagGroup: 'string',
      tagName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTagResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * Success
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 390515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  tagId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      tagId: 'TagId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      tagId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTagResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateTagResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateTagResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTaskExportTaskRequest extends $dara.Model {
  /**
   * @example
   * 1646496000000
   */
  actualTimeGte?: number;
  /**
   * @example
   * 1646582400000
   */
  actualTimeLte?: number;
  /**
   * @example
   * 10
   */
  callDurationGte?: number;
  /**
   * @example
   * 20
   */
  callDurationLte?: number;
  /**
   * @example
   * 11111111111
   */
  calledNumber?: string;
  /**
   * @example
   * true
   */
  hasAnswered?: boolean;
  /**
   * @example
   * true
   */
  hasHangUpByRejection?: boolean;
  /**
   * @example
   * true
   */
  hasReachedEndOfFlow?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1dcb09c5-d5db-4397-bf65-db854463beea
   */
  instanceId?: string;
  /**
   * @example
   * cb731aee-0a5b-4c2b-924c-d9e82eb1d8d7
   */
  jobGroupId?: string;
  jobGroupNameQuery?: string;
  /**
   * @example
   * 82097dd5-54df-475f-beba-eec8f4b7a3e1
   */
  jobId?: string;
  /**
   * @example
   * Succeeded
   */
  jobStatusStringList?: string;
  /**
   * @example
   * 64ebe700-91b4-49cb-b457-0b7c0b598a86
   */
  otherId?: string;
  /**
   * @example
   * 0
   */
  pageIndex?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 10
   */
  recordingDurationGte?: number;
  /**
   * @example
   * 20
   */
  recordingDurationLte?: number;
  scriptNameQuery?: string;
  /**
   * @example
   * actualTime
   */
  sortBy?: string;
  /**
   * @example
   * desc
   */
  sortOrder?: string;
  /**
   * @example
   * 1646496000000
   */
  taskCreateTimeGte?: number;
  /**
   * @example
   * 1646582400000
   */
  taskCreateTimeLte?: number;
  /**
   * @example
   * 64ebe700-91b4-49cb-b457-0b7c0b598a86
   */
  taskId?: string;
  /**
   * @example
   * Succeeded,Failed
   */
  taskStatusStringList?: string;
  /**
   * @example
   * 82097dd5-54df-475f-beba-eec8f4b7a3e1
   */
  userIdMatch?: string;
  static names(): { [key: string]: string } {
    return {
      actualTimeGte: 'ActualTimeGte',
      actualTimeLte: 'ActualTimeLte',
      callDurationGte: 'CallDurationGte',
      callDurationLte: 'CallDurationLte',
      calledNumber: 'CalledNumber',
      hasAnswered: 'HasAnswered',
      hasHangUpByRejection: 'HasHangUpByRejection',
      hasReachedEndOfFlow: 'HasReachedEndOfFlow',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      jobGroupNameQuery: 'JobGroupNameQuery',
      jobId: 'JobId',
      jobStatusStringList: 'JobStatusStringList',
      otherId: 'OtherId',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
      recordingDurationGte: 'RecordingDurationGte',
      recordingDurationLte: 'RecordingDurationLte',
      scriptNameQuery: 'ScriptNameQuery',
      sortBy: 'SortBy',
      sortOrder: 'SortOrder',
      taskCreateTimeGte: 'TaskCreateTimeGte',
      taskCreateTimeLte: 'TaskCreateTimeLte',
      taskId: 'TaskId',
      taskStatusStringList: 'TaskStatusStringList',
      userIdMatch: 'UserIdMatch',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualTimeGte: 'number',
      actualTimeLte: 'number',
      callDurationGte: 'number',
      callDurationLte: 'number',
      calledNumber: 'string',
      hasAnswered: 'boolean',
      hasHangUpByRejection: 'boolean',
      hasReachedEndOfFlow: 'boolean',
      instanceId: 'string',
      jobGroupId: 'string',
      jobGroupNameQuery: 'string',
      jobId: 'string',
      jobStatusStringList: 'string',
      otherId: 'string',
      pageIndex: 'number',
      pageSize: 'number',
      recordingDurationGte: 'number',
      recordingDurationLte: 'number',
      scriptNameQuery: 'string',
      sortBy: 'string',
      sortOrder: 'string',
      taskCreateTimeGte: 'number',
      taskCreateTimeLte: 'number',
      taskId: 'string',
      taskStatusStringList: 'string',
      userIdMatch: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTaskExportTaskResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * []
   */
  message?: string;
  /**
   * @example
   * C377C5FF-4F94-1B23-89D0-50C560623EE4
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * a7d6dcff1b8b40f4a8b769a9c24e7852
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      taskId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateTaskExportTaskResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: CreateTaskExportTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: CreateTaskExportTaskResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAgentProfilesRequest extends $dara.Model {
  agentProfileIds?: string[];
  /**
   * @example
   * 127.0.0.1
   */
  appIp?: string;
  static names(): { [key: string]: string } {
    return {
      agentProfileIds: 'AgentProfileIds',
      appIp: 'AppIp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentProfileIds: { 'type': 'array', 'itemType': 'string' },
      appIp: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.agentProfileIds)) {
      $dara.Model.validateArray(this.agentProfileIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAgentProfilesShrinkRequest extends $dara.Model {
  agentProfileIdsShrink?: string;
  /**
   * @example
   * 127.0.0.1
   */
  appIp?: string;
  static names(): { [key: string]: string } {
    return {
      agentProfileIdsShrink: 'AgentProfileIds',
      appIp: 'AppIp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentProfileIdsShrink: 'string',
      appIp: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAgentProfilesResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * {}
   */
  data?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAgentProfilesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteAgentProfilesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteAgentProfilesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAllNumberDistrictInfoResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteAllNumberDistrictInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteAllNumberDistrictInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteAllNumberDistrictInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBeebotIntentRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentId: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBeebotIntentResponseBody extends $dara.Model {
  /**
   * @example
   * 497CFAFF-48CC-161A-AD2C-252DED569037
   */
  beebotRequestId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      beebotRequestId: 'BeebotRequestId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      intentId: 'IntentId',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beebotRequestId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      intentId: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBeebotIntentResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteBeebotIntentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteBeebotIntentResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBeebotIntentLgfRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 5666117
   */
  lgfId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      lgfId: 'LgfId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentId: 'number',
      lgfId: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBeebotIntentLgfResponseBody extends $dara.Model {
  /**
   * @example
   * 0B219FCB-EC71-1F08-BB1B-0E87C20158C8
   */
  beebotRequestId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * 5666117
   */
  lgfId?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      beebotRequestId: 'BeebotRequestId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      lgfId: 'LgfId',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beebotRequestId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      lgfId: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBeebotIntentLgfResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteBeebotIntentLgfResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteBeebotIntentLgfResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBeebotIntentUserSayRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10717802
   */
  intentId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 17448458
   */
  userSayId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      scriptId: 'ScriptId',
      userSayId: 'UserSayId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentId: 'string',
      scriptId: 'string',
      userSayId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBeebotIntentUserSayResponseBody extends $dara.Model {
  /**
   * @example
   * 0B219FCB-EC71-1F08-BB1B-0E87C20158C8
   */
  beebotRequestId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 17448458
   */
  userSayId?: number;
  static names(): { [key: string]: string } {
    return {
      beebotRequestId: 'BeebotRequestId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      userSayId: 'UserSayId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beebotRequestId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      userSayId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBeebotIntentUserSayResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteBeebotIntentUserSayResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteBeebotIntentUserSayResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteContactBlockListRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c6320d3c-fa45-4011-b3b1-acdfabe3a8c6
   */
  contactBlockListId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c6320d3c-fa45-4011-b3b1-acdfabe3a8c6
   */
  instanceId?: string;
  /**
   * @example
   * 160131
   */
  operator?: string;
  static names(): { [key: string]: string } {
    return {
      contactBlockListId: 'ContactBlockListId',
      instanceId: 'InstanceId',
      operator: 'Operator',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactBlockListId: 'string',
      instanceId: 'string',
      operator: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteContactBlockListResponseBody extends $dara.Model {
  /**
   * @example
   * 5
   */
  affectedRows?: number;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      affectedRows: 'AffectedRows',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      affectedRows: 'number',
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteContactBlockListResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteContactBlockListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteContactBlockListResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteContactWhiteListRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 111111
   */
  contactWhiteListId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @example
   * 160131
   */
  operator?: string;
  static names(): { [key: string]: string } {
    return {
      contactWhiteListId: 'ContactWhiteListId',
      instanceId: 'InstanceId',
      operator: 'Operator',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactWhiteListId: 'string',
      instanceId: 'string',
      operator: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteContactWhiteListResponseBody extends $dara.Model {
  /**
   * @example
   * 5
   */
  affectedRows?: number;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      affectedRows: 'AffectedRows',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      affectedRows: 'number',
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteContactWhiteListResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteContactWhiteListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteContactWhiteListResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDialogueFlowRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 40a1457a-d2f3-43cf-ac81-c9e14cf07d88
   */
  dialogueFlowId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 361c8a53-0e29-42f3-8aa7-c7752d010399
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * d7c28efb-47f7-4a85-a522-5038e30a0b98
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      dialogueFlowId: 'DialogueFlowId',
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dialogueFlowId: 'string',
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDialogueFlowResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDialogueFlowResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteDialogueFlowResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteDialogueFlowResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteGlobalQuestionRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 35f1361e-4377-494c-9f10-4274bda0317f
   */
  globalQuestionId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 361c8a53-0e29-42f3-8aa7-c7752d010399
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * aa279896-64a6-4182-864c-4f2b04ec8d17
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      globalQuestionId: 'GlobalQuestionId',
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      globalQuestionId: 'string',
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteGlobalQuestionResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteGlobalQuestionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteGlobalQuestionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteGlobalQuestionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteInstanceRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 361c8a53-0e29-42f3-8aa7-c7752d010399
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteInstanceResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteIntentRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 361c8a53-0e29-42f3-8aa7-c7752d010399
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c21fb0ec-fb5e-476f-a6bf-81a892739c8d
   */
  intentId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * aa279896-64a6-4182-864c-4f2b04ec8d17
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteIntentResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Succes
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteIntentResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteIntentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteIntentResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteJobGroupRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 8fa1953f-4a84-46d8-b80c-8ce9cf684fb3
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * fc1fb484-4fe8-4031-b662-5b87ea88590b
   */
  jobGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteJobGroupResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteJobGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteJobGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteJobGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteOutboundCallNumberRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 33014787-cc13-49d3-ab2f-a98aa8f15fbb
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ffa367e0-58f3-43b6-9615-c63db99c5add
   */
  outboundCallNumberId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      outboundCallNumberId: 'OutboundCallNumberId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      outboundCallNumberId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteOutboundCallNumberResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteOutboundCallNumberResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteOutboundCallNumberResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteOutboundCallNumberResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteScriptRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * b3d5ac22-9643-49c6-aa84-777f6656f9f5
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 5c589560-6b9d-4415-a3e0-049c4ff05f56
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteScriptResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteScriptResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteScriptResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteScriptResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteScriptRecordingRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1eefcb81-cd58-4143-8180-6a962d79d708
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * dcc42f0d-cfd8-4866-9bbf-002042503745
   */
  scriptId?: string;
  /**
   * @example
   * [
   *       "d17d5bfa-4972-4389-9718-f9602edabe48"
   * ]
   */
  uuidsJson?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
      uuidsJson: 'UuidsJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
      uuidsJson: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteScriptRecordingResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 56666881-887A-530A-B679-C3B6B6B142C0
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteScriptRecordingResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteScriptRecordingResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteScriptRecordingResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteScriptWaveformRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  scriptWaveformId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
      scriptWaveformId: 'ScriptWaveformId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
      scriptWaveformId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteScriptWaveformResponseBody extends $dara.Model {
  code?: string;
  httpStatusCode?: number;
  message?: string;
  requestId?: string;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteScriptWaveformResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DeleteScriptWaveformResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DeleteScriptWaveformResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBeebotIntentRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentId: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBeebotIntentResponseBody extends $dara.Model {
  /**
   * @example
   * 0B219FCB-EC71-1F08-BB1B-0E87C20158C8
   */
  beebotRequestId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  intent?: DescribeBeebotIntentResponseBodyIntent;
  /**
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      beebotRequestId: 'BeebotRequestId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      intent: 'Intent',
      intentId: 'IntentId',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beebotRequestId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      intent: DescribeBeebotIntentResponseBodyIntent,
      intentId: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.intent && typeof (this.intent as any).validate === 'function') {
      (this.intent as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeBeebotIntentResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeBeebotIntentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeBeebotIntentResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDialogueNodeStatisticsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * aeff669b-388f-4619-82af-81e177df5628
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * a3c670d1-01bf-491d-b9aa-759b1a82f47c
   */
  jobGroupId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 30
   */
  limit?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      limit: 'Limit',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobGroupId: 'string',
      limit: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDialogueNodeStatisticsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * f06f7c9f-2895-4b30-a8c2-6ecccb9c9f89
   */
  groupId?: string;
  hangUpDialogueNodes?: DescribeDialogueNodeStatisticsResponseBodyHangUpDialogueNodes[];
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * []
   */
  noAnswerDialogueNodes?: DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes[];
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 13
   */
  totalCompleted?: number;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      groupId: 'GroupId',
      hangUpDialogueNodes: 'HangUpDialogueNodes',
      httpStatusCode: 'HttpStatusCode',
      instanceId: 'InstanceId',
      message: 'Message',
      noAnswerDialogueNodes: 'NoAnswerDialogueNodes',
      requestId: 'RequestId',
      success: 'Success',
      totalCompleted: 'TotalCompleted',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      groupId: 'string',
      hangUpDialogueNodes: { 'type': 'array', 'itemType': DescribeDialogueNodeStatisticsResponseBodyHangUpDialogueNodes },
      httpStatusCode: 'number',
      instanceId: 'string',
      message: 'string',
      noAnswerDialogueNodes: { 'type': 'array', 'itemType': DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes },
      requestId: 'string',
      success: 'boolean',
      totalCompleted: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.hangUpDialogueNodes)) {
      $dara.Model.validateArray(this.hangUpDialogueNodes);
    }
    if(Array.isArray(this.noAnswerDialogueNodes)) {
      $dara.Model.validateArray(this.noAnswerDialogueNodes);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDialogueNodeStatisticsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDialogueNodeStatisticsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDialogueNodeStatisticsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDsReportsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * a4274627-265f-4e14-b2d6-4ee7d4f8593e
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 9eb8fe4f-b286-4834-9688-2c9b171e223e
   */
  jobGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDsReportsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * {}
   */
  dsReports?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 1364f208-982d-4d0c-89aa-d56e22b47589
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      dsReports: 'DsReports',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dsReports: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeDsReportsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeDsReportsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeDsReportsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGlobalQuestionRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e851e242-ad67-4507-96a2-d4114564dcec
   */
  globalQuestionId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 7cefbff0-8d50-4d6f-b93c-73cee23c1555
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * b7ee988b-2837-4bc1-9d56-f76e7c831f60
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      globalQuestionId: 'GlobalQuestionId',
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      globalQuestionId: 'string',
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGlobalQuestionResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  globalQuestion?: DescribeGlobalQuestionResponseBodyGlobalQuestion;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      globalQuestion: 'GlobalQuestion',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      globalQuestion: DescribeGlobalQuestionResponseBodyGlobalQuestion,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.globalQuestion && typeof (this.globalQuestion as any).validate === 'function') {
      (this.globalQuestion as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGlobalQuestionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeGlobalQuestionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeGlobalQuestionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupExecutingInfoRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c46001bc-3ead-4bfd-9a69-4b5b66a4a3f4
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 3640dda7-e5b1-4b3e-9ccf-da4fc5402e11
   */
  jobGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupExecutingInfoResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * {}
   */
  executingInfo?: DescribeGroupExecutingInfoResponseBodyExecutingInfo;
  /**
   * @example
   * b24d321a-2a74-4dd1-a0ba-4ab09cef6652
   */
  groupId?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * c46001bc-3ead-4bfd-9a69-4b5b66a4a3f4
   */
  instanceId?: string;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      executingInfo: 'ExecutingInfo',
      groupId: 'GroupId',
      httpStatusCode: 'HttpStatusCode',
      instanceId: 'InstanceId',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      executingInfo: DescribeGroupExecutingInfoResponseBodyExecutingInfo,
      groupId: 'string',
      httpStatusCode: 'number',
      instanceId: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.executingInfo && typeof (this.executingInfo as any).validate === 'function') {
      (this.executingInfo as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeGroupExecutingInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeGroupExecutingInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeGroupExecutingInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInstanceRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInstanceResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  instance?: DescribeInstanceResponseBodyInstance;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      instance: 'Instance',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      instance: DescribeInstanceResponseBodyInstance,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.instance && typeof (this.instance as any).validate === 'function') {
      (this.instance as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeIntentRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0f8a0059-dc9c-4151-8378-4734bbadf3cc
   */
  intentId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * b9ff4e88-65f9-4eb3-987c-11ba51f3f24d
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeIntentResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  intent?: DescribeIntentResponseBodyIntent;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      intent: 'Intent',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      intent: DescribeIntentResponseBodyIntent,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.intent && typeof (this.intent as any).validate === 'function') {
      (this.intent as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeIntentResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeIntentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeIntentResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeIntentStatisticsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c3c92de8-e4bd-4db4-a962-50f8acce40bc
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 040355a9-e80c-4308-b85c-aa5b9fd25246
   */
  jobGroupId?: string;
  /**
   * @example
   * 5
   */
  limit?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      limit: 'Limit',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobGroupId: 'string',
      limit: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeIntentStatisticsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 100
   */
  globalIntentNum?: number;
  /**
   * @example
   * []
   */
  globalIntents?: DescribeIntentStatisticsResponseBodyGlobalIntents[];
  /**
   * @example
   * 0c3f352f-d045-491d-9ce7-11f2d2b7775d
   */
  groupId?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * a4274627-265f-4e14-b2d6-4ee7d4f8593e
   */
  instanceId?: string;
  intentsAfterNoAnswer?: DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer[];
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 123
   */
  processIntentNum?: number;
  /**
   * @example
   * []
   */
  processIntents?: DescribeIntentStatisticsResponseBodyProcessIntents[];
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      globalIntentNum: 'GlobalIntentNum',
      globalIntents: 'GlobalIntents',
      groupId: 'GroupId',
      httpStatusCode: 'HttpStatusCode',
      instanceId: 'InstanceId',
      intentsAfterNoAnswer: 'IntentsAfterNoAnswer',
      message: 'Message',
      processIntentNum: 'ProcessIntentNum',
      processIntents: 'ProcessIntents',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      globalIntentNum: 'number',
      globalIntents: { 'type': 'array', 'itemType': DescribeIntentStatisticsResponseBodyGlobalIntents },
      groupId: 'string',
      httpStatusCode: 'number',
      instanceId: 'string',
      intentsAfterNoAnswer: { 'type': 'array', 'itemType': DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer },
      message: 'string',
      processIntentNum: 'number',
      processIntents: { 'type': 'array', 'itemType': DescribeIntentStatisticsResponseBodyProcessIntents },
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.globalIntents)) {
      $dara.Model.validateArray(this.globalIntents);
    }
    if(Array.isArray(this.intentsAfterNoAnswer)) {
      $dara.Model.validateArray(this.intentsAfterNoAnswer);
    }
    if(Array.isArray(this.processIntents)) {
      $dara.Model.validateArray(this.processIntents);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeIntentStatisticsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeIntentStatisticsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeIntentStatisticsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c8a2b7f2-ad1a-4865-b872-d0080d9802d9
   */
  jobId?: string;
  /**
   * @example
   * false
   */
  withScript?: boolean;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobId: 'JobId',
      withScript: 'WithScript',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobId: 'string',
      withScript: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * {}
   */
  job?: DescribeJobResponseBodyJob;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      job: 'Job',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      job: DescribeJobResponseBodyJob,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.job && typeof (this.job as any).validate === 'function') {
      (this.job as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeJobResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobDataParsingTaskProgressRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c209abb3-6804-4a75-b2c7-dd55c8c61b6a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 50d5e164-9365-4261-980e-3d979c2c948c
   */
  jobDataParsingTaskId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobDataParsingTaskId: 'JobDataParsingTaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobDataParsingTaskId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobDataParsingTaskProgressResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * {}
   */
  progress?: DescribeJobDataParsingTaskProgressResponseBodyProgress;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      progress: 'Progress',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      progress: DescribeJobDataParsingTaskProgressResponseBodyProgress,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.progress && typeof (this.progress as any).validate === 'function') {
      (this.progress as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobDataParsingTaskProgressResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeJobDataParsingTaskProgressResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeJobDataParsingTaskProgressResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupRequest extends $dara.Model {
  briefTypes?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 46a9ad0c-3e11-44da-a9a7-2c21bf5ce185
   */
  jobGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      briefTypes: 'BriefTypes',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      briefTypes: { 'type': 'array', 'itemType': 'string' },
      instanceId: 'string',
      jobGroupId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.briefTypes)) {
      $dara.Model.validateArray(this.briefTypes);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  jobGroup?: DescribeJobGroupResponseBodyJobGroup;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      jobGroup: 'JobGroup',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      jobGroup: DescribeJobGroupResponseBodyJobGroup,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.jobGroup && typeof (this.jobGroup as any).validate === 'function') {
      (this.jobGroup as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeJobGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeJobGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupExportTaskProgressRequest extends $dara.Model {
  /**
   * @example
   * b3dbfb82-1ae6-4e73-b717-f494727d2af3
   */
  instanceId?: string;
  /**
   * @example
   * e4e2a770-b97b-465a-80d8-06dca008c503
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      taskId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupExportTaskProgressResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * http://xxx.xx.com/xx
   */
  fileHttpUrl?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 45.0
   */
  progress?: number;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      fileHttpUrl: 'FileHttpUrl',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      progress: 'Progress',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      fileHttpUrl: 'string',
      httpStatusCode: 'number',
      message: 'string',
      progress: 'number',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeJobGroupExportTaskProgressResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeJobGroupExportTaskProgressResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeJobGroupExportTaskProgressResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNumberDistrictInfoStatusResponseBody extends $dara.Model {
  appliedVersion?: DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * successful.
   */
  message?: string;
  parsingVersion?: DescribeNumberDistrictInfoStatusResponseBodyParsingVersion;
  /**
   * @example
   * 66165274-82CC-5E7D-96D7-89143BAEA138
   */
  requestId?: string;
  /**
   * @example
   * Empty
   */
  status?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      appliedVersion: 'AppliedVersion',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      parsingVersion: 'ParsingVersion',
      requestId: 'RequestId',
      status: 'Status',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appliedVersion: DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion,
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      parsingVersion: DescribeNumberDistrictInfoStatusResponseBodyParsingVersion,
      requestId: 'string',
      status: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.appliedVersion && typeof (this.appliedVersion as any).validate === 'function') {
      (this.appliedVersion as any).validate();
    }
    if(this.parsingVersion && typeof (this.parsingVersion as any).validate === 'function') {
      (this.parsingVersion as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeNumberDistrictInfoStatusResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeNumberDistrictInfoStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeNumberDistrictInfoStatusResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScriptRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 38d2e8ed-04e9-4dac-83b5-a8e57642ef13
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * bee7e5b1-5d9a-4389-aa7e-bbbee5353a16
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScriptResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * none
   */
  nlsConfig?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * {}
   */
  script?: DescribeScriptResponseBodyScript;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      nlsConfig: 'NlsConfig',
      requestId: 'RequestId',
      script: 'Script',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      nlsConfig: 'string',
      requestId: 'string',
      script: DescribeScriptResponseBodyScript,
      success: 'boolean',
    };
  }

  validate() {
    if(this.script && typeof (this.script as any).validate === 'function') {
      (this.script as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScriptResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeScriptResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeScriptResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScriptVoiceConfigRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 8fa1953f-4a84-46d8-b80c-8ce9cf684fb3
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 28c4bcaf-5ab1-495e-8966-3206bf9ee733
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2a07b634-e15d-445f-bbcb-fc4ea2df7b87
   */
  scriptVoiceConfigId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
      scriptVoiceConfigId: 'ScriptVoiceConfigId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
      scriptVoiceConfigId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScriptVoiceConfigResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  scriptVoiceConfig?: DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      scriptVoiceConfig: 'ScriptVoiceConfig',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      scriptVoiceConfig: DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig,
      success: 'boolean',
    };
  }

  validate() {
    if(this.scriptVoiceConfig && typeof (this.scriptVoiceConfig as any).validate === 'function') {
      (this.scriptVoiceConfig as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeScriptVoiceConfigResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeScriptVoiceConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeScriptVoiceConfigResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTTSConfigRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0ec0c897-b92c-40e4-9ad7-e6e4f5ce13bb
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * d7fbd0a0-27bc-49c4-a456-ecb75e79122b
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTTSConfigResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * f765d3ee-ec03-4765-b235-6877501d99d1
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  TTSConfig?: DescribeTTSConfigResponseBodyTTSConfig;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      TTSConfig: 'TTSConfig',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      TTSConfig: DescribeTTSConfigResponseBodyTTSConfig,
    };
  }

  validate() {
    if(this.TTSConfig && typeof (this.TTSConfig as any).validate === 'function') {
      (this.TTSConfig as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTTSConfigResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTTSConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTTSConfigResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTTSDemoRequest extends $dara.Model {
  accessKey?: string;
  aliCustomizedVoice?: string;
  appKey?: string;
  engine?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * a8eccb3c-2b26-4b6d-a54f-696b953e33a6
   */
  instanceId?: string;
  nlsServiceType?: string;
  /**
   * @example
   * 0
   */
  pitchRate?: number;
  /**
   * @example
   * 5ab2d935-306c-478a-88bf-d08e4e25c1b7
   */
  scriptId?: string;
  secretKey?: string;
  /**
   * @example
   * 0
   */
  speechRate?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  text?: string;
  /**
   * @example
   * aixia
   */
  voice?: string;
  /**
   * @example
   * 50
   */
  volume?: number;
  static names(): { [key: string]: string } {
    return {
      accessKey: 'AccessKey',
      aliCustomizedVoice: 'AliCustomizedVoice',
      appKey: 'AppKey',
      engine: 'Engine',
      instanceId: 'InstanceId',
      nlsServiceType: 'NlsServiceType',
      pitchRate: 'PitchRate',
      scriptId: 'ScriptId',
      secretKey: 'SecretKey',
      speechRate: 'SpeechRate',
      text: 'Text',
      voice: 'Voice',
      volume: 'Volume',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessKey: 'string',
      aliCustomizedVoice: 'string',
      appKey: 'string',
      engine: 'string',
      instanceId: 'string',
      nlsServiceType: 'string',
      pitchRate: 'number',
      scriptId: 'string',
      secretKey: 'string',
      speechRate: 'number',
      text: 'string',
      voice: 'string',
      volume: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTTSDemoResponseBody extends $dara.Model {
  /**
   * @example
   * http://XXX/XXX
   */
  auditionUrl?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      auditionUrl: 'AuditionUrl',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      auditionUrl: 'string',
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTTSDemoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTTSDemoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTTSDemoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagHitsSummaryRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 8fa1953f-4a84-46d8-b80c-8ce9cf684fb3
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 8a4c6d3d-5ed6-44ca-b779-16c20f8862be
   */
  jobGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagHitsSummaryResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 5391EB13-A0E7-402D-A407-B99D4ABAF22A
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  tagGroups?: DescribeTagHitsSummaryResponseBodyTagGroups[];
  tagHitsList?: DescribeTagHitsSummaryResponseBodyTagHitsList[];
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      tagGroups: 'TagGroups',
      tagHitsList: 'TagHitsList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      tagGroups: { 'type': 'array', 'itemType': DescribeTagHitsSummaryResponseBodyTagGroups },
      tagHitsList: { 'type': 'array', 'itemType': DescribeTagHitsSummaryResponseBodyTagHitsList },
    };
  }

  validate() {
    if(Array.isArray(this.tagGroups)) {
      $dara.Model.validateArray(this.tagGroups);
    }
    if(Array.isArray(this.tagHitsList)) {
      $dara.Model.validateArray(this.tagHitsList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTagHitsSummaryResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTagHitsSummaryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTagHitsSummaryResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTenantBindNumberRequest extends $dara.Model {
  /**
   * @example
   * 95187
   */
  number?: string;
  static names(): { [key: string]: string } {
    return {
      number: 'Number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      number: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTenantBindNumberResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: DescribeTenantBindNumberResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 1364f208-982d-4d0c-89aa-d56e22b47589
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: DescribeTenantBindNumberResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DescribeTenantBindNumberResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DescribeTenantBindNumberResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DescribeTenantBindNumberResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DialogueRequest extends $dara.Model {
  /**
   * @example
   * broadcast
   */
  actionKey?: string;
  actionParams?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1528189846043
   */
  callId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * Outbound
   */
  callType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 135****4353
   */
  calledNumber?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1***6
   */
  callingNumber?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @example
   * 6cea9bed-63e6-439e-ae4c-b3333efff53d
   */
  scenarioId?: string;
  /**
   * @remarks
   * 场景id
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  /**
   * @example
   * ff44709e-39a6-43ba-959b-20fcabe3e496
   */
  taskId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  utterance?: string;
  static names(): { [key: string]: string } {
    return {
      actionKey: 'ActionKey',
      actionParams: 'ActionParams',
      callId: 'CallId',
      callType: 'CallType',
      calledNumber: 'CalledNumber',
      callingNumber: 'CallingNumber',
      instanceId: 'InstanceId',
      scenarioId: 'ScenarioId',
      scriptId: 'ScriptId',
      taskId: 'TaskId',
      utterance: 'Utterance',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actionKey: 'string',
      actionParams: 'string',
      callId: 'string',
      callType: 'string',
      calledNumber: 'string',
      callingNumber: 'string',
      instanceId: 'string',
      scenarioId: 'string',
      scriptId: 'string',
      taskId: 'string',
      utterance: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DialogueResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  feedback?: DialogueResponseBodyFeedback;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      feedback: 'Feedback',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      feedback: DialogueResponseBodyFeedback,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.feedback && typeof (this.feedback as any).validate === 'function') {
      (this.feedback as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DialogueResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DialogueResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DialogueResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DismissNumberDistrictInfoParsingResultRequest extends $dara.Model {
  /**
   * @example
   * KZpaNWMgXEfneopGBMGN9fH35b62NJjN
   */
  versionId?: string;
  static names(): { [key: string]: string } {
    return {
      versionId: 'VersionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      versionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DismissNumberDistrictInfoParsingResultResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DismissNumberDistrictInfoParsingResultResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DismissNumberDistrictInfoParsingResultResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DismissNumberDistrictInfoParsingResultResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadRecordingRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * da37319b-6c83-4268-9f19-814aed62e401
   */
  instanceId?: string;
  needVoiceSliceRecording?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 744b27f3-437f-4a8c-a181-f668e492fd24
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      needVoiceSliceRecording: 'NeedVoiceSliceRecording',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      needVoiceSliceRecording: 'boolean',
      taskId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadRecordingResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  downloadParams?: DownloadRecordingResponseBodyDownloadParams;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      downloadParams: 'DownloadParams',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      downloadParams: DownloadRecordingResponseBodyDownloadParams,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.downloadParams && typeof (this.downloadParams as any).validate === 'function') {
      (this.downloadParams as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadRecordingResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DownloadRecordingResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DownloadRecordingResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadScriptRecordingRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * b3865dc3-40fa-4afd-9fe4-dc7cda305a24
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * aa279896-64a6-4182-864c-4f2b04ec8d17
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 5feaab8a-97fd-4720-8108-79e017f2d3ac
   */
  uuid?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
      uuid: 'Uuid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
      uuid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadScriptRecordingResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  downloadParams?: DownloadScriptRecordingResponseBodyDownloadParams;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      downloadParams: 'DownloadParams',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      downloadParams: DownloadScriptRecordingResponseBodyDownloadParams,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.downloadParams && typeof (this.downloadParams as any).validate === 'function') {
      (this.downloadParams as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadScriptRecordingResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DownloadScriptRecordingResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DownloadScriptRecordingResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DuplicateScriptRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 361c8a53-0e29-42f3-8aa7-c7752d010399
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  name?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 6114e7e8-4140-48d9-b46d-65ea29f13fe8
   */
  sourceScriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      name: 'Name',
      sourceScriptId: 'SourceScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      name: 'string',
      sourceScriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DuplicateScriptResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * 6114e7e8-4140-48d9-b46d-65ea29f13fe8
   */
  scriptId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      scriptId: 'ScriptId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      scriptId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DuplicateScriptResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: DuplicateScriptResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: DuplicateScriptResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportScriptRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 12f3dd08-0c55-44ce-9b64-e69d35ed3a76
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * d004cfd2-6a81-491c-83c6-cbe186620c95
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportScriptResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  downloadParams?: ExportScriptResponseBodyDownloadParams;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      downloadParams: 'DownloadParams',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      downloadParams: ExportScriptResponseBodyDownloadParams,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.downloadParams && typeof (this.downloadParams as any).validate === 'function') {
      (this.downloadParams as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExportScriptResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ExportScriptResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ExportScriptResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GenerateUploadUrlRequest extends $dara.Model {
  /**
   * @example
   * faaf8508-9542-4ac4-84a2-0ddcbb5f79a6 (2).json
   */
  fileName?: string;
  /**
   * @example
   * 3b9b5dc6d67ee9fa
   */
  key?: string;
  static names(): { [key: string]: string } {
    return {
      fileName: 'FileName',
      key: 'Key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileName: 'string',
      key: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GenerateUploadUrlResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: GenerateUploadUrlResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GenerateUploadUrlResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GenerateUploadUrlResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GenerateUploadUrlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GenerateUploadUrlResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAfterAnswerDelayPlaybackRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c46001bc-3ead-4bfd-9a69-4b5b66a4a3f4
   */
  entryId?: string;
  /**
   * @example
   * 2
   */
  strategyLevel?: number;
  static names(): { [key: string]: string } {
    return {
      entryId: 'EntryId',
      strategyLevel: 'StrategyLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entryId: 'string',
      strategyLevel: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAfterAnswerDelayPlaybackResponseBody extends $dara.Model {
  /**
   * @example
   * 500
   */
  afterAnswerDelayPlayback?: number;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      afterAnswerDelayPlayback: 'AfterAnswerDelayPlayback',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      afterAnswerDelayPlayback: 'number',
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAfterAnswerDelayPlaybackResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAfterAnswerDelayPlaybackResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAfterAnswerDelayPlaybackResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAgentProfileRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 37ca3ca1ac4b4e57adf3da5b5d939d04
   */
  agentProfileId?: string;
  /**
   * @example
   * 127.0.0.1
   */
  appIp?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0ec0c897-b92c-40e4-9ad7-e6e4f5ce13bb
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      agentProfileId: 'AgentProfileId',
      appIp: 'AppIp',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentProfileId: 'string',
      appIp: 'string',
      instanceId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAgentProfileResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: GetAgentProfileResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 7A573837-3AD3-54CF-930A-07A3287042C2
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetAgentProfileResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAgentProfileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAgentProfileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAgentProfileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAgentProfileTemplateRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * default-survey
   */
  agentProfileTemplateId?: string;
  /**
   * @example
   * 127.0.0.1
   */
  appIp?: string;
  static names(): { [key: string]: string } {
    return {
      agentProfileTemplateId: 'AgentProfileTemplateId',
      appIp: 'AppIp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentProfileTemplateId: 'string',
      appIp: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAgentProfileTemplateResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: GetAgentProfileTemplateResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetAgentProfileTemplateResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAgentProfileTemplateResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAgentProfileTemplateResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAgentProfileTemplateResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAnnotationMissionSummaryRequest extends $dara.Model {
  /**
   * @example
   * 50e53ac8-24a4-46d5-b174-ee88867f4780
   */
  annotationMissionId?: string;
  static names(): { [key: string]: string } {
    return {
      annotationMissionId: 'AnnotationMissionId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAnnotationMissionSummaryResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: GetAnnotationMissionSummaryResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * You are not authorized to perform this action. CDR:View privileges are required.
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetAnnotationMissionSummaryResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAnnotationMissionSummaryResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAnnotationMissionSummaryResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAnnotationMissionSummaryResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAnnotationMissionTagInfoListRequest extends $dara.Model {
  /**
   * @example
   * 4eee9bf8-1319-468f-ac82-83c50ae389f8
   */
  instanceId?: string;
  /**
   * @example
   * 1
   */
  pageIndex?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pageIndex: 'number',
      pageSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAnnotationMissionTagInfoListResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: GetAnnotationMissionTagInfoListResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * CDR \\"job-efbaeefc-4d45-4e79-83f7-b33b0769c969\\" doesn\\"t exists.
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: GetAnnotationMissionTagInfoListResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAnnotationMissionTagInfoListResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAnnotationMissionTagInfoListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAnnotationMissionTagInfoListResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsrServerInfoRequest extends $dara.Model {
  /**
   * @example
   * 024f8cf0-c842-4c01-b74b-c8667e4579c7
   */
  entryId?: string;
  /**
   * @example
   * 2
   */
  strategyLevel?: number;
  static names(): { [key: string]: string } {
    return {
      entryId: 'EntryId',
      strategyLevel: 'StrategyLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entryId: 'string',
      strategyLevel: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsrServerInfoResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAsrServerInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetAsrServerInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetAsrServerInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetBaseStrategyPeriodRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 024f8cf0-c842-4c01-b74b-c8667e4579c7
   */
  entryId?: string;
  /**
   * @example
   * 2
   */
  strategyLevel?: number;
  static names(): { [key: string]: string } {
    return {
      entryId: 'EntryId',
      strategyLevel: 'StrategyLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entryId: 'string',
      strategyLevel: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetBaseStrategyPeriodResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * false
   */
  onlyWeekdays?: boolean;
  onlyWorkdays?: boolean;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * []
   */
  workingTime?: GetBaseStrategyPeriodResponseBodyWorkingTime[];
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      onlyWeekdays: 'OnlyWeekdays',
      onlyWorkdays: 'OnlyWorkdays',
      requestId: 'RequestId',
      success: 'Success',
      workingTime: 'WorkingTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      onlyWeekdays: 'boolean',
      onlyWorkdays: 'boolean',
      requestId: 'string',
      success: 'boolean',
      workingTime: { 'type': 'array', 'itemType': GetBaseStrategyPeriodResponseBodyWorkingTime },
    };
  }

  validate() {
    if(Array.isArray(this.workingTime)) {
      $dara.Model.validateArray(this.workingTime);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetBaseStrategyPeriodResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetBaseStrategyPeriodResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetBaseStrategyPeriodResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetConcurrentConversationQuotaResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @remarks
   * maxConcurrent
   * 
   * @example
   * 10
   */
  maxConcurrent?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 2
   */
  remainingConcurrent?: number;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      maxConcurrent: 'MaxConcurrent',
      message: 'Message',
      remainingConcurrent: 'RemainingConcurrent',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      maxConcurrent: 'number',
      message: 'string',
      remainingConcurrent: 'number',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetConcurrentConversationQuotaResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetConcurrentConversationQuotaResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetConcurrentConversationQuotaResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContactBlockListRequest extends $dara.Model {
  /**
   * @example
   * 100
   */
  countTotalRow?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 846e20ae-e113-4231-a792-cb354187c9f6
   */
  instanceId?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      countTotalRow: 'CountTotalRow',
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      countTotalRow: 'boolean',
      instanceId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContactBlockListResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * {}
   */
  contactBlocklistList?: GetContactBlockListResponseBodyContactBlocklistList;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      contactBlocklistList: 'ContactBlocklistList',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      contactBlocklistList: GetContactBlockListResponseBodyContactBlocklistList,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.contactBlocklistList && typeof (this.contactBlocklistList as any).validate === 'function') {
      (this.contactBlocklistList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContactBlockListResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetContactBlockListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetContactBlockListResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContactWhiteListRequest extends $dara.Model {
  /**
   * @example
   * true
   */
  countTotalRow?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2a830781-324e-4568-ae96-309f93090fe1
   */
  instanceId?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      countTotalRow: 'CountTotalRow',
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      countTotalRow: 'boolean',
      instanceId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContactWhiteListResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * {}
   */
  contactWhitelistList?: GetContactWhiteListResponseBodyContactWhitelistList;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      contactWhitelistList: 'ContactWhitelistList',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      contactWhitelistList: GetContactWhiteListResponseBodyContactWhitelistList,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.contactWhitelistList && typeof (this.contactWhitelistList as any).validate === 'function') {
      (this.contactWhitelistList as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContactWhiteListResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetContactWhiteListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetContactWhiteListResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetCurrentConcurrencyRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 361c8a53-0e29-42f3-8aa7-c7752d010399
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetCurrentConcurrencyResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 12
   */
  currentConcurrency?: number;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * 12f3dd08-0c55-44ce-9b64-e69d35ed3a76
   */
  instanceId?: string;
  /**
   * @example
   * 5
   */
  maxConcurrentConversation?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      currentConcurrency: 'CurrentConcurrency',
      httpStatusCode: 'HttpStatusCode',
      instanceId: 'InstanceId',
      maxConcurrentConversation: 'MaxConcurrentConversation',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      currentConcurrency: 'number',
      httpStatusCode: 'number',
      instanceId: 'string',
      maxConcurrentConversation: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetCurrentConcurrencyResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetCurrentConcurrencyResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetCurrentConcurrencyResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEffectiveDaysRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e90b5b8e-c8b4-4182-b28d-a5aa81685e49
   */
  entryId?: string;
  /**
   * @example
   * 2
   */
  strategyLevel?: number;
  static names(): { [key: string]: string } {
    return {
      entryId: 'EntryId',
      strategyLevel: 'StrategyLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entryId: 'string',
      strategyLevel: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEffectiveDaysResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 7
   */
  effectiveDays?: number;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * Success
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      effectiveDays: 'EffectiveDays',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      effectiveDays: 'number',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEffectiveDaysResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetEffectiveDaysResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetEffectiveDaysResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEmptyNumberNoMoreCallsInfoRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * db3e679b-7d5e-4d9b-828a-345adca455f3
   */
  entryId?: string;
  /**
   * @example
   * 2
   */
  strategyLevel?: number;
  static names(): { [key: string]: string } {
    return {
      entryId: 'EntryId',
      strategyLevel: 'StrategyLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entryId: 'string',
      strategyLevel: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEmptyNumberNoMoreCallsInfoResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * true
   */
  emptyNumberNoMoreCalls?: boolean;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      emptyNumberNoMoreCalls: 'EmptyNumberNoMoreCalls',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      emptyNumberNoMoreCalls: 'boolean',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetEmptyNumberNoMoreCallsInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetEmptyNumberNoMoreCallsInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetEmptyNumberNoMoreCallsInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetJobDataUploadParamsRequest extends $dara.Model {
  /**
   * @example
   * SCRIPT_RECORDING
   */
  busiType?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  fileName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 4eee9bf8-1319-468f-ac82-83c50ae389f8
   */
  instanceId?: string;
  /**
   * @example
   * //airwaybill/1237185904146124802
   */
  path?: string;
  /**
   * @example
   * sas_siema_1477832102462645_siem_f07e90c2c147cf8cf1549ccb974e1956
   */
  uniqueId?: string;
  static names(): { [key: string]: string } {
    return {
      busiType: 'BusiType',
      fileName: 'FileName',
      instanceId: 'InstanceId',
      path: 'Path',
      uniqueId: 'UniqueId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      busiType: 'string',
      fileName: 'string',
      instanceId: 'string',
      path: 'string',
      uniqueId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetJobDataUploadParamsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * True
   */
  success?: boolean;
  uploadParams?: GetJobDataUploadParamsResponseBodyUploadParams;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      uploadParams: 'UploadParams',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      uploadParams: GetJobDataUploadParamsResponseBodyUploadParams,
    };
  }

  validate() {
    if(this.uploadParams && typeof (this.uploadParams as any).validate === 'function') {
      (this.uploadParams as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetJobDataUploadParamsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetJobDataUploadParamsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetJobDataUploadParamsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMaxAttemptsPerDayRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2bfa5ae4-7185-4227-a3b8-328f26f11be1
   */
  entryId?: string;
  /**
   * @example
   * 2
   */
  strategyLevel?: number;
  static names(): { [key: string]: string } {
    return {
      entryId: 'EntryId',
      strategyLevel: 'StrategyLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entryId: 'string',
      strategyLevel: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMaxAttemptsPerDayResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * 2
   */
  maxAttemptsPerDay?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      maxAttemptsPerDay: 'MaxAttemptsPerDay',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      maxAttemptsPerDay: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMaxAttemptsPerDayResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetMaxAttemptsPerDayResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetMaxAttemptsPerDayResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNumberDistrictInfoTemplateDownloadUrlResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * http://xxx.xx.com/xx
   */
  fileHttpUrl?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      fileHttpUrl: 'FileHttpUrl',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      fileHttpUrl: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNumberDistrictInfoTemplateDownloadUrlResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetNumberDistrictInfoTemplateDownloadUrlResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetNumberDistrictInfoTemplateDownloadUrlResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRealtimeConcurrencyReportRequest extends $dara.Model {
  /**
   * @example
   * 85bf7efa-a07c-498a-850e-99a5849b8589
   */
  instanceId?: string;
  /**
   * @example
   * c62e6789-28a8-41db-941e-171a01d3b3b9
   */
  jobGroupId?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobGroupId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRealtimeConcurrencyReportResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 1743474900488
   */
  reportDate?: number;
  reports?: GetRealtimeConcurrencyReportResponseBodyReports;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      reportDate: 'ReportDate',
      reports: 'Reports',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      reportDate: 'number',
      reports: GetRealtimeConcurrencyReportResponseBodyReports,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.reports && typeof (this.reports as any).validate === 'function') {
      (this.reports as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetRealtimeConcurrencyReportResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetRealtimeConcurrencyReportResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetRealtimeConcurrencyReportResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSummaryInfoRequest extends $dara.Model {
  /**
   * @example
   * []
   */
  instanceIdList?: string[];
  static names(): { [key: string]: string } {
    return {
      instanceIdList: 'InstanceIdList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceIdList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.instanceIdList)) {
      $dara.Model.validateArray(this.instanceIdList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSummaryInfoResponseBody extends $dara.Model {
  /**
   * @example
   * []
   */
  agentBotInstanceSummaryList?: GetSummaryInfoResponseBodyAgentBotInstanceSummaryList[];
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      agentBotInstanceSummaryList: 'AgentBotInstanceSummaryList',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentBotInstanceSummaryList: { 'type': 'array', 'itemType': GetSummaryInfoResponseBodyAgentBotInstanceSummaryList },
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.agentBotInstanceSummaryList)) {
      $dara.Model.validateArray(this.agentBotInstanceSummaryList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetSummaryInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetSummaryInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetSummaryInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskByUuidRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 024f8cf0-c842-4c01-b74b-c8667e4579c7
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 15160071061
   */
  taskId?: string;
  /**
   * @example
   * true
   */
  withConversations?: boolean;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      taskId: 'TaskId',
      withConversations: 'WithConversations',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      taskId: 'string',
      withConversations: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskByUuidResponseBody extends $dara.Model {
  code?: string;
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  success?: boolean;
  /**
   * @example
   * {}
   */
  task?: GetTaskByUuidResponseBodyTask;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      task: 'Task',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      task: GetTaskByUuidResponseBodyTask,
    };
  }

  validate() {
    if(this.task && typeof (this.task as any).validate === 'function') {
      (this.task as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetTaskByUuidResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetTaskByUuidResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetTaskByUuidResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetVersionResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 1364f208-982d-4d0c-89aa-d56e22b47589
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 2018-12-13
   */
  version?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      version: 'Version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      version: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetVersionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: GetVersionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: GetVersionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportScriptRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  instanceId?: string;
  nluEngine?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  signatureUrl?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      nluEngine: 'NluEngine',
      signatureUrl: 'SignatureUrl',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      nluEngine: 'string',
      signatureUrl: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportScriptResponseBody extends $dara.Model {
  code?: string;
  httpStatusCode?: number;
  message?: string;
  requestId?: string;
  scriptId?: string;
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      scriptId: 'ScriptId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      scriptId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportScriptResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ImportScriptResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ImportScriptResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InflightTaskTimeoutRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 2d350e38-f561-49b0-85d3-b90d9fc7e052
   */
  instanceId?: string;
  /**
   * @example
   * 1864632921948620
   */
  instanceOwnerId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 6bc0585c-0a8a-46d8-b042-23570bbb4855
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      instanceOwnerId: 'InstanceOwnerId',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      instanceOwnerId: 'number',
      taskId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InflightTaskTimeoutResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InflightTaskTimeoutResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: InflightTaskTimeoutResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: InflightTaskTimeoutResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAgentProfilesRequest extends $dara.Model {
  /**
   * @example
   * 127.0.0.1
   */
  appIp?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @example
   * d004cfd2-6a81-491c-83c6-cbe186620c95
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      appIp: 'AppIp',
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appIp: 'string',
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAgentProfilesResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: ListAgentProfilesResponseBodyData[];
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: { 'type': 'array', 'itemType': ListAgentProfilesResponseBodyData },
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.data)) {
      $dara.Model.validateArray(this.data);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAgentProfilesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListAgentProfilesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListAgentProfilesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAllTenantBindNumberBindingResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: ListAllTenantBindNumberBindingResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * A4BEAB4B-C810-5386-B72A-1A35FF1E6B15
   */
  requestId?: string;
  /**
   * @example
   * True
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: ListAllTenantBindNumberBindingResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAllTenantBindNumberBindingResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListAllTenantBindNumberBindingResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListAllTenantBindNumberBindingResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionRequest extends $dara.Model {
  /**
   * @example
   * 0943abcb-bd7d-4ace-8cf7-97d39d4dd0b9
   */
  annotationMissionId?: string;
  annotationMissionName?: string;
  annotationStatusListFilter?: number[];
  /**
   * @example
   * [1]
   */
  annotationStatusListStringFilter?: string;
  /**
   * @example
   * 1673280000000
   */
  createTimeEndFilter?: number;
  /**
   * @example
   * 1661961600000
   */
  createTimeStartFilter?: number;
  /**
   * @example
   * 191ef468-75a2-4004-9441-a5c31bf5cd9d
   */
  instanceId?: string;
  /**
   * @example
   * 1
   */
  pageIndex?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionName: 'AnnotationMissionName',
      annotationStatusListFilter: 'AnnotationStatusListFilter',
      annotationStatusListStringFilter: 'AnnotationStatusListStringFilter',
      createTimeEndFilter: 'CreateTimeEndFilter',
      createTimeStartFilter: 'CreateTimeStartFilter',
      instanceId: 'InstanceId',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionId: 'string',
      annotationMissionName: 'string',
      annotationStatusListFilter: { 'type': 'array', 'itemType': 'number' },
      annotationStatusListStringFilter: 'string',
      createTimeEndFilter: 'number',
      createTimeStartFilter: 'number',
      instanceId: 'string',
      pageIndex: 'number',
      pageSize: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.annotationStatusListFilter)) {
      $dara.Model.validateArray(this.annotationStatusListFilter);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: ListAnnotationMissionResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * CDR \\"job-c7b8a817-b8e8-40f3-b7ad-f28dcea218ff\\" doesn\\"t exists.
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: ListAnnotationMissionResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListAnnotationMissionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListAnnotationMissionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionSessionRequest extends $dara.Model {
  /**
   * @example
   * 8434a4b0-41fc-41b1-aa75-bbd1f2ab0c8d
   */
  annotationMissionId?: string;
  /**
   * @example
   * 8434a4b0-41fc-41b1-aa75-bbd1f2ab0c8d
   */
  annotationMissionSessionId?: string;
  /**
   * @example
   * 0
   */
  environment?: number;
  /**
   * @example
   * [1]
   */
  includeStatusListJsonString?: string;
  /**
   * @example
   * 3
   */
  pageIndex?: number;
  /**
   * @example
   * 1
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionSessionId: 'AnnotationMissionSessionId',
      environment: 'Environment',
      includeStatusListJsonString: 'IncludeStatusListJsonString',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionId: 'string',
      annotationMissionSessionId: 'string',
      environment: 'number',
      includeStatusListJsonString: 'string',
      pageIndex: 'number',
      pageSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionSessionResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: ListAnnotationMissionSessionResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * bp.java.nopowerContact
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: ListAnnotationMissionSessionResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAnnotationMissionSessionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListAnnotationMissionSessionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListAnnotationMissionSessionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListApiPluginsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 024f8cf0-c842-4c01-b74b-c8667e4579c7
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * ["d17d5bfa-4972-4389-9718-f9602edabe48"]
   */
  uuidsJson?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      uuidsJson: 'UuidsJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      uuidsJson: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListApiPluginsResponseBody extends $dara.Model {
  apiPlugins?: ListApiPluginsResponseBodyApiPlugins[];
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 100
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      apiPlugins: 'ApiPlugins',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      apiPlugins: { 'type': 'array', 'itemType': ListApiPluginsResponseBodyApiPlugins },
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.apiPlugins)) {
      $dara.Model.validateArray(this.apiPlugins);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListApiPluginsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListApiPluginsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListApiPluginsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListBeebotIntentRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  intentName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentName: 'IntentName',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentName: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListBeebotIntentResponseBody extends $dara.Model {
  /**
   * @example
   * 497CFAFF-48CC-161A-AD2C-252DED569037
   */
  beebotRequestId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  intents?: ListBeebotIntentResponseBodyIntents[];
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 100
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      beebotRequestId: 'BeebotRequestId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      intents: 'Intents',
      message: 'Message',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beebotRequestId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      intents: { 'type': 'array', 'itemType': ListBeebotIntentResponseBodyIntents },
      message: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.intents)) {
      $dara.Model.validateArray(this.intents);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListBeebotIntentResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListBeebotIntentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListBeebotIntentResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListBeebotIntentLgfRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10717802
   */
  intentId?: string;
  lgfText?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      lgfText: 'LgfText',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentId: 'string',
      lgfText: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListBeebotIntentLgfResponseBody extends $dara.Model {
  /**
   * @example
   * 497CFAFF-48CC-161A-AD2C-252DED569037
   */
  beebotRequestId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  lgfs?: ListBeebotIntentLgfResponseBodyLgfs[];
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 100
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      beebotRequestId: 'BeebotRequestId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      lgfs: 'Lgfs',
      message: 'Message',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beebotRequestId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      lgfs: { 'type': 'array', 'itemType': ListBeebotIntentLgfResponseBodyLgfs },
      message: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.lgfs)) {
      $dara.Model.validateArray(this.lgfs);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListBeebotIntentLgfResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListBeebotIntentLgfResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListBeebotIntentLgfResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListBeebotIntentUserSayRequest extends $dara.Model {
  content?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10717802
   */
  intentId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'Content',
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      instanceId: 'string',
      intentId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListBeebotIntentUserSayResponseBody extends $dara.Model {
  /**
   * @example
   * D7BBFCDF-59B0-1ADA-BCA3-4B77F642DDFB
   */
  beebotRequestId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 0956D5DA-0978-5DC9-94B0-C68527DA7475
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 100
   */
  totalCount?: number;
  userSays?: ListBeebotIntentUserSayResponseBodyUserSays[];
  static names(): { [key: string]: string } {
    return {
      beebotRequestId: 'BeebotRequestId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
      userSays: 'UserSays',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beebotRequestId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
      userSays: { 'type': 'array', 'itemType': ListBeebotIntentUserSayResponseBodyUserSays },
    };
  }

  validate() {
    if(Array.isArray(this.userSays)) {
      $dara.Model.validateArray(this.userSays);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListBeebotIntentUserSayResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListBeebotIntentUserSayResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListBeebotIntentUserSayResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListChatbotInstancesRequest extends $dara.Model {
  agentKey?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      agentKey: 'AgentKey',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentKey: 'string',
      pageNumber: 'number',
      pageSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListChatbotInstancesResponseBody extends $dara.Model {
  bots?: ListChatbotInstancesResponseBodyBots[];
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 5
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 100
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      bots: 'Bots',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bots: { 'type': 'array', 'itemType': ListChatbotInstancesResponseBodyBots },
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.bots)) {
      $dara.Model.validateArray(this.bots);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListChatbotInstancesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListChatbotInstancesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListChatbotInstancesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDialogueFlowsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 361c8a53-0e29-42f3-8aa7-c7752d010399
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * d7c28efb-47f7-4a85-a522-5038e30a0b98
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDialogueFlowsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  dialogueFlows?: ListDialogueFlowsResponseBodyDialogueFlows[];
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      dialogueFlows: 'DialogueFlows',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dialogueFlows: { 'type': 'array', 'itemType': ListDialogueFlowsResponseBodyDialogueFlows },
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.dialogueFlows)) {
      $dara.Model.validateArray(this.dialogueFlows);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDialogueFlowsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDialogueFlowsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDialogueFlowsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDownloadTasksRequest extends $dara.Model {
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDownloadTasksResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  downloadTasks?: ListDownloadTasksResponseBodyDownloadTasks;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 904CFA7B-8AD9-50FF-9B3E-404B20B9EE31
   */
  requestId?: string;
  /**
   * @example
   * True
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      downloadTasks: 'DownloadTasks',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      downloadTasks: ListDownloadTasksResponseBodyDownloadTasks,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.downloadTasks && typeof (this.downloadTasks as any).validate === 'function') {
      (this.downloadTasks as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDownloadTasksResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListDownloadTasksResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListDownloadTasksResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListFlashSmsTemplatesRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * fe542524-9585-4cc7-be54-c8782ed7f60e
   */
  configId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 361c8a53-0e29-42f3-8aa7-c7752d010399
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * Uincall
   */
  providerId?: string;
  static names(): { [key: string]: string } {
    return {
      configId: 'ConfigId',
      instanceId: 'InstanceId',
      providerId: 'ProviderId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configId: 'string',
      instanceId: 'string',
      providerId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListFlashSmsTemplatesResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: ListFlashSmsTemplatesResponseBodyData[];
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * EC08CC41-6870-5594-939A-F758F057898F
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: { 'type': 'array', 'itemType': ListFlashSmsTemplatesResponseBodyData },
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.data)) {
      $dara.Model.validateArray(this.data);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListFlashSmsTemplatesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListFlashSmsTemplatesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListFlashSmsTemplatesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListGlobalQuestionsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 361c8a53-0e29-42f3-8aa7-c7752d010399
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * aa279896-64a6-4182-864c-4f2b04ec8d17
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListGlobalQuestionsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  globalQuestions?: ListGlobalQuestionsResponseBodyGlobalQuestions;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      globalQuestions: 'GlobalQuestions',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      globalQuestions: ListGlobalQuestionsResponseBodyGlobalQuestions,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.globalQuestions && typeof (this.globalQuestions as any).validate === 'function') {
      (this.globalQuestions as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListGlobalQuestionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListGlobalQuestionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListGlobalQuestionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesRequest extends $dara.Model {
  name?: string;
  pageNumber?: number;
  pageSize?: number;
  /**
   * @example
   * rg-acfm3iugit3uw7a
   */
  resourceGroupId?: string;
  tag?: ListInstancesRequestTag[];
  static names(): { [key: string]: string } {
    return {
      name: 'Name',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      resourceGroupId: 'ResourceGroupId',
      tag: 'Tag',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      resourceGroupId: 'string',
      tag: { 'type': 'array', 'itemType': ListInstancesRequestTag },
    };
  }

  validate() {
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  instances?: ListInstancesResponseBodyInstances[];
  /**
   * @example
   * Success
   */
  message?: string;
  pageNumber?: number;
  pageSize?: number;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      instances: 'Instances',
      message: 'Message',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      instances: { 'type': 'array', 'itemType': ListInstancesResponseBodyInstances },
      message: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      requestId: 'string',
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.instances)) {
      $dara.Model.validateArray(this.instances);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListInstancesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListInstancesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListInstancesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentionsRequest extends $dara.Model {
  /**
   * @example
   * 1
   */
  annotationMissionDataSourceType?: number;
  /**
   * @example
   * chatbot-cn-n7QmzrUnNe
   */
  botId?: string;
  /**
   * @example
   * 2
   */
  environment?: number;
  /**
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @example
   * 1
   */
  pageIndex?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  userNick?: string;
  static names(): { [key: string]: string } {
    return {
      annotationMissionDataSourceType: 'AnnotationMissionDataSourceType',
      botId: 'BotId',
      environment: 'Environment',
      instanceId: 'InstanceId',
      intentId: 'IntentId',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
      scriptId: 'ScriptId',
      userNick: 'UserNick',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionDataSourceType: 'number',
      botId: 'string',
      environment: 'number',
      instanceId: 'string',
      intentId: 'number',
      pageIndex: 'number',
      pageSize: 'number',
      scriptId: 'string',
      userNick: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentionsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: ListIntentionsResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: ListIntentionsResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentionsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListIntentionsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListIntentionsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @example
   * ""
   */
  keyword?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * b9ff4e88-65f9-4eb3-987c-11ba51f3f24d
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      keyword: 'Keyword',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      keyword: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  intents?: ListIntentsResponseBodyIntents;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      intents: 'Intents',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      intents: ListIntentsResponseBodyIntents,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.intents && typeof (this.intents as any).validate === 'function') {
      (this.intents as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListIntentsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListIntentsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListIntentsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsRequest extends $dara.Model {
  /**
   * @example
   * true
   */
  asyncQuery?: boolean;
  /**
   * @example
   * 1579965079000
   */
  endTime?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174952ab-9825-4cc9-a5e2-de82d7fa4cdd
   */
  instanceId?: string;
  jobGroupStatusFilter?: string;
  onlyMinConcurrencyEnabled?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  searchText?: string;
  /**
   * @example
   * 1578965079000
   */
  startTime?: number;
  static names(): { [key: string]: string } {
    return {
      asyncQuery: 'AsyncQuery',
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      jobGroupStatusFilter: 'JobGroupStatusFilter',
      onlyMinConcurrencyEnabled: 'OnlyMinConcurrencyEnabled',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      searchText: 'SearchText',
      startTime: 'StartTime',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncQuery: 'boolean',
      endTime: 'number',
      instanceId: 'string',
      jobGroupStatusFilter: 'string',
      onlyMinConcurrencyEnabled: 'boolean',
      pageNumber: 'number',
      pageSize: 'number',
      searchText: 'string',
      startTime: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsResponseBody extends $dara.Model {
  /**
   * @example
   * 2bb0cf15-2126-4c9b-bc30-bb5301b96284
   */
  asyncTaskId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  jobGroups?: ListJobGroupsResponseBodyJobGroups;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      asyncTaskId: 'AsyncTaskId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      jobGroups: 'JobGroups',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncTaskId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      jobGroups: ListJobGroupsResponseBodyJobGroups,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.jobGroups && typeof (this.jobGroups as any).validate === 'function') {
      (this.jobGroups as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListJobGroupsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListJobGroupsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsAsyncRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 6243d904-939d-42ce-a8e4-886a139e77a3
   */
  asyncTaskId?: string;
  static names(): { [key: string]: string } {
    return {
      asyncTaskId: 'AsyncTaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      asyncTaskId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsAsyncResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  jobGroups?: ListJobGroupsAsyncResponseBodyJobGroups[];
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * true
   */
  timeout?: boolean;
  /**
   * @example
   * 100
   */
  totalCount?: number;
  /**
   * @example
   * true
   */
  vaild?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      jobGroups: 'JobGroups',
      message: 'Message',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      success: 'Success',
      timeout: 'Timeout',
      totalCount: 'TotalCount',
      vaild: 'Vaild',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      jobGroups: { 'type': 'array', 'itemType': ListJobGroupsAsyncResponseBodyJobGroups },
      message: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      requestId: 'string',
      success: 'boolean',
      timeout: 'boolean',
      totalCount: 'number',
      vaild: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.jobGroups)) {
      $dara.Model.validateArray(this.jobGroups);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobGroupsAsyncResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListJobGroupsAsyncResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListJobGroupsAsyncResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 24fb9a8d-f20e-4ee2-a11c-094dda68c5cc
   */
  jobId?: string[];
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobId: 'JobId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobId: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.jobId)) {
      $dara.Model.validateArray(this.jobId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  jobs?: ListJobsResponseBodyJobs[];
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      jobs: 'Jobs',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      jobs: { 'type': 'array', 'itemType': ListJobsResponseBodyJobs },
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.jobs)) {
      $dara.Model.validateArray(this.jobs);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListJobsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListJobsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsByGroupRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @example
   * NoAnswer
   */
  jobFailureReason?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * de48407d-309e-451a-81ec-6fb11f8fdbf3
   */
  jobGroupId?: string;
  /**
   * @example
   * Succeeded
   */
  jobStatus?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobFailureReason: 'JobFailureReason',
      jobGroupId: 'JobGroupId',
      jobStatus: 'JobStatus',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobFailureReason: 'string',
      jobGroupId: 'string',
      jobStatus: 'string',
      pageNumber: 'number',
      pageSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsByGroupResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  jobs?: ListJobsByGroupResponseBodyJobs;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      jobs: 'Jobs',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      jobs: ListJobsByGroupResponseBodyJobs,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.jobs && typeof (this.jobs as any).validate === 'function') {
      (this.jobs as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListJobsByGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListJobsByGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListJobsByGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOutboundCallNumbersRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOutboundCallNumbersResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  outboundCallNumbers?: ListOutboundCallNumbersResponseBodyOutboundCallNumbers;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      outboundCallNumbers: 'OutboundCallNumbers',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      outboundCallNumbers: ListOutboundCallNumbersResponseBodyOutboundCallNumbers,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.outboundCallNumbers && typeof (this.outboundCallNumbers as any).validate === 'function') {
      (this.outboundCallNumbers as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListOutboundCallNumbersResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListOutboundCallNumbersResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListOutboundCallNumbersResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListResourceTagsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * instance
   */
  resourceType?: string;
  static names(): { [key: string]: string } {
    return {
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      resourceType: 'ResourceType',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageNumber: 'number',
      pageSize: 'number',
      resourceType: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListResourceTagsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * {}
   */
  resourceTags?: ListResourceTagsResponseBodyResourceTags;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      resourceTags: 'ResourceTags',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      resourceTags: ListResourceTagsResponseBodyResourceTags,
      success: 'boolean',
    };
  }

  validate() {
    if(this.resourceTags && typeof (this.resourceTags as any).validate === 'function') {
      (this.resourceTags as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListResourceTagsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListResourceTagsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListResourceTagsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSchedulerInstancesRequest extends $dara.Model {
  /**
   * @example
   * 1092143545442862
   */
  instanceOwnerId?: number;
  static names(): { [key: string]: string } {
    return {
      instanceOwnerId: 'InstanceOwnerId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceOwnerId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSchedulerInstancesResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  schedulerInstances?: ListSchedulerInstancesResponseBodySchedulerInstances[];
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      schedulerInstances: 'SchedulerInstances',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      schedulerInstances: { 'type': 'array', 'itemType': ListSchedulerInstancesResponseBodySchedulerInstances },
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.schedulerInstances)) {
      $dara.Model.validateArray(this.schedulerInstances);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListSchedulerInstancesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListSchedulerInstancesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListSchedulerInstancesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptPublishHistoriesRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * b0f35dd1-0337-402e-9c4f-3a6c2426950a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptPublishHistoriesResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  scriptPublishHistories?: ListScriptPublishHistoriesResponseBodyScriptPublishHistories;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      scriptPublishHistories: 'ScriptPublishHistories',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      scriptPublishHistories: ListScriptPublishHistoriesResponseBodyScriptPublishHistories,
      success: 'boolean',
    };
  }

  validate() {
    if(this.scriptPublishHistories && typeof (this.scriptPublishHistories as any).validate === 'function') {
      (this.scriptPublishHistories as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptPublishHistoriesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListScriptPublishHistoriesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListScriptPublishHistoriesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptRecordingRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c209abb3-6804-4a75-b2c7-dd55c8c61b6a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  refIdsJson?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * d004cfd2-6a81-491c-83c6-cbe186620c95
   */
  scriptId?: string;
  search?: string;
  /**
   * @example
   * [
   *      "8"
   * ]
   */
  statesJson?: string;
  /**
   * @example
   * ["d17d5bfa-4972-4389-9718-f9602edabe48"]
   */
  uuidsJson?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      refIdsJson: 'RefIdsJson',
      scriptId: 'ScriptId',
      search: 'Search',
      statesJson: 'StatesJson',
      uuidsJson: 'UuidsJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      refIdsJson: 'string',
      scriptId: 'string',
      search: 'string',
      statesJson: 'string',
      uuidsJson: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptRecordingResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  scriptRecordings?: ListScriptRecordingResponseBodyScriptRecordings[];
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 99
   */
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      scriptRecordings: 'ScriptRecordings',
      success: 'Success',
      totalCount: 'TotalCount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      requestId: 'string',
      scriptRecordings: { 'type': 'array', 'itemType': ListScriptRecordingResponseBodyScriptRecordings },
      success: 'boolean',
      totalCount: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.scriptRecordings)) {
      $dara.Model.validateArray(this.scriptRecordings);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptRecordingResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListScriptRecordingResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListScriptRecordingResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptVoiceConfigsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 20
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * f95c7ca6-872c-4765-8493-165a8dfc682d
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptVoiceConfigsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  scriptVoiceConfigs?: ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      scriptVoiceConfigs: 'ScriptVoiceConfigs',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      scriptVoiceConfigs: ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs,
      success: 'boolean',
    };
  }

  validate() {
    if(this.scriptVoiceConfigs && typeof (this.scriptVoiceConfigs as any).validate === 'function') {
      (this.scriptVoiceConfigs as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptVoiceConfigsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListScriptVoiceConfigsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListScriptVoiceConfigsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * bdd49242-114c-4045-b1d1-25ccc1756c75
   */
  instanceId?: string;
  nluEngine?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  scriptName?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      nluEngine: 'NluEngine',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      scriptName: 'ScriptName',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      nluEngine: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      scriptName: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  scripts?: ListScriptsResponseBodyScripts;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      scripts: 'Scripts',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      scripts: ListScriptsResponseBodyScripts,
      success: 'boolean',
    };
  }

  validate() {
    if(this.scripts && typeof (this.scripts as any).validate === 'function') {
      (this.scripts as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListScriptsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListScriptsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListScriptsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagResourcesRequest extends $dara.Model {
  /**
   * @example
   * b949ae1f-01dc-4191-ae5a-70fbe6772fd8
   */
  nextToken?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-shanghai
   */
  regionId?: string;
  /**
   * @example
   * ResourceId.1=b949ae1f-01dc-4191-ae5a-70fbe6772fd8
   */
  resourceId?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * instance
   */
  resourceType?: string;
  tag?: ListTagResourcesRequestTag[];
  static names(): { [key: string]: string } {
    return {
      nextToken: 'NextToken',
      regionId: 'RegionId',
      resourceId: 'ResourceId',
      resourceType: 'ResourceType',
      tag: 'Tag',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nextToken: 'string',
      regionId: 'string',
      resourceId: { 'type': 'array', 'itemType': 'string' },
      resourceType: 'string',
      tag: { 'type': 'array', 'itemType': ListTagResourcesRequestTag },
    };
  }

  validate() {
    if(Array.isArray(this.resourceId)) {
      $dara.Model.validateArray(this.resourceId);
    }
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagResourcesResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * b949ae1f-01dc-4191-ae5a-70fbe6772fd8
   */
  nextToken?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  tagResources?: ListTagResourcesResponseBodyTagResources[];
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      nextToken: 'NextToken',
      requestId: 'RequestId',
      success: 'Success',
      tagResources: 'TagResources',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      nextToken: 'string',
      requestId: 'string',
      success: 'boolean',
      tagResources: { 'type': 'array', 'itemType': ListTagResourcesResponseBodyTagResources },
    };
  }

  validate() {
    if(Array.isArray(this.tagResources)) {
      $dara.Model.validateArray(this.tagResources);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagResourcesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListTagResourcesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListTagResourcesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 8fa1953f-4a84-46d8-b80c-8ce9cf684fb3
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 8a4c6d3d-5ed6-44ca-b779-16c20f8862be
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  tagGroups?: ListTagsResponseBodyTagGroups[];
  tags?: ListTagsResponseBodyTags[];
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      tagGroups: 'TagGroups',
      tags: 'Tags',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      tagGroups: { 'type': 'array', 'itemType': ListTagsResponseBodyTagGroups },
      tags: { 'type': 'array', 'itemType': ListTagsResponseBodyTags },
    };
  }

  validate() {
    if(Array.isArray(this.tagGroups)) {
      $dara.Model.validateArray(this.tagGroups);
    }
    if(Array.isArray(this.tags)) {
      $dara.Model.validateArray(this.tags);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListTagsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ListTagsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ListTagsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAgentProfileRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 37ca3ca1ac4b4e57adf3da5b5d939d04
   */
  agentProfileId?: string;
  /**
   * @example
   * []
   */
  apiPluginJson?: string;
  description?: string;
  faqCategoryIds?: number[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174952ab-9825-4cc9-a5e2-de82d7fa4cdd
   */
  instanceId?: string;
  /**
   * @example
   * [{"type":"TransferToAgent","instructions":[{"code":"Transfer0","skillGroupId":"123","skillGroupName":"123"}],"timeoutEnable":false},{"type":"CollectNumber","instructions":[]}]
   */
  instructionJson?: string;
  labelsJson?: string;
  /**
   * @example
   * model_001
   */
  model?: string;
  /**
   * @example
   * {}
   */
  modelConfig?: string;
  prompt?: string;
  promptJson?: string;
  scenario?: string;
  variablesJson?: string;
  static names(): { [key: string]: string } {
    return {
      agentProfileId: 'AgentProfileId',
      apiPluginJson: 'ApiPluginJson',
      description: 'Description',
      faqCategoryIds: 'FaqCategoryIds',
      instanceId: 'InstanceId',
      instructionJson: 'InstructionJson',
      labelsJson: 'LabelsJson',
      model: 'Model',
      modelConfig: 'ModelConfig',
      prompt: 'Prompt',
      promptJson: 'PromptJson',
      scenario: 'Scenario',
      variablesJson: 'VariablesJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentProfileId: 'string',
      apiPluginJson: 'string',
      description: 'string',
      faqCategoryIds: { 'type': 'array', 'itemType': 'number' },
      instanceId: 'string',
      instructionJson: 'string',
      labelsJson: 'string',
      model: 'string',
      modelConfig: 'string',
      prompt: 'string',
      promptJson: 'string',
      scenario: 'string',
      variablesJson: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.faqCategoryIds)) {
      $dara.Model.validateArray(this.faqCategoryIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAgentProfileShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 37ca3ca1ac4b4e57adf3da5b5d939d04
   */
  agentProfileId?: string;
  /**
   * @example
   * []
   */
  apiPluginJson?: string;
  description?: string;
  faqCategoryIdsShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174952ab-9825-4cc9-a5e2-de82d7fa4cdd
   */
  instanceId?: string;
  /**
   * @example
   * [{"type":"TransferToAgent","instructions":[{"code":"Transfer0","skillGroupId":"123","skillGroupName":"123"}],"timeoutEnable":false},{"type":"CollectNumber","instructions":[]}]
   */
  instructionJson?: string;
  labelsJson?: string;
  /**
   * @example
   * model_001
   */
  model?: string;
  /**
   * @example
   * {}
   */
  modelConfig?: string;
  prompt?: string;
  promptJson?: string;
  scenario?: string;
  variablesJson?: string;
  static names(): { [key: string]: string } {
    return {
      agentProfileId: 'AgentProfileId',
      apiPluginJson: 'ApiPluginJson',
      description: 'Description',
      faqCategoryIdsShrink: 'FaqCategoryIds',
      instanceId: 'InstanceId',
      instructionJson: 'InstructionJson',
      labelsJson: 'LabelsJson',
      model: 'Model',
      modelConfig: 'ModelConfig',
      prompt: 'Prompt',
      promptJson: 'PromptJson',
      scenario: 'Scenario',
      variablesJson: 'VariablesJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentProfileId: 'string',
      apiPluginJson: 'string',
      description: 'string',
      faqCategoryIdsShrink: 'string',
      instanceId: 'string',
      instructionJson: 'string',
      labelsJson: 'string',
      model: 'string',
      modelConfig: 'string',
      prompt: 'string',
      promptJson: 'string',
      scenario: 'string',
      variablesJson: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAgentProfileResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: ModifyAgentProfileResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: ModifyAgentProfileResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAgentProfileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyAgentProfileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyAgentProfileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAnnotationMissionRequest extends $dara.Model {
  /**
   * @example
   * c88cc004-de69-4eee-aa5f-2efed533a54e
   */
  annotationMissionId?: string;
  annotationMissionName?: string;
  /**
   * @example
   * 2
   */
  annotationStatus?: number;
  /**
   * @example
   * false
   */
  delete?: boolean;
  static names(): { [key: string]: string } {
    return {
      annotationMissionId: 'AnnotationMissionId',
      annotationMissionName: 'AnnotationMissionName',
      annotationStatus: 'AnnotationStatus',
      delete: 'Delete',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionId: 'string',
      annotationMissionName: 'string',
      annotationStatus: 'number',
      delete: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAnnotationMissionResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: ModifyAnnotationMissionResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * The operation is not allowed. User state (DIALING) does not meet expectations (READY).
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: ModifyAnnotationMissionResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyAnnotationMissionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyAnnotationMissionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyAnnotationMissionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBatchJobsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  batchJobName?: string;
  /**
   * @example
   * ["95187"]
   */
  callingNumber?: string[];
  description?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174952ab-9825-4cc9-a5e2-de82d7fa4cdd
   */
  instanceId?: string;
  /**
   * @example
   * 52e80b02-0126-4556-a1e6-ef5b3747ed53/a9a3ddc7-d7d7-48cd-82b5-b31bb5510e71_2a66f8ad-dfbb-4980-9b84-439171295a11.xlsx
   */
  jobFilePath?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c6a668d1-3145-4048-9101-cb3678bb8884
   */
  jobGroupId?: string;
  /**
   * @example
   * c6a668d1-3145-4048-9101-cb3678bb8884
   */
  scenarioId?: string;
  /**
   * @example
   * 7d820242-f4f0-4d2e-ae35-b424c41cbc5b
   */
  scriptId?: string;
  strategyJson?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * false
   */
  submitted?: boolean;
  static names(): { [key: string]: string } {
    return {
      batchJobName: 'BatchJobName',
      callingNumber: 'CallingNumber',
      description: 'Description',
      instanceId: 'InstanceId',
      jobFilePath: 'JobFilePath',
      jobGroupId: 'JobGroupId',
      scenarioId: 'ScenarioId',
      scriptId: 'ScriptId',
      strategyJson: 'StrategyJson',
      submitted: 'Submitted',
    };
  }

  static types(): { [key: string]: any } {
    return {
      batchJobName: 'string',
      callingNumber: { 'type': 'array', 'itemType': 'string' },
      description: 'string',
      instanceId: 'string',
      jobFilePath: 'string',
      jobGroupId: 'string',
      scenarioId: 'string',
      scriptId: 'string',
      strategyJson: 'string',
      submitted: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.callingNumber)) {
      $dara.Model.validateArray(this.callingNumber);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBatchJobsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  jobGroup?: ModifyBatchJobsResponseBodyJobGroup;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      jobGroup: 'JobGroup',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      jobGroup: ModifyBatchJobsResponseBodyJobGroup,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.jobGroup && typeof (this.jobGroup as any).validate === 'function') {
      (this.jobGroup as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBatchJobsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyBatchJobsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyBatchJobsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  intentDefinition?: ModifyBeebotIntentRequestIntentDefinition;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentDefinition: 'IntentDefinition',
      intentId: 'IntentId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentDefinition: ModifyBeebotIntentRequestIntentDefinition,
      intentId: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    if(this.intentDefinition && typeof (this.intentDefinition as any).validate === 'function') {
      (this.intentDefinition as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  intentDefinitionShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentDefinitionShrink: 'IntentDefinition',
      intentId: 'IntentId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentDefinitionShrink: 'string',
      intentId: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentResponseBody extends $dara.Model {
  /**
   * @example
   * A1F21BF2-CB21-1968-8039-C74699E7DDEB
   */
  beebotRequestId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * 10717802
   */
  intentId?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 8785D26A-7406-50A1-9653-1313C292E23B
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      beebotRequestId: 'BeebotRequestId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      intentId: 'IntentId',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beebotRequestId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      intentId: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyBeebotIntentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyBeebotIntentResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentLgfRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  lgfDefinition?: ModifyBeebotIntentLgfRequestLgfDefinition;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 5666117
   */
  lgfId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      lgfDefinition: 'LgfDefinition',
      lgfId: 'LgfId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      lgfDefinition: ModifyBeebotIntentLgfRequestLgfDefinition,
      lgfId: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    if(this.lgfDefinition && typeof (this.lgfDefinition as any).validate === 'function') {
      (this.lgfDefinition as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentLgfShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  lgfDefinitionShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 5666117
   */
  lgfId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      lgfDefinitionShrink: 'LgfDefinition',
      lgfId: 'LgfId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      lgfDefinitionShrink: 'string',
      lgfId: 'number',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentLgfResponseBody extends $dara.Model {
  /**
   * @example
   * A1F21BF2-CB21-1968-8039-C74699E7DDEB
   */
  beebotRequestId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * 5666117
   */
  lgfId?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 302C67BD-19FF-5B66-A45D-F95544604155
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      beebotRequestId: 'BeebotRequestId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      lgfId: 'LgfId',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beebotRequestId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      lgfId: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentLgfResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyBeebotIntentLgfResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyBeebotIntentLgfResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentUserSayRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userSayDefinition?: ModifyBeebotIntentUserSayRequestUserSayDefinition;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 17448458
   */
  userSayId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
      userSayDefinition: 'UserSayDefinition',
      userSayId: 'UserSayId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
      userSayDefinition: ModifyBeebotIntentUserSayRequestUserSayDefinition,
      userSayId: 'string',
    };
  }

  validate() {
    if(this.userSayDefinition && typeof (this.userSayDefinition as any).validate === 'function') {
      (this.userSayDefinition as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentUserSayShrinkRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e5035654-1745-484a-8c5b-165f7c7bcd79
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c5c5d8c0-c0f1-48a7-be2b-dc46006d888a
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  userSayDefinitionShrink?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 17448458
   */
  userSayId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
      userSayDefinitionShrink: 'UserSayDefinition',
      userSayId: 'UserSayId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
      userSayDefinitionShrink: 'string',
      userSayId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentUserSayResponseBody extends $dara.Model {
  /**
   * @example
   * A1F21BF2-CB21-1968-8039-C74699E7DDEB
   */
  beebotRequestId?: string;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * Success
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 17448458
   */
  userSayId?: number;
  static names(): { [key: string]: string } {
    return {
      beebotRequestId: 'BeebotRequestId',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      userSayId: 'UserSayId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      beebotRequestId: 'string',
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      userSayId: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyBeebotIntentUserSayResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyBeebotIntentUserSayResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyBeebotIntentUserSayResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDialogueFlowRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  dialogueFlowDefinition?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 390515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  dialogueFlowId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * da37319b-6c83-4268-9f19-814aed62e401
   */
  instanceId?: string;
  /**
   * @example
   * true
   */
  isDrafted?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * b0f35dd1-0337-402e-9c4f-3a6c2426950a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      dialogueFlowDefinition: 'DialogueFlowDefinition',
      dialogueFlowId: 'DialogueFlowId',
      instanceId: 'InstanceId',
      isDrafted: 'IsDrafted',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dialogueFlowDefinition: 'string',
      dialogueFlowId: 'string',
      instanceId: 'string',
      isDrafted: 'boolean',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDialogueFlowResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  dialogueFlowDefinition?: string;
  /**
   * @example
   * 390515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  dialogueFlowId?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Succcess
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      dialogueFlowDefinition: 'DialogueFlowDefinition',
      dialogueFlowId: 'DialogueFlowId',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dialogueFlowDefinition: 'string',
      dialogueFlowId: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyDialogueFlowResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyDialogueFlowResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyDialogueFlowResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyEmptyNumberNoMoreCallsInfoRequest extends $dara.Model {
  /**
   * @example
   * true
   */
  emptyNumberNoMoreCalls?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 6cc9f5ca-2cb6-4cc7-a46b-2bbfd3e61b22
   */
  entryId?: string;
  /**
   * @example
   * 2
   */
  strategyLevel?: number;
  static names(): { [key: string]: string } {
    return {
      emptyNumberNoMoreCalls: 'EmptyNumberNoMoreCalls',
      entryId: 'EntryId',
      strategyLevel: 'StrategyLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      emptyNumberNoMoreCalls: 'boolean',
      entryId: 'string',
      strategyLevel: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyEmptyNumberNoMoreCallsInfoResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyEmptyNumberNoMoreCallsInfoResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyEmptyNumberNoMoreCallsInfoResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyEmptyNumberNoMoreCallsInfoResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyGlobalQuestionRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  answers?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ad80de88-1661-445a-92ec-bf88dc45d581
   */
  globalQuestionId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  globalQuestionName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * COMMON
   */
  globalQuestionType?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 8fa1953f-4a84-46d8-b80c-8ce9cf684fb3
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  questions?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 19ac2375-53e3-477f-abe9-6cd334227981
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      answers: 'Answers',
      globalQuestionId: 'GlobalQuestionId',
      globalQuestionName: 'GlobalQuestionName',
      globalQuestionType: 'GlobalQuestionType',
      instanceId: 'InstanceId',
      questions: 'Questions',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      answers: 'string',
      globalQuestionId: 'string',
      globalQuestionName: 'string',
      globalQuestionType: 'string',
      instanceId: 'string',
      questions: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyGlobalQuestionResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * ad80de88-1661-445a-92ec-bf88dc45d581
   */
  dialogueQuestionId?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      dialogueQuestionId: 'DialogueQuestionId',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      dialogueQuestionId: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyGlobalQuestionResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyGlobalQuestionResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyGlobalQuestionResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyInstanceRequest extends $dara.Model {
  /**
   * @example
   * ["95187"]
   */
  callingNumber?: string[];
  instanceDescription?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 90515b5-6115-4ccf-83e2-52d5bfaf2ddf
   */
  instanceId?: string;
  instanceName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 5
   */
  maxConcurrentConversation?: number;
  static names(): { [key: string]: string } {
    return {
      callingNumber: 'CallingNumber',
      instanceDescription: 'InstanceDescription',
      instanceId: 'InstanceId',
      instanceName: 'InstanceName',
      maxConcurrentConversation: 'MaxConcurrentConversation',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumber: { 'type': 'array', 'itemType': 'string' },
      instanceDescription: 'string',
      instanceId: 'string',
      instanceName: 'string',
      maxConcurrentConversation: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.callingNumber)) {
      $dara.Model.validateArray(this.callingNumber);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyInstanceResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * {\\"InstanceId\\": \\"ob369xifpi2074\\", \\"AutoUpgradeObVersion\\": False}
   */
  instance?: ModifyInstanceResponseBodyInstance;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      instance: 'Instance',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      instance: ModifyInstanceResponseBodyInstance,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.instance && typeof (this.instance as any).validate === 'function') {
      (this.instance as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyInstanceResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyInstanceResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyInstanceResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyIntentRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 8fa1953f-4a84-46d8-b80c-8ce9cf684fb3
   */
  instanceId?: string;
  intentDescription?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 3b9a2b33-50d4-4576-8c68-22498f4bf731
   */
  intentId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  intentName?: string;
  /**
   * @example
   * []
   */
  keywords?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 9b70486f-b1c2-429c-8a24-62798015ab1b
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  utterances?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      intentDescription: 'IntentDescription',
      intentId: 'IntentId',
      intentName: 'IntentName',
      keywords: 'Keywords',
      scriptId: 'ScriptId',
      utterances: 'Utterances',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      intentDescription: 'string',
      intentId: 'string',
      intentName: 'string',
      keywords: 'string',
      scriptId: 'string',
      utterances: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyIntentResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * 3b9a2b33-50d4-4576-8c68-22498f4bf731
   */
  intentId?: string;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      intentId: 'IntentId',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      intentId: 'string',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyIntentResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyIntentResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyIntentResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyJobGroupRequest extends $dara.Model {
  callingNumber?: string[];
  description?: string;
  flashSmsExtras?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174952ab-9825-4cc9-a5e2-de82d7fa4cdd
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 3edc0260-6f7c-4de4-8535-09372240618b
   */
  jobGroupId?: string;
  /**
   * @example
   * Draft
   */
  jobGroupStatus?: string;
  /**
   * @example
   * 1
   */
  minConcurrency?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  name?: string;
  priority?: string;
  recallCallingNumber?: string[];
  /**
   * @example
   * {\\"emptyNumberIgnore\\":false,\\"inArrearsIgnore\\":false,\\"outOfServiceIgnore\\":false}
   */
  recallStrategyJson?: string;
  /**
   * @example
   * 25
   */
  ringingDuration?: number;
  /**
   * @example
   * c6a668d1-3145-4048-9101-cb3678bb8884
   */
  scenarioId?: string;
  /**
   * @example
   * 5a3940ce-a12f-4222-9f0f-605a9b89ea7c
   */
  scriptId?: string;
  /**
   * @example
   * {\\"maxAttemptsPerDay\\":\\"0\\",\\"minAttemptInterval\\":\\"5\\",\\"Id\\":\\"689fc584-7f9f-4dc2-933d-8711beef7b15\\"}
   */
  strategyJson?: string;
  static names(): { [key: string]: string } {
    return {
      callingNumber: 'CallingNumber',
      description: 'Description',
      flashSmsExtras: 'FlashSmsExtras',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      jobGroupStatus: 'JobGroupStatus',
      minConcurrency: 'MinConcurrency',
      name: 'Name',
      priority: 'Priority',
      recallCallingNumber: 'RecallCallingNumber',
      recallStrategyJson: 'RecallStrategyJson',
      ringingDuration: 'RingingDuration',
      scenarioId: 'ScenarioId',
      scriptId: 'ScriptId',
      strategyJson: 'StrategyJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumber: { 'type': 'array', 'itemType': 'string' },
      description: 'string',
      flashSmsExtras: 'string',
      instanceId: 'string',
      jobGroupId: 'string',
      jobGroupStatus: 'string',
      minConcurrency: 'number',
      name: 'string',
      priority: 'string',
      recallCallingNumber: { 'type': 'array', 'itemType': 'string' },
      recallStrategyJson: 'string',
      ringingDuration: 'number',
      scenarioId: 'string',
      scriptId: 'string',
      strategyJson: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.callingNumber)) {
      $dara.Model.validateArray(this.callingNumber);
    }
    if(Array.isArray(this.recallCallingNumber)) {
      $dara.Model.validateArray(this.recallCallingNumber);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyJobGroupResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  jobGroup?: ModifyJobGroupResponseBodyJobGroup;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      jobGroup: 'JobGroup',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      jobGroup: ModifyJobGroupResponseBodyJobGroup,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.jobGroup && typeof (this.jobGroup as any).validate === 'function') {
      (this.jobGroup as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyJobGroupResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyJobGroupResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyJobGroupResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyOutboundCallNumberRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 52e80b02-0126-4556-a1e6-ef5b3747ed53/a9a3ddc7-d7d7-48cd-82b5-b31bb5510e71_2a66f8ad-dfbb-4980-9b84-439171295a11.xlsx
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10088
   */
  number?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * fa0e21e9-caab-4629-9121-1e341243d599
   */
  outboundCallNumberId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  rateLimitCount?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 100
   */
  rateLimitPeriod?: number;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      number: 'Number',
      outboundCallNumberId: 'OutboundCallNumberId',
      rateLimitCount: 'RateLimitCount',
      rateLimitPeriod: 'RateLimitPeriod',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      number: 'string',
      outboundCallNumberId: 'string',
      rateLimitCount: 'number',
      rateLimitPeriod: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyOutboundCallNumberResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  outboundCallNumber?: ModifyOutboundCallNumberResponseBodyOutboundCallNumber;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      outboundCallNumber: 'OutboundCallNumber',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      outboundCallNumber: ModifyOutboundCallNumberResponseBodyOutboundCallNumber,
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.outboundCallNumber && typeof (this.outboundCallNumber as any).validate === 'function') {
      (this.outboundCallNumber as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyOutboundCallNumberResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyOutboundCallNumberResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyOutboundCallNumberResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyScriptRequest extends $dara.Model {
  agentId?: number;
  agentKey?: string;
  agentLlm?: boolean;
  /**
   * @example
   * {\\"AppKey\\":\\"kknxKIhTTUcpCzYX\\"}
   */
  asrConfig?: string;
  chatConfig?: string;
  /**
   * @example
   * chatbot-cn-iFZfi7eq6e
   */
  chatbotId?: string;
  /**
   * @example
   * true
   */
  emotionEnable?: boolean;
  /**
   * @remarks
   * This parameter is required.
   */
  industry?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c6320d3c-fa45-4011-b3b1-acdfabe3a8c6
   */
  instanceId?: string;
  /**
   * @example
   * true
   */
  longWaitEnable?: boolean;
  miniPlaybackConfigListJsonString?: string;
  /**
   * @example
   * true
   */
  miniPlaybackEnable?: boolean;
  /**
   * @example
   * true
   */
  newBargeInEnable?: boolean;
  nlsConfig?: string;
  nluAccessType?: string;
  nluEngine?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  scene?: string;
  scriptContent?: string[];
  scriptDescription?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c153d0d8-ba04-41c0-8632-453944c9dd0b
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  scriptName?: string;
  scriptWaveform?: string[];
  /**
   * @example
   * {\\"voice\\":\\"siyue\\",\\"volume\\":\\"50\\",\\"speechRate\\":\\"-150\\",\\"pitchRate\\":\\"0\\"}
   */
  ttsConfig?: string;
  static names(): { [key: string]: string } {
    return {
      agentId: 'AgentId',
      agentKey: 'AgentKey',
      agentLlm: 'AgentLlm',
      asrConfig: 'AsrConfig',
      chatConfig: 'ChatConfig',
      chatbotId: 'ChatbotId',
      emotionEnable: 'EmotionEnable',
      industry: 'Industry',
      instanceId: 'InstanceId',
      longWaitEnable: 'LongWaitEnable',
      miniPlaybackConfigListJsonString: 'MiniPlaybackConfigListJsonString',
      miniPlaybackEnable: 'MiniPlaybackEnable',
      newBargeInEnable: 'NewBargeInEnable',
      nlsConfig: 'NlsConfig',
      nluAccessType: 'NluAccessType',
      nluEngine: 'NluEngine',
      scene: 'Scene',
      scriptContent: 'ScriptContent',
      scriptDescription: 'ScriptDescription',
      scriptId: 'ScriptId',
      scriptName: 'ScriptName',
      scriptWaveform: 'ScriptWaveform',
      ttsConfig: 'TtsConfig',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentId: 'number',
      agentKey: 'string',
      agentLlm: 'boolean',
      asrConfig: 'string',
      chatConfig: 'string',
      chatbotId: 'string',
      emotionEnable: 'boolean',
      industry: 'string',
      instanceId: 'string',
      longWaitEnable: 'boolean',
      miniPlaybackConfigListJsonString: 'string',
      miniPlaybackEnable: 'boolean',
      newBargeInEnable: 'boolean',
      nlsConfig: 'string',
      nluAccessType: 'string',
      nluEngine: 'string',
      scene: 'string',
      scriptContent: { 'type': 'array', 'itemType': 'string' },
      scriptDescription: 'string',
      scriptId: 'string',
      scriptName: 'string',
      scriptWaveform: { 'type': 'array', 'itemType': 'string' },
      ttsConfig: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.scriptContent)) {
      $dara.Model.validateArray(this.scriptContent);
    }
    if(Array.isArray(this.scriptWaveform)) {
      $dara.Model.validateArray(this.scriptWaveform);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyScriptResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  script?: ModifyScriptResponseBodyScript;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      script: 'Script',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      script: ModifyScriptResponseBodyScript,
      success: 'boolean',
    };
  }

  validate() {
    if(this.script && typeof (this.script as any).validate === 'function') {
      (this.script as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyScriptResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyScriptResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyScriptResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyScriptVoiceConfigRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * bdd49242-114c-4045-b1d1-25ccc1756c75
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1d7a26e0-628b-4c3c-9918-7f2e23273f54
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e15cc646-50e5-4bc0-87ec-e4f2d1063b90
   */
  scriptVoiceConfigId?: string;
  scriptWaveformRelation?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * WAVEFORM
   */
  type?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
      scriptVoiceConfigId: 'ScriptVoiceConfigId',
      scriptWaveformRelation: 'ScriptWaveformRelation',
      type: 'Type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
      scriptVoiceConfigId: 'string',
      scriptWaveformRelation: 'string',
      type: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyScriptVoiceConfigResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  scriptVoiceConfig?: ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      scriptVoiceConfig: 'ScriptVoiceConfig',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      scriptVoiceConfig: ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig,
      success: 'boolean',
    };
  }

  validate() {
    if(this.scriptVoiceConfig && typeof (this.scriptVoiceConfig as any).validate === 'function') {
      (this.scriptVoiceConfig as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyScriptVoiceConfigResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyScriptVoiceConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyScriptVoiceConfigResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTTSConfigRequest extends $dara.Model {
  /**
   * @example
   * 99****Aw
   */
  appKey?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 27244bae-e446-4811-bb1d-f8a07b525af0
   */
  instanceId?: string;
  /**
   * @example
   * Managed
   */
  nlsServiceType?: string;
  /**
   * @remarks
   * 语调 [-500,500]之间整数。默认值为0。
   * 
   * 大于0表示升高音高。
   * 
   * 小于0表示降低音高。
   */
  pitchRate?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1f1a2ba0-b3e7-4ff9-baf1-6dc8aeac0791
   */
  scriptId?: string;
  speechRate?: string;
  voice?: string;
  /**
   * @example
   * 100
   */
  volume?: string;
  static names(): { [key: string]: string } {
    return {
      appKey: 'AppKey',
      instanceId: 'InstanceId',
      nlsServiceType: 'NlsServiceType',
      pitchRate: 'PitchRate',
      scriptId: 'ScriptId',
      speechRate: 'SpeechRate',
      voice: 'Voice',
      volume: 'Volume',
    };
  }

  static types(): { [key: string]: any } {
    return {
      appKey: 'string',
      instanceId: 'string',
      nlsServiceType: 'string',
      pitchRate: 'string',
      scriptId: 'string',
      speechRate: 'string',
      voice: 'string',
      volume: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTTSConfigResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * f765d3ee-ec03-4765-b235-6877501d99d1
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  TTSConfig?: ModifyTTSConfigResponseBodyTTSConfig;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      TTSConfig: 'TTSConfig',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      TTSConfig: ModifyTTSConfigResponseBodyTTSConfig,
    };
  }

  validate() {
    if(this.TTSConfig && typeof (this.TTSConfig as any).validate === 'function') {
      (this.TTSConfig as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTTSConfigResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyTTSConfigResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyTTSConfigResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTagGroupsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cd560e89-0459-4c8a-ad98-47d713e4abd6
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 365b955d-6f4d-4ab5-a6e1-9a301307f4b1
   */
  scriptId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  tagGroups?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  tags?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
      tagGroups: 'TagGroups',
      tags: 'Tags',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
      tagGroups: 'string',
      tags: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTagGroupsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 5a865b03-d2b9-4ef9-be98-f21fa0d93744
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  tagGroups?: ModifyTagGroupsResponseBodyTagGroups[];
  tags?: ModifyTagGroupsResponseBodyTags[];
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      tagGroups: 'TagGroups',
      tags: 'Tags',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      tagGroups: { 'type': 'array', 'itemType': ModifyTagGroupsResponseBodyTagGroups },
      tags: { 'type': 'array', 'itemType': ModifyTagGroupsResponseBodyTags },
    };
  }

  validate() {
    if(Array.isArray(this.tagGroups)) {
      $dara.Model.validateArray(this.tagGroups);
    }
    if(Array.isArray(this.tags)) {
      $dara.Model.validateArray(this.tags);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ModifyTagGroupsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ModifyTagGroupsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ModifyTagGroupsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PublishScriptRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  description?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 3677fe8b-276f-4541-babf-b9d3082a31ba
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PublishScriptResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PublishScriptResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: PublishScriptResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: PublishScriptResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PublishScriptForDebugRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 0bfe34e5-a7fa-4aac-91d4-bd798518dffc
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PublishScriptForDebugResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 5a865b03-d2b9-4ef9-be98-f21fa0d93744
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PublishScriptForDebugResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: PublishScriptForDebugResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: PublishScriptForDebugResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsRequest extends $dara.Model {
  contactName?: string;
  /**
   * @example
   * 1579077794665
   */
  endTime?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @example
   * 994b8baf-7ef8-480c-b141-b7b6db77c4df
   */
  jobGroupId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 135****8888
   */
  phoneNumber?: string;
  /**
   * @example
   * b0f35dd1-0337-402e-9c4f-3a6c2426950a
   */
  scenarioId?: string;
  /**
   * @example
   * 1579068424883
   */
  startTime?: number;
  /**
   * @example
   * start
   */
  timeAlignment?: string;
  static names(): { [key: string]: string } {
    return {
      contactName: 'ContactName',
      endTime: 'EndTime',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      phoneNumber: 'PhoneNumber',
      scenarioId: 'ScenarioId',
      startTime: 'StartTime',
      timeAlignment: 'TimeAlignment',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactName: 'string',
      endTime: 'number',
      instanceId: 'string',
      jobGroupId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      phoneNumber: 'string',
      scenarioId: 'string',
      startTime: 'number',
      timeAlignment: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  jobs?: QueryJobsResponseBodyJobs;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      jobs: 'Jobs',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      jobs: QueryJobsResponseBodyJobs,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.jobs && typeof (this.jobs as any).validate === 'function') {
      (this.jobs as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: QueryJobsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: QueryJobsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsWithResultRequest extends $dara.Model {
  endActualTimeFilter?: number;
  /**
   * @example
   * true
   */
  hasAnsweredFilter?: boolean;
  /**
   * @example
   * false
   */
  hasHangUpByRejectionFilter?: boolean;
  /**
   * @example
   * true
   */
  hasReachedEndOfFlowFilter?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 9d53cd72-4050-4419-8c17-acc0bf158147
   */
  instanceId?: string;
  /**
   * @example
   * ["NoAnswer"]
   */
  jobFailureReasonsFilter?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ad16fc35-d824-4102-a606-2be51c1aa6dd
   */
  jobGroupId?: string;
  /**
   * @example
   * Succeeded
   */
  jobStatusFilter?: string;
  /**
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 1882020****
   */
  queryText?: string;
  startActualTimeFilter?: number;
  /**
   * @example
   * Succeeded
   */
  taskStatusFilter?: string;
  static names(): { [key: string]: string } {
    return {
      endActualTimeFilter: 'EndActualTimeFilter',
      hasAnsweredFilter: 'HasAnsweredFilter',
      hasHangUpByRejectionFilter: 'HasHangUpByRejectionFilter',
      hasReachedEndOfFlowFilter: 'HasReachedEndOfFlowFilter',
      instanceId: 'InstanceId',
      jobFailureReasonsFilter: 'JobFailureReasonsFilter',
      jobGroupId: 'JobGroupId',
      jobStatusFilter: 'JobStatusFilter',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      queryText: 'QueryText',
      startActualTimeFilter: 'StartActualTimeFilter',
      taskStatusFilter: 'TaskStatusFilter',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endActualTimeFilter: 'number',
      hasAnsweredFilter: 'boolean',
      hasHangUpByRejectionFilter: 'boolean',
      hasReachedEndOfFlowFilter: 'boolean',
      instanceId: 'string',
      jobFailureReasonsFilter: 'string',
      jobGroupId: 'string',
      jobStatusFilter: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      queryText: 'string',
      startActualTimeFilter: 'number',
      taskStatusFilter: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsWithResultResponseBody extends $dara.Model {
  /**
   * @remarks
   * Code
   * 
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  jobs?: QueryJobsWithResultResponseBodyJobs;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 9bdaa1d1-a036-4451-ab11-ca0373679091
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  variableNames?: string[];
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      jobs: 'Jobs',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      variableNames: 'VariableNames',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      jobs: QueryJobsWithResultResponseBodyJobs,
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      variableNames: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(this.jobs && typeof (this.jobs as any).validate === 'function') {
      (this.jobs as any).validate();
    }
    if(Array.isArray(this.variableNames)) {
      $dara.Model.validateArray(this.variableNames);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryJobsWithResultResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: QueryJobsWithResultResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: QueryJobsWithResultResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryScriptWaveformsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  scriptContent?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptContent: 'ScriptContent',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptContent: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryScriptWaveformsResponseBody extends $dara.Model {
  code?: string;
  httpStatusCode?: number;
  message?: string;
  requestId?: string;
  scriptWaveforms?: QueryScriptWaveformsResponseBodyScriptWaveforms[];
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      scriptWaveforms: 'ScriptWaveforms',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      scriptWaveforms: { 'type': 'array', 'itemType': QueryScriptWaveformsResponseBodyScriptWaveforms },
      success: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.scriptWaveforms)) {
      $dara.Model.validateArray(this.scriptWaveforms);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryScriptWaveformsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: QueryScriptWaveformsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: QueryScriptWaveformsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryScriptsByStatusRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 361c8a53-0e29-42f3-8aa7-c7752d010399
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1
   */
  pageNumber?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @remarks
   * This parameter is required.
   */
  statusList?: string[];
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      pageNumber: 'PageNumber',
      pageSize: 'PageSize',
      statusList: 'StatusList',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      statusList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.statusList)) {
      $dara.Model.validateArray(this.statusList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryScriptsByStatusResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  scripts?: QueryScriptsByStatusResponseBodyScripts;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      scripts: 'Scripts',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      scripts: QueryScriptsByStatusResponseBodyScripts,
      success: 'boolean',
    };
  }

  validate() {
    if(this.scripts && typeof (this.scripts as any).validate === 'function') {
      (this.scripts as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryScriptsByStatusResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: QueryScriptsByStatusResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: QueryScriptsByStatusResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RecordFailureRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1579055782000
   */
  actualTime?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 4f21446e-324e-46f2-bf62-7f341fb004ea
   */
  callId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 135815****
   */
  calledNumber?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 10086
   */
  callingNumber?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * OutOfService
   */
  dispositionCode?: string;
  exceptionCodes?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 9ab43460-c0b9-40e2-8447-48d82c97fc67
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * d2295c0e-3bc3-48a5-9f56-b185db2be909
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      actualTime: 'ActualTime',
      callId: 'CallId',
      calledNumber: 'CalledNumber',
      callingNumber: 'CallingNumber',
      dispositionCode: 'DispositionCode',
      exceptionCodes: 'ExceptionCodes',
      instanceId: 'InstanceId',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualTime: 'number',
      callId: 'string',
      calledNumber: 'string',
      callingNumber: 'string',
      dispositionCode: 'string',
      exceptionCodes: 'string',
      instanceId: 'string',
      taskId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RecordFailureResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RecordFailureResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RecordFailureResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RecordFailureResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResumeJobsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * true
   */
  all?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @example
   * de48407d-309e-451a-81ec-6fb11f8fdbf3
   */
  jobGroupId?: string;
  /**
   * @example
   * b72425bd-7871-4050-838e-033d80d754b7
   */
  jobId?: string[];
  /**
   * @example
   * d5971d98-7312-4f0e-a918-a17d67133e28
   */
  jobReferenceId?: string[];
  /**
   * @example
   * b016fbdb-b81c-4c06-8870-cb36b8783b6d
   */
  scenarioId?: string;
  static names(): { [key: string]: string } {
    return {
      all: 'All',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      jobId: 'JobId',
      jobReferenceId: 'JobReferenceId',
      scenarioId: 'ScenarioId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      all: 'boolean',
      instanceId: 'string',
      jobGroupId: 'string',
      jobId: { 'type': 'array', 'itemType': 'string' },
      jobReferenceId: { 'type': 'array', 'itemType': 'string' },
      scenarioId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.jobId)) {
      $dara.Model.validateArray(this.jobId);
    }
    if(Array.isArray(this.jobReferenceId)) {
      $dara.Model.validateArray(this.jobReferenceId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResumeJobsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResumeJobsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: ResumeJobsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: ResumeJobsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RollbackScriptRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1579055782000
   */
  rollbackVersion?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 303523b1-0094-4ebe-b9ed-c23d11c91d61
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      rollbackVersion: 'RollbackVersion',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      rollbackVersion: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RollbackScriptResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RollbackScriptResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: RollbackScriptResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: RollbackScriptResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAfterAnswerDelayPlaybackRequest extends $dara.Model {
  /**
   * @example
   * 1000
   */
  afterAnswerDelayPlayback?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 980116ec-2d3d-4747-8059-dc25e7af8501
   */
  entryId?: string;
  /**
   * @example
   * 2
   */
  strategyLevel?: number;
  static names(): { [key: string]: string } {
    return {
      afterAnswerDelayPlayback: 'AfterAnswerDelayPlayback',
      entryId: 'EntryId',
      strategyLevel: 'StrategyLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      afterAnswerDelayPlayback: 'number',
      entryId: 'string',
      strategyLevel: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAfterAnswerDelayPlaybackResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAfterAnswerDelayPlaybackResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SaveAfterAnswerDelayPlaybackResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SaveAfterAnswerDelayPlaybackResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionSessionListRequest extends $dara.Model {
  /**
   * @example
   * 1198938
   */
  agentId?: string;
  /**
   * @example
   * 9137ab9c27044921860030adf8590ec4_p_outbound_public
   */
  agentKey?: string;
  /**
   * @example
   * 1
   */
  annotationMissionDataSourceType?: number;
  annotationMissionSessionList?: SaveAnnotationMissionSessionListRequestAnnotationMissionSessionList[];
  /**
   * @example
   * []
   */
  annotationMissionSessionListJsonString?: string;
  /**
   * @example
   * 0
   */
  environment?: number;
  userNick?: string;
  static names(): { [key: string]: string } {
    return {
      agentId: 'AgentId',
      agentKey: 'AgentKey',
      annotationMissionDataSourceType: 'AnnotationMissionDataSourceType',
      annotationMissionSessionList: 'AnnotationMissionSessionList',
      annotationMissionSessionListJsonString: 'AnnotationMissionSessionListJsonString',
      environment: 'Environment',
      userNick: 'UserNick',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agentId: 'string',
      agentKey: 'string',
      annotationMissionDataSourceType: 'number',
      annotationMissionSessionList: { 'type': 'array', 'itemType': SaveAnnotationMissionSessionListRequestAnnotationMissionSessionList },
      annotationMissionSessionListJsonString: 'string',
      environment: 'number',
      userNick: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.annotationMissionSessionList)) {
      $dara.Model.validateArray(this.annotationMissionSessionList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionSessionListResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: SaveAnnotationMissionSessionListResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * 76E93048-F90F-57B7-BD46-6097611A706D
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: SaveAnnotationMissionSessionListResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionSessionListResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SaveAnnotationMissionSessionListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SaveAnnotationMissionSessionListResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionTagInfoListRequest extends $dara.Model {
  annotationMissionTagInfoList?: SaveAnnotationMissionTagInfoListRequestAnnotationMissionTagInfoList[];
  /**
   * @example
   * []
   */
  annotationMissionTagInfoListJsonString?: string;
  /**
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @example
   * false
   */
  reset?: boolean;
  static names(): { [key: string]: string } {
    return {
      annotationMissionTagInfoList: 'AnnotationMissionTagInfoList',
      annotationMissionTagInfoListJsonString: 'AnnotationMissionTagInfoListJsonString',
      instanceId: 'InstanceId',
      reset: 'Reset',
    };
  }

  static types(): { [key: string]: any } {
    return {
      annotationMissionTagInfoList: { 'type': 'array', 'itemType': SaveAnnotationMissionTagInfoListRequestAnnotationMissionTagInfoList },
      annotationMissionTagInfoListJsonString: 'string',
      instanceId: 'string',
      reset: 'boolean',
    };
  }

  validate() {
    if(Array.isArray(this.annotationMissionTagInfoList)) {
      $dara.Model.validateArray(this.annotationMissionTagInfoList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionTagInfoListResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  data?: SaveAnnotationMissionTagInfoListResponseBodyData;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  message?: string;
  /**
   * @example
   * 1B356EDC-F69A-53B0-B4AF-2AC42200684E
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      data: 'Data',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      data: SaveAnnotationMissionTagInfoListResponseBodyData,
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    if(this.data && typeof (this.data as any).validate === 'function') {
      (this.data as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAnnotationMissionTagInfoListResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SaveAnnotationMissionTagInfoListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SaveAnnotationMissionTagInfoListResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveBaseStrategyPeriodRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * fe51eca2-a904-4b4d-b3ff-31be334b9500
   */
  entryId?: string;
  /**
   * @example
   * false
   */
  onlyWeekdays?: boolean;
  onlyWorkdays?: boolean;
  /**
   * @example
   * 2
   */
  strategyLevel?: number;
  /**
   * @example
   * []
   */
  workingTime?: string[];
  /**
   * @example
   * [{\\"beginTime\\":\\"09:00:00\\",\\"beginTimeMillis\\":324000000000,\\"endTime\\":\\"21:00:00\\",\\"endTimeMillis\\":756000000000}]
   */
  workingTimeFramesJson?: string;
  static names(): { [key: string]: string } {
    return {
      entryId: 'EntryId',
      onlyWeekdays: 'OnlyWeekdays',
      onlyWorkdays: 'OnlyWorkdays',
      strategyLevel: 'StrategyLevel',
      workingTime: 'WorkingTime',
      workingTimeFramesJson: 'WorkingTimeFramesJson',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entryId: 'string',
      onlyWeekdays: 'boolean',
      onlyWorkdays: 'boolean',
      strategyLevel: 'number',
      workingTime: { 'type': 'array', 'itemType': 'string' },
      workingTimeFramesJson: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.workingTime)) {
      $dara.Model.validateArray(this.workingTime);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveBaseStrategyPeriodResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveBaseStrategyPeriodResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SaveBaseStrategyPeriodResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SaveBaseStrategyPeriodResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveContactBlockListRequest extends $dara.Model {
  /**
   * @example
   * []
   */
  contactBlockListList?: string[];
  /**
   * @example
   * {}
   */
  contactBlockListsJson?: string;
  /**
   * @example
   * c3c92de8-e4bd-4db4-a962-50f8acce40bc
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      contactBlockListList: 'ContactBlockListList',
      contactBlockListsJson: 'ContactBlockListsJson',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactBlockListList: { 'type': 'array', 'itemType': 'string' },
      contactBlockListsJson: 'string',
      instanceId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.contactBlockListList)) {
      $dara.Model.validateArray(this.contactBlockListList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveContactBlockListResponseBody extends $dara.Model {
  /**
   * @example
   * 5
   */
  affectedRows?: number;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      affectedRows: 'AffectedRows',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      affectedRows: 'number',
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveContactBlockListResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SaveContactBlockListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SaveContactBlockListResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveContactWhiteListRequest extends $dara.Model {
  /**
   * @example
   * {}
   */
  contactWhiteListList?: string[];
  /**
   * @example
   * {}
   */
  contactWhiteListsJson?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c415bb6c-2e6f-46aa-afd9-3b65b6dbe2bc
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      contactWhiteListList: 'ContactWhiteListList',
      contactWhiteListsJson: 'ContactWhiteListsJson',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contactWhiteListList: { 'type': 'array', 'itemType': 'string' },
      contactWhiteListsJson: 'string',
      instanceId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.contactWhiteListList)) {
      $dara.Model.validateArray(this.contactWhiteListList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveContactWhiteListResponseBody extends $dara.Model {
  /**
   * @example
   * 10
   */
  affectedRows?: number;
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      affectedRows: 'AffectedRows',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      affectedRows: 'number',
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveContactWhiteListResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SaveContactWhiteListResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SaveContactWhiteListResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveEffectiveDaysRequest extends $dara.Model {
  /**
   * @example
   * 30
   */
  effectiveDays?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e90b5b8e-c8b4-4182-b28d-a5aa81685e49
   */
  entryId?: string;
  /**
   * @example
   * 2
   */
  strategyLevel?: number;
  static names(): { [key: string]: string } {
    return {
      effectiveDays: 'EffectiveDays',
      entryId: 'EntryId',
      strategyLevel: 'StrategyLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      effectiveDays: 'number',
      entryId: 'string',
      strategyLevel: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveEffectiveDaysResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveEffectiveDaysResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SaveEffectiveDaysResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SaveEffectiveDaysResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveMaxAttemptsPerDayRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c8bf820a-6a8a-47bc-99bf-97593df8faa8
   */
  entryId?: string;
  /**
   * @example
   * 5
   */
  maxAttemptsPerDay?: number;
  /**
   * @example
   * 2
   */
  strategyLevel?: number;
  static names(): { [key: string]: string } {
    return {
      entryId: 'EntryId',
      maxAttemptsPerDay: 'MaxAttemptsPerDay',
      strategyLevel: 'StrategyLevel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      entryId: 'string',
      maxAttemptsPerDay: 'number',
      strategyLevel: 'number',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveMaxAttemptsPerDayResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveMaxAttemptsPerDayResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SaveMaxAttemptsPerDayResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SaveMaxAttemptsPerDayResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchTaskRequest extends $dara.Model {
  /**
   * @example
   * 1646582400000
   */
  actualTimeGte?: number;
  /**
   * @example
   * 1643126399000
   */
  actualTimeLte?: number;
  /**
   * @example
   * 12341155
   */
  callDurationGte?: number;
  /**
   * @example
   * 12341155
   */
  callDurationLte?: number;
  /**
   * @example
   * 15126426342
   */
  calledNumber?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * d481cebe-0bb6-4d13-9649-42ce5074fb75
   */
  instanceId?: string;
  /**
   * @example
   * 3a30ae7c-27b2-4305-9444-7185ced9d51f
   */
  jobGroupId?: string;
  jobGroupNameQuery?: string;
  /**
   * @example
   * 11994321-e6bc-47bb-8b1c-8eef8f2f768b
   */
  jobId?: string;
  /**
   * @example
   * Succeeded
   */
  jobStatusStringList?: string;
  /**
   * @example
   * AVD-2021-39685
   */
  otherId?: string;
  /**
   * @example
   * 2
   */
  pageIndex?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 10
   */
  recordingDurationGte?: number;
  /**
   * @example
   * 60
   */
  recordingDurationLte?: number;
  scriptNameQuery?: string;
  /**
   * @example
   * actualTime
   */
  sortBy?: string;
  /**
   * @example
   * desc
   */
  sortOrder?: string;
  /**
   * @example
   * 1646792941
   */
  taskCreateTimeGte?: number;
  /**
   * @example
   * 1646792941
   */
  taskCreateTimeLte?: number;
  /**
   * @example
   * 744b27f3-437f-4a8c-a181-f668e492fd24
   */
  taskId?: string;
  /**
   * @example
   * Succeeded
   */
  taskStatusStringList?: string;
  /**
   * @example
   * 12341155
   */
  userIdMatch?: string;
  static names(): { [key: string]: string } {
    return {
      actualTimeGte: 'ActualTimeGte',
      actualTimeLte: 'ActualTimeLte',
      callDurationGte: 'CallDurationGte',
      callDurationLte: 'CallDurationLte',
      calledNumber: 'CalledNumber',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      jobGroupNameQuery: 'JobGroupNameQuery',
      jobId: 'JobId',
      jobStatusStringList: 'JobStatusStringList',
      otherId: 'OtherId',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
      recordingDurationGte: 'RecordingDurationGte',
      recordingDurationLte: 'RecordingDurationLte',
      scriptNameQuery: 'ScriptNameQuery',
      sortBy: 'SortBy',
      sortOrder: 'SortOrder',
      taskCreateTimeGte: 'TaskCreateTimeGte',
      taskCreateTimeLte: 'TaskCreateTimeLte',
      taskId: 'TaskId',
      taskStatusStringList: 'TaskStatusStringList',
      userIdMatch: 'UserIdMatch',
    };
  }

  static types(): { [key: string]: any } {
    return {
      actualTimeGte: 'number',
      actualTimeLte: 'number',
      callDurationGte: 'number',
      callDurationLte: 'number',
      calledNumber: 'string',
      instanceId: 'string',
      jobGroupId: 'string',
      jobGroupNameQuery: 'string',
      jobId: 'string',
      jobStatusStringList: 'string',
      otherId: 'string',
      pageIndex: 'number',
      pageSize: 'number',
      recordingDurationGte: 'number',
      recordingDurationLte: 'number',
      scriptNameQuery: 'string',
      sortBy: 'string',
      sortOrder: 'string',
      taskCreateTimeGte: 'number',
      taskCreateTimeLte: 'number',
      taskId: 'string',
      taskStatusStringList: 'string',
      userIdMatch: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchTaskResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 0
   */
  pageIndex?: number;
  /**
   * @example
   * 10
   */
  pageSize?: number;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * []
   */
  searchTaskInfoList?: SearchTaskResponseBodySearchTaskInfoList[];
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 2
   */
  total?: number;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      pageIndex: 'PageIndex',
      pageSize: 'PageSize',
      requestId: 'RequestId',
      searchTaskInfoList: 'SearchTaskInfoList',
      success: 'Success',
      total: 'Total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      pageIndex: 'number',
      pageSize: 'number',
      requestId: 'string',
      searchTaskInfoList: { 'type': 'array', 'itemType': SearchTaskResponseBodySearchTaskInfoList },
      success: 'boolean',
      total: 'number',
    };
  }

  validate() {
    if(Array.isArray(this.searchTaskInfoList)) {
      $dara.Model.validateArray(this.searchTaskInfoList);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SearchTaskResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SearchTaskResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SearchTaskResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartJobRequest extends $dara.Model {
  /**
   * @example
   * 10086
   */
  callingNumber?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * da37319b-6c83-4268-9f19-814aed62e401
   */
  instanceId?: string;
  /**
   * @example
   * 4f21446e-324e-46f2-bf62-7f341fb004ea
   */
  jobGroupId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  jobJson?: string;
  /**
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  scenarioId?: string;
  /**
   * @example
   * b9ff4e88-65f9-4eb3-987c-11ba51f3f24d
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      callingNumber: 'CallingNumber',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      jobJson: 'JobJson',
      scenarioId: 'ScenarioId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callingNumber: { 'type': 'array', 'itemType': 'string' },
      instanceId: 'string',
      jobGroupId: 'string',
      jobJson: 'string',
      scenarioId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.callingNumber)) {
      $dara.Model.validateArray(this.callingNumber);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartJobResponseBody extends $dara.Model {
  callIds?: StartJobResponseBodyCallIds[];
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 8a621aa1-d2e7-43f3-b54d-8830af73c468
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  taskIds?: StartJobResponseBodyTaskIds[];
  static names(): { [key: string]: string } {
    return {
      callIds: 'CallIds',
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      taskIds: 'TaskIds',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callIds: { 'type': 'array', 'itemType': StartJobResponseBodyCallIds },
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      taskIds: { 'type': 'array', 'itemType': StartJobResponseBodyTaskIds },
    };
  }

  validate() {
    if(Array.isArray(this.callIds)) {
      $dara.Model.validateArray(this.callIds);
    }
    if(Array.isArray(this.taskIds)) {
      $dara.Model.validateArray(this.taskIds);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartJobResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: StartJobResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: StartJobResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitBatchJobsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 6b3ea2a1-32b3-4041-842b-9bde5de9dda0
   */
  jobGroupId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      jobGroupId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitBatchJobsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitBatchJobsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SubmitBatchJobsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SubmitBatchJobsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitRecordingRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * {"contactId":"3d35c0487cc041abb7ad0ce61752601f","duration":27,"fileName":"ce2659e5-a20b-4f8e-91b5-5cd909c6b96e_3d35c0487cc041abb7ad0ce61752601f.wav","filePath":"oss://ForCompatibility/waveforms/","startTime":1579057583670,"type":"Merged"}
   */
  mergedRecording?: string;
  /**
   * @example
   * {"contactId":"3d35c0487cc041abb7ad0ce61752601f","duration":27,"fileName":"ce2659e5-a20b-4f8e-91b5-5cd909c6b96e_3d35c0487cc041abb7ad0ce61752601f.wav","filePath":"oss://ForCompatibility/waveforms/","startTime":1579057583670,"type":"Source"}
   */
  resourceRecording?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e4e2a770-b97b-465a-80d8-06dca008c503
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      mergedRecording: 'MergedRecording',
      resourceRecording: 'ResourceRecording',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      mergedRecording: 'string',
      resourceRecording: 'string',
      taskId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitRecordingResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitRecordingResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SubmitRecordingResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SubmitRecordingResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitScriptReviewRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  description?: string;
  from?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * b0f35dd1-0337-402e-9c4f-3a6c2426950a
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      description: 'Description',
      from: 'From',
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      description: 'string',
      from: 'string',
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitScriptReviewResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitScriptReviewResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SubmitScriptReviewResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SubmitScriptReviewResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendCallRequest extends $dara.Model {
  /**
   * @example
   * []
   */
  calledNumbers?: string[];
  /**
   * @example
   * f745881b-343d-43e4-9c51-31b7b063031c
   */
  groupId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * a5fc6490-ef1e-4666-870a-07a4e586c414
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      calledNumbers: 'CalledNumbers',
      groupId: 'GroupId',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      calledNumbers: { 'type': 'array', 'itemType': 'string' },
      groupId: 'string',
      instanceId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.calledNumbers)) {
      $dara.Model.validateArray(this.calledNumbers);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendCallResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendCallResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SuspendCallResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SuspendCallResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendCallWithFileRequest extends $dara.Model {
  /**
   * @example
   * xxxx
   */
  filePath?: string;
  /**
   * @example
   * 0197261b-30e6-467b-83d6-7f72af868b03
   */
  groupId?: string;
  /**
   * @example
   * a4274627-265f-4e14-b2d6-4ee7d4f8593e
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      filePath: 'FilePath',
      groupId: 'GroupId',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      filePath: 'string',
      groupId: 'string',
      instanceId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendCallWithFileResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendCallWithFileResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SuspendCallWithFileResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SuspendCallWithFileResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendJobsRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * false
   */
  all?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * af81a389-91f0-4157-8d82-720edd02b66a
   */
  instanceId?: string;
  /**
   * @example
   * 6b3ea2a1-32b3-4041-842b-9bde5de9dda0
   */
  jobGroupId?: string;
  /**
   * @example
   * 11994321-e6bc-47bb-8b1c-8eef8f2f768b
   */
  jobId?: string[];
  /**
   * @example
   * de3ab269-6746-477c-b13d-bd49f13202c2
   */
  jobReferenceId?: string[];
  /**
   * @example
   * 4b6dd926-3cc3-4111-a333-15d9b006fe81
   */
  scenarioId?: string;
  static names(): { [key: string]: string } {
    return {
      all: 'All',
      instanceId: 'InstanceId',
      jobGroupId: 'JobGroupId',
      jobId: 'JobId',
      jobReferenceId: 'JobReferenceId',
      scenarioId: 'ScenarioId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      all: 'boolean',
      instanceId: 'string',
      jobGroupId: 'string',
      jobId: { 'type': 'array', 'itemType': 'string' },
      jobReferenceId: { 'type': 'array', 'itemType': 'string' },
      scenarioId: 'string',
    };
  }

  validate() {
    if(Array.isArray(this.jobId)) {
      $dara.Model.validateArray(this.jobId);
    }
    if(Array.isArray(this.jobReferenceId)) {
      $dara.Model.validateArray(this.jobReferenceId);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendJobsResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SuspendJobsResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: SuspendJobsResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: SuspendJobsResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TagResourcesRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-shanghai
   */
  regionId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * ResourceId.1=b949ae1f-01dc-4191-ae5a-70fbe6772fd8
   */
  resourceId?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * instance
   */
  resourceType?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  tag?: TagResourcesRequestTag[];
  static names(): { [key: string]: string } {
    return {
      regionId: 'RegionId',
      resourceId: 'ResourceId',
      resourceType: 'ResourceType',
      tag: 'Tag',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
      resourceId: { 'type': 'array', 'itemType': 'string' },
      resourceType: 'string',
      tag: { 'type': 'array', 'itemType': TagResourcesRequestTag },
    };
  }

  validate() {
    if(Array.isArray(this.resourceId)) {
      $dara.Model.validateArray(this.resourceId);
    }
    if(Array.isArray(this.tag)) {
      $dara.Model.validateArray(this.tag);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TagResourcesResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TagResourcesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TagResourcesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TagResourcesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TaskPreparingRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 33040b9a-b04b-452f-b554-cd6f3a15f850
   */
  instanceId?: string;
  /**
   * @example
   * 1971226538081821
   */
  instanceOwnerId?: number;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c9e42cd7-ba99-4872-9802-e05719ab051c
   */
  jobId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      instanceOwnerId: 'InstanceOwnerId',
      jobId: 'JobId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      instanceOwnerId: 'number',
      jobId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TaskPreparingResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Succes
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * e4e2a770-b97b-465a-80d8-06dca008c503
   */
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      taskId: 'TaskId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      taskId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TaskPreparingResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TaskPreparingResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TaskPreparingResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TerminateCallRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 1528189846043
   */
  callId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 174952ab-9825-4cc9-a5e2-de82d7fa4cdd
   */
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      callId: 'CallId',
      instanceId: 'InstanceId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      callId: 'string',
      instanceId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TerminateCallResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class TerminateCallResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: TerminateCallResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: TerminateCallResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UntagResourcesRequest extends $dara.Model {
  /**
   * @example
   * false
   */
  all?: boolean;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cn-shanghai
   */
  regionId?: string;
  /**
   * @remarks
   * This parameter is required.
   */
  resourceId?: string[];
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * instance
   */
  resourceType?: string;
  tagKey?: string[];
  static names(): { [key: string]: string } {
    return {
      all: 'All',
      regionId: 'RegionId',
      resourceId: 'ResourceId',
      resourceType: 'ResourceType',
      tagKey: 'TagKey',
    };
  }

  static types(): { [key: string]: any } {
    return {
      all: 'boolean',
      regionId: 'string',
      resourceId: { 'type': 'array', 'itemType': 'string' },
      resourceType: 'string',
      tagKey: { 'type': 'array', 'itemType': 'string' },
    };
  }

  validate() {
    if(Array.isArray(this.resourceId)) {
      $dara.Model.validateArray(this.resourceId);
    }
    if(Array.isArray(this.tagKey)) {
      $dara.Model.validateArray(this.tagKey);
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UntagResourcesResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UntagResourcesResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UntagResourcesResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UntagResourcesResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadScriptRecordingRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   */
  content?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * cab_script_recording/upload/88a56c18-3dc8-4338-9116-911deb169780/hello.wav
   */
  fileId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * hello.wav
   */
  fileName?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * c209abb3-6804-4a75-b2c7-dd55c8c61b6a
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * d004cfd2-6a81-491c-83c6-cbe186620c95
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      content: 'Content',
      fileId: 'FileId',
      fileName: 'FileName',
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      fileId: 'string',
      fileName: 'string',
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadScriptRecordingResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  /**
   * @example
   * true
   */
  success?: boolean;
  /**
   * @example
   * 5feaab8a-97fd-4720-8108-79e017f2d3ac
   */
  uuid?: string;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      success: 'Success',
      uuid: 'Uuid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      success: 'boolean',
      uuid: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadScriptRecordingResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: UploadScriptRecordingResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: UploadScriptRecordingResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class WithdrawScriptReviewRequest extends $dara.Model {
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * 38d2e8ed-04e9-4dac-83b5-a8e57642ef13
   */
  instanceId?: string;
  /**
   * @remarks
   * This parameter is required.
   * 
   * @example
   * e4e2a770-b97b-465a-80d8-06dca008c503
   */
  scriptId?: string;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'InstanceId',
      scriptId: 'ScriptId',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      scriptId: 'string',
    };
  }

  validate() {
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class WithdrawScriptReviewResponseBody extends $dara.Model {
  /**
   * @example
   * OK
   */
  code?: string;
  /**
   * @example
   * 200
   */
  httpStatusCode?: number;
  /**
   * @example
   * Success
   */
  message?: string;
  /**
   * @example
   * 254EB995-DEDF-48A4-9101-9CA5B72FFBCC
   */
  requestId?: string;
  script?: WithdrawScriptReviewResponseBodyScript;
  /**
   * @example
   * true
   */
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      code: 'Code',
      httpStatusCode: 'HttpStatusCode',
      message: 'Message',
      requestId: 'RequestId',
      script: 'Script',
      success: 'Success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      code: 'string',
      httpStatusCode: 'number',
      message: 'string',
      requestId: 'string',
      script: WithdrawScriptReviewResponseBodyScript,
      success: 'boolean',
    };
  }

  validate() {
    if(this.script && typeof (this.script as any).validate === 'function') {
      (this.script as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class WithdrawScriptReviewResponse extends $dara.Model {
  headers?: { [key: string]: string };
  statusCode?: number;
  body?: WithdrawScriptReviewResponseBody;
  static names(): { [key: string]: string } {
    return {
      headers: 'headers',
      statusCode: 'statusCode',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
      statusCode: 'number',
      body: WithdrawScriptReviewResponseBody,
    };
  }

  validate() {
    if(this.headers) {
      $dara.Model.validateMap(this.headers);
    }
    if(this.body && typeof (this.body as any).validate === 'function') {
      (this.body as any).validate();
    }
    super.validate();
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}


export default class Client extends OpenApi {

  constructor(config: $OpenApiUtil.Config) {
    super(config);
    this._endpointRule = "regional";
    this.checkConfig(config);
    this._endpoint = this.getEndpoint("outboundbot", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
  }


  getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {[key: string ]: string}, endpoint: string): string {
    if (!$dara.isNull(endpoint)) {
      return endpoint;
    }

    if (!$dara.isNull(endpointMap) && !$dara.isNull(endpointMap[regionId])) {
      return endpointMap[regionId];
    }

    return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
  }

  /**
   * 生效号码库解析结果
   * 
   * @param request - ApplyNumberDistrictInfoParsingResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ApplyNumberDistrictInfoParsingResultResponse
   */
  async applyNumberDistrictInfoParsingResultWithOptions(request: ApplyNumberDistrictInfoParsingResultRequest, runtime: $dara.RuntimeOptions): Promise<ApplyNumberDistrictInfoParsingResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.versionId)) {
      query["VersionId"] = request.versionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ApplyNumberDistrictInfoParsingResult",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ApplyNumberDistrictInfoParsingResultResponse>(await this.callApi(params, req, runtime), new ApplyNumberDistrictInfoParsingResultResponse({}));
  }

  /**
   * 生效号码库解析结果
   * 
   * @param request - ApplyNumberDistrictInfoParsingResultRequest
   * @returns ApplyNumberDistrictInfoParsingResultResponse
   */
  async applyNumberDistrictInfoParsingResult(request: ApplyNumberDistrictInfoParsingResultRequest): Promise<ApplyNumberDistrictInfoParsingResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.applyNumberDistrictInfoParsingResultWithOptions(request, runtime);
  }

  /**
   * @param request - AssignJobsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns AssignJobsResponse
   */
  async assignJobsWithOptions(request: AssignJobsRequest, runtime: $dara.RuntimeOptions): Promise<AssignJobsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callingNumber)) {
      query["CallingNumber"] = request.callingNumber;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.isAsynchrony)) {
      query["IsAsynchrony"] = request.isAsynchrony;
    }

    if (!$dara.isNull(request.jobDataParsingTaskId)) {
      query["JobDataParsingTaskId"] = request.jobDataParsingTaskId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    if (!$dara.isNull(request.jobsJson)) {
      query["JobsJson"] = request.jobsJson;
    }

    if (!$dara.isNull(request.rosterType)) {
      query["RosterType"] = request.rosterType;
    }

    if (!$dara.isNull(request.strategyJson)) {
      query["StrategyJson"] = request.strategyJson;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "AssignJobs",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<AssignJobsResponse>(await this.callApi(params, req, runtime), new AssignJobsResponse({}));
  }

  /**
   * @param request - AssignJobsRequest
   * @returns AssignJobsResponse
   */
  async assignJobs(request: AssignJobsRequest): Promise<AssignJobsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.assignJobsWithOptions(request, runtime);
  }

  /**
   * @param request - CancelJobsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CancelJobsResponse
   */
  async cancelJobsWithOptions(request: CancelJobsRequest, runtime: $dara.RuntimeOptions): Promise<CancelJobsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.all)) {
      query["All"] = request.all;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.jobReferenceId)) {
      query["JobReferenceId"] = request.jobReferenceId;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CancelJobs",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CancelJobsResponse>(await this.callApi(params, req, runtime), new CancelJobsResponse({}));
  }

  /**
   * @param request - CancelJobsRequest
   * @returns CancelJobsResponse
   */
  async cancelJobs(request: CancelJobsRequest): Promise<CancelJobsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.cancelJobsWithOptions(request, runtime);
  }

  /**
   * @param request - ChangeResourceGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ChangeResourceGroupResponse
   */
  async changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, runtime: $dara.RuntimeOptions): Promise<ChangeResourceGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.newResourceGroupId)) {
      query["NewResourceGroupId"] = request.newResourceGroupId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ChangeResourceGroup",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ChangeResourceGroupResponse>(await this.callApi(params, req, runtime), new ChangeResourceGroupResponse({}));
  }

  /**
   * @param request - ChangeResourceGroupRequest
   * @returns ChangeResourceGroupResponse
   */
  async changeResourceGroup(request: ChangeResourceGroupRequest): Promise<ChangeResourceGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.changeResourceGroupWithOptions(request, runtime);
  }

  /**
   * @param request - CreateAgentProfileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAgentProfileResponse
   */
  async createAgentProfileWithOptions(request: CreateAgentProfileRequest, runtime: $dara.RuntimeOptions): Promise<CreateAgentProfileResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.agentProfileTemplateId)) {
      body["AgentProfileTemplateId"] = request.agentProfileTemplateId;
    }

    if (!$dara.isNull(request.appIp)) {
      body["AppIp"] = request.appIp;
    }

    if (!$dara.isNull(request.description)) {
      body["Description"] = request.description;
    }

    if (!$dara.isNull(request.faqCategoryIds)) {
      body["FaqCategoryIds"] = request.faqCategoryIds;
    }

    if (!$dara.isNull(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instructionJson)) {
      body["InstructionJson"] = request.instructionJson;
    }

    if (!$dara.isNull(request.labelsJson)) {
      body["LabelsJson"] = request.labelsJson;
    }

    if (!$dara.isNull(request.model)) {
      body["Model"] = request.model;
    }

    if (!$dara.isNull(request.modelConfig)) {
      body["ModelConfig"] = request.modelConfig;
    }

    if (!$dara.isNull(request.prompt)) {
      body["Prompt"] = request.prompt;
    }

    if (!$dara.isNull(request.promptJson)) {
      body["PromptJson"] = request.promptJson;
    }

    if (!$dara.isNull(request.scenario)) {
      body["Scenario"] = request.scenario;
    }

    if (!$dara.isNull(request.scriptId)) {
      body["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.variablesJson)) {
      body["VariablesJson"] = request.variablesJson;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAgentProfile",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateAgentProfileResponse>(await this.callApi(params, req, runtime), new CreateAgentProfileResponse({}));
  }

  /**
   * @param request - CreateAgentProfileRequest
   * @returns CreateAgentProfileResponse
   */
  async createAgentProfile(request: CreateAgentProfileRequest): Promise<CreateAgentProfileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAgentProfileWithOptions(request, runtime);
  }

  /**
   * @param tmpReq - CreateAnnotationMissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateAnnotationMissionResponse
   */
  async createAnnotationMissionWithOptions(tmpReq: CreateAnnotationMissionRequest, runtime: $dara.RuntimeOptions): Promise<CreateAnnotationMissionResponse> {
    tmpReq.validate();
    let request = new CreateAnnotationMissionShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.annotationMissionDebugDataSourceList)) {
      request.annotationMissionDebugDataSourceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.annotationMissionDebugDataSourceList, "AnnotationMissionDebugDataSourceList", "json");
    }

    let query = { };
    if (!$dara.isNull(request.agentId)) {
      query["AgentId"] = request.agentId;
    }

    if (!$dara.isNull(request.agentKey)) {
      query["AgentKey"] = request.agentKey;
    }

    if (!$dara.isNull(request.annotationMissionDataSourceType)) {
      query["AnnotationMissionDataSourceType"] = request.annotationMissionDataSourceType;
    }

    if (!$dara.isNull(request.annotationMissionDebugDataSourceListShrink)) {
      query["AnnotationMissionDebugDataSourceList"] = request.annotationMissionDebugDataSourceListShrink;
    }

    if (!$dara.isNull(request.annotationMissionDebugDataSourceListJsonString)) {
      query["AnnotationMissionDebugDataSourceListJsonString"] = request.annotationMissionDebugDataSourceListJsonString;
    }

    if (!$dara.isNull(request.annotationMissionName)) {
      query["AnnotationMissionName"] = request.annotationMissionName;
    }

    if (!$dara.isNull(request.chatbotId)) {
      query["ChatbotId"] = request.chatbotId;
    }

    if (!$dara.isNull(request.conversationTimeEndFilter)) {
      query["ConversationTimeEndFilter"] = request.conversationTimeEndFilter;
    }

    if (!$dara.isNull(request.conversationTimeStartFilter)) {
      query["ConversationTimeStartFilter"] = request.conversationTimeStartFilter;
    }

    if (!$dara.isNull(request.excludeOtherSession)) {
      query["ExcludeOtherSession"] = request.excludeOtherSession;
    }

    if (!$dara.isNull(request.finished)) {
      query["Finished"] = request.finished;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.samplingCount)) {
      query["SamplingCount"] = request.samplingCount;
    }

    if (!$dara.isNull(request.samplingRate)) {
      query["SamplingRate"] = request.samplingRate;
    }

    if (!$dara.isNull(request.samplingType)) {
      query["SamplingType"] = request.samplingType;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.sessionEndReasonFilterList)) {
      query["SessionEndReasonFilterList"] = request.sessionEndReasonFilterList;
    }

    if (!$dara.isNull(request.sessionEndReasonFilterListJsonString)) {
      query["SessionEndReasonFilterListJsonString"] = request.sessionEndReasonFilterListJsonString;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateAnnotationMission",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateAnnotationMissionResponse>(await this.callApi(params, req, runtime), new CreateAnnotationMissionResponse({}));
  }

  /**
   * @param request - CreateAnnotationMissionRequest
   * @returns CreateAnnotationMissionResponse
   */
  async createAnnotationMission(request: CreateAnnotationMissionRequest): Promise<CreateAnnotationMissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createAnnotationMissionWithOptions(request, runtime);
  }

  /**
   * @param request - CreateBatchJobsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateBatchJobsResponse
   */
  async createBatchJobsWithOptions(request: CreateBatchJobsRequest, runtime: $dara.RuntimeOptions): Promise<CreateBatchJobsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.batchJobDescription)) {
      query["BatchJobDescription"] = request.batchJobDescription;
    }

    if (!$dara.isNull(request.batchJobName)) {
      query["BatchJobName"] = request.batchJobName;
    }

    if (!$dara.isNull(request.callingNumber)) {
      query["CallingNumber"] = request.callingNumber;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobFilePath)) {
      query["JobFilePath"] = request.jobFilePath;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.strategyJson)) {
      query["StrategyJson"] = request.strategyJson;
    }

    if (!$dara.isNull(request.submitted)) {
      query["Submitted"] = request.submitted;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateBatchJobs",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateBatchJobsResponse>(await this.callApi(params, req, runtime), new CreateBatchJobsResponse({}));
  }

  /**
   * @param request - CreateBatchJobsRequest
   * @returns CreateBatchJobsResponse
   */
  async createBatchJobs(request: CreateBatchJobsRequest): Promise<CreateBatchJobsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createBatchJobsWithOptions(request, runtime);
  }

  /**
   * CreateBatchRepeatJob
   * 
   * @param request - CreateBatchRepeatJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateBatchRepeatJobResponse
   */
  async createBatchRepeatJobWithOptions(request: CreateBatchRepeatJobRequest, runtime: $dara.RuntimeOptions): Promise<CreateBatchRepeatJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callingNumber)) {
      query["CallingNumber"] = request.callingNumber;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.filterStatus)) {
      query["FilterStatus"] = request.filterStatus;
    }

    if (!$dara.isNull(request.flashSmsExtras)) {
      query["FlashSmsExtras"] = request.flashSmsExtras;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.minConcurrency)) {
      query["MinConcurrency"] = request.minConcurrency;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.priority)) {
      query["Priority"] = request.priority;
    }

    if (!$dara.isNull(request.recallCallingNumber)) {
      query["RecallCallingNumber"] = request.recallCallingNumber;
    }

    if (!$dara.isNull(request.recallStrategyJson)) {
      query["RecallStrategyJson"] = request.recallStrategyJson;
    }

    if (!$dara.isNull(request.ringingDuration)) {
      query["RingingDuration"] = request.ringingDuration;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.sourceGroupId)) {
      query["SourceGroupId"] = request.sourceGroupId;
    }

    if (!$dara.isNull(request.strategyJson)) {
      query["StrategyJson"] = request.strategyJson;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateBatchRepeatJob",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateBatchRepeatJobResponse>(await this.callApi(params, req, runtime), new CreateBatchRepeatJobResponse({}));
  }

  /**
   * CreateBatchRepeatJob
   * 
   * @param request - CreateBatchRepeatJobRequest
   * @returns CreateBatchRepeatJobResponse
   */
  async createBatchRepeatJob(request: CreateBatchRepeatJobRequest): Promise<CreateBatchRepeatJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createBatchRepeatJobWithOptions(request, runtime);
  }

  /**
   * CreateBeebotIntent
   * 
   * @param tmpReq - CreateBeebotIntentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateBeebotIntentResponse
   */
  async createBeebotIntentWithOptions(tmpReq: CreateBeebotIntentRequest, runtime: $dara.RuntimeOptions): Promise<CreateBeebotIntentResponse> {
    tmpReq.validate();
    let request = new CreateBeebotIntentShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.intentDefinition)) {
      request.intentDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.intentDefinition, "IntentDefinition", "json");
    }

    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentDefinitionShrink)) {
      query["IntentDefinition"] = request.intentDefinitionShrink;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateBeebotIntent",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateBeebotIntentResponse>(await this.callApi(params, req, runtime), new CreateBeebotIntentResponse({}));
  }

  /**
   * CreateBeebotIntent
   * 
   * @param request - CreateBeebotIntentRequest
   * @returns CreateBeebotIntentResponse
   */
  async createBeebotIntent(request: CreateBeebotIntentRequest): Promise<CreateBeebotIntentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createBeebotIntentWithOptions(request, runtime);
  }

  /**
   * CreateBeebotIntentLgf
   * 
   * @param tmpReq - CreateBeebotIntentLgfRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateBeebotIntentLgfResponse
   */
  async createBeebotIntentLgfWithOptions(tmpReq: CreateBeebotIntentLgfRequest, runtime: $dara.RuntimeOptions): Promise<CreateBeebotIntentLgfResponse> {
    tmpReq.validate();
    let request = new CreateBeebotIntentLgfShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.lgfDefinition)) {
      request.lgfDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.lgfDefinition, "LgfDefinition", "json");
    }

    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.lgfDefinitionShrink)) {
      query["LgfDefinition"] = request.lgfDefinitionShrink;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateBeebotIntentLgf",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateBeebotIntentLgfResponse>(await this.callApi(params, req, runtime), new CreateBeebotIntentLgfResponse({}));
  }

  /**
   * CreateBeebotIntentLgf
   * 
   * @param request - CreateBeebotIntentLgfRequest
   * @returns CreateBeebotIntentLgfResponse
   */
  async createBeebotIntentLgf(request: CreateBeebotIntentLgfRequest): Promise<CreateBeebotIntentLgfResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createBeebotIntentLgfWithOptions(request, runtime);
  }

  /**
   * CreateBeebotIntentUserSay
   * 
   * @param tmpReq - CreateBeebotIntentUserSayRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateBeebotIntentUserSayResponse
   */
  async createBeebotIntentUserSayWithOptions(tmpReq: CreateBeebotIntentUserSayRequest, runtime: $dara.RuntimeOptions): Promise<CreateBeebotIntentUserSayResponse> {
    tmpReq.validate();
    let request = new CreateBeebotIntentUserSayShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.userSayDefinition)) {
      request.userSayDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userSayDefinition, "UserSayDefinition", "json");
    }

    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.userSayDefinitionShrink)) {
      query["UserSayDefinition"] = request.userSayDefinitionShrink;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateBeebotIntentUserSay",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateBeebotIntentUserSayResponse>(await this.callApi(params, req, runtime), new CreateBeebotIntentUserSayResponse({}));
  }

  /**
   * CreateBeebotIntentUserSay
   * 
   * @param request - CreateBeebotIntentUserSayRequest
   * @returns CreateBeebotIntentUserSayResponse
   */
  async createBeebotIntentUserSay(request: CreateBeebotIntentUserSayRequest): Promise<CreateBeebotIntentUserSayResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createBeebotIntentUserSayWithOptions(request, runtime);
  }

  /**
   * @param request - CreateDialogueFlowRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDialogueFlowResponse
   */
  async createDialogueFlowWithOptions(request: CreateDialogueFlowRequest, runtime: $dara.RuntimeOptions): Promise<CreateDialogueFlowResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dialogueFlowType)) {
      query["DialogueFlowType"] = request.dialogueFlowType;
    }

    if (!$dara.isNull(request.dialogueName)) {
      query["DialogueName"] = request.dialogueName;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDialogueFlow",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateDialogueFlowResponse>(await this.callApi(params, req, runtime), new CreateDialogueFlowResponse({}));
  }

  /**
   * @param request - CreateDialogueFlowRequest
   * @returns CreateDialogueFlowResponse
   */
  async createDialogueFlow(request: CreateDialogueFlowRequest): Promise<CreateDialogueFlowResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDialogueFlowWithOptions(request, runtime);
  }

  /**
   * @param request - CreateDownloadUrlRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateDownloadUrlResponse
   */
  async createDownloadUrlWithOptions(request: CreateDownloadUrlRequest, runtime: $dara.RuntimeOptions): Promise<CreateDownloadUrlResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateDownloadUrl",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateDownloadUrlResponse>(await this.callApi(params, req, runtime), new CreateDownloadUrlResponse({}));
  }

  /**
   * @param request - CreateDownloadUrlRequest
   * @returns CreateDownloadUrlResponse
   */
  async createDownloadUrl(request: CreateDownloadUrlRequest): Promise<CreateDownloadUrlResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createDownloadUrlWithOptions(request, runtime);
  }

  /**
   * @param request - CreateGlobalQuestionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateGlobalQuestionResponse
   */
  async createGlobalQuestionWithOptions(request: CreateGlobalQuestionRequest, runtime: $dara.RuntimeOptions): Promise<CreateGlobalQuestionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.answers)) {
      query["Answers"] = request.answers;
    }

    if (!$dara.isNull(request.globalQuestionName)) {
      query["GlobalQuestionName"] = request.globalQuestionName;
    }

    if (!$dara.isNull(request.globalQuestionType)) {
      query["GlobalQuestionType"] = request.globalQuestionType;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.questions)) {
      query["Questions"] = request.questions;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateGlobalQuestion",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateGlobalQuestionResponse>(await this.callApi(params, req, runtime), new CreateGlobalQuestionResponse({}));
  }

  /**
   * @param request - CreateGlobalQuestionRequest
   * @returns CreateGlobalQuestionResponse
   */
  async createGlobalQuestion(request: CreateGlobalQuestionRequest): Promise<CreateGlobalQuestionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createGlobalQuestionWithOptions(request, runtime);
  }

  /**
   * @param request - CreateInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateInstanceResponse
   */
  async createInstanceWithOptions(request: CreateInstanceRequest, runtime: $dara.RuntimeOptions): Promise<CreateInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callingNumber)) {
      query["CallingNumber"] = request.callingNumber;
    }

    if (!$dara.isNull(request.instanceDescription)) {
      query["InstanceDescription"] = request.instanceDescription;
    }

    if (!$dara.isNull(request.instanceName)) {
      query["InstanceName"] = request.instanceName;
    }

    if (!$dara.isNull(request.maxConcurrentConversation)) {
      query["MaxConcurrentConversation"] = request.maxConcurrentConversation;
    }

    if (!$dara.isNull(request.nluServiceType)) {
      query["NluServiceType"] = request.nluServiceType;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateInstance",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateInstanceResponse>(await this.callApi(params, req, runtime), new CreateInstanceResponse({}));
  }

  /**
   * @param request - CreateInstanceRequest
   * @returns CreateInstanceResponse
   */
  async createInstance(request: CreateInstanceRequest): Promise<CreateInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createInstanceWithOptions(request, runtime);
  }

  /**
   * 创建实例绑定号码
   * 
   * @param request - CreateInstanceBindNumberRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateInstanceBindNumberResponse
   */
  async createInstanceBindNumberWithOptions(request: CreateInstanceBindNumberRequest, runtime: $dara.RuntimeOptions): Promise<CreateInstanceBindNumberResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceList)) {
      query["InstanceList"] = request.instanceList;
    }

    if (!$dara.isNull(request.number)) {
      query["Number"] = request.number;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateInstanceBindNumber",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateInstanceBindNumberResponse>(await this.callApi(params, req, runtime), new CreateInstanceBindNumberResponse({}));
  }

  /**
   * 创建实例绑定号码
   * 
   * @param request - CreateInstanceBindNumberRequest
   * @returns CreateInstanceBindNumberResponse
   */
  async createInstanceBindNumber(request: CreateInstanceBindNumberRequest): Promise<CreateInstanceBindNumberResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createInstanceBindNumberWithOptions(request, runtime);
  }

  /**
   * @param request - CreateIntentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateIntentResponse
   */
  async createIntentWithOptions(request: CreateIntentRequest, runtime: $dara.RuntimeOptions): Promise<CreateIntentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentDescription)) {
      query["IntentDescription"] = request.intentDescription;
    }

    if (!$dara.isNull(request.intentName)) {
      query["IntentName"] = request.intentName;
    }

    if (!$dara.isNull(request.keywords)) {
      query["Keywords"] = request.keywords;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.utterances)) {
      query["Utterances"] = request.utterances;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateIntent",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateIntentResponse>(await this.callApi(params, req, runtime), new CreateIntentResponse({}));
  }

  /**
   * @param request - CreateIntentRequest
   * @returns CreateIntentResponse
   */
  async createIntent(request: CreateIntentRequest): Promise<CreateIntentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createIntentWithOptions(request, runtime);
  }

  /**
   * @param request - CreateJobDataParsingTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateJobDataParsingTaskResponse
   */
  async createJobDataParsingTaskWithOptions(request: CreateJobDataParsingTaskRequest, runtime: $dara.RuntimeOptions): Promise<CreateJobDataParsingTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobFilePath)) {
      query["JobFilePath"] = request.jobFilePath;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateJobDataParsingTask",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateJobDataParsingTaskResponse>(await this.callApi(params, req, runtime), new CreateJobDataParsingTaskResponse({}));
  }

  /**
   * @param request - CreateJobDataParsingTaskRequest
   * @returns CreateJobDataParsingTaskResponse
   */
  async createJobDataParsingTask(request: CreateJobDataParsingTaskRequest): Promise<CreateJobDataParsingTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createJobDataParsingTaskWithOptions(request, runtime);
  }

  /**
   * @param request - CreateJobGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateJobGroupResponse
   */
  async createJobGroupWithOptions(request: CreateJobGroupRequest, runtime: $dara.RuntimeOptions): Promise<CreateJobGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callingNumber)) {
      query["CallingNumber"] = request.callingNumber;
    }

    if (!$dara.isNull(request.flashSmsExtras)) {
      query["FlashSmsExtras"] = request.flashSmsExtras;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupDescription)) {
      query["JobGroupDescription"] = request.jobGroupDescription;
    }

    if (!$dara.isNull(request.jobGroupName)) {
      query["JobGroupName"] = request.jobGroupName;
    }

    if (!$dara.isNull(request.minConcurrency)) {
      query["MinConcurrency"] = request.minConcurrency;
    }

    if (!$dara.isNull(request.priority)) {
      query["Priority"] = request.priority;
    }

    if (!$dara.isNull(request.recallCallingNumber)) {
      query["RecallCallingNumber"] = request.recallCallingNumber;
    }

    if (!$dara.isNull(request.recallStrategyJson)) {
      query["RecallStrategyJson"] = request.recallStrategyJson;
    }

    if (!$dara.isNull(request.ringingDuration)) {
      query["RingingDuration"] = request.ringingDuration;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.strategyJson)) {
      query["StrategyJson"] = request.strategyJson;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateJobGroup",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateJobGroupResponse>(await this.callApi(params, req, runtime), new CreateJobGroupResponse({}));
  }

  /**
   * @param request - CreateJobGroupRequest
   * @returns CreateJobGroupResponse
   */
  async createJobGroup(request: CreateJobGroupRequest): Promise<CreateJobGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createJobGroupWithOptions(request, runtime);
  }

  /**
   * @param request - CreateJobGroupExportTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateJobGroupExportTaskResponse
   */
  async createJobGroupExportTaskWithOptions(request: CreateJobGroupExportTaskRequest, runtime: $dara.RuntimeOptions): Promise<CreateJobGroupExportTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    if (!$dara.isNull(request.option)) {
      query["Option"] = request.option;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateJobGroupExportTask",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateJobGroupExportTaskResponse>(await this.callApi(params, req, runtime), new CreateJobGroupExportTaskResponse({}));
  }

  /**
   * @param request - CreateJobGroupExportTaskRequest
   * @returns CreateJobGroupExportTaskResponse
   */
  async createJobGroupExportTask(request: CreateJobGroupExportTaskRequest): Promise<CreateJobGroupExportTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createJobGroupExportTaskWithOptions(request, runtime);
  }

  /**
   * 创建号码库下载链接
   * 
   * @param request - CreateNumberDistrictInfoDownloadUrlRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateNumberDistrictInfoDownloadUrlResponse
   */
  async createNumberDistrictInfoDownloadUrlWithOptions(request: CreateNumberDistrictInfoDownloadUrlRequest, runtime: $dara.RuntimeOptions): Promise<CreateNumberDistrictInfoDownloadUrlResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.versionId)) {
      query["VersionId"] = request.versionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateNumberDistrictInfoDownloadUrl",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateNumberDistrictInfoDownloadUrlResponse>(await this.callApi(params, req, runtime), new CreateNumberDistrictInfoDownloadUrlResponse({}));
  }

  /**
   * 创建号码库下载链接
   * 
   * @param request - CreateNumberDistrictInfoDownloadUrlRequest
   * @returns CreateNumberDistrictInfoDownloadUrlResponse
   */
  async createNumberDistrictInfoDownloadUrl(request: CreateNumberDistrictInfoDownloadUrlRequest): Promise<CreateNumberDistrictInfoDownloadUrlResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createNumberDistrictInfoDownloadUrlWithOptions(request, runtime);
  }

  /**
   * 创建号码库解析任务
   * 
   * @param request - CreateNumberDistrictInfoParsingTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateNumberDistrictInfoParsingTaskResponse
   */
  async createNumberDistrictInfoParsingTaskWithOptions(request: CreateNumberDistrictInfoParsingTaskRequest, runtime: $dara.RuntimeOptions): Promise<CreateNumberDistrictInfoParsingTaskResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.filePath)) {
      query["FilePath"] = request.filePath;
    }

    if (!$dara.isNull(request.fileSize)) {
      query["FileSize"] = request.fileSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateNumberDistrictInfoParsingTask",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateNumberDistrictInfoParsingTaskResponse>(await this.callApi(params, req, runtime), new CreateNumberDistrictInfoParsingTaskResponse({}));
  }

  /**
   * 创建号码库解析任务
   * 
   * @param request - CreateNumberDistrictInfoParsingTaskRequest
   * @returns CreateNumberDistrictInfoParsingTaskResponse
   */
  async createNumberDistrictInfoParsingTask(request: CreateNumberDistrictInfoParsingTaskRequest): Promise<CreateNumberDistrictInfoParsingTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createNumberDistrictInfoParsingTaskWithOptions(request, runtime);
  }

  /**
   * CreateOutboundCallNumber
   * 
   * @param request - CreateOutboundCallNumberRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateOutboundCallNumberResponse
   */
  async createOutboundCallNumberWithOptions(request: CreateOutboundCallNumberRequest, runtime: $dara.RuntimeOptions): Promise<CreateOutboundCallNumberResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.number)) {
      query["Number"] = request.number;
    }

    if (!$dara.isNull(request.rateLimitCount)) {
      query["RateLimitCount"] = request.rateLimitCount;
    }

    if (!$dara.isNull(request.rateLimitPeriod)) {
      query["RateLimitPeriod"] = request.rateLimitPeriod;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateOutboundCallNumber",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateOutboundCallNumberResponse>(await this.callApi(params, req, runtime), new CreateOutboundCallNumberResponse({}));
  }

  /**
   * CreateOutboundCallNumber
   * 
   * @param request - CreateOutboundCallNumberRequest
   * @returns CreateOutboundCallNumberResponse
   */
  async createOutboundCallNumber(request: CreateOutboundCallNumberRequest): Promise<CreateOutboundCallNumberResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createOutboundCallNumberWithOptions(request, runtime);
  }

  /**
   * 新建场景
   * 
   * @param request - CreateScriptRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateScriptResponse
   */
  async createScriptWithOptions(request: CreateScriptRequest, runtime: $dara.RuntimeOptions): Promise<CreateScriptResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.agentId)) {
      query["AgentId"] = request.agentId;
    }

    if (!$dara.isNull(request.agentKey)) {
      query["AgentKey"] = request.agentKey;
    }

    if (!$dara.isNull(request.agentLlm)) {
      query["AgentLlm"] = request.agentLlm;
    }

    if (!$dara.isNull(request.asrConfig)) {
      query["AsrConfig"] = request.asrConfig;
    }

    if (!$dara.isNull(request.chatbotId)) {
      query["ChatbotId"] = request.chatbotId;
    }

    if (!$dara.isNull(request.emotionEnable)) {
      query["EmotionEnable"] = request.emotionEnable;
    }

    if (!$dara.isNull(request.industry)) {
      query["Industry"] = request.industry;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.longWaitEnable)) {
      query["LongWaitEnable"] = request.longWaitEnable;
    }

    if (!$dara.isNull(request.miniPlaybackEnable)) {
      query["MiniPlaybackEnable"] = request.miniPlaybackEnable;
    }

    if (!$dara.isNull(request.newBargeInEnable)) {
      query["NewBargeInEnable"] = request.newBargeInEnable;
    }

    if (!$dara.isNull(request.nluAccessType)) {
      query["NluAccessType"] = request.nluAccessType;
    }

    if (!$dara.isNull(request.nluEngine)) {
      query["NluEngine"] = request.nluEngine;
    }

    if (!$dara.isNull(request.scene)) {
      query["Scene"] = request.scene;
    }

    if (!$dara.isNull(request.scriptContent)) {
      query["ScriptContent"] = request.scriptContent;
    }

    if (!$dara.isNull(request.scriptDescription)) {
      query["ScriptDescription"] = request.scriptDescription;
    }

    if (!$dara.isNull(request.scriptName)) {
      query["ScriptName"] = request.scriptName;
    }

    if (!$dara.isNull(request.scriptNluProfileJsonString)) {
      query["ScriptNluProfileJsonString"] = request.scriptNluProfileJsonString;
    }

    if (!$dara.isNull(request.scriptWaveform)) {
      query["ScriptWaveform"] = request.scriptWaveform;
    }

    if (!$dara.isNull(request.ttsConfig)) {
      query["TtsConfig"] = request.ttsConfig;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateScript",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateScriptResponse>(await this.callApi(params, req, runtime), new CreateScriptResponse({}));
  }

  /**
   * 新建场景
   * 
   * @param request - CreateScriptRequest
   * @returns CreateScriptResponse
   */
  async createScript(request: CreateScriptRequest): Promise<CreateScriptResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createScriptWithOptions(request, runtime);
  }

  /**
   * @param request - CreateScriptWaveformRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateScriptWaveformResponse
   */
  async createScriptWaveformWithOptions(request: CreateScriptWaveformRequest, runtime: $dara.RuntimeOptions): Promise<CreateScriptWaveformResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fileId)) {
      query["FileId"] = request.fileId;
    }

    if (!$dara.isNull(request.fileName)) {
      query["FileName"] = request.fileName;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptContent)) {
      query["ScriptContent"] = request.scriptContent;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateScriptWaveform",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateScriptWaveformResponse>(await this.callApi(params, req, runtime), new CreateScriptWaveformResponse({}));
  }

  /**
   * @param request - CreateScriptWaveformRequest
   * @returns CreateScriptWaveformResponse
   */
  async createScriptWaveform(request: CreateScriptWaveformRequest): Promise<CreateScriptWaveformResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createScriptWaveformWithOptions(request, runtime);
  }

  /**
   * @param request - CreateTagRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateTagResponse
   */
  async createTagWithOptions(request: CreateTagRequest, runtime: $dara.RuntimeOptions): Promise<CreateTagResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.tagGroup)) {
      query["TagGroup"] = request.tagGroup;
    }

    if (!$dara.isNull(request.tagName)) {
      query["TagName"] = request.tagName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateTag",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateTagResponse>(await this.callApi(params, req, runtime), new CreateTagResponse({}));
  }

  /**
   * @param request - CreateTagRequest
   * @returns CreateTagResponse
   */
  async createTag(request: CreateTagRequest): Promise<CreateTagResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createTagWithOptions(request, runtime);
  }

  /**
   * 外呼历史导出
   * 
   * @param request - CreateTaskExportTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns CreateTaskExportTaskResponse
   */
  async createTaskExportTaskWithOptions(request: CreateTaskExportTaskRequest, runtime: $dara.RuntimeOptions): Promise<CreateTaskExportTaskResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "CreateTaskExportTask",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<CreateTaskExportTaskResponse>(await this.callApi(params, req, runtime), new CreateTaskExportTaskResponse({}));
  }

  /**
   * 外呼历史导出
   * 
   * @param request - CreateTaskExportTaskRequest
   * @returns CreateTaskExportTaskResponse
   */
  async createTaskExportTask(request: CreateTaskExportTaskRequest): Promise<CreateTaskExportTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.createTaskExportTaskWithOptions(request, runtime);
  }

  /**
   * @param tmpReq - DeleteAgentProfilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteAgentProfilesResponse
   */
  async deleteAgentProfilesWithOptions(tmpReq: DeleteAgentProfilesRequest, runtime: $dara.RuntimeOptions): Promise<DeleteAgentProfilesResponse> {
    tmpReq.validate();
    let request = new DeleteAgentProfilesShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.agentProfileIds)) {
      request.agentProfileIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.agentProfileIds, "AgentProfileIds", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.agentProfileIdsShrink)) {
      body["AgentProfileIds"] = request.agentProfileIdsShrink;
    }

    if (!$dara.isNull(request.appIp)) {
      body["AppIp"] = request.appIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteAgentProfiles",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteAgentProfilesResponse>(await this.callApi(params, req, runtime), new DeleteAgentProfilesResponse({}));
  }

  /**
   * @param request - DeleteAgentProfilesRequest
   * @returns DeleteAgentProfilesResponse
   */
  async deleteAgentProfiles(request: DeleteAgentProfilesRequest): Promise<DeleteAgentProfilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteAgentProfilesWithOptions(request, runtime);
  }

  /**
   * 清空归属地号码库
   * 
   * @param request - DeleteAllNumberDistrictInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteAllNumberDistrictInfoResponse
   */
  async deleteAllNumberDistrictInfoWithOptions(runtime: $dara.RuntimeOptions): Promise<DeleteAllNumberDistrictInfoResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DeleteAllNumberDistrictInfo",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteAllNumberDistrictInfoResponse>(await this.callApi(params, req, runtime), new DeleteAllNumberDistrictInfoResponse({}));
  }

  /**
   * 清空归属地号码库
   * @returns DeleteAllNumberDistrictInfoResponse
   */
  async deleteAllNumberDistrictInfo(): Promise<DeleteAllNumberDistrictInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteAllNumberDistrictInfoWithOptions(runtime);
  }

  /**
   * DeleteBeebotIntent
   * 
   * @param request - DeleteBeebotIntentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteBeebotIntentResponse
   */
  async deleteBeebotIntentWithOptions(request: DeleteBeebotIntentRequest, runtime: $dara.RuntimeOptions): Promise<DeleteBeebotIntentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentId)) {
      query["IntentId"] = request.intentId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteBeebotIntent",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteBeebotIntentResponse>(await this.callApi(params, req, runtime), new DeleteBeebotIntentResponse({}));
  }

  /**
   * DeleteBeebotIntent
   * 
   * @param request - DeleteBeebotIntentRequest
   * @returns DeleteBeebotIntentResponse
   */
  async deleteBeebotIntent(request: DeleteBeebotIntentRequest): Promise<DeleteBeebotIntentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteBeebotIntentWithOptions(request, runtime);
  }

  /**
   * DeleteBeebotIntentLgf
   * 
   * @param request - DeleteBeebotIntentLgfRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteBeebotIntentLgfResponse
   */
  async deleteBeebotIntentLgfWithOptions(request: DeleteBeebotIntentLgfRequest, runtime: $dara.RuntimeOptions): Promise<DeleteBeebotIntentLgfResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentId)) {
      query["IntentId"] = request.intentId;
    }

    if (!$dara.isNull(request.lgfId)) {
      query["LgfId"] = request.lgfId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteBeebotIntentLgf",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteBeebotIntentLgfResponse>(await this.callApi(params, req, runtime), new DeleteBeebotIntentLgfResponse({}));
  }

  /**
   * DeleteBeebotIntentLgf
   * 
   * @param request - DeleteBeebotIntentLgfRequest
   * @returns DeleteBeebotIntentLgfResponse
   */
  async deleteBeebotIntentLgf(request: DeleteBeebotIntentLgfRequest): Promise<DeleteBeebotIntentLgfResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteBeebotIntentLgfWithOptions(request, runtime);
  }

  /**
   * DeleteBeebotIntentUserSay
   * 
   * @param request - DeleteBeebotIntentUserSayRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteBeebotIntentUserSayResponse
   */
  async deleteBeebotIntentUserSayWithOptions(request: DeleteBeebotIntentUserSayRequest, runtime: $dara.RuntimeOptions): Promise<DeleteBeebotIntentUserSayResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentId)) {
      query["IntentId"] = request.intentId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.userSayId)) {
      query["UserSayId"] = request.userSayId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteBeebotIntentUserSay",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteBeebotIntentUserSayResponse>(await this.callApi(params, req, runtime), new DeleteBeebotIntentUserSayResponse({}));
  }

  /**
   * DeleteBeebotIntentUserSay
   * 
   * @param request - DeleteBeebotIntentUserSayRequest
   * @returns DeleteBeebotIntentUserSayResponse
   */
  async deleteBeebotIntentUserSay(request: DeleteBeebotIntentUserSayRequest): Promise<DeleteBeebotIntentUserSayResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteBeebotIntentUserSayWithOptions(request, runtime);
  }

  /**
   * @param request - DeleteContactBlockListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteContactBlockListResponse
   */
  async deleteContactBlockListWithOptions(request: DeleteContactBlockListRequest, runtime: $dara.RuntimeOptions): Promise<DeleteContactBlockListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.contactBlockListId)) {
      query["ContactBlockListId"] = request.contactBlockListId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.operator)) {
      query["Operator"] = request.operator;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteContactBlockList",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteContactBlockListResponse>(await this.callApi(params, req, runtime), new DeleteContactBlockListResponse({}));
  }

  /**
   * @param request - DeleteContactBlockListRequest
   * @returns DeleteContactBlockListResponse
   */
  async deleteContactBlockList(request: DeleteContactBlockListRequest): Promise<DeleteContactBlockListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteContactBlockListWithOptions(request, runtime);
  }

  /**
   * @param request - DeleteContactWhiteListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteContactWhiteListResponse
   */
  async deleteContactWhiteListWithOptions(request: DeleteContactWhiteListRequest, runtime: $dara.RuntimeOptions): Promise<DeleteContactWhiteListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.contactWhiteListId)) {
      query["ContactWhiteListId"] = request.contactWhiteListId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.operator)) {
      query["Operator"] = request.operator;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteContactWhiteList",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteContactWhiteListResponse>(await this.callApi(params, req, runtime), new DeleteContactWhiteListResponse({}));
  }

  /**
   * @param request - DeleteContactWhiteListRequest
   * @returns DeleteContactWhiteListResponse
   */
  async deleteContactWhiteList(request: DeleteContactWhiteListRequest): Promise<DeleteContactWhiteListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteContactWhiteListWithOptions(request, runtime);
  }

  /**
   * @param request - DeleteDialogueFlowRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteDialogueFlowResponse
   */
  async deleteDialogueFlowWithOptions(request: DeleteDialogueFlowRequest, runtime: $dara.RuntimeOptions): Promise<DeleteDialogueFlowResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dialogueFlowId)) {
      query["DialogueFlowId"] = request.dialogueFlowId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteDialogueFlow",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteDialogueFlowResponse>(await this.callApi(params, req, runtime), new DeleteDialogueFlowResponse({}));
  }

  /**
   * @param request - DeleteDialogueFlowRequest
   * @returns DeleteDialogueFlowResponse
   */
  async deleteDialogueFlow(request: DeleteDialogueFlowRequest): Promise<DeleteDialogueFlowResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteDialogueFlowWithOptions(request, runtime);
  }

  /**
   * @param request - DeleteGlobalQuestionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteGlobalQuestionResponse
   */
  async deleteGlobalQuestionWithOptions(request: DeleteGlobalQuestionRequest, runtime: $dara.RuntimeOptions): Promise<DeleteGlobalQuestionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.globalQuestionId)) {
      query["GlobalQuestionId"] = request.globalQuestionId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteGlobalQuestion",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteGlobalQuestionResponse>(await this.callApi(params, req, runtime), new DeleteGlobalQuestionResponse({}));
  }

  /**
   * @param request - DeleteGlobalQuestionRequest
   * @returns DeleteGlobalQuestionResponse
   */
  async deleteGlobalQuestion(request: DeleteGlobalQuestionRequest): Promise<DeleteGlobalQuestionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteGlobalQuestionWithOptions(request, runtime);
  }

  /**
   * @param request - DeleteInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteInstanceResponse
   */
  async deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: $dara.RuntimeOptions): Promise<DeleteInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteInstance",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteInstanceResponse>(await this.callApi(params, req, runtime), new DeleteInstanceResponse({}));
  }

  /**
   * @param request - DeleteInstanceRequest
   * @returns DeleteInstanceResponse
   */
  async deleteInstance(request: DeleteInstanceRequest): Promise<DeleteInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteInstanceWithOptions(request, runtime);
  }

  /**
   * @param request - DeleteIntentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteIntentResponse
   */
  async deleteIntentWithOptions(request: DeleteIntentRequest, runtime: $dara.RuntimeOptions): Promise<DeleteIntentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentId)) {
      query["IntentId"] = request.intentId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteIntent",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteIntentResponse>(await this.callApi(params, req, runtime), new DeleteIntentResponse({}));
  }

  /**
   * @param request - DeleteIntentRequest
   * @returns DeleteIntentResponse
   */
  async deleteIntent(request: DeleteIntentRequest): Promise<DeleteIntentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteIntentWithOptions(request, runtime);
  }

  /**
   * @param request - DeleteJobGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteJobGroupResponse
   */
  async deleteJobGroupWithOptions(request: DeleteJobGroupRequest, runtime: $dara.RuntimeOptions): Promise<DeleteJobGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteJobGroup",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteJobGroupResponse>(await this.callApi(params, req, runtime), new DeleteJobGroupResponse({}));
  }

  /**
   * @param request - DeleteJobGroupRequest
   * @returns DeleteJobGroupResponse
   */
  async deleteJobGroup(request: DeleteJobGroupRequest): Promise<DeleteJobGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteJobGroupWithOptions(request, runtime);
  }

  /**
   * @param request - DeleteOutboundCallNumberRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteOutboundCallNumberResponse
   */
  async deleteOutboundCallNumberWithOptions(request: DeleteOutboundCallNumberRequest, runtime: $dara.RuntimeOptions): Promise<DeleteOutboundCallNumberResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.outboundCallNumberId)) {
      query["OutboundCallNumberId"] = request.outboundCallNumberId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteOutboundCallNumber",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteOutboundCallNumberResponse>(await this.callApi(params, req, runtime), new DeleteOutboundCallNumberResponse({}));
  }

  /**
   * @param request - DeleteOutboundCallNumberRequest
   * @returns DeleteOutboundCallNumberResponse
   */
  async deleteOutboundCallNumber(request: DeleteOutboundCallNumberRequest): Promise<DeleteOutboundCallNumberResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteOutboundCallNumberWithOptions(request, runtime);
  }

  /**
   * @param request - DeleteScriptRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteScriptResponse
   */
  async deleteScriptWithOptions(request: DeleteScriptRequest, runtime: $dara.RuntimeOptions): Promise<DeleteScriptResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteScript",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteScriptResponse>(await this.callApi(params, req, runtime), new DeleteScriptResponse({}));
  }

  /**
   * @param request - DeleteScriptRequest
   * @returns DeleteScriptResponse
   */
  async deleteScript(request: DeleteScriptRequest): Promise<DeleteScriptResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteScriptWithOptions(request, runtime);
  }

  /**
   * @param request - DeleteScriptRecordingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteScriptRecordingResponse
   */
  async deleteScriptRecordingWithOptions(request: DeleteScriptRecordingRequest, runtime: $dara.RuntimeOptions): Promise<DeleteScriptRecordingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.uuidsJson)) {
      query["UuidsJson"] = request.uuidsJson;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteScriptRecording",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteScriptRecordingResponse>(await this.callApi(params, req, runtime), new DeleteScriptRecordingResponse({}));
  }

  /**
   * @param request - DeleteScriptRecordingRequest
   * @returns DeleteScriptRecordingResponse
   */
  async deleteScriptRecording(request: DeleteScriptRecordingRequest): Promise<DeleteScriptRecordingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteScriptRecordingWithOptions(request, runtime);
  }

  /**
   * @param request - DeleteScriptWaveformRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DeleteScriptWaveformResponse
   */
  async deleteScriptWaveformWithOptions(request: DeleteScriptWaveformRequest, runtime: $dara.RuntimeOptions): Promise<DeleteScriptWaveformResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.scriptWaveformId)) {
      query["ScriptWaveformId"] = request.scriptWaveformId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DeleteScriptWaveform",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DeleteScriptWaveformResponse>(await this.callApi(params, req, runtime), new DeleteScriptWaveformResponse({}));
  }

  /**
   * @param request - DeleteScriptWaveformRequest
   * @returns DeleteScriptWaveformResponse
   */
  async deleteScriptWaveform(request: DeleteScriptWaveformRequest): Promise<DeleteScriptWaveformResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.deleteScriptWaveformWithOptions(request, runtime);
  }

  /**
   * DescribeBeebotIntent
   * 
   * @remarks
   * ***
   * 
   * @param request - DescribeBeebotIntentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeBeebotIntentResponse
   */
  async describeBeebotIntentWithOptions(request: DescribeBeebotIntentRequest, runtime: $dara.RuntimeOptions): Promise<DescribeBeebotIntentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentId)) {
      query["IntentId"] = request.intentId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeBeebotIntent",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeBeebotIntentResponse>(await this.callApi(params, req, runtime), new DescribeBeebotIntentResponse({}));
  }

  /**
   * DescribeBeebotIntent
   * 
   * @remarks
   * ***
   * 
   * @param request - DescribeBeebotIntentRequest
   * @returns DescribeBeebotIntentResponse
   */
  async describeBeebotIntent(request: DescribeBeebotIntentRequest): Promise<DescribeBeebotIntentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeBeebotIntentWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeDialogueNodeStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDialogueNodeStatisticsResponse
   */
  async describeDialogueNodeStatisticsWithOptions(request: DescribeDialogueNodeStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDialogueNodeStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    if (!$dara.isNull(request.limit)) {
      query["Limit"] = request.limit;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDialogueNodeStatistics",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeDialogueNodeStatisticsResponse>(await this.callApi(params, req, runtime), new DescribeDialogueNodeStatisticsResponse({}));
  }

  /**
   * @param request - DescribeDialogueNodeStatisticsRequest
   * @returns DescribeDialogueNodeStatisticsResponse
   */
  async describeDialogueNodeStatistics(request: DescribeDialogueNodeStatisticsRequest): Promise<DescribeDialogueNodeStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDialogueNodeStatisticsWithOptions(request, runtime);
  }

  /**
   * DescribeDsReports
   * 
   * @param request - DescribeDsReportsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeDsReportsResponse
   */
  async describeDsReportsWithOptions(request: DescribeDsReportsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeDsReportsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeDsReports",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeDsReportsResponse>(await this.callApi(params, req, runtime), new DescribeDsReportsResponse({}));
  }

  /**
   * DescribeDsReports
   * 
   * @param request - DescribeDsReportsRequest
   * @returns DescribeDsReportsResponse
   */
  async describeDsReports(request: DescribeDsReportsRequest): Promise<DescribeDsReportsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeDsReportsWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeGlobalQuestionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeGlobalQuestionResponse
   */
  async describeGlobalQuestionWithOptions(request: DescribeGlobalQuestionRequest, runtime: $dara.RuntimeOptions): Promise<DescribeGlobalQuestionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.globalQuestionId)) {
      query["GlobalQuestionId"] = request.globalQuestionId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeGlobalQuestion",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeGlobalQuestionResponse>(await this.callApi(params, req, runtime), new DescribeGlobalQuestionResponse({}));
  }

  /**
   * @param request - DescribeGlobalQuestionRequest
   * @returns DescribeGlobalQuestionResponse
   */
  async describeGlobalQuestion(request: DescribeGlobalQuestionRequest): Promise<DescribeGlobalQuestionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeGlobalQuestionWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeGroupExecutingInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeGroupExecutingInfoResponse
   */
  async describeGroupExecutingInfoWithOptions(request: DescribeGroupExecutingInfoRequest, runtime: $dara.RuntimeOptions): Promise<DescribeGroupExecutingInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeGroupExecutingInfo",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeGroupExecutingInfoResponse>(await this.callApi(params, req, runtime), new DescribeGroupExecutingInfoResponse({}));
  }

  /**
   * @param request - DescribeGroupExecutingInfoRequest
   * @returns DescribeGroupExecutingInfoResponse
   */
  async describeGroupExecutingInfo(request: DescribeGroupExecutingInfoRequest): Promise<DescribeGroupExecutingInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeGroupExecutingInfoWithOptions(request, runtime);
  }

  /**
   * DescribeInstance
   * 
   * @param request - DescribeInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeInstanceResponse
   */
  async describeInstanceWithOptions(request: DescribeInstanceRequest, runtime: $dara.RuntimeOptions): Promise<DescribeInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeInstance",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeInstanceResponse>(await this.callApi(params, req, runtime), new DescribeInstanceResponse({}));
  }

  /**
   * DescribeInstance
   * 
   * @param request - DescribeInstanceRequest
   * @returns DescribeInstanceResponse
   */
  async describeInstance(request: DescribeInstanceRequest): Promise<DescribeInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeInstanceWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeIntentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeIntentResponse
   */
  async describeIntentWithOptions(request: DescribeIntentRequest, runtime: $dara.RuntimeOptions): Promise<DescribeIntentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentId)) {
      query["IntentId"] = request.intentId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeIntent",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeIntentResponse>(await this.callApi(params, req, runtime), new DescribeIntentResponse({}));
  }

  /**
   * @param request - DescribeIntentRequest
   * @returns DescribeIntentResponse
   */
  async describeIntent(request: DescribeIntentRequest): Promise<DescribeIntentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeIntentWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeIntentStatisticsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeIntentStatisticsResponse
   */
  async describeIntentStatisticsWithOptions(request: DescribeIntentStatisticsRequest, runtime: $dara.RuntimeOptions): Promise<DescribeIntentStatisticsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    if (!$dara.isNull(request.limit)) {
      query["Limit"] = request.limit;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeIntentStatistics",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeIntentStatisticsResponse>(await this.callApi(params, req, runtime), new DescribeIntentStatisticsResponse({}));
  }

  /**
   * @param request - DescribeIntentStatisticsRequest
   * @returns DescribeIntentStatisticsResponse
   */
  async describeIntentStatistics(request: DescribeIntentStatisticsRequest): Promise<DescribeIntentStatisticsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeIntentStatisticsWithOptions(request, runtime);
  }

  /**
   * 获取job信息
   * 
   * @param request - DescribeJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeJobResponse
   */
  async describeJobWithOptions(request: DescribeJobRequest, runtime: $dara.RuntimeOptions): Promise<DescribeJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.withScript)) {
      query["WithScript"] = request.withScript;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeJob",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeJobResponse>(await this.callApi(params, req, runtime), new DescribeJobResponse({}));
  }

  /**
   * 获取job信息
   * 
   * @param request - DescribeJobRequest
   * @returns DescribeJobResponse
   */
  async describeJob(request: DescribeJobRequest): Promise<DescribeJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeJobWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeJobDataParsingTaskProgressRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeJobDataParsingTaskProgressResponse
   */
  async describeJobDataParsingTaskProgressWithOptions(request: DescribeJobDataParsingTaskProgressRequest, runtime: $dara.RuntimeOptions): Promise<DescribeJobDataParsingTaskProgressResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobDataParsingTaskId)) {
      query["JobDataParsingTaskId"] = request.jobDataParsingTaskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeJobDataParsingTaskProgress",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeJobDataParsingTaskProgressResponse>(await this.callApi(params, req, runtime), new DescribeJobDataParsingTaskProgressResponse({}));
  }

  /**
   * @param request - DescribeJobDataParsingTaskProgressRequest
   * @returns DescribeJobDataParsingTaskProgressResponse
   */
  async describeJobDataParsingTaskProgress(request: DescribeJobDataParsingTaskProgressRequest): Promise<DescribeJobDataParsingTaskProgressResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeJobDataParsingTaskProgressWithOptions(request, runtime);
  }

  /**
   * DescribeJobGroup
   * 
   * @param request - DescribeJobGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeJobGroupResponse
   */
  async describeJobGroupWithOptions(request: DescribeJobGroupRequest, runtime: $dara.RuntimeOptions): Promise<DescribeJobGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.briefTypes)) {
      query["BriefTypes"] = request.briefTypes;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeJobGroup",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeJobGroupResponse>(await this.callApi(params, req, runtime), new DescribeJobGroupResponse({}));
  }

  /**
   * DescribeJobGroup
   * 
   * @param request - DescribeJobGroupRequest
   * @returns DescribeJobGroupResponse
   */
  async describeJobGroup(request: DescribeJobGroupRequest): Promise<DescribeJobGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeJobGroupWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeJobGroupExportTaskProgressRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeJobGroupExportTaskProgressResponse
   */
  async describeJobGroupExportTaskProgressWithOptions(request: DescribeJobGroupExportTaskProgressRequest, runtime: $dara.RuntimeOptions): Promise<DescribeJobGroupExportTaskProgressResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeJobGroupExportTaskProgress",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeJobGroupExportTaskProgressResponse>(await this.callApi(params, req, runtime), new DescribeJobGroupExportTaskProgressResponse({}));
  }

  /**
   * @param request - DescribeJobGroupExportTaskProgressRequest
   * @returns DescribeJobGroupExportTaskProgressResponse
   */
  async describeJobGroupExportTaskProgress(request: DescribeJobGroupExportTaskProgressRequest): Promise<DescribeJobGroupExportTaskProgressResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeJobGroupExportTaskProgressWithOptions(request, runtime);
  }

  /**
   * 查询号码库状态
   * 
   * @param request - DescribeNumberDistrictInfoStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeNumberDistrictInfoStatusResponse
   */
  async describeNumberDistrictInfoStatusWithOptions(runtime: $dara.RuntimeOptions): Promise<DescribeNumberDistrictInfoStatusResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "DescribeNumberDistrictInfoStatus",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeNumberDistrictInfoStatusResponse>(await this.callApi(params, req, runtime), new DescribeNumberDistrictInfoStatusResponse({}));
  }

  /**
   * 查询号码库状态
   * @returns DescribeNumberDistrictInfoStatusResponse
   */
  async describeNumberDistrictInfoStatus(): Promise<DescribeNumberDistrictInfoStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeNumberDistrictInfoStatusWithOptions(runtime);
  }

  /**
   * 获取场景信息
   * 
   * @param request - DescribeScriptRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeScriptResponse
   */
  async describeScriptWithOptions(request: DescribeScriptRequest, runtime: $dara.RuntimeOptions): Promise<DescribeScriptResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeScript",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeScriptResponse>(await this.callApi(params, req, runtime), new DescribeScriptResponse({}));
  }

  /**
   * 获取场景信息
   * 
   * @param request - DescribeScriptRequest
   * @returns DescribeScriptResponse
   */
  async describeScript(request: DescribeScriptRequest): Promise<DescribeScriptResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeScriptWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeScriptVoiceConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeScriptVoiceConfigResponse
   */
  async describeScriptVoiceConfigWithOptions(request: DescribeScriptVoiceConfigRequest, runtime: $dara.RuntimeOptions): Promise<DescribeScriptVoiceConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.scriptVoiceConfigId)) {
      query["ScriptVoiceConfigId"] = request.scriptVoiceConfigId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeScriptVoiceConfig",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeScriptVoiceConfigResponse>(await this.callApi(params, req, runtime), new DescribeScriptVoiceConfigResponse({}));
  }

  /**
   * @param request - DescribeScriptVoiceConfigRequest
   * @returns DescribeScriptVoiceConfigResponse
   */
  async describeScriptVoiceConfig(request: DescribeScriptVoiceConfigRequest): Promise<DescribeScriptVoiceConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeScriptVoiceConfigWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeTTSConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTTSConfigResponse
   */
  async describeTTSConfigWithOptions(request: DescribeTTSConfigRequest, runtime: $dara.RuntimeOptions): Promise<DescribeTTSConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeTTSConfig",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeTTSConfigResponse>(await this.callApi(params, req, runtime), new DescribeTTSConfigResponse({}));
  }

  /**
   * @param request - DescribeTTSConfigRequest
   * @returns DescribeTTSConfigResponse
   */
  async describeTTSConfig(request: DescribeTTSConfigRequest): Promise<DescribeTTSConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeTTSConfigWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeTTSDemoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTTSDemoResponse
   */
  async describeTTSDemoWithOptions(request: DescribeTTSDemoRequest, runtime: $dara.RuntimeOptions): Promise<DescribeTTSDemoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.accessKey)) {
      query["AccessKey"] = request.accessKey;
    }

    if (!$dara.isNull(request.aliCustomizedVoice)) {
      query["AliCustomizedVoice"] = request.aliCustomizedVoice;
    }

    if (!$dara.isNull(request.appKey)) {
      query["AppKey"] = request.appKey;
    }

    if (!$dara.isNull(request.engine)) {
      query["Engine"] = request.engine;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.nlsServiceType)) {
      query["NlsServiceType"] = request.nlsServiceType;
    }

    if (!$dara.isNull(request.pitchRate)) {
      query["PitchRate"] = request.pitchRate;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.secretKey)) {
      query["SecretKey"] = request.secretKey;
    }

    if (!$dara.isNull(request.speechRate)) {
      query["SpeechRate"] = request.speechRate;
    }

    if (!$dara.isNull(request.text)) {
      query["Text"] = request.text;
    }

    if (!$dara.isNull(request.voice)) {
      query["Voice"] = request.voice;
    }

    if (!$dara.isNull(request.volume)) {
      query["Volume"] = request.volume;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeTTSDemo",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeTTSDemoResponse>(await this.callApi(params, req, runtime), new DescribeTTSDemoResponse({}));
  }

  /**
   * @param request - DescribeTTSDemoRequest
   * @returns DescribeTTSDemoResponse
   */
  async describeTTSDemo(request: DescribeTTSDemoRequest): Promise<DescribeTTSDemoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeTTSDemoWithOptions(request, runtime);
  }

  /**
   * @param request - DescribeTagHitsSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTagHitsSummaryResponse
   */
  async describeTagHitsSummaryWithOptions(request: DescribeTagHitsSummaryRequest, runtime: $dara.RuntimeOptions): Promise<DescribeTagHitsSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeTagHitsSummary",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeTagHitsSummaryResponse>(await this.callApi(params, req, runtime), new DescribeTagHitsSummaryResponse({}));
  }

  /**
   * @param request - DescribeTagHitsSummaryRequest
   * @returns DescribeTagHitsSummaryResponse
   */
  async describeTagHitsSummary(request: DescribeTagHitsSummaryRequest): Promise<DescribeTagHitsSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeTagHitsSummaryWithOptions(request, runtime);
  }

  /**
   * 号码绑定实例列表
   * 
   * @param request - DescribeTenantBindNumberRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DescribeTenantBindNumberResponse
   */
  async describeTenantBindNumberWithOptions(request: DescribeTenantBindNumberRequest, runtime: $dara.RuntimeOptions): Promise<DescribeTenantBindNumberResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.number)) {
      query["Number"] = request.number;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DescribeTenantBindNumber",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DescribeTenantBindNumberResponse>(await this.callApi(params, req, runtime), new DescribeTenantBindNumberResponse({}));
  }

  /**
   * 号码绑定实例列表
   * 
   * @param request - DescribeTenantBindNumberRequest
   * @returns DescribeTenantBindNumberResponse
   */
  async describeTenantBindNumber(request: DescribeTenantBindNumberRequest): Promise<DescribeTenantBindNumberResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.describeTenantBindNumberWithOptions(request, runtime);
  }

  /**
   * @param request - DialogueRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DialogueResponse
   */
  async dialogueWithOptions(request: DialogueRequest, runtime: $dara.RuntimeOptions): Promise<DialogueResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.actionKey)) {
      query["ActionKey"] = request.actionKey;
    }

    if (!$dara.isNull(request.actionParams)) {
      query["ActionParams"] = request.actionParams;
    }

    if (!$dara.isNull(request.callId)) {
      query["CallId"] = request.callId;
    }

    if (!$dara.isNull(request.callType)) {
      query["CallType"] = request.callType;
    }

    if (!$dara.isNull(request.calledNumber)) {
      query["CalledNumber"] = request.calledNumber;
    }

    if (!$dara.isNull(request.callingNumber)) {
      query["CallingNumber"] = request.callingNumber;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    if (!$dara.isNull(request.utterance)) {
      query["Utterance"] = request.utterance;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "Dialogue",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DialogueResponse>(await this.callApi(params, req, runtime), new DialogueResponse({}));
  }

  /**
   * @param request - DialogueRequest
   * @returns DialogueResponse
   */
  async dialogue(request: DialogueRequest): Promise<DialogueResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.dialogueWithOptions(request, runtime);
  }

  /**
   * 取消号码库解析结果
   * 
   * @param request - DismissNumberDistrictInfoParsingResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DismissNumberDistrictInfoParsingResultResponse
   */
  async dismissNumberDistrictInfoParsingResultWithOptions(request: DismissNumberDistrictInfoParsingResultRequest, runtime: $dara.RuntimeOptions): Promise<DismissNumberDistrictInfoParsingResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.versionId)) {
      query["VersionId"] = request.versionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DismissNumberDistrictInfoParsingResult",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DismissNumberDistrictInfoParsingResultResponse>(await this.callApi(params, req, runtime), new DismissNumberDistrictInfoParsingResultResponse({}));
  }

  /**
   * 取消号码库解析结果
   * 
   * @param request - DismissNumberDistrictInfoParsingResultRequest
   * @returns DismissNumberDistrictInfoParsingResultResponse
   */
  async dismissNumberDistrictInfoParsingResult(request: DismissNumberDistrictInfoParsingResultRequest): Promise<DismissNumberDistrictInfoParsingResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.dismissNumberDistrictInfoParsingResultWithOptions(request, runtime);
  }

  /**
   * DownloadRecording
   * 
   * @param request - DownloadRecordingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DownloadRecordingResponse
   */
  async downloadRecordingWithOptions(request: DownloadRecordingRequest, runtime: $dara.RuntimeOptions): Promise<DownloadRecordingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.needVoiceSliceRecording)) {
      query["NeedVoiceSliceRecording"] = request.needVoiceSliceRecording;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DownloadRecording",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DownloadRecordingResponse>(await this.callApi(params, req, runtime), new DownloadRecordingResponse({}));
  }

  /**
   * DownloadRecording
   * 
   * @param request - DownloadRecordingRequest
   * @returns DownloadRecordingResponse
   */
  async downloadRecording(request: DownloadRecordingRequest): Promise<DownloadRecordingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.downloadRecordingWithOptions(request, runtime);
  }

  /**
   * @param request - DownloadScriptRecordingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DownloadScriptRecordingResponse
   */
  async downloadScriptRecordingWithOptions(request: DownloadScriptRecordingRequest, runtime: $dara.RuntimeOptions): Promise<DownloadScriptRecordingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.uuid)) {
      query["Uuid"] = request.uuid;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DownloadScriptRecording",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DownloadScriptRecordingResponse>(await this.callApi(params, req, runtime), new DownloadScriptRecordingResponse({}));
  }

  /**
   * @param request - DownloadScriptRecordingRequest
   * @returns DownloadScriptRecordingResponse
   */
  async downloadScriptRecording(request: DownloadScriptRecordingRequest): Promise<DownloadScriptRecordingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.downloadScriptRecordingWithOptions(request, runtime);
  }

  /**
   * @param request - DuplicateScriptRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns DuplicateScriptResponse
   */
  async duplicateScriptWithOptions(request: DuplicateScriptRequest, runtime: $dara.RuntimeOptions): Promise<DuplicateScriptResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.sourceScriptId)) {
      query["SourceScriptId"] = request.sourceScriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "DuplicateScript",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<DuplicateScriptResponse>(await this.callApi(params, req, runtime), new DuplicateScriptResponse({}));
  }

  /**
   * @param request - DuplicateScriptRequest
   * @returns DuplicateScriptResponse
   */
  async duplicateScript(request: DuplicateScriptRequest): Promise<DuplicateScriptResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.duplicateScriptWithOptions(request, runtime);
  }

  /**
   * @param request - ExportScriptRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ExportScriptResponse
   */
  async exportScriptWithOptions(request: ExportScriptRequest, runtime: $dara.RuntimeOptions): Promise<ExportScriptResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ExportScript",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ExportScriptResponse>(await this.callApi(params, req, runtime), new ExportScriptResponse({}));
  }

  /**
   * @param request - ExportScriptRequest
   * @returns ExportScriptResponse
   */
  async exportScript(request: ExportScriptRequest): Promise<ExportScriptResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.exportScriptWithOptions(request, runtime);
  }

  /**
   * @param request - GenerateUploadUrlRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GenerateUploadUrlResponse
   */
  async generateUploadUrlWithOptions(request: GenerateUploadUrlRequest, runtime: $dara.RuntimeOptions): Promise<GenerateUploadUrlResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.fileName)) {
      query["FileName"] = request.fileName;
    }

    if (!$dara.isNull(request.key)) {
      query["Key"] = request.key;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GenerateUploadUrl",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GenerateUploadUrlResponse>(await this.callApi(params, req, runtime), new GenerateUploadUrlResponse({}));
  }

  /**
   * @param request - GenerateUploadUrlRequest
   * @returns GenerateUploadUrlResponse
   */
  async generateUploadUrl(request: GenerateUploadUrlRequest): Promise<GenerateUploadUrlResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.generateUploadUrlWithOptions(request, runtime);
  }

  /**
   * @param request - GetAfterAnswerDelayPlaybackRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAfterAnswerDelayPlaybackResponse
   */
  async getAfterAnswerDelayPlaybackWithOptions(request: GetAfterAnswerDelayPlaybackRequest, runtime: $dara.RuntimeOptions): Promise<GetAfterAnswerDelayPlaybackResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.entryId)) {
      query["EntryId"] = request.entryId;
    }

    if (!$dara.isNull(request.strategyLevel)) {
      query["StrategyLevel"] = request.strategyLevel;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAfterAnswerDelayPlayback",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetAfterAnswerDelayPlaybackResponse>(await this.callApi(params, req, runtime), new GetAfterAnswerDelayPlaybackResponse({}));
  }

  /**
   * @param request - GetAfterAnswerDelayPlaybackRequest
   * @returns GetAfterAnswerDelayPlaybackResponse
   */
  async getAfterAnswerDelayPlayback(request: GetAfterAnswerDelayPlaybackRequest): Promise<GetAfterAnswerDelayPlaybackResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAfterAnswerDelayPlaybackWithOptions(request, runtime);
  }

  /**
   * @param request - GetAgentProfileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAgentProfileResponse
   */
  async getAgentProfileWithOptions(request: GetAgentProfileRequest, runtime: $dara.RuntimeOptions): Promise<GetAgentProfileResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.agentProfileId)) {
      body["AgentProfileId"] = request.agentProfileId;
    }

    if (!$dara.isNull(request.appIp)) {
      body["AppIp"] = request.appIp;
    }

    if (!$dara.isNull(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAgentProfile",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetAgentProfileResponse>(await this.callApi(params, req, runtime), new GetAgentProfileResponse({}));
  }

  /**
   * @param request - GetAgentProfileRequest
   * @returns GetAgentProfileResponse
   */
  async getAgentProfile(request: GetAgentProfileRequest): Promise<GetAgentProfileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAgentProfileWithOptions(request, runtime);
  }

  /**
   * @param request - GetAgentProfileTemplateRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAgentProfileTemplateResponse
   */
  async getAgentProfileTemplateWithOptions(request: GetAgentProfileTemplateRequest, runtime: $dara.RuntimeOptions): Promise<GetAgentProfileTemplateResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.agentProfileTemplateId)) {
      body["AgentProfileTemplateId"] = request.agentProfileTemplateId;
    }

    if (!$dara.isNull(request.appIp)) {
      body["AppIp"] = request.appIp;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAgentProfileTemplate",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetAgentProfileTemplateResponse>(await this.callApi(params, req, runtime), new GetAgentProfileTemplateResponse({}));
  }

  /**
   * @param request - GetAgentProfileTemplateRequest
   * @returns GetAgentProfileTemplateResponse
   */
  async getAgentProfileTemplate(request: GetAgentProfileTemplateRequest): Promise<GetAgentProfileTemplateResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAgentProfileTemplateWithOptions(request, runtime);
  }

  /**
   * @param request - GetAnnotationMissionSummaryRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAnnotationMissionSummaryResponse
   */
  async getAnnotationMissionSummaryWithOptions(request: GetAnnotationMissionSummaryRequest, runtime: $dara.RuntimeOptions): Promise<GetAnnotationMissionSummaryResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.annotationMissionId)) {
      query["AnnotationMissionId"] = request.annotationMissionId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAnnotationMissionSummary",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetAnnotationMissionSummaryResponse>(await this.callApi(params, req, runtime), new GetAnnotationMissionSummaryResponse({}));
  }

  /**
   * @param request - GetAnnotationMissionSummaryRequest
   * @returns GetAnnotationMissionSummaryResponse
   */
  async getAnnotationMissionSummary(request: GetAnnotationMissionSummaryRequest): Promise<GetAnnotationMissionSummaryResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAnnotationMissionSummaryWithOptions(request, runtime);
  }

  /**
   * @param request - GetAnnotationMissionTagInfoListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAnnotationMissionTagInfoListResponse
   */
  async getAnnotationMissionTagInfoListWithOptions(request: GetAnnotationMissionTagInfoListRequest, runtime: $dara.RuntimeOptions): Promise<GetAnnotationMissionTagInfoListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageIndex)) {
      query["PageIndex"] = request.pageIndex;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAnnotationMissionTagInfoList",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetAnnotationMissionTagInfoListResponse>(await this.callApi(params, req, runtime), new GetAnnotationMissionTagInfoListResponse({}));
  }

  /**
   * @param request - GetAnnotationMissionTagInfoListRequest
   * @returns GetAnnotationMissionTagInfoListResponse
   */
  async getAnnotationMissionTagInfoList(request: GetAnnotationMissionTagInfoListRequest): Promise<GetAnnotationMissionTagInfoListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAnnotationMissionTagInfoListWithOptions(request, runtime);
  }

  /**
   * @param request - GetAsrServerInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetAsrServerInfoResponse
   */
  async getAsrServerInfoWithOptions(request: GetAsrServerInfoRequest, runtime: $dara.RuntimeOptions): Promise<GetAsrServerInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.entryId)) {
      query["EntryId"] = request.entryId;
    }

    if (!$dara.isNull(request.strategyLevel)) {
      query["StrategyLevel"] = request.strategyLevel;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetAsrServerInfo",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetAsrServerInfoResponse>(await this.callApi(params, req, runtime), new GetAsrServerInfoResponse({}));
  }

  /**
   * @param request - GetAsrServerInfoRequest
   * @returns GetAsrServerInfoResponse
   */
  async getAsrServerInfo(request: GetAsrServerInfoRequest): Promise<GetAsrServerInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getAsrServerInfoWithOptions(request, runtime);
  }

  /**
   * @param request - GetBaseStrategyPeriodRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetBaseStrategyPeriodResponse
   */
  async getBaseStrategyPeriodWithOptions(request: GetBaseStrategyPeriodRequest, runtime: $dara.RuntimeOptions): Promise<GetBaseStrategyPeriodResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.entryId)) {
      query["EntryId"] = request.entryId;
    }

    if (!$dara.isNull(request.strategyLevel)) {
      query["StrategyLevel"] = request.strategyLevel;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetBaseStrategyPeriod",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetBaseStrategyPeriodResponse>(await this.callApi(params, req, runtime), new GetBaseStrategyPeriodResponse({}));
  }

  /**
   * @param request - GetBaseStrategyPeriodRequest
   * @returns GetBaseStrategyPeriodResponse
   */
  async getBaseStrategyPeriod(request: GetBaseStrategyPeriodRequest): Promise<GetBaseStrategyPeriodResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getBaseStrategyPeriodWithOptions(request, runtime);
  }

  /**
   * @param request - GetConcurrentConversationQuotaRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetConcurrentConversationQuotaResponse
   */
  async getConcurrentConversationQuotaWithOptions(runtime: $dara.RuntimeOptions): Promise<GetConcurrentConversationQuotaResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetConcurrentConversationQuota",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetConcurrentConversationQuotaResponse>(await this.callApi(params, req, runtime), new GetConcurrentConversationQuotaResponse({}));
  }

  /**
   * @returns GetConcurrentConversationQuotaResponse
   */
  async getConcurrentConversationQuota(): Promise<GetConcurrentConversationQuotaResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getConcurrentConversationQuotaWithOptions(runtime);
  }

  /**
   * @param request - GetContactBlockListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetContactBlockListResponse
   */
  async getContactBlockListWithOptions(request: GetContactBlockListRequest, runtime: $dara.RuntimeOptions): Promise<GetContactBlockListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.countTotalRow)) {
      query["CountTotalRow"] = request.countTotalRow;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetContactBlockList",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetContactBlockListResponse>(await this.callApi(params, req, runtime), new GetContactBlockListResponse({}));
  }

  /**
   * @param request - GetContactBlockListRequest
   * @returns GetContactBlockListResponse
   */
  async getContactBlockList(request: GetContactBlockListRequest): Promise<GetContactBlockListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getContactBlockListWithOptions(request, runtime);
  }

  /**
   * @param request - GetContactWhiteListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetContactWhiteListResponse
   */
  async getContactWhiteListWithOptions(request: GetContactWhiteListRequest, runtime: $dara.RuntimeOptions): Promise<GetContactWhiteListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.countTotalRow)) {
      query["CountTotalRow"] = request.countTotalRow;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetContactWhiteList",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetContactWhiteListResponse>(await this.callApi(params, req, runtime), new GetContactWhiteListResponse({}));
  }

  /**
   * @param request - GetContactWhiteListRequest
   * @returns GetContactWhiteListResponse
   */
  async getContactWhiteList(request: GetContactWhiteListRequest): Promise<GetContactWhiteListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getContactWhiteListWithOptions(request, runtime);
  }

  /**
   * @param request - GetCurrentConcurrencyRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetCurrentConcurrencyResponse
   */
  async getCurrentConcurrencyWithOptions(request: GetCurrentConcurrencyRequest, runtime: $dara.RuntimeOptions): Promise<GetCurrentConcurrencyResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetCurrentConcurrency",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetCurrentConcurrencyResponse>(await this.callApi(params, req, runtime), new GetCurrentConcurrencyResponse({}));
  }

  /**
   * @param request - GetCurrentConcurrencyRequest
   * @returns GetCurrentConcurrencyResponse
   */
  async getCurrentConcurrency(request: GetCurrentConcurrencyRequest): Promise<GetCurrentConcurrencyResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getCurrentConcurrencyWithOptions(request, runtime);
  }

  /**
   * @param request - GetEffectiveDaysRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetEffectiveDaysResponse
   */
  async getEffectiveDaysWithOptions(request: GetEffectiveDaysRequest, runtime: $dara.RuntimeOptions): Promise<GetEffectiveDaysResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.entryId)) {
      query["EntryId"] = request.entryId;
    }

    if (!$dara.isNull(request.strategyLevel)) {
      query["StrategyLevel"] = request.strategyLevel;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetEffectiveDays",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetEffectiveDaysResponse>(await this.callApi(params, req, runtime), new GetEffectiveDaysResponse({}));
  }

  /**
   * @param request - GetEffectiveDaysRequest
   * @returns GetEffectiveDaysResponse
   */
  async getEffectiveDays(request: GetEffectiveDaysRequest): Promise<GetEffectiveDaysResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getEffectiveDaysWithOptions(request, runtime);
  }

  /**
   * @param request - GetEmptyNumberNoMoreCallsInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetEmptyNumberNoMoreCallsInfoResponse
   */
  async getEmptyNumberNoMoreCallsInfoWithOptions(request: GetEmptyNumberNoMoreCallsInfoRequest, runtime: $dara.RuntimeOptions): Promise<GetEmptyNumberNoMoreCallsInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.entryId)) {
      query["EntryId"] = request.entryId;
    }

    if (!$dara.isNull(request.strategyLevel)) {
      query["StrategyLevel"] = request.strategyLevel;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetEmptyNumberNoMoreCallsInfo",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetEmptyNumberNoMoreCallsInfoResponse>(await this.callApi(params, req, runtime), new GetEmptyNumberNoMoreCallsInfoResponse({}));
  }

  /**
   * @param request - GetEmptyNumberNoMoreCallsInfoRequest
   * @returns GetEmptyNumberNoMoreCallsInfoResponse
   */
  async getEmptyNumberNoMoreCallsInfo(request: GetEmptyNumberNoMoreCallsInfoRequest): Promise<GetEmptyNumberNoMoreCallsInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getEmptyNumberNoMoreCallsInfoWithOptions(request, runtime);
  }

  /**
   * @param request - GetJobDataUploadParamsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetJobDataUploadParamsResponse
   */
  async getJobDataUploadParamsWithOptions(request: GetJobDataUploadParamsRequest, runtime: $dara.RuntimeOptions): Promise<GetJobDataUploadParamsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.busiType)) {
      query["BusiType"] = request.busiType;
    }

    if (!$dara.isNull(request.fileName)) {
      query["FileName"] = request.fileName;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.path)) {
      query["Path"] = request.path;
    }

    if (!$dara.isNull(request.uniqueId)) {
      query["UniqueId"] = request.uniqueId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetJobDataUploadParams",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetJobDataUploadParamsResponse>(await this.callApi(params, req, runtime), new GetJobDataUploadParamsResponse({}));
  }

  /**
   * @param request - GetJobDataUploadParamsRequest
   * @returns GetJobDataUploadParamsResponse
   */
  async getJobDataUploadParams(request: GetJobDataUploadParamsRequest): Promise<GetJobDataUploadParamsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getJobDataUploadParamsWithOptions(request, runtime);
  }

  /**
   * @param request - GetMaxAttemptsPerDayRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetMaxAttemptsPerDayResponse
   */
  async getMaxAttemptsPerDayWithOptions(request: GetMaxAttemptsPerDayRequest, runtime: $dara.RuntimeOptions): Promise<GetMaxAttemptsPerDayResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.entryId)) {
      query["EntryId"] = request.entryId;
    }

    if (!$dara.isNull(request.strategyLevel)) {
      query["StrategyLevel"] = request.strategyLevel;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetMaxAttemptsPerDay",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetMaxAttemptsPerDayResponse>(await this.callApi(params, req, runtime), new GetMaxAttemptsPerDayResponse({}));
  }

  /**
   * @param request - GetMaxAttemptsPerDayRequest
   * @returns GetMaxAttemptsPerDayResponse
   */
  async getMaxAttemptsPerDay(request: GetMaxAttemptsPerDayRequest): Promise<GetMaxAttemptsPerDayResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getMaxAttemptsPerDayWithOptions(request, runtime);
  }

  /**
   * 获取号码库模板下载链接
   * 
   * @param request - GetNumberDistrictInfoTemplateDownloadUrlRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetNumberDistrictInfoTemplateDownloadUrlResponse
   */
  async getNumberDistrictInfoTemplateDownloadUrlWithOptions(runtime: $dara.RuntimeOptions): Promise<GetNumberDistrictInfoTemplateDownloadUrlResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetNumberDistrictInfoTemplateDownloadUrl",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetNumberDistrictInfoTemplateDownloadUrlResponse>(await this.callApi(params, req, runtime), new GetNumberDistrictInfoTemplateDownloadUrlResponse({}));
  }

  /**
   * 获取号码库模板下载链接
   * @returns GetNumberDistrictInfoTemplateDownloadUrlResponse
   */
  async getNumberDistrictInfoTemplateDownloadUrl(): Promise<GetNumberDistrictInfoTemplateDownloadUrlResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getNumberDistrictInfoTemplateDownloadUrlWithOptions(runtime);
  }

  /**
   * GetRealtimeConcurrencyReport
   * 
   * @param request - GetRealtimeConcurrencyReportRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetRealtimeConcurrencyReportResponse
   */
  async getRealtimeConcurrencyReportWithOptions(request: GetRealtimeConcurrencyReportRequest, runtime: $dara.RuntimeOptions): Promise<GetRealtimeConcurrencyReportResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetRealtimeConcurrencyReport",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetRealtimeConcurrencyReportResponse>(await this.callApi(params, req, runtime), new GetRealtimeConcurrencyReportResponse({}));
  }

  /**
   * GetRealtimeConcurrencyReport
   * 
   * @param request - GetRealtimeConcurrencyReportRequest
   * @returns GetRealtimeConcurrencyReportResponse
   */
  async getRealtimeConcurrencyReport(request: GetRealtimeConcurrencyReportRequest): Promise<GetRealtimeConcurrencyReportResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getRealtimeConcurrencyReportWithOptions(request, runtime);
  }

  /**
   * @param request - GetSummaryInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetSummaryInfoResponse
   */
  async getSummaryInfoWithOptions(request: GetSummaryInfoRequest, runtime: $dara.RuntimeOptions): Promise<GetSummaryInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceIdList)) {
      query["InstanceIdList"] = request.instanceIdList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetSummaryInfo",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetSummaryInfoResponse>(await this.callApi(params, req, runtime), new GetSummaryInfoResponse({}));
  }

  /**
   * @param request - GetSummaryInfoRequest
   * @returns GetSummaryInfoResponse
   */
  async getSummaryInfo(request: GetSummaryInfoRequest): Promise<GetSummaryInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getSummaryInfoWithOptions(request, runtime);
  }

  /**
   * @param request - GetTaskByUuidRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetTaskByUuidResponse
   */
  async getTaskByUuidWithOptions(request: GetTaskByUuidRequest, runtime: $dara.RuntimeOptions): Promise<GetTaskByUuidResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "GetTaskByUuid",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetTaskByUuidResponse>(await this.callApi(params, req, runtime), new GetTaskByUuidResponse({}));
  }

  /**
   * @param request - GetTaskByUuidRequest
   * @returns GetTaskByUuidResponse
   */
  async getTaskByUuid(request: GetTaskByUuidRequest): Promise<GetTaskByUuidResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getTaskByUuidWithOptions(request, runtime);
  }

  /**
   * @param request - GetVersionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns GetVersionResponse
   */
  async getVersionWithOptions(runtime: $dara.RuntimeOptions): Promise<GetVersionResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "GetVersion",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<GetVersionResponse>(await this.callApi(params, req, runtime), new GetVersionResponse({}));
  }

  /**
   * @returns GetVersionResponse
   */
  async getVersion(): Promise<GetVersionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.getVersionWithOptions(runtime);
  }

  /**
   * @param request - ImportScriptRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ImportScriptResponse
   */
  async importScriptWithOptions(request: ImportScriptRequest, runtime: $dara.RuntimeOptions): Promise<ImportScriptResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.nluEngine)) {
      query["NluEngine"] = request.nluEngine;
    }

    if (!$dara.isNull(request.signatureUrl)) {
      query["SignatureUrl"] = request.signatureUrl;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ImportScript",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ImportScriptResponse>(await this.callApi(params, req, runtime), new ImportScriptResponse({}));
  }

  /**
   * @param request - ImportScriptRequest
   * @returns ImportScriptResponse
   */
  async importScript(request: ImportScriptRequest): Promise<ImportScriptResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.importScriptWithOptions(request, runtime);
  }

  /**
   * InflightTaskTimeout
   * 
   * @param request - InflightTaskTimeoutRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns InflightTaskTimeoutResponse
   */
  async inflightTaskTimeoutWithOptions(request: InflightTaskTimeoutRequest, runtime: $dara.RuntimeOptions): Promise<InflightTaskTimeoutResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceOwnerId)) {
      query["InstanceOwnerId"] = request.instanceOwnerId;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "InflightTaskTimeout",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<InflightTaskTimeoutResponse>(await this.callApi(params, req, runtime), new InflightTaskTimeoutResponse({}));
  }

  /**
   * InflightTaskTimeout
   * 
   * @param request - InflightTaskTimeoutRequest
   * @returns InflightTaskTimeoutResponse
   */
  async inflightTaskTimeout(request: InflightTaskTimeoutRequest): Promise<InflightTaskTimeoutResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.inflightTaskTimeoutWithOptions(request, runtime);
  }

  /**
   * @param request - ListAgentProfilesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAgentProfilesResponse
   */
  async listAgentProfilesWithOptions(request: ListAgentProfilesRequest, runtime: $dara.RuntimeOptions): Promise<ListAgentProfilesResponse> {
    request.validate();
    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.appIp)) {
      body["AppIp"] = request.appIp;
    }

    if (!$dara.isNull(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      body["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAgentProfiles",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListAgentProfilesResponse>(await this.callApi(params, req, runtime), new ListAgentProfilesResponse({}));
  }

  /**
   * @param request - ListAgentProfilesRequest
   * @returns ListAgentProfilesResponse
   */
  async listAgentProfiles(request: ListAgentProfilesRequest): Promise<ListAgentProfilesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAgentProfilesWithOptions(request, runtime);
  }

  /**
   * 租户绑定号码列表
   * 
   * @param request - ListAllTenantBindNumberBindingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAllTenantBindNumberBindingResponse
   */
  async listAllTenantBindNumberBindingWithOptions(runtime: $dara.RuntimeOptions): Promise<ListAllTenantBindNumberBindingResponse> {
    let req = new $OpenApiUtil.OpenApiRequest({ });
    let params = new $OpenApiUtil.Params({
      action: "ListAllTenantBindNumberBinding",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListAllTenantBindNumberBindingResponse>(await this.callApi(params, req, runtime), new ListAllTenantBindNumberBindingResponse({}));
  }

  /**
   * 租户绑定号码列表
   * @returns ListAllTenantBindNumberBindingResponse
   */
  async listAllTenantBindNumberBinding(): Promise<ListAllTenantBindNumberBindingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAllTenantBindNumberBindingWithOptions(runtime);
  }

  /**
   * @param request - ListAnnotationMissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAnnotationMissionResponse
   */
  async listAnnotationMissionWithOptions(request: ListAnnotationMissionRequest, runtime: $dara.RuntimeOptions): Promise<ListAnnotationMissionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.annotationMissionId)) {
      query["AnnotationMissionId"] = request.annotationMissionId;
    }

    if (!$dara.isNull(request.annotationMissionName)) {
      query["AnnotationMissionName"] = request.annotationMissionName;
    }

    if (!$dara.isNull(request.annotationStatusListFilter)) {
      query["AnnotationStatusListFilter"] = request.annotationStatusListFilter;
    }

    if (!$dara.isNull(request.annotationStatusListStringFilter)) {
      query["AnnotationStatusListStringFilter"] = request.annotationStatusListStringFilter;
    }

    if (!$dara.isNull(request.createTimeEndFilter)) {
      query["CreateTimeEndFilter"] = request.createTimeEndFilter;
    }

    if (!$dara.isNull(request.createTimeStartFilter)) {
      query["CreateTimeStartFilter"] = request.createTimeStartFilter;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageIndex)) {
      query["PageIndex"] = request.pageIndex;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAnnotationMission",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListAnnotationMissionResponse>(await this.callApi(params, req, runtime), new ListAnnotationMissionResponse({}));
  }

  /**
   * @param request - ListAnnotationMissionRequest
   * @returns ListAnnotationMissionResponse
   */
  async listAnnotationMission(request: ListAnnotationMissionRequest): Promise<ListAnnotationMissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAnnotationMissionWithOptions(request, runtime);
  }

  /**
   * @param request - ListAnnotationMissionSessionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListAnnotationMissionSessionResponse
   */
  async listAnnotationMissionSessionWithOptions(request: ListAnnotationMissionSessionRequest, runtime: $dara.RuntimeOptions): Promise<ListAnnotationMissionSessionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.annotationMissionId)) {
      query["AnnotationMissionId"] = request.annotationMissionId;
    }

    if (!$dara.isNull(request.annotationMissionSessionId)) {
      query["AnnotationMissionSessionId"] = request.annotationMissionSessionId;
    }

    if (!$dara.isNull(request.environment)) {
      query["Environment"] = request.environment;
    }

    if (!$dara.isNull(request.includeStatusListJsonString)) {
      query["IncludeStatusListJsonString"] = request.includeStatusListJsonString;
    }

    if (!$dara.isNull(request.pageIndex)) {
      query["PageIndex"] = request.pageIndex;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListAnnotationMissionSession",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListAnnotationMissionSessionResponse>(await this.callApi(params, req, runtime), new ListAnnotationMissionSessionResponse({}));
  }

  /**
   * @param request - ListAnnotationMissionSessionRequest
   * @returns ListAnnotationMissionSessionResponse
   */
  async listAnnotationMissionSession(request: ListAnnotationMissionSessionRequest): Promise<ListAnnotationMissionSessionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listAnnotationMissionSessionWithOptions(request, runtime);
  }

  /**
   * @param request - ListApiPluginsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListApiPluginsResponse
   */
  async listApiPluginsWithOptions(request: ListApiPluginsRequest, runtime: $dara.RuntimeOptions): Promise<ListApiPluginsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.uuidsJson)) {
      query["UuidsJson"] = request.uuidsJson;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListApiPlugins",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListApiPluginsResponse>(await this.callApi(params, req, runtime), new ListApiPluginsResponse({}));
  }

  /**
   * @param request - ListApiPluginsRequest
   * @returns ListApiPluginsResponse
   */
  async listApiPlugins(request: ListApiPluginsRequest): Promise<ListApiPluginsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listApiPluginsWithOptions(request, runtime);
  }

  /**
   * ListBeebotIntent
   * 
   * @param request - ListBeebotIntentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListBeebotIntentResponse
   */
  async listBeebotIntentWithOptions(request: ListBeebotIntentRequest, runtime: $dara.RuntimeOptions): Promise<ListBeebotIntentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentName)) {
      query["IntentName"] = request.intentName;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListBeebotIntent",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListBeebotIntentResponse>(await this.callApi(params, req, runtime), new ListBeebotIntentResponse({}));
  }

  /**
   * ListBeebotIntent
   * 
   * @param request - ListBeebotIntentRequest
   * @returns ListBeebotIntentResponse
   */
  async listBeebotIntent(request: ListBeebotIntentRequest): Promise<ListBeebotIntentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listBeebotIntentWithOptions(request, runtime);
  }

  /**
   * ListBeebotIntentLgf
   * 
   * @param request - ListBeebotIntentLgfRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListBeebotIntentLgfResponse
   */
  async listBeebotIntentLgfWithOptions(request: ListBeebotIntentLgfRequest, runtime: $dara.RuntimeOptions): Promise<ListBeebotIntentLgfResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentId)) {
      query["IntentId"] = request.intentId;
    }

    if (!$dara.isNull(request.lgfText)) {
      query["LgfText"] = request.lgfText;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListBeebotIntentLgf",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListBeebotIntentLgfResponse>(await this.callApi(params, req, runtime), new ListBeebotIntentLgfResponse({}));
  }

  /**
   * ListBeebotIntentLgf
   * 
   * @param request - ListBeebotIntentLgfRequest
   * @returns ListBeebotIntentLgfResponse
   */
  async listBeebotIntentLgf(request: ListBeebotIntentLgfRequest): Promise<ListBeebotIntentLgfResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listBeebotIntentLgfWithOptions(request, runtime);
  }

  /**
   * ListBeebotIntentUserSay
   * 
   * @param request - ListBeebotIntentUserSayRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListBeebotIntentUserSayResponse
   */
  async listBeebotIntentUserSayWithOptions(request: ListBeebotIntentUserSayRequest, runtime: $dara.RuntimeOptions): Promise<ListBeebotIntentUserSayResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.content)) {
      query["Content"] = request.content;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentId)) {
      query["IntentId"] = request.intentId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListBeebotIntentUserSay",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListBeebotIntentUserSayResponse>(await this.callApi(params, req, runtime), new ListBeebotIntentUserSayResponse({}));
  }

  /**
   * ListBeebotIntentUserSay
   * 
   * @param request - ListBeebotIntentUserSayRequest
   * @returns ListBeebotIntentUserSayResponse
   */
  async listBeebotIntentUserSay(request: ListBeebotIntentUserSayRequest): Promise<ListBeebotIntentUserSayResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listBeebotIntentUserSayWithOptions(request, runtime);
  }

  /**
   * @param request - ListChatbotInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListChatbotInstancesResponse
   */
  async listChatbotInstancesWithOptions(request: ListChatbotInstancesRequest, runtime: $dara.RuntimeOptions): Promise<ListChatbotInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.agentKey)) {
      query["AgentKey"] = request.agentKey;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListChatbotInstances",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListChatbotInstancesResponse>(await this.callApi(params, req, runtime), new ListChatbotInstancesResponse({}));
  }

  /**
   * @param request - ListChatbotInstancesRequest
   * @returns ListChatbotInstancesResponse
   */
  async listChatbotInstances(request: ListChatbotInstancesRequest): Promise<ListChatbotInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listChatbotInstancesWithOptions(request, runtime);
  }

  /**
   * @param request - ListDialogueFlowsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDialogueFlowsResponse
   */
  async listDialogueFlowsWithOptions(request: ListDialogueFlowsRequest, runtime: $dara.RuntimeOptions): Promise<ListDialogueFlowsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDialogueFlows",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListDialogueFlowsResponse>(await this.callApi(params, req, runtime), new ListDialogueFlowsResponse({}));
  }

  /**
   * @param request - ListDialogueFlowsRequest
   * @returns ListDialogueFlowsResponse
   */
  async listDialogueFlows(request: ListDialogueFlowsRequest): Promise<ListDialogueFlowsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDialogueFlowsWithOptions(request, runtime);
  }

  /**
   * @param request - ListDownloadTasksRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListDownloadTasksResponse
   */
  async listDownloadTasksWithOptions(request: ListDownloadTasksRequest, runtime: $dara.RuntimeOptions): Promise<ListDownloadTasksResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListDownloadTasks",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListDownloadTasksResponse>(await this.callApi(params, req, runtime), new ListDownloadTasksResponse({}));
  }

  /**
   * @param request - ListDownloadTasksRequest
   * @returns ListDownloadTasksResponse
   */
  async listDownloadTasks(request: ListDownloadTasksRequest): Promise<ListDownloadTasksResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listDownloadTasksWithOptions(request, runtime);
  }

  /**
   * @param request - ListFlashSmsTemplatesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListFlashSmsTemplatesResponse
   */
  async listFlashSmsTemplatesWithOptions(request: ListFlashSmsTemplatesRequest, runtime: $dara.RuntimeOptions): Promise<ListFlashSmsTemplatesResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListFlashSmsTemplates",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListFlashSmsTemplatesResponse>(await this.callApi(params, req, runtime), new ListFlashSmsTemplatesResponse({}));
  }

  /**
   * @param request - ListFlashSmsTemplatesRequest
   * @returns ListFlashSmsTemplatesResponse
   */
  async listFlashSmsTemplates(request: ListFlashSmsTemplatesRequest): Promise<ListFlashSmsTemplatesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listFlashSmsTemplatesWithOptions(request, runtime);
  }

  /**
   * @param request - ListGlobalQuestionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListGlobalQuestionsResponse
   */
  async listGlobalQuestionsWithOptions(request: ListGlobalQuestionsRequest, runtime: $dara.RuntimeOptions): Promise<ListGlobalQuestionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListGlobalQuestions",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListGlobalQuestionsResponse>(await this.callApi(params, req, runtime), new ListGlobalQuestionsResponse({}));
  }

  /**
   * @param request - ListGlobalQuestionsRequest
   * @returns ListGlobalQuestionsResponse
   */
  async listGlobalQuestions(request: ListGlobalQuestionsRequest): Promise<ListGlobalQuestionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listGlobalQuestionsWithOptions(request, runtime);
  }

  /**
   * @param request - ListInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListInstancesResponse
   */
  async listInstancesWithOptions(request: ListInstancesRequest, runtime: $dara.RuntimeOptions): Promise<ListInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceGroupId)) {
      query["ResourceGroupId"] = request.resourceGroupId;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListInstances",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListInstancesResponse>(await this.callApi(params, req, runtime), new ListInstancesResponse({}));
  }

  /**
   * @param request - ListInstancesRequest
   * @returns ListInstancesResponse
   */
  async listInstances(request: ListInstancesRequest): Promise<ListInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listInstancesWithOptions(request, runtime);
  }

  /**
   * 意图列表
   * 
   * @param request - ListIntentionsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListIntentionsResponse
   */
  async listIntentionsWithOptions(request: ListIntentionsRequest, runtime: $dara.RuntimeOptions): Promise<ListIntentionsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.annotationMissionDataSourceType)) {
      query["AnnotationMissionDataSourceType"] = request.annotationMissionDataSourceType;
    }

    if (!$dara.isNull(request.botId)) {
      query["BotId"] = request.botId;
    }

    if (!$dara.isNull(request.environment)) {
      query["Environment"] = request.environment;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentId)) {
      query["IntentId"] = request.intentId;
    }

    if (!$dara.isNull(request.pageIndex)) {
      query["PageIndex"] = request.pageIndex;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.userNick)) {
      query["UserNick"] = request.userNick;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListIntentions",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListIntentionsResponse>(await this.callApi(params, req, runtime), new ListIntentionsResponse({}));
  }

  /**
   * 意图列表
   * 
   * @param request - ListIntentionsRequest
   * @returns ListIntentionsResponse
   */
  async listIntentions(request: ListIntentionsRequest): Promise<ListIntentionsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listIntentionsWithOptions(request, runtime);
  }

  /**
   * @param request - ListIntentsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListIntentsResponse
   */
  async listIntentsWithOptions(request: ListIntentsRequest, runtime: $dara.RuntimeOptions): Promise<ListIntentsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.keyword)) {
      query["Keyword"] = request.keyword;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListIntents",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListIntentsResponse>(await this.callApi(params, req, runtime), new ListIntentsResponse({}));
  }

  /**
   * @param request - ListIntentsRequest
   * @returns ListIntentsResponse
   */
  async listIntents(request: ListIntentsRequest): Promise<ListIntentsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listIntentsWithOptions(request, runtime);
  }

  /**
   * @param request - ListJobGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListJobGroupsResponse
   */
  async listJobGroupsWithOptions(request: ListJobGroupsRequest, runtime: $dara.RuntimeOptions): Promise<ListJobGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.asyncQuery)) {
      query["AsyncQuery"] = request.asyncQuery;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupStatusFilter)) {
      query["JobGroupStatusFilter"] = request.jobGroupStatusFilter;
    }

    if (!$dara.isNull(request.onlyMinConcurrencyEnabled)) {
      query["OnlyMinConcurrencyEnabled"] = request.onlyMinConcurrencyEnabled;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.searchText)) {
      query["SearchText"] = request.searchText;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListJobGroups",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListJobGroupsResponse>(await this.callApi(params, req, runtime), new ListJobGroupsResponse({}));
  }

  /**
   * @param request - ListJobGroupsRequest
   * @returns ListJobGroupsResponse
   */
  async listJobGroups(request: ListJobGroupsRequest): Promise<ListJobGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listJobGroupsWithOptions(request, runtime);
  }

  /**
   * @param request - ListJobGroupsAsyncRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListJobGroupsAsyncResponse
   */
  async listJobGroupsAsyncWithOptions(request: ListJobGroupsAsyncRequest, runtime: $dara.RuntimeOptions): Promise<ListJobGroupsAsyncResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListJobGroupsAsync",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListJobGroupsAsyncResponse>(await this.callApi(params, req, runtime), new ListJobGroupsAsyncResponse({}));
  }

  /**
   * @param request - ListJobGroupsAsyncRequest
   * @returns ListJobGroupsAsyncResponse
   */
  async listJobGroupsAsync(request: ListJobGroupsAsyncRequest): Promise<ListJobGroupsAsyncResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listJobGroupsAsyncWithOptions(request, runtime);
  }

  /**
   * ListJobs
   * 
   * @param request - ListJobsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListJobsResponse
   */
  async listJobsWithOptions(request: ListJobsRequest, runtime: $dara.RuntimeOptions): Promise<ListJobsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListJobs",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListJobsResponse>(await this.callApi(params, req, runtime), new ListJobsResponse({}));
  }

  /**
   * ListJobs
   * 
   * @param request - ListJobsRequest
   * @returns ListJobsResponse
   */
  async listJobs(request: ListJobsRequest): Promise<ListJobsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listJobsWithOptions(request, runtime);
  }

  /**
   * @param request - ListJobsByGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListJobsByGroupResponse
   */
  async listJobsByGroupWithOptions(request: ListJobsByGroupRequest, runtime: $dara.RuntimeOptions): Promise<ListJobsByGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobFailureReason)) {
      query["JobFailureReason"] = request.jobFailureReason;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    if (!$dara.isNull(request.jobStatus)) {
      query["JobStatus"] = request.jobStatus;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListJobsByGroup",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListJobsByGroupResponse>(await this.callApi(params, req, runtime), new ListJobsByGroupResponse({}));
  }

  /**
   * @param request - ListJobsByGroupRequest
   * @returns ListJobsByGroupResponse
   */
  async listJobsByGroup(request: ListJobsByGroupRequest): Promise<ListJobsByGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listJobsByGroupWithOptions(request, runtime);
  }

  /**
   * @param request - ListOutboundCallNumbersRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListOutboundCallNumbersResponse
   */
  async listOutboundCallNumbersWithOptions(request: ListOutboundCallNumbersRequest, runtime: $dara.RuntimeOptions): Promise<ListOutboundCallNumbersResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListOutboundCallNumbers",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListOutboundCallNumbersResponse>(await this.callApi(params, req, runtime), new ListOutboundCallNumbersResponse({}));
  }

  /**
   * @param request - ListOutboundCallNumbersRequest
   * @returns ListOutboundCallNumbersResponse
   */
  async listOutboundCallNumbers(request: ListOutboundCallNumbersRequest): Promise<ListOutboundCallNumbersResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listOutboundCallNumbersWithOptions(request, runtime);
  }

  /**
   * @param request - ListResourceTagsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListResourceTagsResponse
   */
  async listResourceTagsWithOptions(request: ListResourceTagsRequest, runtime: $dara.RuntimeOptions): Promise<ListResourceTagsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListResourceTags",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListResourceTagsResponse>(await this.callApi(params, req, runtime), new ListResourceTagsResponse({}));
  }

  /**
   * @param request - ListResourceTagsRequest
   * @returns ListResourceTagsResponse
   */
  async listResourceTags(request: ListResourceTagsRequest): Promise<ListResourceTagsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listResourceTagsWithOptions(request, runtime);
  }

  /**
   * @param request - ListSchedulerInstancesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListSchedulerInstancesResponse
   */
  async listSchedulerInstancesWithOptions(request: ListSchedulerInstancesRequest, runtime: $dara.RuntimeOptions): Promise<ListSchedulerInstancesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceOwnerId)) {
      query["InstanceOwnerId"] = request.instanceOwnerId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListSchedulerInstances",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListSchedulerInstancesResponse>(await this.callApi(params, req, runtime), new ListSchedulerInstancesResponse({}));
  }

  /**
   * @param request - ListSchedulerInstancesRequest
   * @returns ListSchedulerInstancesResponse
   */
  async listSchedulerInstances(request: ListSchedulerInstancesRequest): Promise<ListSchedulerInstancesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listSchedulerInstancesWithOptions(request, runtime);
  }

  /**
   * @param request - ListScriptPublishHistoriesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListScriptPublishHistoriesResponse
   */
  async listScriptPublishHistoriesWithOptions(request: ListScriptPublishHistoriesRequest, runtime: $dara.RuntimeOptions): Promise<ListScriptPublishHistoriesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListScriptPublishHistories",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListScriptPublishHistoriesResponse>(await this.callApi(params, req, runtime), new ListScriptPublishHistoriesResponse({}));
  }

  /**
   * @param request - ListScriptPublishHistoriesRequest
   * @returns ListScriptPublishHistoriesResponse
   */
  async listScriptPublishHistories(request: ListScriptPublishHistoriesRequest): Promise<ListScriptPublishHistoriesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listScriptPublishHistoriesWithOptions(request, runtime);
  }

  /**
   * @param request - ListScriptRecordingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListScriptRecordingResponse
   */
  async listScriptRecordingWithOptions(request: ListScriptRecordingRequest, runtime: $dara.RuntimeOptions): Promise<ListScriptRecordingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.refIdsJson)) {
      query["RefIdsJson"] = request.refIdsJson;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.search)) {
      query["Search"] = request.search;
    }

    if (!$dara.isNull(request.statesJson)) {
      query["StatesJson"] = request.statesJson;
    }

    if (!$dara.isNull(request.uuidsJson)) {
      query["UuidsJson"] = request.uuidsJson;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListScriptRecording",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListScriptRecordingResponse>(await this.callApi(params, req, runtime), new ListScriptRecordingResponse({}));
  }

  /**
   * @param request - ListScriptRecordingRequest
   * @returns ListScriptRecordingResponse
   */
  async listScriptRecording(request: ListScriptRecordingRequest): Promise<ListScriptRecordingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listScriptRecordingWithOptions(request, runtime);
  }

  /**
   * @param request - ListScriptVoiceConfigsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListScriptVoiceConfigsResponse
   */
  async listScriptVoiceConfigsWithOptions(request: ListScriptVoiceConfigsRequest, runtime: $dara.RuntimeOptions): Promise<ListScriptVoiceConfigsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListScriptVoiceConfigs",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListScriptVoiceConfigsResponse>(await this.callApi(params, req, runtime), new ListScriptVoiceConfigsResponse({}));
  }

  /**
   * @param request - ListScriptVoiceConfigsRequest
   * @returns ListScriptVoiceConfigsResponse
   */
  async listScriptVoiceConfigs(request: ListScriptVoiceConfigsRequest): Promise<ListScriptVoiceConfigsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listScriptVoiceConfigsWithOptions(request, runtime);
  }

  /**
   * -
   * 
   * @param request - ListScriptsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListScriptsResponse
   */
  async listScriptsWithOptions(request: ListScriptsRequest, runtime: $dara.RuntimeOptions): Promise<ListScriptsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.nluEngine)) {
      query["NluEngine"] = request.nluEngine;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.scriptName)) {
      query["ScriptName"] = request.scriptName;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListScripts",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListScriptsResponse>(await this.callApi(params, req, runtime), new ListScriptsResponse({}));
  }

  /**
   * -
   * 
   * @param request - ListScriptsRequest
   * @returns ListScriptsResponse
   */
  async listScripts(request: ListScriptsRequest): Promise<ListScriptsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listScriptsWithOptions(request, runtime);
  }

  /**
   * @param request - ListTagResourcesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTagResourcesResponse
   */
  async listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: $dara.RuntimeOptions): Promise<ListTagResourcesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.nextToken)) {
      query["NextToken"] = request.nextToken;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTagResources",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListTagResourcesResponse>(await this.callApi(params, req, runtime), new ListTagResourcesResponse({}));
  }

  /**
   * @param request - ListTagResourcesRequest
   * @returns ListTagResourcesResponse
   */
  async listTagResources(request: ListTagResourcesRequest): Promise<ListTagResourcesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTagResourcesWithOptions(request, runtime);
  }

  /**
   * @param request - ListTagsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ListTagsResponse
   */
  async listTagsWithOptions(request: ListTagsRequest, runtime: $dara.RuntimeOptions): Promise<ListTagsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ListTags",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ListTagsResponse>(await this.callApi(params, req, runtime), new ListTagsResponse({}));
  }

  /**
   * @param request - ListTagsRequest
   * @returns ListTagsResponse
   */
  async listTags(request: ListTagsRequest): Promise<ListTagsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.listTagsWithOptions(request, runtime);
  }

  /**
   * @param tmpReq - ModifyAgentProfileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAgentProfileResponse
   */
  async modifyAgentProfileWithOptions(tmpReq: ModifyAgentProfileRequest, runtime: $dara.RuntimeOptions): Promise<ModifyAgentProfileResponse> {
    tmpReq.validate();
    let request = new ModifyAgentProfileShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.faqCategoryIds)) {
      request.faqCategoryIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.faqCategoryIds, "FaqCategoryIds", "json");
    }

    let body : {[key: string ]: any} = { };
    if (!$dara.isNull(request.agentProfileId)) {
      body["AgentProfileId"] = request.agentProfileId;
    }

    if (!$dara.isNull(request.apiPluginJson)) {
      body["ApiPluginJson"] = request.apiPluginJson;
    }

    if (!$dara.isNull(request.description)) {
      body["Description"] = request.description;
    }

    if (!$dara.isNull(request.faqCategoryIdsShrink)) {
      body["FaqCategoryIds"] = request.faqCategoryIdsShrink;
    }

    if (!$dara.isNull(request.instanceId)) {
      body["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instructionJson)) {
      body["InstructionJson"] = request.instructionJson;
    }

    if (!$dara.isNull(request.labelsJson)) {
      body["LabelsJson"] = request.labelsJson;
    }

    if (!$dara.isNull(request.model)) {
      body["Model"] = request.model;
    }

    if (!$dara.isNull(request.modelConfig)) {
      body["ModelConfig"] = request.modelConfig;
    }

    if (!$dara.isNull(request.prompt)) {
      body["Prompt"] = request.prompt;
    }

    if (!$dara.isNull(request.promptJson)) {
      body["PromptJson"] = request.promptJson;
    }

    if (!$dara.isNull(request.scenario)) {
      body["Scenario"] = request.scenario;
    }

    if (!$dara.isNull(request.variablesJson)) {
      body["VariablesJson"] = request.variablesJson;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      body: OpenApiUtil.parseToMap(body),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAgentProfile",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyAgentProfileResponse>(await this.callApi(params, req, runtime), new ModifyAgentProfileResponse({}));
  }

  /**
   * @param request - ModifyAgentProfileRequest
   * @returns ModifyAgentProfileResponse
   */
  async modifyAgentProfile(request: ModifyAgentProfileRequest): Promise<ModifyAgentProfileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAgentProfileWithOptions(request, runtime);
  }

  /**
   * @param request - ModifyAnnotationMissionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyAnnotationMissionResponse
   */
  async modifyAnnotationMissionWithOptions(request: ModifyAnnotationMissionRequest, runtime: $dara.RuntimeOptions): Promise<ModifyAnnotationMissionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.annotationMissionId)) {
      query["AnnotationMissionId"] = request.annotationMissionId;
    }

    if (!$dara.isNull(request.annotationMissionName)) {
      query["AnnotationMissionName"] = request.annotationMissionName;
    }

    if (!$dara.isNull(request.annotationStatus)) {
      query["AnnotationStatus"] = request.annotationStatus;
    }

    if (!$dara.isNull(request.delete)) {
      query["Delete"] = request.delete;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyAnnotationMission",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyAnnotationMissionResponse>(await this.callApi(params, req, runtime), new ModifyAnnotationMissionResponse({}));
  }

  /**
   * @param request - ModifyAnnotationMissionRequest
   * @returns ModifyAnnotationMissionResponse
   */
  async modifyAnnotationMission(request: ModifyAnnotationMissionRequest): Promise<ModifyAnnotationMissionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyAnnotationMissionWithOptions(request, runtime);
  }

  /**
   * @param request - ModifyBatchJobsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyBatchJobsResponse
   */
  async modifyBatchJobsWithOptions(request: ModifyBatchJobsRequest, runtime: $dara.RuntimeOptions): Promise<ModifyBatchJobsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.batchJobName)) {
      query["BatchJobName"] = request.batchJobName;
    }

    if (!$dara.isNull(request.callingNumber)) {
      query["CallingNumber"] = request.callingNumber;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobFilePath)) {
      query["JobFilePath"] = request.jobFilePath;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.strategyJson)) {
      query["StrategyJson"] = request.strategyJson;
    }

    if (!$dara.isNull(request.submitted)) {
      query["Submitted"] = request.submitted;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyBatchJobs",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyBatchJobsResponse>(await this.callApi(params, req, runtime), new ModifyBatchJobsResponse({}));
  }

  /**
   * @param request - ModifyBatchJobsRequest
   * @returns ModifyBatchJobsResponse
   */
  async modifyBatchJobs(request: ModifyBatchJobsRequest): Promise<ModifyBatchJobsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyBatchJobsWithOptions(request, runtime);
  }

  /**
   * ModifyBeebotIntent
   * 
   * @param tmpReq - ModifyBeebotIntentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyBeebotIntentResponse
   */
  async modifyBeebotIntentWithOptions(tmpReq: ModifyBeebotIntentRequest, runtime: $dara.RuntimeOptions): Promise<ModifyBeebotIntentResponse> {
    tmpReq.validate();
    let request = new ModifyBeebotIntentShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.intentDefinition)) {
      request.intentDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.intentDefinition, "IntentDefinition", "json");
    }

    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentDefinitionShrink)) {
      query["IntentDefinition"] = request.intentDefinitionShrink;
    }

    if (!$dara.isNull(request.intentId)) {
      query["IntentId"] = request.intentId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyBeebotIntent",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyBeebotIntentResponse>(await this.callApi(params, req, runtime), new ModifyBeebotIntentResponse({}));
  }

  /**
   * ModifyBeebotIntent
   * 
   * @param request - ModifyBeebotIntentRequest
   * @returns ModifyBeebotIntentResponse
   */
  async modifyBeebotIntent(request: ModifyBeebotIntentRequest): Promise<ModifyBeebotIntentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyBeebotIntentWithOptions(request, runtime);
  }

  /**
   * ModifyBeebotIntentLgf
   * 
   * @param tmpReq - ModifyBeebotIntentLgfRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyBeebotIntentLgfResponse
   */
  async modifyBeebotIntentLgfWithOptions(tmpReq: ModifyBeebotIntentLgfRequest, runtime: $dara.RuntimeOptions): Promise<ModifyBeebotIntentLgfResponse> {
    tmpReq.validate();
    let request = new ModifyBeebotIntentLgfShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.lgfDefinition)) {
      request.lgfDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.lgfDefinition, "LgfDefinition", "json");
    }

    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.lgfDefinitionShrink)) {
      query["LgfDefinition"] = request.lgfDefinitionShrink;
    }

    if (!$dara.isNull(request.lgfId)) {
      query["LgfId"] = request.lgfId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyBeebotIntentLgf",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyBeebotIntentLgfResponse>(await this.callApi(params, req, runtime), new ModifyBeebotIntentLgfResponse({}));
  }

  /**
   * ModifyBeebotIntentLgf
   * 
   * @param request - ModifyBeebotIntentLgfRequest
   * @returns ModifyBeebotIntentLgfResponse
   */
  async modifyBeebotIntentLgf(request: ModifyBeebotIntentLgfRequest): Promise<ModifyBeebotIntentLgfResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyBeebotIntentLgfWithOptions(request, runtime);
  }

  /**
   * ModifyBeebotIntentUserSay
   * 
   * @param tmpReq - ModifyBeebotIntentUserSayRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyBeebotIntentUserSayResponse
   */
  async modifyBeebotIntentUserSayWithOptions(tmpReq: ModifyBeebotIntentUserSayRequest, runtime: $dara.RuntimeOptions): Promise<ModifyBeebotIntentUserSayResponse> {
    tmpReq.validate();
    let request = new ModifyBeebotIntentUserSayShrinkRequest({ });
    OpenApiUtil.convert(tmpReq, request);
    if (!$dara.isNull(tmpReq.userSayDefinition)) {
      request.userSayDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userSayDefinition, "UserSayDefinition", "json");
    }

    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.userSayDefinitionShrink)) {
      query["UserSayDefinition"] = request.userSayDefinitionShrink;
    }

    if (!$dara.isNull(request.userSayId)) {
      query["UserSayId"] = request.userSayId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyBeebotIntentUserSay",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyBeebotIntentUserSayResponse>(await this.callApi(params, req, runtime), new ModifyBeebotIntentUserSayResponse({}));
  }

  /**
   * ModifyBeebotIntentUserSay
   * 
   * @param request - ModifyBeebotIntentUserSayRequest
   * @returns ModifyBeebotIntentUserSayResponse
   */
  async modifyBeebotIntentUserSay(request: ModifyBeebotIntentUserSayRequest): Promise<ModifyBeebotIntentUserSayResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyBeebotIntentUserSayWithOptions(request, runtime);
  }

  /**
   * @param request - ModifyDialogueFlowRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyDialogueFlowResponse
   */
  async modifyDialogueFlowWithOptions(request: ModifyDialogueFlowRequest, runtime: $dara.RuntimeOptions): Promise<ModifyDialogueFlowResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.dialogueFlowDefinition)) {
      query["DialogueFlowDefinition"] = request.dialogueFlowDefinition;
    }

    if (!$dara.isNull(request.dialogueFlowId)) {
      query["DialogueFlowId"] = request.dialogueFlowId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.isDrafted)) {
      query["IsDrafted"] = request.isDrafted;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyDialogueFlow",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyDialogueFlowResponse>(await this.callApi(params, req, runtime), new ModifyDialogueFlowResponse({}));
  }

  /**
   * @param request - ModifyDialogueFlowRequest
   * @returns ModifyDialogueFlowResponse
   */
  async modifyDialogueFlow(request: ModifyDialogueFlowRequest): Promise<ModifyDialogueFlowResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyDialogueFlowWithOptions(request, runtime);
  }

  /**
   * @param request - ModifyEmptyNumberNoMoreCallsInfoRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyEmptyNumberNoMoreCallsInfoResponse
   */
  async modifyEmptyNumberNoMoreCallsInfoWithOptions(request: ModifyEmptyNumberNoMoreCallsInfoRequest, runtime: $dara.RuntimeOptions): Promise<ModifyEmptyNumberNoMoreCallsInfoResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.emptyNumberNoMoreCalls)) {
      query["EmptyNumberNoMoreCalls"] = request.emptyNumberNoMoreCalls;
    }

    if (!$dara.isNull(request.entryId)) {
      query["EntryId"] = request.entryId;
    }

    if (!$dara.isNull(request.strategyLevel)) {
      query["StrategyLevel"] = request.strategyLevel;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyEmptyNumberNoMoreCallsInfo",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyEmptyNumberNoMoreCallsInfoResponse>(await this.callApi(params, req, runtime), new ModifyEmptyNumberNoMoreCallsInfoResponse({}));
  }

  /**
   * @param request - ModifyEmptyNumberNoMoreCallsInfoRequest
   * @returns ModifyEmptyNumberNoMoreCallsInfoResponse
   */
  async modifyEmptyNumberNoMoreCallsInfo(request: ModifyEmptyNumberNoMoreCallsInfoRequest): Promise<ModifyEmptyNumberNoMoreCallsInfoResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyEmptyNumberNoMoreCallsInfoWithOptions(request, runtime);
  }

  /**
   * @param request - ModifyGlobalQuestionRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyGlobalQuestionResponse
   */
  async modifyGlobalQuestionWithOptions(request: ModifyGlobalQuestionRequest, runtime: $dara.RuntimeOptions): Promise<ModifyGlobalQuestionResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.answers)) {
      query["Answers"] = request.answers;
    }

    if (!$dara.isNull(request.globalQuestionId)) {
      query["GlobalQuestionId"] = request.globalQuestionId;
    }

    if (!$dara.isNull(request.globalQuestionName)) {
      query["GlobalQuestionName"] = request.globalQuestionName;
    }

    if (!$dara.isNull(request.globalQuestionType)) {
      query["GlobalQuestionType"] = request.globalQuestionType;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.questions)) {
      query["Questions"] = request.questions;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyGlobalQuestion",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyGlobalQuestionResponse>(await this.callApi(params, req, runtime), new ModifyGlobalQuestionResponse({}));
  }

  /**
   * @param request - ModifyGlobalQuestionRequest
   * @returns ModifyGlobalQuestionResponse
   */
  async modifyGlobalQuestion(request: ModifyGlobalQuestionRequest): Promise<ModifyGlobalQuestionResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyGlobalQuestionWithOptions(request, runtime);
  }

  /**
   * @param request - ModifyInstanceRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyInstanceResponse
   */
  async modifyInstanceWithOptions(request: ModifyInstanceRequest, runtime: $dara.RuntimeOptions): Promise<ModifyInstanceResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callingNumber)) {
      query["CallingNumber"] = request.callingNumber;
    }

    if (!$dara.isNull(request.instanceDescription)) {
      query["InstanceDescription"] = request.instanceDescription;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceName)) {
      query["InstanceName"] = request.instanceName;
    }

    if (!$dara.isNull(request.maxConcurrentConversation)) {
      query["MaxConcurrentConversation"] = request.maxConcurrentConversation;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyInstance",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyInstanceResponse>(await this.callApi(params, req, runtime), new ModifyInstanceResponse({}));
  }

  /**
   * @param request - ModifyInstanceRequest
   * @returns ModifyInstanceResponse
   */
  async modifyInstance(request: ModifyInstanceRequest): Promise<ModifyInstanceResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyInstanceWithOptions(request, runtime);
  }

  /**
   * @param request - ModifyIntentRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyIntentResponse
   */
  async modifyIntentWithOptions(request: ModifyIntentRequest, runtime: $dara.RuntimeOptions): Promise<ModifyIntentResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.intentDescription)) {
      query["IntentDescription"] = request.intentDescription;
    }

    if (!$dara.isNull(request.intentId)) {
      query["IntentId"] = request.intentId;
    }

    if (!$dara.isNull(request.intentName)) {
      query["IntentName"] = request.intentName;
    }

    if (!$dara.isNull(request.keywords)) {
      query["Keywords"] = request.keywords;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.utterances)) {
      query["Utterances"] = request.utterances;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyIntent",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyIntentResponse>(await this.callApi(params, req, runtime), new ModifyIntentResponse({}));
  }

  /**
   * @param request - ModifyIntentRequest
   * @returns ModifyIntentResponse
   */
  async modifyIntent(request: ModifyIntentRequest): Promise<ModifyIntentResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyIntentWithOptions(request, runtime);
  }

  /**
   * @param request - ModifyJobGroupRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyJobGroupResponse
   */
  async modifyJobGroupWithOptions(request: ModifyJobGroupRequest, runtime: $dara.RuntimeOptions): Promise<ModifyJobGroupResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callingNumber)) {
      query["CallingNumber"] = request.callingNumber;
    }

    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.flashSmsExtras)) {
      query["FlashSmsExtras"] = request.flashSmsExtras;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    if (!$dara.isNull(request.jobGroupStatus)) {
      query["JobGroupStatus"] = request.jobGroupStatus;
    }

    if (!$dara.isNull(request.minConcurrency)) {
      query["MinConcurrency"] = request.minConcurrency;
    }

    if (!$dara.isNull(request.name)) {
      query["Name"] = request.name;
    }

    if (!$dara.isNull(request.priority)) {
      query["Priority"] = request.priority;
    }

    if (!$dara.isNull(request.recallCallingNumber)) {
      query["RecallCallingNumber"] = request.recallCallingNumber;
    }

    if (!$dara.isNull(request.recallStrategyJson)) {
      query["RecallStrategyJson"] = request.recallStrategyJson;
    }

    if (!$dara.isNull(request.ringingDuration)) {
      query["RingingDuration"] = request.ringingDuration;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.strategyJson)) {
      query["StrategyJson"] = request.strategyJson;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyJobGroup",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyJobGroupResponse>(await this.callApi(params, req, runtime), new ModifyJobGroupResponse({}));
  }

  /**
   * @param request - ModifyJobGroupRequest
   * @returns ModifyJobGroupResponse
   */
  async modifyJobGroup(request: ModifyJobGroupRequest): Promise<ModifyJobGroupResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyJobGroupWithOptions(request, runtime);
  }

  /**
   * ModifyOutboundCallNumber
   * 
   * @param request - ModifyOutboundCallNumberRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyOutboundCallNumberResponse
   */
  async modifyOutboundCallNumberWithOptions(request: ModifyOutboundCallNumberRequest, runtime: $dara.RuntimeOptions): Promise<ModifyOutboundCallNumberResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.number)) {
      query["Number"] = request.number;
    }

    if (!$dara.isNull(request.outboundCallNumberId)) {
      query["OutboundCallNumberId"] = request.outboundCallNumberId;
    }

    if (!$dara.isNull(request.rateLimitCount)) {
      query["RateLimitCount"] = request.rateLimitCount;
    }

    if (!$dara.isNull(request.rateLimitPeriod)) {
      query["RateLimitPeriod"] = request.rateLimitPeriod;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyOutboundCallNumber",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyOutboundCallNumberResponse>(await this.callApi(params, req, runtime), new ModifyOutboundCallNumberResponse({}));
  }

  /**
   * ModifyOutboundCallNumber
   * 
   * @param request - ModifyOutboundCallNumberRequest
   * @returns ModifyOutboundCallNumberResponse
   */
  async modifyOutboundCallNumber(request: ModifyOutboundCallNumberRequest): Promise<ModifyOutboundCallNumberResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyOutboundCallNumberWithOptions(request, runtime);
  }

  /**
   * @param request - ModifyScriptRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyScriptResponse
   */
  async modifyScriptWithOptions(request: ModifyScriptRequest, runtime: $dara.RuntimeOptions): Promise<ModifyScriptResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.agentId)) {
      query["AgentId"] = request.agentId;
    }

    if (!$dara.isNull(request.agentKey)) {
      query["AgentKey"] = request.agentKey;
    }

    if (!$dara.isNull(request.agentLlm)) {
      query["AgentLlm"] = request.agentLlm;
    }

    if (!$dara.isNull(request.asrConfig)) {
      query["AsrConfig"] = request.asrConfig;
    }

    if (!$dara.isNull(request.chatConfig)) {
      query["ChatConfig"] = request.chatConfig;
    }

    if (!$dara.isNull(request.chatbotId)) {
      query["ChatbotId"] = request.chatbotId;
    }

    if (!$dara.isNull(request.emotionEnable)) {
      query["EmotionEnable"] = request.emotionEnable;
    }

    if (!$dara.isNull(request.industry)) {
      query["Industry"] = request.industry;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.longWaitEnable)) {
      query["LongWaitEnable"] = request.longWaitEnable;
    }

    if (!$dara.isNull(request.miniPlaybackConfigListJsonString)) {
      query["MiniPlaybackConfigListJsonString"] = request.miniPlaybackConfigListJsonString;
    }

    if (!$dara.isNull(request.miniPlaybackEnable)) {
      query["MiniPlaybackEnable"] = request.miniPlaybackEnable;
    }

    if (!$dara.isNull(request.newBargeInEnable)) {
      query["NewBargeInEnable"] = request.newBargeInEnable;
    }

    if (!$dara.isNull(request.nlsConfig)) {
      query["NlsConfig"] = request.nlsConfig;
    }

    if (!$dara.isNull(request.nluAccessType)) {
      query["NluAccessType"] = request.nluAccessType;
    }

    if (!$dara.isNull(request.nluEngine)) {
      query["NluEngine"] = request.nluEngine;
    }

    if (!$dara.isNull(request.scene)) {
      query["Scene"] = request.scene;
    }

    if (!$dara.isNull(request.scriptContent)) {
      query["ScriptContent"] = request.scriptContent;
    }

    if (!$dara.isNull(request.scriptDescription)) {
      query["ScriptDescription"] = request.scriptDescription;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.scriptName)) {
      query["ScriptName"] = request.scriptName;
    }

    if (!$dara.isNull(request.scriptWaveform)) {
      query["ScriptWaveform"] = request.scriptWaveform;
    }

    if (!$dara.isNull(request.ttsConfig)) {
      query["TtsConfig"] = request.ttsConfig;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyScript",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyScriptResponse>(await this.callApi(params, req, runtime), new ModifyScriptResponse({}));
  }

  /**
   * @param request - ModifyScriptRequest
   * @returns ModifyScriptResponse
   */
  async modifyScript(request: ModifyScriptRequest): Promise<ModifyScriptResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyScriptWithOptions(request, runtime);
  }

  /**
   * @param request - ModifyScriptVoiceConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyScriptVoiceConfigResponse
   */
  async modifyScriptVoiceConfigWithOptions(request: ModifyScriptVoiceConfigRequest, runtime: $dara.RuntimeOptions): Promise<ModifyScriptVoiceConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.scriptVoiceConfigId)) {
      query["ScriptVoiceConfigId"] = request.scriptVoiceConfigId;
    }

    if (!$dara.isNull(request.scriptWaveformRelation)) {
      query["ScriptWaveformRelation"] = request.scriptWaveformRelation;
    }

    if (!$dara.isNull(request.type)) {
      query["Type"] = request.type;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyScriptVoiceConfig",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyScriptVoiceConfigResponse>(await this.callApi(params, req, runtime), new ModifyScriptVoiceConfigResponse({}));
  }

  /**
   * @param request - ModifyScriptVoiceConfigRequest
   * @returns ModifyScriptVoiceConfigResponse
   */
  async modifyScriptVoiceConfig(request: ModifyScriptVoiceConfigRequest): Promise<ModifyScriptVoiceConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyScriptVoiceConfigWithOptions(request, runtime);
  }

  /**
   * @param request - ModifyTTSConfigRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyTTSConfigResponse
   */
  async modifyTTSConfigWithOptions(request: ModifyTTSConfigRequest, runtime: $dara.RuntimeOptions): Promise<ModifyTTSConfigResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.appKey)) {
      query["AppKey"] = request.appKey;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.nlsServiceType)) {
      query["NlsServiceType"] = request.nlsServiceType;
    }

    if (!$dara.isNull(request.pitchRate)) {
      query["PitchRate"] = request.pitchRate;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.speechRate)) {
      query["SpeechRate"] = request.speechRate;
    }

    if (!$dara.isNull(request.voice)) {
      query["Voice"] = request.voice;
    }

    if (!$dara.isNull(request.volume)) {
      query["Volume"] = request.volume;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyTTSConfig",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyTTSConfigResponse>(await this.callApi(params, req, runtime), new ModifyTTSConfigResponse({}));
  }

  /**
   * @param request - ModifyTTSConfigRequest
   * @returns ModifyTTSConfigResponse
   */
  async modifyTTSConfig(request: ModifyTTSConfigRequest): Promise<ModifyTTSConfigResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyTTSConfigWithOptions(request, runtime);
  }

  /**
   * @param request - ModifyTagGroupsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ModifyTagGroupsResponse
   */
  async modifyTagGroupsWithOptions(request: ModifyTagGroupsRequest, runtime: $dara.RuntimeOptions): Promise<ModifyTagGroupsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    if (!$dara.isNull(request.tagGroups)) {
      query["TagGroups"] = request.tagGroups;
    }

    if (!$dara.isNull(request.tags)) {
      query["Tags"] = request.tags;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ModifyTagGroups",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ModifyTagGroupsResponse>(await this.callApi(params, req, runtime), new ModifyTagGroupsResponse({}));
  }

  /**
   * @param request - ModifyTagGroupsRequest
   * @returns ModifyTagGroupsResponse
   */
  async modifyTagGroups(request: ModifyTagGroupsRequest): Promise<ModifyTagGroupsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.modifyTagGroupsWithOptions(request, runtime);
  }

  /**
   * @param request - PublishScriptRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PublishScriptResponse
   */
  async publishScriptWithOptions(request: PublishScriptRequest, runtime: $dara.RuntimeOptions): Promise<PublishScriptResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PublishScript",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<PublishScriptResponse>(await this.callApi(params, req, runtime), new PublishScriptResponse({}));
  }

  /**
   * @param request - PublishScriptRequest
   * @returns PublishScriptResponse
   */
  async publishScript(request: PublishScriptRequest): Promise<PublishScriptResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.publishScriptWithOptions(request, runtime);
  }

  /**
   * @param request - PublishScriptForDebugRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns PublishScriptForDebugResponse
   */
  async publishScriptForDebugWithOptions(request: PublishScriptForDebugRequest, runtime: $dara.RuntimeOptions): Promise<PublishScriptForDebugResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "PublishScriptForDebug",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<PublishScriptForDebugResponse>(await this.callApi(params, req, runtime), new PublishScriptForDebugResponse({}));
  }

  /**
   * @param request - PublishScriptForDebugRequest
   * @returns PublishScriptForDebugResponse
   */
  async publishScriptForDebug(request: PublishScriptForDebugRequest): Promise<PublishScriptForDebugResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.publishScriptForDebugWithOptions(request, runtime);
  }

  /**
   * QueryJobs
   * 
   * @param request - QueryJobsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryJobsResponse
   */
  async queryJobsWithOptions(request: QueryJobsRequest, runtime: $dara.RuntimeOptions): Promise<QueryJobsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.contactName)) {
      query["ContactName"] = request.contactName;
    }

    if (!$dara.isNull(request.endTime)) {
      query["EndTime"] = request.endTime;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.phoneNumber)) {
      query["PhoneNumber"] = request.phoneNumber;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    if (!$dara.isNull(request.startTime)) {
      query["StartTime"] = request.startTime;
    }

    if (!$dara.isNull(request.timeAlignment)) {
      query["TimeAlignment"] = request.timeAlignment;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryJobs",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<QueryJobsResponse>(await this.callApi(params, req, runtime), new QueryJobsResponse({}));
  }

  /**
   * QueryJobs
   * 
   * @param request - QueryJobsRequest
   * @returns QueryJobsResponse
   */
  async queryJobs(request: QueryJobsRequest): Promise<QueryJobsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryJobsWithOptions(request, runtime);
  }

  /**
   * @param request - QueryJobsWithResultRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryJobsWithResultResponse
   */
  async queryJobsWithResultWithOptions(request: QueryJobsWithResultRequest, runtime: $dara.RuntimeOptions): Promise<QueryJobsWithResultResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.endActualTimeFilter)) {
      query["EndActualTimeFilter"] = request.endActualTimeFilter;
    }

    if (!$dara.isNull(request.hasAnsweredFilter)) {
      query["HasAnsweredFilter"] = request.hasAnsweredFilter;
    }

    if (!$dara.isNull(request.hasHangUpByRejectionFilter)) {
      query["HasHangUpByRejectionFilter"] = request.hasHangUpByRejectionFilter;
    }

    if (!$dara.isNull(request.hasReachedEndOfFlowFilter)) {
      query["HasReachedEndOfFlowFilter"] = request.hasReachedEndOfFlowFilter;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobFailureReasonsFilter)) {
      query["JobFailureReasonsFilter"] = request.jobFailureReasonsFilter;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    if (!$dara.isNull(request.jobStatusFilter)) {
      query["JobStatusFilter"] = request.jobStatusFilter;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.queryText)) {
      query["QueryText"] = request.queryText;
    }

    if (!$dara.isNull(request.startActualTimeFilter)) {
      query["StartActualTimeFilter"] = request.startActualTimeFilter;
    }

    if (!$dara.isNull(request.taskStatusFilter)) {
      query["TaskStatusFilter"] = request.taskStatusFilter;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryJobsWithResult",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<QueryJobsWithResultResponse>(await this.callApi(params, req, runtime), new QueryJobsWithResultResponse({}));
  }

  /**
   * @param request - QueryJobsWithResultRequest
   * @returns QueryJobsWithResultResponse
   */
  async queryJobsWithResult(request: QueryJobsWithResultRequest): Promise<QueryJobsWithResultResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryJobsWithResultWithOptions(request, runtime);
  }

  /**
   * @param request - QueryScriptWaveformsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryScriptWaveformsResponse
   */
  async queryScriptWaveformsWithOptions(request: QueryScriptWaveformsRequest, runtime: $dara.RuntimeOptions): Promise<QueryScriptWaveformsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptContent)) {
      query["ScriptContent"] = request.scriptContent;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryScriptWaveforms",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<QueryScriptWaveformsResponse>(await this.callApi(params, req, runtime), new QueryScriptWaveformsResponse({}));
  }

  /**
   * @param request - QueryScriptWaveformsRequest
   * @returns QueryScriptWaveformsResponse
   */
  async queryScriptWaveforms(request: QueryScriptWaveformsRequest): Promise<QueryScriptWaveformsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryScriptWaveformsWithOptions(request, runtime);
  }

  /**
   * @param request - QueryScriptsByStatusRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns QueryScriptsByStatusResponse
   */
  async queryScriptsByStatusWithOptions(request: QueryScriptsByStatusRequest, runtime: $dara.RuntimeOptions): Promise<QueryScriptsByStatusResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.pageNumber)) {
      query["PageNumber"] = request.pageNumber;
    }

    if (!$dara.isNull(request.pageSize)) {
      query["PageSize"] = request.pageSize;
    }

    if (!$dara.isNull(request.statusList)) {
      query["StatusList"] = request.statusList;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "QueryScriptsByStatus",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<QueryScriptsByStatusResponse>(await this.callApi(params, req, runtime), new QueryScriptsByStatusResponse({}));
  }

  /**
   * @param request - QueryScriptsByStatusRequest
   * @returns QueryScriptsByStatusResponse
   */
  async queryScriptsByStatus(request: QueryScriptsByStatusRequest): Promise<QueryScriptsByStatusResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.queryScriptsByStatusWithOptions(request, runtime);
  }

  /**
   * @param request - RecordFailureRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RecordFailureResponse
   */
  async recordFailureWithOptions(request: RecordFailureRequest, runtime: $dara.RuntimeOptions): Promise<RecordFailureResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.actualTime)) {
      query["ActualTime"] = request.actualTime;
    }

    if (!$dara.isNull(request.callId)) {
      query["CallId"] = request.callId;
    }

    if (!$dara.isNull(request.calledNumber)) {
      query["CalledNumber"] = request.calledNumber;
    }

    if (!$dara.isNull(request.callingNumber)) {
      query["CallingNumber"] = request.callingNumber;
    }

    if (!$dara.isNull(request.dispositionCode)) {
      query["DispositionCode"] = request.dispositionCode;
    }

    if (!$dara.isNull(request.exceptionCodes)) {
      query["ExceptionCodes"] = request.exceptionCodes;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RecordFailure",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<RecordFailureResponse>(await this.callApi(params, req, runtime), new RecordFailureResponse({}));
  }

  /**
   * @param request - RecordFailureRequest
   * @returns RecordFailureResponse
   */
  async recordFailure(request: RecordFailureRequest): Promise<RecordFailureResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.recordFailureWithOptions(request, runtime);
  }

  /**
   * @param request - ResumeJobsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns ResumeJobsResponse
   */
  async resumeJobsWithOptions(request: ResumeJobsRequest, runtime: $dara.RuntimeOptions): Promise<ResumeJobsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.all)) {
      query["All"] = request.all;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.jobReferenceId)) {
      query["JobReferenceId"] = request.jobReferenceId;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "ResumeJobs",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<ResumeJobsResponse>(await this.callApi(params, req, runtime), new ResumeJobsResponse({}));
  }

  /**
   * @param request - ResumeJobsRequest
   * @returns ResumeJobsResponse
   */
  async resumeJobs(request: ResumeJobsRequest): Promise<ResumeJobsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.resumeJobsWithOptions(request, runtime);
  }

  /**
   * @param request - RollbackScriptRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns RollbackScriptResponse
   */
  async rollbackScriptWithOptions(request: RollbackScriptRequest, runtime: $dara.RuntimeOptions): Promise<RollbackScriptResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.rollbackVersion)) {
      query["RollbackVersion"] = request.rollbackVersion;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "RollbackScript",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<RollbackScriptResponse>(await this.callApi(params, req, runtime), new RollbackScriptResponse({}));
  }

  /**
   * @param request - RollbackScriptRequest
   * @returns RollbackScriptResponse
   */
  async rollbackScript(request: RollbackScriptRequest): Promise<RollbackScriptResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.rollbackScriptWithOptions(request, runtime);
  }

  /**
   * @param request - SaveAfterAnswerDelayPlaybackRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SaveAfterAnswerDelayPlaybackResponse
   */
  async saveAfterAnswerDelayPlaybackWithOptions(request: SaveAfterAnswerDelayPlaybackRequest, runtime: $dara.RuntimeOptions): Promise<SaveAfterAnswerDelayPlaybackResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.afterAnswerDelayPlayback)) {
      query["AfterAnswerDelayPlayback"] = request.afterAnswerDelayPlayback;
    }

    if (!$dara.isNull(request.entryId)) {
      query["EntryId"] = request.entryId;
    }

    if (!$dara.isNull(request.strategyLevel)) {
      query["StrategyLevel"] = request.strategyLevel;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SaveAfterAnswerDelayPlayback",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SaveAfterAnswerDelayPlaybackResponse>(await this.callApi(params, req, runtime), new SaveAfterAnswerDelayPlaybackResponse({}));
  }

  /**
   * @param request - SaveAfterAnswerDelayPlaybackRequest
   * @returns SaveAfterAnswerDelayPlaybackResponse
   */
  async saveAfterAnswerDelayPlayback(request: SaveAfterAnswerDelayPlaybackRequest): Promise<SaveAfterAnswerDelayPlaybackResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.saveAfterAnswerDelayPlaybackWithOptions(request, runtime);
  }

  /**
   * @param request - SaveAnnotationMissionSessionListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SaveAnnotationMissionSessionListResponse
   */
  async saveAnnotationMissionSessionListWithOptions(request: SaveAnnotationMissionSessionListRequest, runtime: $dara.RuntimeOptions): Promise<SaveAnnotationMissionSessionListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.agentId)) {
      query["AgentId"] = request.agentId;
    }

    if (!$dara.isNull(request.agentKey)) {
      query["AgentKey"] = request.agentKey;
    }

    if (!$dara.isNull(request.annotationMissionDataSourceType)) {
      query["AnnotationMissionDataSourceType"] = request.annotationMissionDataSourceType;
    }

    if (!$dara.isNull(request.annotationMissionSessionList)) {
      query["AnnotationMissionSessionList"] = request.annotationMissionSessionList;
    }

    if (!$dara.isNull(request.annotationMissionSessionListJsonString)) {
      query["AnnotationMissionSessionListJsonString"] = request.annotationMissionSessionListJsonString;
    }

    if (!$dara.isNull(request.environment)) {
      query["Environment"] = request.environment;
    }

    if (!$dara.isNull(request.userNick)) {
      query["UserNick"] = request.userNick;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SaveAnnotationMissionSessionList",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SaveAnnotationMissionSessionListResponse>(await this.callApi(params, req, runtime), new SaveAnnotationMissionSessionListResponse({}));
  }

  /**
   * @param request - SaveAnnotationMissionSessionListRequest
   * @returns SaveAnnotationMissionSessionListResponse
   */
  async saveAnnotationMissionSessionList(request: SaveAnnotationMissionSessionListRequest): Promise<SaveAnnotationMissionSessionListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.saveAnnotationMissionSessionListWithOptions(request, runtime);
  }

  /**
   * @param request - SaveAnnotationMissionTagInfoListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SaveAnnotationMissionTagInfoListResponse
   */
  async saveAnnotationMissionTagInfoListWithOptions(request: SaveAnnotationMissionTagInfoListRequest, runtime: $dara.RuntimeOptions): Promise<SaveAnnotationMissionTagInfoListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.annotationMissionTagInfoList)) {
      query["AnnotationMissionTagInfoList"] = request.annotationMissionTagInfoList;
    }

    if (!$dara.isNull(request.annotationMissionTagInfoListJsonString)) {
      query["AnnotationMissionTagInfoListJsonString"] = request.annotationMissionTagInfoListJsonString;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.reset)) {
      query["Reset"] = request.reset;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SaveAnnotationMissionTagInfoList",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SaveAnnotationMissionTagInfoListResponse>(await this.callApi(params, req, runtime), new SaveAnnotationMissionTagInfoListResponse({}));
  }

  /**
   * @param request - SaveAnnotationMissionTagInfoListRequest
   * @returns SaveAnnotationMissionTagInfoListResponse
   */
  async saveAnnotationMissionTagInfoList(request: SaveAnnotationMissionTagInfoListRequest): Promise<SaveAnnotationMissionTagInfoListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.saveAnnotationMissionTagInfoListWithOptions(request, runtime);
  }

  /**
   * @param request - SaveBaseStrategyPeriodRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SaveBaseStrategyPeriodResponse
   */
  async saveBaseStrategyPeriodWithOptions(request: SaveBaseStrategyPeriodRequest, runtime: $dara.RuntimeOptions): Promise<SaveBaseStrategyPeriodResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.entryId)) {
      query["EntryId"] = request.entryId;
    }

    if (!$dara.isNull(request.onlyWeekdays)) {
      query["OnlyWeekdays"] = request.onlyWeekdays;
    }

    if (!$dara.isNull(request.onlyWorkdays)) {
      query["OnlyWorkdays"] = request.onlyWorkdays;
    }

    if (!$dara.isNull(request.strategyLevel)) {
      query["StrategyLevel"] = request.strategyLevel;
    }

    if (!$dara.isNull(request.workingTime)) {
      query["WorkingTime"] = request.workingTime;
    }

    if (!$dara.isNull(request.workingTimeFramesJson)) {
      query["WorkingTimeFramesJson"] = request.workingTimeFramesJson;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SaveBaseStrategyPeriod",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SaveBaseStrategyPeriodResponse>(await this.callApi(params, req, runtime), new SaveBaseStrategyPeriodResponse({}));
  }

  /**
   * @param request - SaveBaseStrategyPeriodRequest
   * @returns SaveBaseStrategyPeriodResponse
   */
  async saveBaseStrategyPeriod(request: SaveBaseStrategyPeriodRequest): Promise<SaveBaseStrategyPeriodResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.saveBaseStrategyPeriodWithOptions(request, runtime);
  }

  /**
   * @param request - SaveContactBlockListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SaveContactBlockListResponse
   */
  async saveContactBlockListWithOptions(request: SaveContactBlockListRequest, runtime: $dara.RuntimeOptions): Promise<SaveContactBlockListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.contactBlockListList)) {
      query["ContactBlockListList"] = request.contactBlockListList;
    }

    if (!$dara.isNull(request.contactBlockListsJson)) {
      query["ContactBlockListsJson"] = request.contactBlockListsJson;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SaveContactBlockList",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SaveContactBlockListResponse>(await this.callApi(params, req, runtime), new SaveContactBlockListResponse({}));
  }

  /**
   * @param request - SaveContactBlockListRequest
   * @returns SaveContactBlockListResponse
   */
  async saveContactBlockList(request: SaveContactBlockListRequest): Promise<SaveContactBlockListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.saveContactBlockListWithOptions(request, runtime);
  }

  /**
   * @param request - SaveContactWhiteListRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SaveContactWhiteListResponse
   */
  async saveContactWhiteListWithOptions(request: SaveContactWhiteListRequest, runtime: $dara.RuntimeOptions): Promise<SaveContactWhiteListResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.contactWhiteListList)) {
      query["ContactWhiteListList"] = request.contactWhiteListList;
    }

    if (!$dara.isNull(request.contactWhiteListsJson)) {
      query["ContactWhiteListsJson"] = request.contactWhiteListsJson;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SaveContactWhiteList",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SaveContactWhiteListResponse>(await this.callApi(params, req, runtime), new SaveContactWhiteListResponse({}));
  }

  /**
   * @param request - SaveContactWhiteListRequest
   * @returns SaveContactWhiteListResponse
   */
  async saveContactWhiteList(request: SaveContactWhiteListRequest): Promise<SaveContactWhiteListResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.saveContactWhiteListWithOptions(request, runtime);
  }

  /**
   * @param request - SaveEffectiveDaysRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SaveEffectiveDaysResponse
   */
  async saveEffectiveDaysWithOptions(request: SaveEffectiveDaysRequest, runtime: $dara.RuntimeOptions): Promise<SaveEffectiveDaysResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.effectiveDays)) {
      query["EffectiveDays"] = request.effectiveDays;
    }

    if (!$dara.isNull(request.entryId)) {
      query["EntryId"] = request.entryId;
    }

    if (!$dara.isNull(request.strategyLevel)) {
      query["StrategyLevel"] = request.strategyLevel;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SaveEffectiveDays",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SaveEffectiveDaysResponse>(await this.callApi(params, req, runtime), new SaveEffectiveDaysResponse({}));
  }

  /**
   * @param request - SaveEffectiveDaysRequest
   * @returns SaveEffectiveDaysResponse
   */
  async saveEffectiveDays(request: SaveEffectiveDaysRequest): Promise<SaveEffectiveDaysResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.saveEffectiveDaysWithOptions(request, runtime);
  }

  /**
   * @param request - SaveMaxAttemptsPerDayRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SaveMaxAttemptsPerDayResponse
   */
  async saveMaxAttemptsPerDayWithOptions(request: SaveMaxAttemptsPerDayRequest, runtime: $dara.RuntimeOptions): Promise<SaveMaxAttemptsPerDayResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.entryId)) {
      query["EntryId"] = request.entryId;
    }

    if (!$dara.isNull(request.maxAttemptsPerDay)) {
      query["MaxAttemptsPerDay"] = request.maxAttemptsPerDay;
    }

    if (!$dara.isNull(request.strategyLevel)) {
      query["StrategyLevel"] = request.strategyLevel;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SaveMaxAttemptsPerDay",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SaveMaxAttemptsPerDayResponse>(await this.callApi(params, req, runtime), new SaveMaxAttemptsPerDayResponse({}));
  }

  /**
   * @param request - SaveMaxAttemptsPerDayRequest
   * @returns SaveMaxAttemptsPerDayResponse
   */
  async saveMaxAttemptsPerDay(request: SaveMaxAttemptsPerDayRequest): Promise<SaveMaxAttemptsPerDayResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.saveMaxAttemptsPerDayWithOptions(request, runtime);
  }

  /**
   * @param request - SearchTaskRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SearchTaskResponse
   */
  async searchTaskWithOptions(request: SearchTaskRequest, runtime: $dara.RuntimeOptions): Promise<SearchTaskResponse> {
    request.validate();
    let query = OpenApiUtil.query(request.toMap());
    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SearchTask",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "GET",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SearchTaskResponse>(await this.callApi(params, req, runtime), new SearchTaskResponse({}));
  }

  /**
   * @param request - SearchTaskRequest
   * @returns SearchTaskResponse
   */
  async searchTask(request: SearchTaskRequest): Promise<SearchTaskResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.searchTaskWithOptions(request, runtime);
  }

  /**
   * @param request - StartJobRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns StartJobResponse
   */
  async startJobWithOptions(request: StartJobRequest, runtime: $dara.RuntimeOptions): Promise<StartJobResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callingNumber)) {
      query["CallingNumber"] = request.callingNumber;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    if (!$dara.isNull(request.jobJson)) {
      query["JobJson"] = request.jobJson;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "StartJob",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<StartJobResponse>(await this.callApi(params, req, runtime), new StartJobResponse({}));
  }

  /**
   * @param request - StartJobRequest
   * @returns StartJobResponse
   */
  async startJob(request: StartJobRequest): Promise<StartJobResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.startJobWithOptions(request, runtime);
  }

  /**
   * @param request - SubmitBatchJobsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SubmitBatchJobsResponse
   */
  async submitBatchJobsWithOptions(request: SubmitBatchJobsRequest, runtime: $dara.RuntimeOptions): Promise<SubmitBatchJobsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SubmitBatchJobs",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SubmitBatchJobsResponse>(await this.callApi(params, req, runtime), new SubmitBatchJobsResponse({}));
  }

  /**
   * @param request - SubmitBatchJobsRequest
   * @returns SubmitBatchJobsResponse
   */
  async submitBatchJobs(request: SubmitBatchJobsRequest): Promise<SubmitBatchJobsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.submitBatchJobsWithOptions(request, runtime);
  }

  /**
   * @param request - SubmitRecordingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SubmitRecordingResponse
   */
  async submitRecordingWithOptions(request: SubmitRecordingRequest, runtime: $dara.RuntimeOptions): Promise<SubmitRecordingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.mergedRecording)) {
      query["MergedRecording"] = request.mergedRecording;
    }

    if (!$dara.isNull(request.resourceRecording)) {
      query["ResourceRecording"] = request.resourceRecording;
    }

    if (!$dara.isNull(request.taskId)) {
      query["TaskId"] = request.taskId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SubmitRecording",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SubmitRecordingResponse>(await this.callApi(params, req, runtime), new SubmitRecordingResponse({}));
  }

  /**
   * @param request - SubmitRecordingRequest
   * @returns SubmitRecordingResponse
   */
  async submitRecording(request: SubmitRecordingRequest): Promise<SubmitRecordingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.submitRecordingWithOptions(request, runtime);
  }

  /**
   * @param request - SubmitScriptReviewRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SubmitScriptReviewResponse
   */
  async submitScriptReviewWithOptions(request: SubmitScriptReviewRequest, runtime: $dara.RuntimeOptions): Promise<SubmitScriptReviewResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.description)) {
      query["Description"] = request.description;
    }

    if (!$dara.isNull(request.from)) {
      query["From"] = request.from;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SubmitScriptReview",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SubmitScriptReviewResponse>(await this.callApi(params, req, runtime), new SubmitScriptReviewResponse({}));
  }

  /**
   * @param request - SubmitScriptReviewRequest
   * @returns SubmitScriptReviewResponse
   */
  async submitScriptReview(request: SubmitScriptReviewRequest): Promise<SubmitScriptReviewResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.submitScriptReviewWithOptions(request, runtime);
  }

  /**
   * @param request - SuspendCallRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SuspendCallResponse
   */
  async suspendCallWithOptions(request: SuspendCallRequest, runtime: $dara.RuntimeOptions): Promise<SuspendCallResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.calledNumbers)) {
      query["CalledNumbers"] = request.calledNumbers;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SuspendCall",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SuspendCallResponse>(await this.callApi(params, req, runtime), new SuspendCallResponse({}));
  }

  /**
   * @param request - SuspendCallRequest
   * @returns SuspendCallResponse
   */
  async suspendCall(request: SuspendCallRequest): Promise<SuspendCallResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.suspendCallWithOptions(request, runtime);
  }

  /**
   * @param request - SuspendCallWithFileRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SuspendCallWithFileResponse
   */
  async suspendCallWithFileWithOptions(request: SuspendCallWithFileRequest, runtime: $dara.RuntimeOptions): Promise<SuspendCallWithFileResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.filePath)) {
      query["FilePath"] = request.filePath;
    }

    if (!$dara.isNull(request.groupId)) {
      query["GroupId"] = request.groupId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SuspendCallWithFile",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SuspendCallWithFileResponse>(await this.callApi(params, req, runtime), new SuspendCallWithFileResponse({}));
  }

  /**
   * @param request - SuspendCallWithFileRequest
   * @returns SuspendCallWithFileResponse
   */
  async suspendCallWithFile(request: SuspendCallWithFileRequest): Promise<SuspendCallWithFileResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.suspendCallWithFileWithOptions(request, runtime);
  }

  /**
   * @param request - SuspendJobsRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns SuspendJobsResponse
   */
  async suspendJobsWithOptions(request: SuspendJobsRequest, runtime: $dara.RuntimeOptions): Promise<SuspendJobsResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.all)) {
      query["All"] = request.all;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.jobGroupId)) {
      query["JobGroupId"] = request.jobGroupId;
    }

    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    if (!$dara.isNull(request.jobReferenceId)) {
      query["JobReferenceId"] = request.jobReferenceId;
    }

    if (!$dara.isNull(request.scenarioId)) {
      query["ScenarioId"] = request.scenarioId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "SuspendJobs",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<SuspendJobsResponse>(await this.callApi(params, req, runtime), new SuspendJobsResponse({}));
  }

  /**
   * @param request - SuspendJobsRequest
   * @returns SuspendJobsResponse
   */
  async suspendJobs(request: SuspendJobsRequest): Promise<SuspendJobsResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.suspendJobsWithOptions(request, runtime);
  }

  /**
   * @remarks
   * *
   * 
   * @param request - TagResourcesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TagResourcesResponse
   */
  async tagResourcesWithOptions(request: TagResourcesRequest, runtime: $dara.RuntimeOptions): Promise<TagResourcesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.tag)) {
      query["Tag"] = request.tag;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "TagResources",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<TagResourcesResponse>(await this.callApi(params, req, runtime), new TagResourcesResponse({}));
  }

  /**
   * @remarks
   * *
   * 
   * @param request - TagResourcesRequest
   * @returns TagResourcesResponse
   */
  async tagResources(request: TagResourcesRequest): Promise<TagResourcesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.tagResourcesWithOptions(request, runtime);
  }

  /**
   * TaskPreparing
   * 
   * @param request - TaskPreparingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TaskPreparingResponse
   */
  async taskPreparingWithOptions(request: TaskPreparingRequest, runtime: $dara.RuntimeOptions): Promise<TaskPreparingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.instanceOwnerId)) {
      query["InstanceOwnerId"] = request.instanceOwnerId;
    }

    if (!$dara.isNull(request.jobId)) {
      query["JobId"] = request.jobId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "TaskPreparing",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<TaskPreparingResponse>(await this.callApi(params, req, runtime), new TaskPreparingResponse({}));
  }

  /**
   * TaskPreparing
   * 
   * @param request - TaskPreparingRequest
   * @returns TaskPreparingResponse
   */
  async taskPreparing(request: TaskPreparingRequest): Promise<TaskPreparingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.taskPreparingWithOptions(request, runtime);
  }

  /**
   * @param request - TerminateCallRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns TerminateCallResponse
   */
  async terminateCallWithOptions(request: TerminateCallRequest, runtime: $dara.RuntimeOptions): Promise<TerminateCallResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.callId)) {
      query["CallId"] = request.callId;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "TerminateCall",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<TerminateCallResponse>(await this.callApi(params, req, runtime), new TerminateCallResponse({}));
  }

  /**
   * @param request - TerminateCallRequest
   * @returns TerminateCallResponse
   */
  async terminateCall(request: TerminateCallRequest): Promise<TerminateCallResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.terminateCallWithOptions(request, runtime);
  }

  /**
   * @param request - UntagResourcesRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UntagResourcesResponse
   */
  async untagResourcesWithOptions(request: UntagResourcesRequest, runtime: $dara.RuntimeOptions): Promise<UntagResourcesResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.all)) {
      query["All"] = request.all;
    }

    if (!$dara.isNull(request.regionId)) {
      query["RegionId"] = request.regionId;
    }

    if (!$dara.isNull(request.resourceId)) {
      query["ResourceId"] = request.resourceId;
    }

    if (!$dara.isNull(request.resourceType)) {
      query["ResourceType"] = request.resourceType;
    }

    if (!$dara.isNull(request.tagKey)) {
      query["TagKey"] = request.tagKey;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UntagResources",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<UntagResourcesResponse>(await this.callApi(params, req, runtime), new UntagResourcesResponse({}));
  }

  /**
   * @param request - UntagResourcesRequest
   * @returns UntagResourcesResponse
   */
  async untagResources(request: UntagResourcesRequest): Promise<UntagResourcesResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.untagResourcesWithOptions(request, runtime);
  }

  /**
   * @param request - UploadScriptRecordingRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns UploadScriptRecordingResponse
   */
  async uploadScriptRecordingWithOptions(request: UploadScriptRecordingRequest, runtime: $dara.RuntimeOptions): Promise<UploadScriptRecordingResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.content)) {
      query["Content"] = request.content;
    }

    if (!$dara.isNull(request.fileId)) {
      query["FileId"] = request.fileId;
    }

    if (!$dara.isNull(request.fileName)) {
      query["FileName"] = request.fileName;
    }

    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "UploadScriptRecording",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<UploadScriptRecordingResponse>(await this.callApi(params, req, runtime), new UploadScriptRecordingResponse({}));
  }

  /**
   * @param request - UploadScriptRecordingRequest
   * @returns UploadScriptRecordingResponse
   */
  async uploadScriptRecording(request: UploadScriptRecordingRequest): Promise<UploadScriptRecordingResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.uploadScriptRecordingWithOptions(request, runtime);
  }

  /**
   * WithdrawScriptReview
   * 
   * @remarks
   * ***
   * 
   * @param request - WithdrawScriptReviewRequest
   * @param runtime - runtime options for this request RuntimeOptions
   * @returns WithdrawScriptReviewResponse
   */
  async withdrawScriptReviewWithOptions(request: WithdrawScriptReviewRequest, runtime: $dara.RuntimeOptions): Promise<WithdrawScriptReviewResponse> {
    request.validate();
    let query = { };
    if (!$dara.isNull(request.instanceId)) {
      query["InstanceId"] = request.instanceId;
    }

    if (!$dara.isNull(request.scriptId)) {
      query["ScriptId"] = request.scriptId;
    }

    let req = new $OpenApiUtil.OpenApiRequest({
      query: OpenApiUtil.query(query),
    });
    let params = new $OpenApiUtil.Params({
      action: "WithdrawScriptReview",
      version: "2019-12-26",
      protocol: "HTTPS",
      pathname: "/",
      method: "POST",
      authType: "AK",
      style: "RPC",
      reqBodyType: "formData",
      bodyType: "json",
    });
    return $dara.cast<WithdrawScriptReviewResponse>(await this.callApi(params, req, runtime), new WithdrawScriptReviewResponse({}));
  }

  /**
   * WithdrawScriptReview
   * 
   * @remarks
   * ***
   * 
   * @param request - WithdrawScriptReviewRequest
   * @returns WithdrawScriptReviewResponse
   */
  async withdrawScriptReview(request: WithdrawScriptReviewRequest): Promise<WithdrawScriptReviewResponse> {
    let runtime = new $dara.RuntimeOptions({ });
    return await this.withdrawScriptReviewWithOptions(request, runtime);
  }

}
